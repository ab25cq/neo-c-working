; ModuleID = 'tcc.c'
source_filename = "tcc.c"

%_IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %_IO_marker*, %_IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %_IO_codecvt*, %_IO_wide_data*, %_IO_FILE*, i8*, i64, i32, [20 x i8] }
%_IO_marker = type opaque
%_IO_codecvt = type opaque
%_IO_wide_data = type opaque
%BufferedFile = type { i8*, i8*, i32, i32, i32, i32, i32*, i8, [512 x i8], [1024 x i8], [8193 x i8] }
%CValue = type { fp128 }
%CString = type { i32, i8*, i32, i8* }
%Section = type { i64, i8*, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, %Section*, %Section*, %Section*, %Section*, [1 x i8] }
%CType = type { i32, %Sym* }
%Sym = type { i32, i64, i64, %CType, %Sym*, %Sym*, %Sym* }
%TokenSym = type { %TokenSym*, %Sym*, %Sym*, %Sym*, %Sym*, i32, i32, [1 x i8] }
%SValue = type { %CType, i16, i16, %CValue, %Sym* }
%TCCState = type { i32, %BufferedFile**, i32*, i8**, i32, i8**, i32, %CachedInclude**, i32, i8**, i32, %DLLReference**, i32, %Section**, i32, %Section**, i32, %Section*, %Section*, i64*, i32, i32*, %Section*, %Section*, i32, i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, void (i8*, i8*)*, i32, [1 x %__jmp_buf_tag], i32, %Sym*, [32 x %BufferedFile*], [64 x i32], [512 x i32], [8 x i32], i32*, %_IO_FILE*, i32, i8*, i32 }
%CachedInclude = type { i32, i32, i8, [1 x i8] }
%DLLReference = type { i32, i8*, [1 x i8] }
%__jmp_buf_tag = type { [8 x i64], i32, %come_anon5 }
%come_anon5 = type { [16 x i64] }
%FlagDef = type { i16, i16, i8* }
%TCCOption = type { i8*, i16, i16 }
%__locale_struct = type { [13 x %__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%__locale_data = type opaque
%come_anon6 = type { [16 x i64] }
%timeval = type { i64, i64 }
%timespec = type { i64, i64 }
%random_data = type { i32*, i32*, i32*, i32, i32, i32, i32* }
%drand48_data = type { [3 x i16], [3 x i16], i16, i16, i64 }
%come_anon1 = type { i32, i32 }
%come_anon2 = type { i64, i64 }
%come_anon3 = type { i64, i64 }
%_IO_cookie_io_functions_t = type { i64 (i8*, i8*, i64)**, i64 (i8*, i8*, i64)**, i32 (i8*, i64*, i32)**, i32 (i8*)** }
%__builtin_va_list = type { i32, i32, i8*, i8* }
%_G_fpos_t = type { i64, %come_anon27 }
%come_anon27 = type { i32, %come_anon28 }
%come_anon28 = type { i32 }
%_G_fpos64_t = type { i64, %come_anon27 }
%obstack = type opaque
%come_anon33 = type { i32, i32, i32, i32, %come_anon34 }
%come_anon34 = type { [28 x i32] }
%sigaction = type { %come_anon65, %come_anon5, i32, void ()* }
%come_anon65 = type { void (i32)* }
%sigval = type { i8* }
%sigcontext = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i16, i16, i16, i16, i64, i64, i64, i64, %come_anon68, [8 x i64] }
%come_anon68 = type { %_fpstate* }
%_fpstate = type { i16, i16, i16, i16, i64, i64, i32, i32, [8 x %_fpxreg], [16 x %_xmmreg], [24 x i32] }
%_fpxreg = type { [4 x i16], i16, [3 x i16] }
%_xmmreg = type { [4 x i32] }
%come_anon70 = type { i8*, i32, i64 }
%sigstack = type { i8*, i32 }
%iovec = type { i8*, i64 }
%file_handle = type { i32, i32, [0 x i8] }
%timex = type { i32, i64, i64, i64, i64, i32, i64, i64, i64, %timeval, i64, i64, i64, i32, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%sigevent = type { %sigval, i32, i32, %come_anon60 }
%come_anon60 = type { [12 x i32] }
%itimerspec = type { %timespec, %timespec }
%timezone = type { i32, i32 }
%itimerval = type { %timeval, %timeval }
%come_anon82 = type { i64, i64 }
%come_anon88 = type { i32, i8, i8, i16, i64, i64 }
%macro_level = type { %macro_level*, i32* }
%TokenString = type { i32*, i32, i32, i32 }
%AttributeDef = type { i32, i32, %Section*, i32 }
%come_anon123 = type { i8, i8, i1 }
%ParseState = type { i32*, i32, i32, %CValue }
%come_anon94 = type { i64, i64, i64 }
%come_anon133 = type { i32, i8, i8, i16, i32 }
%come_anon84 = type { [16 x i8], i16, i16, i32, i64, i64, i64, i32, i16, i16, i16, i16, i16, i16 }
%come_anon126 = type { i8*, i8*, i8*, i8* }
%come_anon99 = type { i64, %come_anon100 }
%come_anon100 = type { i64 }
%come_anon96 = type { i32, i32, i64, i64, i64, i64, i64, i64 }
%come_anon86 = type { i32, i32, i64, i64, i64, i64, i32, i32, i64, i64 }
%SectionMergeInfo = type { %Section*, i64, i8, i8 }
%ArchiveHeader = type { [16 x i8], [12 x i8], [6 x i8], [6 x i8], [8 x i8], [10 x i8], [2 x i8] }
%ucontext_t = type { i64, %ucontext_t*, %come_anon70, %come_anon73, %come_anon5, %_libc_fpstate, [4 x i64] }
%come_anon73 = type { [23 x i64], %_libc_fpstate*, [8 x i64] }
%_libc_fpstate = type { i16, i16, i16, i16, i64, i64, i32, i32, [8 x %_libc_fpxreg], [16 x %_libc_xmmreg], [24 x i32] }
%_libc_fpxreg = type { [4 x i16], i16, [3 x i16] }
%_libc_xmmreg = type { [4 x i32] }

@gCallerSName = internal global i8* null
@gCallerSLine = internal global i32 0
@errno = external externally_initialized global i32
@stdin = external externally_initialized global %_IO_FILE*, align 4
@stdout = external externally_initialized global %_IO_FILE*, align 4
@stderr = external externally_initialized global %_IO_FILE*, align 4
@sys_nerr = external externally_initialized global i32
@sys_errlist = external externally_initialized global i8**, align 4
@_sys_nerr = external externally_initialized global i32
@_sys_errlist = external externally_initialized global i8**, align 4
@program_invocation_name = external externally_initialized global i8*, align 4
@program_invocation_short_name = external externally_initialized global i8*, align 4
@signgam = external externally_initialized global i32
@_sys_siglist = external externally_initialized global [65 x i8*], align 4
@sys_siglist = external externally_initialized global [65 x i8*], align 4
@__tzname = external externally_initialized global [2 x i8*], align 4
@__daylight = external externally_initialized global i32
@__timezone = external externally_initialized global i64
@tzname = external externally_initialized global [2 x i8*], align 4
@daylight = external externally_initialized global i32
@timezone = external externally_initialized global i64
@getdate_err = external externally_initialized global i32
@__environ = external externally_initialized global i8**, align 4
@environ = external externally_initialized global i8**, align 4
@optarg = external externally_initialized global i8*, align 4
@optind = external externally_initialized global i32
@opterr = external externally_initialized global i32
@optopt = external externally_initialized global i32
@total_lines = global i32 0
@total_bytes = global i32 0
@file = internal global %BufferedFile* null, align 4
@ch = internal global i32 0
@tok = internal global i32 0
@tokc = internal global %CValue zeroinitializer
@tokcstr = internal global %CString zeroinitializer
@tok_flags = internal global i32 0
@macro_ptr = internal global i32* null, align 4
@macro_ptr_allocated = internal global i32* null, align 4
@unget_saved_macro_ptr = internal global i32* null, align 4
@unget_saved_buffer = internal global [5 x i32] zeroinitializer
@unget_buffer_enabled = internal global i32 0
@parse_flags = internal global i32 0
@text_section = internal global %Section* null, align 4
@data_section = internal global %Section* null, align 4
@bss_section = internal global %Section* null, align 4
@cur_text_section = internal global %Section* null, align 4
@bounds_section = internal global %Section* null, align 4
@lbounds_section = internal global %Section* null, align 4
@symtab_section = internal global %Section* null, align 4
@strtab_section = internal global %Section* null, align 4
@stab_section = internal global %Section* null, align 4
@stabstr_section = internal global %Section* null, align 4
@rsym = internal global i32 0
@anon_sym = internal global i32 0
@ind = internal global i32 0
@loc = internal global i32 0
@const_wanted = internal global i32 0
@nocode_wanted = internal global i32 0
@global_expr = internal global i32 0
@func_vt = internal global %CType zeroinitializer
@func_vc = internal global i32 0
@last_line_num = internal global i32 0
@last_ind = internal global i32 0
@func_ind = internal global i32 0
@tok_ident = internal global i32 0
@table_ident = internal global %TokenSym** null, align 4
@hash_ident = internal global [8192 x %TokenSym*] zeroinitializer, align 4
@token_buf = internal global [1025 x i8] zeroinitializer
@funcname = internal global i8* null, align 4
@global_stack = internal global %Sym* null, align 4
@local_stack = internal global %Sym* null, align 4
@define_stack = internal global %Sym* null, align 4
@global_label_stack = internal global %Sym* null, align 4
@local_label_stack = internal global %Sym* null, align 4
@sym_free_first = internal global %Sym* null, align 4
@sym_pools = internal global i8** null, align 4
@nb_sym_pools = internal global i32 0
@vstack = internal global [256 x %SValue] zeroinitializer
@vtop = internal global %SValue* null, align 4
@char_pointer_type = internal global %CType zeroinitializer
@func_old_type = internal global %CType zeroinitializer
@int_type = internal global %CType zeroinitializer
@gnu_ext = internal global i32 1
@tcc_ext = internal global i32 1
@num_callers = global i32 6
@rt_bound_error_msg = global i8** null, align 4
@tcc_state = internal global %TCCState* null, align 4
@reg_classes = global [5 x i32] [i32 5, i32 9, i32 17, i32 34, i32 64]
@func_sub_sp_offset = internal global i64 0
@func_ret_sub = internal global i32 0
@x86_64-gen.c = private unnamed_addr constant [13 x i8] c"x86_64-gen.c\00", align 1
@0 = private unnamed_addr constant [15 x i8] c"!(fr & VT_SYM)\00", align 1
@1 = private unnamed_addr constant [13 x i8] c"x86_64-gen.c\00", align 1
@load.1 = private unnamed_addr constant [5 x i8] c"load\00", align 1
@2 = private unnamed_addr constant [14 x i8] c"v == TREG_ST0\00", align 1
@3 = private unnamed_addr constant [13 x i8] c"x86_64-gen.c\00", align 1
@load.2 = private unnamed_addr constant [5 x i8] c"load\00", align 1
@4 = private unnamed_addr constant [15 x i8] c"v == TREG_XMM0\00", align 1
@5 = private unnamed_addr constant [13 x i8] c"x86_64-gen.c\00", align 1
@load.3 = private unnamed_addr constant [5 x i8] c"load\00", align 1
@arg_regs = internal global [6 x i8] c"\07\06\02\01\08\09"
@x86_64-gen.c.4 = private unnamed_addr constant [13 x i8] c"x86_64-gen.c\00", align 1
@6 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@7 = private unnamed_addr constant [13 x i8] c"x86_64-gen.c\00", align 1
@gen_cvt_ftoi.5 = private unnamed_addr constant [13 x i8] c"gen_cvt_ftoi\00", align 1
@8 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@9 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@10 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@11 = private unnamed_addr constant [30 x i8] c"In file included from %s:%d:\0A\00", align 1
@12 = private unnamed_addr constant [8 x i8] c"%s:%d: \00", align 1
@13 = private unnamed_addr constant [5 x i8] c"%s: \00", align 1
@14 = private unnamed_addr constant [6 x i8] c"tcc: \00", align 1
@15 = private unnamed_addr constant [10 x i8] c"warning: \00", align 1
@16 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@17 = private unnamed_addr constant [12 x i8] c"%s expected\00", align 1
@18 = private unnamed_addr constant [14 x i8] c"'%c' expected\00", align 1
@19 = private unnamed_addr constant [7 x i8] c"lvalue\00", align 1
@20 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@libtcc.c = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.6 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.7 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.8 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.9 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.10 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.11 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.12 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.13 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.14 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@21 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@22 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@23 = private unnamed_addr constant [10 x i8] c"%s %*s%s\0A\00", align 1
@24 = private unnamed_addr constant [3 x i8] c"nf\00", align 1
@25 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@26 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@tcc_keywords = internal global [1207 x i8] c"int\00void\00char\00if\00else\00while\00break\00return\00for\00extern\00static\00unsigned\00goto\00do\00continue\00switch\00case\00const\00__const\00__const__\00volatile\00__volatile\00__volatile__\00long\00register\00signed\00__signed\00__signed__\00auto\00inline\00__inline\00__inline__\00restrict\00__restrict\00__restrict__\00__extension__\00float\00double\00_Bool\00short\00struct\00union\00typedef\00default\00enum\00sizeof\00__attribute\00__attribute__\00__alignof\00__alignof__\00typeof\00__typeof\00__typeof__\00__label__\00asm\00__asm\00__asm__\00define\00include\00include_next\00ifdef\00ifndef\00elif\00endif\00defined\00undef\00error\00warning\00line\00pragma\00__LINE__\00__FILE__\00__DATE__\00__TIME__\00__FUNCTION__\00__VA_ARGS__\00__func__\00section\00__section__\00aligned\00__aligned__\00packed\00__packed__\00unused\00__unused__\00cdecl\00__cdecl\00__cdecl__\00stdcall\00__stdcall\00__stdcall__\00fastcall\00__fastcall\00__fastcall__\00dllexport\00noreturn\00__noreturn__\00__builtin_types_compatible_p\00__builtin_constant_p\00__builtin_frame_address\00__builtin_malloc\00__builtin_free\00malloc\00free\00regparm\00__regparm__\00pack\00push\00pop\00memcpy\00memset\00__divdi3\00__moddi3\00__udivdi3\00__umoddi3\00__ashrdi3\00__lshrdi3\00__ashldi3\00__floatundisf\00__floatundidf\00__floatundixf\00__fixunsxfdi\00__fixunssfdi\00__fixunsdfdi\00byte\00align\00skip\00space\00string\00asciz\00ascii\00globl\00global\00text\00data\00bss\00previous\00fill\00org\00quad\00\00"
@tok_two_chars = internal global [64 x i8] c"<=\9E>=\9D!=\95&&\A0||\A1++\A4--\A2==\94<<\01>>\02+=\AB-=\AD*=\AA/=\AF%=\A5&=\A6^=\DE|=\FC->\CB..\A8##\B6\00"
@isidnum_table = internal global [257 x i8] zeroinitializer
@27 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@28 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@29 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@30 = private unnamed_addr constant [4 x i8] c"%Lu\00", align 1
@tccpp.c = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.15 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.16 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.17 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.18 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.19 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.20 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.21 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.22 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@31 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@32 = private unnamed_addr constant [4 x i8] c"<<=\00", align 1
@33 = private unnamed_addr constant [4 x i8] c">>=\00", align 1
@34 = private unnamed_addr constant [5 x i8] c"L.%u\00", align 1
@tccpp.c.23 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.24 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.25 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.26 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@35 = private unnamed_addr constant [21 x i8] c"stray '\\' in program\00", align 1
@tccpp.c.27 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@36 = private unnamed_addr constant [34 x i8] c"unexpected end of file in comment\00", align 1
@37 = private unnamed_addr constant [33 x i8] c"missing terminating %c character\00", align 1
@38 = private unnamed_addr constant [14 x i8] c"'\0A' after '\0D'\00", align 1
@tccpp.c.28 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.29 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.30 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.31 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@39 = private unnamed_addr constant [7 x i8] c"#endif\00", align 1
@40 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@tccpp.c.32 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@41 = private unnamed_addr constant [33 x i8] c"label '%s' declared but not used\00", align 1
@42 = private unnamed_addr constant [32 x i8] c"label '%s' used but not defined\00", align 1
@tccpp.c.33 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.34 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.35 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@43 = private unnamed_addr constant [24 x i8] c"invalid macro name '%s'\00", align 1
@44 = private unnamed_addr constant [32 x i8] c"badly punctuated parameter list\00", align 1
@tccpp.c.36 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.37 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tccpp.c.38 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.39 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@45 = private unnamed_addr constant [18 x i8] c"out of pack stack\00", align 1
@46 = private unnamed_addr constant [20 x i8] c"invalid pack pragma\00", align 1
@tccpp.c.40 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.41 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c.42 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tccpp.c.43 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.44 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@47 = private unnamed_addr constant [44 x i8] c"'#include' expects \22FILENAME\22 or <FILENAME>\00", align 1
@48 = private unnamed_addr constant [28 x i8] c"#include recursion too deep\00", align 1
@49 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@tccpp.c.45 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@50 = private unnamed_addr constant [28 x i8] c"include file '%s' not found\00", align 1
@51 = private unnamed_addr constant [32 x i8] c"invalid argument for '#if%sdef'\00", align 1
@52 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@53 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@tccpp.c.46 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@54 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@55 = private unnamed_addr constant [27 x i8] c"#else without matching #if\00", align 1
@56 = private unnamed_addr constant [18 x i8] c"#else after #else\00", align 1
@57 = private unnamed_addr constant [27 x i8] c"#elif without matching #if\00", align 1
@58 = private unnamed_addr constant [18 x i8] c"#elif after #else\00", align 1
@59 = private unnamed_addr constant [28 x i8] c"#endif without matching #if\00", align 1
@60 = private unnamed_addr constant [6 x i8] c"#line\00", align 1
@61 = private unnamed_addr constant [6 x i8] c"#line\00", align 1
@tccpp.c.47 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c.48 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tccpp.c.49 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@62 = private unnamed_addr constant [10 x i8] c"#error %s\00", align 1
@63 = private unnamed_addr constant [12 x i8] c"#warning %s\00", align 1
@64 = private unnamed_addr constant [45 x i8] c"Ignoring unknown preprocessing directive #%s\00", align 1
@tccpp.c.50 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.51 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.52 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@65 = private unnamed_addr constant [31 x i8] c"unknown escape sequence: '\\%c'\00", align 1
@66 = private unnamed_addr constant [32 x i8] c"unknown escape sequence: '\\x%x'\00", align 1
@tccpp.c.53 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.54 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.55 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@67 = private unnamed_addr constant [16 x i8] c"number too long\00", align 1
@68 = private unnamed_addr constant [14 x i8] c"invalid digit\00", align 1
@69 = private unnamed_addr constant [9 x i8] c"exponent\00", align 1
@70 = private unnamed_addr constant [16 x i8] c"exponent digits\00", align 1
@tccpp.c.56 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@71 = private unnamed_addr constant [16 x i8] c"exponent digits\00", align 1
@tccpp.c.57 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@72 = private unnamed_addr constant [14 x i8] c"invalid digit\00", align 1
@73 = private unnamed_addr constant [26 x i8] c"integer constant overflow\00", align 1
@tccpp.c.58 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@74 = private unnamed_addr constant [31 x i8] c"three 'l's in integer constant\00", align 1
@75 = private unnamed_addr constant [29 x i8] c"two 'u's in integer constant\00", align 1
@76 = private unnamed_addr constant [16 x i8] c"invalid number\0A\00", align 1
@tccpp.c.59 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c.60 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.61 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.62 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.63 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.64 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.65 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.66 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.67 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.68 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.69 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.70 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@77 = private unnamed_addr constant [4 x i8] c"'.'\00", align 1
@tcc.c.71 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@78 = private unnamed_addr constant [25 x i8] c"empty character constant\00", align 1
@79 = private unnamed_addr constant [35 x i8] c"multi-character character constant\00", align 1
@80 = private unnamed_addr constant [30 x i8] c"unrecognized character \\x%02x\00", align 1
@tccpp.c.72 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.73 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.74 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c.75 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tccpp.c.76 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@ab_month_name = internal global [12 x [4 x i8]] [[4 x i8] c"Jan\00", [4 x i8] c"Feb\00", [4 x i8] c"Mar\00", [4 x i8] c"Apr\00", [4 x i8] c"May\00", [4 x i8] c"Jun\00", [4 x i8] c"Jul\00", [4 x i8] c"Aug\00", [4 x i8] c"Sep\00", [4 x i8] c"Oct\00", [4 x i8] c"Nov\00", [4 x i8] c"Dec\00"]
@81 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@82 = private unnamed_addr constant [10 x i8] c"%s %2d %d\00", align 1
@83 = private unnamed_addr constant [15 x i8] c"%02d:%02d:%02d\00", align 1
@tccpp.c.77 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.78 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.79 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@84 = private unnamed_addr constant [35 x i8] c"macro '%s' used with too many args\00", align 1
@tccpp.c.80 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.81 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c.82 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@85 = private unnamed_addr constant [2 x i8] c",\00", align 1
@86 = private unnamed_addr constant [34 x i8] c"macro '%s' used with too few args\00", align 1
@tccpp.c.83 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.84 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.85 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.86 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.87 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.88 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.89 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@87 = private unnamed_addr constant [4 x i8] c">>=\00", align 1
@88 = private unnamed_addr constant [4 x i8] c"<<=\00", align 1
@tccpp.c.90 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@89 = private unnamed_addr constant [64 x i8] c"pasting \22%s\22 and \22%s\22 does not give a valid preprocessing token\00", align 1
@tccpp.c.91 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.92 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tcc.c.93 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tccpp.c.94 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.95 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.96 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@tccpp.c.97 = private unnamed_addr constant [8 x i8] c"tccpp.c\00", align 1
@90 = private unnamed_addr constant [11 x i8] c"# %d \22%s\22\0A\00", align 1
@91 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@92 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@tccgen.c = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.98 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@93 = private unnamed_addr constant [44 x i8] c"incompatible types for redefinition of '%s'\00", align 1
@94 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@tccgen.c.99 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.100 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.101 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.102 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@95 = private unnamed_addr constant [29 x i8] c"division by zero in constant\00", align 1
@96 = private unnamed_addr constant [29 x i8] c"division by zero in constant\00", align 1
@tccgen.c.103 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.104 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.105 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.106 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.107 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@97 = private unnamed_addr constant [39 x i8] c"comparison between pointer and integer\00", align 1
@tccgen.c.108 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.109 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@98 = private unnamed_addr constant [30 x i8] c"invalid operands to binary %s\00", align 1
@99 = private unnamed_addr constant [50 x i8] c"comparison of distinct pointer types lacks a cast\00", align 1
@100 = private unnamed_addr constant [25 x i8] c"cannot use pointers here\00", align 1
@101 = private unnamed_addr constant [25 x i8] c"cannot use pointers here\00", align 1
@tccgen.c.110 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.111 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@102 = private unnamed_addr constant [38 x i8] c"invalid operands for binary operation\00", align 1
@tccgen.c.112 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.113 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.114 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@103 = private unnamed_addr constant [50 x i8] c"nonportable conversion from pointer to char/short\00", align 1
@tccgen.c.115 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.116 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@104 = private unnamed_addr constant [7 x i8] c"const \00", align 1
@105 = private unnamed_addr constant [10 x i8] c"volatile \00", align 1
@106 = private unnamed_addr constant [10 x i8] c"unsigned \00", align 1
@107 = private unnamed_addr constant [5 x i8] c"void\00", align 1
@108 = private unnamed_addr constant [6 x i8] c"_Bool\00", align 1
@109 = private unnamed_addr constant [5 x i8] c"char\00", align 1
@110 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@111 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@112 = private unnamed_addr constant [5 x i8] c"long\00", align 1
@113 = private unnamed_addr constant [10 x i8] c"long long\00", align 1
@114 = private unnamed_addr constant [6 x i8] c"float\00", align 1
@115 = private unnamed_addr constant [7 x i8] c"double\00", align 1
@116 = private unnamed_addr constant [12 x i8] c"long double\00", align 1
@117 = private unnamed_addr constant [8 x i8] c"struct \00", align 1
@118 = private unnamed_addr constant [6 x i8] c"enum \00", align 1
@119 = private unnamed_addr constant [12 x i8] c"<anonymous>\00", align 1
@120 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@121 = private unnamed_addr constant [3 x i8] c", \00", align 1
@122 = private unnamed_addr constant [2 x i8] c")\00", align 1
@123 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@124 = private unnamed_addr constant [2 x i8] c" \00", align 1
@125 = private unnamed_addr constant [33 x i8] c"assignment of read-only location\00", align 1
@tccgen.c.117 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.118 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@126 = private unnamed_addr constant [53 x i8] c"assignment makes pointer from integer without a cast\00", align 1
@tccgen.c.119 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.120 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.121 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@127 = private unnamed_addr constant [42 x i8] c"assignment from incompatible pointer type\00", align 1
@128 = private unnamed_addr constant [56 x i8] c"assignment discards qualifiers from pointer target type\00", align 1
@129 = private unnamed_addr constant [53 x i8] c"assignment makes integer from pointer without a cast\00", align 1
@130 = private unnamed_addr constant [25 x i8] c"cannot cast '%s' to '%s'\00", align 1
@131 = private unnamed_addr constant [33 x i8] c"assignment of read-only location\00", align 1
@tccgen.c.122 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@132 = private unnamed_addr constant [15 x i8] c"attribute name\00", align 1
@133 = private unnamed_addr constant [13 x i8] c"section name\00", align 1
@134 = private unnamed_addr constant [42 x i8] c"alignment must be a positive power of two\00", align 1
@135 = private unnamed_addr constant [23 x i8] c"'%s' attribute ignored\00", align 1
@136 = private unnamed_addr constant [23 x i8] c"struct/union/enum name\00", align 1
@tccgen.c.123 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@137 = private unnamed_addr constant [13 x i8] c"invalid type\00", align 1
@138 = private unnamed_addr constant [34 x i8] c"struct/union/enum already defined\00", align 1
@139 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@140 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@141 = private unnamed_addr constant [22 x i8] c"invalid type for '%s'\00", align 1
@142 = private unnamed_addr constant [33 x i8] c"negative width in bit-field '%s'\00", align 1
@143 = private unnamed_addr constant [30 x i8] c"zero width for bit-field '%s'\00", align 1
@144 = private unnamed_addr constant [32 x i8] c"bitfields must have scalar type\00", align 1
@145 = private unnamed_addr constant [31 x i8] c"width of '%s' exceeds its type\00", align 1
@146 = private unnamed_addr constant [21 x i8] c"too many basic types\00", align 1
@tccgen.c.124 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@147 = private unnamed_addr constant [29 x i8] c"signed and unsigned modifier\00", align 1
@148 = private unnamed_addr constant [13 x i8] c"invalid type\00", align 1
@149 = private unnamed_addr constant [27 x i8] c"parameter declared as void\00", align 1
@150 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@tccgen.c.125 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@151 = private unnamed_addr constant [19 x i8] c"invalid array size\00", align 1
@152 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@153 = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@tccgen.c.126 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@154 = private unnamed_addr constant [31 x i8] c"too many arguments to function\00", align 1
@155 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@156 = private unnamed_addr constant [36 x i8] c"pointer not accepted for unary plus\00", align 1
@157 = private unnamed_addr constant [37 x i8] c"sizeof applied to an incomplete type\00", align 1
@158 = private unnamed_addr constant [44 x i8] c"__builtin_frame_address only takes integers\00", align 1
@159 = private unnamed_addr constant [45 x i8] c"TCC only supports __builtin_frame_address(0)\00", align 1
@160 = private unnamed_addr constant [17 x i8] c"label identifier\00", align 1
@161 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@tccgen.c.127 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@162 = private unnamed_addr constant [16 x i8] c"'%s' undeclared\00", align 1
@163 = private unnamed_addr constant [38 x i8] c"implicit declaration of function '%s'\00", align 1
@164 = private unnamed_addr constant [16 x i8] c"struct or union\00", align 1
@165 = private unnamed_addr constant [20 x i8] c"field not found: %s\00", align 1
@tccgen.c.128 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@166 = private unnamed_addr constant [17 x i8] c"function pointer\00", align 1
@tccgen.c.129 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@167 = private unnamed_addr constant [30 x i8] c"too few arguments to function\00", align 1
@tccgen.c.130 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.131 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.132 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tccgen.c.133 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@168 = private unnamed_addr constant [20 x i8] c"constant expression\00", align 1
@tccgen.c.134 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@tcc.c.135 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@169 = private unnamed_addr constant [18 x i8] c"unsupported token\00", align 1
@170 = private unnamed_addr constant [17 x i8] c"label identifier\00", align 1
@171 = private unnamed_addr constant [28 x i8] c"unsupported expression type\00", align 1
@tccgen.c.136 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@172 = private unnamed_addr constant [13 x i8] c"cannot break\00", align 1
@173 = private unnamed_addr constant [16 x i8] c"cannot continue\00", align 1
@174 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@175 = private unnamed_addr constant [17 x i8] c"empty case range\00", align 1
@176 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@177 = private unnamed_addr constant [19 x i8] c"too many 'default'\00", align 1
@178 = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@179 = private unnamed_addr constant [17 x i8] c"label identifier\00", align 1
@180 = private unnamed_addr constant [21 x i8] c"duplicate label '%s'\00", align 1
@181 = private unnamed_addr constant [53 x i8] c"deprecated use of label at end of compound statement\00", align 1
@182 = private unnamed_addr constant [11 x i8] c"array type\00", align 1
@183 = private unnamed_addr constant [14 x i8] c"invalid index\00", align 1
@184 = private unnamed_addr constant [14 x i8] c"invalid index\00", align 1
@tccgen.c.137 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@185 = private unnamed_addr constant [18 x i8] c"struct/union type\00", align 1
@186 = private unnamed_addr constant [6 x i8] c"field\00", align 1
@187 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@tccgen.c.138 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@188 = private unnamed_addr constant [20 x i8] c"too many field init\00", align 1
@189 = private unnamed_addr constant [49 x i8] c"range init not supported yet for dynamic storage\00", align 1
@190 = private unnamed_addr constant [36 x i8] c"initializer element is not constant\00", align 1
@191 = private unnamed_addr constant [51 x i8] c"initializer element is not computable at load time\00", align 1
@tccgen.c.139 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@192 = private unnamed_addr constant [41 x i8] c"initializer-string for array is too long\00", align 1
@193 = private unnamed_addr constant [16 x i8] c"index too large\00", align 1
@194 = private unnamed_addr constant [5 x i8] c"cast\00", align 1
@tccgen.c.140 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@195 = private unnamed_addr constant [18 x i8] c"unknown type size\00", align 1
@196 = private unnamed_addr constant [38 x i8] c"unexpected end of file in initializer\00", align 1
@197 = private unnamed_addr constant [18 x i8] c"unknown type size\00", align 1
@tccgen.c.141 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@198 = private unnamed_addr constant [44 x i8] c"incompatible types for redefinition of '%s'\00", align 1
@199 = private unnamed_addr constant [7 x i8] c"%s:%c1\00", align 1
@200 = private unnamed_addr constant [17 x i8] c"declaration list\00", align 1
@201 = private unnamed_addr constant [53 x i8] c"declaration for parameter '%s' but no such parameter\00", align 1
@202 = private unnamed_addr constant [33 x i8] c"storage class specified for '%s'\00", align 1
@tccgen.c.142 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@203 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@204 = private unnamed_addr constant [27 x i8] c"cannot use local functions\00", align 1
@205 = private unnamed_addr constant [20 x i8] c"function definition\00", align 1
@206 = private unnamed_addr constant [11 x i8] c"identifier\00", align 1
@tccgen.c.143 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@207 = private unnamed_addr constant [44 x i8] c"incompatible types for redefinition of '%s'\00", align 1
@tccgen.c.144 = private unnamed_addr constant [9 x i8] c"tccgen.c\00", align 1
@208 = private unnamed_addr constant [23 x i8] c"unexpected end of file\00", align 1
@209 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@210 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@211 = private unnamed_addr constant [12 x i8] c"declaration\00", align 1
@212 = private unnamed_addr constant [9 x i8] c"<string>\00", align 1
@213 = private unnamed_addr constant [2 x i8] c" \00", align 1
@214 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@libtcc.c.145 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@215 = private unnamed_addr constant [27 x i8] c"inline asm() not supported\00", align 1
@216 = private unnamed_addr constant [27 x i8] c"inline asm() not supported\00", align 1
@217 = private unnamed_addr constant [15 x i8] c"%s not defined\00", align 1
@218 = private unnamed_addr constant [73 x i8] c"new_bind=%x new_shndx=%x new_vis=%x old_bind=%x old_shndx=%x old_vis=%x\0A\00", align 1
@219 = private unnamed_addr constant [19 x i8] c"'%s' defined twice\00", align 1
@220 = private unnamed_addr constant [8 x i8] c".rela%s\00", align 1
@221 = private unnamed_addr constant [7 x i8] c"_fp_hw\00", align 1
@222 = private unnamed_addr constant [22 x i8] c"undefined symbol '%s'\00", align 1
@223 = private unnamed_addr constant [34 x i8] c"internal error: relocation failed\00", align 1
@224 = private unnamed_addr constant [12 x i8] c"memory full\00", align 1
@225 = private unnamed_addr constant [5 x i8] c".got\00", align 1
@226 = private unnamed_addr constant [22 x i8] c"_GLOBAL_OFFSET_TABLE_\00", align 1
@227 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@228 = private unnamed_addr constant [11 x i8] c"__%s_start\00", align 1
@229 = private unnamed_addr constant [9 x i8] c"__%s_end\00", align 1
@230 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@231 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@232 = private unnamed_addr constant [10 x i8] c"libtcc1.a\00", align 1
@233 = private unnamed_addr constant [16 x i8] c"/usr/lib/crtn.o\00", align 1
@234 = private unnamed_addr constant [7 x i8] c"_etext\00", align 1
@235 = private unnamed_addr constant [7 x i8] c"_edata\00", align 1
@236 = private unnamed_addr constant [5 x i8] c"_end\00", align 1
@237 = private unnamed_addr constant [15 x i8] c".preinit_array\00", align 1
@238 = private unnamed_addr constant [12 x i8] c".init_array\00", align 1
@239 = private unnamed_addr constant [12 x i8] c".fini_array\00", align 1
@tccelf.c = private unnamed_addr constant [9 x i8] c"tccelf.c\00", align 1
@tccelf.c.146 = private unnamed_addr constant [9 x i8] c"tccelf.c\00", align 1
@240 = private unnamed_addr constant [11 x i8] c"__start_%s\00", align 1
@241 = private unnamed_addr constant [10 x i8] c"__stop_%s\00", align 1
@elf_interp = internal global [26 x i8] c"/lib/ld-linux-x86-64.so.2\00"
@242 = private unnamed_addr constant [8 x i8] c".interp\00", align 1
@243 = private unnamed_addr constant [8 x i8] c".dynsym\00", align 1
@244 = private unnamed_addr constant [8 x i8] c".dynstr\00", align 1
@245 = private unnamed_addr constant [6 x i8] c".hash\00", align 1
@246 = private unnamed_addr constant [9 x i8] c".dynamic\00", align 1
@247 = private unnamed_addr constant [5 x i8] c".plt\00", align 1
@248 = private unnamed_addr constant [7 x i8] c"_fp_hw\00", align 1
@249 = private unnamed_addr constant [22 x i8] c"undefined symbol '%s'\00", align 1
@250 = private unnamed_addr constant [30 x i8] c"undefined dynamic symbol '%s'\00", align 1
@251 = private unnamed_addr constant [10 x i8] c".shstrtab\00", align 1
@252 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@253 = private unnamed_addr constant [7 x i8] c"_start\00", align 1
@254 = private unnamed_addr constant [21 x i8] c"could not write '%s'\00", align 1
@255 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@256 = private unnamed_addr constant [7 x i8] c"<- %s\0A\00", align 1
@257 = private unnamed_addr constant [20 x i8] c"invalid object file\00", align 1
@258 = private unnamed_addr constant [36 x i8] c"object must contain only one symtab\00", align 1
@259 = private unnamed_addr constant [9 x i8] c".stabstr\00", align 1
@260 = private unnamed_addr constant [14 x i8] c".gnu.linkonce\00", align 1
@261 = private unnamed_addr constant [14 x i8] c".gnu.linkonce\00", align 1
@262 = private unnamed_addr constant [21 x i8] c"invalid section type\00", align 1
@263 = private unnamed_addr constant [6 x i8] c".stab\00", align 1
@264 = private unnamed_addr constant [9 x i8] c".stabstr\00", align 1
@265 = private unnamed_addr constant [43 x i8] c"Invalid relocation entry [%2d] '%s' @ %.8x\00", align 1
@266 = private unnamed_addr constant [16 x i8] c"invalid archive\00", align 1
@267 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@268 = private unnamed_addr constant [3 x i8] c"//\00", align 1
@269 = private unnamed_addr constant [10 x i8] c"__.SYMDEF\00", align 1
@270 = private unnamed_addr constant [11 x i8] c"__.SYMDEF/\00", align 1
@271 = private unnamed_addr constant [13 x i8] c"ARFILENAMES/\00", align 1
@272 = private unnamed_addr constant [17 x i8] c"bad architecture\00", align 1
@273 = private unnamed_addr constant [30 x i8] c"referenced dll '%s' not found\00", align 1
@tccelf.c.147 = private unnamed_addr constant [9 x i8] c"tccelf.c\00", align 1
@274 = private unnamed_addr constant [12 x i8] c"/.-_+=$:\\,~\00", align 1
@tccelf.c.148 = private unnamed_addr constant [9 x i8] c"tccelf.c\00", align 1
@275 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@276 = private unnamed_addr constant [23 x i8] c"unexpected end of file\00", align 1
@277 = private unnamed_addr constant [18 x i8] c"filename expected\00", align 1
@278 = private unnamed_addr constant [10 x i8] c"AS_NEEDED\00", align 1
@279 = private unnamed_addr constant [6 x i8] c"INPUT\00", align 1
@280 = private unnamed_addr constant [6 x i8] c"GROUP\00", align 1
@281 = private unnamed_addr constant [14 x i8] c"OUTPUT_FORMAT\00", align 1
@282 = private unnamed_addr constant [7 x i8] c"TARGET\00", align 1
@283 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@284 = private unnamed_addr constant [23 x i8] c"unexpected end of file\00", align 1
@285 = private unnamed_addr constant [9 x i8] c"0x%08lx:\00", align 1
@286 = private unnamed_addr constant [6 x i8] c" ???\0A\00", align 1
@287 = private unnamed_addr constant [6 x i8] c" %s()\00", align 1
@288 = private unnamed_addr constant [8 x i8] c" (%s:%d\00", align 1
@289 = private unnamed_addr constant [19 x i8] c", included from %s\00", align 1
@290 = private unnamed_addr constant [2 x i8] c")\00", align 1
@291 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@292 = private unnamed_addr constant [16 x i8] c"Runtime error: \00", align 1
@293 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@294 = private unnamed_addr constant [4 x i8] c"at \00", align 1
@295 = private unnamed_addr constant [4 x i8] c"by \00", align 1
@296 = private unnamed_addr constant [17 x i8] c"division by zero\00", align 1
@297 = private unnamed_addr constant [25 x i8] c"floating point exception\00", align 1
@298 = private unnamed_addr constant [30 x i8] c"dereferencing invalid pointer\00", align 1
@299 = private unnamed_addr constant [20 x i8] c"illegal instruction\00", align 1
@300 = private unnamed_addr constant [15 x i8] c"abort() called\00", align 1
@301 = private unnamed_addr constant [17 x i8] c"caught signal %d\00", align 1
@302 = private unnamed_addr constant [5 x i8] c"main\00", align 1
@303 = private unnamed_addr constant [19 x i8] c"/usr/local/lib/tcc\00", align 1
@libtcc.c.149 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.150 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.151 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@libtcc.c.152 = private unnamed_addr constant [9 x i8] c"libtcc.c\00", align 1
@304 = private unnamed_addr constant [9 x i8] c"__STDC__\00", align 1
@305 = private unnamed_addr constant [17 x i8] c"__STDC_VERSION__\00", align 1
@306 = private unnamed_addr constant [8 x i8] c"199901L\00", align 1
@307 = private unnamed_addr constant [11 x i8] c"__x86_64__\00", align 1
@308 = private unnamed_addr constant [9 x i8] c"__unix__\00", align 1
@309 = private unnamed_addr constant [7 x i8] c"__unix\00", align 1
@310 = private unnamed_addr constant [10 x i8] c"__linux__\00", align 1
@311 = private unnamed_addr constant [8 x i8] c"__linux\00", align 1
@312 = private unnamed_addr constant [10 x i8] c"__TINYC__\00", align 1
@313 = private unnamed_addr constant [14 x i8] c"__SIZE_TYPE__\00", align 1
@314 = private unnamed_addr constant [13 x i8] c"unsigned int\00", align 1
@315 = private unnamed_addr constant [17 x i8] c"__PTRDIFF_TYPE__\00", align 1
@316 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@317 = private unnamed_addr constant [15 x i8] c"__WCHAR_TYPE__\00", align 1
@318 = private unnamed_addr constant [4 x i8] c"int\00", align 1
@319 = private unnamed_addr constant [15 x i8] c"/usr/local/lib\00", align 1
@320 = private unnamed_addr constant [9 x i8] c"/usr/lib\00", align 1
@321 = private unnamed_addr constant [5 x i8] c"/lib\00", align 1
@322 = private unnamed_addr constant [6 x i8] c".text\00", align 1
@323 = private unnamed_addr constant [6 x i8] c".data\00", align 1
@324 = private unnamed_addr constant [5 x i8] c".bss\00", align 1
@325 = private unnamed_addr constant [8 x i8] c".symtab\00", align 1
@326 = private unnamed_addr constant [8 x i8] c".strtab\00", align 1
@327 = private unnamed_addr constant [9 x i8] c".hashtab\00", align 1
@328 = private unnamed_addr constant [11 x i8] c".dynsymtab\00", align 1
@329 = private unnamed_addr constant [11 x i8] c".dynstrtab\00", align 1
@330 = private unnamed_addr constant [12 x i8] c".dynhashtab\00", align 1
@331 = private unnamed_addr constant [20 x i8] c"file '%s' not found\00", align 1
@332 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@333 = private unnamed_addr constant [22 x i8] c"could not read header\00", align 1
@334 = private unnamed_addr constant [22 x i8] c"unrecognized ELF file\00", align 1
@335 = private unnamed_addr constant [9 x i8] c"!<arch>\0A\00", align 1
@336 = private unnamed_addr constant [23 x i8] c"unrecognized file type\00", align 1
@337 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@338 = private unnamed_addr constant [9 x i8] c"lib%s.so\00", align 1
@339 = private unnamed_addr constant [11 x i8] c"%s/lib%s.a\00", align 1
@340 = private unnamed_addr constant [19 x i8] c"/usr/local/include\00", align 1
@341 = private unnamed_addr constant [13 x i8] c"/usr/include\00", align 1
@342 = private unnamed_addr constant [11 x i8] c"%s/include\00", align 1
@343 = private unnamed_addr constant [18 x i8] c"__CHAR_UNSIGNED__\00", align 1
@344 = private unnamed_addr constant [6 x i8] c".stab\00", align 1
@345 = private unnamed_addr constant [9 x i8] c".stabstr\00", align 1
@346 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@347 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@348 = private unnamed_addr constant [16 x i8] c"/usr/lib/crt1.o\00", align 1
@349 = private unnamed_addr constant [16 x i8] c"/usr/lib/crti.o\00", align 1
@warning_defs = internal global [4 x %FlagDef] [%FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 37) to i16), i16 0, i8* bitcast ([12 x i8]* @350 to i8*) }, %FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 36) to i16), i16 0, i8* bitcast ([14 x i8]* @351 to i8*) }, %FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 38) to i16), i16 0, i8* bitcast ([6 x i8]* @352 to i8*) }, %FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 40) to i16), i16 1, i8* bitcast ([30 x i8]* @353 to i8*) }]
@350 = private unnamed_addr constant [12 x i8] c"unsupported\00", align 1
@351 = private unnamed_addr constant [14 x i8] c"write-strings\00", align 1
@352 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@353 = private unnamed_addr constant [30 x i8] c"implicit-function-declaration\00", align 1
@354 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@flag_defs = internal global [4 x %FlagDef] [%FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 34) to i16), i16 0, i8* bitcast ([14 x i8]* @355 to i8*) }, %FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 34) to i16), i16 2, i8* bitcast ([12 x i8]* @356 to i8*) }, %FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 26) to i16), i16 2, i8* bitcast ([7 x i8]* @357 to i8*) }, %FlagDef { i16 ptrtoint (i32* getelementptr inbounds (%TCCState, %TCCState* null, i32 0, i32 35) to i16), i16 0, i8* bitcast ([19 x i8]* @358 to i8*) }]
@355 = private unnamed_addr constant [14 x i8] c"unsigned-char\00", align 1
@356 = private unnamed_addr constant [12 x i8] c"signed-char\00", align 1
@357 = private unnamed_addr constant [7 x i8] c"common\00", align 1
@358 = private unnamed_addr constant [19 x i8] c"leading-underscore\00", align 1
@359 = private unnamed_addr constant [64 x i8] c"%d idents, %d lines, %d bytes, %0.3f s, %d lines/s, %0.1f MB/s\0A\00", align 1
@360 = private unnamed_addr constant [1381 x i8] c"tcc version 0.9.25 - Tiny C Compiler - Copyright (C) 2001-2006 Fabrice Bellard\0Ausage: tcc [-v] [-c] [-o outfile] [-Bdir] [-bench] [-Idir] [-Dsym[=val]] [-Usym]\0A           [-Wwarn] [-g] [-b] [-bt N] [-Ldir] [-llib] [-shared] [-soname name]\0A           [-static] [infile1 infile2...] [-run infile args...]\0A\0AGeneral options:\0A  -v          display current version, increase verbosity\0A  -c          compile only - generate an object file\0A  -o outfile  set output filename\0A  -Bdir       set tcc internal library path\0A  -bench      output compilation statistics\0A  -run        run compiled source\0A  -fflag      set or reset (with 'no-' prefix) 'flag' (see man page)\0A  -Wwarning   set or reset (with 'no-' prefix) 'warning' (see man page)\0A  -w          disable all warnings\0APreprocessor options:\0A  -E          preprocess only\0A  -Idir       add include path 'dir'\0A  -Dsym[=val] define 'sym' with value 'val'\0A  -Usym       undefine 'sym'\0ALinker options:\0A  -Ldir       add library path 'dir'\0A  -llib       link with dynamic or static library 'lib'\0A  -shared     generate a shared library\0A  -soname     set name for shared library to be used at runtime\0A  -static     static linking\0A  -rdynamic   export all global symbols to dynamic linker\0A  -r          generate (relocatable) object file\0ADebugger options:\0A  -g          generate runtime debug info\0A  -bt N       show N callers in stack traces\0A\00", align 1
@files = internal global i8** null, align 4
@nb_files = internal global i32 0
@nb_libraries = internal global i32 0
@multiple_files = internal global i32 0
@print_search_dirs = internal global i32 0
@output_type = internal global i32 0
@reloc_output = internal global i32 0
@outfile = internal global i8* null, align 4
@do_bench = internal global i32 0
@tcc_options = internal global [31 x %TCCOption] [%TCCOption { i8* bitcast ([2 x i8]* @361 to i8*), i16 0, i16 0 }, %TCCOption { i8* bitcast ([2 x i8]* @362 to i8*), i16 0, i16 0 }, %TCCOption { i8* bitcast ([2 x i8]* @363 to i8*), i16 1, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @364 to i8*), i16 2, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @365 to i8*), i16 3, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @366 to i8*), i16 4, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @367 to i8*), i16 5, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @368 to i8*), i16 6, i16 3 }, %TCCOption { i8* bitcast ([6 x i8]* @369 to i8*), i16 7, i16 0 }, %TCCOption { i8* bitcast ([3 x i8]* @370 to i8*), i16 8, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @371 to i8*), i16 10, i16 3 }, %TCCOption { i8* bitcast ([2 x i8]* @372 to i8*), i16 11, i16 0 }, %TCCOption { i8* bitcast ([7 x i8]* @373 to i8*), i16 12, i16 0 }, %TCCOption { i8* bitcast ([7 x i8]* @374 to i8*), i16 13, i16 0 }, %TCCOption { i8* bitcast ([7 x i8]* @375 to i8*), i16 14, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @376 to i8*), i16 15, i16 1 }, %TCCOption { i8* bitcast ([4 x i8]* @377 to i8*), i16 26, i16 3 }, %TCCOption { i8* bitcast ([9 x i8]* @378 to i8*), i16 25, i16 0 }, %TCCOption { i8* bitcast ([2 x i8]* @379 to i8*), i16 16, i16 0 }, %TCCOption { i8* bitcast ([4 x i8]* @380 to i8*), i16 17, i16 3 }, %TCCOption { i8* bitcast ([2 x i8]* @381 to i8*), i16 18, i16 3 }, %TCCOption { i8* bitcast ([2 x i8]* @382 to i8*), i16 19, i16 3 }, %TCCOption { i8* bitcast ([2 x i8]* @383 to i8*), i16 20, i16 1 }, %TCCOption { i8* bitcast ([2 x i8]* @384 to i8*), i16 21, i16 3 }, %TCCOption { i8* bitcast ([9 x i8]* @385 to i8*), i16 22, i16 0 }, %TCCOption { i8* bitcast ([9 x i8]* @386 to i8*), i16 23, i16 0 }, %TCCOption { i8* bitcast ([18 x i8]* @387 to i8*), i16 24, i16 0 }, %TCCOption { i8* bitcast ([2 x i8]* @388 to i8*), i16 27, i16 3 }, %TCCOption { i8* bitcast ([2 x i8]* @389 to i8*), i16 28, i16 0 }, %TCCOption { i8* bitcast ([5 x i8]* @390 to i8*), i16 29, i16 0 }, %TCCOption { i8* bitcast ([2 x i8]* @391 to i8*), i16 30, i16 0 }]
@361 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@362 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@363 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@364 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@365 = private unnamed_addr constant [2 x i8] c"U\00", align 1
@366 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@367 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@368 = private unnamed_addr constant [2 x i8] c"l\00", align 1
@369 = private unnamed_addr constant [6 x i8] c"bench\00", align 1
@370 = private unnamed_addr constant [3 x i8] c"bt\00", align 1
@371 = private unnamed_addr constant [2 x i8] c"g\00", align 1
@372 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@373 = private unnamed_addr constant [7 x i8] c"static\00", align 1
@374 = private unnamed_addr constant [7 x i8] c"shared\00", align 1
@375 = private unnamed_addr constant [7 x i8] c"soname\00", align 1
@376 = private unnamed_addr constant [2 x i8] c"o\00", align 1
@377 = private unnamed_addr constant [4 x i8] c"run\00", align 1
@378 = private unnamed_addr constant [9 x i8] c"rdynamic\00", align 1
@379 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@380 = private unnamed_addr constant [4 x i8] c"Wl,\00", align 1
@381 = private unnamed_addr constant [2 x i8] c"W\00", align 1
@382 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@383 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@384 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@385 = private unnamed_addr constant [9 x i8] c"nostdinc\00", align 1
@386 = private unnamed_addr constant [9 x i8] c"nostdlib\00", align 1
@387 = private unnamed_addr constant [18 x i8] c"print-search-dirs\00", align 1
@388 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@389 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@390 = private unnamed_addr constant [5 x i8] c"pipe\00", align 1
@391 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@tcc.c.153 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@tcc.c.154 = private unnamed_addr constant [6 x i8] c"tcc.c\00", align 1
@392 = private unnamed_addr constant [23 x i8] c"invalid option -- '%s'\00", align 1
@393 = private unnamed_addr constant [28 x i8] c"argument to '%s' is missing\00", align 1
@394 = private unnamed_addr constant [23 x i8] c"too many include paths\00", align 1
@395 = private unnamed_addr constant [16 x i8] c"tcc version %s\0A\00", align 1
@396 = private unnamed_addr constant [7 x i8] c"0.9.25\00", align 1
@397 = private unnamed_addr constant [8 x i8] c"-Ttext,\00", align 1
@398 = private unnamed_addr constant [11 x i8] c"--oformat,\00", align 1
@399 = private unnamed_addr constant [7 x i8] c"elf32-\00", align 1
@400 = private unnamed_addr constant [7 x i8] c"binary\00", align 1
@401 = private unnamed_addr constant [20 x i8] c"target %s not found\00", align 1
@402 = private unnamed_addr constant [31 x i8] c"unsupported linker option '%s'\00", align 1
@403 = private unnamed_addr constant [24 x i8] c"unsupported option '%s'\00", align 1
@404 = private unnamed_addr constant [14 x i8] c"install: %s/\0A\00", align 1
@405 = private unnamed_addr constant [38 x i8] c"cannot specify multiple files with -c\00", align 1
@406 = private unnamed_addr constant [33 x i8] c"cannot specify libraries with -c\00", align 1
@407 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@408 = private unnamed_addr constant [19 x i8] c"could not open '%s\00", align 1
@409 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@410 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@411 = private unnamed_addr constant [3 x i8] c".o\00", align 1
@412 = private unnamed_addr constant [6 x i8] c"a.out\00", align 1
@413 = private unnamed_addr constant [15 x i8] c"cannot find %s\00", align 1
@414 = private unnamed_addr constant [7 x i8] c"-> %s\0A\00", align 1

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #0

declare void @__builtin_va_start(i8*)

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #0

declare void @come_gc_init()

declare void @come_boehm_gc_init()

declare void @come_gc_final()

declare i8* @igc_calloc(i64, i64)

declare void @igc_increment_ref_count(i8*)

declare void @igc_decrement_ref_count(i8*)

declare void @__builtin_va_end(i8*)

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: nounwind
declare i64 @llvm.readcyclecounter() #0

; Function Attrs: nounwind readnone speculatable willreturn
declare i8 @llvm.bitreverse.i8(i8) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i16 @llvm.bitreverse.i16(i16) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.bitreverse.i32(i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.bitreverse.i64(i64) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i8 @llvm.fshl.i8(i8, i8) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i16 @llvm.fshl.i16(i16, i16) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.fshl.i64(i64, i64) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i8 @llvm.fshr.i8(i8, i8) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i16 @llvm.fshr.i16(i16, i16) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.fshr.i64(i64, i64) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.canonicalize.f64(double) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.canonicalize.f32(float) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare fp128 @llvm.canonicalize.f80(fp128) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #2

declare i64 @__ctype_get_mb_cur_max()

declare double @atof(i8*)

declare i32 @atoi(i8*)

declare i64 @atol(i8*)

declare i64 @atoll(i8*)

declare double @strtod(i8*, i8**)

declare float @strtof(i8*, i8**)

declare fp128 @strtold(i8*, i8**)

declare float @strtof32(i8*, i8**)

declare double @strtof64(i8*, i8**)

declare double @strtof32x(i8*, i8**)

declare fp128 @strtof64x(i8*, i8**)

declare i64 @strtol(i8*, i8**, i32)

declare i64 @strtoul(i8*, i8**, i32)

declare i64 @strtoq(i8*, i8**, i32)

declare i64 @strtouq(i8*, i8**, i32)

declare i64 @strtoll(i8*, i8**, i32)

declare i64 @strtoull(i8*, i8**, i32)

declare i32 @strfromd(i8*, i64, i8*, double)

declare i32 @strfromf(i8*, i64, i8*, float)

declare i32 @strfroml(i8*, i64, i8*, fp128)

declare i32 @strfromf32(i8*, i64, i8*, float)

declare i32 @strfromf64(i8*, i64, i8*, double)

declare i32 @strfromf32x(i8*, i64, i8*, double)

declare i32 @strfromf64x(i8*, i64, i8*, fp128)

declare i64 @strtol_l(i8*, i8**, i32, %__locale_struct*)

declare i64 @strtoul_l(i8*, i8**, i32, %__locale_struct*)

declare i64 @strtoll_l(i8*, i8**, i32, %__locale_struct*)

declare i64 @strtoull_l(i8*, i8**, i32, %__locale_struct*)

declare double @strtod_l(i8*, i8**, %__locale_struct*)

declare float @strtof_l(i8*, i8**, %__locale_struct*)

declare fp128 @strtold_l(i8*, i8**, %__locale_struct*)

declare float @strtof32_l(i8*, i8**, %__locale_struct*)

declare double @strtof64_l(i8*, i8**, %__locale_struct*)

declare double @strtof32x_l(i8*, i8**, %__locale_struct*)

declare fp128 @strtof64x_l(i8*, i8**, %__locale_struct*)

declare i8* @l64a(i64)

declare i64 @a64l(i8*)

declare i32 @select(i32, %come_anon6*, %come_anon6*, %come_anon6*, %timeval*)

declare i32 @pselect(i32, %come_anon6*, %come_anon6*, %come_anon6*, %timespec*, %come_anon5*)

declare i64 @random()

declare void @srandom(i32)

declare i8* @initstate(i32, i8*, i64)

declare i8* @setstate(i8*)

declare i32 @random_r(%random_data*, i32*)

declare i32 @srandom_r(i32, %random_data*)

declare i32 @initstate_r(i32, i8*, i64, %random_data*)

declare i32 @setstate_r(i8*, %random_data*)

declare i32 @rand()

declare void @srand(i32)

declare i32 @rand_r(i32*)

declare double @drand48()

declare double @erand48(i16*)

declare i64 @lrand48()

declare i64 @nrand48(i16*)

declare i64 @mrand48()

declare i64 @jrand48(i16*)

declare void @srand48(i64)

declare i16* @seed48(i16*)

declare void @lcong48(i16*)

declare i32 @drand48_r(%drand48_data*, double*)

declare i32 @erand48_r(i16*, %drand48_data*, double*)

declare i32 @lrand48_r(%drand48_data*, i64*)

declare i32 @nrand48_r(i16*, %drand48_data*, i64*)

declare i32 @mrand48_r(%drand48_data*, i64*)

declare i32 @jrand48_r(i16*, %drand48_data*, i64*)

declare i32 @srand48_r(i64, %drand48_data*)

declare i32 @seed48_r(i16*, %drand48_data*)

declare i32 @lcong48_r(i16*, %drand48_data*)

declare i8* @malloc(i64)

declare i8* @calloc(i64, i64)

declare i8* @realloc(i8*, i64)

declare i8* @reallocarray(i8*, i64, i64)

declare void @free(i8*)

declare i8* @alloca(i64)

declare i8* @valloc(i64)

declare i32 @posix_memalign(i8**, i64, i64)

declare i8* @aligned_alloc(i64, i64)

declare void @abort()

declare i32 @atexit(void ()*)

declare i32 @at_quick_exit(void ()*)

declare i32 @on_exit(void (i32, i8*)*, i8*)

declare void @exit(i32)

declare void @quick_exit(i32)

declare void @_Exit(i32)

declare i8* @getenv(i8*)

declare i8* @secure_getenv(i8*)

declare i32 @putenv(i8*)

declare i32 @setenv(i8*, i8*, i32)

declare i32 @unsetenv(i8*)

declare i32 @clearenv()

declare i8* @mktemp(i8*)

declare i32 @mkstemp(i8*)

declare i32 @mkstemp64(i8*)

declare i32 @mkstemps(i8*, i32)

declare i32 @mkstemps64(i8*, i32)

declare i8* @mkdtemp(i8*)

declare i32 @mkostemp(i8*, i32)

declare i32 @mkostemp64(i8*, i32)

declare i32 @mkostemps(i8*, i32, i32)

declare i32 @mkostemps64(i8*, i32, i32)

declare i32 @system(i8*)

declare i8* @canonicalize_file_name(i8*)

declare i8* @realpath(i8*, i8*)

declare i8* @bsearch(i8*, i8*, i64, i64, i32 (i8*, i8*)*)

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*)

declare void @qsort_r(i8*, i64, i64, i32 (i8*, i8*, i8*)*, i8*)

declare i32 @abs(i32)

declare i64 @labs(i64)

declare i64 @llabs(i64)

declare %come_anon1 @div(i32, i32)

declare %come_anon2 @ldiv(i64, i64)

declare %come_anon3 @lldiv(i64, i64)

declare i8* @ecvt(double, i32, i32*, i32*)

declare i8* @fcvt(double, i32, i32*, i32*)

declare i8* @gcvt(double, i32, i8*)

declare i8* @qecvt(fp128, i32, i32*, i32*)

declare i8* @qfcvt(fp128, i32, i32*, i32*)

declare i8* @qgcvt(fp128, i32, i8*)

declare i32 @ecvt_r(double, i32, i32*, i32*, i8*, i64)

declare i32 @fcvt_r(double, i32, i32*, i32*, i8*, i64)

declare i32 @qecvt_r(fp128, i32, i32*, i32*, i8*, i64)

declare i32 @qfcvt_r(fp128, i32, i32*, i32*, i8*, i64)

declare i32 @mblen(i8*, i64)

declare i32 @mbtowc(i32*, i8*, i64)

declare i32 @wctomb(i8*, i32)

declare i64 @mbstowcs(i32*, i8*, i64)

declare i64 @wcstombs(i8*, i32*, i64)

declare i32 @rpmatch(i8*)

declare i32 @getsubopt(i8**, i8**, i8**)

declare i32 @posix_openpt(i32)

declare i32 @grantpt(i32)

declare i32 @unlockpt(i32)

declare i8* @ptsname(i32)

declare i32 @ptsname_r(i32, i8*, i64)

declare i32 @getpt()

declare i32 @getloadavg(double*, i32)

declare i32 @remove(i8*)

declare i32 @rename(i8*, i8*)

declare i32 @renameat(i32, i8*, i32, i8*)

declare i32 @renameat2(i32, i8*, i32, i8*, i32)

declare %_IO_FILE* @tmpfile()

declare %_IO_FILE* @tmpfile64()

declare i8* @tmpnam(i8*)

declare i8* @tmpnam_r(i8*)

declare i8* @tempnam(i8*, i8*)

declare i32 @fclose(%_IO_FILE*)

declare i32 @fflush(%_IO_FILE*)

declare i32 @fflush_unlocked(%_IO_FILE*)

declare i32 @fcloseall()

declare %_IO_FILE* @fopen(i8*, i8*)

declare %_IO_FILE* @freopen(i8*, i8*, %_IO_FILE*)

declare %_IO_FILE* @fopen64(i8*, i8*)

declare %_IO_FILE* @freopen64(i8*, i8*, %_IO_FILE*)

declare %_IO_FILE* @fdopen(i32, i8*)

declare %_IO_FILE* @fopencookie(i8*, i8*, %_IO_cookie_io_functions_t)

declare %_IO_FILE* @fmemopen(i8*, i64, i8*)

declare %_IO_FILE* @open_memstream(i8**, i64*)

declare void @setbuf(%_IO_FILE*, i8*)

declare i32 @setvbuf(%_IO_FILE*, i8*, i32, i64)

declare void @setbuffer(%_IO_FILE*, i8*, i64)

declare void @setlinebuf(%_IO_FILE*)

declare i32 @fprintf(%_IO_FILE*, i8*, ...)

declare i32 @printf(i8*, ...)

declare i32 @sprintf(i8*, i8*, ...)

declare i32 @vfprintf(%_IO_FILE*, i8*, %__builtin_va_list*)

declare i32 @vprintf(i8*, %__builtin_va_list*)

declare i32 @vsprintf(i8*, i8*, %__builtin_va_list*)

declare i32 @snprintf(i8*, i64, i8*, ...)

declare i32 @vsnprintf(i8*, i64, i8*, %__builtin_va_list*)

declare i32 @vasprintf(i8**, i8*, %__builtin_va_list*)

declare i32 @__asprintf(i8**, i8*, ...)

declare i32 @asprintf(i8**, i8*, ...)

declare i32 @vdprintf(i32, i8*, %__builtin_va_list*)

declare i32 @dprintf(i32, i8*, ...)

declare i32 @fscanf(%_IO_FILE*, i8*, ...)

declare i32 @scanf(i8*, ...)

declare i32 @sscanf(i8*, i8*, ...)

declare i32 @__isoc99_fscanf(%_IO_FILE*, i8*, ...)

declare i32 @__isoc99_scanf(i8*, ...)

declare i32 @__isoc99_sscanf(i8*, i8*, ...)

declare i32 @vfscanf(%_IO_FILE*, i8*, %__builtin_va_list*)

declare i32 @vscanf(i8*, %__builtin_va_list*)

declare i32 @vsscanf(i8*, i8*, %__builtin_va_list*)

declare i32 @__isoc99_vfscanf(%_IO_FILE*, i8*, %__builtin_va_list*)

declare i32 @__isoc99_vscanf(i8*, %__builtin_va_list*)

declare i32 @__isoc99_vsscanf(i8*, i8*, %__builtin_va_list*)

declare i32 @fgetc(%_IO_FILE*)

declare i32 @getc(%_IO_FILE*)

declare i32 @getchar()

declare i32 @getc_unlocked(%_IO_FILE*)

declare i32 @getchar_unlocked()

declare i32 @fgetc_unlocked(%_IO_FILE*)

declare i32 @fputc(i32, %_IO_FILE*)

declare i32 @putc(i32, %_IO_FILE*)

declare i32 @putchar(i32)

declare i32 @fputc_unlocked(i32, %_IO_FILE*)

declare i32 @putc_unlocked(i32, %_IO_FILE*)

declare i32 @putchar_unlocked(i32)

declare i32 @getw(%_IO_FILE*)

declare i32 @putw(i32, %_IO_FILE*)

declare i8* @fgets(i8*, i32, %_IO_FILE*)

declare i8* @fgets_unlocked(i8*, i32, %_IO_FILE*)

declare i64 @__getdelim(i8**, i64*, i32, %_IO_FILE*)

declare i64 @getdelim(i8**, i64*, i32, %_IO_FILE*)

declare i64 @getline(i8**, i64*, %_IO_FILE*)

declare i32 @fputs(i8*, %_IO_FILE*)

declare i32 @puts(i8*)

declare i32 @ungetc(i32, %_IO_FILE*)

declare i64 @fread(i8*, i64, i64, %_IO_FILE*)

declare i64 @fwrite(i8*, i64, i64, %_IO_FILE*)

declare i32 @fputs_unlocked(i8*, %_IO_FILE*)

declare i64 @fread_unlocked(i8*, i64, i64, %_IO_FILE*)

declare i64 @fwrite_unlocked(i8*, i64, i64, %_IO_FILE*)

declare i32 @fseek(%_IO_FILE*, i64, i32)

declare i64 @ftell(%_IO_FILE*)

declare void @rewind(%_IO_FILE*)

declare i32 @fseeko(%_IO_FILE*, i64, i32)

declare i64 @ftello(%_IO_FILE*)

declare i32 @fgetpos(%_IO_FILE*, %_G_fpos_t*)

declare i32 @fsetpos(%_IO_FILE*, %_G_fpos_t*)

declare i32 @fseeko64(%_IO_FILE*, i64, i32)

declare i64 @ftello64(%_IO_FILE*)

declare i32 @fgetpos64(%_IO_FILE*, %_G_fpos64_t*)

declare i32 @fsetpos64(%_IO_FILE*, %_G_fpos64_t*)

declare void @clearerr(%_IO_FILE*)

declare i32 @feof(%_IO_FILE*)

declare i32 @ferror(%_IO_FILE*)

declare void @clearerr_unlocked(%_IO_FILE*)

declare i32 @feof_unlocked(%_IO_FILE*)

declare i32 @ferror_unlocked(%_IO_FILE*)

declare void @perror(i8*)

declare i32 @fileno(%_IO_FILE*)

declare i32 @fileno_unlocked(%_IO_FILE*)

declare %_IO_FILE* @popen(i8*, i8*)

declare i32 @pclose(%_IO_FILE*)

declare i8* @ctermid(i8*)

declare i8* @cuserid(i8*)

declare i32 @obstack_printf(%obstack*, i8*, ...)

declare i32 @obstack_vprintf(%obstack*, i8*, %__builtin_va_list*)

declare void @flockfile(%_IO_FILE*)

declare i32 @ftrylockfile(%_IO_FILE*)

declare void @funlockfile(%_IO_FILE*)

declare i32 @__uflow(%_IO_FILE*)

declare i32 @__overflow(%_IO_FILE*, i32)

declare i8* @memcpy(i8*, i8*, i64)

declare i8* @memmove(i8*, i8*, i64)

declare i8* @memccpy(i8*, i8*, i32, i64)

declare i8* @memset(i8*, i32, i64)

declare i32 @memcmp(i8*, i8*, i64)

declare i8* @memchr(i8*, i32, i64)

declare i8* @rawmemchr(i8*, i32)

declare i8* @memrchr(i8*, i32, i64)

declare i8* @strcpy(i8*, i8*)

declare i8* @strncpy(i8*, i8*, i64)

declare i8* @strcat(i8*, i8*)

declare i8* @strncat(i8*, i8*, i64)

declare i32 @strcmp(i8*, i8*)

declare i32 @strncmp(i8*, i8*, i64)

declare i32 @strcoll(i8*, i8*)

declare i64 @strxfrm(i8*, i8*, i64)

declare i32 @strcoll_l(i8*, i8*, %__locale_struct*)

declare i64 @strxfrm_l(i8*, i8*, i64, %__locale_struct*)

declare i8* @strdup(i8*)

declare i8* @strndup(i8*, i64)

declare i8* @strchr(i8*, i32)

declare i8* @strrchr(i8*, i32)

declare i8* @strchrnul(i8*, i32)

declare i64 @strcspn(i8*, i8*)

declare i64 @strspn(i8*, i8*)

declare i8* @strpbrk(i8*, i8*)

declare i8* @strstr(i8*, i8*)

declare i8* @strtok(i8*, i8*)

declare i8* @__strtok_r(i8*, i8*, i8**)

declare i8* @strtok_r(i8*, i8*, i8**)

declare i8* @strcasestr(i8*, i8*)

declare i8* @memmem(i8*, i64, i8*, i64)

declare i8* @__mempcpy(i8*, i8*, i64)

declare i8* @mempcpy(i8*, i8*, i64)

declare i64 @strlen(i8*)

declare i64 @strnlen(i8*, i64)

declare i8* @strerror(i32)

declare i8* @strerror_r(i32, i8*, i64)

declare i8* @strerror_l(i32, %__locale_struct*)

declare i32 @bcmp(i8*, i8*, i64)

declare void @bcopy(i8*, i8*, i64)

declare void @bzero(i8*, i64)

declare i8* @index(i8*, i32)

declare i8* @rindex(i8*, i32)

declare i32 @ffs(i32)

declare i32 @ffsl(i64)

declare i32 @ffsll(i64)

declare i32 @strcasecmp(i8*, i8*)

declare i32 @strncasecmp(i8*, i8*, i64)

declare i32 @strcasecmp_l(i8*, i8*, %__locale_struct*)

declare i32 @strncasecmp_l(i8*, i8*, i64, %__locale_struct*)

declare void @explicit_bzero(i8*, i64)

declare i8* @strsep(i8**, i8*)

declare i8* @strsignal(i32)

declare i8* @__stpcpy(i8*, i8*)

declare i8* @stpcpy(i8*, i8*)

declare i8* @__stpncpy(i8*, i8*, i64)

declare i8* @stpncpy(i8*, i8*, i64)

declare i32 @strverscmp(i8*, i8*)

declare i8* @strfry(i8*)

declare i8* @memfrob(i8*, i64)

declare i8* @basename(i8*)

declare i32* @__errno_location()

declare i32 @__fpclassify(double)

declare i32 @__signbit(double)

declare i32 @__isinf(double)

declare i32 @__finite(double)

declare i32 @__isnan(double)

declare i32 @__iseqsig(double, double)

declare i32 @__issignaling(double)

declare double @acos(double)

declare double @__acos(double)

declare double @asin(double)

declare double @__asin(double)

declare double @atan(double)

declare double @__atan(double)

declare double @atan2(double, double)

declare double @__atan2(double, double)

declare double @cos(double)

declare double @__cos(double)

declare double @sin(double)

declare double @__sin(double)

declare double @tan(double)

declare double @__tan(double)

declare double @cosh(double)

declare double @__cosh(double)

declare double @sinh(double)

declare double @__sinh(double)

declare double @tanh(double)

declare double @__tanh(double)

declare void @sincos(double, double*, double*)

declare void @__sincos(double, double*, double*)

declare double @acosh(double)

declare double @__acosh(double)

declare double @asinh(double)

declare double @__asinh(double)

declare double @atanh(double)

declare double @__atanh(double)

declare double @exp(double)

declare double @__exp(double)

declare double @frexp(double, i32*)

declare double @__frexp(double, i32*)

declare double @ldexp(double, i32)

declare double @__ldexp(double, i32)

declare double @log(double)

declare double @__log(double)

declare double @log10(double)

declare double @__log10(double)

declare double @modf(double, double*)

declare double @__modf(double, double*)

declare double @exp10(double)

declare double @__exp10(double)

declare double @expm1(double)

declare double @__expm1(double)

declare double @log1p(double)

declare double @__log1p(double)

declare double @logb(double)

declare double @__logb(double)

declare double @exp2(double)

declare double @__exp2(double)

declare double @log2(double)

declare double @__log2(double)

declare double @pow(double, double)

declare double @__pow(double, double)

declare double @sqrt(double)

declare double @__sqrt(double)

declare double @hypot(double, double)

declare double @__hypot(double, double)

declare double @cbrt(double)

declare double @__cbrt(double)

declare double @ceil(double)

declare double @__ceil(double)

declare double @fabs(double)

declare double @__fabs(double)

declare double @floor(double)

declare double @__floor(double)

declare double @fmod(double, double)

declare double @__fmod(double, double)

declare i32 @isinf(double)

declare i32 @finite(double)

declare double @drem(double, double)

declare double @__drem(double, double)

declare double @significand(double)

declare double @__significand(double)

declare double @copysign(double, double)

declare double @__copysign(double, double)

declare double @nan(i8*)

declare double @__nan(i8*)

declare i32 @isnan(double)

declare double @j0(double)

declare double @__j0(double)

declare double @j1(double)

declare double @__j1(double)

declare double @jn(i32, double)

declare double @__jn(i32, double)

declare double @y0(double)

declare double @__y0(double)

declare double @y1(double)

declare double @__y1(double)

declare double @yn(i32, double)

declare double @__yn(i32, double)

declare double @erf(double)

declare double @__erf(double)

declare double @erfc(double)

declare double @__erfc(double)

declare double @lgamma(double)

declare double @__lgamma(double)

declare double @tgamma(double)

declare double @__tgamma(double)

declare double @gamma(double)

declare double @__gamma(double)

declare double @lgamma_r(double, i32*)

declare double @__lgamma_r(double, i32*)

declare double @rint(double)

declare double @__rint(double)

declare double @nextafter(double, double)

declare double @__nextafter(double, double)

declare double @nexttoward(double, fp128)

declare double @__nexttoward(double, fp128)

declare double @nextdown(double)

declare double @__nextdown(double)

declare double @nextup(double)

declare double @__nextup(double)

declare double @remainder(double, double)

declare double @__remainder(double, double)

declare double @scalbn(double, i32)

declare double @__scalbn(double, i32)

declare i32 @ilogb(double)

declare i32 @__ilogb(double)

declare i64 @llogb(double)

declare i64 @__llogb(double)

declare double @scalbln(double, i64)

declare double @__scalbln(double, i64)

declare double @nearbyint(double)

declare double @__nearbyint(double)

declare double @round(double)

declare double @__round(double)

declare double @trunc(double)

declare double @__trunc(double)

declare double @remquo(double, double, i32*)

declare double @__remquo(double, double, i32*)

declare i64 @lrint(double)

declare i64 @__lrint(double)

declare i64 @llrint(double)

declare i64 @__llrint(double)

declare i64 @lround(double)

declare i64 @__lround(double)

declare i64 @llround(double)

declare i64 @__llround(double)

declare double @fdim(double, double)

declare double @__fdim(double, double)

declare double @fmax(double, double)

declare double @__fmax(double, double)

declare double @fmin(double, double)

declare double @__fmin(double, double)

declare double @fma(double, double, double)

declare double @__fma(double, double, double)

declare double @roundeven(double)

declare double @__roundeven(double)

declare i64 @fromfp(double, i32, i32)

declare i64 @__fromfp(double, i32, i32)

declare i64 @ufromfp(double, i32, i32)

declare i64 @__ufromfp(double, i32, i32)

declare i64 @fromfpx(double, i32, i32)

declare i64 @__fromfpx(double, i32, i32)

declare i64 @ufromfpx(double, i32, i32)

declare i64 @__ufromfpx(double, i32, i32)

declare double @fmaxmag(double, double)

declare double @__fmaxmag(double, double)

declare double @fminmag(double, double)

declare double @__fminmag(double, double)

declare i32 @canonicalize(double*, double*)

declare i32 @totalorder(double*, double*)

declare i32 @totalordermag(double*, double*)

declare double @getpayload(double*)

declare double @__getpayload(double*)

declare i32 @setpayload(double*, double)

declare i32 @setpayloadsig(double*, double)

declare double @scalb(double, double)

declare double @__scalb(double, double)

declare i32 @__fpclassifyf(float)

declare i32 @__signbitf(float)

declare i32 @__isinff(float)

declare i32 @__finitef(float)

declare i32 @__isnanf(float)

declare i32 @__iseqsigf(float, float)

declare i32 @__issignalingf(float)

declare float @acosf(float)

declare float @__acosf(float)

declare float @asinf(float)

declare float @__asinf(float)

declare float @atanf(float)

declare float @__atanf(float)

declare float @atan2f(float, float)

declare float @__atan2f(float, float)

declare float @cosf(float)

declare float @__cosf(float)

declare float @sinf(float)

declare float @__sinf(float)

declare float @tanf(float)

declare float @__tanf(float)

declare float @coshf(float)

declare float @__coshf(float)

declare float @sinhf(float)

declare float @__sinhf(float)

declare float @tanhf(float)

declare float @__tanhf(float)

declare void @sincosf(float, float*, float*)

declare void @__sincosf(float, float*, float*)

declare float @acoshf(float)

declare float @__acoshf(float)

declare float @asinhf(float)

declare float @__asinhf(float)

declare float @atanhf(float)

declare float @__atanhf(float)

declare float @expf(float)

declare float @__expf(float)

declare float @frexpf(float, i32*)

declare float @__frexpf(float, i32*)

declare float @ldexpf(float, i32)

declare float @__ldexpf(float, i32)

declare float @logf(float)

declare float @__logf(float)

declare float @log10f(float)

declare float @__log10f(float)

declare float @modff(float, float*)

declare float @__modff(float, float*)

declare float @exp10f(float)

declare float @__exp10f(float)

declare float @expm1f(float)

declare float @__expm1f(float)

declare float @log1pf(float)

declare float @__log1pf(float)

declare float @logbf(float)

declare float @__logbf(float)

declare float @exp2f(float)

declare float @__exp2f(float)

declare float @log2f(float)

declare float @__log2f(float)

declare float @powf(float, float)

declare float @__powf(float, float)

declare float @sqrtf(float)

declare float @__sqrtf(float)

declare float @hypotf(float, float)

declare float @__hypotf(float, float)

declare float @cbrtf(float)

declare float @__cbrtf(float)

declare float @ceilf(float)

declare float @__ceilf(float)

declare float @fabsf(float)

declare float @__fabsf(float)

declare float @floorf(float)

declare float @__floorf(float)

declare float @fmodf(float, float)

declare float @__fmodf(float, float)

declare i32 @isinff(float)

declare i32 @finitef(float)

declare float @dremf(float, float)

declare float @__dremf(float, float)

declare float @significandf(float)

declare float @__significandf(float)

declare float @copysignf(float, float)

declare float @__copysignf(float, float)

declare float @nanf(i8*)

declare float @__nanf(i8*)

declare i32 @isnanf(float)

declare float @j0f(float)

declare float @__j0f(float)

declare float @j1f(float)

declare float @__j1f(float)

declare float @jnf(i32, float)

declare float @__jnf(i32, float)

declare float @y0f(float)

declare float @__y0f(float)

declare float @y1f(float)

declare float @__y1f(float)

declare float @ynf(i32, float)

declare float @__ynf(i32, float)

declare float @erff(float)

declare float @__erff(float)

declare float @erfcf(float)

declare float @__erfcf(float)

declare float @lgammaf(float)

declare float @__lgammaf(float)

declare float @tgammaf(float)

declare float @__tgammaf(float)

declare float @gammaf(float)

declare float @__gammaf(float)

declare float @lgammaf_r(float, i32*)

declare float @__lgammaf_r(float, i32*)

declare float @rintf(float)

declare float @__rintf(float)

declare float @nextafterf(float, float)

declare float @__nextafterf(float, float)

declare float @nexttowardf(float, fp128)

declare float @__nexttowardf(float, fp128)

declare float @nextdownf(float)

declare float @__nextdownf(float)

declare float @nextupf(float)

declare float @__nextupf(float)

declare float @remainderf(float, float)

declare float @__remainderf(float, float)

declare float @scalbnf(float, i32)

declare float @__scalbnf(float, i32)

declare i32 @ilogbf(float)

declare i32 @__ilogbf(float)

declare i64 @llogbf(float)

declare i64 @__llogbf(float)

declare float @scalblnf(float, i64)

declare float @__scalblnf(float, i64)

declare float @nearbyintf(float)

declare float @__nearbyintf(float)

declare float @roundf(float)

declare float @__roundf(float)

declare float @truncf(float)

declare float @__truncf(float)

declare float @remquof(float, float, i32*)

declare float @__remquof(float, float, i32*)

declare i64 @lrintf(float)

declare i64 @__lrintf(float)

declare i64 @llrintf(float)

declare i64 @__llrintf(float)

declare i64 @lroundf(float)

declare i64 @__lroundf(float)

declare i64 @llroundf(float)

declare i64 @__llroundf(float)

declare float @fdimf(float, float)

declare float @__fdimf(float, float)

declare float @fmaxf(float, float)

declare float @__fmaxf(float, float)

declare float @fminf(float, float)

declare float @__fminf(float, float)

declare float @fmaf(float, float, float)

declare float @__fmaf(float, float, float)

declare float @roundevenf(float)

declare float @__roundevenf(float)

declare i64 @fromfpf(float, i32, i32)

declare i64 @__fromfpf(float, i32, i32)

declare i64 @ufromfpf(float, i32, i32)

declare i64 @__ufromfpf(float, i32, i32)

declare i64 @fromfpxf(float, i32, i32)

declare i64 @__fromfpxf(float, i32, i32)

declare i64 @ufromfpxf(float, i32, i32)

declare i64 @__ufromfpxf(float, i32, i32)

declare float @fmaxmagf(float, float)

declare float @__fmaxmagf(float, float)

declare float @fminmagf(float, float)

declare float @__fminmagf(float, float)

declare i32 @canonicalizef(float*, float*)

declare i32 @totalorderf(float*, float*)

declare i32 @totalordermagf(float*, float*)

declare float @getpayloadf(float*)

declare float @__getpayloadf(float*)

declare i32 @setpayloadf(float*, float)

declare i32 @setpayloadsigf(float*, float)

declare float @scalbf(float, float)

declare float @__scalbf(float, float)

declare i32 @__fpclassifyl(fp128)

declare i32 @__signbitl(fp128)

declare i32 @__isinfl(fp128)

declare i32 @__finitel(fp128)

declare i32 @__isnanl(fp128)

declare i32 @__iseqsigl(fp128, fp128)

declare i32 @__issignalingl(fp128)

declare fp128 @acosl(fp128)

declare fp128 @__acosl(fp128)

declare fp128 @asinl(fp128)

declare fp128 @__asinl(fp128)

declare fp128 @atanl(fp128)

declare fp128 @__atanl(fp128)

declare fp128 @atan2l(fp128, fp128)

declare fp128 @__atan2l(fp128, fp128)

declare fp128 @cosl(fp128)

declare fp128 @__cosl(fp128)

declare fp128 @sinl(fp128)

declare fp128 @__sinl(fp128)

declare fp128 @tanl(fp128)

declare fp128 @__tanl(fp128)

declare fp128 @coshl(fp128)

declare fp128 @__coshl(fp128)

declare fp128 @sinhl(fp128)

declare fp128 @__sinhl(fp128)

declare fp128 @tanhl(fp128)

declare fp128 @__tanhl(fp128)

declare void @sincosl(fp128, fp128*, fp128*)

declare void @__sincosl(fp128, fp128*, fp128*)

declare fp128 @acoshl(fp128)

declare fp128 @__acoshl(fp128)

declare fp128 @asinhl(fp128)

declare fp128 @__asinhl(fp128)

declare fp128 @atanhl(fp128)

declare fp128 @__atanhl(fp128)

declare fp128 @expl(fp128)

declare fp128 @__expl(fp128)

declare fp128 @frexpl(fp128, i32*)

declare fp128 @__frexpl(fp128, i32*)

declare fp128 @ldexpl(fp128, i32)

declare fp128 @__ldexpl(fp128, i32)

declare fp128 @logl(fp128)

declare fp128 @__logl(fp128)

declare fp128 @log10l(fp128)

declare fp128 @__log10l(fp128)

declare fp128 @modfl(fp128, fp128*)

declare fp128 @__modfl(fp128, fp128*)

declare fp128 @exp10l(fp128)

declare fp128 @__exp10l(fp128)

declare fp128 @expm1l(fp128)

declare fp128 @__expm1l(fp128)

declare fp128 @log1pl(fp128)

declare fp128 @__log1pl(fp128)

declare fp128 @logbl(fp128)

declare fp128 @__logbl(fp128)

declare fp128 @exp2l(fp128)

declare fp128 @__exp2l(fp128)

declare fp128 @log2l(fp128)

declare fp128 @__log2l(fp128)

declare fp128 @powl(fp128, fp128)

declare fp128 @__powl(fp128, fp128)

declare fp128 @sqrtl(fp128)

declare fp128 @__sqrtl(fp128)

declare fp128 @hypotl(fp128, fp128)

declare fp128 @__hypotl(fp128, fp128)

declare fp128 @cbrtl(fp128)

declare fp128 @__cbrtl(fp128)

declare fp128 @ceill(fp128)

declare fp128 @__ceill(fp128)

declare fp128 @fabsl(fp128)

declare fp128 @__fabsl(fp128)

declare fp128 @floorl(fp128)

declare fp128 @__floorl(fp128)

declare fp128 @fmodl(fp128, fp128)

declare fp128 @__fmodl(fp128, fp128)

declare i32 @isinfl(fp128)

declare i32 @finitel(fp128)

declare fp128 @dreml(fp128, fp128)

declare fp128 @__dreml(fp128, fp128)

declare fp128 @significandl(fp128)

declare fp128 @__significandl(fp128)

declare fp128 @copysignl(fp128, fp128)

declare fp128 @__copysignl(fp128, fp128)

declare fp128 @nanl(i8*)

declare fp128 @__nanl(i8*)

declare i32 @isnanl(fp128)

declare fp128 @j0l(fp128)

declare fp128 @__j0l(fp128)

declare fp128 @j1l(fp128)

declare fp128 @__j1l(fp128)

declare fp128 @jnl(i32, fp128)

declare fp128 @__jnl(i32, fp128)

declare fp128 @y0l(fp128)

declare fp128 @__y0l(fp128)

declare fp128 @y1l(fp128)

declare fp128 @__y1l(fp128)

declare fp128 @ynl(i32, fp128)

declare fp128 @__ynl(i32, fp128)

declare fp128 @erfl(fp128)

declare fp128 @__erfl(fp128)

declare fp128 @erfcl(fp128)

declare fp128 @__erfcl(fp128)

declare fp128 @lgammal(fp128)

declare fp128 @__lgammal(fp128)

declare fp128 @tgammal(fp128)

declare fp128 @__tgammal(fp128)

declare fp128 @gammal(fp128)

declare fp128 @__gammal(fp128)

declare fp128 @lgammal_r(fp128, i32*)

declare fp128 @__lgammal_r(fp128, i32*)

declare fp128 @rintl(fp128)

declare fp128 @__rintl(fp128)

declare fp128 @nextafterl(fp128, fp128)

declare fp128 @__nextafterl(fp128, fp128)

declare fp128 @nexttowardl(fp128, fp128)

declare fp128 @__nexttowardl(fp128, fp128)

declare fp128 @nextdownl(fp128)

declare fp128 @__nextdownl(fp128)

declare fp128 @nextupl(fp128)

declare fp128 @__nextupl(fp128)

declare fp128 @remainderl(fp128, fp128)

declare fp128 @__remainderl(fp128, fp128)

declare fp128 @scalbnl(fp128, i32)

declare fp128 @__scalbnl(fp128, i32)

declare i32 @ilogbl(fp128)

declare i32 @__ilogbl(fp128)

declare i64 @llogbl(fp128)

declare i64 @__llogbl(fp128)

declare fp128 @scalblnl(fp128, i64)

declare fp128 @__scalblnl(fp128, i64)

declare fp128 @nearbyintl(fp128)

declare fp128 @__nearbyintl(fp128)

declare fp128 @roundl(fp128)

declare fp128 @__roundl(fp128)

declare fp128 @truncl(fp128)

declare fp128 @__truncl(fp128)

declare fp128 @remquol(fp128, fp128, i32*)

declare fp128 @__remquol(fp128, fp128, i32*)

declare i64 @lrintl(fp128)

declare i64 @__lrintl(fp128)

declare i64 @llrintl(fp128)

declare i64 @__llrintl(fp128)

declare i64 @lroundl(fp128)

declare i64 @__lroundl(fp128)

declare i64 @llroundl(fp128)

declare i64 @__llroundl(fp128)

declare fp128 @fdiml(fp128, fp128)

declare fp128 @__fdiml(fp128, fp128)

declare fp128 @fmaxl(fp128, fp128)

declare fp128 @__fmaxl(fp128, fp128)

declare fp128 @fminl(fp128, fp128)

declare fp128 @__fminl(fp128, fp128)

declare fp128 @fmal(fp128, fp128, fp128)

declare fp128 @__fmal(fp128, fp128, fp128)

declare fp128 @roundevenl(fp128)

declare fp128 @__roundevenl(fp128)

declare i64 @fromfpl(fp128, i32, i32)

declare i64 @__fromfpl(fp128, i32, i32)

declare i64 @ufromfpl(fp128, i32, i32)

declare i64 @__ufromfpl(fp128, i32, i32)

declare i64 @fromfpxl(fp128, i32, i32)

declare i64 @__fromfpxl(fp128, i32, i32)

declare i64 @ufromfpxl(fp128, i32, i32)

declare i64 @__ufromfpxl(fp128, i32, i32)

declare fp128 @fmaxmagl(fp128, fp128)

declare fp128 @__fmaxmagl(fp128, fp128)

declare fp128 @fminmagl(fp128, fp128)

declare fp128 @__fminmagl(fp128, fp128)

declare i32 @canonicalizel(fp128*, fp128*)

declare i32 @totalorderl(fp128*, fp128*)

declare i32 @totalordermagl(fp128*, fp128*)

declare fp128 @getpayloadl(fp128*)

declare fp128 @__getpayloadl(fp128*)

declare i32 @setpayloadl(fp128*, fp128)

declare i32 @setpayloadsigl(fp128*, fp128)

declare fp128 @scalbl(fp128, fp128)

declare fp128 @__scalbl(fp128, fp128)

declare float @acosf32(float)

declare float @__acosf32(float)

declare float @asinf32(float)

declare float @__asinf32(float)

declare float @atanf32(float)

declare float @__atanf32(float)

declare float @atan2f32(float, float)

declare float @__atan2f32(float, float)

declare float @cosf32(float)

declare float @__cosf32(float)

declare float @sinf32(float)

declare float @__sinf32(float)

declare float @tanf32(float)

declare float @__tanf32(float)

declare float @coshf32(float)

declare float @__coshf32(float)

declare float @sinhf32(float)

declare float @__sinhf32(float)

declare float @tanhf32(float)

declare float @__tanhf32(float)

declare void @sincosf32(float, float*, float*)

declare void @__sincosf32(float, float*, float*)

declare float @acoshf32(float)

declare float @__acoshf32(float)

declare float @asinhf32(float)

declare float @__asinhf32(float)

declare float @atanhf32(float)

declare float @__atanhf32(float)

declare float @expf32(float)

declare float @__expf32(float)

declare float @frexpf32(float, i32*)

declare float @__frexpf32(float, i32*)

declare float @ldexpf32(float, i32)

declare float @__ldexpf32(float, i32)

declare float @logf32(float)

declare float @__logf32(float)

declare float @log10f32(float)

declare float @__log10f32(float)

declare float @modff32(float, float*)

declare float @__modff32(float, float*)

declare float @exp10f32(float)

declare float @__exp10f32(float)

declare float @expm1f32(float)

declare float @__expm1f32(float)

declare float @log1pf32(float)

declare float @__log1pf32(float)

declare float @logbf32(float)

declare float @__logbf32(float)

declare float @exp2f32(float)

declare float @__exp2f32(float)

declare float @log2f32(float)

declare float @__log2f32(float)

declare float @powf32(float, float)

declare float @__powf32(float, float)

declare float @sqrtf32(float)

declare float @__sqrtf32(float)

declare float @hypotf32(float, float)

declare float @__hypotf32(float, float)

declare float @cbrtf32(float)

declare float @__cbrtf32(float)

declare float @ceilf32(float)

declare float @__ceilf32(float)

declare float @fabsf32(float)

declare float @__fabsf32(float)

declare float @floorf32(float)

declare float @__floorf32(float)

declare float @fmodf32(float, float)

declare float @__fmodf32(float, float)

declare float @copysignf32(float, float)

declare float @__copysignf32(float, float)

declare float @nanf32(i8*)

declare float @__nanf32(i8*)

declare float @j0f32(float)

declare float @__j0f32(float)

declare float @j1f32(float)

declare float @__j1f32(float)

declare float @jnf32(i32, float)

declare float @__jnf32(i32, float)

declare float @y0f32(float)

declare float @__y0f32(float)

declare float @y1f32(float)

declare float @__y1f32(float)

declare float @ynf32(i32, float)

declare float @__ynf32(i32, float)

declare float @erff32(float)

declare float @__erff32(float)

declare float @erfcf32(float)

declare float @__erfcf32(float)

declare float @lgammaf32(float)

declare float @__lgammaf32(float)

declare float @tgammaf32(float)

declare float @__tgammaf32(float)

declare float @lgammaf32_r(float, i32*)

declare float @__lgammaf32_r(float, i32*)

declare float @rintf32(float)

declare float @__rintf32(float)

declare float @nextafterf32(float, float)

declare float @__nextafterf32(float, float)

declare float @nextdownf32(float)

declare float @__nextdownf32(float)

declare float @nextupf32(float)

declare float @__nextupf32(float)

declare float @remainderf32(float, float)

declare float @__remainderf32(float, float)

declare float @scalbnf32(float, i32)

declare float @__scalbnf32(float, i32)

declare i32 @ilogbf32(float)

declare i32 @__ilogbf32(float)

declare i64 @llogbf32(float)

declare i64 @__llogbf32(float)

declare float @scalblnf32(float, i64)

declare float @__scalblnf32(float, i64)

declare float @nearbyintf32(float)

declare float @__nearbyintf32(float)

declare float @roundf32(float)

declare float @__roundf32(float)

declare float @truncf32(float)

declare float @__truncf32(float)

declare float @remquof32(float, float, i32*)

declare float @__remquof32(float, float, i32*)

declare i64 @lrintf32(float)

declare i64 @__lrintf32(float)

declare i64 @llrintf32(float)

declare i64 @__llrintf32(float)

declare i64 @lroundf32(float)

declare i64 @__lroundf32(float)

declare i64 @llroundf32(float)

declare i64 @__llroundf32(float)

declare float @fdimf32(float, float)

declare float @__fdimf32(float, float)

declare float @fmaxf32(float, float)

declare float @__fmaxf32(float, float)

declare float @fminf32(float, float)

declare float @__fminf32(float, float)

declare float @fmaf32(float, float, float)

declare float @__fmaf32(float, float, float)

declare float @roundevenf32(float)

declare float @__roundevenf32(float)

declare i64 @fromfpf32(float, i32, i32)

declare i64 @__fromfpf32(float, i32, i32)

declare i64 @ufromfpf32(float, i32, i32)

declare i64 @__ufromfpf32(float, i32, i32)

declare i64 @fromfpxf32(float, i32, i32)

declare i64 @__fromfpxf32(float, i32, i32)

declare i64 @ufromfpxf32(float, i32, i32)

declare i64 @__ufromfpxf32(float, i32, i32)

declare float @fmaxmagf32(float, float)

declare float @__fmaxmagf32(float, float)

declare float @fminmagf32(float, float)

declare float @__fminmagf32(float, float)

declare i32 @canonicalizef32(float*, float*)

declare i32 @totalorderf32(float*, float*)

declare i32 @totalordermagf32(float*, float*)

declare float @getpayloadf32(float*)

declare float @__getpayloadf32(float*)

declare i32 @setpayloadf32(float*, float)

declare i32 @setpayloadsigf32(float*, float)

declare double @acosf64(double)

declare double @__acosf64(double)

declare double @asinf64(double)

declare double @__asinf64(double)

declare double @atanf64(double)

declare double @__atanf64(double)

declare double @atan2f64(double, double)

declare double @__atan2f64(double, double)

declare double @cosf64(double)

declare double @__cosf64(double)

declare double @sinf64(double)

declare double @__sinf64(double)

declare double @tanf64(double)

declare double @__tanf64(double)

declare double @coshf64(double)

declare double @__coshf64(double)

declare double @sinhf64(double)

declare double @__sinhf64(double)

declare double @tanhf64(double)

declare double @__tanhf64(double)

declare void @sincosf64(double, double*, double*)

declare void @__sincosf64(double, double*, double*)

declare double @acoshf64(double)

declare double @__acoshf64(double)

declare double @asinhf64(double)

declare double @__asinhf64(double)

declare double @atanhf64(double)

declare double @__atanhf64(double)

declare double @expf64(double)

declare double @__expf64(double)

declare double @frexpf64(double, i32*)

declare double @__frexpf64(double, i32*)

declare double @ldexpf64(double, i32)

declare double @__ldexpf64(double, i32)

declare double @logf64(double)

declare double @__logf64(double)

declare double @log10f64(double)

declare double @__log10f64(double)

declare double @modff64(double, double*)

declare double @__modff64(double, double*)

declare double @exp10f64(double)

declare double @__exp10f64(double)

declare double @expm1f64(double)

declare double @__expm1f64(double)

declare double @log1pf64(double)

declare double @__log1pf64(double)

declare double @logbf64(double)

declare double @__logbf64(double)

declare double @exp2f64(double)

declare double @__exp2f64(double)

declare double @log2f64(double)

declare double @__log2f64(double)

declare double @powf64(double, double)

declare double @__powf64(double, double)

declare double @sqrtf64(double)

declare double @__sqrtf64(double)

declare double @hypotf64(double, double)

declare double @__hypotf64(double, double)

declare double @cbrtf64(double)

declare double @__cbrtf64(double)

declare double @ceilf64(double)

declare double @__ceilf64(double)

declare double @fabsf64(double)

declare double @__fabsf64(double)

declare double @floorf64(double)

declare double @__floorf64(double)

declare double @fmodf64(double, double)

declare double @__fmodf64(double, double)

declare double @copysignf64(double, double)

declare double @__copysignf64(double, double)

declare double @nanf64(i8*)

declare double @__nanf64(i8*)

declare double @j0f64(double)

declare double @__j0f64(double)

declare double @j1f64(double)

declare double @__j1f64(double)

declare double @jnf64(i32, double)

declare double @__jnf64(i32, double)

declare double @y0f64(double)

declare double @__y0f64(double)

declare double @y1f64(double)

declare double @__y1f64(double)

declare double @ynf64(i32, double)

declare double @__ynf64(i32, double)

declare double @erff64(double)

declare double @__erff64(double)

declare double @erfcf64(double)

declare double @__erfcf64(double)

declare double @lgammaf64(double)

declare double @__lgammaf64(double)

declare double @tgammaf64(double)

declare double @__tgammaf64(double)

declare double @lgammaf64_r(double, i32*)

declare double @__lgammaf64_r(double, i32*)

declare double @rintf64(double)

declare double @__rintf64(double)

declare double @nextafterf64(double, double)

declare double @__nextafterf64(double, double)

declare double @nextdownf64(double)

declare double @__nextdownf64(double)

declare double @nextupf64(double)

declare double @__nextupf64(double)

declare double @remainderf64(double, double)

declare double @__remainderf64(double, double)

declare double @scalbnf64(double, i32)

declare double @__scalbnf64(double, i32)

declare i32 @ilogbf64(double)

declare i32 @__ilogbf64(double)

declare i64 @llogbf64(double)

declare i64 @__llogbf64(double)

declare double @scalblnf64(double, i64)

declare double @__scalblnf64(double, i64)

declare double @nearbyintf64(double)

declare double @__nearbyintf64(double)

declare double @roundf64(double)

declare double @__roundf64(double)

declare double @truncf64(double)

declare double @__truncf64(double)

declare double @remquof64(double, double, i32*)

declare double @__remquof64(double, double, i32*)

declare i64 @lrintf64(double)

declare i64 @__lrintf64(double)

declare i64 @llrintf64(double)

declare i64 @__llrintf64(double)

declare i64 @lroundf64(double)

declare i64 @__lroundf64(double)

declare i64 @llroundf64(double)

declare i64 @__llroundf64(double)

declare double @fdimf64(double, double)

declare double @__fdimf64(double, double)

declare double @fmaxf64(double, double)

declare double @__fmaxf64(double, double)

declare double @fminf64(double, double)

declare double @__fminf64(double, double)

declare double @fmaf64(double, double, double)

declare double @__fmaf64(double, double, double)

declare double @roundevenf64(double)

declare double @__roundevenf64(double)

declare i64 @fromfpf64(double, i32, i32)

declare i64 @__fromfpf64(double, i32, i32)

declare i64 @ufromfpf64(double, i32, i32)

declare i64 @__ufromfpf64(double, i32, i32)

declare i64 @fromfpxf64(double, i32, i32)

declare i64 @__fromfpxf64(double, i32, i32)

declare i64 @ufromfpxf64(double, i32, i32)

declare i64 @__ufromfpxf64(double, i32, i32)

declare double @fmaxmagf64(double, double)

declare double @__fmaxmagf64(double, double)

declare double @fminmagf64(double, double)

declare double @__fminmagf64(double, double)

declare i32 @canonicalizef64(double*, double*)

declare i32 @totalorderf64(double*, double*)

declare i32 @totalordermagf64(double*, double*)

declare double @getpayloadf64(double*)

declare double @__getpayloadf64(double*)

declare i32 @setpayloadf64(double*, double)

declare i32 @setpayloadsigf64(double*, double)

declare double @acosf32x(double)

declare double @__acosf32x(double)

declare double @asinf32x(double)

declare double @__asinf32x(double)

declare double @atanf32x(double)

declare double @__atanf32x(double)

declare double @atan2f32x(double, double)

declare double @__atan2f32x(double, double)

declare double @cosf32x(double)

declare double @__cosf32x(double)

declare double @sinf32x(double)

declare double @__sinf32x(double)

declare double @tanf32x(double)

declare double @__tanf32x(double)

declare double @coshf32x(double)

declare double @__coshf32x(double)

declare double @sinhf32x(double)

declare double @__sinhf32x(double)

declare double @tanhf32x(double)

declare double @__tanhf32x(double)

declare void @sincosf32x(double, double*, double*)

declare void @__sincosf32x(double, double*, double*)

declare double @acoshf32x(double)

declare double @__acoshf32x(double)

declare double @asinhf32x(double)

declare double @__asinhf32x(double)

declare double @atanhf32x(double)

declare double @__atanhf32x(double)

declare double @expf32x(double)

declare double @__expf32x(double)

declare double @frexpf32x(double, i32*)

declare double @__frexpf32x(double, i32*)

declare double @ldexpf32x(double, i32)

declare double @__ldexpf32x(double, i32)

declare double @logf32x(double)

declare double @__logf32x(double)

declare double @log10f32x(double)

declare double @__log10f32x(double)

declare double @modff32x(double, double*)

declare double @__modff32x(double, double*)

declare double @exp10f32x(double)

declare double @__exp10f32x(double)

declare double @expm1f32x(double)

declare double @__expm1f32x(double)

declare double @log1pf32x(double)

declare double @__log1pf32x(double)

declare double @logbf32x(double)

declare double @__logbf32x(double)

declare double @exp2f32x(double)

declare double @__exp2f32x(double)

declare double @log2f32x(double)

declare double @__log2f32x(double)

declare double @powf32x(double, double)

declare double @__powf32x(double, double)

declare double @sqrtf32x(double)

declare double @__sqrtf32x(double)

declare double @hypotf32x(double, double)

declare double @__hypotf32x(double, double)

declare double @cbrtf32x(double)

declare double @__cbrtf32x(double)

declare double @ceilf32x(double)

declare double @__ceilf32x(double)

declare double @fabsf32x(double)

declare double @__fabsf32x(double)

declare double @floorf32x(double)

declare double @__floorf32x(double)

declare double @fmodf32x(double, double)

declare double @__fmodf32x(double, double)

declare double @copysignf32x(double, double)

declare double @__copysignf32x(double, double)

declare double @nanf32x(i8*)

declare double @__nanf32x(i8*)

declare double @j0f32x(double)

declare double @__j0f32x(double)

declare double @j1f32x(double)

declare double @__j1f32x(double)

declare double @jnf32x(i32, double)

declare double @__jnf32x(i32, double)

declare double @y0f32x(double)

declare double @__y0f32x(double)

declare double @y1f32x(double)

declare double @__y1f32x(double)

declare double @ynf32x(i32, double)

declare double @__ynf32x(i32, double)

declare double @erff32x(double)

declare double @__erff32x(double)

declare double @erfcf32x(double)

declare double @__erfcf32x(double)

declare double @lgammaf32x(double)

declare double @__lgammaf32x(double)

declare double @tgammaf32x(double)

declare double @__tgammaf32x(double)

declare double @lgammaf32x_r(double, i32*)

declare double @__lgammaf32x_r(double, i32*)

declare double @rintf32x(double)

declare double @__rintf32x(double)

declare double @nextafterf32x(double, double)

declare double @__nextafterf32x(double, double)

declare double @nextdownf32x(double)

declare double @__nextdownf32x(double)

declare double @nextupf32x(double)

declare double @__nextupf32x(double)

declare double @remainderf32x(double, double)

declare double @__remainderf32x(double, double)

declare double @scalbnf32x(double, i32)

declare double @__scalbnf32x(double, i32)

declare i32 @ilogbf32x(double)

declare i32 @__ilogbf32x(double)

declare i64 @llogbf32x(double)

declare i64 @__llogbf32x(double)

declare double @scalblnf32x(double, i64)

declare double @__scalblnf32x(double, i64)

declare double @nearbyintf32x(double)

declare double @__nearbyintf32x(double)

declare double @roundf32x(double)

declare double @__roundf32x(double)

declare double @truncf32x(double)

declare double @__truncf32x(double)

declare double @remquof32x(double, double, i32*)

declare double @__remquof32x(double, double, i32*)

declare i64 @lrintf32x(double)

declare i64 @__lrintf32x(double)

declare i64 @llrintf32x(double)

declare i64 @__llrintf32x(double)

declare i64 @lroundf32x(double)

declare i64 @__lroundf32x(double)

declare i64 @llroundf32x(double)

declare i64 @__llroundf32x(double)

declare double @fdimf32x(double, double)

declare double @__fdimf32x(double, double)

declare double @fmaxf32x(double, double)

declare double @__fmaxf32x(double, double)

declare double @fminf32x(double, double)

declare double @__fminf32x(double, double)

declare double @fmaf32x(double, double, double)

declare double @__fmaf32x(double, double, double)

declare double @roundevenf32x(double)

declare double @__roundevenf32x(double)

declare i64 @fromfpf32x(double, i32, i32)

declare i64 @__fromfpf32x(double, i32, i32)

declare i64 @ufromfpf32x(double, i32, i32)

declare i64 @__ufromfpf32x(double, i32, i32)

declare i64 @fromfpxf32x(double, i32, i32)

declare i64 @__fromfpxf32x(double, i32, i32)

declare i64 @ufromfpxf32x(double, i32, i32)

declare i64 @__ufromfpxf32x(double, i32, i32)

declare double @fmaxmagf32x(double, double)

declare double @__fmaxmagf32x(double, double)

declare double @fminmagf32x(double, double)

declare double @__fminmagf32x(double, double)

declare i32 @canonicalizef32x(double*, double*)

declare i32 @totalorderf32x(double*, double*)

declare i32 @totalordermagf32x(double*, double*)

declare double @getpayloadf32x(double*)

declare double @__getpayloadf32x(double*)

declare i32 @setpayloadf32x(double*, double)

declare i32 @setpayloadsigf32x(double*, double)

declare fp128 @acosf64x(fp128)

declare fp128 @__acosf64x(fp128)

declare fp128 @asinf64x(fp128)

declare fp128 @__asinf64x(fp128)

declare fp128 @atanf64x(fp128)

declare fp128 @__atanf64x(fp128)

declare fp128 @atan2f64x(fp128, fp128)

declare fp128 @__atan2f64x(fp128, fp128)

declare fp128 @cosf64x(fp128)

declare fp128 @__cosf64x(fp128)

declare fp128 @sinf64x(fp128)

declare fp128 @__sinf64x(fp128)

declare fp128 @tanf64x(fp128)

declare fp128 @__tanf64x(fp128)

declare fp128 @coshf64x(fp128)

declare fp128 @__coshf64x(fp128)

declare fp128 @sinhf64x(fp128)

declare fp128 @__sinhf64x(fp128)

declare fp128 @tanhf64x(fp128)

declare fp128 @__tanhf64x(fp128)

declare void @sincosf64x(fp128, fp128*, fp128*)

declare void @__sincosf64x(fp128, fp128*, fp128*)

declare fp128 @acoshf64x(fp128)

declare fp128 @__acoshf64x(fp128)

declare fp128 @asinhf64x(fp128)

declare fp128 @__asinhf64x(fp128)

declare fp128 @atanhf64x(fp128)

declare fp128 @__atanhf64x(fp128)

declare fp128 @expf64x(fp128)

declare fp128 @__expf64x(fp128)

declare fp128 @frexpf64x(fp128, i32*)

declare fp128 @__frexpf64x(fp128, i32*)

declare fp128 @ldexpf64x(fp128, i32)

declare fp128 @__ldexpf64x(fp128, i32)

declare fp128 @logf64x(fp128)

declare fp128 @__logf64x(fp128)

declare fp128 @log10f64x(fp128)

declare fp128 @__log10f64x(fp128)

declare fp128 @modff64x(fp128, fp128*)

declare fp128 @__modff64x(fp128, fp128*)

declare fp128 @exp10f64x(fp128)

declare fp128 @__exp10f64x(fp128)

declare fp128 @expm1f64x(fp128)

declare fp128 @__expm1f64x(fp128)

declare fp128 @log1pf64x(fp128)

declare fp128 @__log1pf64x(fp128)

declare fp128 @logbf64x(fp128)

declare fp128 @__logbf64x(fp128)

declare fp128 @exp2f64x(fp128)

declare fp128 @__exp2f64x(fp128)

declare fp128 @log2f64x(fp128)

declare fp128 @__log2f64x(fp128)

declare fp128 @powf64x(fp128, fp128)

declare fp128 @__powf64x(fp128, fp128)

declare fp128 @sqrtf64x(fp128)

declare fp128 @__sqrtf64x(fp128)

declare fp128 @hypotf64x(fp128, fp128)

declare fp128 @__hypotf64x(fp128, fp128)

declare fp128 @cbrtf64x(fp128)

declare fp128 @__cbrtf64x(fp128)

declare fp128 @ceilf64x(fp128)

declare fp128 @__ceilf64x(fp128)

declare fp128 @fabsf64x(fp128)

declare fp128 @__fabsf64x(fp128)

declare fp128 @floorf64x(fp128)

declare fp128 @__floorf64x(fp128)

declare fp128 @fmodf64x(fp128, fp128)

declare fp128 @__fmodf64x(fp128, fp128)

declare fp128 @copysignf64x(fp128, fp128)

declare fp128 @__copysignf64x(fp128, fp128)

declare fp128 @nanf64x(i8*)

declare fp128 @__nanf64x(i8*)

declare fp128 @j0f64x(fp128)

declare fp128 @__j0f64x(fp128)

declare fp128 @j1f64x(fp128)

declare fp128 @__j1f64x(fp128)

declare fp128 @jnf64x(i32, fp128)

declare fp128 @__jnf64x(i32, fp128)

declare fp128 @y0f64x(fp128)

declare fp128 @__y0f64x(fp128)

declare fp128 @y1f64x(fp128)

declare fp128 @__y1f64x(fp128)

declare fp128 @ynf64x(i32, fp128)

declare fp128 @__ynf64x(i32, fp128)

declare fp128 @erff64x(fp128)

declare fp128 @__erff64x(fp128)

declare fp128 @erfcf64x(fp128)

declare fp128 @__erfcf64x(fp128)

declare fp128 @lgammaf64x(fp128)

declare fp128 @__lgammaf64x(fp128)

declare fp128 @tgammaf64x(fp128)

declare fp128 @__tgammaf64x(fp128)

declare fp128 @lgammaf64x_r(fp128, i32*)

declare fp128 @__lgammaf64x_r(fp128, i32*)

declare fp128 @rintf64x(fp128)

declare fp128 @__rintf64x(fp128)

declare fp128 @nextafterf64x(fp128, fp128)

declare fp128 @__nextafterf64x(fp128, fp128)

declare fp128 @nextdownf64x(fp128)

declare fp128 @__nextdownf64x(fp128)

declare fp128 @nextupf64x(fp128)

declare fp128 @__nextupf64x(fp128)

declare fp128 @remainderf64x(fp128, fp128)

declare fp128 @__remainderf64x(fp128, fp128)

declare fp128 @scalbnf64x(fp128, i32)

declare fp128 @__scalbnf64x(fp128, i32)

declare i32 @ilogbf64x(fp128)

declare i32 @__ilogbf64x(fp128)

declare i64 @llogbf64x(fp128)

declare i64 @__llogbf64x(fp128)

declare fp128 @scalblnf64x(fp128, i64)

declare fp128 @__scalblnf64x(fp128, i64)

declare fp128 @nearbyintf64x(fp128)

declare fp128 @__nearbyintf64x(fp128)

declare fp128 @roundf64x(fp128)

declare fp128 @__roundf64x(fp128)

declare fp128 @truncf64x(fp128)

declare fp128 @__truncf64x(fp128)

declare fp128 @remquof64x(fp128, fp128, i32*)

declare fp128 @__remquof64x(fp128, fp128, i32*)

declare i64 @lrintf64x(fp128)

declare i64 @__lrintf64x(fp128)

declare i64 @llrintf64x(fp128)

declare i64 @__llrintf64x(fp128)

declare i64 @lroundf64x(fp128)

declare i64 @__lroundf64x(fp128)

declare i64 @llroundf64x(fp128)

declare i64 @__llroundf64x(fp128)

declare fp128 @fdimf64x(fp128, fp128)

declare fp128 @__fdimf64x(fp128, fp128)

declare fp128 @fmaxf64x(fp128, fp128)

declare fp128 @__fmaxf64x(fp128, fp128)

declare fp128 @fminf64x(fp128, fp128)

declare fp128 @__fminf64x(fp128, fp128)

declare fp128 @fmaf64x(fp128, fp128, fp128)

declare fp128 @__fmaf64x(fp128, fp128, fp128)

declare fp128 @roundevenf64x(fp128)

declare fp128 @__roundevenf64x(fp128)

declare i64 @fromfpf64x(fp128, i32, i32)

declare i64 @__fromfpf64x(fp128, i32, i32)

declare i64 @ufromfpf64x(fp128, i32, i32)

declare i64 @__ufromfpf64x(fp128, i32, i32)

declare i64 @fromfpxf64x(fp128, i32, i32)

declare i64 @__fromfpxf64x(fp128, i32, i32)

declare i64 @ufromfpxf64x(fp128, i32, i32)

declare i64 @__ufromfpxf64x(fp128, i32, i32)

declare fp128 @fmaxmagf64x(fp128, fp128)

declare fp128 @__fmaxmagf64x(fp128, fp128)

declare fp128 @fminmagf64x(fp128, fp128)

declare fp128 @__fminmagf64x(fp128, fp128)

declare i32 @canonicalizef64x(fp128*, fp128*)

declare i32 @totalorderf64x(fp128*, fp128*)

declare i32 @totalordermagf64x(fp128*, fp128*)

declare fp128 @getpayloadf64x(fp128*)

declare fp128 @__getpayloadf64x(fp128*)

declare i32 @setpayloadf64x(fp128*, fp128)

declare i32 @setpayloadsigf64x(fp128*, fp128)

declare float @fadd(double, double)

declare float @fdiv(double, double)

declare float @fmul(double, double)

declare float @fsub(double, double)

declare float @faddl(fp128, fp128)

declare float @fdivl(fp128, fp128)

declare float @fmull(fp128, fp128)

declare float @fsubl(fp128, fp128)

declare double @daddl(fp128, fp128)

declare double @ddivl(fp128, fp128)

declare double @dmull(fp128, fp128)

declare double @dsubl(fp128, fp128)

declare float @f32addf32x(double, double)

declare float @f32divf32x(double, double)

declare float @f32mulf32x(double, double)

declare float @f32subf32x(double, double)

declare float @f32addf64(double, double)

declare float @f32divf64(double, double)

declare float @f32mulf64(double, double)

declare float @f32subf64(double, double)

declare float @f32addf64x(fp128, fp128)

declare float @f32divf64x(fp128, fp128)

declare float @f32mulf64x(fp128, fp128)

declare float @f32subf64x(fp128, fp128)

declare double @f32xaddf64(double, double)

declare double @f32xdivf64(double, double)

declare double @f32xmulf64(double, double)

declare double @f32xsubf64(double, double)

declare double @f32xaddf64x(fp128, fp128)

declare double @f32xdivf64x(fp128, fp128)

declare double @f32xmulf64x(fp128, fp128)

declare double @f32xsubf64x(fp128, fp128)

declare double @f64addf64x(fp128, fp128)

declare double @f64divf64x(fp128, fp128)

declare double @f64mulf64x(fp128, fp128)

declare double @f64subf64x(fp128, fp128)

declare i32 @__iscanonicall(fp128)

declare void (i32)* @__sysv_signal(i32, void (i32)*)

declare void (i32)* @sysv_signal(i32, void (i32)*)

declare void (i32)* @signal(i32, void (i32)*)

declare i32 @kill(i32, i32)

declare i32 @killpg(i32, i32)

declare i32 @raise(i32)

declare void (i32)* @ssignal(i32, void (i32)*)

declare i32 @gsignal(i32)

declare void @psignal(i32, i8*)

declare void @psiginfo(%come_anon33*, i8*)

declare i32 @__sigpause(i32, i32)

declare i32 @sigblock(i32)

declare i32 @sigsetmask(i32)

declare i32 @siggetmask()

declare i32 @sigemptyset(%come_anon5*)

declare i32 @sigfillset(%come_anon5*)

declare i32 @sigaddset(%come_anon5*, i32)

declare i32 @sigdelset(%come_anon5*, i32)

declare i32 @sigismember(%come_anon5*, i32)

declare i32 @sigisemptyset(%come_anon5*)

declare i32 @sigandset(%come_anon5*, %come_anon5*, %come_anon5*)

declare i32 @sigorset(%come_anon5*, %come_anon5*, %come_anon5*)

declare i32 @sigprocmask(i32, %come_anon5*, %come_anon5*)

declare i32 @sigsuspend(%come_anon5*)

declare i32 @sigaction(i32, %sigaction*, %sigaction*)

declare i32 @sigpending(%come_anon5*)

declare i32 @sigwait(%come_anon5*, i32*)

declare i32 @sigwaitinfo(%come_anon5*, %come_anon33*)

declare i32 @sigtimedwait(%come_anon5*, %come_anon33*, %timespec*)

declare i32 @sigqueue(i32, i32, %sigval)

declare i32 @sigreturn(%sigcontext*)

declare i32 @siginterrupt(i32, i32)

declare i32 @sigaltstack(%come_anon70*, %come_anon70*)

declare i32 @sigstack(%sigstack*, %sigstack*)

declare i32 @sighold(i32)

declare i32 @sigrelse(i32)

declare i32 @sigignore(i32)

declare void (i32)* @sigset(i32, void (i32)*)

declare i32 @pthread_sigmask(i32, %come_anon5*, %come_anon5*)

declare i32 @pthread_kill(i64, i32)

declare i32 @pthread_sigqueue(i64, i32, %sigval)

declare i32 @__libc_current_sigrtmin()

declare i32 @__libc_current_sigrtmax()

declare i32 @tgkill(i32, i32, i32)

declare i64 @readahead(i32, i64, i64)

declare i32 @sync_file_range(i32, i64, i64, i32)

declare i64 @vmsplice(i32, %iovec*, i64, i32)

declare i64 @splice(i32, i64*, i32, i64*, i64, i32)

declare i64 @tee(i32, i32, i64, i32)

declare i32 @fallocate(i32, i32, i64, i64)

declare i32 @fallocate64(i32, i32, i64, i64)

declare i32 @name_to_handle_at(i32, i8*, %file_handle*, i32*, i32)

declare i32 @open_by_handle_at(i32, %file_handle*, i32)

declare i32 @fcntl(i32, i32, ...)

declare i32 @fcntl64(i32, i32, ...)

declare i32 @open(i8*, i32, ...)

declare i32 @open64(i8*, i32, ...)

declare i32 @openat(i32, i8*, i32, ...)

declare i32 @openat64(i32, i8*, i32, ...)

declare i32 @creat(i8*, i32)

declare i32 @creat64(i8*, i32)

declare i32 @lockf(i32, i32, i64)

declare i32 @lockf64(i32, i32, i64)

declare i32 @posix_fadvise(i32, i64, i64, i32)

declare i32 @posix_fadvise64(i32, i64, i64, i32)

declare i32 @posix_fallocate(i32, i64, i64)

declare i32 @posix_fallocate64(i32, i64, i64)

declare i32 @setjmp(%__jmp_buf_tag*)

declare i32 @__sigsetjmp(%__jmp_buf_tag*, i32)

declare i32 @_setjmp(%__jmp_buf_tag*)

declare void @longjmp(%__jmp_buf_tag*, i32)

declare void @_longjmp(%__jmp_buf_tag*, i32)

declare void @siglongjmp(%__jmp_buf_tag*, i32)

declare i32 @clock_adjtime(i32, %timex*)

declare i64 @clock()

declare i64 @time(i64*)

declare double @difftime(i64, i64)

declare i64 @mktime(%tm*)

declare i64 @strftime(i8*, i64, i8*, %tm*)

declare i8* @strptime(i8*, i8*, %tm*)

declare i64 @strftime_l(i8*, i64, i8*, %tm*, %__locale_struct*)

declare i8* @strptime_l(i8*, i8*, %tm*, %__locale_struct*)

declare %tm* @gmtime(i64*)

declare %tm* @localtime(i64*)

declare %tm* @gmtime_r(i64*, %tm*)

declare %tm* @localtime_r(i64*, %tm*)

declare i8* @asctime(%tm*)

declare i8* @ctime(i64*)

declare i8* @asctime_r(%tm*, i8*)

declare i8* @ctime_r(i64*, i8*)

declare void @tzset()

declare i64 @timegm(%tm*)

declare i64 @timelocal(%tm*)

declare i32 @dysize(i32)

declare i32 @nanosleep(%timespec*, %timespec*)

declare i32 @clock_getres(i32, %timespec*)

declare i32 @clock_gettime(i32, %timespec*)

declare i32 @clock_settime(i32, %timespec*)

declare i32 @clock_nanosleep(i32, i32, %timespec*, %timespec*)

declare i32 @clock_getcpuclockid(i32, i32*)

declare i32 @timer_create(i32, %sigevent*, i8**)

declare i32 @timer_delete(i8*)

declare i32 @timer_settime(i8*, i32, %itimerspec*, %itimerspec*)

declare i32 @timer_gettime(i8*, %itimerspec*)

declare i32 @timer_getoverrun(i8*)

declare i32 @timespec_get(%timespec*, i32)

declare %tm* @getdate(i8*)

declare i32 @getdate_r(i8*, %tm*)

declare i32 @access(i8*, i32)

declare i32 @euidaccess(i8*, i32)

declare i32 @eaccess(i8*, i32)

declare i32 @faccessat(i32, i8*, i32, i32)

declare i64 @lseek(i32, i64, i32)

declare i64 @lseek64(i32, i64, i32)

declare i32 @close(i32)

declare i64 @read(i32, i8*, i64)

declare i64 @write(i32, i8*, i64)

declare i64 @pread(i32, i8*, i64, i64)

declare i64 @pwrite(i32, i8*, i64, i64)

declare i64 @pread64(i32, i8*, i64, i64)

declare i64 @pwrite64(i32, i8*, i64, i64)

declare i32 @pipe(i32*)

declare i32 @pipe2(i32*, i32)

declare i32 @alarm(i32)

declare i32 @sleep(i32)

declare i32 @ualarm(i32, i32)

declare i32 @usleep(i32)

declare i32 @pause()

declare i32 @chown(i8*, i32, i32)

declare i32 @fchown(i32, i32, i32)

declare i32 @lchown(i8*, i32, i32)

declare i32 @fchownat(i32, i8*, i32, i32, i32)

declare i32 @chdir(i8*)

declare i32 @fchdir(i32)

declare i8* @getcwd(i8*, i64)

declare i8* @get_current_dir_name()

declare i8* @getwd(i8*)

declare i32 @dup(i32)

declare i32 @dup2(i32, i32)

declare i32 @dup3(i32, i32, i32)

declare i32 @execve(i8*, i8**, i8**)

declare i32 @fexecve(i32, i8**, i8**)

declare i32 @execv(i8*, i8**)

declare i32 @execle(i8*, i8*, ...)

declare i32 @execl(i8*, i8*, ...)

declare i32 @execvp(i8*, i8**)

declare i32 @execlp(i8*, i8*, ...)

declare i32 @execvpe(i8*, i8**, i8**)

declare i32 @nice(i32)

declare void @_exit(i32)

declare i64 @pathconf(i8*, i32)

declare i64 @fpathconf(i32, i32)

declare i64 @sysconf(i32)

declare i64 @confstr(i32, i8*, i64)

declare i32 @getpid()

declare i32 @getppid()

declare i32 @getpgrp()

declare i32 @__getpgid(i32)

declare i32 @getpgid(i32)

declare i32 @setpgid(i32, i32)

declare i32 @setpgrp()

declare i32 @setsid()

declare i32 @getsid(i32)

declare i32 @getuid()

declare i32 @geteuid()

declare i32 @getgid()

declare i32 @getegid()

declare i32 @getgroups(i32, i32*)

declare i32 @group_member(i32)

declare i32 @setuid(i32)

declare i32 @setreuid(i32, i32)

declare i32 @seteuid(i32)

declare i32 @setgid(i32)

declare i32 @setregid(i32, i32)

declare i32 @setegid(i32)

declare i32 @getresuid(i32*, i32*, i32*)

declare i32 @getresgid(i32*, i32*, i32*)

declare i32 @setresuid(i32, i32, i32)

declare i32 @setresgid(i32, i32, i32)

declare i32 @fork()

declare i32 @vfork()

declare i8* @ttyname(i32)

declare i32 @ttyname_r(i32, i8*, i64)

declare i32 @isatty(i32)

declare i32 @ttyslot()

declare i32 @link(i8*, i8*)

declare i32 @linkat(i32, i8*, i32, i8*, i32)

declare i32 @symlink(i8*, i8*)

declare i64 @readlink(i8*, i8*, i64)

declare i32 @symlinkat(i8*, i32, i8*)

declare i64 @readlinkat(i32, i8*, i8*, i64)

declare i32 @unlink(i8*)

declare i32 @unlinkat(i32, i8*, i32)

declare i32 @rmdir(i8*)

declare i32 @tcgetpgrp(i32)

declare i32 @tcsetpgrp(i32, i32)

declare i8* @getlogin()

declare i32 @getlogin_r(i8*, i64)

declare i32 @setlogin(i8*)

declare i32 @getopt(i32, i8**, i8*)

declare i32 @gethostname(i8*, i64)

declare i32 @sethostname(i8*, i64)

declare i32 @sethostid(i64)

declare i32 @getdomainname(i8*, i64)

declare i32 @setdomainname(i8*, i64)

declare i32 @vhangup()

declare i32 @revoke(i8*)

declare i32 @profil(i16*, i64, i64, i32)

declare i32 @acct(i8*)

declare i8* @getusershell()

declare void @endusershell()

declare void @setusershell()

declare i32 @daemon(i32, i32)

declare i32 @chroot(i8*)

declare i8* @getpass(i8*)

declare i32 @fsync(i32)

declare i32 @syncfs(i32)

declare i64 @gethostid()

declare void @sync()

declare i32 @getpagesize()

declare i32 @getdtablesize()

declare i32 @truncate(i8*, i64)

declare i32 @truncate64(i8*, i64)

declare i32 @ftruncate(i32, i64)

declare i32 @ftruncate64(i32, i64)

declare i32 @brk(i8*)

declare i8* @sbrk(i64)

declare i64 @syscall(i64, ...)

declare i64 @copy_file_range(i32, i64*, i32, i64*, i64, i32)

declare i32 @fdatasync(i32)

declare i8* @crypt(i8*, i8*)

declare void @swab(i8*, i8*, i64)

declare i32 @getentropy(i8*, i64)

declare i32 @gettid()

declare i32 @gettimeofday(%timeval*, i8*)

declare i32 @settimeofday(%timeval*, %timezone*)

declare i32 @adjtime(%timeval*, %timeval*)

declare i32 @getitimer(i32, %itimerval*)

declare i32 @setitimer(i32, %itimerval*, %itimerval*)

declare i32 @utimes(i8*, %timeval*)

declare i32 @lutimes(i8*, %timeval*)

declare i32 @futimes(i32, %timeval*)

declare i32 @futimesat(i32, i8*, %timeval*)

declare i32 @memfd_create(i8*, i32)

declare i32 @mlock2(i8*, i64, i32)

declare i32 @pkey_alloc(i32, i32)

declare i32 @pkey_set(i32, i32)

declare i32 @pkey_get(i32)

declare i32 @pkey_free(i32)

declare i32 @pkey_mprotect(i8*, i64, i32, i32)

declare i8* @mmap(i8*, i64, i32, i32, i32, i64)

declare i8* @mmap64(i8*, i64, i32, i32, i32, i64)

declare i32 @munmap(i8*, i64)

declare i32 @mprotect(i8*, i64, i32)

declare i32 @msync(i8*, i64, i32)

declare i32 @madvise(i8*, i64, i32)

declare i32 @posix_madvise(i8*, i64, i32)

declare i32 @mlock(i8*, i64)

declare i32 @munlock(i8*, i64)

declare i32 @mlockall(i32)

declare i32 @munlockall()

declare i32 @mincore(i8*, i64, i8*)

declare i8* @mremap(i8*, i64, i64, i32, ...)

declare i32 @remap_file_pages(i8*, i64, i32, i64, i32)

declare i32 @shm_open(i8*, i32, i32)

declare i32 @shm_unlink(i8*)

declare i64 @imaxabs(i64)

declare %come_anon82 @imaxdiv(i64, i64)

declare i64 @strtoimax(i8*, i8**, i32)

declare i64 @strtoumax(i8*, i8**, i32)

declare i64 @wcstoimax(i32*, i32**, i32)

declare i64 @wcstoumax(i32*, i32**, i32)

define %TCCState* @tcc_new() {
entry:
  %s71 = alloca %Sym*, align 8
  %s47 = alloca %Sym*, align 8
  %s23 = alloca %Sym*, align 8
  %s6 = alloca %Sym*, align 8
  %s = alloca %TCCState*, align 8
  call void @tcc_cleanup()
  %fun_result = call i8* @tcc_mallocz(i64 3152)
  %castAQ = bitcast i8* %fun_result to %TCCState*
  store %TCCState* %castAQ, %TCCState** %s, align 8
  %s1 = load %TCCState*, %TCCState** %s, align 8
  %logical_denial = icmp eq %TCCState* %s1, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret %TCCState* null

cond_end:                                         ; preds = %entry
  %s2 = load %TCCState*, %TCCState** %s, align 8
  store %TCCState* %s2, %TCCState** @tcc_state, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s3, i32 0, i32 0
  store i32 0, i32* %fieldTU, align 4
  %s4 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU5 = getelementptr inbounds %TCCState, %TCCState* %s4, i32 0, i32 44
  store i8* bitcast ([19 x i8]* @303 to i8*), i8** %fieldTU5, align 8
  call void @preprocess_new()
  store i32 1778, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.149, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_push

define_push:                                      ; preds = %cond_end
  %v = alloca i32, align 4
  store i32 326, i32* %v, align 4
  %macro_type = alloca i32, align 4
  store i32 0, i32* %macro_type, align 4
  %str = alloca i32*, align 8
  store i32* null, i32** %str, align 8
  %first_arg = alloca %Sym*, align 8
  store %Sym* null, %Sym** %first_arg, align 8
  %define_stack = load %Sym*, %Sym** @define_stack, align 8
  %v7 = load i32, i32* %v, align 4
  %macro_type8 = load i32, i32* %macro_type, align 4
  %str9 = load i32*, i32** %str, align 8
  %icatXXXXXX = ptrtoint i32* %str9 to i64
  %fun_result10 = call %Sym* @sym_push2(%Sym** @define_stack, i32 %v7, i32 %macro_type8, i64 %icatXXXXXX)
  store %Sym* %fun_result10, %Sym** %s6, align 8
  %s11 = load %Sym*, %Sym** %s6, align 8
  %first_arg12 = load %Sym*, %Sym** %first_arg, align 8
  %fieldTU13 = getelementptr inbounds %Sym, %Sym* %s11, i32 0, i32 4
  store %Sym* %first_arg12, %Sym** %fieldTU13, align 8
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v14 = load i32, i32* %v, align 4
  %sub = sub i32 %v14, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %s15 = load %Sym*, %Sym** %s6, align 8
  %fieldTU16 = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  store %Sym* %s15, %Sym** %fieldTU16, align 8
  br label %define_push_end

define_push_end:                                  ; preds = %define_push
  store i32 1779, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.150, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_push17

define_push17:                                    ; preds = %define_push_end
  %v18 = alloca i32, align 4
  store i32 327, i32* %v18, align 4
  %macro_type19 = alloca i32, align 4
  store i32 0, i32* %macro_type19, align 4
  %str20 = alloca i32*, align 8
  store i32* null, i32** %str20, align 8
  %first_arg21 = alloca %Sym*, align 8
  store %Sym* null, %Sym** %first_arg21, align 8
  %define_stack24 = load %Sym*, %Sym** @define_stack, align 8
  %v25 = load i32, i32* %v18, align 4
  %macro_type26 = load i32, i32* %macro_type19, align 4
  %str27 = load i32*, i32** %str20, align 8
  %icatXXXXXX28 = ptrtoint i32* %str27 to i64
  %fun_result29 = call %Sym* @sym_push2(%Sym** @define_stack, i32 %v25, i32 %macro_type26, i64 %icatXXXXXX28)
  store %Sym* %fun_result29, %Sym** %s23, align 8
  %s30 = load %Sym*, %Sym** %s23, align 8
  %first_arg31 = load %Sym*, %Sym** %first_arg21, align 8
  %fieldTU32 = getelementptr inbounds %Sym, %Sym* %s30, i32 0, i32 4
  store %Sym* %first_arg31, %Sym** %fieldTU32, align 8
  %table_ident33 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v34 = load i32, i32* %v18, align 4
  %sub35 = sub i32 %v34, 256
  %element_addressAB36 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY37 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB36, i32 %sub35
  %load_element38 = load %TokenSym*, %TokenSym** %element_addressXYXZY37, align 8
  %s39 = load %Sym*, %Sym** %s23, align 8
  %fieldTU40 = getelementptr inbounds %TokenSym, %TokenSym* %load_element38, i32 0, i32 1
  store %Sym* %s39, %Sym** %fieldTU40, align 8
  br label %define_push_end22

define_push_end22:                                ; preds = %define_push17
  store i32 1780, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.151, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_push41

define_push41:                                    ; preds = %define_push_end22
  %v42 = alloca i32, align 4
  store i32 328, i32* %v42, align 4
  %macro_type43 = alloca i32, align 4
  store i32 0, i32* %macro_type43, align 4
  %str44 = alloca i32*, align 8
  store i32* null, i32** %str44, align 8
  %first_arg45 = alloca %Sym*, align 8
  store %Sym* null, %Sym** %first_arg45, align 8
  %define_stack48 = load %Sym*, %Sym** @define_stack, align 8
  %v49 = load i32, i32* %v42, align 4
  %macro_type50 = load i32, i32* %macro_type43, align 4
  %str51 = load i32*, i32** %str44, align 8
  %icatXXXXXX52 = ptrtoint i32* %str51 to i64
  %fun_result53 = call %Sym* @sym_push2(%Sym** @define_stack, i32 %v49, i32 %macro_type50, i64 %icatXXXXXX52)
  store %Sym* %fun_result53, %Sym** %s47, align 8
  %s54 = load %Sym*, %Sym** %s47, align 8
  %first_arg55 = load %Sym*, %Sym** %first_arg45, align 8
  %fieldTU56 = getelementptr inbounds %Sym, %Sym* %s54, i32 0, i32 4
  store %Sym* %first_arg55, %Sym** %fieldTU56, align 8
  %table_ident57 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v58 = load i32, i32* %v42, align 4
  %sub59 = sub i32 %v58, 256
  %element_addressAB60 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY61 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB60, i32 %sub59
  %load_element62 = load %TokenSym*, %TokenSym** %element_addressXYXZY61, align 8
  %s63 = load %Sym*, %Sym** %s47, align 8
  %fieldTU64 = getelementptr inbounds %TokenSym, %TokenSym* %load_element62, i32 0, i32 1
  store %Sym* %s63, %Sym** %fieldTU64, align 8
  br label %define_push_end46

define_push_end46:                                ; preds = %define_push41
  store i32 1781, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.152, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_push65

define_push65:                                    ; preds = %define_push_end46
  %v66 = alloca i32, align 4
  store i32 329, i32* %v66, align 4
  %macro_type67 = alloca i32, align 4
  store i32 0, i32* %macro_type67, align 4
  %str68 = alloca i32*, align 8
  store i32* null, i32** %str68, align 8
  %first_arg69 = alloca %Sym*, align 8
  store %Sym* null, %Sym** %first_arg69, align 8
  %define_stack72 = load %Sym*, %Sym** @define_stack, align 8
  %v73 = load i32, i32* %v66, align 4
  %macro_type74 = load i32, i32* %macro_type67, align 4
  %str75 = load i32*, i32** %str68, align 8
  %icatXXXXXX76 = ptrtoint i32* %str75 to i64
  %fun_result77 = call %Sym* @sym_push2(%Sym** @define_stack, i32 %v73, i32 %macro_type74, i64 %icatXXXXXX76)
  store %Sym* %fun_result77, %Sym** %s71, align 8
  %s78 = load %Sym*, %Sym** %s71, align 8
  %first_arg79 = load %Sym*, %Sym** %first_arg69, align 8
  %fieldTU80 = getelementptr inbounds %Sym, %Sym* %s78, i32 0, i32 4
  store %Sym* %first_arg79, %Sym** %fieldTU80, align 8
  %table_ident81 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v82 = load i32, i32* %v66, align 4
  %sub83 = sub i32 %v82, 256
  %element_addressAB84 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY85 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB84, i32 %sub83
  %load_element86 = load %TokenSym*, %TokenSym** %element_addressXYXZY85, align 8
  %s87 = load %Sym*, %Sym** %s71, align 8
  %fieldTU88 = getelementptr inbounds %TokenSym, %TokenSym* %load_element86, i32 0, i32 1
  store %Sym* %s87, %Sym** %fieldTU88, align 8
  br label %define_push_end70

define_push_end70:                                ; preds = %define_push65
  %s89 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s89, i8* bitcast ([9 x i8]* @304 to i8*), i8* null)
  %s90 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s90, i8* bitcast ([17 x i8]* @305 to i8*), i8* bitcast ([8 x i8]* @306 to i8*))
  %s91 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s91, i8* bitcast ([11 x i8]* @307 to i8*), i8* null)
  %s92 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s92, i8* bitcast ([9 x i8]* @308 to i8*), i8* null)
  %s93 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s93, i8* bitcast ([7 x i8]* @309 to i8*), i8* null)
  %s94 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s94, i8* bitcast ([10 x i8]* @310 to i8*), i8* null)
  %s95 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s95, i8* bitcast ([8 x i8]* @311 to i8*), i8* null)
  %s96 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s96, i8* bitcast ([10 x i8]* @312 to i8*), i8* null)
  %s97 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s97, i8* bitcast ([14 x i8]* @313 to i8*), i8* bitcast ([13 x i8]* @314 to i8*))
  %s98 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s98, i8* bitcast ([17 x i8]* @315 to i8*), i8* bitcast ([4 x i8]* @316 to i8*))
  %s99 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s99, i8* bitcast ([15 x i8]* @317 to i8*), i8* bitcast ([4 x i8]* @318 to i8*))
  %s100 = load %TCCState*, %TCCState** %s, align 8
  %fun_result101 = call i32 @tcc_add_library_path(%TCCState* %s100, i8* bitcast ([15 x i8]* @319 to i8*))
  %s102 = load %TCCState*, %TCCState** %s, align 8
  %fun_result103 = call i32 @tcc_add_library_path(%TCCState* %s102, i8* bitcast ([9 x i8]* @320 to i8*))
  %s104 = load %TCCState*, %TCCState** %s, align 8
  %fun_result105 = call i32 @tcc_add_library_path(%TCCState* %s104, i8* bitcast ([5 x i8]* @321 to i8*))
  %s106 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s106, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL, align 8
  %castAQ107 = bitcast %Section*** %fieldLLL to i8***
  %s108 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL109 = getelementptr inbounds %TCCState, %TCCState* %s108, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL109, align 4
  call void @dynarray_add(i8*** %castAQ107, i32* %fieldLLL109, i8* null)
  %s110 = load %TCCState*, %TCCState** %s, align 8
  %fun_result111 = call %Section* @new_section(%TCCState* %s110, i8* bitcast ([6 x i8]* @322 to i8*), i32 1, i32 6)
  store %Section* %fun_result111, %Section** @text_section, align 8
  %s112 = load %TCCState*, %TCCState** %s, align 8
  %fun_result113 = call %Section* @new_section(%TCCState* %s112, i8* bitcast ([6 x i8]* @323 to i8*), i32 1, i32 3)
  store %Section* %fun_result113, %Section** @data_section, align 8
  %s114 = load %TCCState*, %TCCState** %s, align 8
  %fun_result115 = call %Section* @new_section(%TCCState* %s114, i8* bitcast ([5 x i8]* @324 to i8*), i32 8, i32 3)
  store %Section* %fun_result115, %Section** @bss_section, align 8
  %s116 = load %TCCState*, %TCCState** %s, align 8
  %fun_result117 = call %Section* @new_symtab(%TCCState* %s116, i8* bitcast ([8 x i8]* @325 to i8*), i32 2, i32 0, i8* bitcast ([8 x i8]* @326 to i8*), i8* bitcast ([9 x i8]* @327 to i8*), i32 -2147483648)
  store %Section* %fun_result117, %Section** @symtab_section, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL118 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL118, align 8
  store %Section* %link, %Section** @strtab_section, align 8
  %s119 = load %TCCState*, %TCCState** %s, align 8
  %s120 = load %TCCState*, %TCCState** %s, align 8
  %fun_result121 = call %Section* @new_symtab(%TCCState* %s120, i8* bitcast ([11 x i8]* @328 to i8*), i32 2, i32 -2147483648, i8* bitcast ([11 x i8]* @329 to i8*), i8* bitcast ([12 x i8]* @330 to i8*), i32 -2147483648)
  %fieldTU122 = getelementptr inbounds %TCCState, %TCCState* %s119, i32 0, i32 22
  store %Section* %fun_result121, %Section** %fieldTU122, align 8
  %s123 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU124 = getelementptr inbounds %TCCState, %TCCState* %s123, i32 0, i32 30
  store i32 1, i32* %fieldTU124, align 4
  %s125 = load %TCCState*, %TCCState** %s, align 8
  ret %TCCState* %s125
}

define void @tcc_delete(%TCCState* %0) {
entry:
  %ref = alloca %DLLReference*, align 8
  %i = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  call void @tcc_cleanup()
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i7 = load i32, i32* %i, align 4
  %add = add i32 %i7, 1
  store i32 %add, i32* %i, align 4
  %i8 = load i32, i32* %i, align 4
  %sub = sub i32 %i8, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i2 = load i32, i32* %i, align 4
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL, align 4
  %le = icmp slt i32 %i2, %nb_sections
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL5 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL5, align 8
  %i6 = load i32, i32* %i, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL5, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %i6
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  call void @free_section(%Section* %load_element)
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %s19 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL10 = getelementptr inbounds %TCCState, %TCCState* %s19, i32 0, i32 13
  %sections11 = load %Section**, %Section*** %fieldLLL10, align 8
  %castAQ = bitcast %Section*** %fieldLLL10 to i8*
  %s112 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL13 = getelementptr inbounds %TCCState, %TCCState* %s112, i32 0, i32 14
  %nb_sections14 = load i32, i32* %fieldLLL13, align 4
  call void @dynarray_reset(i8* %castAQ, i32* %fieldLLL13)
  store i32 0, i32* %i, align 4
  br label %loop_top_block16

loop_continue_top_block15:                        ; preds = %cond_then_block21
  %i29 = load i32, i32* %i, align 4
  %add30 = add i32 %i29, 1
  store i32 %add30, i32* %i, align 4
  %i31 = load i32, i32* %i, align 4
  %sub32 = sub i32 %i31, 1
  br label %loop_top_block16

loop_top_block16:                                 ; preds = %loop_continue_top_block15, %cond_end_block
  %i17 = load i32, i32* %i, align 4
  %s118 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL19 = getelementptr inbounds %TCCState, %TCCState* %s118, i32 0, i32 16
  %nb_priv_sections = load i32, i32* %fieldLLL19, align 4
  %le20 = icmp slt i32 %i17, %nb_priv_sections
  br i1 %le20, label %cond_then_block21, label %cond_end_block22

cond_then_block21:                                ; preds = %loop_top_block16
  %s123 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL24 = getelementptr inbounds %TCCState, %TCCState* %s123, i32 0, i32 15
  %priv_sections = load %Section**, %Section*** %fieldLLL24, align 8
  %i25 = load i32, i32* %i, align 4
  %element_addressAB26 = load %Section**, %Section*** %fieldLLL24, align 8
  %element_addressXYXZY27 = getelementptr inbounds %Section*, %Section** %element_addressAB26, i32 %i25
  %load_element28 = load %Section*, %Section** %element_addressXYXZY27, align 8
  call void @free_section(%Section* %load_element28)
  br label %loop_continue_top_block15

cond_end_block22:                                 ; preds = %loop_top_block16
  %s133 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL34 = getelementptr inbounds %TCCState, %TCCState* %s133, i32 0, i32 15
  %priv_sections35 = load %Section**, %Section*** %fieldLLL34, align 8
  %castAQ36 = bitcast %Section*** %fieldLLL34 to i8*
  %s137 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL38 = getelementptr inbounds %TCCState, %TCCState* %s137, i32 0, i32 16
  %nb_priv_sections39 = load i32, i32* %fieldLLL38, align 4
  call void @dynarray_reset(i8* %castAQ36, i32* %fieldLLL38)
  store i32 0, i32* %i, align 4
  br label %loop_top_block41

loop_continue_top_block40:                        ; preds = %cond_end
  %i59 = load i32, i32* %i, align 4
  %add60 = add i32 %i59, 1
  store i32 %add60, i32* %i, align 4
  %i61 = load i32, i32* %i, align 4
  %sub62 = sub i32 %i61, 1
  br label %loop_top_block41

loop_top_block41:                                 ; preds = %loop_continue_top_block40, %cond_end_block22
  %i42 = load i32, i32* %i, align 4
  %s143 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL44 = getelementptr inbounds %TCCState, %TCCState* %s143, i32 0, i32 12
  %nb_loaded_dlls = load i32, i32* %fieldLLL44, align 4
  %le45 = icmp slt i32 %i42, %nb_loaded_dlls
  br i1 %le45, label %cond_then_block46, label %cond_end_block47

cond_then_block46:                                ; preds = %loop_top_block41
  %s148 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL49 = getelementptr inbounds %TCCState, %TCCState* %s148, i32 0, i32 11
  %loaded_dlls = load %DLLReference**, %DLLReference*** %fieldLLL49, align 8
  %i50 = load i32, i32* %i, align 4
  %element_addressAB51 = load %DLLReference**, %DLLReference*** %fieldLLL49, align 8
  %element_addressXYXZY52 = getelementptr inbounds %DLLReference*, %DLLReference** %element_addressAB51, i32 %i50
  %load_element53 = load %DLLReference*, %DLLReference** %element_addressXYXZY52, align 8
  store %DLLReference* %load_element53, %DLLReference** %ref, align 8
  %ref54 = load %DLLReference*, %DLLReference** %ref, align 8
  %fieldLLL55 = getelementptr inbounds %DLLReference, %DLLReference* %ref54, i32 0, i32 1
  %handle = load i8*, i8** %fieldLLL55, align 8
  %icmpB = icmp ne i8* %handle, null
  br i1 %icmpB, label %cond_jump_then, label %cond_end

cond_end_block47:                                 ; preds = %loop_top_block41
  %s163 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL64 = getelementptr inbounds %TCCState, %TCCState* %s163, i32 0, i32 11
  %loaded_dlls65 = load %DLLReference**, %DLLReference*** %fieldLLL64, align 8
  %castAQ66 = bitcast %DLLReference*** %fieldLLL64 to i8*
  %s167 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL68 = getelementptr inbounds %TCCState, %TCCState* %s167, i32 0, i32 12
  %nb_loaded_dlls69 = load i32, i32* %fieldLLL68, align 4
  call void @dynarray_reset(i8* %castAQ66, i32* %fieldLLL68)
  %s170 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL71 = getelementptr inbounds %TCCState, %TCCState* %s170, i32 0, i32 9
  %library_paths = load i8**, i8*** %fieldLLL71, align 8
  %castAQ72 = bitcast i8*** %fieldLLL71 to i8*
  %s173 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL74 = getelementptr inbounds %TCCState, %TCCState* %s173, i32 0, i32 10
  %nb_library_paths = load i32, i32* %fieldLLL74, align 4
  call void @dynarray_reset(i8* %castAQ72, i32* %fieldLLL74)
  %s175 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL76 = getelementptr inbounds %TCCState, %TCCState* %s175, i32 0, i32 7
  %cached_includes = load %CachedInclude**, %CachedInclude*** %fieldLLL76, align 8
  %castAQ77 = bitcast %CachedInclude*** %fieldLLL76 to i8*
  %s178 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL79 = getelementptr inbounds %TCCState, %TCCState* %s178, i32 0, i32 8
  %nb_cached_includes = load i32, i32* %fieldLLL79, align 4
  call void @dynarray_reset(i8* %castAQ77, i32* %fieldLLL79)
  %s180 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL81 = getelementptr inbounds %TCCState, %TCCState* %s180, i32 0, i32 3
  %include_paths = load i8**, i8*** %fieldLLL81, align 8
  %castAQ82 = bitcast i8*** %fieldLLL81 to i8*
  %s183 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL84 = getelementptr inbounds %TCCState, %TCCState* %s183, i32 0, i32 4
  %nb_include_paths = load i32, i32* %fieldLLL84, align 4
  call void @dynarray_reset(i8* %castAQ82, i32* %fieldLLL84)
  %s185 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL86 = getelementptr inbounds %TCCState, %TCCState* %s185, i32 0, i32 5
  %sysinclude_paths = load i8**, i8*** %fieldLLL86, align 8
  %castAQ87 = bitcast i8*** %fieldLLL86 to i8*
  %s188 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL89 = getelementptr inbounds %TCCState, %TCCState* %s188, i32 0, i32 6
  %nb_sysinclude_paths = load i32, i32* %fieldLLL89, align 4
  call void @dynarray_reset(i8* %castAQ87, i32* %fieldLLL89)
  %s190 = load %TCCState*, %TCCState** %s1, align 8
  %castAQ91 = bitcast %TCCState* %s190 to i8*
  call void @tcc_free(i8* %castAQ91)
  ret void

cond_jump_then:                                   ; preds = %cond_then_block46
  %ref56 = load %DLLReference*, %DLLReference** %ref, align 8
  %fieldLLL57 = getelementptr inbounds %DLLReference, %DLLReference* %ref56, i32 0, i32 1
  %handle58 = load i8*, i8** %fieldLLL57, align 8
  %fun_result = call i32 @dlclose(i8* %handle58)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block46
  br label %loop_continue_top_block40
}

declare void @tcc_enable_debug(%TCCState*)

define void @tcc_set_error_func(%TCCState* %0, i8* %1, void (i8*, i8*)* %2) {
entry:
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %error_opaque = alloca i8*, align 8
  %error_opaque2 = alloca i8**, align 8
  store i8* %1, i8** %error_opaque, align 8
  store i8** %error_opaque, i8*** %error_opaque2, align 8
  %error_func = alloca void (i8*, i8*)*, align 8
  %error_func3 = alloca void (i8*, i8*)**, align 8
  store void (i8*, i8*)* %2, void (i8*, i8*)** %error_func, align 8
  store void (i8*, i8*)** %error_func, void (i8*, i8*)*** %error_func3, align 8
  %s4 = load %TCCState*, %TCCState** %s, align 8
  %error_opaque5 = load i8*, i8** %error_opaque, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s4, i32 0, i32 45
  store i8* %error_opaque5, i8** %fieldTU, align 8
  %s6 = load %TCCState*, %TCCState** %s, align 8
  %error_func7 = load void (i8*, i8*)*, void (i8*, i8*)** %error_func, align 8
  %fieldTU8 = getelementptr inbounds %TCCState, %TCCState* %s6, i32 0, i32 46
  store void (i8*, i8*)* %error_func7, void (i8*, i8*)** %fieldTU8, align 8
  ret void
}

define i32 @tcc_set_warning(%TCCState* %0, i8* %1, i32 %2) {
entry:
  %p = alloca %FlagDef*, align 8
  %i = alloca i32, align 4
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %warning_name = alloca i8*, align 8
  %warning_name2 = alloca i8**, align 8
  store i8* %1, i8** %warning_name, align 8
  store i8** %warning_name, i8*** %warning_name2, align 8
  %value = alloca i32, align 4
  %value3 = alloca i32*, align 8
  store i32 %2, i32* %value, align 4
  store i32* %value, i32** %value3, align 8
  %warning_name4 = load i8*, i8** %warning_name, align 8
  %fun_result = call i32 @strcmp(i8* %warning_name4, i8* bitcast ([4 x i8]* @354 to i8*))
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i32 0, i32* %i, align 4
  store %FlagDef* getelementptr inbounds ([4 x %FlagDef], [4 x %FlagDef]* @warning_defs, i32 0, i32 0), %FlagDef** %p, align 8
  br label %loop_top_block

cond_else_block:                                  ; preds = %entry
  %s23 = load %TCCState*, %TCCState** %s, align 8
  %elementXXX24 = load %FlagDef, %FlagDef* getelementptr inbounds ([4 x %FlagDef], [4 x %FlagDef]* @warning_defs, i32 0, i32 0), align 8
  %warning_name25 = load i8*, i8** %warning_name, align 8
  %value26 = load i32, i32* %value, align 4
  %fun_result27 = call i32 @set_flag(%TCCState* %s23, %FlagDef* getelementptr inbounds ([4 x %FlagDef], [4 x %FlagDef]* @warning_defs, i32 0, i32 0), i32 4, i8* %warning_name25, i32 %value26)
  ret i32 %fun_result27

cond_end:                                         ; No predecessors!
  ret i32 0

loop_continue_top_block:                          ; preds = %cond_end9
  %i14 = load i32, i32* %i, align 4
  %add15 = add i32 %i14, 1
  store i32 %add15, i32* %i, align 4
  %i16 = load i32, i32* %i, align 4
  %sub = sub i32 %i16, 1
  %p17 = load %FlagDef*, %FlagDef** %p, align 8
  %ptrToIntC18 = ptrtoint %FlagDef* %p17 to i64
  %add19 = add i64 %ptrToIntC18, 16
  %intToPtrB20 = inttoptr i64 %add19 to %FlagDef*
  store %FlagDef* %intToPtrB20, %FlagDef** %p, align 8
  %p21 = load %FlagDef*, %FlagDef** %p, align 8
  %ptrToIntI = ptrtoint %FlagDef* %p21 to i64
  %sub22 = sub i64 %ptrToIntI, 16
  %iintToPtrD = inttoptr i64 %sub22 to %FlagDef*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then
  %i5 = load i32, i32* %i, align 4
  %elementXXX = load %FlagDef, %FlagDef* getelementptr inbounds ([4 x %FlagDef], [4 x %FlagDef]* @warning_defs, i32 0, i32 0), align 8
  %le = icmp slt i32 %i5, 4
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p6 = load %FlagDef*, %FlagDef** %p, align 8
  %fieldLLL = getelementptr inbounds %FlagDef, %FlagDef* %p6, i32 0, i32 1
  %flags = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %flags to i32
  %andtmp = and i32 %icastKY, 1
  %icmpA7 = icmp ne i32 %andtmp, 0
  br i1 %icmpA7, label %cond_jump_then8, label %cond_end9

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 0

cond_jump_then8:                                  ; preds = %cond_then_block
  %s10 = load %TCCState*, %TCCState** %s, align 8
  %castAQ = bitcast %TCCState* %s10 to i8*
  %p11 = load %FlagDef*, %FlagDef** %p, align 8
  %fieldLLL12 = getelementptr inbounds %FlagDef, %FlagDef* %p11, i32 0, i32 0
  %offset = load i16, i16* %fieldLLL12, align 2
  %ptrToIntC = ptrtoint i8* %castAQ to i64
  %sext = sext i16 %offset to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ13 = bitcast i8* %intToPtrB to i32*
  store i32 1, i32* %castAQ13, align 4
  br label %cond_end9

cond_end9:                                        ; preds = %cond_jump_then8, %cond_then_block
  br label %loop_continue_top_block
}

define i32 @tcc_add_include_path(%TCCState* %0, i8* %1) {
entry:
  %pathname1 = alloca i8*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %pathname = alloca i8*, align 8
  %pathname2 = alloca i8**, align 8
  store i8* %1, i8** %pathname, align 8
  store i8** %pathname, i8*** %pathname2, align 8
  %pathname3 = load i8*, i8** %pathname, align 8
  %fun_result = call i8* @tcc_strdup(i8* %pathname3)
  store i8* %fun_result, i8** %pathname1, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 3
  %include_paths = load i8**, i8*** %fieldLLL, align 8
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL6 = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 4
  %nb_include_paths = load i32, i32* %fieldLLL6, align 4
  %pathname17 = load i8*, i8** %pathname1, align 8
  call void @dynarray_add(i8*** %fieldLLL, i32* %fieldLLL6, i8* %pathname17)
  ret i32 0
}

define i32 @tcc_add_sysinclude_path(%TCCState* %0, i8* %1) {
entry:
  %pathname1 = alloca i8*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %pathname = alloca i8*, align 8
  %pathname2 = alloca i8**, align 8
  store i8* %1, i8** %pathname, align 8
  store i8** %pathname, i8*** %pathname2, align 8
  %pathname3 = load i8*, i8** %pathname, align 8
  %fun_result = call i8* @tcc_strdup(i8* %pathname3)
  store i8* %fun_result, i8** %pathname1, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 5
  %sysinclude_paths = load i8**, i8*** %fieldLLL, align 8
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL6 = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 6
  %nb_sysinclude_paths = load i32, i32* %fieldLLL6, align 4
  %pathname17 = load i8*, i8** %pathname1, align 8
  call void @dynarray_add(i8*** %fieldLLL, i32* %fieldLLL6, i8* %pathname17)
  ret i32 0
}

define void @tcc_define_symbol(%TCCState* %0, i8* %1, i8* %2) {
entry:
  %bf = alloca %BufferedFile*, align 8
  %bf1 = alloca %BufferedFile, align 8
  %castXXXX = bitcast %BufferedFile* %bf1 to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 9776)
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %sym = alloca i8*, align 8
  %sym2 = alloca i8**, align 8
  store i8* %1, i8** %sym, align 8
  store i8** %sym, i8*** %sym2, align 8
  %value = alloca i8*, align 8
  %value3 = alloca i8**, align 8
  store i8* %2, i8** %value, align 8
  store i8** %value, i8*** %value3, align 8
  %bf14 = load %BufferedFile, %BufferedFile* %bf1, align 8
  store %BufferedFile* %bf1, %BufferedFile** %bf, align 8
  %bf5 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf5, i32 0, i32 10
  %autocast = bitcast [8193 x i8]* %fieldRRRROOU to i8*
  %sym6 = load i8*, i8** %sym, align 8
  %fun_result = call i8* @pstrcpy(i8* %autocast, i32 8192, i8* %sym6)
  %bf7 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU8 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf7, i32 0, i32 10
  %autocast9 = bitcast [8193 x i8]* %fieldRRRROOU8 to i8*
  %fun_result10 = call i8* @pstrcat(i8* %autocast9, i32 8192, i8* bitcast ([2 x i8]* @213 to i8*))
  %value11 = load i8*, i8** %value, align 8
  %logical_denial = icmp eq i8* %value11, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %bf12 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU13 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf12, i32 0, i32 10
  %autocast14 = bitcast [8193 x i8]* %fieldRRRROOU13 to i8*
  %fun_result15 = call i8* @pstrcat(i8* %autocast14, i32 8192, i8* bitcast ([2 x i8]* @214 to i8*))
  %bf16 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf16, i32 0, i32 2
  store i32 -1, i32* %fieldTU, align 4
  %bf17 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf18 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU19 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf18, i32 0, i32 10
  %autocast20 = bitcast [8193 x i8]* %fieldRRRROOU19 to i8*
  %fieldTU21 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf17, i32 0, i32 0
  store i8* %autocast20, i8** %fieldTU21, align 8
  %bf22 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf23 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU24 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf23, i32 0, i32 10
  %bf25 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU26 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf25, i32 0, i32 10
  %autocast27 = bitcast [8193 x i8]* %fieldRRRROOU26 to i8*
  %fun_result28 = call i64 @strlen(i8* %autocast27)
  %autocast29 = bitcast [8193 x i8]* %fieldRRRROOU24 to i8*
  %ptrToIntC = ptrtoint i8* %autocast29 to i64
  %mul = mul i64 %fun_result28, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %fieldTU30 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf22, i32 0, i32 1
  store i8* %intToPtrB, i8** %fieldTU30, align 8
  %bf31 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %bf31, i32 0, i32 1
  %buf_end = load i8*, i8** %fieldLLL, align 8
  store i8 92, i8* %buf_end, align 1
  %bf32 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU33 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf32, i32 0, i32 9
  %array_castA = bitcast [1024 x i8]* %fieldRRRROOU33 to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 0, i8* %gepBX, align 1
  %bf34 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldTU35 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf34, i32 0, i32 3
  store i32 1, i32* %fieldTU35, align 4
  %bf36 = load %BufferedFile*, %BufferedFile** %bf, align 8
  store %BufferedFile* %bf36, %BufferedFile** @file, align 8
  %s137 = load %TCCState*, %TCCState** %s1, align 8
  %s138 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU39 = getelementptr inbounds %TCCState, %TCCState* %s138, i32 0, i32 51
  %autocast40 = bitcast [32 x %BufferedFile*]* %fieldRRRROOU39 to %BufferedFile**
  %fieldTU41 = getelementptr inbounds %TCCState, %TCCState* %s137, i32 0, i32 1
  store %BufferedFile** %autocast40, %BufferedFile*** %fieldTU41, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL42 = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL42, align 8
  %element_addressAB = load i8*, i8** %fieldLLL42, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  store i32 %icastKY, i32* @ch, align 4
  call void @next_nomacro()
  call void @parse_define()
  store %BufferedFile* null, %BufferedFile** @file, align 8
  ret void
}

define void @tcc_undefine_symbol(%TCCState* %0, i8* %1) {
entry:
  %s = alloca %Sym*, align 8
  %ts = alloca %TokenSym*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %sym = alloca i8*, align 8
  %sym2 = alloca i8**, align 8
  store i8* %1, i8** %sym, align 8
  store i8** %sym, i8*** %sym2, align 8
  %sym3 = load i8*, i8** %sym, align 8
  %sym4 = load i8*, i8** %sym, align 8
  %fun_result = call i64 @strlen(i8* %sym4)
  %icastM = trunc i64 %fun_result to i32
  %fun_result5 = call %TokenSym* @tok_alloc(i8* %sym3, i32 %icastM)
  store %TokenSym* %fun_result5, %TokenSym** %ts, align 8
  %ts6 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %ts6, i32 0, i32 5
  %tok = load i32, i32* %fieldLLL, align 4
  store i32 1304, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.145, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find

define_find:                                      ; preds = %entry
  %inline_result_variable = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %tok, i32* %v, align 4
  %v7 = load i32, i32* %v, align 4
  %sub = sub i32 %v7, 256
  store i32 %sub, i32* %v, align 4
  %add = add i32 %sub, 256
  %v8 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub9 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v8, %sub9
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_end

define_find_end:                                  ; preds = %cond_end, %cond_jump_then
  %inline_result_variable12 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable12, %Sym** %s, align 8
  %s13 = load %Sym*, %Sym** %s, align 8
  %icmpB = icmp ne %Sym* %s13, null
  br i1 %icmpB, label %cond_jump_then14, label %cond_end15

cond_jump_then:                                   ; preds = %define_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_end:                                         ; preds = %define_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v10 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v10
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL11 = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  %sym_define = load %Sym*, %Sym** %fieldLLL11, align 8
  store %Sym* %sym_define, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_jump_then14:                                 ; preds = %define_find_end
  %s16 = load %Sym*, %Sym** %s, align 8
  call void @define_undef(%Sym* %s16)
  br label %cond_end15

cond_end15:                                       ; preds = %cond_jump_then14, %define_find_end
  ret void
}

define i32 @tcc_add_file(%TCCState* %0, i8* %1) {
entry:
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %filename = alloca i8*, align 8
  %filename2 = alloca i8**, align 8
  store i8* %1, i8** %filename, align 8
  store i8** %filename, i8*** %filename2, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s3, i32 0, i32 0
  %output_type = load i32, i32* %fieldLLL, align 4
  %eq = icmp eq i32 %output_type, 4
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %s4 = load %TCCState*, %TCCState** %s, align 8
  %filename5 = load i8*, i8** %filename, align 8
  %fun_result = call i32 @tcc_add_file_internal(%TCCState* %s4, i8* %filename5, i32 5)
  ret i32 %fun_result

cond_else_block:                                  ; preds = %entry
  %s6 = load %TCCState*, %TCCState** %s, align 8
  %filename7 = load i8*, i8** %filename, align 8
  %fun_result8 = call i32 @tcc_add_file_internal(%TCCState* %s6, i8* %filename7, i32 1)
  ret i32 %fun_result8

cond_end:                                         ; No predecessors!
  ret i32 0
}

define i32 @tcc_compile_string(%TCCState* %0, i8* %1) {
entry:
  %buf = alloca i8*, align 8
  %len = alloca i32, align 4
  %ret = alloca i32, align 4
  %bf = alloca %BufferedFile*, align 8
  %bf1 = alloca %BufferedFile, align 8
  %castXXXX = bitcast %BufferedFile* %bf1 to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 9776)
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %str = alloca i8*, align 8
  %str2 = alloca i8**, align 8
  store i8* %1, i8** %str, align 8
  store i8** %str, i8*** %str2, align 8
  %bf13 = load %BufferedFile, %BufferedFile* %bf1, align 8
  store %BufferedFile* %bf1, %BufferedFile** %bf, align 8
  %bf4 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf4, i32 0, i32 2
  store i32 -1, i32* %fieldTU, align 4
  %str5 = load i8*, i8** %str, align 8
  %fun_result = call i64 @strlen(i8* %str5)
  %icastM = trunc i64 %fun_result to i32
  store i32 %icastM, i32* %len, align 4
  %len6 = load i32, i32* %len, align 4
  %add = add i32 %len6, 1
  %icastD = sext i32 %add to i64
  %fun_result7 = call i8* @tcc_malloc(i64 %icastD)
  store i8* %fun_result7, i8** %buf, align 8
  %buf8 = load i8*, i8** %buf, align 8
  %logical_denial = icmp eq i8* %buf8, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 -1

cond_end:                                         ; preds = %entry
  %buf9 = load i8*, i8** %buf, align 8
  %str10 = load i8*, i8** %str, align 8
  %len11 = load i32, i32* %len, align 4
  %icastD12 = sext i32 %len11 to i64
  %fun_result13 = call i8* @memcpy(i8* %buf9, i8* %str10, i64 %icastD12)
  %buf14 = load i8*, i8** %buf, align 8
  %len15 = load i32, i32* %len, align 4
  %element_addressXYXY = getelementptr i8, i8* %buf14, i32 %len15
  store i8 92, i8* %element_addressXYXY, align 1
  %bf16 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %buf17 = load i8*, i8** %buf, align 8
  %fieldTU18 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf16, i32 0, i32 0
  store i8* %buf17, i8** %fieldTU18, align 8
  %bf19 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %buf20 = load i8*, i8** %buf, align 8
  %len21 = load i32, i32* %len, align 4
  %ptrToIntC = ptrtoint i8* %buf20 to i64
  %sext = sext i32 %len21 to i64
  %mul = mul i64 %sext, 1
  %add22 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add22 to i8*
  %fieldTU23 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf19, i32 0, i32 1
  store i8* %intToPtrB, i8** %fieldTU23, align 8
  %bf24 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf24, i32 0, i32 9
  %autocast = bitcast [1024 x i8]* %fieldRRRROOU to i8*
  %bf25 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU26 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf25, i32 0, i32 9
  %fun_result27 = call i8* @pstrcpy(i8* %autocast, i32 1024, i8* bitcast ([9 x i8]* @212 to i8*))
  %bf28 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldTU29 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf28, i32 0, i32 3
  store i32 1, i32* %fieldTU29, align 4
  %bf30 = load %BufferedFile*, %BufferedFile** %bf, align 8
  store %BufferedFile* %bf30, %BufferedFile** @file, align 8
  %s31 = load %TCCState*, %TCCState** %s, align 8
  %fun_result32 = call i32 @tcc_compile(%TCCState* %s31)
  store i32 %fun_result32, i32* %ret, align 4
  store %BufferedFile* null, %BufferedFile** @file, align 8
  %buf33 = load i8*, i8** %buf, align 8
  call void @tcc_free(i8* %buf33)
  %ret34 = load i32, i32* %ret, align 4
  ret i32 %ret34
}

define i32 @tcc_set_output_type(%TCCState* %0, i32 %1) {
entry:
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %buf = alloca [1024 x i8], align 1
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %output_type = alloca i32, align 4
  %output_type2 = alloca i32*, align 8
  store i32 %1, i32* %output_type, align 4
  store i32* %output_type, i32** %output_type2, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %output_type4 = load i32, i32* %output_type, align 4
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s3, i32 0, i32 0
  store i32 %output_type4, i32* %fieldTU, align 4
  %s5 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s5, i32 0, i32 24
  %nostdinc = load i32, i32* %fieldLLL, align 4
  %logical_denial = icmp eq i32 %nostdinc, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s6 = load %TCCState*, %TCCState** %s, align 8
  %fun_result = call i32 @tcc_add_sysinclude_path(%TCCState* %s6, i8* bitcast ([19 x i8]* @340 to i8*))
  %s7 = load %TCCState*, %TCCState** %s, align 8
  %fun_result8 = call i32 @tcc_add_sysinclude_path(%TCCState* %s7, i8* bitcast ([13 x i8]* @341 to i8*))
  %autocast = bitcast [1024 x i8]* %buf to i8*
  %s9 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL10 = getelementptr inbounds %TCCState, %TCCState* %s9, i32 0, i32 44
  %tcc_lib_path = load i8*, i8** %fieldLLL10, align 8
  %fun_result11 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 1024, i8* bitcast ([11 x i8]* @342 to i8*), i8* %tcc_lib_path)
  %s12 = load %TCCState*, %TCCState** %s, align 8
  %autocast13 = bitcast [1024 x i8]* %buf to i8*
  %fun_result14 = call i32 @tcc_add_sysinclude_path(%TCCState* %s12, i8* %autocast13)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %s15 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL16 = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 34
  %char_is_unsigned = load i32, i32* %fieldLLL16, align 4
  %icmpA17 = icmp ne i32 %char_is_unsigned, 0
  br i1 %icmpA17, label %cond_jump_then18, label %cond_end19

cond_jump_then18:                                 ; preds = %cond_end
  %s20 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_define_symbol(%TCCState* %s20, i8* bitcast ([18 x i8]* @343 to i8*), i8* null)
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_end
  %s21 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL22 = getelementptr inbounds %TCCState, %TCCState* %s21, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL22, align 4
  %icmpA23 = icmp ne i32 %do_debug, 0
  br i1 %icmpA23, label %cond_jump_then24, label %cond_end25

cond_jump_then24:                                 ; preds = %cond_end19
  %s26 = load %TCCState*, %TCCState** %s, align 8
  %fun_result27 = call %Section* @new_section(%TCCState* %s26, i8* bitcast ([6 x i8]* @344 to i8*), i32 1, i32 0)
  store %Section* %fun_result27, %Section** @stab_section, align 8
  %stab_section = load %Section*, %Section** @stab_section, align 8
  %fieldTU28 = getelementptr inbounds %Section, %Section* %stab_section, i32 0, i32 9
  store i32 12, i32* %fieldTU28, align 4
  %s29 = load %TCCState*, %TCCState** %s, align 8
  %fun_result30 = call %Section* @new_section(%TCCState* %s29, i8* bitcast ([9 x i8]* @345 to i8*), i32 3, i32 0)
  store %Section* %fun_result30, %Section** @stabstr_section, align 8
  %stabstr_section = load %Section*, %Section** @stabstr_section, align 8
  %fun_result31 = call i32 @put_elf_str(%Section* %stabstr_section, i8* bitcast ([1 x i8]* @346 to i8*))
  %stab_section32 = load %Section*, %Section** @stab_section, align 8
  %stabstr_section33 = load %Section*, %Section** @stabstr_section, align 8
  %fieldTU34 = getelementptr inbounds %Section, %Section* %stab_section32, i32 0, i32 14
  store %Section* %stabstr_section33, %Section** %fieldTU34, align 8
  call void @put_stabs(i8* bitcast ([1 x i8]* @347 to i8*), i32 0, i32 0, i32 0, i64 0)
  br label %cond_end25

cond_end25:                                       ; preds = %cond_jump_then24, %cond_end19
  %output_type35 = load i32, i32* %output_type, align 4
  %eq = icmp eq i32 %output_type35, 1
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then36

cond_jump_then36:                                 ; preds = %cond_end25
  %output_type37 = load i32, i32* %output_type, align 4
  %eq38 = icmp eq i32 %output_type37, 2
  %oror39 = or i1 %eq, %eq38
  store i1 %oror39, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then36, %cond_end25
  %oror_result_value = load i1, i1* %oror, align 1
  store i1 %oror_result_value, i1* %andand, align 1
  br i1 %oror_result_value, label %cond_jump_then40, label %cond_jump_end41

cond_jump_then40:                                 ; preds = %cond_jump_end
  %s42 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL43 = getelementptr inbounds %TCCState, %TCCState* %s42, i32 0, i32 25
  %nostdlib = load i32, i32* %fieldLLL43, align 4
  %logical_denial44 = icmp eq i32 %nostdlib, 0
  %castOOOO45 = zext i1 %logical_denial44 to i32
  %icmpA46 = icmp ne i32 %castOOOO45, 0
  %andand47 = and i1 %oror_result_value, %icmpA46
  store i1 %andand47, i1* %andand, align 1
  br label %cond_jump_end41

cond_jump_end41:                                  ; preds = %cond_jump_then40, %cond_jump_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then48, label %cond_end49

cond_jump_then48:                                 ; preds = %cond_jump_end41
  %output_type50 = load i32, i32* %output_type, align 4
  %not_eq = icmp ne i32 %output_type50, 2
  br i1 %not_eq, label %cond_jump_then51, label %cond_end52

cond_end49:                                       ; preds = %cond_end52, %cond_jump_end41
  ret i32 0

cond_jump_then51:                                 ; preds = %cond_jump_then48
  %s53 = load %TCCState*, %TCCState** %s, align 8
  %fun_result54 = call i32 @tcc_add_file(%TCCState* %s53, i8* bitcast ([16 x i8]* @348 to i8*))
  br label %cond_end52

cond_end52:                                       ; preds = %cond_jump_then51, %cond_jump_then48
  %s55 = load %TCCState*, %TCCState** %s, align 8
  %fun_result56 = call i32 @tcc_add_file(%TCCState* %s55, i8* bitcast ([16 x i8]* @349 to i8*))
  br label %cond_end49
}

define i32 @tcc_add_library_path(%TCCState* %0, i8* %1) {
entry:
  %pathname1 = alloca i8*, align 8
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %pathname = alloca i8*, align 8
  %pathname2 = alloca i8**, align 8
  store i8* %1, i8** %pathname, align 8
  store i8** %pathname, i8*** %pathname2, align 8
  %pathname3 = load i8*, i8** %pathname, align 8
  %fun_result = call i8* @tcc_strdup(i8* %pathname3)
  store i8* %fun_result, i8** %pathname1, align 8
  %s4 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s4, i32 0, i32 9
  %library_paths = load i8**, i8*** %fieldLLL, align 8
  %s5 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL6 = getelementptr inbounds %TCCState, %TCCState* %s5, i32 0, i32 10
  %nb_library_paths = load i32, i32* %fieldLLL6, align 4
  %pathname17 = load i8*, i8** %pathname1, align 8
  call void @dynarray_add(i8*** %fieldLLL, i32* %fieldLLL6, i8* %pathname17)
  ret i32 0
}

define i32 @tcc_add_library(%TCCState* %0, i8* %1) {
entry:
  %i = alloca i32, align 4
  %buf = alloca [1024 x i8], align 1
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %libraryname = alloca i8*, align 8
  %libraryname2 = alloca i8**, align 8
  store i8* %1, i8** %libraryname, align 8
  store i8** %libraryname, i8*** %libraryname2, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s3, i32 0, i32 27
  %static_link = load i32, i32* %fieldLLL, align 4
  %logical_denial = icmp eq i32 %static_link, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %autocast = bitcast [1024 x i8]* %buf to i8*
  %libraryname4 = load i8*, i8** %libraryname, align 8
  %fun_result = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 1024, i8* bitcast ([9 x i8]* @338 to i8*), i8* %libraryname4)
  %s5 = load %TCCState*, %TCCState** %s, align 8
  %autocast6 = bitcast [1024 x i8]* %buf to i8*
  %fun_result7 = call i32 @tcc_add_dll(%TCCState* %s5, i8* %autocast6, i32 0)
  %eq = icmp eq i32 %fun_result7, 0
  br i1 %eq, label %cond_jump_then8, label %cond_end9

cond_end:                                         ; preds = %cond_end9, %entry
  store i32 0, i32* %i, align 4
  br label %loop_top_block

cond_jump_then8:                                  ; preds = %cond_jump_then
  ret i32 0

cond_end9:                                        ; preds = %cond_jump_then
  br label %cond_end

loop_continue_top_block:                          ; preds = %cond_end24
  %i25 = load i32, i32* %i, align 4
  %add = add i32 %i25, 1
  store i32 %add, i32* %i, align 4
  %i26 = load i32, i32* %i, align 4
  %sub = sub i32 %i26, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  %i10 = load i32, i32* %i, align 4
  %s11 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL12 = getelementptr inbounds %TCCState, %TCCState* %s11, i32 0, i32 10
  %nb_library_paths = load i32, i32* %fieldLLL12, align 4
  %le = icmp slt i32 %i10, %nb_library_paths
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %autocast13 = bitcast [1024 x i8]* %buf to i8*
  %s14 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL15 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 9
  %library_paths = load i8**, i8*** %fieldLLL15, align 8
  %i16 = load i32, i32* %i, align 4
  %element_addressAB = load i8**, i8*** %fieldLLL15, align 8
  %element_addressXYXZY = getelementptr inbounds i8*, i8** %element_addressAB, i32 %i16
  %load_element = load i8*, i8** %element_addressXYXZY, align 8
  %libraryname17 = load i8*, i8** %libraryname, align 8
  %fun_result18 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast13, i64 1024, i8* bitcast ([11 x i8]* @339 to i8*), i8* %load_element, i8* %libraryname17)
  %s19 = load %TCCState*, %TCCState** %s, align 8
  %autocast20 = bitcast [1024 x i8]* %buf to i8*
  %fun_result21 = call i32 @tcc_add_file_internal(%TCCState* %s19, i8* %autocast20, i32 0)
  %eq22 = icmp eq i32 %fun_result21, 0
  br i1 %eq22, label %cond_jump_then23, label %cond_end24

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 -1

cond_jump_then23:                                 ; preds = %cond_then_block
  ret i32 0

cond_end24:                                       ; preds = %cond_then_block
  br label %loop_continue_top_block
}

define i32 @tcc_add_symbol(%TCCState* %0, i8* %1, i8* %2) {
entry:
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  %val = alloca i8*, align 8
  %val3 = alloca i8**, align 8
  store i8* %2, i8** %val, align 8
  store i8** %val, i8*** %val3, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %val4 = load i8*, i8** %val, align 8
  %icatXXXXXX = ptrtoint i8* %val4 to i64
  %name5 = load i8*, i8** %name, align 8
  %fun_result = call i32 @add_elf_sym(%Section* %symtab_section, i64 %icatXXXXXX, i64 0, i32 16, i32 0, i32 65521, i8* %name5)
  ret i32 0
}

define i32 @tcc_output_file(%TCCState* %0, i8* %1) {
entry:
  %ret = alloca i32, align 4
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %filename = alloca i8*, align 8
  %filename2 = alloca i8**, align 8
  store i8* %1, i8** %filename, align 8
  store i8** %filename, i8*** %filename2, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %filename4 = load i8*, i8** %filename, align 8
  %fun_result = call i32 @elf_output_file(%TCCState* %s3, i8* %filename4)
  store i32 %fun_result, i32* %ret, align 4
  %ret5 = load i32, i32* %ret, align 4
  ret i32 %ret5
}

define i32 @tcc_run(%TCCState* %0, i32 %1, i8** %2) {
entry:
  %sigact = alloca %sigaction, align 8
  %castXXXX = bitcast %sigaction* %sigact to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 152)
  %ret = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %prog_main = alloca i32 (i32, i8**)*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %argc = alloca i32, align 4
  %argc2 = alloca i32*, align 8
  store i32 %1, i32* %argc, align 4
  store i32* %argc, i32** %argc2, align 8
  %argv = alloca i8**, align 8
  %argv3 = alloca i8***, align 8
  store i8** %2, i8*** %argv, align 8
  store i8*** %argv, i8**** %argv3, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result = call i32 @tcc_relocate(%TCCState* %s14, i8* null)
  store i32 %fun_result, i32* %ret, align 4
  %ret5 = load i32, i32* %ret, align 4
  %le = icmp slt i32 %ret5, 0
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 -1

cond_end:                                         ; preds = %entry
  %ret6 = load i32, i32* %ret, align 4
  %icastD = sext i32 %ret6 to i64
  %fun_result7 = call i8* @tcc_malloc(i64 %icastD)
  store i8* %fun_result7, i8** %ptr, align 8
  %s18 = load %TCCState*, %TCCState** %s1, align 8
  %ptr9 = load i8*, i8** %ptr, align 8
  %fun_result10 = call i32 @tcc_relocate(%TCCState* %s18, i8* %ptr9)
  %s111 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result12 = call i8* @tcc_get_symbol_err(%TCCState* %s111, i8* bitcast ([5 x i8]* @302 to i8*))
  %castAQ = bitcast i8* %fun_result12 to i32 (i32, i8**)*
  store i32 (i32, i8**)* %castAQ, i32 (i32, i8**)** %prog_main, align 8
  %s113 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s113, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL, align 4
  %icmpA = icmp ne i32 %do_debug, 0
  br i1 %icmpA, label %cond_jump_then14, label %cond_end15

cond_jump_then14:                                 ; preds = %cond_end
  %sigact16 = load %sigaction, %sigaction* %sigact, align 8
  %fieldTTT = getelementptr inbounds %sigaction, %sigaction* %sigact, i32 0, i32 2
  store i32 -2147483644, i32* %fieldTTT, align 4
  %sigact17 = load %sigaction, %sigaction* %sigact, align 8
  %fieldVVV = getelementptr inbounds %sigaction, %sigaction* %sigact, i32 0, i32 0
  %__sigaction_handler = load %come_anon65, %come_anon65* %fieldVVV, align 8
  %fieldIII = getelementptr inbounds %come_anon65, %come_anon65* %fieldVVV, i32 0, i32 0
  %icastN = bitcast void (i32)** %fieldIII to void (i32, %come_anon33*, i8*)**
  store void (i32, %come_anon33*, i8*)* @sig_error, void (i32, %come_anon33*, i8*)** %icastN, align 8
  %sigact18 = load %sigaction, %sigaction* %sigact, align 8
  %fieldVVV19 = getelementptr inbounds %sigaction, %sigaction* %sigact, i32 0, i32 1
  %sa_mask = load %come_anon5, %come_anon5* %fieldVVV19, align 4
  %fun_result20 = call i32 @sigemptyset(%come_anon5* %fieldVVV19)
  %sigact21 = load %sigaction, %sigaction* %sigact, align 8
  %fun_result22 = call i32 @sigaction(i32 8, %sigaction* %sigact, %sigaction* null)
  %sigact23 = load %sigaction, %sigaction* %sigact, align 8
  %fun_result24 = call i32 @sigaction(i32 4, %sigaction* %sigact, %sigaction* null)
  %sigact25 = load %sigaction, %sigaction* %sigact, align 8
  %fun_result26 = call i32 @sigaction(i32 11, %sigaction* %sigact, %sigaction* null)
  %sigact27 = load %sigaction, %sigaction* %sigact, align 8
  %fun_result28 = call i32 @sigaction(i32 7, %sigaction* %sigact, %sigaction* null)
  %sigact29 = load %sigaction, %sigaction* %sigact, align 8
  %fun_result30 = call i32 @sigaction(i32 6, %sigaction* %sigact, %sigaction* null)
  br label %cond_end15

cond_end15:                                       ; preds = %cond_jump_then14, %cond_end
  %prog_main31 = load i32 (i32, i8**)*, i32 (i32, i8**)** %prog_main, align 8
  %argc32 = load i32, i32* %argc, align 4
  %argv33 = load i8**, i8*** %argv, align 8
  %fun_result3 = call i32 %prog_main31(i32 %argc32, i8** %argv33)
  store i32 %fun_result3, i32* %ret, align 4
  %ptr34 = load i8*, i8** %ptr, align 8
  call void @tcc_free(i8* %ptr34)
  %ret35 = load i32, i32* %ret, align 4
  ret i32 %ret35
}

define i32 @tcc_relocate(%TCCState* %0, i8* %1) {
entry:
  %oror = alloca i1, align 1
  %condtional_result_value = alloca i64, align 8
  %i = alloca i32, align 4
  %mem = alloca i64, align 8
  %length = alloca i64, align 8
  %offset = alloca i64, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %ptr = alloca i8*, align 8
  %ptr2 = alloca i8**, align 8
  store i8* %1, i8** %ptr, align 8
  store i8** %ptr, i8*** %ptr2, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 57
  %runtime_added = load i32, i32* %fieldLLL, align 4
  %eq = icmp eq i32 0, %runtime_added
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 57
  store i32 1, i32* %fieldTU, align 4
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU6 = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 49
  store i32 0, i32* %fieldTU6, align 4
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  call void @tcc_add_runtime(%TCCState* %s17)
  call void @relocate_common_syms()
  %s18 = load %TCCState*, %TCCState** %s1, align 8
  call void @tcc_add_linker_symbols(%TCCState* %s18)
  %s19 = load %TCCState*, %TCCState** %s1, align 8
  call void @build_got_entries(%TCCState* %s19)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  store i64 0, i64* %offset, align 4
  %ptr10 = load i8*, i8** %ptr, align 8
  %icatXXXXXX = ptrtoint i8* %ptr10 to i64
  store i64 %icatXXXXXX, i64* %mem, align 4
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end30, %cond_jump_then23
  %i41 = load i32, i32* %i, align 4
  %add42 = add i32 %i41, 1
  store i32 %add42, i32* %i, align 4
  %i43 = load i32, i32* %i, align 4
  %sub = sub i32 %i43, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  %i11 = load i32, i32* %i, align 4
  %s112 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL13 = getelementptr inbounds %TCCState, %TCCState* %s112, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL13, align 4
  %le = icmp slt i32 %i11, %nb_sections
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s114 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL15 = getelementptr inbounds %TCCState, %TCCState* %s114, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL15, align 8
  %i16 = load i32, i32* %i, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL15, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %i16
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  store %Section* %load_element, %Section** %s, align 8
  %s20 = load %Section*, %Section** %s, align 8
  %fieldLLL21 = getelementptr inbounds %Section, %Section* %s20, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL21, align 4
  %andtmp = and i32 %sh_flags, 2
  %eq22 = icmp eq i32 0, %andtmp
  br i1 %eq22, label %cond_jump_then23, label %cond_end24

cond_end_block:                                   ; preds = %loop_top_block
  %s144 = load %TCCState*, %TCCState** %s1, align 8
  call void @relocate_syms(%TCCState* %s144, i32 1)
  %s145 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL46 = getelementptr inbounds %TCCState, %TCCState* %s145, i32 0, i32 49
  %nb_errors = load i32, i32* %fieldLLL46, align 4
  %icmpA47 = icmp ne i32 %nb_errors, 0
  br i1 %icmpA47, label %cond_jump_then48, label %cond_end49

cond_jump_then23:                                 ; preds = %cond_then_block
  br label %loop_continue_top_block

cond_end24:                                       ; preds = %after_continue, %cond_then_block
  %s25 = load %Section*, %Section** %s, align 8
  %fieldLLL26 = getelementptr inbounds %Section, %Section* %s25, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL26, align 4
  store i64 %data_offset, i64* %length, align 4
  %s27 = load %Section*, %Section** %s, align 8
  %mem28 = load i64, i64* %mem, align 4
  %icmpA = icmp ne i64 %mem28, 0
  br i1 %icmpA, label %cond_jump_then29, label %cond_else_block

after_continue:                                   ; No predecessors!
  br label %cond_end24

cond_jump_then29:                                 ; preds = %cond_end24
  %mem31 = load i64, i64* %mem, align 4
  %offset32 = load i64, i64* %offset, align 4
  %add = add i64 %mem31, %offset32
  %add33 = add i64 %add, 15
  %andtmp34 = and i64 %add33, -16
  store i64 %andtmp34, i64* %condtional_result_value, align 4
  br label %cond_end30

cond_else_block:                                  ; preds = %cond_end24
  store i64 0, i64* %condtional_result_value, align 4
  br label %cond_end30

cond_end30:                                       ; preds = %cond_else_block, %cond_jump_then29
  %conditional_result_value = load i64, i64* %condtional_result_value, align 4
  %fieldTU35 = getelementptr inbounds %Section, %Section* %s27, i32 0, i32 11
  store i64 %conditional_result_value, i64* %fieldTU35, align 4
  %offset36 = load i64, i64* %offset, align 4
  %length37 = load i64, i64* %length, align 4
  %add38 = add i64 %offset36, %length37
  %add39 = add i64 %add38, 15
  %andtmp40 = and i64 %add39, -16
  store i64 %andtmp40, i64* %offset, align 4
  br label %loop_continue_top_block

cond_jump_then48:                                 ; preds = %cond_end_block
  ret i32 -1

cond_end49:                                       ; preds = %cond_end_block
  %s150 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU51 = getelementptr inbounds %TCCState, %TCCState* %s150, i32 0, i32 59
  store i32 0, i32* %fieldTU51, align 4
  %s152 = load %TCCState*, %TCCState** %s1, align 8
  %mem53 = load i64, i64* %mem, align 4
  %offset54 = load i64, i64* %offset, align 4
  %add55 = add i64 %mem53, %offset54
  %castBA = inttoptr i64 %add55 to i8*
  %fieldTU56 = getelementptr inbounds %TCCState, %TCCState* %s152, i32 0, i32 58
  store i8* %castBA, i8** %fieldTU56, align 8
  %offset57 = load i64, i64* %offset, align 4
  %mul = mul i64 %offset57, 2
  store i64 %mul, i64* %offset, align 4
  %mem58 = load i64, i64* %mem, align 4
  %icastM = trunc i64 %mem58 to i32
  %eq59 = icmp eq i32 0, %icastM
  br i1 %eq59, label %cond_jump_then60, label %cond_end61

cond_jump_then60:                                 ; preds = %cond_end49
  %offset62 = load i64, i64* %offset, align 4
  %add63 = add i64 %offset62, 15
  %icastM64 = trunc i64 %add63 to i32
  ret i32 %icastM64

cond_end61:                                       ; preds = %cond_end49
  store i32 1, i32* %i, align 4
  br label %loop_top_block66

loop_continue_top_block65:                        ; preds = %cond_end84
  %i87 = load i32, i32* %i, align 4
  %add88 = add i32 %i87, 1
  store i32 %add88, i32* %i, align 4
  %i89 = load i32, i32* %i, align 4
  %sub90 = sub i32 %i89, 1
  br label %loop_top_block66

loop_top_block66:                                 ; preds = %loop_continue_top_block65, %cond_end61
  %i67 = load i32, i32* %i, align 4
  %s168 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL69 = getelementptr inbounds %TCCState, %TCCState* %s168, i32 0, i32 14
  %nb_sections70 = load i32, i32* %fieldLLL69, align 4
  %le71 = icmp slt i32 %i67, %nb_sections70
  br i1 %le71, label %cond_then_block72, label %cond_end_block73

cond_then_block72:                                ; preds = %loop_top_block66
  %s174 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL75 = getelementptr inbounds %TCCState, %TCCState* %s174, i32 0, i32 13
  %sections76 = load %Section**, %Section*** %fieldLLL75, align 8
  %i77 = load i32, i32* %i, align 4
  %element_addressAB78 = load %Section**, %Section*** %fieldLLL75, align 8
  %element_addressXYXZY79 = getelementptr inbounds %Section*, %Section** %element_addressAB78, i32 %i77
  %load_element80 = load %Section*, %Section** %element_addressXYXZY79, align 8
  store %Section* %load_element80, %Section** %s, align 8
  %s81 = load %Section*, %Section** %s, align 8
  %fieldLLL82 = getelementptr inbounds %Section, %Section* %s81, i32 0, i32 15
  %reloc = load %Section*, %Section** %fieldLLL82, align 8
  %icmpB = icmp ne %Section* %reloc, null
  br i1 %icmpB, label %cond_jump_then83, label %cond_end84

cond_end_block73:                                 ; preds = %loop_top_block66
  store i32 1, i32* %i, align 4
  br label %loop_top_block92

cond_jump_then83:                                 ; preds = %cond_then_block72
  %s185 = load %TCCState*, %TCCState** %s1, align 8
  %s86 = load %Section*, %Section** %s, align 8
  call void @relocate_section(%TCCState* %s185, %Section* %s86)
  br label %cond_end84

cond_end84:                                       ; preds = %cond_jump_then83, %cond_then_block72
  br label %loop_continue_top_block65

loop_continue_top_block91:                        ; preds = %cond_end146, %cond_jump_then112
  %i149 = load i32, i32* %i, align 4
  %add150 = add i32 %i149, 1
  store i32 %add150, i32* %i, align 4
  %i151 = load i32, i32* %i, align 4
  %sub152 = sub i32 %i151, 1
  br label %loop_top_block92

loop_top_block92:                                 ; preds = %loop_continue_top_block91, %cond_end_block73
  %i93 = load i32, i32* %i, align 4
  %s194 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL95 = getelementptr inbounds %TCCState, %TCCState* %s194, i32 0, i32 14
  %nb_sections96 = load i32, i32* %fieldLLL95, align 4
  %le97 = icmp slt i32 %i93, %nb_sections96
  br i1 %le97, label %cond_then_block98, label %cond_end_block99

cond_then_block98:                                ; preds = %loop_top_block92
  %s1100 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL101 = getelementptr inbounds %TCCState, %TCCState* %s1100, i32 0, i32 13
  %sections102 = load %Section**, %Section*** %fieldLLL101, align 8
  %i103 = load i32, i32* %i, align 4
  %element_addressAB104 = load %Section**, %Section*** %fieldLLL101, align 8
  %element_addressXYXZY105 = getelementptr inbounds %Section*, %Section** %element_addressAB104, i32 %i103
  %load_element106 = load %Section*, %Section** %element_addressXYXZY105, align 8
  store %Section* %load_element106, %Section** %s, align 8
  %s107 = load %Section*, %Section** %s, align 8
  %fieldLLL108 = getelementptr inbounds %Section, %Section* %s107, i32 0, i32 6
  %sh_flags109 = load i32, i32* %fieldLLL108, align 4
  %andtmp110 = and i32 %sh_flags109, 2
  %eq111 = icmp eq i32 0, %andtmp110
  br i1 %eq111, label %cond_jump_then112, label %cond_end113

cond_end_block99:                                 ; preds = %loop_top_block92
  %s1153 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL154 = getelementptr inbounds %TCCState, %TCCState* %s1153, i32 0, i32 58
  %runtime_plt_and_got = load i8*, i8** %fieldLLL154, align 8
  %s1155 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL156 = getelementptr inbounds %TCCState, %TCCState* %s1155, i32 0, i32 59
  %runtime_plt_and_got_offset = load i32, i32* %fieldLLL156, align 4
  %icastC = zext i32 %runtime_plt_and_got_offset to i64
  call void @set_pages_executable(i8* %runtime_plt_and_got, i64 %icastC)
  ret i32 0

cond_jump_then112:                                ; preds = %cond_then_block98
  br label %loop_continue_top_block91

cond_end113:                                      ; preds = %after_continue114, %cond_then_block98
  %s115 = load %Section*, %Section** %s, align 8
  %fieldLLL116 = getelementptr inbounds %Section, %Section* %s115, i32 0, i32 0
  %data_offset117 = load i64, i64* %fieldLLL116, align 4
  store i64 %data_offset117, i64* %length, align 4
  %s118 = load %Section*, %Section** %s, align 8
  %fieldLLL119 = getelementptr inbounds %Section, %Section* %s118, i32 0, i32 11
  %sh_addr = load i64, i64* %fieldLLL119, align 4
  %castBA120 = inttoptr i64 %sh_addr to i8*
  store i8* %castBA120, i8** %ptr, align 8
  %s121 = load %Section*, %Section** %s, align 8
  %fieldLLL122 = getelementptr inbounds %Section, %Section* %s121, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL122, align 8
  %eq123 = icmp eq i8* null, %data
  store i1 %eq123, i1* %oror, align 1
  br i1 %eq123, label %cond_jump_end, label %cond_jump_then124

after_continue114:                                ; No predecessors!
  br label %cond_end113

cond_jump_then124:                                ; preds = %cond_end113
  %s125 = load %Section*, %Section** %s, align 8
  %fieldLLL126 = getelementptr inbounds %Section, %Section* %s125, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL126, align 4
  %eq127 = icmp eq i32 %sh_type, 8
  %oror128 = or i1 %eq123, %eq127
  store i1 %oror128, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then124, %cond_end113
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then129, label %cond_else_block130

cond_jump_then129:                                ; preds = %cond_jump_end
  %ptr132 = load i8*, i8** %ptr, align 8
  %length133 = load i64, i64* %length, align 4
  %fun_result = call i8* @memset(i8* %ptr132, i32 0, i64 %length133)
  br label %cond_end131

cond_else_block130:                               ; preds = %cond_jump_end
  %ptr134 = load i8*, i8** %ptr, align 8
  %s135 = load %Section*, %Section** %s, align 8
  %fieldLLL136 = getelementptr inbounds %Section, %Section* %s135, i32 0, i32 1
  %data137 = load i8*, i8** %fieldLLL136, align 8
  %length138 = load i64, i64* %length, align 4
  %fun_result139 = call i8* @memcpy(i8* %ptr134, i8* %data137, i64 %length138)
  br label %cond_end131

cond_end131:                                      ; preds = %cond_else_block130, %cond_jump_then129
  %s140 = load %Section*, %Section** %s, align 8
  %fieldLLL141 = getelementptr inbounds %Section, %Section* %s140, i32 0, i32 6
  %sh_flags142 = load i32, i32* %fieldLLL141, align 4
  %andtmp143 = and i32 %sh_flags142, 4
  %icmpA144 = icmp ne i32 %andtmp143, 0
  br i1 %icmpA144, label %cond_jump_then145, label %cond_end146

cond_jump_then145:                                ; preds = %cond_end131
  %ptr147 = load i8*, i8** %ptr, align 8
  %length148 = load i64, i64* %length, align 4
  call void @set_pages_executable(i8* %ptr147, i64 %length148)
  br label %cond_end146

cond_end146:                                      ; preds = %cond_jump_then145, %cond_end131
  br label %loop_continue_top_block91
}

define i8* @tcc_get_symbol(%TCCState* %0, i8* %1) {
entry:
  %sym = alloca %come_anon88*, align 8
  %sym_index = alloca i32, align 4
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %name3 = load i8*, i8** %name, align 8
  %fun_result = call i32 @find_elf_sym(%Section* %symtab_section, i8* %name3)
  store i32 %fun_result, i32* %sym_index, align 4
  %sym_index4 = load i32, i32* %sym_index, align 4
  %logical_denial = icmp eq i32 %sym_index4, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i8* null

cond_end:                                         ; preds = %entry
  %symtab_section5 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %symtab_section5, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %castAQ = bitcast i8* %data to %come_anon88*
  %sym_index6 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %sym_index6
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %sym, align 8
  %sym7 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL8 = getelementptr inbounds %come_anon88, %come_anon88* %sym7, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL8, align 4
  %castBA = inttoptr i64 %st_value to i8*
  ret i8* %castBA
}

define void @tcc_set_lib_path(%TCCState* %0, i8* %1) {
entry:
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %path = alloca i8*, align 8
  %path2 = alloca i8**, align 8
  store i8* %1, i8** %path, align 8
  store i8** %path, i8*** %path2, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %path4 = load i8*, i8** %path, align 8
  %fun_result = call i8* @tcc_strdup(i8* %path4)
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s3, i32 0, i32 44
  store i8* %fun_result, i8** %fieldTU, align 8
  ret void
}

define void @error(i8* %0, ...) {
entry:
  %ap = alloca [1 x %__builtin_va_list], align 8
  %s1 = alloca %TCCState*, align 8
  %fmt = alloca i8*, align 8
  %fmt1 = alloca i8**, align 8
  store i8* %0, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt1, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  store %TCCState* %tcc_state, %TCCState** %s1, align 8
  %gepOOOOO = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN = bitcast %__builtin_va_list* %gepOOOOO to i8*
  %fmt2 = load i8*, i8** %fmt, align 8
  call void @llvm.va_start(i8* %castAN)
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fmt4 = load i8*, i8** %fmt, align 8
  %gepOOOOO5 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  call void @error1(%TCCState* %s13, i32 0, i8* %fmt4, %__builtin_va_list* %gepOOOOO5)
  %gepOOOOO6 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN7 = bitcast %__builtin_va_list* %gepOOOOO6 to i8*
  call void @llvm.va_end(i8* %castAN7)
  %s18 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s18, i32 0, i32 47
  %error_set_jmp_enabled = load i32, i32* %fieldLLL, align 4
  %icmpA = icmp ne i32 %error_set_jmp_enabled, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %s19 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s19, i32 0, i32 48
  %fieldQUOCARD = getelementptr inbounds [1 x %__jmp_buf_tag], [1 x %__jmp_buf_tag]* %fieldRRRROOU, i32 0, i32 0
  call void @longjmp(%__jmp_buf_tag* %fieldQUOCARD, i32 1)
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  call void @exit(i32 1)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  ret void
}

define void @error_noabort(i8* %0, ...) {
entry:
  %ap = alloca [1 x %__builtin_va_list], align 8
  %s1 = alloca %TCCState*, align 8
  %fmt = alloca i8*, align 8
  %fmt1 = alloca i8**, align 8
  store i8* %0, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt1, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  store %TCCState* %tcc_state, %TCCState** %s1, align 8
  %gepOOOOO = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN = bitcast %__builtin_va_list* %gepOOOOO to i8*
  %fmt2 = load i8*, i8** %fmt, align 8
  call void @llvm.va_start(i8* %castAN)
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fmt4 = load i8*, i8** %fmt, align 8
  %gepOOOOO5 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  call void @error1(%TCCState* %s13, i32 0, i8* %fmt4, %__builtin_va_list* %gepOOOOO5)
  %gepOOOOO6 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN7 = bitcast %__builtin_va_list* %gepOOOOO6 to i8*
  call void @llvm.va_end(i8* %castAN7)
  ret void
}

define void @warning(i8* %0, ...) {
entry:
  %ap = alloca [1 x %__builtin_va_list], align 8
  %s1 = alloca %TCCState*, align 8
  %fmt = alloca i8*, align 8
  %fmt1 = alloca i8**, align 8
  store i8* %0, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt1, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  store %TCCState* %tcc_state, %TCCState** %s1, align 8
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s12, i32 0, i32 39
  %warn_none = load i32, i32* %fieldLLL, align 4
  %icmpA = icmp ne i32 %warn_none, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret void

cond_end:                                         ; preds = %entry
  %gepOOOOO = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN = bitcast %__builtin_va_list* %gepOOOOO to i8*
  %fmt3 = load i8*, i8** %fmt, align 8
  call void @llvm.va_start(i8* %castAN)
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fmt5 = load i8*, i8** %fmt, align 8
  %gepOOOOO6 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  call void @error1(%TCCState* %s14, i32 1, i8* %fmt5, %__builtin_va_list* %gepOOOOO6)
  %gepOOOOO7 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN8 = bitcast %__builtin_va_list* %gepOOOOO7 to i8*
  call void @llvm.va_end(i8* %castAN8)
  ret void
}

declare void @tcc_set_lib_path_w32(%TCCState*)

define i32 @tcc_set_flag(%TCCState* %0, i8* %1, i32 %2) {
entry:
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %flag_name = alloca i8*, align 8
  %flag_name2 = alloca i8**, align 8
  store i8* %1, i8** %flag_name, align 8
  store i8** %flag_name, i8*** %flag_name2, align 8
  %value = alloca i32, align 4
  %value3 = alloca i32*, align 8
  store i32 %2, i32* %value, align 4
  store i32* %value, i32** %value3, align 8
  %s4 = load %TCCState*, %TCCState** %s, align 8
  %elementXXX = load %FlagDef, %FlagDef* getelementptr inbounds ([4 x %FlagDef], [4 x %FlagDef]* @flag_defs, i32 0, i32 0), align 8
  %flag_name5 = load i8*, i8** %flag_name, align 8
  %value6 = load i32, i32* %value, align 4
  %fun_result = call i32 @set_flag(%TCCState* %s4, %FlagDef* getelementptr inbounds ([4 x %FlagDef], [4 x %FlagDef]* @flag_defs, i32 0, i32 0), i32 4, i8* %flag_name5, i32 %value6)
  ret i32 %fun_result
}

define void @tcc_print_stats(%TCCState* %0, i64 %1) {
entry:
  %tt = alloca double, align 8
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %total_time = alloca i64, align 8
  %total_time2 = alloca i64*, align 8
  store i64 %1, i64* %total_time, align 4
  store i64* %total_time, i64** %total_time2, align 8
  %total_time3 = load i64, i64* %total_time, align 4
  %icastKO = sitofp i64 %total_time3 to double
  %fdiv = fdiv double %icastKO, 1.000000e+06
  store double %fdiv, double* %tt, align 8
  %tt4 = load double, double* %tt, align 8
  %le = fcmp olt double %tt4, 1.000000e-03
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store double 1.000000e-03, double* %tt, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %total_bytes = load i32, i32* @total_bytes, align 4
  %le5 = icmp slt i32 %total_bytes, 1
  br i1 %le5, label %cond_jump_then6, label %cond_end7

cond_jump_then6:                                  ; preds = %cond_end
  store i32 1, i32* @total_bytes, align 4
  br label %cond_end7

cond_end7:                                        ; preds = %cond_jump_then6, %cond_end
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub = sub i32 %tok_ident, 256
  %total_lines = load i32, i32* @total_lines, align 4
  %total_bytes8 = load i32, i32* @total_bytes, align 4
  %tt9 = load double, double* %tt, align 8
  %total_lines10 = load i32, i32* @total_lines, align 4
  %tt11 = load double, double* %tt, align 8
  %icastKO12 = sitofp i32 %total_lines10 to double
  %fdiv13 = fdiv double %icastKO12, %tt11
  %icastKO14 = fptosi double %fdiv13 to i32
  %total_bytes15 = load i32, i32* @total_bytes, align 4
  %tt16 = load double, double* %tt, align 8
  %icastKO17 = sitofp i32 %total_bytes15 to double
  %fdiv18 = fdiv double %icastKO17, %tt16
  %fdiv19 = fdiv double %fdiv18, 1.000000e+06
  %fun_result = call i32 (i8*, ...) @printf(i8* bitcast ([64 x i8]* @359 to i8*), i32 %sub, i32 %total_lines, i32 %total_bytes8, double %tt9, i32 %icastKO14, double %fdiv19)
  ret void
}

define void @tcc_free(i8* %0) {
entry:
  %ptr = alloca i8*, align 8
  %ptr1 = alloca i8**, align 8
  store i8* %0, i8** %ptr, align 8
  store i8** %ptr, i8*** %ptr1, align 8
  %ptr2 = load i8*, i8** %ptr, align 8
  call void @free(i8* %ptr2)
  ret void
}

define i8* @tcc_malloc(i64 %0) {
entry:
  %andand = alloca i1, align 1
  %ptr = alloca i8*, align 8
  %size = alloca i64, align 8
  %size1 = alloca i64*, align 8
  store i64 %0, i64* %size, align 4
  store i64* %size, i64** %size1, align 8
  %size2 = load i64, i64* %size, align 4
  %fun_result = call i8* @malloc(i64 %size2)
  store i8* %fun_result, i8** %ptr, align 8
  %ptr3 = load i8*, i8** %ptr, align 8
  %logical_denial = icmp eq i8* %ptr3, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %size4 = load i64, i64* %size, align 4
  %icmpA5 = icmp ne i64 %size4, 0
  %andand6 = and i1 %icmpA, %icmpA5
  store i1 %andand6, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then7, label %cond_end

cond_jump_then7:                                  ; preds = %cond_jump_end
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @8 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then7, %cond_jump_end
  %ptr8 = load i8*, i8** %ptr, align 8
  ret i8* %ptr8
}

define i8* @tcc_mallocz(i64 %0) {
entry:
  %ptr = alloca i8*, align 8
  %size = alloca i64, align 8
  %size1 = alloca i64*, align 8
  store i64 %0, i64* %size, align 4
  store i64* %size, i64** %size1, align 8
  %size2 = load i64, i64* %size, align 4
  %fun_result = call i8* @tcc_malloc(i64 %size2)
  store i8* %fun_result, i8** %ptr, align 8
  %ptr3 = load i8*, i8** %ptr, align 8
  %size4 = load i64, i64* %size, align 4
  %fun_result5 = call i8* @memset(i8* %ptr3, i32 0, i64 %size4)
  %ptr6 = load i8*, i8** %ptr, align 8
  ret i8* %ptr6
}

define i8* @tcc_realloc(i8* %0, i64 %1) {
entry:
  %ptr13 = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %ptr1 = alloca i8**, align 8
  store i8* %0, i8** %ptr, align 8
  store i8** %ptr, i8*** %ptr1, align 8
  %size = alloca i64, align 8
  %size2 = alloca i64*, align 8
  store i64 %1, i64* %size, align 4
  store i64* %size, i64** %size2, align 8
  %ptr4 = load i8*, i8** %ptr, align 8
  %size5 = load i64, i64* %size, align 4
  %fun_result = call i8* @realloc(i8* %ptr4, i64 %size5)
  store i8* %fun_result, i8** %ptr13, align 8
  %ptr16 = load i8*, i8** %ptr13, align 8
  ret i8* %ptr16
}

define i8* @tcc_strdup(i8* %0) {
entry:
  %ptr = alloca i8*, align 8
  %str = alloca i8*, align 8
  %str1 = alloca i8**, align 8
  store i8* %0, i8** %str, align 8
  store i8** %str, i8*** %str1, align 8
  %str2 = load i8*, i8** %str, align 8
  %fun_result = call i64 @strlen(i8* %str2)
  %add = add i64 %fun_result, 1
  %fun_result3 = call i8* @tcc_malloc(i64 %add)
  store i8* %fun_result3, i8** %ptr, align 8
  %ptr4 = load i8*, i8** %ptr, align 8
  %str5 = load i8*, i8** %str, align 8
  %fun_result6 = call i8* @strcpy(i8* %ptr4, i8* %str5)
  %ptr7 = load i8*, i8** %ptr, align 8
  ret i8* %ptr7
}

define i8* @tcc_basename(i8* %0) {
entry:
  %andand = alloca i1, align 1
  %p = alloca i8*, align 8
  %name = alloca i8*, align 8
  %name1 = alloca i8**, align 8
  store i8* %0, i8** %name, align 8
  store i8** %name, i8*** %name1, align 8
  %name2 = load i8*, i8** %name, align 8
  %fun_result = call i8* @strchr(i8* %name2, i32 0)
  store i8* %fun_result, i8** %p, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %p3 = load i8*, i8** %p, align 8
  %name4 = load i8*, i8** %name, align 8
  %castAC = ptrtoint i8* %p3 to i32
  %castAC5 = ptrtoint i8* %name4 to i32
  %gt = icmp sgt i32 %castAC, %castAC5
  store i1 %gt, i1* %andand, align 1
  br i1 %gt, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %loop_top_block
  %p6 = load i8*, i8** %p, align 8
  %element_addressAB = load i8*, i8** %p, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 -1
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastL = sext i8 %load_element to i32
  %eq = icmp eq i32 %icastL, 47
  %logical_denial = icmp eq i1 %eq, false
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  %andand7 = and i1 %gt, %icmpA
  store i1 %andand7, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  %p8 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p8 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  store i8* %iintToPtrD, i8** %p, align 8
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end
  %p9 = load i8*, i8** %p, align 8
  ret i8* %p9
}

define i8* @tcc_fileextension(i8* %0) {
entry:
  %condtional_result_value = alloca i8*, align 8
  %e = alloca i8*, align 8
  %b = alloca i8*, align 8
  %name = alloca i8*, align 8
  %name1 = alloca i8**, align 8
  store i8* %0, i8** %name, align 8
  store i8** %name, i8*** %name1, align 8
  %name2 = load i8*, i8** %name, align 8
  %fun_result = call i8* @tcc_basename(i8* %name2)
  store i8* %fun_result, i8** %b, align 8
  %b3 = load i8*, i8** %b, align 8
  %fun_result4 = call i8* @strrchr(i8* %b3, i32 46)
  store i8* %fun_result4, i8** %e, align 8
  %e5 = load i8*, i8** %e, align 8
  %icmpB = icmp ne i8* %e5, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %e6 = load i8*, i8** %e, align 8
  store i8* %e6, i8** %condtional_result_value, align 8
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %b7 = load i8*, i8** %b, align 8
  %fun_result8 = call i8* @strchr(i8* %b7, i32 0)
  store i8* %fun_result8, i8** %condtional_result_value, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %conditional_result_value = load i8*, i8** %condtional_result_value, align 8
  ret i8* %conditional_result_value
}

define i8* @pstrcpy(i8* %0, i32 %1, i8* %2) {
entry:
  %c = alloca i32, align 4
  %q_end = alloca i8*, align 8
  %q = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %buf1 = alloca i8**, align 8
  store i8* %0, i8** %buf, align 8
  store i8** %buf, i8*** %buf1, align 8
  %buf_size = alloca i32, align 4
  %buf_size2 = alloca i32*, align 8
  store i32 %1, i32* %buf_size, align 4
  store i32* %buf_size, i32** %buf_size2, align 8
  %s = alloca i8*, align 8
  %s3 = alloca i8**, align 8
  store i8* %2, i8** %s, align 8
  store i8** %s, i8*** %s3, align 8
  %buf_size4 = load i32, i32* %buf_size, align 4
  %gt = icmp sgt i32 %buf_size4, 0
  br i1 %gt, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %buf5 = load i8*, i8** %buf, align 8
  store i8* %buf5, i8** %q, align 8
  %buf6 = load i8*, i8** %buf, align 8
  %buf_size7 = load i32, i32* %buf_size, align 4
  %ptrToIntC = ptrtoint i8* %buf6 to i64
  %sext = sext i32 %buf_size7 to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %ptrToIntI = ptrtoint i8* %intToPtrB to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  store i8* %iintToPtrD, i8** %q_end, align 8
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end_block, %entry
  %buf32 = load i8*, i8** %buf, align 8
  ret i8* %buf32

loop_top_block:                                   ; preds = %cond_end21, %cond_jump_then
  %q8 = load i8*, i8** %q, align 8
  %q_end9 = load i8*, i8** %q_end, align 8
  %castAC = ptrtoint i8* %q8 to i32
  %castAC10 = ptrtoint i8* %q_end9 to i32
  %le = icmp slt i32 %castAC, %castAC10
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s11 = load i8*, i8** %s, align 8
  %ptrToIntC12 = ptrtoint i8* %s11 to i64
  %add13 = add i64 %ptrToIntC12, 1
  %intToPtrB14 = inttoptr i64 %add13 to i8*
  store i8* %intToPtrB14, i8** %s, align 8
  %s15 = load i8*, i8** %s, align 8
  %ptrToIntI16 = ptrtoint i8* %s15 to i64
  %sub17 = sub i64 %ptrToIntI16, 1
  %iintToPtrD18 = inttoptr i64 %sub17 to i8*
  %derefference_valueB = load i8, i8* %iintToPtrD18, align 1
  %icastL = sext i8 %derefference_valueB to i32
  store i32 %icastL, i32* %c, align 4
  %c19 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c19, 0
  br i1 %eq, label %cond_jump_then20, label %cond_end21

cond_end_block:                                   ; preds = %cond_jump_then20, %loop_top_block
  %q31 = load i8*, i8** %q, align 8
  store i8 0, i8* %q31, align 1
  br label %cond_end

cond_jump_then20:                                 ; preds = %cond_then_block
  br label %cond_end_block

cond_end21:                                       ; preds = %after_break, %cond_then_block
  %q22 = load i8*, i8** %q, align 8
  %ptrToIntC23 = ptrtoint i8* %q22 to i64
  %add24 = add i64 %ptrToIntC23, 1
  %intToPtrB25 = inttoptr i64 %add24 to i8*
  store i8* %intToPtrB25, i8** %q, align 8
  %q26 = load i8*, i8** %q, align 8
  %ptrToIntI27 = ptrtoint i8* %q26 to i64
  %sub28 = sub i64 %ptrToIntI27, 1
  %iintToPtrD29 = inttoptr i64 %sub28 to i8*
  %c30 = load i32, i32* %c, align 4
  %icastJ = trunc i32 %c30 to i8
  store i8 %icastJ, i8* %iintToPtrD29, align 1
  br label %loop_top_block

after_break:                                      ; No predecessors!
  br label %cond_end21
}

define i8* @pstrcat(i8* %0, i32 %1, i8* %2) {
entry:
  %len = alloca i32, align 4
  %buf = alloca i8*, align 8
  %buf1 = alloca i8**, align 8
  store i8* %0, i8** %buf, align 8
  store i8** %buf, i8*** %buf1, align 8
  %buf_size = alloca i32, align 4
  %buf_size2 = alloca i32*, align 8
  store i32 %1, i32* %buf_size, align 4
  store i32* %buf_size, i32** %buf_size2, align 8
  %s = alloca i8*, align 8
  %s3 = alloca i8**, align 8
  store i8* %2, i8** %s, align 8
  store i8** %s, i8*** %s3, align 8
  %buf4 = load i8*, i8** %buf, align 8
  %fun_result = call i64 @strlen(i8* %buf4)
  %icastM = trunc i64 %fun_result to i32
  store i32 %icastM, i32* %len, align 4
  %len5 = load i32, i32* %len, align 4
  %buf_size6 = load i32, i32* %buf_size, align 4
  %le = icmp slt i32 %len5, %buf_size6
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %buf7 = load i8*, i8** %buf, align 8
  %len8 = load i32, i32* %len, align 4
  %ptrToIntC = ptrtoint i8* %buf7 to i64
  %sext = sext i32 %len8 to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %buf_size9 = load i32, i32* %buf_size, align 4
  %len10 = load i32, i32* %len, align 4
  %sub = sub i32 %buf_size9, %len10
  %s11 = load i8*, i8** %s, align 8
  %fun_result12 = call i8* @pstrcpy(i8* %intToPtrB, i32 %sub, i8* %s11)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %buf13 = load i8*, i8** %buf, align 8
  ret i8* %buf13
}

define void @dynarray_add(i8*** %0, i32* %1, i8* %2) {
entry:
  %pp = alloca i8**, align 8
  %nb_alloc = alloca i32, align 4
  %nb = alloca i32, align 4
  %ptab = alloca i8***, align 8
  %ptab1 = alloca i8****, align 8
  store i8*** %0, i8**** %ptab, align 8
  store i8**** %ptab, i8***** %ptab1, align 8
  %nb_ptr = alloca i32*, align 8
  %nb_ptr2 = alloca i32**, align 8
  store i32* %1, i32** %nb_ptr, align 8
  store i32** %nb_ptr, i32*** %nb_ptr2, align 8
  %data = alloca i8*, align 8
  %data3 = alloca i8**, align 8
  store i8* %2, i8** %data, align 8
  store i8** %data, i8*** %data3, align 8
  %nb_ptr4 = load i32*, i32** %nb_ptr, align 8
  %derefference_valueB = load i32, i32* %nb_ptr4, align 4
  store i32 %derefference_valueB, i32* %nb, align 4
  %ptab5 = load i8***, i8**** %ptab, align 8
  %derefference_valueB6 = load i8**, i8*** %ptab5, align 8
  store i8** %derefference_valueB6, i8*** %pp, align 8
  %nb7 = load i32, i32* %nb, align 4
  %nb8 = load i32, i32* %nb, align 4
  %sub = sub i32 %nb8, 1
  %andtmp = and i32 %nb7, %sub
  %eq = icmp eq i32 %andtmp, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %nb9 = load i32, i32* %nb, align 4
  %logical_denial = icmp eq i32 %nb9, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then10, label %cond_else_block

cond_end:                                         ; preds = %cond_end22, %entry
  %pp25 = load i8**, i8*** %pp, align 8
  %nb26 = load i32, i32* %nb, align 4
  %add = add i32 %nb26, 1
  store i32 %add, i32* %nb, align 4
  %nb27 = load i32, i32* %nb, align 4
  %sub28 = sub i32 %nb27, 1
  %data29 = load i8*, i8** %data, align 8
  %element_addressXYXY = getelementptr i8*, i8** %pp25, i32 %sub28
  store i8* %data29, i8** %element_addressXYXY, align 8
  %nb_ptr30 = load i32*, i32** %nb_ptr, align 8
  %nb31 = load i32, i32* %nb, align 4
  store i32 %nb31, i32* %nb_ptr30, align 4
  ret void

cond_jump_then10:                                 ; preds = %cond_jump_then
  store i32 1, i32* %nb_alloc, align 4
  br label %cond_end11

cond_else_block:                                  ; preds = %cond_jump_then
  %nb12 = load i32, i32* %nb, align 4
  %mul = mul i32 %nb12, 2
  store i32 %mul, i32* %nb_alloc, align 4
  br label %cond_end11

cond_end11:                                       ; preds = %cond_else_block, %cond_jump_then10
  %pp13 = load i8**, i8*** %pp, align 8
  %castAQ = bitcast i8** %pp13 to i8*
  %nb_alloc14 = load i32, i32* %nb_alloc, align 4
  %icastD = sext i32 %nb_alloc14 to i64
  %mul15 = mul i64 %icastD, 8
  %fun_result = call i8* @tcc_realloc(i8* %castAQ, i64 %mul15)
  %castAQ16 = bitcast i8* %fun_result to i8**
  store i8** %castAQ16, i8*** %pp, align 8
  %pp17 = load i8**, i8*** %pp, align 8
  %logical_denial18 = icmp eq i8** %pp17, null
  %castOOOO19 = zext i1 %logical_denial18 to i32
  %icmpA20 = icmp ne i32 %castOOOO19, 0
  br i1 %icmpA20, label %cond_jump_then21, label %cond_end22

cond_jump_then21:                                 ; preds = %cond_end11
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @9 to i8*))
  br label %cond_end22

cond_end22:                                       ; preds = %cond_jump_then21, %cond_end11
  %ptab23 = load i8***, i8**** %ptab, align 8
  %pp24 = load i8**, i8*** %pp, align 8
  store i8** %pp24, i8*** %ptab23, align 8
  br label %cond_end
}

define void @dynarray_reset(i8* %0, i32* %1) {
entry:
  %p = alloca i8**, align 8
  %pp = alloca i8*, align 8
  %pp1 = alloca i8**, align 8
  store i8* %0, i8** %pp, align 8
  store i8** %pp, i8*** %pp1, align 8
  %n = alloca i32*, align 8
  %n2 = alloca i32**, align 8
  store i32* %1, i32** %n, align 8
  store i32** %n, i32*** %n2, align 8
  %pp3 = load i8*, i8** %pp, align 8
  %pointer_cast = bitcast i8* %pp3 to i8***
  %derefference_valueA = load i8**, i8*** %pointer_cast, align 8
  store i8** %derefference_valueA, i8*** %p, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %p9 = load i8**, i8*** %p, align 8
  %ptrToIntC = ptrtoint i8** %p9 to i64
  %add = add i64 %ptrToIntC, 8
  %intToPtrB = inttoptr i64 %add to i8**
  store i8** %intToPtrB, i8*** %p, align 8
  %n10 = load i32*, i32** %n, align 8
  %n11 = load i32*, i32** %n, align 8
  %derefference_valueB12 = load i32, i32* %n11, align 4
  %sub = sub i32 %derefference_valueB12, 1
  store i32 %sub, i32* %n10, align 4
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %n4 = load i32*, i32** %n, align 8
  %derefference_valueB = load i32, i32* %n4, align 4
  %icmpA = icmp ne i32 %derefference_valueB, 0
  br i1 %icmpA, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p5 = load i8**, i8*** %p, align 8
  %derefference_valueB6 = load i8*, i8** %p5, align 8
  %icmpB = icmp ne i8* %derefference_valueB6, null
  br i1 %icmpB, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %pp13 = load i8*, i8** %pp, align 8
  %pointer_cast14 = bitcast i8* %pp13 to i8**
  %derefference_valueA15 = load i8*, i8** %pointer_cast14, align 8
  call void @tcc_free(i8* %derefference_valueA15)
  %pp16 = load i8*, i8** %pp, align 8
  %castAQ = bitcast i8* %pp16 to i8**
  store i8* null, i8** %castAQ, align 8
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %p7 = load i8**, i8*** %p, align 8
  %derefference_valueB8 = load i8*, i8** %p7, align 8
  call void @tcc_free(i8* %derefference_valueB8)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block
  br label %loop_continue_top_block
}

define internal void @next() {
entry:
  %andand52 = alloca i1, align 1
  %andand = alloca i1, align 1
  %ml = alloca %macro_level*, align 8
  %str = alloca %TokenString, align 8
  %castXXXX = bitcast %TokenString* %str to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %s = alloca %Sym*, align 8
  %nested_list = alloca %Sym*, align 8
  br label %next.redo

next.redo:                                        ; preds = %cond_end51, %cond_jump_then36, %entry
  %parse_flags = load i32, i32* @parse_flags, align 4
  %andtmp = and i32 %parse_flags, 16
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %next.redo
  call void @next_nomacro_spc()
  br label %cond_end

cond_else_block:                                  ; preds = %next.redo
  call void @next_nomacro()
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %macro_ptr = load i32*, i32** @macro_ptr, align 8
  %logical_denial = icmp eq i32* %macro_ptr, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA1 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA1, label %cond_jump_then2, label %cond_else_block3

cond_jump_then2:                                  ; preds = %cond_end
  %tok = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok, 256
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then5, label %cond_jump_end

cond_else_block3:                                 ; preds = %cond_end
  %tok44 = load i32, i32* @tok, align 4
  %eq45 = icmp eq i32 %tok44, 0
  br i1 %eq45, label %cond_jump_then46, label %cond_end47

cond_end4:                                        ; preds = %cond_end47, %cond_end11
  %tok53 = load i32, i32* @tok, align 4
  %eq54 = icmp eq i32 %tok53, 206
  store i1 %eq54, i1* %andand52, align 1
  br i1 %eq54, label %cond_jump_then55, label %cond_jump_end56

cond_jump_then5:                                  ; preds = %cond_jump_then2
  %parse_flags6 = load i32, i32* @parse_flags, align 4
  %andtmp7 = and i32 %parse_flags6, 1
  %icmpA8 = icmp ne i32 %andtmp7, 0
  %andand9 = and i1 %gteq_signed, %icmpA8
  store i1 %andand9, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then5, %cond_jump_then2
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then10, label %cond_end11

cond_jump_then10:                                 ; preds = %cond_jump_end
  %tok12 = load i32, i32* @tok, align 4
  store i32 2798, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.94, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find

cond_end11:                                       ; preds = %cond_end22, %cond_jump_end
  br label %cond_end4

define_find:                                      ; preds = %cond_jump_then10
  %inline_result_variable = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %tok12, i32* %v, align 4
  %v13 = load i32, i32* %v, align 4
  %sub = sub i32 %v13, 256
  store i32 %sub, i32* %v, align 4
  %add = add i32 %sub, 256
  %v14 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub15 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v14, %sub15
  br i1 %gteq_unsinged, label %cond_jump_then16, label %cond_end17

define_find_end:                                  ; preds = %cond_end17, %cond_jump_then16
  %inline_result_variable19 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable19, %Sym** %s, align 8
  %s20 = load %Sym*, %Sym** %s, align 8
  %icmpB = icmp ne %Sym* %s20, null
  br i1 %icmpB, label %cond_jump_then21, label %cond_end22

cond_jump_then16:                                 ; preds = %define_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_end17:                                       ; preds = %define_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v18 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v18
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  %sym_define = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_define, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_jump_then21:                                 ; preds = %define_find_end
  %str23 = load %TokenString, %TokenString* %str, align 8
  store i32 2801, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.95, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

cond_end22:                                       ; preds = %cond_end37, %define_find_end
  br label %cond_end11

tok_str_new:                                      ; preds = %cond_jump_then21
  %s24 = alloca %TokenString*, align 8
  store %TokenString* %str, %TokenString** %s24, align 8
  %s25 = load %TokenString*, %TokenString** %s24, align 8
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s25, i32 0, i32 0
  store i32* null, i32** %fieldTU, align 8
  %s26 = load %TokenString*, %TokenString** %s24, align 8
  %fieldTU27 = getelementptr inbounds %TokenString, %TokenString* %s26, i32 0, i32 1
  store i32 0, i32* %fieldTU27, align 4
  %s28 = load %TokenString*, %TokenString** %s24, align 8
  %fieldTU29 = getelementptr inbounds %TokenString, %TokenString* %s28, i32 0, i32 2
  store i32 0, i32* %fieldTU29, align 4
  %s30 = load %TokenString*, %TokenString** %s24, align 8
  %fieldTU31 = getelementptr inbounds %TokenString, %TokenString* %s30, i32 0, i32 3
  store i32 -1, i32* %fieldTU31, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  store %Sym* null, %Sym** %nested_list, align 8
  store %macro_level* null, %macro_level** %ml, align 8
  %str32 = load %TokenString, %TokenString* %str, align 8
  %nested_list33 = load %Sym*, %Sym** %nested_list, align 8
  %s34 = load %Sym*, %Sym** %s, align 8
  %ml35 = load %macro_level*, %macro_level** %ml, align 8
  %fun_result = call i32 @macro_subst_tok(%TokenString* %str, %Sym** %nested_list, %Sym* %s34, %macro_level** %ml)
  %eq = icmp eq i32 %fun_result, 0
  br i1 %eq, label %cond_jump_then36, label %cond_end37

cond_jump_then36:                                 ; preds = %tok_str_new_end
  %str38 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add(%TokenString* %str, i32 0)
  %str39 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str40 = load i32*, i32** %fieldVVV, align 8
  store i32* %str40, i32** @macro_ptr, align 8
  %str41 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV42 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str43 = load i32*, i32** %fieldVVV42, align 8
  store i32* %str43, i32** @macro_ptr_allocated, align 8
  br label %next.redo
  br label %cond_end37

cond_end37:                                       ; preds = %cond_jump_then36, %tok_str_new_end
  br label %cond_end22

cond_jump_then46:                                 ; preds = %cond_else_block3
  %unget_buffer_enabled = load i32, i32* @unget_buffer_enabled, align 4
  %icmpA48 = icmp ne i32 %unget_buffer_enabled, 0
  br i1 %icmpA48, label %cond_jump_then49, label %cond_else_block50

cond_end47:                                       ; preds = %cond_end51, %cond_else_block3
  br label %cond_end4

cond_jump_then49:                                 ; preds = %cond_jump_then46
  %unget_saved_macro_ptr = load i32*, i32** @unget_saved_macro_ptr, align 8
  store i32* %unget_saved_macro_ptr, i32** @macro_ptr, align 8
  store i32 0, i32* @unget_buffer_enabled, align 4
  br label %cond_end51

cond_else_block50:                                ; preds = %cond_jump_then46
  %macro_ptr_allocated = load i32*, i32** @macro_ptr_allocated, align 8
  call void @tok_str_free(i32* %macro_ptr_allocated)
  store i32* null, i32** @macro_ptr, align 8
  br label %cond_end51

cond_end51:                                       ; preds = %cond_else_block50, %cond_jump_then49
  br label %next.redo
  br label %cond_end47

cond_jump_then55:                                 ; preds = %cond_end4
  %parse_flags57 = load i32, i32* @parse_flags, align 4
  %andtmp58 = and i32 %parse_flags57, 2
  %icmpA59 = icmp ne i32 %andtmp58, 0
  %andand60 = and i1 %eq54, %icmpA59
  store i1 %andand60, i1* %andand52, align 1
  br label %cond_jump_end56

cond_jump_end56:                                  ; preds = %cond_jump_then55, %cond_end4
  %andand_result_value61 = load i1, i1* %andand52, align 1
  br i1 %andand_result_value61, label %cond_jump_then62, label %cond_end63

cond_jump_then62:                                 ; preds = %cond_jump_end56
  %tokc = load %CValue, %CValue* @tokc, align 16
  %cstr = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %fieldLLL64 = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL64, align 8
  call void @parse_number(i8* %data)
  br label %cond_end63

cond_end63:                                       ; preds = %cond_jump_then62, %cond_jump_end56
  ret void
}

define i8* @get_tok_str(i32 %0, %CValue* %1) {
entry:
  %size345 = alloca i32, align 4
  %size315 = alloca i32, align 4
  %size235 = alloca i32, align 4
  %size199 = alloca i32, align 4
  %size165 = alloca i32, align 4
  %size112 = alloca i32, align 4
  %size82 = alloca i32, align 4
  %size48 = alloca i32, align 4
  %size = alloca i32, align 4
  %len = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %q = alloca i8*, align 8
  %cstr = alloca %CString*, align 8
  %cstr_buf = alloca %CString, align 8
  %castXXXX = bitcast %CString* %cstr_buf to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 32)
  %buf = alloca [1025 x i8], align 1
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %cv = alloca %CValue*, align 8
  %cv2 = alloca %CValue**, align 8
  store %CValue* %1, %CValue** %cv, align 8
  store %CValue** %cv, %CValue*** %cv2, align 8
  %cstr_buf3 = load %CString, %CString* %cstr_buf, align 8
  call void @cstr_free(%CString* %cstr_buf)
  %cstr_buf4 = load %CString, %CString* %cstr_buf, align 8
  %castBA = bitcast [1025 x i8]* %buf to i8*
  %fieldTTT = getelementptr inbounds %CString, %CString* %cstr_buf, i32 0, i32 1
  store i8* %castBA, i8** %fieldTTT, align 8
  %cstr_buf5 = load %CString, %CString* %cstr_buf, align 8
  %fieldTTT6 = getelementptr inbounds %CString, %CString* %cstr_buf, i32 0, i32 2
  store i32 1025, i32* %fieldTTT6, align 4
  %autocast = bitcast [1025 x i8]* %buf to i8*
  store i8* %autocast, i8** %p, align 8
  %v7 = load i32, i32* %v, align 4
  %eqtmp = icmp eq i32 %v7, 179
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX8

end_blockX:                                       ; preds = %cond_else_blockX393, %cond_end398, %cstr_ccat_end344, %cstr_ccat_end164, %cstr_ccat_end111, %cond_then_block12, %cond_then_block
  %cstr_buf466 = load %CString, %CString* %cstr_buf, align 8
  %fieldVVV = getelementptr inbounds %CString, %CString* %cstr_buf, i32 0, i32 1
  %data467 = load i8*, i8** %fieldVVV, align 8
  ret i8* %data467

cond_then_block:                                  ; preds = %cond_else_blockX, %entry
  %p10 = load i8*, i8** %p, align 8
  %cv11 = load %CValue*, %CValue** %cv, align 8
  %ICASTO = bitcast %CValue* %cv11 to i32*
  %ui = load i32, i32* %ICASTO, align 4
  %fun_result = call i32 (i8*, i8*, ...) @sprintf(i8* %p10, i8* bitcast ([3 x i8]* @29 to i8*), i32 %ui)
  br label %end_blockX

cond_else_blockX:                                 ; preds = %entry
  %eqtmp9 = icmp eq i32 %v7, 200
  br i1 %eqtmp9, label %cond_then_block, label %cond_else_blockX8

cond_else_blockX8:                                ; preds = %after_break, %cond_else_blockX, %entry
  %eqtmp14 = icmp eq i32 %v7, 201
  br i1 %eqtmp14, label %cond_then_block12, label %cond_else_blockX13
  br label %cond_else_blockX15

after_break:                                      ; No predecessors!
  br label %cond_else_blockX8
  br label %cond_else_blockX13

cond_then_block12:                                ; preds = %cond_else_blockX13, %cond_else_blockX8
  %p17 = load i8*, i8** %p, align 8
  %cv18 = load %CValue*, %CValue** %cv, align 8
  %ICASTO19 = bitcast %CValue* %cv18 to i64*
  %ull = load i64, i64* %ICASTO19, align 4
  %fun_result20 = call i32 (i8*, i8*, ...) @sprintf(i8* %p17, i8* bitcast ([4 x i8]* @30 to i8*), i64 %ull)
  br label %end_blockX

cond_else_blockX13:                               ; preds = %cond_else_blockX8, %after_break
  %eqtmp16 = icmp eq i32 %v7, 202
  br i1 %eqtmp16, label %cond_then_block12, label %cond_else_blockX15

cond_else_blockX15:                               ; preds = %after_break21, %cond_else_blockX13, %cond_else_blockX8
  %eqtmp24 = icmp eq i32 %v7, 183
  br i1 %eqtmp24, label %cond_then_block22, label %cond_else_blockX23

after_break21:                                    ; No predecessors!
  br label %cond_else_blockX15
  br label %cond_else_blockX23

cond_then_block22:                                ; preds = %cond_else_blockX15
  %cstr_buf25 = load %CString, %CString* %cstr_buf, align 8
  store i32 136, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

cond_else_blockX23:                               ; preds = %cond_else_blockX15, %after_break21
  %eqtmp42 = icmp eq i32 %v7, 180
  br i1 %eqtmp42, label %cond_then_block40, label %cond_else_blockX41

cstr_ccat:                                        ; preds = %cond_then_block22
  %cstr26 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr26, align 8
  %ch = alloca i32, align 4
  store i32 76, i32* %ch, align 4
  %cstr27 = load %CString*, %CString** %cstr26, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr27, i32 0, i32 0
  %size28 = load i32, i32* %fieldLLL, align 4
  %add = add i32 %size28, 1
  store i32 %add, i32* %size, align 4
  %size29 = load i32, i32* %size, align 4
  %cstr30 = load %CString*, %CString** %cstr26, align 8
  %fieldLLL31 = getelementptr inbounds %CString, %CString* %cstr30, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL31, align 4
  %gt = icmp sgt i32 %size29, %size_allocated
  br i1 %gt, label %cond_jump_then, label %cond_end

cstr_ccat_end:                                    ; preds = %cond_end
  br label %cond_then_block40

cond_jump_then:                                   ; preds = %cstr_ccat
  %cstr32 = load %CString*, %CString** %cstr26, align 8
  %size33 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr32, i32 %size33)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cstr_ccat
  %cstr34 = load %CString*, %CString** %cstr26, align 8
  %fieldLLL35 = getelementptr inbounds %CString, %CString* %cstr34, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL35, align 8
  %size36 = load i32, i32* %size, align 4
  %sub = sub i32 %size36, 1
  %ch37 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch37 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr38 = load %CString*, %CString** %cstr26, align 8
  %size39 = load i32, i32* %size, align 4
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr38, i32 0, i32 0
  store i32 %size39, i32* %fieldTU, align 4
  br label %cstr_ccat_end

cond_then_block40:                                ; preds = %cond_else_blockX23, %cstr_ccat_end
  %cstr_buf43 = load %CString, %CString* %cstr_buf, align 8
  store i32 138, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.15, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat44

cond_else_blockX41:                               ; preds = %after_break137, %cond_else_blockX23
  %eqtmp140 = icmp eq i32 %v7, 206
  br i1 %eqtmp140, label %cond_then_block138, label %cond_else_blockX139

cstr_ccat44:                                      ; preds = %cond_then_block40
  %cstr45 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr45, align 8
  %ch46 = alloca i32, align 4
  store i32 39, i32* %ch46, align 4
  %cstr49 = load %CString*, %CString** %cstr45, align 8
  %fieldLLL50 = getelementptr inbounds %CString, %CString* %cstr49, i32 0, i32 0
  %size51 = load i32, i32* %fieldLLL50, align 4
  %add52 = add i32 %size51, 1
  store i32 %add52, i32* %size48, align 4
  %size53 = load i32, i32* %size48, align 4
  %cstr54 = load %CString*, %CString** %cstr45, align 8
  %fieldLLL55 = getelementptr inbounds %CString, %CString* %cstr54, i32 0, i32 2
  %size_allocated56 = load i32, i32* %fieldLLL55, align 4
  %gt57 = icmp sgt i32 %size53, %size_allocated56
  br i1 %gt57, label %cond_jump_then58, label %cond_end59

cstr_ccat_end47:                                  ; preds = %cond_end59
  %cstr_buf73 = load %CString, %CString* %cstr_buf, align 8
  %cv74 = load %CValue*, %CValue** %cv, align 8
  %ICASTO75 = bitcast %CValue* %cv74 to i32*
  %i76 = load i32, i32* %ICASTO75, align 4
  call void @add_char(%CString* %cstr_buf, i32 %i76)
  %cstr_buf77 = load %CString, %CString* %cstr_buf, align 8
  store i32 140, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.16, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat78

cond_jump_then58:                                 ; preds = %cstr_ccat44
  %cstr60 = load %CString*, %CString** %cstr45, align 8
  %size61 = load i32, i32* %size48, align 4
  call void @cstr_realloc(%CString* %cstr60, i32 %size61)
  br label %cond_end59

cond_end59:                                       ; preds = %cond_jump_then58, %cstr_ccat44
  %cstr62 = load %CString*, %CString** %cstr45, align 8
  %fieldLLL63 = getelementptr inbounds %CString, %CString* %cstr62, i32 0, i32 1
  %data64 = load i8*, i8** %fieldLLL63, align 8
  %size65 = load i32, i32* %size48, align 4
  %sub66 = sub i32 %size65, 1
  %ch67 = load i32, i32* %ch46, align 4
  %icastJ68 = trunc i32 %ch67 to i8
  %element_addressXYXY69 = getelementptr i8, i8* %data64, i32 %sub66
  store i8 %icastJ68, i8* %element_addressXYXY69, align 1
  %cstr70 = load %CString*, %CString** %cstr45, align 8
  %size71 = load i32, i32* %size48, align 4
  %fieldTU72 = getelementptr inbounds %CString, %CString* %cstr70, i32 0, i32 0
  store i32 %size71, i32* %fieldTU72, align 4
  br label %cstr_ccat_end47

cstr_ccat78:                                      ; preds = %cstr_ccat_end47
  %cstr79 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr79, align 8
  %ch80 = alloca i32, align 4
  store i32 39, i32* %ch80, align 4
  %cstr83 = load %CString*, %CString** %cstr79, align 8
  %fieldLLL84 = getelementptr inbounds %CString, %CString* %cstr83, i32 0, i32 0
  %size85 = load i32, i32* %fieldLLL84, align 4
  %add86 = add i32 %size85, 1
  store i32 %add86, i32* %size82, align 4
  %size87 = load i32, i32* %size82, align 4
  %cstr88 = load %CString*, %CString** %cstr79, align 8
  %fieldLLL89 = getelementptr inbounds %CString, %CString* %cstr88, i32 0, i32 2
  %size_allocated90 = load i32, i32* %fieldLLL89, align 4
  %gt91 = icmp sgt i32 %size87, %size_allocated90
  br i1 %gt91, label %cond_jump_then92, label %cond_end93

cstr_ccat_end81:                                  ; preds = %cond_end93
  %cstr_buf107 = load %CString, %CString* %cstr_buf, align 8
  store i32 141, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.17, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat108

cond_jump_then92:                                 ; preds = %cstr_ccat78
  %cstr94 = load %CString*, %CString** %cstr79, align 8
  %size95 = load i32, i32* %size82, align 4
  call void @cstr_realloc(%CString* %cstr94, i32 %size95)
  br label %cond_end93

cond_end93:                                       ; preds = %cond_jump_then92, %cstr_ccat78
  %cstr96 = load %CString*, %CString** %cstr79, align 8
  %fieldLLL97 = getelementptr inbounds %CString, %CString* %cstr96, i32 0, i32 1
  %data98 = load i8*, i8** %fieldLLL97, align 8
  %size99 = load i32, i32* %size82, align 4
  %sub100 = sub i32 %size99, 1
  %ch101 = load i32, i32* %ch80, align 4
  %icastJ102 = trunc i32 %ch101 to i8
  %element_addressXYXY103 = getelementptr i8, i8* %data98, i32 %sub100
  store i8 %icastJ102, i8* %element_addressXYXY103, align 1
  %cstr104 = load %CString*, %CString** %cstr79, align 8
  %size105 = load i32, i32* %size82, align 4
  %fieldTU106 = getelementptr inbounds %CString, %CString* %cstr104, i32 0, i32 0
  store i32 %size105, i32* %fieldTU106, align 4
  br label %cstr_ccat_end81

cstr_ccat108:                                     ; preds = %cstr_ccat_end81
  %cstr109 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr109, align 8
  %ch110 = alloca i32, align 4
  store i32 0, i32* %ch110, align 4
  %cstr113 = load %CString*, %CString** %cstr109, align 8
  %fieldLLL114 = getelementptr inbounds %CString, %CString* %cstr113, i32 0, i32 0
  %size115 = load i32, i32* %fieldLLL114, align 4
  %add116 = add i32 %size115, 1
  store i32 %add116, i32* %size112, align 4
  %size117 = load i32, i32* %size112, align 4
  %cstr118 = load %CString*, %CString** %cstr109, align 8
  %fieldLLL119 = getelementptr inbounds %CString, %CString* %cstr118, i32 0, i32 2
  %size_allocated120 = load i32, i32* %fieldLLL119, align 4
  %gt121 = icmp sgt i32 %size117, %size_allocated120
  br i1 %gt121, label %cond_jump_then122, label %cond_end123

cstr_ccat_end111:                                 ; preds = %cond_end123
  br label %end_blockX

cond_jump_then122:                                ; preds = %cstr_ccat108
  %cstr124 = load %CString*, %CString** %cstr109, align 8
  %size125 = load i32, i32* %size112, align 4
  call void @cstr_realloc(%CString* %cstr124, i32 %size125)
  br label %cond_end123

cond_end123:                                      ; preds = %cond_jump_then122, %cstr_ccat108
  %cstr126 = load %CString*, %CString** %cstr109, align 8
  %fieldLLL127 = getelementptr inbounds %CString, %CString* %cstr126, i32 0, i32 1
  %data128 = load i8*, i8** %fieldLLL127, align 8
  %size129 = load i32, i32* %size112, align 4
  %sub130 = sub i32 %size129, 1
  %ch131 = load i32, i32* %ch110, align 4
  %icastJ132 = trunc i32 %ch131 to i8
  %element_addressXYXY133 = getelementptr i8, i8* %data128, i32 %sub130
  store i8 %icastJ132, i8* %element_addressXYXY133, align 1
  %cstr134 = load %CString*, %CString** %cstr109, align 8
  %size135 = load i32, i32* %size112, align 4
  %fieldTU136 = getelementptr inbounds %CString, %CString* %cstr134, i32 0, i32 0
  store i32 %size135, i32* %fieldTU136, align 4
  br label %cstr_ccat_end111

after_break137:                                   ; No predecessors!
  br label %cond_else_blockX41
  br label %cond_else_blockX139

cond_then_block138:                               ; preds = %cond_else_blockX41
  %cv141 = load %CValue*, %CValue** %cv, align 8
  %ICASTO142 = bitcast %CValue* %cv141 to %CString**
  %cstr143 = load %CString*, %CString** %ICASTO142, align 8
  store %CString* %cstr143, %CString** %cstr, align 8
  %cstr144 = load %CString*, %CString** %cstr, align 8
  %fieldLLL145 = getelementptr inbounds %CString, %CString* %cstr144, i32 0, i32 0
  %size146 = load i32, i32* %fieldLLL145, align 4
  %sub147 = sub i32 %size146, 1
  store i32 %sub147, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block

cond_else_blockX139:                              ; preds = %after_break190, %cond_else_blockX41, %after_break137
  %eqtmp193 = icmp eq i32 %v7, 184
  br i1 %eqtmp193, label %cond_then_block191, label %cond_else_blockX192

loop_continue_top_block:                          ; preds = %cond_then_block150
  %i156 = load i32, i32* %i, align 4
  %add157 = add i32 %i156, 1
  store i32 %add157, i32* %i, align 4
  %i158 = load i32, i32* %i, align 4
  %sub159 = sub i32 %i158, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_then_block138
  %i148 = load i32, i32* %i, align 4
  %len149 = load i32, i32* %len, align 4
  %le = icmp slt i32 %i148, %len149
  br i1 %le, label %cond_then_block150, label %cond_end_block

cond_then_block150:                               ; preds = %loop_top_block
  %cstr_buf151 = load %CString, %CString* %cstr_buf, align 8
  %cstr152 = load %CString*, %CString** %cstr, align 8
  %fieldLLL153 = getelementptr inbounds %CString, %CString* %cstr152, i32 0, i32 1
  %data154 = load i8*, i8** %fieldLLL153, align 8
  %i155 = load i32, i32* %i, align 4
  %element_addressAB = load i8*, i8** %fieldLLL153, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 %i155
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  call void @add_char(%CString* %cstr_buf, i32 %icastKY)
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %cstr_buf160 = load %CString, %CString* %cstr_buf, align 8
  store i32 148, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.18, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat161

cstr_ccat161:                                     ; preds = %cond_end_block
  %cstr162 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr162, align 8
  %ch163 = alloca i32, align 4
  store i32 0, i32* %ch163, align 4
  %cstr166 = load %CString*, %CString** %cstr162, align 8
  %fieldLLL167 = getelementptr inbounds %CString, %CString* %cstr166, i32 0, i32 0
  %size168 = load i32, i32* %fieldLLL167, align 4
  %add169 = add i32 %size168, 1
  store i32 %add169, i32* %size165, align 4
  %size170 = load i32, i32* %size165, align 4
  %cstr171 = load %CString*, %CString** %cstr162, align 8
  %fieldLLL172 = getelementptr inbounds %CString, %CString* %cstr171, i32 0, i32 2
  %size_allocated173 = load i32, i32* %fieldLLL172, align 4
  %gt174 = icmp sgt i32 %size170, %size_allocated173
  br i1 %gt174, label %cond_jump_then175, label %cond_end176

cstr_ccat_end164:                                 ; preds = %cond_end176
  br label %end_blockX

cond_jump_then175:                                ; preds = %cstr_ccat161
  %cstr177 = load %CString*, %CString** %cstr162, align 8
  %size178 = load i32, i32* %size165, align 4
  call void @cstr_realloc(%CString* %cstr177, i32 %size178)
  br label %cond_end176

cond_end176:                                      ; preds = %cond_jump_then175, %cstr_ccat161
  %cstr179 = load %CString*, %CString** %cstr162, align 8
  %fieldLLL180 = getelementptr inbounds %CString, %CString* %cstr179, i32 0, i32 1
  %data181 = load i8*, i8** %fieldLLL180, align 8
  %size182 = load i32, i32* %size165, align 4
  %sub183 = sub i32 %size182, 1
  %ch184 = load i32, i32* %ch163, align 4
  %icastJ185 = trunc i32 %ch184 to i8
  %element_addressXYXY186 = getelementptr i8, i8* %data181, i32 %sub183
  store i8 %icastJ185, i8* %element_addressXYXY186, align 1
  %cstr187 = load %CString*, %CString** %cstr162, align 8
  %size188 = load i32, i32* %size165, align 4
  %fieldTU189 = getelementptr inbounds %CString, %CString* %cstr187, i32 0, i32 0
  store i32 %size188, i32* %fieldTU189, align 4
  br label %cstr_ccat_end164

after_break190:                                   ; No predecessors!
  br label %cond_else_blockX139
  br label %cond_else_blockX192

cond_then_block191:                               ; preds = %cond_else_blockX139
  %cstr_buf194 = load %CString, %CString* %cstr_buf, align 8
  store i32 151, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.19, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat195

cond_else_blockX192:                              ; preds = %cond_else_blockX139, %after_break190
  %eqtmp226 = icmp eq i32 %v7, 181
  br i1 %eqtmp226, label %cond_then_block224, label %cond_else_blockX225

cstr_ccat195:                                     ; preds = %cond_then_block191
  %cstr196 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr196, align 8
  %ch197 = alloca i32, align 4
  store i32 76, i32* %ch197, align 4
  %cstr200 = load %CString*, %CString** %cstr196, align 8
  %fieldLLL201 = getelementptr inbounds %CString, %CString* %cstr200, i32 0, i32 0
  %size202 = load i32, i32* %fieldLLL201, align 4
  %add203 = add i32 %size202, 1
  store i32 %add203, i32* %size199, align 4
  %size204 = load i32, i32* %size199, align 4
  %cstr205 = load %CString*, %CString** %cstr196, align 8
  %fieldLLL206 = getelementptr inbounds %CString, %CString* %cstr205, i32 0, i32 2
  %size_allocated207 = load i32, i32* %fieldLLL206, align 4
  %gt208 = icmp sgt i32 %size204, %size_allocated207
  br i1 %gt208, label %cond_jump_then209, label %cond_end210

cstr_ccat_end198:                                 ; preds = %cond_end210
  br label %cond_then_block224

cond_jump_then209:                                ; preds = %cstr_ccat195
  %cstr211 = load %CString*, %CString** %cstr196, align 8
  %size212 = load i32, i32* %size199, align 4
  call void @cstr_realloc(%CString* %cstr211, i32 %size212)
  br label %cond_end210

cond_end210:                                      ; preds = %cond_jump_then209, %cstr_ccat195
  %cstr213 = load %CString*, %CString** %cstr196, align 8
  %fieldLLL214 = getelementptr inbounds %CString, %CString* %cstr213, i32 0, i32 1
  %data215 = load i8*, i8** %fieldLLL214, align 8
  %size216 = load i32, i32* %size199, align 4
  %sub217 = sub i32 %size216, 1
  %ch218 = load i32, i32* %ch197, align 4
  %icastJ219 = trunc i32 %ch218 to i8
  %element_addressXYXY220 = getelementptr i8, i8* %data215, i32 %sub217
  store i8 %icastJ219, i8* %element_addressXYXY220, align 1
  %cstr221 = load %CString*, %CString** %cstr196, align 8
  %size222 = load i32, i32* %size199, align 4
  %fieldTU223 = getelementptr inbounds %CString, %CString* %cstr221, i32 0, i32 0
  store i32 %size222, i32* %fieldTU223, align 4
  br label %cstr_ccat_end198

cond_then_block224:                               ; preds = %cond_else_blockX192, %cstr_ccat_end198
  %cv227 = load %CValue*, %CValue** %cv, align 8
  %ICASTO228 = bitcast %CValue* %cv227 to %CString**
  %cstr229 = load %CString*, %CString** %ICASTO228, align 8
  store %CString* %cstr229, %CString** %cstr, align 8
  %cstr_buf230 = load %CString, %CString* %cstr_buf, align 8
  store i32 154, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.20, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat231

cond_else_blockX225:                              ; preds = %after_break370, %cond_else_blockX192
  %eqtmp373 = icmp eq i32 %v7, 156
  br i1 %eqtmp373, label %cond_then_block371, label %cond_else_blockX372

cstr_ccat231:                                     ; preds = %cond_then_block224
  %cstr232 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr232, align 8
  %ch233 = alloca i32, align 4
  store i32 34, i32* %ch233, align 4
  %cstr236 = load %CString*, %CString** %cstr232, align 8
  %fieldLLL237 = getelementptr inbounds %CString, %CString* %cstr236, i32 0, i32 0
  %size238 = load i32, i32* %fieldLLL237, align 4
  %add239 = add i32 %size238, 1
  store i32 %add239, i32* %size235, align 4
  %size240 = load i32, i32* %size235, align 4
  %cstr241 = load %CString*, %CString** %cstr232, align 8
  %fieldLLL242 = getelementptr inbounds %CString, %CString* %cstr241, i32 0, i32 2
  %size_allocated243 = load i32, i32* %fieldLLL242, align 4
  %gt244 = icmp sgt i32 %size240, %size_allocated243
  br i1 %gt244, label %cond_jump_then245, label %cond_end246

cstr_ccat_end234:                                 ; preds = %cond_end246
  %v260 = load i32, i32* %v, align 4
  %eq = icmp eq i32 %v260, 181
  br i1 %eq, label %cond_jump_then261, label %cond_else_block

cond_jump_then245:                                ; preds = %cstr_ccat231
  %cstr247 = load %CString*, %CString** %cstr232, align 8
  %size248 = load i32, i32* %size235, align 4
  call void @cstr_realloc(%CString* %cstr247, i32 %size248)
  br label %cond_end246

cond_end246:                                      ; preds = %cond_jump_then245, %cstr_ccat231
  %cstr249 = load %CString*, %CString** %cstr232, align 8
  %fieldLLL250 = getelementptr inbounds %CString, %CString* %cstr249, i32 0, i32 1
  %data251 = load i8*, i8** %fieldLLL250, align 8
  %size252 = load i32, i32* %size235, align 4
  %sub253 = sub i32 %size252, 1
  %ch254 = load i32, i32* %ch233, align 4
  %icastJ255 = trunc i32 %ch254 to i8
  %element_addressXYXY256 = getelementptr i8, i8* %data251, i32 %sub253
  store i8 %icastJ255, i8* %element_addressXYXY256, align 1
  %cstr257 = load %CString*, %CString** %cstr232, align 8
  %size258 = load i32, i32* %size235, align 4
  %fieldTU259 = getelementptr inbounds %CString, %CString* %cstr257, i32 0, i32 0
  store i32 %size258, i32* %fieldTU259, align 4
  br label %cstr_ccat_end234

cond_jump_then261:                                ; preds = %cstr_ccat_end234
  %cstr263 = load %CString*, %CString** %cstr, align 8
  %fieldLLL264 = getelementptr inbounds %CString, %CString* %cstr263, i32 0, i32 0
  %size265 = load i32, i32* %fieldLLL264, align 4
  %sub266 = sub i32 %size265, 1
  store i32 %sub266, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block268

cond_else_block:                                  ; preds = %cstr_ccat_end234
  %cstr287 = load %CString*, %CString** %cstr, align 8
  %fieldLLL288 = getelementptr inbounds %CString, %CString* %cstr287, i32 0, i32 0
  %size289 = load i32, i32* %fieldLLL288, align 4
  %icastD = sext i32 %size289 to i64
  %div = sdiv i64 %icastD, 4
  %sub290 = sub i64 %div, 1
  %icastM = trunc i64 %sub290 to i32
  store i32 %icastM, i32* %len, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block292

cond_end262:                                      ; preds = %cond_end_block297, %cond_end_block273
  %cstr_buf310 = load %CString, %CString* %cstr_buf, align 8
  store i32 164, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.21, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat311

loop_continue_top_block267:                       ; preds = %cond_then_block272
  %i283 = load i32, i32* %i, align 4
  %add284 = add i32 %i283, 1
  store i32 %add284, i32* %i, align 4
  %i285 = load i32, i32* %i, align 4
  %sub286 = sub i32 %i285, 1
  br label %loop_top_block268

loop_top_block268:                                ; preds = %loop_continue_top_block267, %cond_jump_then261
  %i269 = load i32, i32* %i, align 4
  %len270 = load i32, i32* %len, align 4
  %le271 = icmp slt i32 %i269, %len270
  br i1 %le271, label %cond_then_block272, label %cond_end_block273

cond_then_block272:                               ; preds = %loop_top_block268
  %cstr_buf274 = load %CString, %CString* %cstr_buf, align 8
  %cstr275 = load %CString*, %CString** %cstr, align 8
  %fieldLLL276 = getelementptr inbounds %CString, %CString* %cstr275, i32 0, i32 1
  %data277 = load i8*, i8** %fieldLLL276, align 8
  %i278 = load i32, i32* %i, align 4
  %element_addressAB279 = load i8*, i8** %fieldLLL276, align 8
  %element_addressXYXZY280 = getelementptr inbounds i8, i8* %element_addressAB279, i32 %i278
  %load_element281 = load i8, i8* %element_addressXYXZY280, align 1
  %icastKY282 = zext i8 %load_element281 to i32
  call void @add_char(%CString* %cstr_buf, i32 %icastKY282)
  br label %loop_continue_top_block267

cond_end_block273:                                ; preds = %loop_top_block268
  br label %cond_end262

loop_continue_top_block291:                       ; preds = %cond_then_block296
  %i306 = load i32, i32* %i, align 4
  %add307 = add i32 %i306, 1
  store i32 %add307, i32* %i, align 4
  %i308 = load i32, i32* %i, align 4
  %sub309 = sub i32 %i308, 1
  br label %loop_top_block292

loop_top_block292:                                ; preds = %loop_continue_top_block291, %cond_else_block
  %i293 = load i32, i32* %i, align 4
  %len294 = load i32, i32* %len, align 4
  %le295 = icmp slt i32 %i293, %len294
  br i1 %le295, label %cond_then_block296, label %cond_end_block297

cond_then_block296:                               ; preds = %loop_top_block292
  %cstr_buf298 = load %CString, %CString* %cstr_buf, align 8
  %cstr299 = load %CString*, %CString** %cstr, align 8
  %fieldLLL300 = getelementptr inbounds %CString, %CString* %cstr299, i32 0, i32 1
  %data301 = load i8*, i8** %fieldLLL300, align 8
  %castAQ = bitcast i8* %data301 to i32*
  %i302 = load i32, i32* %i, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL300 to i32**
  %element_addressAB303 = load i32*, i32** %castXYXXYXYXY, align 8
  %element_addressXYXZY304 = getelementptr inbounds i32, i32* %element_addressAB303, i32 %i302
  %load_element305 = load i32, i32* %element_addressXYXZY304, align 4
  call void @add_char(%CString* %cstr_buf, i32 %load_element305)
  br label %loop_continue_top_block291

cond_end_block297:                                ; preds = %loop_top_block292
  br label %cond_end262

cstr_ccat311:                                     ; preds = %cond_end262
  %cstr312 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr312, align 8
  %ch313 = alloca i32, align 4
  store i32 34, i32* %ch313, align 4
  %cstr316 = load %CString*, %CString** %cstr312, align 8
  %fieldLLL317 = getelementptr inbounds %CString, %CString* %cstr316, i32 0, i32 0
  %size318 = load i32, i32* %fieldLLL317, align 4
  %add319 = add i32 %size318, 1
  store i32 %add319, i32* %size315, align 4
  %size320 = load i32, i32* %size315, align 4
  %cstr321 = load %CString*, %CString** %cstr312, align 8
  %fieldLLL322 = getelementptr inbounds %CString, %CString* %cstr321, i32 0, i32 2
  %size_allocated323 = load i32, i32* %fieldLLL322, align 4
  %gt324 = icmp sgt i32 %size320, %size_allocated323
  br i1 %gt324, label %cond_jump_then325, label %cond_end326

cstr_ccat_end314:                                 ; preds = %cond_end326
  %cstr_buf340 = load %CString, %CString* %cstr_buf, align 8
  store i32 165, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.22, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat341

cond_jump_then325:                                ; preds = %cstr_ccat311
  %cstr327 = load %CString*, %CString** %cstr312, align 8
  %size328 = load i32, i32* %size315, align 4
  call void @cstr_realloc(%CString* %cstr327, i32 %size328)
  br label %cond_end326

cond_end326:                                      ; preds = %cond_jump_then325, %cstr_ccat311
  %cstr329 = load %CString*, %CString** %cstr312, align 8
  %fieldLLL330 = getelementptr inbounds %CString, %CString* %cstr329, i32 0, i32 1
  %data331 = load i8*, i8** %fieldLLL330, align 8
  %size332 = load i32, i32* %size315, align 4
  %sub333 = sub i32 %size332, 1
  %ch334 = load i32, i32* %ch313, align 4
  %icastJ335 = trunc i32 %ch334 to i8
  %element_addressXYXY336 = getelementptr i8, i8* %data331, i32 %sub333
  store i8 %icastJ335, i8* %element_addressXYXY336, align 1
  %cstr337 = load %CString*, %CString** %cstr312, align 8
  %size338 = load i32, i32* %size315, align 4
  %fieldTU339 = getelementptr inbounds %CString, %CString* %cstr337, i32 0, i32 0
  store i32 %size338, i32* %fieldTU339, align 4
  br label %cstr_ccat_end314

cstr_ccat341:                                     ; preds = %cstr_ccat_end314
  %cstr342 = alloca %CString*, align 8
  store %CString* %cstr_buf, %CString** %cstr342, align 8
  %ch343 = alloca i32, align 4
  store i32 0, i32* %ch343, align 4
  %cstr346 = load %CString*, %CString** %cstr342, align 8
  %fieldLLL347 = getelementptr inbounds %CString, %CString* %cstr346, i32 0, i32 0
  %size348 = load i32, i32* %fieldLLL347, align 4
  %add349 = add i32 %size348, 1
  store i32 %add349, i32* %size345, align 4
  %size350 = load i32, i32* %size345, align 4
  %cstr351 = load %CString*, %CString** %cstr342, align 8
  %fieldLLL352 = getelementptr inbounds %CString, %CString* %cstr351, i32 0, i32 2
  %size_allocated353 = load i32, i32* %fieldLLL352, align 4
  %gt354 = icmp sgt i32 %size350, %size_allocated353
  br i1 %gt354, label %cond_jump_then355, label %cond_end356

cstr_ccat_end344:                                 ; preds = %cond_end356
  br label %end_blockX

cond_jump_then355:                                ; preds = %cstr_ccat341
  %cstr357 = load %CString*, %CString** %cstr342, align 8
  %size358 = load i32, i32* %size345, align 4
  call void @cstr_realloc(%CString* %cstr357, i32 %size358)
  br label %cond_end356

cond_end356:                                      ; preds = %cond_jump_then355, %cstr_ccat341
  %cstr359 = load %CString*, %CString** %cstr342, align 8
  %fieldLLL360 = getelementptr inbounds %CString, %CString* %cstr359, i32 0, i32 1
  %data361 = load i8*, i8** %fieldLLL360, align 8
  %size362 = load i32, i32* %size345, align 4
  %sub363 = sub i32 %size362, 1
  %ch364 = load i32, i32* %ch343, align 4
  %icastJ365 = trunc i32 %ch364 to i8
  %element_addressXYXY366 = getelementptr i8, i8* %data361, i32 %sub363
  store i8 %icastJ365, i8* %element_addressXYXY366, align 1
  %cstr367 = load %CString*, %CString** %cstr342, align 8
  %size368 = load i32, i32* %size345, align 4
  %fieldTU369 = getelementptr inbounds %CString, %CString* %cstr367, i32 0, i32 0
  store i32 %size368, i32* %fieldTU369, align 4
  br label %cstr_ccat_end344

after_break370:                                   ; No predecessors!
  br label %cond_else_blockX225
  br label %cond_else_blockX372

cond_then_block371:                               ; preds = %cond_else_blockX225
  store i32 60, i32* %v, align 4
  br label %get_tok_str.addv
  br label %cond_then_block374

cond_else_blockX372:                              ; preds = %cond_else_blockX225, %after_break370
  %eqtmp376 = icmp eq i32 %v7, 159
  br i1 %eqtmp376, label %cond_then_block374, label %cond_else_blockX375

get_tok_str.addv:                                 ; preds = %cond_end_block402, %cond_then_block374, %cond_then_block371
  %p441 = load i8*, i8** %p, align 8
  %ptrToIntC442 = ptrtoint i8* %p441 to i64
  %add443 = add i64 %ptrToIntC442, 1
  %intToPtrB444 = inttoptr i64 %add443 to i8*
  store i8* %intToPtrB444, i8** %p, align 8
  %p445 = load i8*, i8** %p, align 8
  %ptrToIntI446 = ptrtoint i8* %p445 to i64
  %sub447 = sub i64 %ptrToIntI446, 1
  %iintToPtrD448 = inttoptr i64 %sub447 to i8*
  %v449 = load i32, i32* %v, align 4
  %icastJ450 = trunc i32 %v449 to i8
  store i8 %icastJ450, i8* %iintToPtrD448, align 1
  %p451 = load i8*, i8** %p, align 8
  store i8 0, i8* %p451, align 1
  br label %cond_end398

cond_then_block374:                               ; preds = %cond_else_blockX372, %cond_then_block371
  store i32 62, i32* %v, align 4
  br label %get_tok_str.addv
  br label %cond_then_block377

cond_else_blockX375:                              ; preds = %cond_else_blockX372
  %eqtmp379 = icmp eq i32 %v7, 204
  br i1 %eqtmp379, label %cond_then_block377, label %cond_else_blockX378

cond_then_block377:                               ; preds = %cond_else_blockX375, %cond_then_block374
  %p380 = load i8*, i8** %p, align 8
  %fun_result381 = call i8* @strcpy(i8* %p380, i8* bitcast ([4 x i8]* @31 to i8*))
  ret i8* %fun_result381
  br label %cond_then_block382

cond_else_blockX378:                              ; preds = %cond_else_blockX375
  %eqtmp384 = icmp eq i32 %v7, 129
  br i1 %eqtmp384, label %cond_then_block382, label %cond_else_blockX383

cond_then_block382:                               ; preds = %cond_else_blockX378, %cond_then_block377
  %p385 = load i8*, i8** %p, align 8
  %fun_result386 = call i8* @strcpy(i8* %p385, i8* bitcast ([4 x i8]* @32 to i8*))
  ret i8* %fun_result386
  br label %cond_then_block387

cond_else_blockX383:                              ; preds = %cond_else_blockX378
  %eqtmp389 = icmp eq i32 %v7, 130
  br i1 %eqtmp389, label %cond_then_block387, label %cond_else_blockX388

cond_then_block387:                               ; preds = %cond_else_blockX383, %cond_then_block382
  %p390 = load i8*, i8** %p, align 8
  %fun_result391 = call i8* @strcpy(i8* %p390, i8* bitcast ([4 x i8]* @33 to i8*))
  ret i8* %fun_result391
  br label %cond_then_block392

cond_else_blockX388:                              ; preds = %cond_else_blockX383
  br label %cond_then_block392

cond_then_block392:                               ; preds = %cond_else_blockX388, %cond_then_block387
  %v394 = load i32, i32* %v, align 4
  %le395 = icmp slt i32 %v394, 256
  br i1 %le395, label %cond_jump_then396, label %cond_jump_elif0

cond_else_blockX393:                              ; preds = %after_break465
  br label %end_blockX

cond_jump_then396:                                ; preds = %cond_then_block392
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @tok_two_chars, i32 0, i32 0), i8** %q, align 8
  br label %loop_top_block399

cond_jump_elif0:                                  ; preds = %cond_then_block392
  %v452 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %le453 = icmp slt i32 %v452, %tok_ident
  br i1 %le453, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v454 = load i32, i32* %v, align 4
  %sub455 = sub i32 %v454, 256
  %element_addressAB456 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY457 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB456, i32 %sub455
  %load_element458 = load %TokenSym*, %TokenSym** %element_addressXYXZY457, align 8
  %fieldRRRROOU = getelementptr inbounds %TokenSym, %TokenSym* %load_element458, i32 0, i32 7
  %autocast459 = bitcast [1 x i8]* %fieldRRRROOU to i8*
  ret i8* %autocast459

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %v460 = load i32, i32* %v, align 4
  %gteq_signed = icmp sge i32 %v460, 268435456
  br i1 %gteq_signed, label %cond_jump_elif_then1, label %cond_else_block397

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %p461 = load i8*, i8** %p, align 8
  %v462 = load i32, i32* %v, align 4
  %sub463 = sub i32 %v462, 268435456
  %fun_result464 = call i32 (i8*, i8*, ...) @sprintf(i8* %p461, i8* bitcast ([5 x i8]* @34 to i8*), i32 %sub463)
  br label %cond_end398

cond_else_block397:                               ; preds = %cond_jump_elif1
  ret i8* null

cond_end398:                                      ; preds = %cond_jump_elif_then1, %get_tok_str.addv
  br label %end_blockX

loop_top_block399:                                ; preds = %cond_end411, %cond_jump_then396
  %q400 = load i8*, i8** %q, align 8
  %derefference_valueB = load i8, i8* %q400, align 1
  %icmpA = icmp ne i8 %derefference_valueB, 0
  br i1 %icmpA, label %cond_then_block401, label %cond_end_block402

cond_then_block401:                               ; preds = %loop_top_block399
  %q403 = load i8*, i8** %q, align 8
  %element_addressAB404 = load i8*, i8** %q, align 8
  %element_addressXYXZY405 = getelementptr inbounds i8, i8* %element_addressAB404, i32 2
  %load_element406 = load i8, i8* %element_addressXYXZY405, align 1
  %v407 = load i32, i32* %v, align 4
  %icastJ408 = trunc i32 %v407 to i8
  %eq409 = icmp eq i8 %load_element406, %icastJ408
  br i1 %eq409, label %cond_jump_then410, label %cond_end411

cond_end_block402:                                ; preds = %loop_top_block399
  br label %get_tok_str.addv

cond_jump_then410:                                ; preds = %cond_then_block401
  %p412 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p412 to i64
  %add413 = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add413 to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p414 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p414 to i64
  %sub415 = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub415 to i8*
  %q416 = load i8*, i8** %q, align 8
  %element_addressAB417 = load i8*, i8** %q, align 8
  %element_addressXYXZY418 = getelementptr inbounds i8, i8* %element_addressAB417, i32 0
  %load_element419 = load i8, i8* %element_addressXYXZY418, align 1
  store i8 %load_element419, i8* %iintToPtrD, align 1
  %p420 = load i8*, i8** %p, align 8
  %ptrToIntC421 = ptrtoint i8* %p420 to i64
  %add422 = add i64 %ptrToIntC421, 1
  %intToPtrB423 = inttoptr i64 %add422 to i8*
  store i8* %intToPtrB423, i8** %p, align 8
  %p424 = load i8*, i8** %p, align 8
  %ptrToIntI425 = ptrtoint i8* %p424 to i64
  %sub426 = sub i64 %ptrToIntI425, 1
  %iintToPtrD427 = inttoptr i64 %sub426 to i8*
  %q428 = load i8*, i8** %q, align 8
  %element_addressAB429 = load i8*, i8** %q, align 8
  %element_addressXYXZY430 = getelementptr inbounds i8, i8* %element_addressAB429, i32 1
  %load_element431 = load i8, i8* %element_addressXYXZY430, align 1
  store i8 %load_element431, i8* %iintToPtrD427, align 1
  %p432 = load i8*, i8** %p, align 8
  store i8 0, i8* %p432, align 1
  %autocast433 = bitcast [1025 x i8]* %buf to i8*
  ret i8* %autocast433

cond_end411:                                      ; preds = %cond_then_block401
  %q434 = load i8*, i8** %q, align 8
  %ptrToIntC435 = ptrtoint i8* %q434 to i64
  %add436 = add i64 %ptrToIntC435, 3
  %intToPtrB437 = inttoptr i64 %add436 to i8*
  store i8* %intToPtrB437, i8** %q, align 8
  %ptrToIntI438 = ptrtoint i8* %intToPtrB437 to i64
  %sub439 = sub i64 %ptrToIntI438, 3
  %iintToPtrD440 = inttoptr i64 %sub439 to i8*
  br label %loop_top_block399

after_break465:                                   ; No predecessors!
  br label %cond_else_blockX393
}

define internal void @parse_expr_type(%CType* %0) {
entry:
  %ad = alloca %AttributeDef, align 8
  %castXXXX = bitcast %AttributeDef* %ad to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %n = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  call void @skip(i32 40)
  %type2 = load %CType*, %CType** %type, align 8
  %ad3 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fun_result = call i32 @parse_btype(%CType* %type2, %AttributeDef* %ad)
  %icmpA = icmp ne i32 %fun_result, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %type4 = load %CType*, %CType** %type, align 8
  %ad5 = load %AttributeDef, %AttributeDef* %ad, align 8
  %n6 = load i32, i32* %n, align 4
  call void @type_decl(%CType* %type4, %AttributeDef* %ad, i32* %n, i32 1)
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %type7 = load %CType*, %CType** %type, align 8
  call void @expr_type(%CType* %type7)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  call void @skip(i32 41)
  ret void
}

define internal void @expr_type(%CType* %0) {
entry:
  %saved_nocode_wanted = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  store i32 %nocode_wanted, i32* %saved_nocode_wanted, align 4
  store i32 1, i32* @nocode_wanted, align 4
  call void @gexpr()
  %type2 = load %CType*, %CType** %type, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type3 = load %CType, %CType* %fieldLLL, align 8
  store %CType %type3, %CType* %type2, align 8
  call void @vpop()
  %saved_nocode_wanted4 = load i32, i32* %saved_nocode_wanted, align 4
  store i32 %saved_nocode_wanted4, i32* @nocode_wanted, align 4
  ret void
}

define internal void @unary_type(%CType* %0) {
entry:
  %a = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  store i32 %nocode_wanted, i32* %a, align 4
  store i32 1, i32* @nocode_wanted, align 4
  call void @unary()
  %type2 = load %CType*, %CType** %type, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type3 = load %CType, %CType* %fieldLLL, align 8
  store %CType %type3, %CType* %type2, align 8
  call void @vpop()
  %a4 = load i32, i32* %a, align 4
  store i32 %a4, i32* @nocode_wanted, align 4
  ret void
}

define internal void @block(i32* %0, i32* %1, i32* %2, i32* %3, i32 %4, i32 %5) {
entry:
  %oror390 = alloca i1, align 1
  %oror389 = alloca i1, align 1
  %andand330 = alloca i1, align 1
  %andand275 = alloca i1, align 1
  %v2 = alloca i32, align 4
  %v1 = alloca i32, align 4
  %e = alloca i32, align 4
  %oror159 = alloca i1, align 1
  %oror158 = alloca i1, align 1
  %bt = alloca i32, align 4
  %type149 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type149 to i8*
  %6 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %p = alloca %Sym*, align 8
  %llabel = alloca %Sym*, align 8
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %s = alloca %Sym*, align 8
  %d = alloca i32, align 4
  %c = alloca i32, align 4
  %b = alloca i32, align 4
  %a = alloca i32, align 4
  %bsym = alloca i32*, align 8
  %bsym1 = alloca i32**, align 8
  store i32* %0, i32** %bsym, align 8
  store i32** %bsym, i32*** %bsym1, align 8
  %csym = alloca i32*, align 8
  %csym2 = alloca i32**, align 8
  store i32* %1, i32** %csym, align 8
  store i32** %csym, i32*** %csym2, align 8
  %case_sym = alloca i32*, align 8
  %case_sym3 = alloca i32**, align 8
  store i32* %2, i32** %case_sym, align 8
  store i32** %case_sym, i32*** %case_sym3, align 8
  %def_sym = alloca i32*, align 8
  %def_sym4 = alloca i32**, align 8
  store i32* %3, i32** %def_sym, align 8
  store i32** %def_sym, i32*** %def_sym4, align 8
  %case_reg = alloca i32, align 4
  %case_reg5 = alloca i32*, align 8
  store i32 %4, i32* %case_reg, align 4
  store i32* %case_reg, i32** %case_reg5, align 8
  %is_expr = alloca i32, align 4
  %is_expr6 = alloca i32*, align 8
  store i32 %5, i32* %is_expr, align 4
  store i32* %is_expr, i32** %is_expr6, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL, align 4
  %icmpA = icmp ne i32 %do_debug, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %last_line_num = load i32, i32* @last_line_num, align 4
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL7 = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL7, align 4
  %not_eq = icmp ne i32 %last_line_num, %line_num
  store i1 %not_eq, i1* %oror, align 1
  br i1 %not_eq, label %cond_jump_end9, label %cond_jump_then8

cond_jump_end:                                    ; preds = %cond_jump_end9, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then13, label %cond_end

cond_jump_then8:                                  ; preds = %cond_jump_then
  %last_ind = load i32, i32* @last_ind, align 4
  %ind = load i32, i32* @ind, align 4
  %not_eq10 = icmp ne i32 %last_ind, %ind
  %oror11 = or i1 %not_eq, %not_eq10
  store i1 %oror11, i1* %oror, align 1
  br label %cond_jump_end9

cond_jump_end9:                                   ; preds = %cond_jump_then8, %cond_jump_then
  %oror_result_value = load i1, i1* %oror, align 1
  %andand12 = and i1 %icmpA, %oror_result_value
  store i1 %andand12, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_then13:                                 ; preds = %cond_jump_end
  %file14 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL15 = getelementptr inbounds %BufferedFile, %BufferedFile* %file14, i32 0, i32 3
  %line_num16 = load i32, i32* %fieldLLL15, align 4
  %ind17 = load i32, i32* @ind, align 4
  %func_ind = load i32, i32* @func_ind, align 4
  %sub = sub i32 %ind17, %func_ind
  call void @put_stabn(i32 68, i32 0, i32 %line_num16, i32 %sub)
  %ind18 = load i32, i32* @ind, align 4
  store i32 %ind18, i32* @last_ind, align 4
  %file19 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL20 = getelementptr inbounds %BufferedFile, %BufferedFile* %file19, i32 0, i32 3
  %line_num21 = load i32, i32* %fieldLLL20, align 4
  store i32 %line_num21, i32* @last_line_num, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then13, %cond_jump_end
  %is_expr22 = load i32, i32* %is_expr, align 4
  %icmpA23 = icmp ne i32 %is_expr22, 0
  br i1 %icmpA23, label %cond_jump_then24, label %cond_end25

cond_jump_then24:                                 ; preds = %cond_end
  call void @vpushi(i32 0)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL26 = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL26, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL26, i32 0, i32 0
  store i32 3, i32* %fieldTTT, align 4
  br label %cond_end25

cond_end25:                                       ; preds = %cond_jump_then24, %cond_end
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 259
  br i1 %eq, label %cond_jump_then27, label %cond_jump_elif0

cond_jump_then27:                                 ; preds = %cond_end25
  call void @next()
  call void @skip(i32 40)
  call void @gexpr()
  call void @skip(i32 41)
  %fun_result = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result, i32* %a, align 4
  %bsym29 = load i32*, i32** %bsym, align 8
  %csym30 = load i32*, i32** %csym, align 8
  %case_sym31 = load i32*, i32** %case_sym, align 8
  %def_sym32 = load i32*, i32** %def_sym, align 8
  %case_reg33 = load i32, i32* %case_reg, align 4
  call void @block(i32* %bsym29, i32* %csym30, i32* %case_sym31, i32* %def_sym32, i32 %case_reg33, i32 0)
  %tok34 = load i32, i32* @tok, align 4
  store i32 %tok34, i32* %c, align 4
  %c35 = load i32, i32* %c, align 4
  %eq36 = icmp eq i32 %c35, 260
  br i1 %eq36, label %cond_jump_then37, label %cond_else_block38

cond_jump_elif0:                                  ; preds = %cond_end25
  %tok49 = load i32, i32* @tok, align 4
  %eq50 = icmp eq i32 %tok49, 261
  br i1 %eq50, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @next()
  %ind51 = load i32, i32* @ind, align 4
  store i32 %ind51, i32* %d, align 4
  call void @skip(i32 40)
  call void @gexpr()
  call void @skip(i32 41)
  %fun_result52 = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result52, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %a53 = load i32, i32* %a, align 4
  %b54 = load i32, i32* %b, align 4
  %case_sym55 = load i32*, i32** %case_sym, align 8
  %def_sym56 = load i32*, i32** %def_sym, align 8
  %case_reg57 = load i32, i32* %case_reg, align 4
  call void @block(i32* %a, i32* %b, i32* %case_sym55, i32* %def_sym56, i32 %case_reg57, i32 0)
  %d58 = load i32, i32* %d, align 4
  call void @gjmp_addr(i32 %d58)
  %a59 = load i32, i32* %a, align 4
  call void @gsym(i32 %a59)
  %b60 = load i32, i32* %b, align 4
  %d61 = load i32, i32* %d, align 4
  call void @gsym_addr(i32 %b60, i32 %d61)
  br label %cond_end28

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %tok62 = load i32, i32* @tok, align 4
  %eq63 = icmp eq i32 %tok62, 123
  br i1 %eq63, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  call void @next()
  %local_stack = load %Sym*, %Sym** @local_stack, align 8
  store %Sym* %local_stack, %Sym** %s, align 8
  %local_label_stack = load %Sym*, %Sym** @local_label_stack, align 8
  store %Sym* %local_label_stack, %Sym** %llabel, align 8
  %tok64 = load i32, i32* @tok, align 4
  %eq65 = icmp eq i32 %tok64, 309
  br i1 %eq65, label %cond_jump_then66, label %cond_end67

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %tok134 = load i32, i32* @tok, align 4
  %eq135 = icmp eq i32 %tok134, 263
  br i1 %eq135, label %cond_jump_elif_then2, label %cond_jump_elif3

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  call void @next()
  %tok136 = load i32, i32* @tok, align 4
  %not_eq137 = icmp ne i32 %tok136, 59
  br i1 %not_eq137, label %cond_jump_then138, label %cond_end139

cond_jump_elif3:                                  ; preds = %cond_jump_elif2
  %tok184 = load i32, i32* @tok, align 4
  %eq185 = icmp eq i32 %tok184, 262
  br i1 %eq185, label %cond_jump_elif_then3, label %cond_jump_elif4

cond_jump_elif_then3:                             ; preds = %cond_jump_elif3
  %bsym186 = load i32*, i32** %bsym, align 8
  %logical_denial = icmp eq i32* %bsym186, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA187 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA187, label %cond_jump_then188, label %cond_end189

cond_jump_elif4:                                  ; preds = %cond_jump_elif3
  %tok193 = load i32, i32* @tok, align 4
  %eq194 = icmp eq i32 %tok193, 270
  br i1 %eq194, label %cond_jump_elif_then4, label %cond_jump_elif5

cond_jump_elif_then4:                             ; preds = %cond_jump_elif4
  %csym195 = load i32*, i32** %csym, align 8
  %logical_denial196 = icmp eq i32* %csym195, null
  %castOOOO197 = zext i1 %logical_denial196 to i32
  %icmpA198 = icmp ne i32 %castOOOO197, 0
  br i1 %icmpA198, label %cond_jump_then199, label %cond_end200

cond_jump_elif5:                                  ; preds = %cond_jump_elif4
  %tok205 = load i32, i32* @tok, align 4
  %eq206 = icmp eq i32 %tok205, 264
  br i1 %eq206, label %cond_jump_elif_then5, label %cond_jump_elif6

cond_jump_elif_then5:                             ; preds = %cond_jump_elif5
  call void @next()
  call void @skip(i32 40)
  %tok207 = load i32, i32* @tok, align 4
  %not_eq208 = icmp ne i32 %tok207, 59
  br i1 %not_eq208, label %cond_jump_then209, label %cond_end210

cond_jump_elif6:                                  ; preds = %cond_jump_elif5
  %tok235 = load i32, i32* @tok, align 4
  %eq236 = icmp eq i32 %tok235, 269
  br i1 %eq236, label %cond_jump_elif_then6, label %cond_jump_elif7

cond_jump_elif_then6:                             ; preds = %cond_jump_elif6
  call void @next()
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %ind237 = load i32, i32* @ind, align 4
  store i32 %ind237, i32* %d, align 4
  %a238 = load i32, i32* %a, align 4
  %b239 = load i32, i32* %b, align 4
  %case_sym240 = load i32*, i32** %case_sym, align 8
  %def_sym241 = load i32*, i32** %def_sym, align 8
  %case_reg242 = load i32, i32* %case_reg, align 4
  call void @block(i32* %a, i32* %b, i32* %case_sym240, i32* %def_sym241, i32 %case_reg242, i32 0)
  call void @skip(i32 261)
  call void @skip(i32 40)
  %b243 = load i32, i32* %b, align 4
  call void @gsym(i32 %b243)
  call void @gexpr()
  %fun_result244 = call i32 @gtst(i32 0, i32 0)
  store i32 %fun_result244, i32* %c, align 4
  %c245 = load i32, i32* %c, align 4
  %d246 = load i32, i32* %d, align 4
  call void @gsym_addr(i32 %c245, i32 %d246)
  call void @skip(i32 41)
  %a247 = load i32, i32* %a, align 4
  call void @gsym(i32 %a247)
  call void @skip(i32 59)
  br label %cond_end28

cond_jump_elif7:                                  ; preds = %cond_jump_elif6
  %tok248 = load i32, i32* @tok, align 4
  %eq249 = icmp eq i32 %tok248, 271
  br i1 %eq249, label %cond_jump_elif_then7, label %cond_jump_elif8

cond_jump_elif_then7:                             ; preds = %cond_jump_elif7
  call void @next()
  call void @skip(i32 40)
  call void @gexpr()
  %fun_result250 = call i32 @gv(i32 1)
  store i32 %fun_result250, i32* %case_reg, align 4
  call void @vpop()
  call void @skip(i32 41)
  store i32 0, i32* %a, align 4
  %fun_result251 = call i32 @gjmp(i32 0)
  store i32 %fun_result251, i32* %b, align 4
  store i32 0, i32* %c, align 4
  %a252 = load i32, i32* %a, align 4
  %csym253 = load i32*, i32** %csym, align 8
  %b254 = load i32, i32* %b, align 4
  %c255 = load i32, i32* %c, align 4
  %case_reg256 = load i32, i32* %case_reg, align 4
  call void @block(i32* %a, i32* %csym253, i32* %b, i32* %c, i32 %case_reg256, i32 0)
  %c257 = load i32, i32* %c, align 4
  %eq258 = icmp eq i32 %c257, 0
  br i1 %eq258, label %cond_jump_then259, label %cond_end260

cond_jump_elif8:                                  ; preds = %cond_jump_elif7
  %tok265 = load i32, i32* @tok, align 4
  %eq266 = icmp eq i32 %tok265, 272
  br i1 %eq266, label %cond_jump_elif_then8, label %cond_jump_elif9

cond_jump_elif_then8:                             ; preds = %cond_jump_elif8
  %case_sym267 = load i32*, i32** %case_sym, align 8
  %logical_denial268 = icmp eq i32* %case_sym267, null
  %castOOOO269 = zext i1 %logical_denial268 to i32
  %icmpA270 = icmp ne i32 %castOOOO269, 0
  br i1 %icmpA270, label %cond_jump_then271, label %cond_end272

cond_jump_elif9:                                  ; preds = %cond_jump_elif8
  %tok313 = load i32, i32* @tok, align 4
  %eq314 = icmp eq i32 %tok313, 299
  br i1 %eq314, label %cond_jump_elif_then9, label %cond_jump_elif10

cond_jump_elif_then9:                             ; preds = %cond_jump_elif9
  call void @next()
  call void @skip(i32 58)
  %def_sym315 = load i32*, i32** %def_sym, align 8
  %logical_denial316 = icmp eq i32* %def_sym315, null
  %castOOOO317 = zext i1 %logical_denial316 to i32
  %icmpA318 = icmp ne i32 %castOOOO317, 0
  br i1 %icmpA318, label %cond_jump_then319, label %cond_end320

cond_jump_elif10:                                 ; preds = %cond_jump_elif9
  %tok328 = load i32, i32* @tok, align 4
  %eq329 = icmp eq i32 %tok328, 268
  br i1 %eq329, label %cond_jump_elif_then10, label %cond_jump_elif11

cond_jump_elif_then10:                            ; preds = %cond_jump_elif10
  call void @next()
  %tok331 = load i32, i32* @tok, align 4
  %eq332 = icmp eq i32 %tok331, 42
  store i1 %eq332, i1* %andand330, align 1
  br i1 %eq332, label %cond_jump_then333, label %cond_jump_end334

cond_jump_elif11:                                 ; preds = %cond_jump_elif10
  %tok391 = load i32, i32* @tok, align 4
  %eq392 = icmp eq i32 %tok391, 310
  store i1 %eq392, i1* %oror390, align 1
  br i1 %eq392, label %cond_jump_end394, label %cond_jump_then393

cond_jump_elif_then11:                            ; preds = %cond_jump_end400
  call void @asm_instr()
  br label %cond_end28

cond_else_block:                                  ; preds = %cond_jump_end400
  %fun_result405 = call i32 @is_label()
  store i32 %fun_result405, i32* %b, align 4
  %b406 = load i32, i32* %b, align 4
  %icmpA407 = icmp ne i32 %b406, 0
  br i1 %icmpA407, label %cond_jump_then408, label %cond_else_block409

cond_end28:                                       ; preds = %cond_end410, %cond_jump_elif_then11, %cond_end343, %cond_end325, %cond_end301, %cond_end260, %cond_jump_elif_then6, %cond_end221, %cond_end200, %cond_end189, %cond_end139, %cond_end103, %cond_jump_elif_then0, %cond_end39
  ret void

cond_jump_then37:                                 ; preds = %cond_jump_then27
  call void @next()
  %fun_result40 = call i32 @gjmp(i32 0)
  store i32 %fun_result40, i32* %d, align 4
  %a41 = load i32, i32* %a, align 4
  call void @gsym(i32 %a41)
  %bsym42 = load i32*, i32** %bsym, align 8
  %csym43 = load i32*, i32** %csym, align 8
  %case_sym44 = load i32*, i32** %case_sym, align 8
  %def_sym45 = load i32*, i32** %def_sym, align 8
  %case_reg46 = load i32, i32* %case_reg, align 4
  call void @block(i32* %bsym42, i32* %csym43, i32* %case_sym44, i32* %def_sym45, i32 %case_reg46, i32 0)
  %d47 = load i32, i32* %d, align 4
  call void @gsym(i32 %d47)
  br label %cond_end39

cond_else_block38:                                ; preds = %cond_jump_then27
  %a48 = load i32, i32* %a, align 4
  call void @gsym(i32 %a48)
  br label %cond_end39

cond_end39:                                       ; preds = %cond_else_block38, %cond_jump_then37
  br label %cond_end28

cond_jump_then66:                                 ; preds = %cond_jump_elif_then1
  call void @next()
  br label %loop_top_block

cond_end67:                                       ; preds = %cond_end_block, %cond_jump_elif_then1
  br label %loop_top_block79

loop_continue_top_block:                          ; preds = %cond_end78
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then66
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %tok68 = load i32, i32* @tok, align 4
  %le = icmp slt i32 %tok68, 313
  br i1 %le, label %cond_jump_then69, label %cond_end70

cond_end_block:                                   ; preds = %cond_else_block77, %loop_top_block
  br label %cond_end67

cond_jump_then69:                                 ; preds = %cond_then_block
  call void @expect(i8* bitcast ([17 x i8]* @170 to i8*))
  br label %cond_end70

cond_end70:                                       ; preds = %cond_jump_then69, %cond_then_block
  %local_label_stack71 = load %Sym*, %Sym** @local_label_stack, align 8
  %tok72 = load i32, i32* @tok, align 4
  %fun_result73 = call %Sym* @label_push(%Sym** @local_label_stack, i32 %tok72, i32 2)
  call void @next()
  %tok74 = load i32, i32* @tok, align 4
  %eq75 = icmp eq i32 %tok74, 44
  br i1 %eq75, label %cond_jump_then76, label %cond_else_block77

cond_jump_then76:                                 ; preds = %cond_end70
  call void @next()
  br label %cond_end78

cond_else_block77:                                ; preds = %cond_end70
  call void @skip(i32 59)
  br label %cond_end_block

cond_end78:                                       ; preds = %after_break, %cond_jump_then76
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end78

loop_top_block79:                                 ; preds = %cond_end87, %cond_end67
  %tok80 = load i32, i32* @tok, align 4
  %not_eq81 = icmp ne i32 %tok80, 125
  br i1 %not_eq81, label %cond_then_block82, label %cond_end_block83

cond_then_block82:                                ; preds = %loop_top_block79
  call void @decl(i32 242)
  %tok84 = load i32, i32* @tok, align 4
  %not_eq85 = icmp ne i32 %tok84, 125
  br i1 %not_eq85, label %cond_jump_then86, label %cond_end87

cond_end_block83:                                 ; preds = %loop_top_block79
  %local_label_stack98 = load %Sym*, %Sym** @local_label_stack, align 8
  %llabel99 = load %Sym*, %Sym** %llabel, align 8
  call void @label_pop(%Sym** @local_label_stack, %Sym* %llabel99)
  %is_expr100 = load i32, i32* %is_expr, align 4
  %icmpA101 = icmp ne i32 %is_expr100, 0
  br i1 %icmpA101, label %cond_jump_then102, label %cond_end103

cond_jump_then86:                                 ; preds = %cond_then_block82
  %is_expr88 = load i32, i32* %is_expr, align 4
  %icmpA89 = icmp ne i32 %is_expr88, 0
  br i1 %icmpA89, label %cond_jump_then90, label %cond_end91

cond_end87:                                       ; preds = %cond_end91, %cond_then_block82
  br label %loop_top_block79

cond_jump_then90:                                 ; preds = %cond_jump_then86
  call void @vpop()
  br label %cond_end91

cond_end91:                                       ; preds = %cond_jump_then90, %cond_jump_then86
  %bsym92 = load i32*, i32** %bsym, align 8
  %csym93 = load i32*, i32** %csym, align 8
  %case_sym94 = load i32*, i32** %case_sym, align 8
  %def_sym95 = load i32*, i32** %def_sym, align 8
  %case_reg96 = load i32, i32* %case_reg, align 4
  %is_expr97 = load i32, i32* %is_expr, align 4
  call void @block(i32* %bsym92, i32* %csym93, i32* %case_sym94, i32* %def_sym95, i32 %case_reg96, i32 %is_expr97)
  br label %cond_end87

cond_jump_then102:                                ; preds = %cond_end_block83
  %vtop104 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL105 = getelementptr inbounds %SValue, %SValue* %vtop104, i32 0, i32 0
  %type106 = load %CType, %CType* %fieldLLL105, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL105, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eqtmp = icmp eq i32 %andtmp, 4
  br i1 %eqtmp, label %cond_then_block107, label %cond_else_blockX
  br label %cond_else_blockX108

cond_end103:                                      ; preds = %end_blockX, %cond_end_block83
  %local_stack132 = load %Sym*, %Sym** @local_stack, align 8
  %s133 = load %Sym*, %Sym** %s, align 8
  call void @sym_pop(%Sym** @local_stack, %Sym* %s133)
  call void @next()
  br label %cond_end28

end_blockX:                                       ; preds = %cond_else_blockX112
  br label %cond_end103

cond_then_block107:                               ; preds = %cond_else_blockX110, %cond_else_blockX108, %cond_else_blockX, %cond_jump_then102
  %vtop114 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL115 = getelementptr inbounds %SValue, %SValue* %vtop114, i32 0, i32 0
  %type116 = load %CType, %CType* %fieldLLL115, align 8
  %fieldVVV117 = getelementptr inbounds %CType, %CType* %fieldLLL115, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV117, align 8
  store %Sym* %ref, %Sym** %p, align 8
  br label %loop_top_block119

cond_else_blockX:                                 ; preds = %cond_jump_then102
  %eqtmp109 = icmp eq i32 %andtmp, 7
  br i1 %eqtmp109, label %cond_then_block107, label %cond_else_blockX108
  br label %cond_else_blockX110

cond_else_blockX108:                              ; preds = %cond_else_blockX, %cond_jump_then102
  %eqtmp111 = icmp eq i32 %andtmp, 5
  br i1 %eqtmp111, label %cond_then_block107, label %cond_else_blockX110
  br label %cond_else_blockX112

cond_else_blockX110:                              ; preds = %cond_else_blockX108, %cond_else_blockX
  %eqtmp113 = icmp eq i32 %andtmp, 6
  br i1 %eqtmp113, label %cond_then_block107, label %cond_else_blockX112

cond_else_blockX112:                              ; preds = %cond_end_block122, %cond_else_blockX110, %cond_else_blockX108
  br label %end_blockX

loop_continue_top_block118:                       ; preds = %cond_end128
  %p129 = load %Sym*, %Sym** %p, align 8
  %fieldLLL130 = getelementptr inbounds %Sym, %Sym* %p129, i32 0, i32 5
  %prev131 = load %Sym*, %Sym** %fieldLLL130, align 8
  store %Sym* %prev131, %Sym** %p, align 8
  br label %loop_top_block119

loop_top_block119:                                ; preds = %loop_continue_top_block118, %cond_then_block107
  %p120 = load %Sym*, %Sym** %p, align 8
  %icmpB = icmp ne %Sym* %p120, null
  br i1 %icmpB, label %cond_then_block121, label %cond_end_block122

cond_then_block121:                               ; preds = %loop_top_block119
  %p123 = load %Sym*, %Sym** %p, align 8
  %fieldLLL124 = getelementptr inbounds %Sym, %Sym* %p123, i32 0, i32 5
  %prev = load %Sym*, %Sym** %fieldLLL124, align 8
  %s125 = load %Sym*, %Sym** %s, align 8
  %eq126 = icmp eq %Sym* %prev, %s125
  br i1 %eq126, label %cond_jump_then127, label %cond_end128

cond_end_block122:                                ; preds = %loop_top_block119
  br label %cond_else_blockX112

cond_jump_then127:                                ; preds = %cond_then_block121
  call void (i8*, ...) @error(i8* bitcast ([28 x i8]* @171 to i8*))
  br label %cond_end128

cond_end128:                                      ; preds = %cond_jump_then127, %cond_then_block121
  br label %loop_continue_top_block118

cond_jump_then138:                                ; preds = %cond_jump_elif_then2
  call void @gexpr()
  %func_vt = load %CType, %CType* @func_vt, align 8
  call void @gen_assign_cast(%CType* @func_vt)
  %func_vt140 = load %CType, %CType* @func_vt, align 8
  %t141 = load i32, i32* getelementptr inbounds (%CType, %CType* @func_vt, i32 0, i32 0), align 4
  %andtmp142 = and i32 %t141, 15
  %eq143 = icmp eq i32 %andtmp142, 7
  br i1 %eq143, label %cond_jump_then144, label %cond_jump_elif0145

cond_end139:                                      ; preds = %cond_end148, %cond_jump_elif_then2
  call void @skip(i32 59)
  %rsym = load i32, i32* @rsym, align 4
  %fun_result183 = call i32 @gjmp(i32 %rsym)
  store i32 %fun_result183, i32* @rsym, align 4
  br label %cond_end28

cond_jump_then144:                                ; preds = %cond_jump_then138
  %func_vt150 = load %CType, %CType* @func_vt, align 8
  store %CType %func_vt150, %CType* %type149, align 8
  %type151 = load %CType, %CType* %type149, align 8
  call void @mk_pointer(%CType* %type149)
  %type152 = load %CType, %CType* %type149, align 8
  %func_vc = load i32, i32* @func_vc, align 4
  call void @vset(%CType* %type149, i32 498, i32 %func_vc)
  call void @indir()
  call void @vswap()
  call void @vstore()
  br label %cond_end148

cond_jump_elif0145:                               ; preds = %cond_jump_then138
  %func_vt153 = load %CType, %CType* @func_vt, align 8
  %t154 = load i32, i32* getelementptr inbounds (%CType, %CType* @func_vt, i32 0, i32 0), align 4
  store i32 3929, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.136, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_jump_elif_then0146:                          ; preds = %is_float_end
  %func_vt176 = load %CType, %CType* @func_vt, align 8
  %t177 = load i32, i32* getelementptr inbounds (%CType, %CType* @func_vt, i32 0, i32 0), align 4
  %fun_result178 = call i32 @rc_fret(i32 %t177)
  %fun_result179 = call i32 @gv(i32 %fun_result178)
  br label %cond_end148

cond_else_block147:                               ; preds = %is_float_end
  %fun_result180 = call i32 @gv(i32 4)
  br label %cond_end148

cond_end148:                                      ; preds = %cond_else_block147, %cond_jump_elif_then0146, %cond_jump_then144
  %vtop181 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop181 to i64
  %sub182 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub182 to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  br label %cond_end139

is_float:                                         ; preds = %cond_jump_elif0145
  %inline_result_variable = alloca i32, align 4
  %t155 = alloca i32, align 4
  store i32 %t154, i32* %t155, align 4
  %t156 = load i32, i32* %t155, align 4
  %andtmp157 = and i32 %t156, 15
  store i32 %andtmp157, i32* %bt, align 4
  %bt160 = load i32, i32* %bt, align 4
  %eq161 = icmp eq i32 %bt160, 10
  store i1 %eq161, i1* %oror159, align 1
  br i1 %eq161, label %cond_jump_end163, label %cond_jump_then162

is_float_end:                                     ; preds = %cond_jump_end169
  %inline_result_variable174 = load i32, i32* %inline_result_variable, align 4
  %icmpA175 = icmp ne i32 %inline_result_variable174, 0
  br i1 %icmpA175, label %cond_jump_elif_then0146, label %cond_else_block147

cond_jump_then162:                                ; preds = %is_float
  %bt164 = load i32, i32* %bt, align 4
  %eq165 = icmp eq i32 %bt164, 9
  %oror166 = or i1 %eq161, %eq165
  store i1 %oror166, i1* %oror159, align 1
  br label %cond_jump_end163

cond_jump_end163:                                 ; preds = %cond_jump_then162, %is_float
  %oror_result_value167 = load i1, i1* %oror159, align 1
  store i1 %oror_result_value167, i1* %oror158, align 1
  br i1 %oror_result_value167, label %cond_jump_end169, label %cond_jump_then168

cond_jump_then168:                                ; preds = %cond_jump_end163
  %bt170 = load i32, i32* %bt, align 4
  %eq171 = icmp eq i32 %bt170, 8
  %oror172 = or i1 %oror_result_value167, %eq171
  store i1 %oror172, i1* %oror158, align 1
  br label %cond_jump_end169

cond_jump_end169:                                 ; preds = %cond_jump_then168, %cond_jump_end163
  %oror_result_value173 = load i1, i1* %oror158, align 1
  %icastKX = zext i1 %oror_result_value173 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then188:                                ; preds = %cond_jump_elif_then3
  call void (i8*, ...) @error(i8* bitcast ([13 x i8]* @172 to i8*))
  br label %cond_end189

cond_end189:                                      ; preds = %cond_jump_then188, %cond_jump_elif_then3
  %bsym190 = load i32*, i32** %bsym, align 8
  %bsym191 = load i32*, i32** %bsym, align 8
  %derefference_valueB = load i32, i32* %bsym191, align 4
  %fun_result192 = call i32 @gjmp(i32 %derefference_valueB)
  store i32 %fun_result192, i32* %bsym190, align 4
  call void @next()
  call void @skip(i32 59)
  br label %cond_end28

cond_jump_then199:                                ; preds = %cond_jump_elif_then4
  call void (i8*, ...) @error(i8* bitcast ([16 x i8]* @173 to i8*))
  br label %cond_end200

cond_end200:                                      ; preds = %cond_jump_then199, %cond_jump_elif_then4
  %csym201 = load i32*, i32** %csym, align 8
  %csym202 = load i32*, i32** %csym, align 8
  %derefference_valueB203 = load i32, i32* %csym202, align 4
  %fun_result204 = call i32 @gjmp(i32 %derefference_valueB203)
  store i32 %fun_result204, i32* %csym201, align 4
  call void @next()
  call void @skip(i32 59)
  br label %cond_end28

cond_jump_then209:                                ; preds = %cond_jump_elif_then5
  call void @gexpr()
  call void @vpop()
  br label %cond_end210

cond_end210:                                      ; preds = %cond_jump_then209, %cond_jump_elif_then5
  call void @skip(i32 59)
  %ind211 = load i32, i32* @ind, align 4
  store i32 %ind211, i32* %d, align 4
  %ind212 = load i32, i32* @ind, align 4
  store i32 %ind212, i32* %c, align 4
  store i32 0, i32* %a, align 4
  store i32 0, i32* %b, align 4
  %tok213 = load i32, i32* @tok, align 4
  %not_eq214 = icmp ne i32 %tok213, 59
  br i1 %not_eq214, label %cond_jump_then215, label %cond_end216

cond_jump_then215:                                ; preds = %cond_end210
  call void @gexpr()
  %fun_result217 = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result217, i32* %a, align 4
  br label %cond_end216

cond_end216:                                      ; preds = %cond_jump_then215, %cond_end210
  call void @skip(i32 59)
  %tok218 = load i32, i32* @tok, align 4
  %not_eq219 = icmp ne i32 %tok218, 41
  br i1 %not_eq219, label %cond_jump_then220, label %cond_end221

cond_jump_then220:                                ; preds = %cond_end216
  %fun_result222 = call i32 @gjmp(i32 0)
  store i32 %fun_result222, i32* %e, align 4
  %ind223 = load i32, i32* @ind, align 4
  store i32 %ind223, i32* %c, align 4
  call void @gexpr()
  call void @vpop()
  %d224 = load i32, i32* %d, align 4
  call void @gjmp_addr(i32 %d224)
  %e225 = load i32, i32* %e, align 4
  call void @gsym(i32 %e225)
  br label %cond_end221

cond_end221:                                      ; preds = %cond_jump_then220, %cond_end216
  call void @skip(i32 41)
  %a226 = load i32, i32* %a, align 4
  %b227 = load i32, i32* %b, align 4
  %case_sym228 = load i32*, i32** %case_sym, align 8
  %def_sym229 = load i32*, i32** %def_sym, align 8
  %case_reg230 = load i32, i32* %case_reg, align 4
  call void @block(i32* %a, i32* %b, i32* %case_sym228, i32* %def_sym229, i32 %case_reg230, i32 0)
  %c231 = load i32, i32* %c, align 4
  call void @gjmp_addr(i32 %c231)
  %a232 = load i32, i32* %a, align 4
  call void @gsym(i32 %a232)
  %b233 = load i32, i32* %b, align 4
  %c234 = load i32, i32* %c, align 4
  call void @gsym_addr(i32 %b233, i32 %c234)
  br label %cond_end28

cond_jump_then259:                                ; preds = %cond_jump_elif_then7
  %ind261 = load i32, i32* @ind, align 4
  store i32 %ind261, i32* %c, align 4
  br label %cond_end260

cond_end260:                                      ; preds = %cond_jump_then259, %cond_jump_elif_then7
  %b262 = load i32, i32* %b, align 4
  %c263 = load i32, i32* %c, align 4
  call void @gsym_addr(i32 %b262, i32 %c263)
  %a264 = load i32, i32* %a, align 4
  call void @gsym(i32 %a264)
  br label %cond_end28

cond_jump_then271:                                ; preds = %cond_jump_elif_then8
  call void @expect(i8* bitcast ([7 x i8]* @174 to i8*))
  br label %cond_end272

cond_end272:                                      ; preds = %cond_jump_then271, %cond_jump_elif_then8
  call void @next()
  %fun_result273 = call i32 @expr_const()
  store i32 %fun_result273, i32* %v1, align 4
  %v1274 = load i32, i32* %v1, align 4
  store i32 %v1274, i32* %v2, align 4
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %icmpA276 = icmp ne i32 %gnu_ext, 0
  store i1 %icmpA276, i1* %andand275, align 1
  br i1 %icmpA276, label %cond_jump_then277, label %cond_jump_end278

cond_jump_then277:                                ; preds = %cond_end272
  %tok279 = load i32, i32* @tok, align 4
  %eq280 = icmp eq i32 %tok279, 204
  %andand281 = and i1 %icmpA276, %eq280
  store i1 %andand281, i1* %andand275, align 1
  br label %cond_jump_end278

cond_jump_end278:                                 ; preds = %cond_jump_then277, %cond_end272
  %andand_result_value282 = load i1, i1* %andand275, align 1
  br i1 %andand_result_value282, label %cond_jump_then283, label %cond_end284

cond_jump_then283:                                ; preds = %cond_jump_end278
  call void @next()
  %fun_result285 = call i32 @expr_const()
  store i32 %fun_result285, i32* %v2, align 4
  %v2286 = load i32, i32* %v2, align 4
  %v1287 = load i32, i32* %v1, align 4
  %le288 = icmp slt i32 %v2286, %v1287
  br i1 %le288, label %cond_jump_then289, label %cond_end290

cond_end284:                                      ; preds = %cond_end290, %cond_jump_end278
  %fun_result291 = call i32 @gjmp(i32 0)
  store i32 %fun_result291, i32* %b, align 4
  %case_sym292 = load i32*, i32** %case_sym, align 8
  %derefference_valueB293 = load i32, i32* %case_sym292, align 4
  call void @gsym(i32 %derefference_valueB293)
  %case_reg294 = load i32, i32* %case_reg, align 4
  call void @vseti(i32 %case_reg294, i32 0)
  %v1295 = load i32, i32* %v1, align 4
  call void @vpushi(i32 %v1295)
  %v1296 = load i32, i32* %v1, align 4
  %v2297 = load i32, i32* %v2, align 4
  %eq298 = icmp eq i32 %v1296, %v2297
  br i1 %eq298, label %cond_jump_then299, label %cond_else_block300

cond_jump_then289:                                ; preds = %cond_jump_then283
  call void (i8*, ...) @warning(i8* bitcast ([17 x i8]* @175 to i8*))
  br label %cond_end290

cond_end290:                                      ; preds = %cond_jump_then289, %cond_jump_then283
  br label %cond_end284

cond_jump_then299:                                ; preds = %cond_end284
  call void @gen_op(i32 148)
  %case_sym302 = load i32*, i32** %case_sym, align 8
  %fun_result303 = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result303, i32* %case_sym302, align 4
  br label %cond_end301

cond_else_block300:                               ; preds = %cond_end284
  call void @gen_op(i32 157)
  %case_sym304 = load i32*, i32** %case_sym, align 8
  %fun_result305 = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result305, i32* %case_sym304, align 4
  %case_reg306 = load i32, i32* %case_reg, align 4
  call void @vseti(i32 %case_reg306, i32 0)
  %v2307 = load i32, i32* %v2, align 4
  call void @vpushi(i32 %v2307)
  call void @gen_op(i32 158)
  %case_sym308 = load i32*, i32** %case_sym, align 8
  %case_sym309 = load i32*, i32** %case_sym, align 8
  %derefference_valueB310 = load i32, i32* %case_sym309, align 4
  %fun_result311 = call i32 @gtst(i32 1, i32 %derefference_valueB310)
  store i32 %fun_result311, i32* %case_sym308, align 4
  br label %cond_end301

cond_end301:                                      ; preds = %cond_else_block300, %cond_jump_then299
  %b312 = load i32, i32* %b, align 4
  call void @gsym(i32 %b312)
  call void @skip(i32 58)
  store i32 0, i32* %is_expr, align 4
  br label %block.block_after_label
  br label %cond_end28

block.block_after_label:                          ; preds = %cond_end417, %cond_end325, %cond_end301
  %tok442 = load i32, i32* @tok, align 4
  %eq443 = icmp eq i32 %tok442, 125
  br i1 %eq443, label %cond_jump_then444, label %cond_else_block445

cond_jump_then319:                                ; preds = %cond_jump_elif_then9
  call void @expect(i8* bitcast ([7 x i8]* @176 to i8*))
  br label %cond_end320

cond_end320:                                      ; preds = %cond_jump_then319, %cond_jump_elif_then9
  %def_sym321 = load i32*, i32** %def_sym, align 8
  %derefference_valueB322 = load i32, i32* %def_sym321, align 4
  %icmpA323 = icmp ne i32 %derefference_valueB322, 0
  br i1 %icmpA323, label %cond_jump_then324, label %cond_end325

cond_jump_then324:                                ; preds = %cond_end320
  call void (i8*, ...) @error(i8* bitcast ([19 x i8]* @177 to i8*))
  br label %cond_end325

cond_end325:                                      ; preds = %cond_jump_then324, %cond_end320
  %def_sym326 = load i32*, i32** %def_sym, align 8
  %ind327 = load i32, i32* @ind, align 4
  store i32 %ind327, i32* %def_sym326, align 4
  store i32 0, i32* %is_expr, align 4
  br label %block.block_after_label
  br label %cond_end28

cond_jump_then333:                                ; preds = %cond_jump_elif_then10
  %gnu_ext335 = load i32, i32* @gnu_ext, align 4
  %icmpA336 = icmp ne i32 %gnu_ext335, 0
  %andand337 = and i1 %eq332, %icmpA336
  store i1 %andand337, i1* %andand330, align 1
  br label %cond_jump_end334

cond_jump_end334:                                 ; preds = %cond_jump_then333, %cond_jump_elif_then10
  %andand_result_value338 = load i1, i1* %andand330, align 1
  br i1 %andand_result_value338, label %cond_jump_then339, label %cond_jump_elif0340

cond_jump_then339:                                ; preds = %cond_jump_end334
  call void @next()
  call void @gexpr()
  %vtop344 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL345 = getelementptr inbounds %SValue, %SValue* %vtop344, i32 0, i32 0
  %type346 = load %CType, %CType* %fieldLLL345, align 8
  %fieldVVV347 = getelementptr inbounds %CType, %CType* %fieldLLL345, i32 0, i32 0
  %t348 = load i32, i32* %fieldVVV347, align 4
  %andtmp349 = and i32 %t348, 15
  %not_eq350 = icmp ne i32 %andtmp349, 4
  br i1 %not_eq350, label %cond_jump_then351, label %cond_end352

cond_jump_elif0340:                               ; preds = %cond_jump_end334
  %tok353 = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok353, 313
  br i1 %gteq_signed, label %cond_jump_elif_then0341, label %cond_else_block342

cond_jump_elif_then0341:                          ; preds = %cond_jump_elif0340
  %tok354 = load i32, i32* @tok, align 4
  %fun_result355 = call %Sym* @label_find(i32 %tok354)
  store %Sym* %fun_result355, %Sym** %s, align 8
  %s356 = load %Sym*, %Sym** %s, align 8
  %logical_denial357 = icmp eq %Sym* %s356, null
  %castOOOO358 = zext i1 %logical_denial357 to i32
  %icmpA359 = icmp ne i32 %castOOOO358, 0
  br i1 %icmpA359, label %cond_jump_then360, label %cond_else_block361

cond_else_block342:                               ; preds = %cond_jump_elif0340
  call void @expect(i8* bitcast ([17 x i8]* @179 to i8*))
  br label %cond_end343

cond_end343:                                      ; preds = %cond_else_block342, %cond_end378, %cond_end352
  call void @skip(i32 59)
  br label %cond_end28

cond_jump_then351:                                ; preds = %cond_jump_then339
  call void @expect(i8* bitcast ([8 x i8]* @178 to i8*))
  br label %cond_end352

cond_end352:                                      ; preds = %cond_jump_then351, %cond_jump_then339
  call void @ggoto()
  br label %cond_end343

cond_jump_then360:                                ; preds = %cond_jump_elif_then0341
  %global_label_stack = load %Sym*, %Sym** @global_label_stack, align 8
  %tok363 = load i32, i32* @tok, align 4
  %fun_result364 = call %Sym* @label_push(%Sym** @global_label_stack, i32 %tok363, i32 1)
  store %Sym* %fun_result364, %Sym** %s, align 8
  br label %cond_end362

cond_else_block361:                               ; preds = %cond_jump_elif_then0341
  %s365 = load %Sym*, %Sym** %s, align 8
  %fieldLLL366 = getelementptr inbounds %Sym, %Sym* %s365, i32 0, i32 1
  %r = load i64, i64* %fieldLLL366, align 4
  %eq367 = icmp eq i64 %r, 2
  br i1 %eq367, label %cond_jump_then368, label %cond_end369

cond_end362:                                      ; preds = %cond_end369, %cond_jump_then360
  %s371 = load %Sym*, %Sym** %s, align 8
  %fieldLLL372 = getelementptr inbounds %Sym, %Sym* %s371, i32 0, i32 1
  %r373 = load i64, i64* %fieldLLL372, align 4
  %andtmp374 = and i64 %r373, 1
  %icmpA375 = icmp ne i64 %andtmp374, 0
  br i1 %icmpA375, label %cond_jump_then376, label %cond_else_block377

cond_jump_then368:                                ; preds = %cond_else_block361
  %s370 = load %Sym*, %Sym** %s, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s370, i32 0, i32 1
  store i64 1, i64* %fieldTU, align 4
  br label %cond_end369

cond_end369:                                      ; preds = %cond_jump_then368, %cond_else_block361
  br label %cond_end362

cond_jump_then376:                                ; preds = %cond_end362
  %s379 = load %Sym*, %Sym** %s, align 8
  %s380 = load %Sym*, %Sym** %s, align 8
  %fieldLLL381 = getelementptr inbounds %Sym, %Sym* %s380, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL381, align 8
  %icatXXXXXX = ptrtoint %Sym* %next to i64
  %icastM = trunc i64 %icatXXXXXX to i32
  %fun_result382 = call i32 @gjmp(i32 %icastM)
  %castBA = inttoptr i32 %fun_result382 to i8*
  %castAQ = bitcast i8* %castBA to %Sym*
  %fieldTU383 = getelementptr inbounds %Sym, %Sym* %s379, i32 0, i32 4
  store %Sym* %castAQ, %Sym** %fieldTU383, align 8
  br label %cond_end378

cond_else_block377:                               ; preds = %cond_end362
  %s384 = load %Sym*, %Sym** %s, align 8
  %fieldLLL385 = getelementptr inbounds %Sym, %Sym* %s384, i32 0, i32 4
  %next386 = load %Sym*, %Sym** %fieldLLL385, align 8
  %icatXXXXXX387 = ptrtoint %Sym* %next386 to i64
  %icastM388 = trunc i64 %icatXXXXXX387 to i32
  call void @gjmp_addr(i32 %icastM388)
  br label %cond_end378

cond_end378:                                      ; preds = %cond_else_block377, %cond_jump_then376
  call void @next()
  br label %cond_end343

cond_jump_then393:                                ; preds = %cond_jump_elif11
  %tok395 = load i32, i32* @tok, align 4
  %eq396 = icmp eq i32 %tok395, 311
  %oror397 = or i1 %eq392, %eq396
  store i1 %oror397, i1* %oror390, align 1
  br label %cond_jump_end394

cond_jump_end394:                                 ; preds = %cond_jump_then393, %cond_jump_elif11
  %oror_result_value398 = load i1, i1* %oror390, align 1
  store i1 %oror_result_value398, i1* %oror389, align 1
  br i1 %oror_result_value398, label %cond_jump_end400, label %cond_jump_then399

cond_jump_then399:                                ; preds = %cond_jump_end394
  %tok401 = load i32, i32* @tok, align 4
  %eq402 = icmp eq i32 %tok401, 312
  %oror403 = or i1 %oror_result_value398, %eq402
  store i1 %oror403, i1* %oror389, align 1
  br label %cond_jump_end400

cond_jump_end400:                                 ; preds = %cond_jump_then399, %cond_jump_end394
  %oror_result_value404 = load i1, i1* %oror389, align 1
  br i1 %oror_result_value404, label %cond_jump_elif_then11, label %cond_else_block

cond_jump_then408:                                ; preds = %cond_else_block
  %b411 = load i32, i32* %b, align 4
  %fun_result412 = call %Sym* @label_find(i32 %b411)
  store %Sym* %fun_result412, %Sym** %s, align 8
  %s413 = load %Sym*, %Sym** %s, align 8
  %icmpB414 = icmp ne %Sym* %s413, null
  br i1 %icmpB414, label %cond_jump_then415, label %cond_else_block416

cond_else_block409:                               ; preds = %cond_else_block
  %tok457 = load i32, i32* @tok, align 4
  %not_eq458 = icmp ne i32 %tok457, 59
  br i1 %not_eq458, label %cond_jump_then459, label %cond_end460

cond_end410:                                      ; preds = %cond_end460, %cond_end446
  br label %cond_end28

cond_jump_then415:                                ; preds = %cond_jump_then408
  %s418 = load %Sym*, %Sym** %s, align 8
  %fieldLLL419 = getelementptr inbounds %Sym, %Sym* %s418, i32 0, i32 1
  %r420 = load i64, i64* %fieldLLL419, align 4
  %eq421 = icmp eq i64 %r420, 0
  br i1 %eq421, label %cond_jump_then422, label %cond_end423

cond_else_block416:                               ; preds = %cond_jump_then408
  %global_label_stack434 = load %Sym*, %Sym** @global_label_stack, align 8
  %b435 = load i32, i32* %b, align 4
  %fun_result436 = call %Sym* @label_push(%Sym** @global_label_stack, i32 %b435, i32 0)
  store %Sym* %fun_result436, %Sym** %s, align 8
  br label %cond_end417

cond_end417:                                      ; preds = %cond_else_block416, %cond_end423
  %s437 = load %Sym*, %Sym** %s, align 8
  %ind438 = load i32, i32* @ind, align 4
  %castBA439 = inttoptr i32 %ind438 to i8*
  %castAQ440 = bitcast i8* %castBA439 to %Sym*
  %fieldTU441 = getelementptr inbounds %Sym, %Sym* %s437, i32 0, i32 4
  store %Sym* %castAQ440, %Sym** %fieldTU441, align 8
  br label %block.block_after_label

cond_jump_then422:                                ; preds = %cond_jump_then415
  %s424 = load %Sym*, %Sym** %s, align 8
  %fieldLLL425 = getelementptr inbounds %Sym, %Sym* %s424, i32 0, i32 0
  %v = load i32, i32* %fieldLLL425, align 4
  %fun_result426 = call i8* @get_tok_str(i32 %v, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([21 x i8]* @180 to i8*), i8* %fun_result426)
  br label %cond_end423

cond_end423:                                      ; preds = %cond_jump_then422, %cond_jump_then415
  %s427 = load %Sym*, %Sym** %s, align 8
  %fieldLLL428 = getelementptr inbounds %Sym, %Sym* %s427, i32 0, i32 4
  %next429 = load %Sym*, %Sym** %fieldLLL428, align 8
  %icatXXXXXX430 = ptrtoint %Sym* %next429 to i64
  %icastM431 = trunc i64 %icatXXXXXX430 to i32
  call void @gsym(i32 %icastM431)
  %s432 = load %Sym*, %Sym** %s, align 8
  %fieldTU433 = getelementptr inbounds %Sym, %Sym* %s432, i32 0, i32 1
  store i64 0, i64* %fieldTU433, align 4
  br label %cond_end417

cond_jump_then444:                                ; preds = %block.block_after_label
  call void (i8*, ...) @warning(i8* bitcast ([53 x i8]* @181 to i8*))
  br label %cond_end446

cond_else_block445:                               ; preds = %block.block_after_label
  %is_expr447 = load i32, i32* %is_expr, align 4
  %icmpA448 = icmp ne i32 %is_expr447, 0
  br i1 %icmpA448, label %cond_jump_then449, label %cond_end450

cond_end446:                                      ; preds = %cond_end450, %cond_jump_then444
  br label %cond_end410

cond_jump_then449:                                ; preds = %cond_else_block445
  call void @vpop()
  br label %cond_end450

cond_end450:                                      ; preds = %cond_jump_then449, %cond_else_block445
  %bsym451 = load i32*, i32** %bsym, align 8
  %csym452 = load i32*, i32** %csym, align 8
  %case_sym453 = load i32*, i32** %case_sym, align 8
  %def_sym454 = load i32*, i32** %def_sym, align 8
  %case_reg455 = load i32, i32* %case_reg, align 4
  %is_expr456 = load i32, i32* %is_expr, align 4
  call void @block(i32* %bsym451, i32* %csym452, i32* %case_sym453, i32* %def_sym454, i32 %case_reg455, i32 %is_expr456)
  br label %cond_end446

cond_jump_then459:                                ; preds = %cond_else_block409
  %is_expr461 = load i32, i32* %is_expr, align 4
  %icmpA462 = icmp ne i32 %is_expr461, 0
  br i1 %icmpA462, label %cond_jump_then463, label %cond_else_block464

cond_end460:                                      ; preds = %cond_end465, %cond_else_block409
  call void @skip(i32 59)
  br label %cond_end410

cond_jump_then463:                                ; preds = %cond_jump_then459
  call void @vpop()
  call void @gexpr()
  br label %cond_end465

cond_else_block464:                               ; preds = %cond_jump_then459
  call void @gexpr()
  call void @vpop()
  br label %cond_end465

cond_end465:                                      ; preds = %cond_else_block464, %cond_jump_then463
  br label %cond_end460
}

define internal i32 @expr_const() {
entry:
  %c = alloca i32, align 4
  call void @expr_const1()
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 1023
  %not_eq = icmp ne i32 %andtmp, 240
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @expect(i8* bitcast ([20 x i8]* @168 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %vtop1 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL2 = getelementptr inbounds %SValue, %SValue* %vtop1, i32 0, i32 3
  %c3 = load %CValue, %CValue* %fieldLLL2, align 16
  %ICASTO = bitcast %CValue* %fieldLLL2 to i32*
  %i = load i32, i32* %ICASTO, align 4
  store i32 %i, i32* %c, align 4
  call void @vpop()
  %c4 = load i32, i32* %c, align 4
  ret i32 %c4
}

define internal void @expr_eq() {
entry:
  %oror305 = alloca i1, align 1
  %oror304 = alloca i1, align 1
  %bt301 = alloca i32, align 4
  %oror265 = alloca i1, align 1
  %oror252 = alloca i1, align 1
  %oror242 = alloca i1, align 1
  %oror232 = alloca i1, align 1
  %oror222 = alloca i1, align 1
  %oror204 = alloca i1, align 1
  %oror193 = alloca i1, align 1
  %oror180 = alloca i1, align 1
  %oror164 = alloca i1, align 1
  %oror141 = alloca i1, align 1
  %oror140 = alloca i1, align 1
  %bt137 = alloca i32, align 4
  %oror112 = alloca i1, align 1
  %oror111 = alloca i1, align 1
  %bt108 = alloca i32, align 4
  %oror102 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror40 = alloca i1, align 1
  %oror39 = alloca i1, align 1
  %bt = alloca i32, align 4
  %oror = alloca i1, align 1
  %c = alloca i32, align 4
  %boolean = alloca %CType, align 8
  %castXXXX6 = bitcast %CType* %boolean to i8*
  %0 = call i8* @memset(i8* %castXXXX6, i32 0, i64 16)
  %type2 = alloca %CType, align 8
  %castXXXX3 = bitcast %CType* %type2 to i8*
  %1 = call i8* @memset(i8* %castXXXX3, i32 0, i64 16)
  %type1 = alloca %CType, align 8
  %castXXXX2 = bitcast %CType* %type1 to i8*
  %2 = call i8* @memset(i8* %castXXXX2, i32 0, i64 16)
  %type = alloca %CType, align 8
  %castXXXX1 = bitcast %CType* %type to i8*
  %3 = call i8* @memset(i8* %castXXXX1, i32 0, i64 16)
  %sv = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %sv to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %bt2 = alloca i32, align 4
  %bt1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %rc = alloca i32, align 4
  %r2 = alloca i32, align 4
  %r1 = alloca i32, align 4
  %u = alloca i32, align 4
  %tt = alloca i32, align 4
  %const_wanted = load i32, i32* @const_wanted, align 4
  %icmpA = icmp ne i32 %const_wanted, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  call void @expr_lor_const()
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 63
  br i1 %eq, label %cond_jump_then4, label %cond_end5

cond_else_block:                                  ; preds = %entry
  call void @expr_lor()
  %tok26 = load i32, i32* @tok, align 4
  %eq27 = icmp eq i32 %tok26, 63
  br i1 %eq27, label %cond_jump_then28, label %cond_end29

cond_end:                                         ; preds = %cond_end29, %cond_end5
  ret void

cond_jump_then4:                                  ; preds = %cond_jump_then
  %boolean7 = load %CType, %CType* %boolean, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %boolean, i32 0, i32 0
  store i32 11, i32* %fieldTTT, align 4
  call void @vdup()
  %boolean8 = load %CType, %CType* %boolean, align 8
  call void @gen_cast(%CType* %boolean)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 3
  %c9 = load %CValue, %CValue* %fieldLLL, align 16
  %ICASTO = bitcast %CValue* %fieldLLL to i32*
  %i = load i32, i32* %ICASTO, align 4
  store i32 %i, i32* %c, align 4
  call void @vpop()
  call void @next()
  %tok10 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok10, 58
  store i1 %not_eq, i1* %oror, align 1
  br i1 %not_eq, label %cond_jump_end, label %cond_jump_then11

cond_end5:                                        ; preds = %cond_end25, %cond_jump_then
  br label %cond_end

cond_jump_then11:                                 ; preds = %cond_jump_then4
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %logical_denial = icmp eq i32 %gnu_ext, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA12 = icmp ne i32 %castOOOO, 0
  %oror13 = or i1 %not_eq, %icmpA12
  store i1 %oror13, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then11, %cond_jump_then4
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then14, label %cond_end15

cond_jump_then14:                                 ; preds = %cond_jump_end
  call void @vpop()
  call void @gexpr()
  br label %cond_end15

cond_end15:                                       ; preds = %cond_jump_then14, %cond_jump_end
  %c16 = load i32, i32* %c, align 4
  %logical_denial17 = icmp eq i32 %c16, 0
  %castOOOO18 = zext i1 %logical_denial17 to i32
  %icmpA19 = icmp ne i32 %castOOOO18, 0
  br i1 %icmpA19, label %cond_jump_then20, label %cond_end21

cond_jump_then20:                                 ; preds = %cond_end15
  call void @vpop()
  br label %cond_end21

cond_end21:                                       ; preds = %cond_jump_then20, %cond_end15
  call void @skip(i32 58)
  call void @expr_eq()
  %c22 = load i32, i32* %c, align 4
  %icmpA23 = icmp ne i32 %c22, 0
  br i1 %icmpA23, label %cond_jump_then24, label %cond_end25

cond_jump_then24:                                 ; preds = %cond_end21
  call void @vpop()
  br label %cond_end25

cond_end25:                                       ; preds = %cond_jump_then24, %cond_end21
  br label %cond_end5

cond_jump_then28:                                 ; preds = %cond_else_block
  call void @next()
  %vtop30 = load %SValue*, %SValue** @vtop, align 8
  %not_eq31 = icmp ne %SValue* %vtop30, getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0)
  br i1 %not_eq31, label %cond_jump_then32, label %cond_end33

cond_end29:                                       ; preds = %cond_end354, %cond_else_block
  br label %cond_end

cond_jump_then32:                                 ; preds = %cond_jump_then28
  %vtop34 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL35 = getelementptr inbounds %SValue, %SValue* %vtop34, i32 0, i32 0
  %type36 = load %CType, %CType* %fieldLLL35, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL35, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  store i32 3603, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.130, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end33:                                       ; preds = %cond_end59, %cond_jump_then28
  %tok70 = load i32, i32* @tok, align 4
  %eq71 = icmp eq i32 %tok70, 58
  store i1 %eq71, i1* %andand, align 1
  br i1 %eq71, label %cond_jump_then72, label %cond_jump_end73

is_float:                                         ; preds = %cond_jump_then32
  %inline_result_variable = alloca i32, align 4
  %t37 = alloca i32, align 4
  store i32 %t, i32* %t37, align 4
  %t38 = load i32, i32* %t37, align 4
  %andtmp = and i32 %t38, 15
  store i32 %andtmp, i32* %bt, align 4
  %bt41 = load i32, i32* %bt, align 4
  %eq42 = icmp eq i32 %bt41, 10
  store i1 %eq42, i1* %oror40, align 1
  br i1 %eq42, label %cond_jump_end44, label %cond_jump_then43

is_float_end:                                     ; preds = %cond_jump_end50
  %inline_result_variable55 = load i32, i32* %inline_result_variable, align 4
  %icmpA56 = icmp ne i32 %inline_result_variable55, 0
  br i1 %icmpA56, label %cond_jump_then57, label %cond_else_block58

cond_jump_then43:                                 ; preds = %is_float
  %bt45 = load i32, i32* %bt, align 4
  %eq46 = icmp eq i32 %bt45, 9
  %oror47 = or i1 %eq42, %eq46
  store i1 %oror47, i1* %oror40, align 1
  br label %cond_jump_end44

cond_jump_end44:                                  ; preds = %cond_jump_then43, %is_float
  %oror_result_value48 = load i1, i1* %oror40, align 1
  store i1 %oror_result_value48, i1* %oror39, align 1
  br i1 %oror_result_value48, label %cond_jump_end50, label %cond_jump_then49

cond_jump_then49:                                 ; preds = %cond_jump_end44
  %bt51 = load i32, i32* %bt, align 4
  %eq52 = icmp eq i32 %bt51, 8
  %oror53 = or i1 %oror_result_value48, %eq52
  store i1 %oror53, i1* %oror39, align 1
  br label %cond_jump_end50

cond_jump_end50:                                  ; preds = %cond_jump_then49, %cond_jump_end44
  %oror_result_value54 = load i1, i1* %oror39, align 1
  %icastKX = zext i1 %oror_result_value54 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then57:                                 ; preds = %is_float_end
  store i32 2, i32* %rc, align 4
  %vtop60 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL61 = getelementptr inbounds %SValue, %SValue* %vtop60, i32 0, i32 0
  %type62 = load %CType, %CType* %fieldLLL61, align 8
  %fieldVVV63 = getelementptr inbounds %CType, %CType* %fieldLLL61, i32 0, i32 0
  %t64 = load i32, i32* %fieldVVV63, align 4
  %andtmp65 = and i32 %t64, 15
  %eq66 = icmp eq i32 %andtmp65, 10
  br i1 %eq66, label %cond_jump_then67, label %cond_end68

cond_else_block58:                                ; preds = %is_float_end
  store i32 1, i32* %rc, align 4
  br label %cond_end59

cond_end59:                                       ; preds = %cond_else_block58, %cond_end68
  %rc69 = load i32, i32* %rc, align 4
  %fun_result = call i32 @gv(i32 %rc69)
  call void @save_regs(i32 1)
  br label %cond_end33

cond_jump_then67:                                 ; preds = %cond_jump_then57
  store i32 64, i32* %rc, align 4
  br label %cond_end68

cond_end68:                                       ; preds = %cond_jump_then67, %cond_jump_then57
  br label %cond_end59

cond_jump_then72:                                 ; preds = %cond_end33
  %gnu_ext74 = load i32, i32* @gnu_ext, align 4
  %icmpA75 = icmp ne i32 %gnu_ext74, 0
  %andand76 = and i1 %eq71, %icmpA75
  store i1 %andand76, i1* %andand, align 1
  br label %cond_jump_end73

cond_jump_end73:                                  ; preds = %cond_jump_then72, %cond_end33
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then77, label %cond_else_block78

cond_jump_then77:                                 ; preds = %cond_jump_end73
  call void @gv_dup()
  %fun_result80 = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result80, i32* %tt, align 4
  br label %cond_end79

cond_else_block78:                                ; preds = %cond_jump_end73
  %fun_result81 = call i32 @gtst(i32 1, i32 0)
  store i32 %fun_result81, i32* %tt, align 4
  call void @gexpr()
  br label %cond_end79

cond_end79:                                       ; preds = %cond_else_block78, %cond_jump_then77
  %vtop82 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL83 = getelementptr inbounds %SValue, %SValue* %vtop82, i32 0, i32 0
  %type84 = load %CType, %CType* %fieldLLL83, align 8
  store %CType %type84, %CType* %type1, align 8
  %vtop85 = load %SValue*, %SValue** @vtop, align 8
  %derefference_valueB = load %SValue, %SValue* %vtop85, align 16
  store %SValue %derefference_valueB, %SValue* %sv, align 16
  %vtop86 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop86 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  call void @skip(i32 58)
  %fun_result87 = call i32 @gjmp(i32 0)
  store i32 %fun_result87, i32* %u, align 4
  %tt88 = load i32, i32* %tt, align 4
  call void @gsym(i32 %tt88)
  call void @expr_eq()
  %vtop89 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL90 = getelementptr inbounds %SValue, %SValue* %vtop89, i32 0, i32 0
  %type91 = load %CType, %CType* %fieldLLL90, align 8
  store %CType %type91, %CType* %type2, align 8
  %type192 = load %CType, %CType* %type1, align 8
  %fieldVVV93 = getelementptr inbounds %CType, %CType* %type1, i32 0, i32 0
  %t94 = load i32, i32* %fieldVVV93, align 4
  store i32 %t94, i32* %t1, align 4
  %t195 = load i32, i32* %t1, align 4
  %andtmp96 = and i32 %t195, 15
  store i32 %andtmp96, i32* %bt1, align 4
  %type297 = load %CType, %CType* %type2, align 8
  %fieldVVV98 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  %t99 = load i32, i32* %fieldVVV98, align 4
  store i32 %t99, i32* %t2, align 4
  %t2100 = load i32, i32* %t2, align 4
  %andtmp101 = and i32 %t2100, 15
  store i32 %andtmp101, i32* %bt2, align 4
  %bt1103 = load i32, i32* %bt1, align 4
  store i32 3637, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.131, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float104

is_float104:                                      ; preds = %cond_end79
  %inline_result_variable105 = alloca i32, align 4
  %t106 = alloca i32, align 4
  store i32 %bt1103, i32* %t106, align 4
  %t109 = load i32, i32* %t106, align 4
  %andtmp110 = and i32 %t109, 15
  store i32 %andtmp110, i32* %bt108, align 4
  %bt113 = load i32, i32* %bt108, align 4
  %eq114 = icmp eq i32 %bt113, 10
  store i1 %eq114, i1* %oror112, align 1
  br i1 %eq114, label %cond_jump_end116, label %cond_jump_then115

is_float_end107:                                  ; preds = %cond_jump_end122
  %inline_result_variable128 = load i32, i32* %inline_result_variable105, align 4
  %icmpA129 = icmp ne i32 %inline_result_variable128, 0
  store i1 %icmpA129, i1* %oror102, align 1
  br i1 %icmpA129, label %cond_jump_end131, label %cond_jump_then130

cond_jump_then115:                                ; preds = %is_float104
  %bt117 = load i32, i32* %bt108, align 4
  %eq118 = icmp eq i32 %bt117, 9
  %oror119 = or i1 %eq114, %eq118
  store i1 %oror119, i1* %oror112, align 1
  br label %cond_jump_end116

cond_jump_end116:                                 ; preds = %cond_jump_then115, %is_float104
  %oror_result_value120 = load i1, i1* %oror112, align 1
  store i1 %oror_result_value120, i1* %oror111, align 1
  br i1 %oror_result_value120, label %cond_jump_end122, label %cond_jump_then121

cond_jump_then121:                                ; preds = %cond_jump_end116
  %bt123 = load i32, i32* %bt108, align 4
  %eq124 = icmp eq i32 %bt123, 8
  %oror125 = or i1 %oror_result_value120, %eq124
  store i1 %oror125, i1* %oror111, align 1
  br label %cond_jump_end122

cond_jump_end122:                                 ; preds = %cond_jump_then121, %cond_jump_end116
  %oror_result_value126 = load i1, i1* %oror111, align 1
  %icastKX127 = zext i1 %oror_result_value126 to i32
  store i32 %icastKX127, i32* %inline_result_variable105, align 4
  br label %is_float_end107

cond_jump_then130:                                ; preds = %is_float_end107
  %bt2132 = load i32, i32* %bt2, align 4
  store i32 3637, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.132, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float133

cond_jump_end131:                                 ; preds = %is_float_end136, %is_float_end107
  %oror_result_value160 = load i1, i1* %oror102, align 1
  br i1 %oror_result_value160, label %cond_jump_then161, label %cond_jump_elif0

is_float133:                                      ; preds = %cond_jump_then130
  %inline_result_variable134 = alloca i32, align 4
  %t135 = alloca i32, align 4
  store i32 %bt2132, i32* %t135, align 4
  %t138 = load i32, i32* %t135, align 4
  %andtmp139 = and i32 %t138, 15
  store i32 %andtmp139, i32* %bt137, align 4
  %bt142 = load i32, i32* %bt137, align 4
  %eq143 = icmp eq i32 %bt142, 10
  store i1 %eq143, i1* %oror141, align 1
  br i1 %eq143, label %cond_jump_end145, label %cond_jump_then144

is_float_end136:                                  ; preds = %cond_jump_end151
  %inline_result_variable157 = load i32, i32* %inline_result_variable134, align 4
  %icmpA158 = icmp ne i32 %inline_result_variable157, 0
  %oror159 = or i1 %icmpA129, %icmpA158
  store i1 %oror159, i1* %oror102, align 1
  br label %cond_jump_end131

cond_jump_then144:                                ; preds = %is_float133
  %bt146 = load i32, i32* %bt137, align 4
  %eq147 = icmp eq i32 %bt146, 9
  %oror148 = or i1 %eq143, %eq147
  store i1 %oror148, i1* %oror141, align 1
  br label %cond_jump_end145

cond_jump_end145:                                 ; preds = %cond_jump_then144, %is_float133
  %oror_result_value149 = load i1, i1* %oror141, align 1
  store i1 %oror_result_value149, i1* %oror140, align 1
  br i1 %oror_result_value149, label %cond_jump_end151, label %cond_jump_then150

cond_jump_then150:                                ; preds = %cond_jump_end145
  %bt152 = load i32, i32* %bt137, align 4
  %eq153 = icmp eq i32 %bt152, 8
  %oror154 = or i1 %oror_result_value149, %eq153
  store i1 %oror154, i1* %oror140, align 1
  br label %cond_jump_end151

cond_jump_end151:                                 ; preds = %cond_jump_then150, %cond_jump_end145
  %oror_result_value155 = load i1, i1* %oror140, align 1
  %icastKX156 = zext i1 %oror_result_value155 to i32
  store i32 %icastKX156, i32* %inline_result_variable134, align 4
  br label %is_float_end136

cond_jump_then161:                                ; preds = %cond_jump_end131
  %bt1165 = load i32, i32* %bt1, align 4
  %eq166 = icmp eq i32 %bt1165, 10
  store i1 %eq166, i1* %oror164, align 1
  br i1 %eq166, label %cond_jump_end168, label %cond_jump_then167

cond_jump_elif0:                                  ; preds = %cond_jump_end131
  %bt1194 = load i32, i32* %bt1, align 4
  %eq195 = icmp eq i32 %bt1194, 12
  store i1 %eq195, i1* %oror193, align 1
  br i1 %eq195, label %cond_jump_end197, label %cond_jump_then196

cond_jump_elif_then0:                             ; preds = %cond_jump_end197
  %type202 = load %CType, %CType* %type, align 8
  %fieldTTT203 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 12, i32* %fieldTTT203, align 4
  %t1205 = load i32, i32* %t1, align 4
  %andtmp206 = and i32 %t1205, 31
  %eq207 = icmp eq i32 %andtmp206, 28
  store i1 %eq207, i1* %oror204, align 1
  br i1 %eq207, label %cond_jump_end209, label %cond_jump_then208

cond_jump_elif1:                                  ; preds = %cond_jump_end197
  %bt1223 = load i32, i32* %bt1, align 4
  %eq224 = icmp eq i32 %bt1223, 4
  store i1 %eq224, i1* %oror222, align 1
  br i1 %eq224, label %cond_jump_end226, label %cond_jump_then225

cond_jump_elif_then1:                             ; preds = %cond_jump_end226
  %type1231 = load %CType, %CType* %type1, align 8
  store %CType %type1231, %CType* %type, align 8
  br label %cond_end163

cond_jump_elif2:                                  ; preds = %cond_jump_end226
  %bt1233 = load i32, i32* %bt1, align 4
  %eq234 = icmp eq i32 %bt1233, 6
  store i1 %eq234, i1* %oror232, align 1
  br i1 %eq234, label %cond_jump_end236, label %cond_jump_then235

cond_jump_elif_then2:                             ; preds = %cond_jump_end236
  %type1241 = load %CType, %CType* %type1, align 8
  store %CType %type1241, %CType* %type, align 8
  br label %cond_end163

cond_jump_elif3:                                  ; preds = %cond_jump_end236
  %bt1243 = load i32, i32* %bt1, align 4
  %eq244 = icmp eq i32 %bt1243, 7
  store i1 %eq244, i1* %oror242, align 1
  br i1 %eq244, label %cond_jump_end246, label %cond_jump_then245

cond_jump_elif_then3:                             ; preds = %cond_jump_end246
  %type1251 = load %CType, %CType* %type1, align 8
  store %CType %type1251, %CType* %type, align 8
  br label %cond_end163

cond_jump_elif4:                                  ; preds = %cond_jump_end246
  %bt1253 = load i32, i32* %bt1, align 4
  %eq254 = icmp eq i32 %bt1253, 3
  store i1 %eq254, i1* %oror252, align 1
  br i1 %eq254, label %cond_jump_end256, label %cond_jump_then255

cond_jump_elif_then4:                             ; preds = %cond_jump_end256
  %type261 = load %CType, %CType* %type, align 8
  %fieldTTT262 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 3, i32* %fieldTTT262, align 4
  br label %cond_end163

cond_else_block162:                               ; preds = %cond_jump_end256
  %type263 = load %CType, %CType* %type, align 8
  %fieldTTT264 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 0, i32* %fieldTTT264, align 4
  %t1266 = load i32, i32* %t1, align 4
  %andtmp267 = and i32 %t1266, 31
  %eq268 = icmp eq i32 %andtmp267, 16
  store i1 %eq268, i1* %oror265, align 1
  br i1 %eq268, label %cond_jump_end270, label %cond_jump_then269

cond_end163:                                      ; preds = %cond_end277, %cond_jump_elif_then4, %cond_jump_elif_then3, %cond_jump_elif_then2, %cond_jump_elif_then1, %cond_end216, %cond_end177
  %type284 = load %CType, %CType* %type, align 8
  call void @gen_cast(%CType* %type)
  %vtop285 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL286 = getelementptr inbounds %SValue, %SValue* %vtop285, i32 0, i32 0
  %type287 = load %CType, %CType* %fieldLLL286, align 8
  %fieldVVV288 = getelementptr inbounds %CType, %CType* %fieldLLL286, i32 0, i32 0
  %t289 = load i32, i32* %fieldVVV288, align 4
  %andtmp290 = and i32 %t289, 15
  %eq291 = icmp eq i32 7, %andtmp290
  br i1 %eq291, label %cond_jump_then292, label %cond_end293

cond_jump_then167:                                ; preds = %cond_jump_then161
  %bt2169 = load i32, i32* %bt2, align 4
  %eq170 = icmp eq i32 %bt2169, 10
  %oror171 = or i1 %eq166, %eq170
  store i1 %oror171, i1* %oror164, align 1
  br label %cond_jump_end168

cond_jump_end168:                                 ; preds = %cond_jump_then167, %cond_jump_then161
  %oror_result_value172 = load i1, i1* %oror164, align 1
  br i1 %oror_result_value172, label %cond_jump_then173, label %cond_jump_elif0174

cond_jump_then173:                                ; preds = %cond_jump_end168
  %type178 = load %CType, %CType* %type, align 8
  %fieldTTT179 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 10, i32* %fieldTTT179, align 4
  br label %cond_end177

cond_jump_elif0174:                               ; preds = %cond_jump_end168
  %bt1181 = load i32, i32* %bt1, align 4
  %eq182 = icmp eq i32 %bt1181, 9
  store i1 %eq182, i1* %oror180, align 1
  br i1 %eq182, label %cond_jump_end184, label %cond_jump_then183

cond_jump_elif_then0175:                          ; preds = %cond_jump_end184
  %type189 = load %CType, %CType* %type, align 8
  %fieldTTT190 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 9, i32* %fieldTTT190, align 4
  br label %cond_end177

cond_else_block176:                               ; preds = %cond_jump_end184
  %type191 = load %CType, %CType* %type, align 8
  %fieldTTT192 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 8, i32* %fieldTTT192, align 4
  br label %cond_end177

cond_end177:                                      ; preds = %cond_else_block176, %cond_jump_elif_then0175, %cond_jump_then173
  br label %cond_end163

cond_jump_then183:                                ; preds = %cond_jump_elif0174
  %bt2185 = load i32, i32* %bt2, align 4
  %eq186 = icmp eq i32 %bt2185, 9
  %oror187 = or i1 %eq182, %eq186
  store i1 %oror187, i1* %oror180, align 1
  br label %cond_jump_end184

cond_jump_end184:                                 ; preds = %cond_jump_then183, %cond_jump_elif0174
  %oror_result_value188 = load i1, i1* %oror180, align 1
  br i1 %oror_result_value188, label %cond_jump_elif_then0175, label %cond_else_block176

cond_jump_then196:                                ; preds = %cond_jump_elif0
  %bt2198 = load i32, i32* %bt2, align 4
  %eq199 = icmp eq i32 %bt2198, 12
  %oror200 = or i1 %eq195, %eq199
  store i1 %oror200, i1* %oror193, align 1
  br label %cond_jump_end197

cond_jump_end197:                                 ; preds = %cond_jump_then196, %cond_jump_elif0
  %oror_result_value201 = load i1, i1* %oror193, align 1
  br i1 %oror_result_value201, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_then208:                                ; preds = %cond_jump_elif_then0
  %t2210 = load i32, i32* %t2, align 4
  %andtmp211 = and i32 %t2210, 31
  %eq212 = icmp eq i32 %andtmp211, 28
  %oror213 = or i1 %eq207, %eq212
  store i1 %oror213, i1* %oror204, align 1
  br label %cond_jump_end209

cond_jump_end209:                                 ; preds = %cond_jump_then208, %cond_jump_elif_then0
  %oror_result_value214 = load i1, i1* %oror204, align 1
  br i1 %oror_result_value214, label %cond_jump_then215, label %cond_end216

cond_jump_then215:                                ; preds = %cond_jump_end209
  %type217 = load %CType, %CType* %type, align 8
  %type218 = load %CType, %CType* %type, align 8
  %fieldVVV219 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t220 = load i32, i32* %fieldVVV219, align 4
  %ortmp = or i32 %t220, 16
  %fieldTTT221 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTTT221, align 4
  br label %cond_end216

cond_end216:                                      ; preds = %cond_jump_then215, %cond_jump_end209
  br label %cond_end163

cond_jump_then225:                                ; preds = %cond_jump_elif1
  %bt2227 = load i32, i32* %bt2, align 4
  %eq228 = icmp eq i32 %bt2227, 4
  %oror229 = or i1 %eq224, %eq228
  store i1 %oror229, i1* %oror222, align 1
  br label %cond_jump_end226

cond_jump_end226:                                 ; preds = %cond_jump_then225, %cond_jump_elif1
  %oror_result_value230 = load i1, i1* %oror222, align 1
  br i1 %oror_result_value230, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_then235:                                ; preds = %cond_jump_elif2
  %bt2237 = load i32, i32* %bt2, align 4
  %eq238 = icmp eq i32 %bt2237, 6
  %oror239 = or i1 %eq234, %eq238
  store i1 %oror239, i1* %oror232, align 1
  br label %cond_jump_end236

cond_jump_end236:                                 ; preds = %cond_jump_then235, %cond_jump_elif2
  %oror_result_value240 = load i1, i1* %oror232, align 1
  br i1 %oror_result_value240, label %cond_jump_elif_then2, label %cond_jump_elif3

cond_jump_then245:                                ; preds = %cond_jump_elif3
  %bt2247 = load i32, i32* %bt2, align 4
  %eq248 = icmp eq i32 %bt2247, 7
  %oror249 = or i1 %eq244, %eq248
  store i1 %oror249, i1* %oror242, align 1
  br label %cond_jump_end246

cond_jump_end246:                                 ; preds = %cond_jump_then245, %cond_jump_elif3
  %oror_result_value250 = load i1, i1* %oror242, align 1
  br i1 %oror_result_value250, label %cond_jump_elif_then3, label %cond_jump_elif4

cond_jump_then255:                                ; preds = %cond_jump_elif4
  %bt2257 = load i32, i32* %bt2, align 4
  %eq258 = icmp eq i32 %bt2257, 3
  %oror259 = or i1 %eq254, %eq258
  store i1 %oror259, i1* %oror252, align 1
  br label %cond_jump_end256

cond_jump_end256:                                 ; preds = %cond_jump_then255, %cond_jump_elif4
  %oror_result_value260 = load i1, i1* %oror252, align 1
  br i1 %oror_result_value260, label %cond_jump_elif_then4, label %cond_else_block162

cond_jump_then269:                                ; preds = %cond_else_block162
  %t2271 = load i32, i32* %t2, align 4
  %andtmp272 = and i32 %t2271, 31
  %eq273 = icmp eq i32 %andtmp272, 16
  %oror274 = or i1 %eq268, %eq273
  store i1 %oror274, i1* %oror265, align 1
  br label %cond_jump_end270

cond_jump_end270:                                 ; preds = %cond_jump_then269, %cond_else_block162
  %oror_result_value275 = load i1, i1* %oror265, align 1
  br i1 %oror_result_value275, label %cond_jump_then276, label %cond_end277

cond_jump_then276:                                ; preds = %cond_jump_end270
  %type278 = load %CType, %CType* %type, align 8
  %type279 = load %CType, %CType* %type, align 8
  %fieldVVV280 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t281 = load i32, i32* %fieldVVV280, align 4
  %ortmp282 = or i32 %t281, 16
  %fieldTTT283 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %ortmp282, i32* %fieldTTT283, align 4
  br label %cond_end277

cond_end277:                                      ; preds = %cond_jump_then276, %cond_jump_end270
  br label %cond_end163

cond_jump_then292:                                ; preds = %cond_end163
  call void @gaddrof()
  br label %cond_end293

cond_end293:                                      ; preds = %cond_jump_then292, %cond_end163
  store i32 1, i32* %rc, align 4
  %type294 = load %CType, %CType* %type, align 8
  %fieldVVV295 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t296 = load i32, i32* %fieldVVV295, align 4
  store i32 3678, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.133, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float297

is_float297:                                      ; preds = %cond_end293
  %inline_result_variable298 = alloca i32, align 4
  %t299 = alloca i32, align 4
  store i32 %t296, i32* %t299, align 4
  %t302 = load i32, i32* %t299, align 4
  %andtmp303 = and i32 %t302, 15
  store i32 %andtmp303, i32* %bt301, align 4
  %bt306 = load i32, i32* %bt301, align 4
  %eq307 = icmp eq i32 %bt306, 10
  store i1 %eq307, i1* %oror305, align 1
  br i1 %eq307, label %cond_jump_end309, label %cond_jump_then308

is_float_end300:                                  ; preds = %cond_jump_end315
  %inline_result_variable321 = load i32, i32* %inline_result_variable298, align 4
  %icmpA322 = icmp ne i32 %inline_result_variable321, 0
  br i1 %icmpA322, label %cond_jump_then323, label %cond_jump_elif0324

cond_jump_then308:                                ; preds = %is_float297
  %bt310 = load i32, i32* %bt301, align 4
  %eq311 = icmp eq i32 %bt310, 9
  %oror312 = or i1 %eq307, %eq311
  store i1 %oror312, i1* %oror305, align 1
  br label %cond_jump_end309

cond_jump_end309:                                 ; preds = %cond_jump_then308, %is_float297
  %oror_result_value313 = load i1, i1* %oror305, align 1
  store i1 %oror_result_value313, i1* %oror304, align 1
  br i1 %oror_result_value313, label %cond_jump_end315, label %cond_jump_then314

cond_jump_then314:                                ; preds = %cond_jump_end309
  %bt316 = load i32, i32* %bt301, align 4
  %eq317 = icmp eq i32 %bt316, 8
  %oror318 = or i1 %oror_result_value313, %eq317
  store i1 %oror318, i1* %oror304, align 1
  br label %cond_jump_end315

cond_jump_end315:                                 ; preds = %cond_jump_then314, %cond_jump_end309
  %oror_result_value319 = load i1, i1* %oror304, align 1
  %icastKX320 = zext i1 %oror_result_value319 to i32
  store i32 %icastKX320, i32* %inline_result_variable298, align 4
  br label %is_float_end300

cond_jump_then323:                                ; preds = %is_float_end300
  store i32 2, i32* %rc, align 4
  %type327 = load %CType, %CType* %type, align 8
  %fieldVVV328 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t329 = load i32, i32* %fieldVVV328, align 4
  %andtmp330 = and i32 %t329, 15
  %eq331 = icmp eq i32 %andtmp330, 10
  br i1 %eq331, label %cond_jump_then332, label %cond_end333

cond_jump_elif0324:                               ; preds = %is_float_end300
  %type334 = load %CType, %CType* %type, align 8
  %fieldVVV335 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t336 = load i32, i32* %fieldVVV335, align 4
  %andtmp337 = and i32 %t336, 15
  %eq338 = icmp eq i32 %andtmp337, 12
  br i1 %eq338, label %cond_jump_elif_then0325, label %cond_end326

cond_jump_elif_then0325:                          ; preds = %cond_jump_elif0324
  store i32 4, i32* %rc, align 4
  br label %cond_end326

cond_end326:                                      ; preds = %cond_jump_elif_then0325, %cond_jump_elif0324, %cond_end333
  %rc339 = load i32, i32* %rc, align 4
  %fun_result340 = call i32 @gv(i32 %rc339)
  store i32 %fun_result340, i32* %r2, align 4
  %fun_result341 = call i32 @gjmp(i32 0)
  store i32 %fun_result341, i32* %tt, align 4
  %u342 = load i32, i32* %u, align 4
  call void @gsym(i32 %u342)
  %vtop343 = load %SValue*, %SValue** @vtop, align 8
  %sv344 = load %SValue, %SValue* %sv, align 16
  store %SValue %sv344, %SValue* %vtop343, align 16
  %type345 = load %CType, %CType* %type, align 8
  call void @gen_cast(%CType* %type)
  %vtop346 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL347 = getelementptr inbounds %SValue, %SValue* %vtop346, i32 0, i32 0
  %type348 = load %CType, %CType* %fieldLLL347, align 8
  %fieldVVV349 = getelementptr inbounds %CType, %CType* %fieldLLL347, i32 0, i32 0
  %t350 = load i32, i32* %fieldVVV349, align 4
  %andtmp351 = and i32 %t350, 15
  %eq352 = icmp eq i32 7, %andtmp351
  br i1 %eq352, label %cond_jump_then353, label %cond_end354

cond_jump_then332:                                ; preds = %cond_jump_then323
  store i32 64, i32* %rc, align 4
  br label %cond_end333

cond_end333:                                      ; preds = %cond_jump_then332, %cond_jump_then323
  br label %cond_end326

cond_jump_then353:                                ; preds = %cond_end326
  call void @gaddrof()
  br label %cond_end354

cond_end354:                                      ; preds = %cond_jump_then353, %cond_end326
  %rc355 = load i32, i32* %rc, align 4
  %fun_result356 = call i32 @gv(i32 %rc355)
  store i32 %fun_result356, i32* %r1, align 4
  %r2357 = load i32, i32* %r2, align 4
  %r1358 = load i32, i32* %r1, align 4
  call void @move_reg(i32 %r2357, i32 %r1358)
  %vtop359 = load %SValue*, %SValue** @vtop, align 8
  %r2360 = load i32, i32* %r2, align 4
  %icastG = trunc i32 %r2360 to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop359, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU, align 2
  %tt361 = load i32, i32* %tt, align 4
  call void @gsym(i32 %tt361)
  br label %cond_end29
}

define internal void @gexpr() {
entry:
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @expr_eq()
  %tok = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok, 44
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_end:                                         ; preds = %after_break, %cond_then_block
  call void @vpop()
  call void @next()
  br label %loop_top_block

after_break:                                      ; No predecessors!
  br label %cond_end
}

define internal void @gen_inline_functions() {
entry:
  %andand54 = alloca i1, align 1
  %andand8 = alloca i1, align 1
  %andand = alloca i1, align 1
  %inline_generated = alloca i32, align 4
  %str = alloca i32*, align 8
  %type = alloca %CType*, align 8
  %sym = alloca %Sym*, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end43
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  store i32 0, i32* %inline_generated, align 4
  %global_stack = load %Sym*, %Sym** @global_stack, align 8
  store %Sym* %global_stack, %Sym** %sym, align 8
  br label %loop_top_block2

cond_end_block:                                   ; preds = %cond_jump_then42, %loop_top_block
  %global_stack44 = load %Sym*, %Sym** @global_stack, align 8
  store %Sym* %global_stack44, %Sym** %sym, align 8
  br label %loop_top_block46

loop_continue_top_block1:                         ; preds = %cond_end
  %sym39 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL40 = getelementptr inbounds %Sym, %Sym* %sym39, i32 0, i32 5
  %prev = load %Sym*, %Sym** %fieldLLL40, align 8
  store %Sym* %prev, %Sym** %sym, align 8
  br label %loop_top_block2

loop_top_block2:                                  ; preds = %loop_continue_top_block1, %cond_then_block
  %sym3 = load %Sym*, %Sym** %sym, align 8
  %not_eq = icmp ne %Sym* %sym3, null
  br i1 %not_eq, label %cond_then_block4, label %cond_end_block5

cond_then_block4:                                 ; preds = %loop_top_block2
  %sym6 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %sym6, i32 0, i32 3
  %type7 = load %CType, %CType* %fieldLLL, align 8
  store %CType* %fieldLLL, %CType** %type, align 8
  %type9 = load %CType*, %CType** %type, align 8
  %fieldLLL10 = getelementptr inbounds %CType, %CType* %type9, i32 0, i32 0
  %t = load i32, i32* %fieldLLL10, align 4
  %andtmp = and i32 %t, 15
  %eq = icmp eq i32 %andtmp, 6
  store i1 %eq, i1* %andand8, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_end_block5:                                  ; preds = %loop_top_block2
  %inline_generated41 = load i32, i32* %inline_generated, align 4
  %logical_denial = icmp eq i32 %inline_generated41, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then42, label %cond_end43

cond_jump_then:                                   ; preds = %cond_then_block4
  %type11 = load %CType*, %CType** %type, align 8
  %fieldLLL12 = getelementptr inbounds %CType, %CType* %type11, i32 0, i32 0
  %t13 = load i32, i32* %fieldLLL12, align 4
  %andtmp14 = and i32 %t13, 1280
  %eq15 = icmp eq i32 %andtmp14, 1280
  %andand16 = and i1 %eq, %eq15
  store i1 %andand16, i1* %andand8, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block4
  %andand_result_value = load i1, i1* %andand8, align 1
  store i1 %andand_result_value, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then17, label %cond_jump_end18

cond_jump_then17:                                 ; preds = %cond_jump_end
  %sym19 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL20 = getelementptr inbounds %Sym, %Sym* %sym19, i32 0, i32 2
  %c = load i64, i64* %fieldLLL20, align 4
  %not_eq21 = icmp ne i64 %c, 0
  %andand22 = and i1 %andand_result_value, %not_eq21
  store i1 %andand22, i1* %andand, align 1
  br label %cond_jump_end18

cond_jump_end18:                                  ; preds = %cond_jump_then17, %cond_jump_end
  %andand_result_value23 = load i1, i1* %andand, align 1
  br i1 %andand_result_value23, label %cond_jump_then24, label %cond_end

cond_jump_then24:                                 ; preds = %cond_jump_end18
  %sym25 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL26 = getelementptr inbounds %Sym, %Sym* %sym25, i32 0, i32 1
  %r = load i64, i64* %fieldLLL26, align 4
  %castAQ = bitcast i64* %fieldLLL26 to i32**
  %derefference_valueB = load i32*, i32** %castAQ, align 8
  store i32* %derefference_valueB, i32** %str, align 8
  %sym27 = load %Sym*, %Sym** %sym, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %sym27, i32 0, i32 1
  store i64 752, i64* %fieldTU, align 4
  %sym28 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL29 = getelementptr inbounds %Sym, %Sym* %sym28, i32 0, i32 3
  %type30 = load %CType, %CType* %fieldLLL29, align 8
  %sym31 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL32 = getelementptr inbounds %Sym, %Sym* %sym31, i32 0, i32 3
  %type33 = load %CType, %CType* %fieldLLL32, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL32, i32 0, i32 0
  %t34 = load i32, i32* %fieldVVV, align 4
  %andtmp35 = and i32 %t34, -1025
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL29, i32 0, i32 0
  store i32 %andtmp35, i32* %fieldTTT, align 4
  %str36 = load i32*, i32** %str, align 8
  store i32* %str36, i32** @macro_ptr, align 8
  call void @next()
  %text_section = load %Section*, %Section** @text_section, align 8
  store %Section* %text_section, %Section** @cur_text_section, align 8
  %sym37 = load %Sym*, %Sym** %sym, align 8
  call void @gen_function(%Sym* %sym37)
  store i32* null, i32** @macro_ptr, align 8
  %str38 = load i32*, i32** %str, align 8
  call void @tok_str_free(i32* %str38)
  store i32 1, i32* %inline_generated, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then24, %cond_jump_end18
  br label %loop_continue_top_block1

cond_jump_then42:                                 ; preds = %cond_end_block5
  br label %cond_end_block

cond_end43:                                       ; preds = %after_break, %cond_end_block5
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end43

loop_continue_top_block45:                        ; preds = %cond_end70, %cond_jump_then75
  %sym85 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL86 = getelementptr inbounds %Sym, %Sym* %sym85, i32 0, i32 5
  %prev87 = load %Sym*, %Sym** %fieldLLL86, align 8
  store %Sym* %prev87, %Sym** %sym, align 8
  br label %loop_top_block46

loop_top_block46:                                 ; preds = %loop_continue_top_block45, %cond_end_block
  %sym47 = load %Sym*, %Sym** %sym, align 8
  %not_eq48 = icmp ne %Sym* %sym47, null
  br i1 %not_eq48, label %cond_then_block49, label %cond_end_block50

cond_then_block49:                                ; preds = %loop_top_block46
  %sym51 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL52 = getelementptr inbounds %Sym, %Sym* %sym51, i32 0, i32 3
  %type53 = load %CType, %CType* %fieldLLL52, align 8
  store %CType* %fieldLLL52, %CType** %type, align 8
  %type55 = load %CType*, %CType** %type, align 8
  %fieldLLL56 = getelementptr inbounds %CType, %CType* %type55, i32 0, i32 0
  %t57 = load i32, i32* %fieldLLL56, align 4
  %andtmp58 = and i32 %t57, 15
  %eq59 = icmp eq i32 %andtmp58, 6
  store i1 %eq59, i1* %andand54, align 1
  br i1 %eq59, label %cond_jump_then60, label %cond_jump_end61

cond_end_block50:                                 ; preds = %loop_top_block46
  ret void

cond_jump_then60:                                 ; preds = %cond_then_block49
  %type62 = load %CType*, %CType** %type, align 8
  %fieldLLL63 = getelementptr inbounds %CType, %CType* %type62, i32 0, i32 0
  %t64 = load i32, i32* %fieldLLL63, align 4
  %andtmp65 = and i32 %t64, 1280
  %eq66 = icmp eq i32 %andtmp65, 1280
  %andand67 = and i1 %eq59, %eq66
  store i1 %andand67, i1* %andand54, align 1
  br label %cond_jump_end61

cond_jump_end61:                                  ; preds = %cond_jump_then60, %cond_then_block49
  %andand_result_value68 = load i1, i1* %andand54, align 1
  br i1 %andand_result_value68, label %cond_jump_then69, label %cond_end70

cond_jump_then69:                                 ; preds = %cond_jump_end61
  %sym71 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL72 = getelementptr inbounds %Sym, %Sym* %sym71, i32 0, i32 1
  %r73 = load i64, i64* %fieldLLL72, align 4
  %eq74 = icmp eq i64 %r73, 752
  br i1 %eq74, label %cond_jump_then75, label %cond_end76

cond_end70:                                       ; preds = %cond_end76, %cond_jump_end61
  br label %loop_continue_top_block45

cond_jump_then75:                                 ; preds = %cond_jump_then69
  br label %loop_continue_top_block45

cond_end76:                                       ; preds = %after_continue, %cond_jump_then69
  %sym77 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL78 = getelementptr inbounds %Sym, %Sym* %sym77, i32 0, i32 1
  %r79 = load i64, i64* %fieldLLL78, align 4
  %castAQ80 = bitcast i64* %fieldLLL78 to i32**
  %derefference_valueB81 = load i32*, i32** %castAQ80, align 8
  store i32* %derefference_valueB81, i32** %str, align 8
  %str82 = load i32*, i32** %str, align 8
  call void @tok_str_free(i32* %str82)
  %sym83 = load %Sym*, %Sym** %sym, align 8
  %fieldTU84 = getelementptr inbounds %Sym, %Sym* %sym83, i32 0, i32 1
  store i64 0, i64* %fieldTU84, align 4
  br label %cond_end70

after_continue:                                   ; No predecessors!
  br label %cond_end76
}

define internal void @decl(i32 %0) {
entry:
  %andand369 = alloca i1, align 1
  %andand368 = alloca i1, align 1
  %andand367 = alloca i1, align 1
  %andand366 = alloca i1, align 1
  %oror358 = alloca i1, align 1
  %t250 = alloca i32, align 4
  %block_level = alloca i32, align 4
  %func_str = alloca %TokenString, align 8
  %castXXXX237 = bitcast %TokenString* %func_str to i8*
  %1 = call i8* @memset(i8* %castXXXX237, i32 0, i64 24)
  %andand158 = alloca i1, align 1
  %oror41 = alloca i1, align 1
  %andand40 = alloca i1, align 1
  %oror29 = alloca i1, align 1
  %oror11 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %ad = alloca %AttributeDef, align 8
  %castXXXX3 = bitcast %AttributeDef* %ad to i8*
  %2 = call i8* @memset(i8* %castXXXX3, i32 0, i64 24)
  %sym = alloca %Sym*, align 8
  %btype = alloca %CType, align 8
  %castXXXX2 = bitcast %CType* %btype to i8*
  %3 = call i8* @memset(i8* %castXXXX2, i32 0, i64 16)
  %type = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %r = alloca i32, align 4
  %has_init = alloca i32, align 4
  %v = alloca i32, align 4
  %l = alloca i32, align 4
  %l1 = alloca i32*, align 8
  store i32 %0, i32* %l, align 4
  store i32* %l, i32** %l1, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end_block64, %cond_jump_then59, %cond_jump_then26, %cond_jump_then6, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %btype4 = load %CType, %CType* %btype, align 8
  %ad5 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fun_result = call i32 @parse_btype(%CType* %btype, %AttributeDef* %ad)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_then37, %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 59
  br i1 %eq, label %cond_jump_then6, label %cond_end7

cond_end:                                         ; preds = %cond_end38, %cond_then_block
  %btype42 = load %CType, %CType* %btype, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eq43 = icmp eq i32 %andtmp, 5
  store i1 %eq43, i1* %oror41, align 1
  br i1 %eq43, label %cond_jump_end45, label %cond_jump_then44

cond_jump_then6:                                  ; preds = %cond_jump_then
  call void @next()
  br label %loop_top_block

cond_end7:                                        ; preds = %after_continue, %cond_jump_then
  %l8 = load i32, i32* %l, align 4
  %eq9 = icmp eq i32 %l8, 240
  store i1 %eq9, i1* %andand, align 1
  br i1 %eq9, label %cond_jump_then10, label %cond_jump_end

after_continue:                                   ; No predecessors!
  br label %cond_end7

cond_jump_then10:                                 ; preds = %cond_end7
  %tok12 = load i32, i32* @tok, align 4
  %eq13 = icmp eq i32 %tok12, 310
  store i1 %eq13, i1* %oror11, align 1
  br i1 %eq13, label %cond_jump_end15, label %cond_jump_then14

cond_jump_end:                                    ; preds = %cond_jump_end20, %cond_end7
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then26, label %cond_end27

cond_jump_then14:                                 ; preds = %cond_jump_then10
  %tok16 = load i32, i32* @tok, align 4
  %eq17 = icmp eq i32 %tok16, 311
  %oror18 = or i1 %eq13, %eq17
  store i1 %oror18, i1* %oror11, align 1
  br label %cond_jump_end15

cond_jump_end15:                                  ; preds = %cond_jump_then14, %cond_jump_then10
  %oror_result_value = load i1, i1* %oror11, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end20, label %cond_jump_then19

cond_jump_then19:                                 ; preds = %cond_jump_end15
  %tok21 = load i32, i32* @tok, align 4
  %eq22 = icmp eq i32 %tok21, 312
  %oror23 = or i1 %oror_result_value, %eq22
  store i1 %oror23, i1* %oror, align 1
  br label %cond_jump_end20

cond_jump_end20:                                  ; preds = %cond_jump_then19, %cond_jump_end15
  %oror_result_value24 = load i1, i1* %oror, align 1
  %andand25 = and i1 %eq9, %oror_result_value24
  store i1 %andand25, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_then26:                                 ; preds = %cond_jump_end
  call void @asm_global_instr()
  br label %loop_top_block

cond_end27:                                       ; preds = %after_continue28, %cond_jump_end
  %l30 = load i32, i32* %l, align 4
  %eq31 = icmp eq i32 %l30, 242
  store i1 %eq31, i1* %oror29, align 1
  br i1 %eq31, label %cond_jump_end33, label %cond_jump_then32

after_continue28:                                 ; No predecessors!
  br label %cond_end27

cond_jump_then32:                                 ; preds = %cond_end27
  %tok34 = load i32, i32* @tok, align 4
  %le = icmp slt i32 %tok34, 313
  %oror35 = or i1 %eq31, %le
  store i1 %oror35, i1* %oror29, align 1
  br label %cond_jump_end33

cond_jump_end33:                                  ; preds = %cond_jump_then32, %cond_end27
  %oror_result_value36 = load i1, i1* %oror29, align 1
  br i1 %oror_result_value36, label %cond_jump_then37, label %cond_end38

cond_jump_then37:                                 ; preds = %cond_jump_end33
  br label %cond_end_block

cond_end38:                                       ; preds = %after_break, %cond_jump_end33
  %btype39 = load %CType, %CType* %btype, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  br label %cond_end

after_break:                                      ; No predecessors!
  br label %cond_end38

cond_jump_then44:                                 ; preds = %cond_end
  %btype46 = load %CType, %CType* %btype, align 8
  %fieldVVV47 = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t48 = load i32, i32* %fieldVVV47, align 4
  %andtmp49 = and i32 %t48, 15
  %eq50 = icmp eq i32 %andtmp49, 7
  %oror51 = or i1 %eq43, %eq50
  store i1 %oror51, i1* %oror41, align 1
  br label %cond_jump_end45

cond_jump_end45:                                  ; preds = %cond_jump_then44, %cond_end
  %oror_result_value52 = load i1, i1* %oror41, align 1
  store i1 %oror_result_value52, i1* %andand40, align 1
  br i1 %oror_result_value52, label %cond_jump_then53, label %cond_jump_end54

cond_jump_then53:                                 ; preds = %cond_jump_end45
  %tok55 = load i32, i32* @tok, align 4
  %eq56 = icmp eq i32 %tok55, 59
  %andand57 = and i1 %oror_result_value52, %eq56
  store i1 %andand57, i1* %andand40, align 1
  br label %cond_jump_end54

cond_jump_end54:                                  ; preds = %cond_jump_then53, %cond_jump_end45
  %andand_result_value58 = load i1, i1* %andand40, align 1
  br i1 %andand_result_value58, label %cond_jump_then59, label %cond_end60

cond_jump_then59:                                 ; preds = %cond_jump_end54
  call void @next()
  br label %loop_top_block

cond_end60:                                       ; preds = %after_continue61, %cond_jump_end54
  br label %loop_top_block62

after_continue61:                                 ; No predecessors!
  br label %cond_end60

loop_top_block62:                                 ; preds = %cond_end86, %cond_end60
  br i1 true, label %cond_then_block63, label %cond_end_block64

cond_then_block63:                                ; preds = %loop_top_block62
  %btype65 = load %CType, %CType* %btype, align 8
  store %CType %btype65, %CType* %type, align 8
  %type66 = load %CType, %CType* %type, align 8
  %ad67 = load %AttributeDef, %AttributeDef* %ad, align 8
  %v68 = load i32, i32* %v, align 4
  call void @type_decl(%CType* %type, %AttributeDef* %ad, i32* %v, i32 2)
  %type69 = load %CType, %CType* %type, align 8
  %fieldVVV70 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t71 = load i32, i32* %fieldVVV70, align 4
  %andtmp72 = and i32 %t71, 15
  %eq73 = icmp eq i32 %andtmp72, 6
  br i1 %eq73, label %cond_jump_then74, label %cond_end75

cond_end_block64:                                 ; preds = %cond_jump_then452, %cond_end236, %loop_top_block62
  br label %loop_top_block

cond_jump_then74:                                 ; preds = %cond_then_block63
  %type76 = load %CType, %CType* %type, align 8
  %fieldVVV77 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV77, align 8
  store %Sym* %ref, %Sym** %sym, align 8
  %sym78 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %sym78, i32 0, i32 2
  %c = load i64, i64* %fieldLLL, align 4
  %eq79 = icmp eq i64 %c, 2
  br i1 %eq79, label %cond_jump_then80, label %cond_end81

cond_end75:                                       ; preds = %cond_end81, %cond_then_block63
  %tok83 = load i32, i32* @tok, align 4
  %eq84 = icmp eq i32 %tok83, 123
  br i1 %eq84, label %cond_jump_then85, label %cond_else_block

cond_jump_then80:                                 ; preds = %cond_jump_then74
  %sym82 = load %Sym*, %Sym** %sym, align 8
  call void @func_decl_list(%Sym* %sym82)
  br label %cond_end81

cond_end81:                                       ; preds = %cond_jump_then80, %cond_jump_then74
  br label %cond_end75

cond_jump_then85:                                 ; preds = %cond_end75
  %l87 = load i32, i32* %l, align 4
  %eq88 = icmp eq i32 %l87, 242
  br i1 %eq88, label %cond_jump_then89, label %cond_end90

cond_else_block:                                  ; preds = %cond_end75
  %btype298 = load %CType, %CType* %btype, align 8
  %fieldVVV299 = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t300 = load i32, i32* %fieldVVV299, align 4
  %andtmp301 = and i32 %t300, 512
  %icmpA302 = icmp ne i32 %andtmp301, 0
  br i1 %icmpA302, label %cond_jump_then303, label %cond_jump_elif0304

cond_end86:                                       ; preds = %cond_end453, %after_break297
  br label %loop_top_block62

cond_jump_then89:                                 ; preds = %cond_jump_then85
  call void (i8*, ...) @error(i8* bitcast ([27 x i8]* @204 to i8*))
  br label %cond_end90

cond_end90:                                       ; preds = %cond_jump_then89, %cond_jump_then85
  %type91 = load %CType, %CType* %type, align 8
  %fieldVVV92 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t93 = load i32, i32* %fieldVVV92, align 4
  %andtmp94 = and i32 %t93, 15
  %not_eq = icmp ne i32 %andtmp94, 6
  br i1 %not_eq, label %cond_jump_then95, label %cond_end96

cond_jump_then95:                                 ; preds = %cond_end90
  call void @expect(i8* bitcast ([20 x i8]* @205 to i8*))
  br label %cond_end96

cond_end96:                                       ; preds = %cond_jump_then95, %cond_end90
  %type97 = load %CType, %CType* %type, align 8
  %fieldVVV98 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref99 = load %Sym*, %Sym** %fieldVVV98, align 8
  store %Sym* %ref99, %Sym** %sym, align 8
  br label %loop_top_block100

loop_top_block100:                                ; preds = %cond_end114, %cond_end96
  %sym101 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL102 = getelementptr inbounds %Sym, %Sym* %sym101, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL102, align 8
  store %Sym* %next, %Sym** %sym, align 8
  %not_eq103 = icmp ne %Sym* %next, null
  br i1 %not_eq103, label %cond_then_block104, label %cond_end_block105

cond_then_block104:                               ; preds = %loop_top_block100
  %sym106 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL107 = getelementptr inbounds %Sym, %Sym* %sym106, i32 0, i32 0
  %v108 = load i32, i32* %fieldLLL107, align 4
  %andtmp109 = and i32 %v108, -536870913
  %logical_denial110 = icmp eq i32 %andtmp109, 0
  %castOOOO111 = zext i1 %logical_denial110 to i32
  %icmpA112 = icmp ne i32 %castOOOO111, 0
  br i1 %icmpA112, label %cond_jump_then113, label %cond_end114

cond_end_block105:                                ; preds = %loop_top_block100
  %type115 = load %CType, %CType* %type, align 8
  %fieldVVV116 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t117 = load i32, i32* %fieldVVV116, align 4
  %andtmp118 = and i32 %t117, 1152
  %eq119 = icmp eq i32 %andtmp118, 1152
  br i1 %eq119, label %cond_jump_then120, label %cond_end121

cond_jump_then113:                                ; preds = %cond_then_block104
  call void @expect(i8* bitcast ([11 x i8]* @206 to i8*))
  br label %cond_end114

cond_end114:                                      ; preds = %cond_jump_then113, %cond_then_block104
  br label %loop_top_block100

cond_jump_then120:                                ; preds = %cond_end_block105
  %type122 = load %CType, %CType* %type, align 8
  %type123 = load %CType, %CType* %type, align 8
  %fieldVVV124 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t125 = load i32, i32* %fieldVVV124, align 4
  %andtmp126 = and i32 %t125, -129
  %ortmp = or i32 %andtmp126, 256
  %fieldTTT127 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTTT127, align 4
  br label %cond_end121

cond_end121:                                      ; preds = %cond_jump_then120, %cond_end_block105
  %v128 = load i32, i32* %v, align 4
  store i32 5010, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.143, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_find

sym_find:                                         ; preds = %cond_end121
  %inline_result_variable = alloca %Sym*, align 8
  %v129 = alloca i32, align 4
  store i32 %v128, i32* %v129, align 4
  %v130 = load i32, i32* %v129, align 4
  %sub = sub i32 %v130, 256
  store i32 %sub, i32* %v129, align 4
  %add = add i32 %sub, 256
  %v131 = load i32, i32* %v129, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub132 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v131, %sub132
  br i1 %gteq_unsinged, label %cond_jump_then133, label %cond_end134

sym_find_end:                                     ; preds = %cond_end134, %cond_jump_then133
  %inline_result_variable137 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable137, %Sym** %sym, align 8
  %sym138 = load %Sym*, %Sym** %sym, align 8
  %icmpB = icmp ne %Sym* %sym138, null
  br i1 %icmpB, label %cond_jump_then139, label %cond_else_block140

cond_jump_then133:                                ; preds = %sym_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_end134:                                      ; preds = %sym_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v135 = load i32, i32* %v129, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v135
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL136 = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL136, align 8
  store %Sym* %sym_identifier, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_jump_then139:                                ; preds = %sym_find_end
  %sym142 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL143 = getelementptr inbounds %Sym, %Sym* %sym142, i32 0, i32 3
  %type144 = load %CType, %CType* %fieldLLL143, align 8
  %fieldVVV145 = getelementptr inbounds %CType, %CType* %fieldLLL143, i32 0, i32 0
  %t146 = load i32, i32* %fieldVVV145, align 4
  %andtmp147 = and i32 %t146, 15
  %not_eq148 = icmp ne i32 %andtmp147, 6
  br i1 %not_eq148, label %cond_jump_then149, label %cond_end150

cond_else_block140:                               ; preds = %sym_find_end
  %v217 = load i32, i32* %v, align 4
  %type218 = load %CType, %CType* %type, align 8
  %fieldVVV219 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t220 = load i32, i32* %fieldVVV219, align 4
  %fun_result221 = call %Sym* @global_identifier_push(i32 %v217, i32 %t220, i32 0)
  store %Sym* %fun_result221, %Sym** %sym, align 8
  %sym222 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL223 = getelementptr inbounds %Sym, %Sym* %sym222, i32 0, i32 3
  %type224 = load %CType, %CType* %fieldLLL223, align 8
  %type225 = load %CType, %CType* %type, align 8
  %fieldVVV226 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref227 = load %Sym*, %Sym** %fieldVVV226, align 8
  %fieldTTT228 = getelementptr inbounds %CType, %CType* %fieldLLL223, i32 0, i32 1
  store %Sym* %ref227, %Sym** %fieldTTT228, align 8
  br label %cond_end141

cond_end141:                                      ; preds = %cond_else_block140, %cond_end212
  %type229 = load %CType, %CType* %type, align 8
  %fieldVVV230 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t231 = load i32, i32* %fieldVVV230, align 4
  %andtmp232 = and i32 %t231, 1280
  %eq233 = icmp eq i32 %andtmp232, 1280
  br i1 %eq233, label %cond_jump_then234, label %cond_else_block235

cond_jump_then149:                                ; preds = %cond_jump_then139
  br label %decl.func_error1
  br label %cond_end150

cond_end150:                                      ; preds = %cond_jump_then149, %cond_jump_then139
  %sym151 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL152 = getelementptr inbounds %Sym, %Sym* %sym151, i32 0, i32 3
  %type153 = load %CType, %CType* %fieldLLL152, align 8
  %fieldVVV154 = getelementptr inbounds %CType, %CType* %fieldLLL152, i32 0, i32 1
  %ref155 = load %Sym*, %Sym** %fieldVVV154, align 8
  %fieldLLL156 = getelementptr inbounds %Sym, %Sym* %ref155, i32 0, i32 1
  %r157 = load i64, i64* %fieldLLL156, align 4
  %icastM = trunc i64 %r157 to i32
  store i32 %icastM, i32* %r, align 4
  %r159 = load i32, i32* %r, align 4
  %castAQ = bitcast i32* %r to %come_anon123*
  %fieldLLL160 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ, i32 0, i32 0
  %func_call = load i8, i8* %fieldLLL160, align 1
  %not_eq161 = icmp ne i8 %func_call, 0
  store i1 %not_eq161, i1* %andand158, align 1
  br i1 %not_eq161, label %cond_jump_then162, label %cond_jump_end163

decl.func_error1:                                 ; preds = %cond_jump_then211, %cond_jump_then149
  %v213 = load i32, i32* %v, align 4
  %fun_result214 = call i8* @get_tok_str(i32 %v213, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([44 x i8]* @207 to i8*), i8* %fun_result214)
  br label %cond_end212

cond_jump_then162:                                ; preds = %cond_end150
  %type164 = load %CType, %CType* %type, align 8
  %fieldVVV165 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref166 = load %Sym*, %Sym** %fieldVVV165, align 8
  %fieldLLL167 = getelementptr inbounds %Sym, %Sym* %ref166, i32 0, i32 1
  %r168 = load i64, i64* %fieldLLL167, align 4
  %castAQ169 = bitcast i64* %fieldLLL167 to %come_anon123*
  %fieldLLL170 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ169, i32 0, i32 0
  %func_call171 = load i8, i8* %fieldLLL170, align 1
  %eq172 = icmp eq i8 %func_call171, 0
  %andand173 = and i1 %not_eq161, %eq172
  store i1 %andand173, i1* %andand158, align 1
  br label %cond_jump_end163

cond_jump_end163:                                 ; preds = %cond_jump_then162, %cond_end150
  %andand_result_value174 = load i1, i1* %andand158, align 1
  br i1 %andand_result_value174, label %cond_jump_then175, label %cond_end176

cond_jump_then175:                                ; preds = %cond_jump_end163
  %type177 = load %CType, %CType* %type, align 8
  %fieldVVV178 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref179 = load %Sym*, %Sym** %fieldVVV178, align 8
  %fieldLLL180 = getelementptr inbounds %Sym, %Sym* %ref179, i32 0, i32 1
  %r181 = load i64, i64* %fieldLLL180, align 4
  %castAQ182 = bitcast i64* %fieldLLL180 to %come_anon123*
  %fieldLLL183 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ182, i32 0, i32 0
  %func_call184 = load i8, i8* %fieldLLL183, align 1
  %r185 = load i32, i32* %r, align 4
  %castAQ186 = bitcast i32* %r to %come_anon123*
  %fieldLLL187 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ186, i32 0, i32 0
  %func_call188 = load i8, i8* %fieldLLL187, align 1
  store i8 %func_call188, i8* %fieldLLL183, align 1
  br label %cond_end176

cond_end176:                                      ; preds = %cond_jump_then175, %cond_jump_end163
  %r189 = load i32, i32* %r, align 4
  %castAQ190 = bitcast i32* %r to %come_anon123*
  %fieldLLL191 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ190, i32 0, i32 2
  %func_export = load i1, i1* %fieldLLL191, align 1
  %icmpA192 = icmp ne i1 %func_export, false
  br i1 %icmpA192, label %cond_jump_then193, label %cond_end194

cond_jump_then193:                                ; preds = %cond_end176
  %type195 = load %CType, %CType* %type, align 8
  %fieldVVV196 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref197 = load %Sym*, %Sym** %fieldVVV196, align 8
  %fieldLLL198 = getelementptr inbounds %Sym, %Sym* %ref197, i32 0, i32 1
  %r199 = load i64, i64* %fieldLLL198, align 4
  %castAQ200 = bitcast i64* %fieldLLL198 to %come_anon123*
  %fieldLLL201 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ200, i32 0, i32 2
  %func_export202 = load i1, i1* %fieldLLL201, align 1
  store i1 true, i1* %fieldLLL201, align 1
  br label %cond_end194

cond_end194:                                      ; preds = %cond_jump_then193, %cond_end176
  %sym203 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL204 = getelementptr inbounds %Sym, %Sym* %sym203, i32 0, i32 3
  %type205 = load %CType, %CType* %fieldLLL204, align 8
  %type206 = load %CType, %CType* %type, align 8
  %fun_result207 = call i32 @is_compatible_types(%CType* %fieldLLL204, %CType* %type)
  %logical_denial208 = icmp eq i32 %fun_result207, 0
  %castOOOO209 = zext i1 %logical_denial208 to i32
  %icmpA210 = icmp ne i32 %castOOOO209, 0
  br i1 %icmpA210, label %cond_jump_then211, label %cond_end212

cond_jump_then211:                                ; preds = %cond_end194
  br label %decl.func_error1

cond_end212:                                      ; preds = %decl.func_error1, %cond_end194
  %sym215 = load %Sym*, %Sym** %sym, align 8
  %type216 = load %CType, %CType* %type, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %sym215, i32 0, i32 3
  store %CType %type216, %CType* %fieldTU, align 8
  br label %cond_end141

cond_jump_then234:                                ; preds = %cond_end141
  %func_str238 = load %TokenString, %TokenString* %func_str, align 8
  store i32 5045, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.144, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

cond_else_block235:                               ; preds = %cond_end141
  %ad287 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV288 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 2
  %section = load %Section*, %Section** %fieldVVV288, align 8
  store %Section* %section, %Section** @cur_text_section, align 8
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %logical_denial289 = icmp eq %Section* %cur_text_section, null
  %castOOOO290 = zext i1 %logical_denial289 to i32
  %icmpA291 = icmp ne i32 %castOOOO290, 0
  br i1 %icmpA291, label %cond_jump_then292, label %cond_end293

cond_end236:                                      ; preds = %cond_end293, %cond_end_block249
  br label %cond_end_block64

tok_str_new:                                      ; preds = %cond_jump_then234
  %s = alloca %TokenString*, align 8
  store %TokenString* %func_str, %TokenString** %s, align 8
  %s239 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU240 = getelementptr inbounds %TokenString, %TokenString* %s239, i32 0, i32 0
  store i32* null, i32** %fieldTU240, align 8
  %s241 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU242 = getelementptr inbounds %TokenString, %TokenString* %s241, i32 0, i32 1
  store i32 0, i32* %fieldTU242, align 4
  %s243 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU244 = getelementptr inbounds %TokenString, %TokenString* %s243, i32 0, i32 2
  store i32 0, i32* %fieldTU244, align 4
  %s245 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU246 = getelementptr inbounds %TokenString, %TokenString* %s245, i32 0, i32 3
  store i32 -1, i32* %fieldTU246, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  store i32 0, i32* %block_level, align 4
  br label %loop_top_block247

loop_continue_top_block:                          ; preds = %cond_end260
  br label %loop_top_block247

loop_top_block247:                                ; preds = %loop_continue_top_block, %tok_str_new_end
  br i1 true, label %cond_then_block248, label %cond_end_block249

cond_then_block248:                               ; preds = %loop_top_block247
  %tok251 = load i32, i32* @tok, align 4
  %eq252 = icmp eq i32 %tok251, -1
  br i1 %eq252, label %cond_jump_then253, label %cond_end254

cond_end_block249:                                ; preds = %cond_jump_then272, %loop_top_block247
  %func_str275 = load %TokenString, %TokenString* %func_str, align 8
  call void @tok_str_add(%TokenString* %func_str, i32 -1)
  %func_str276 = load %TokenString, %TokenString* %func_str, align 8
  call void @tok_str_add(%TokenString* %func_str, i32 0)
  %sym277 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL278 = getelementptr inbounds %Sym, %Sym* %sym277, i32 0, i32 1
  %r279 = load i64, i64* %fieldLLL278, align 4
  %castAQ280 = bitcast i64* %fieldLLL278 to i32**
  %derefference_valueB = load i32*, i32** %castAQ280, align 8
  %sym281 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL282 = getelementptr inbounds %Sym, %Sym* %sym281, i32 0, i32 1
  %r283 = load i64, i64* %fieldLLL282, align 4
  %castAQ284 = bitcast i64* %fieldLLL282 to i32**
  %func_str285 = load %TokenString, %TokenString* %func_str, align 8
  %fieldVVV286 = getelementptr inbounds %TokenString, %TokenString* %func_str, i32 0, i32 0
  %str = load i32*, i32** %fieldVVV286, align 8
  store i32* %str, i32** %castAQ284, align 8
  br label %cond_end236

cond_jump_then253:                                ; preds = %cond_then_block248
  call void (i8*, ...) @error(i8* bitcast ([23 x i8]* @208 to i8*))
  br label %cond_end254

cond_end254:                                      ; preds = %cond_jump_then253, %cond_then_block248
  %func_str255 = load %TokenString, %TokenString* %func_str, align 8
  call void @tok_str_add_tok(%TokenString* %func_str)
  %tok256 = load i32, i32* @tok, align 4
  store i32 %tok256, i32* %t250, align 4
  call void @next()
  %t257 = load i32, i32* %t250, align 4
  %eq258 = icmp eq i32 %t257, 123
  br i1 %eq258, label %cond_jump_then259, label %cond_jump_elif0

cond_jump_then259:                                ; preds = %cond_end254
  %block_level261 = load i32, i32* %block_level, align 4
  %add262 = add i32 %block_level261, 1
  store i32 %add262, i32* %block_level, align 4
  %block_level263 = load i32, i32* %block_level, align 4
  %sub264 = sub i32 %block_level263, 1
  br label %cond_end260

cond_jump_elif0:                                  ; preds = %cond_end254
  %t265 = load i32, i32* %t250, align 4
  %eq266 = icmp eq i32 %t265, 125
  br i1 %eq266, label %cond_jump_elif_then0, label %cond_end260

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %block_level267 = load i32, i32* %block_level, align 4
  %sub268 = sub i32 %block_level267, 1
  store i32 %sub268, i32* %block_level, align 4
  %add269 = add i32 %sub268, 1
  %block_level270 = load i32, i32* %block_level, align 4
  %eq271 = icmp eq i32 %block_level270, 0
  br i1 %eq271, label %cond_jump_then272, label %cond_end273

cond_end260:                                      ; preds = %cond_end273, %cond_jump_elif0, %cond_jump_then259
  br label %loop_continue_top_block

cond_jump_then272:                                ; preds = %cond_jump_elif_then0
  br label %cond_end_block249

cond_end273:                                      ; preds = %after_break274, %cond_jump_elif_then0
  br label %cond_end260

after_break274:                                   ; No predecessors!
  br label %cond_end273

cond_jump_then292:                                ; preds = %cond_else_block235
  %text_section = load %Section*, %Section** @text_section, align 8
  store %Section* %text_section, %Section** @cur_text_section, align 8
  br label %cond_end293

cond_end293:                                      ; preds = %cond_jump_then292, %cond_else_block235
  %sym294 = load %Sym*, %Sym** %sym, align 8
  %fieldTU295 = getelementptr inbounds %Sym, %Sym* %sym294, i32 0, i32 1
  store i64 752, i64* %fieldTU295, align 4
  %sym296 = load %Sym*, %Sym** %sym, align 8
  call void @gen_function(%Sym* %sym296)
  br label %cond_end236

after_break297:                                   ; No predecessors!
  br label %cond_end86

cond_jump_then303:                                ; preds = %cond_else_block
  %v308 = load i32, i32* %v, align 4
  %type309 = load %CType, %CType* %type, align 8
  %fun_result310 = call %Sym* @sym_push(i32 %v308, %CType* %type, i32 0, i32 0)
  store %Sym* %fun_result310, %Sym** %sym, align 8
  %sym311 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL312 = getelementptr inbounds %Sym, %Sym* %sym311, i32 0, i32 3
  %type313 = load %CType, %CType* %fieldLLL312, align 8
  %sym314 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL315 = getelementptr inbounds %Sym, %Sym* %sym314, i32 0, i32 3
  %type316 = load %CType, %CType* %fieldLLL315, align 8
  %fieldVVV317 = getelementptr inbounds %CType, %CType* %fieldLLL315, i32 0, i32 0
  %t318 = load i32, i32* %fieldVVV317, align 4
  %ortmp319 = or i32 %t318, 512
  %fieldTTT320 = getelementptr inbounds %CType, %CType* %fieldLLL312, i32 0, i32 0
  store i32 %ortmp319, i32* %fieldTTT320, align 4
  br label %cond_end307

cond_jump_elif0304:                               ; preds = %cond_else_block
  %type321 = load %CType, %CType* %type, align 8
  %fieldVVV322 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t323 = load i32, i32* %fieldVVV322, align 4
  %andtmp324 = and i32 %t323, 15
  %eq325 = icmp eq i32 %andtmp324, 6
  br i1 %eq325, label %cond_jump_elif_then0305, label %cond_else_block306

cond_jump_elif_then0305:                          ; preds = %cond_jump_elif0304
  %ad326 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV327 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 3
  %func_attr = load i32, i32* %fieldVVV327, align 4
  %icmpA328 = icmp ne i32 %func_attr, 0
  br i1 %icmpA328, label %cond_jump_then329, label %cond_end330

cond_else_block306:                               ; preds = %cond_jump_elif0304
  store i32 0, i32* %r, align 4
  %type341 = load %CType, %CType* %type, align 8
  %fieldVVV342 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t343 = load i32, i32* %fieldVVV342, align 4
  %andtmp344 = and i32 %t343, 32
  %logical_denial345 = icmp eq i32 %andtmp344, 0
  %castOOOO346 = zext i1 %logical_denial345 to i32
  %icmpA347 = icmp ne i32 %castOOOO346, 0
  br i1 %icmpA347, label %cond_jump_then348, label %cond_end349

cond_end307:                                      ; preds = %cond_end412, %cond_end330, %cond_jump_then303
  %tok450 = load i32, i32* @tok, align 4
  %not_eq451 = icmp ne i32 %tok450, 44
  br i1 %not_eq451, label %cond_jump_then452, label %cond_end453

cond_jump_then329:                                ; preds = %cond_jump_elif_then0305
  %type331 = load %CType, %CType* %type, align 8
  %fieldVVV332 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref333 = load %Sym*, %Sym** %fieldVVV332, align 8
  %ad334 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV335 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 3
  %func_attr336 = load i32, i32* %fieldVVV335, align 4
  %icastD = sext i32 %func_attr336 to i64
  %fieldTU337 = getelementptr inbounds %Sym, %Sym* %ref333, i32 0, i32 1
  store i64 %icastD, i64* %fieldTU337, align 4
  br label %cond_end330

cond_end330:                                      ; preds = %cond_jump_then329, %cond_jump_elif_then0305
  %v338 = load i32, i32* %v, align 4
  %type339 = load %CType, %CType* %type, align 8
  %fun_result340 = call %Sym* @external_sym(i32 %v338, %CType* %type, i32 0)
  br label %cond_end307

cond_jump_then348:                                ; preds = %cond_else_block306
  %r350 = load i32, i32* %r, align 4
  %type351 = load %CType, %CType* %type, align 8
  %fieldVVV352 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t353 = load i32, i32* %fieldVVV352, align 4
  %fun_result354 = call i32 @lvalue_type(i32 %t353)
  %ortmp355 = or i32 %r350, %fun_result354
  store i32 %ortmp355, i32* %r, align 4
  br label %cond_end349

cond_end349:                                      ; preds = %cond_jump_then348, %cond_else_block306
  %tok356 = load i32, i32* @tok, align 4
  %eq357 = icmp eq i32 %tok356, 61
  %icastKX = zext i1 %eq357 to i32
  store i32 %icastKX, i32* %has_init, align 4
  %btype359 = load %CType, %CType* %btype, align 8
  %fieldVVV360 = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t361 = load i32, i32* %fieldVVV360, align 4
  %andtmp362 = and i32 %t361, 128
  %icmpA363 = icmp ne i32 %andtmp362, 0
  store i1 %icmpA363, i1* %oror358, align 1
  br i1 %icmpA363, label %cond_jump_end365, label %cond_jump_then364

cond_jump_then364:                                ; preds = %cond_end349
  %type370 = load %CType, %CType* %type, align 8
  %fieldVVV371 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t372 = load i32, i32* %fieldVVV371, align 4
  %andtmp373 = and i32 %t372, 32
  %icmpA374 = icmp ne i32 %andtmp373, 0
  store i1 %icmpA374, i1* %andand369, align 1
  br i1 %icmpA374, label %cond_jump_then375, label %cond_jump_end376

cond_jump_end365:                                 ; preds = %cond_jump_end399, %cond_end349
  %oror_result_value409 = load i1, i1* %oror358, align 1
  br i1 %oror_result_value409, label %cond_jump_then410, label %cond_else_block411

cond_jump_then375:                                ; preds = %cond_jump_then364
  %type377 = load %CType, %CType* %type, align 8
  %fieldVVV378 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t379 = load i32, i32* %fieldVVV378, align 4
  %andtmp380 = and i32 %t379, 256
  %icmpA381 = icmp ne i32 %andtmp380, 0
  %andand382 = and i1 %icmpA374, %icmpA381
  store i1 %andand382, i1* %andand369, align 1
  br label %cond_jump_end376

cond_jump_end376:                                 ; preds = %cond_jump_then375, %cond_jump_then364
  %andand_result_value383 = load i1, i1* %andand369, align 1
  store i1 %andand_result_value383, i1* %andand368, align 1
  br i1 %andand_result_value383, label %cond_jump_then384, label %cond_jump_end385

cond_jump_then384:                                ; preds = %cond_jump_end376
  %has_init386 = load i32, i32* %has_init, align 4
  %logical_denial387 = icmp eq i32 %has_init386, 0
  %castOOOO388 = zext i1 %logical_denial387 to i32
  %icmpA389 = icmp ne i32 %castOOOO388, 0
  %andand390 = and i1 %andand_result_value383, %icmpA389
  store i1 %andand390, i1* %andand368, align 1
  br label %cond_jump_end385

cond_jump_end385:                                 ; preds = %cond_jump_then384, %cond_jump_end376
  %andand_result_value391 = load i1, i1* %andand368, align 1
  store i1 %andand_result_value391, i1* %andand367, align 1
  br i1 %andand_result_value391, label %cond_jump_then392, label %cond_jump_end393

cond_jump_then392:                                ; preds = %cond_jump_end385
  %l394 = load i32, i32* %l, align 4
  %eq395 = icmp eq i32 %l394, 240
  %andand396 = and i1 %andand_result_value391, %eq395
  store i1 %andand396, i1* %andand367, align 1
  br label %cond_jump_end393

cond_jump_end393:                                 ; preds = %cond_jump_then392, %cond_jump_end385
  %andand_result_value397 = load i1, i1* %andand367, align 1
  store i1 %andand_result_value397, i1* %andand366, align 1
  br i1 %andand_result_value397, label %cond_jump_then398, label %cond_jump_end399

cond_jump_then398:                                ; preds = %cond_jump_end393
  %type400 = load %CType, %CType* %type, align 8
  %fieldVVV401 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref402 = load %Sym*, %Sym** %fieldVVV401, align 8
  %fieldLLL403 = getelementptr inbounds %Sym, %Sym* %ref402, i32 0, i32 2
  %c404 = load i64, i64* %fieldLLL403, align 4
  %le405 = icmp slt i64 %c404, 0
  %andand406 = and i1 %andand_result_value397, %le405
  store i1 %andand406, i1* %andand366, align 1
  br label %cond_jump_end399

cond_jump_end399:                                 ; preds = %cond_jump_then398, %cond_jump_end393
  %andand_result_value407 = load i1, i1* %andand366, align 1
  %oror408 = or i1 %icmpA363, %andand_result_value407
  store i1 %oror408, i1* %oror358, align 1
  br label %cond_jump_end365

cond_jump_then410:                                ; preds = %cond_jump_end365
  %v413 = load i32, i32* %v, align 4
  %type414 = load %CType, %CType* %type, align 8
  %r415 = load i32, i32* %r, align 4
  %fun_result416 = call %Sym* @external_sym(i32 %v413, %CType* %type, i32 %r415)
  br label %cond_end412

cond_else_block411:                               ; preds = %cond_jump_end365
  %type417 = load %CType, %CType* %type, align 8
  %type418 = load %CType, %CType* %type, align 8
  %fieldVVV419 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t420 = load i32, i32* %fieldVVV419, align 4
  %btype421 = load %CType, %CType* %btype, align 8
  %fieldVVV422 = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t423 = load i32, i32* %fieldVVV422, align 4
  %andtmp424 = and i32 %t423, 256
  %ortmp425 = or i32 %t420, %andtmp424
  %fieldTTT426 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %ortmp425, i32* %fieldTTT426, align 4
  %type427 = load %CType, %CType* %type, align 8
  %fieldVVV428 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t429 = load i32, i32* %fieldVVV428, align 4
  %andtmp430 = and i32 %t429, 256
  %icmpA431 = icmp ne i32 %andtmp430, 0
  br i1 %icmpA431, label %cond_jump_then432, label %cond_else_block433

cond_end412:                                      ; preds = %cond_end443, %cond_jump_then410
  br label %cond_end307

cond_jump_then432:                                ; preds = %cond_else_block411
  %r435 = load i32, i32* %r, align 4
  %ortmp436 = or i32 %r435, 240
  store i32 %ortmp436, i32* %r, align 4
  br label %cond_end434

cond_else_block433:                               ; preds = %cond_else_block411
  %r437 = load i32, i32* %r, align 4
  %l438 = load i32, i32* %l, align 4
  %ortmp439 = or i32 %r437, %l438
  store i32 %ortmp439, i32* %r, align 4
  br label %cond_end434

cond_end434:                                      ; preds = %cond_else_block433, %cond_jump_then432
  %has_init440 = load i32, i32* %has_init, align 4
  %icmpA441 = icmp ne i32 %has_init440, 0
  br i1 %icmpA441, label %cond_jump_then442, label %cond_end443

cond_jump_then442:                                ; preds = %cond_end434
  call void @next()
  br label %cond_end443

cond_end443:                                      ; preds = %cond_jump_then442, %cond_end434
  %type444 = load %CType, %CType* %type, align 8
  %ad445 = load %AttributeDef, %AttributeDef* %ad, align 8
  %r446 = load i32, i32* %r, align 4
  %has_init447 = load i32, i32* %has_init, align 4
  %v448 = load i32, i32* %v, align 4
  %l449 = load i32, i32* %l, align 4
  call void @decl_initializer_alloc(%CType* %type, %AttributeDef* %ad, i32 %r446, i32 %has_init447, i32 %v448, i32 %l449)
  br label %cond_end412

cond_jump_then452:                                ; preds = %cond_end307
  call void @skip(i32 59)
  br label %cond_end_block64

cond_end453:                                      ; preds = %after_break454, %cond_end307
  call void @next()
  br label %cond_end86

after_break454:                                   ; No predecessors!
  br label %cond_end453
}

define internal void @decl_initializer(%CType* %0, %Section* %1, i64 %2, i32 %3, i32 %4) {
entry:
  %andand542 = alloca i1, align 1
  %oror537 = alloca i1, align 1
  %andand536 = alloca i1, align 1
  %andand489 = alloca i1, align 1
  %andand472 = alloca i1, align 1
  %andand433 = alloca i1, align 1
  %oror399 = alloca i1, align 1
  %type1377 = alloca %CType, align 8
  %castXXXX378 = bitcast %CType* %type1377 to i8*
  %5 = call i8* @memset(i8* %castXXXX378, i32 0, i64 16)
  %ad1 = alloca %AttributeDef, align 8
  %castXXXX = bitcast %AttributeDef* %ad1 to i8*
  %6 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %par_count = alloca i32, align 4
  %oror354 = alloca i1, align 1
  %oror353 = alloca i1, align 1
  %andand345 = alloca i1, align 1
  %andand305 = alloca i1, align 1
  %andand304 = alloca i1, align 1
  %andand281 = alloca i1, align 1
  %andand244 = alloca i1, align 1
  %andand232 = alloca i1, align 1
  %oror192 = alloca i1, align 1
  %andand119 = alloca i1, align 1
  %andand118 = alloca i1, align 1
  %andand94 = alloca i1, align 1
  %cstr = alloca %CString*, align 8
  %ch = alloca i32, align 4
  %cstr_len = alloca i32, align 4
  %oror71 = alloca i1, align 1
  %andand54 = alloca i1, align 1
  %andand40 = alloca i1, align 1
  %oror39 = alloca i1, align 1
  %andand22 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %t1 = alloca %CType*, align 8
  %f = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %expr_type = alloca i32, align 4
  %align1 = alloca i32, align 4
  %size1 = alloca i32, align 4
  %i = alloca i32, align 4
  %parlevel = alloca i32, align 4
  %nb = alloca i32, align 4
  %no_oblock = alloca i32, align 4
  %n = alloca i32, align 4
  %array_length = alloca i32, align 4
  %index = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %sec = alloca %Section*, align 8
  %sec2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec2, align 8
  %c = alloca i64, align 8
  %c3 = alloca i64*, align 8
  store i64 %2, i64* %c, align 4
  store i64* %c, i64** %c3, align 8
  %first = alloca i32, align 4
  %first4 = alloca i32*, align 8
  store i32 %3, i32* %first, align 4
  store i32* %first, i32** %first4, align 8
  %size_only = alloca i32, align 4
  %size_only5 = alloca i32*, align 8
  store i32 %4, i32* %size_only, align 4
  store i32* %size_only, i32** %size_only5, align 8
  %type6 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type6, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %andtmp = and i32 %t, 32
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  %type7 = load %CType*, %CType** %type, align 8
  %fieldLLL8 = getelementptr inbounds %CType, %CType* %type7, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL8, align 8
  store %Sym* %ref, %Sym** %s, align 8
  %s9 = load %Sym*, %Sym** %s, align 8
  %fieldLLL10 = getelementptr inbounds %Sym, %Sym* %s9, i32 0, i32 2
  %c11 = load i64, i64* %fieldLLL10, align 4
  %icastM = trunc i64 %c11 to i32
  store i32 %icastM, i32* %n, align 4
  store i32 0, i32* %array_length, align 4
  %type12 = load %CType*, %CType** %type, align 8
  store i32 4382, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.139, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

cond_jump_elif0:                                  ; preds = %entry
  %type346 = load %CType*, %CType** %type, align 8
  %fieldLLL347 = getelementptr inbounds %CType, %CType* %type346, i32 0, i32 0
  %t348 = load i32, i32* %fieldLLL347, align 4
  %andtmp349 = and i32 %t348, 15
  %eq350 = icmp eq i32 %andtmp349, 7
  store i1 %eq350, i1* %andand345, align 1
  br i1 %eq350, label %cond_jump_then351, label %cond_jump_end352

cond_jump_elif_then0:                             ; preds = %cond_jump_end352
  store i32 0, i32* %par_count, align 4
  %tok373 = load i32, i32* @tok, align 4
  %eq374 = icmp eq i32 %tok373, 40
  br i1 %eq374, label %cond_jump_then375, label %cond_end376

cond_jump_elif1:                                  ; preds = %cond_jump_end352
  %tok526 = load i32, i32* @tok, align 4
  %eq527 = icmp eq i32 %tok526, 123
  br i1 %eq527, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  call void @next()
  %type528 = load %CType*, %CType** %type, align 8
  %sec529 = load %Section*, %Section** %sec, align 8
  %c530 = load i64, i64* %c, align 4
  %first531 = load i32, i32* %first, align 4
  %size_only532 = load i32, i32* %size_only, align 4
  call void @decl_initializer(%CType* %type528, %Section* %sec529, i64 %c530, i32 %first531, i32 %size_only532)
  call void @skip(i32 125)
  br label %cond_end

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %size_only533 = load i32, i32* %size_only, align 4
  %icmpA534 = icmp ne i32 %size_only533, 0
  br i1 %icmpA534, label %cond_jump_elif_then2, label %cond_else_block

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  store i32 0, i32* %parlevel, align 4
  br label %loop_top_block535

cond_else_block:                                  ; preds = %cond_jump_elif2
  store i32 1, i32* %expr_type, align 4
  %sec576 = load %Section*, %Section** %sec, align 8
  %logical_denial577 = icmp eq %Section* %sec576, null
  %castOOOO578 = zext i1 %logical_denial577 to i32
  %icmpA579 = icmp ne i32 %castOOOO578, 0
  br i1 %icmpA579, label %cond_jump_then580, label %cond_end581

cond_end:                                         ; preds = %cond_end581, %cond_end_block560, %cond_jump_elif_then1, %cond_end_block522, %cond_end341
  ret void

pointed_type:                                     ; preds = %cond_jump_then
  %inline_result_variable = alloca %CType*, align 8
  %type13 = alloca %CType*, align 8
  store %CType* %type12, %CType** %type13, align 8
  %type14 = load %CType*, %CType** %type13, align 8
  %fieldLLL15 = getelementptr inbounds %CType, %CType* %type14, i32 0, i32 1
  %ref16 = load %Sym*, %Sym** %fieldLLL15, align 8
  %fieldLLL17 = getelementptr inbounds %Sym, %Sym* %ref16, i32 0, i32 3
  %type18 = load %CType, %CType* %fieldLLL17, align 8
  store %CType* %fieldLLL17, %CType** %inline_result_variable, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable19 = load %CType*, %CType** %inline_result_variable, align 8
  store %CType* %inline_result_variable19, %CType** %t1, align 8
  %t120 = load %CType*, %CType** %t1, align 8
  %align121 = load i32, i32* %align1, align 4
  %fun_result = call i32 @type_size(%CType* %t120, i32* %align1)
  store i32 %fun_result, i32* %size1, align 4
  store i32 1, i32* %no_oblock, align 4
  %first23 = load i32, i32* %first, align 4
  %icmpA24 = icmp ne i32 %first23, 0
  store i1 %icmpA24, i1* %andand22, align 1
  br i1 %icmpA24, label %cond_jump_then25, label %cond_jump_end

cond_jump_then25:                                 ; preds = %pointed_type_end
  %tok = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok, 184
  %andand26 = and i1 %icmpA24, %not_eq
  store i1 %andand26, i1* %andand22, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then25, %pointed_type_end
  %andand_result_value = load i1, i1* %andand22, align 1
  store i1 %andand_result_value, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then27, label %cond_jump_end28

cond_jump_then27:                                 ; preds = %cond_jump_end
  %tok29 = load i32, i32* @tok, align 4
  %not_eq30 = icmp ne i32 %tok29, 181
  %andand31 = and i1 %andand_result_value, %not_eq30
  store i1 %andand31, i1* %andand, align 1
  br label %cond_jump_end28

cond_jump_end28:                                  ; preds = %cond_jump_then27, %cond_jump_end
  %andand_result_value32 = load i1, i1* %andand, align 1
  store i1 %andand_result_value32, i1* %oror, align 1
  br i1 %andand_result_value32, label %cond_jump_end34, label %cond_jump_then33

cond_jump_then33:                                 ; preds = %cond_jump_end28
  %tok35 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok35, 123
  %oror36 = or i1 %andand_result_value32, %eq
  store i1 %oror36, i1* %oror, align 1
  br label %cond_jump_end34

cond_jump_end34:                                  ; preds = %cond_jump_then33, %cond_jump_end28
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then37, label %cond_end38

cond_jump_then37:                                 ; preds = %cond_jump_end34
  call void @skip(i32 123)
  store i32 0, i32* %no_oblock, align 4
  br label %cond_end38

cond_end38:                                       ; preds = %cond_jump_then37, %cond_jump_end34
  %tok41 = load i32, i32* @tok, align 4
  %eq42 = icmp eq i32 %tok41, 184
  store i1 %eq42, i1* %andand40, align 1
  br i1 %eq42, label %cond_jump_then43, label %cond_jump_end44

cond_jump_then43:                                 ; preds = %cond_end38
  %t145 = load %CType*, %CType** %t1, align 8
  %fieldLLL46 = getelementptr inbounds %CType, %CType* %t145, i32 0, i32 0
  %t47 = load i32, i32* %fieldLLL46, align 4
  %andtmp48 = and i32 %t47, 15
  %eq49 = icmp eq i32 %andtmp48, 0
  %andand50 = and i1 %eq42, %eq49
  store i1 %andand50, i1* %andand40, align 1
  br label %cond_jump_end44

cond_jump_end44:                                  ; preds = %cond_jump_then43, %cond_end38
  %andand_result_value51 = load i1, i1* %andand40, align 1
  store i1 %andand_result_value51, i1* %oror39, align 1
  br i1 %andand_result_value51, label %cond_jump_end53, label %cond_jump_then52

cond_jump_then52:                                 ; preds = %cond_jump_end44
  %tok55 = load i32, i32* @tok, align 4
  %eq56 = icmp eq i32 %tok55, 181
  store i1 %eq56, i1* %andand54, align 1
  br i1 %eq56, label %cond_jump_then57, label %cond_jump_end58

cond_jump_end53:                                  ; preds = %cond_jump_end58, %cond_jump_end44
  %oror_result_value67 = load i1, i1* %oror39, align 1
  br i1 %oror_result_value67, label %cond_jump_then68, label %cond_else_block69

cond_jump_then57:                                 ; preds = %cond_jump_then52
  %t159 = load %CType*, %CType** %t1, align 8
  %fieldLLL60 = getelementptr inbounds %CType, %CType* %t159, i32 0, i32 0
  %t61 = load i32, i32* %fieldLLL60, align 4
  %andtmp62 = and i32 %t61, 15
  %eq63 = icmp eq i32 %andtmp62, 1
  %andand64 = and i1 %eq56, %eq63
  store i1 %andand64, i1* %andand54, align 1
  br label %cond_jump_end58

cond_jump_end58:                                  ; preds = %cond_jump_then57, %cond_jump_then52
  %andand_result_value65 = load i1, i1* %andand54, align 1
  %oror66 = or i1 %andand_result_value51, %andand_result_value65
  store i1 %oror66, i1* %oror39, align 1
  br label %cond_jump_end53

cond_jump_then68:                                 ; preds = %cond_jump_end53
  br label %loop_top_block

cond_else_block69:                                ; preds = %cond_jump_end53
  store i32 0, i32* %index, align 4
  br label %loop_top_block222

cond_end70:                                       ; preds = %cond_end_block226, %cond_end203
  %no_oblock298 = load i32, i32* %no_oblock, align 4
  %logical_denial299 = icmp eq i32 %no_oblock298, 0
  %castOOOO300 = zext i1 %logical_denial299 to i32
  %icmpA301 = icmp ne i32 %castOOOO300, 0
  br i1 %icmpA301, label %cond_jump_then302, label %cond_end303

loop_top_block:                                   ; preds = %cond_end112, %cond_jump_then68
  %tok72 = load i32, i32* @tok, align 4
  %eq73 = icmp eq i32 %tok72, 181
  store i1 %eq73, i1* %oror71, align 1
  br i1 %eq73, label %cond_jump_end75, label %cond_jump_then74

cond_jump_then74:                                 ; preds = %loop_top_block
  %tok76 = load i32, i32* @tok, align 4
  %eq77 = icmp eq i32 %tok76, 184
  %oror78 = or i1 %eq73, %eq77
  store i1 %oror78, i1* %oror71, align 1
  br label %cond_jump_end75

cond_jump_end75:                                  ; preds = %cond_jump_then74, %loop_top_block
  %oror_result_value79 = load i1, i1* %oror71, align 1
  br i1 %oror_result_value79, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end75
  %tokc = load %CValue, %CValue* @tokc, align 16
  %cstr80 = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  store %CString* %cstr80, %CString** %cstr, align 8
  %tok81 = load i32, i32* @tok, align 4
  %eq82 = icmp eq i32 %tok81, 181
  br i1 %eq82, label %cond_jump_then83, label %cond_else_block84

cond_end_block:                                   ; preds = %cond_jump_end75
  %n193 = load i32, i32* %n, align 4
  %le194 = icmp slt i32 %n193, 0
  store i1 %le194, i1* %oror192, align 1
  br i1 %le194, label %cond_jump_end196, label %cond_jump_then195

cond_jump_then83:                                 ; preds = %cond_then_block
  %cstr86 = load %CString*, %CString** %cstr, align 8
  %fieldLLL87 = getelementptr inbounds %CString, %CString* %cstr86, i32 0, i32 0
  %size = load i32, i32* %fieldLLL87, align 4
  store i32 %size, i32* %cstr_len, align 4
  br label %cond_end85

cond_else_block84:                                ; preds = %cond_then_block
  %cstr88 = load %CString*, %CString** %cstr, align 8
  %fieldLLL89 = getelementptr inbounds %CString, %CString* %cstr88, i32 0, i32 0
  %size90 = load i32, i32* %fieldLLL89, align 4
  %icastD = sext i32 %size90 to i64
  %div = sdiv i64 %icastD, 4
  %icastM91 = trunc i64 %div to i32
  store i32 %icastM91, i32* %cstr_len, align 4
  br label %cond_end85

cond_end85:                                       ; preds = %cond_else_block84, %cond_jump_then83
  %cstr_len92 = load i32, i32* %cstr_len, align 4
  %sub = sub i32 %cstr_len92, 1
  store i32 %sub, i32* %cstr_len, align 4
  %add = add i32 %sub, 1
  %cstr_len93 = load i32, i32* %cstr_len, align 4
  store i32 %cstr_len93, i32* %nb, align 4
  %n95 = load i32, i32* %n, align 4
  %gteq_signed = icmp sge i32 %n95, 0
  store i1 %gteq_signed, i1* %andand94, align 1
  br i1 %gteq_signed, label %cond_jump_then96, label %cond_jump_end97

cond_jump_then96:                                 ; preds = %cond_end85
  %nb98 = load i32, i32* %nb, align 4
  %n99 = load i32, i32* %n, align 4
  %array_length100 = load i32, i32* %array_length, align 4
  %sub101 = sub i32 %n99, %array_length100
  %gt = icmp sgt i32 %nb98, %sub101
  %andand102 = and i1 %gteq_signed, %gt
  store i1 %andand102, i1* %andand94, align 1
  br label %cond_jump_end97

cond_jump_end97:                                  ; preds = %cond_jump_then96, %cond_end85
  %andand_result_value103 = load i1, i1* %andand94, align 1
  br i1 %andand_result_value103, label %cond_jump_then104, label %cond_end105

cond_jump_then104:                                ; preds = %cond_jump_end97
  %n106 = load i32, i32* %n, align 4
  %array_length107 = load i32, i32* %array_length, align 4
  %sub108 = sub i32 %n106, %array_length107
  store i32 %sub108, i32* %nb, align 4
  br label %cond_end105

cond_end105:                                      ; preds = %cond_jump_then104, %cond_jump_end97
  %size_only109 = load i32, i32* %size_only, align 4
  %logical_denial = icmp eq i32 %size_only109, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA110 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA110, label %cond_jump_then111, label %cond_end112

cond_jump_then111:                                ; preds = %cond_end105
  %cstr_len113 = load i32, i32* %cstr_len, align 4
  %nb114 = load i32, i32* %nb, align 4
  %gt115 = icmp sgt i32 %cstr_len113, %nb114
  br i1 %gt115, label %cond_jump_then116, label %cond_end117

cond_end112:                                      ; preds = %cond_end135, %cond_end105
  %array_length187 = load i32, i32* %array_length, align 4
  %nb188 = load i32, i32* %nb, align 4
  %add189 = add i32 %array_length187, %nb188
  store i32 %add189, i32* %array_length, align 4
  %nb190 = load i32, i32* %nb, align 4
  %sub191 = sub i32 %add189, %nb190
  call void @next()
  br label %loop_top_block

cond_jump_then116:                                ; preds = %cond_jump_then111
  call void (i8*, ...) @warning(i8* bitcast ([41 x i8]* @192 to i8*))
  br label %cond_end117

cond_end117:                                      ; preds = %cond_jump_then116, %cond_jump_then111
  %sec120 = load %Section*, %Section** %sec, align 8
  %icmpB = icmp ne %Section* %sec120, null
  store i1 %icmpB, i1* %andand119, align 1
  br i1 %icmpB, label %cond_jump_then121, label %cond_jump_end122

cond_jump_then121:                                ; preds = %cond_end117
  %tok123 = load i32, i32* @tok, align 4
  %eq124 = icmp eq i32 %tok123, 181
  %andand125 = and i1 %icmpB, %eq124
  store i1 %andand125, i1* %andand119, align 1
  br label %cond_jump_end122

cond_jump_end122:                                 ; preds = %cond_jump_then121, %cond_end117
  %andand_result_value126 = load i1, i1* %andand119, align 1
  store i1 %andand_result_value126, i1* %andand118, align 1
  br i1 %andand_result_value126, label %cond_jump_then127, label %cond_jump_end128

cond_jump_then127:                                ; preds = %cond_jump_end122
  %size1129 = load i32, i32* %size1, align 4
  %eq130 = icmp eq i32 %size1129, 1
  %andand131 = and i1 %andand_result_value126, %eq130
  store i1 %andand131, i1* %andand118, align 1
  br label %cond_jump_end128

cond_jump_end128:                                 ; preds = %cond_jump_then127, %cond_jump_end122
  %andand_result_value132 = load i1, i1* %andand118, align 1
  br i1 %andand_result_value132, label %cond_jump_then133, label %cond_else_block134

cond_jump_then133:                                ; preds = %cond_jump_end128
  %sec136 = load %Section*, %Section** %sec, align 8
  %fieldLLL137 = getelementptr inbounds %Section, %Section* %sec136, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL137, align 8
  %c138 = load i64, i64* %c, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %c138, 1
  %add139 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add139 to i8*
  %array_length140 = load i32, i32* %array_length, align 4
  %ptrToIntC141 = ptrtoint i8* %intToPtrB to i64
  %sext = sext i32 %array_length140 to i64
  %mul142 = mul i64 %sext, 1
  %add143 = add i64 %ptrToIntC141, %mul142
  %intToPtrB144 = inttoptr i64 %add143 to i8*
  %cstr145 = load %CString*, %CString** %cstr, align 8
  %fieldLLL146 = getelementptr inbounds %CString, %CString* %cstr145, i32 0, i32 1
  %data147 = load i8*, i8** %fieldLLL146, align 8
  %nb148 = load i32, i32* %nb, align 4
  %icastD149 = sext i32 %nb148 to i64
  %fun_result150 = call i8* @memcpy(i8* %intToPtrB144, i8* %data147, i64 %icastD149)
  br label %cond_end135

cond_else_block134:                               ; preds = %cond_jump_end128
  store i32 0, i32* %i, align 4
  br label %loop_top_block151

cond_end135:                                      ; preds = %cond_end_block155, %cond_jump_then133
  br label %cond_end112

loop_continue_top_block:                          ; preds = %cond_end160
  %i183 = load i32, i32* %i, align 4
  %add184 = add i32 %i183, 1
  store i32 %add184, i32* %i, align 4
  %i185 = load i32, i32* %i, align 4
  %sub186 = sub i32 %i185, 1
  br label %loop_top_block151

loop_top_block151:                                ; preds = %loop_continue_top_block, %cond_else_block134
  %i152 = load i32, i32* %i, align 4
  %nb153 = load i32, i32* %nb, align 4
  %le = icmp slt i32 %i152, %nb153
  br i1 %le, label %cond_then_block154, label %cond_end_block155

cond_then_block154:                               ; preds = %loop_top_block151
  %tok156 = load i32, i32* @tok, align 4
  %eq157 = icmp eq i32 %tok156, 181
  br i1 %eq157, label %cond_jump_then158, label %cond_else_block159

cond_end_block155:                                ; preds = %loop_top_block151
  br label %cond_end135

cond_jump_then158:                                ; preds = %cond_then_block154
  %cstr161 = load %CString*, %CString** %cstr, align 8
  %fieldLLL162 = getelementptr inbounds %CString, %CString* %cstr161, i32 0, i32 1
  %data163 = load i8*, i8** %fieldLLL162, align 8
  %i164 = load i32, i32* %i, align 4
  %element_addressAB = load i8*, i8** %fieldLLL162, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 %i164
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  store i32 %icastKY, i32* %ch, align 4
  br label %cond_end160

cond_else_block159:                               ; preds = %cond_then_block154
  %cstr165 = load %CString*, %CString** %cstr, align 8
  %fieldLLL166 = getelementptr inbounds %CString, %CString* %cstr165, i32 0, i32 1
  %data167 = load i8*, i8** %fieldLLL166, align 8
  %castAQ = bitcast i8* %data167 to i32*
  %i168 = load i32, i32* %i, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL166 to i32**
  %element_addressAB169 = load i32*, i32** %castXYXXYXYXY, align 8
  %element_addressXYXZY170 = getelementptr inbounds i32, i32* %element_addressAB169, i32 %i168
  %load_element171 = load i32, i32* %element_addressXYXZY170, align 4
  store i32 %load_element171, i32* %ch, align 4
  br label %cond_end160

cond_end160:                                      ; preds = %cond_else_block159, %cond_jump_then158
  %t1172 = load %CType*, %CType** %t1, align 8
  %sec173 = load %Section*, %Section** %sec, align 8
  %c174 = load i64, i64* %c, align 4
  %array_length175 = load i32, i32* %array_length, align 4
  %i176 = load i32, i32* %i, align 4
  %add177 = add i32 %array_length175, %i176
  %size1178 = load i32, i32* %size1, align 4
  %mul179 = mul i32 %add177, %size1178
  %icastD180 = sext i32 %mul179 to i64
  %add181 = add i64 %c174, %icastD180
  %ch182 = load i32, i32* %ch, align 4
  call void @init_putv(%CType* %t1172, %Section* %sec173, i64 %add181, i32 %ch182, i32 0)
  br label %loop_continue_top_block

cond_jump_then195:                                ; preds = %cond_end_block
  %array_length197 = load i32, i32* %array_length, align 4
  %n198 = load i32, i32* %n, align 4
  %le199 = icmp slt i32 %array_length197, %n198
  %oror200 = or i1 %le194, %le199
  store i1 %oror200, i1* %oror192, align 1
  br label %cond_jump_end196

cond_jump_end196:                                 ; preds = %cond_jump_then195, %cond_end_block
  %oror_result_value201 = load i1, i1* %oror192, align 1
  br i1 %oror_result_value201, label %cond_jump_then202, label %cond_end203

cond_jump_then202:                                ; preds = %cond_jump_end196
  %size_only204 = load i32, i32* %size_only, align 4
  %logical_denial205 = icmp eq i32 %size_only204, 0
  %castOOOO206 = zext i1 %logical_denial205 to i32
  %icmpA207 = icmp ne i32 %castOOOO206, 0
  br i1 %icmpA207, label %cond_jump_then208, label %cond_end209

cond_end203:                                      ; preds = %cond_end209, %cond_jump_end196
  br label %cond_end70

cond_jump_then208:                                ; preds = %cond_jump_then202
  %t1210 = load %CType*, %CType** %t1, align 8
  %sec211 = load %Section*, %Section** %sec, align 8
  %c212 = load i64, i64* %c, align 4
  %array_length213 = load i32, i32* %array_length, align 4
  %size1214 = load i32, i32* %size1, align 4
  %mul215 = mul i32 %array_length213, %size1214
  %icastD216 = sext i32 %mul215 to i64
  %add217 = add i64 %c212, %icastD216
  call void @init_putv(%CType* %t1210, %Section* %sec211, i64 %add217, i32 0, i32 0)
  br label %cond_end209

cond_end209:                                      ; preds = %cond_jump_then208, %cond_jump_then202
  %array_length218 = load i32, i32* %array_length, align 4
  %add219 = add i32 %array_length218, 1
  store i32 %add219, i32* %array_length, align 4
  %array_length220 = load i32, i32* %array_length, align 4
  %sub221 = sub i32 %array_length220, 1
  br label %cond_end203

loop_top_block222:                                ; preds = %cond_end296, %cond_else_block69
  %tok223 = load i32, i32* @tok, align 4
  %not_eq224 = icmp ne i32 %tok223, 125
  br i1 %not_eq224, label %cond_then_block225, label %cond_end_block226

cond_then_block225:                               ; preds = %loop_top_block222
  %type227 = load %CType*, %CType** %type, align 8
  %sec228 = load %Section*, %Section** %sec, align 8
  %c229 = load i64, i64* %c, align 4
  %index230 = load i32, i32* %index, align 4
  %size_only231 = load i32, i32* %size_only, align 4
  call void @decl_designator(%CType* %type227, %Section* %sec228, i64 %c229, i32* %index, %Sym** null, i32 %size_only231)
  %n233 = load i32, i32* %n, align 4
  %gteq_signed234 = icmp sge i32 %n233, 0
  store i1 %gteq_signed234, i1* %andand232, align 1
  br i1 %gteq_signed234, label %cond_jump_then235, label %cond_jump_end236

cond_end_block226:                                ; preds = %cond_jump_then295, %cond_jump_then291, %loop_top_block222
  br label %cond_end70

cond_jump_then235:                                ; preds = %cond_then_block225
  %index237 = load i32, i32* %index, align 4
  %n238 = load i32, i32* %n, align 4
  %gteq_signed239 = icmp sge i32 %index237, %n238
  %andand240 = and i1 %gteq_signed234, %gteq_signed239
  store i1 %andand240, i1* %andand232, align 1
  br label %cond_jump_end236

cond_jump_end236:                                 ; preds = %cond_jump_then235, %cond_then_block225
  %andand_result_value241 = load i1, i1* %andand232, align 1
  br i1 %andand_result_value241, label %cond_jump_then242, label %cond_end243

cond_jump_then242:                                ; preds = %cond_jump_end236
  call void (i8*, ...) @error(i8* bitcast ([16 x i8]* @193 to i8*))
  br label %cond_end243

cond_end243:                                      ; preds = %cond_jump_then242, %cond_jump_end236
  %size_only245 = load i32, i32* %size_only, align 4
  %logical_denial246 = icmp eq i32 %size_only245, 0
  %castOOOO247 = zext i1 %logical_denial246 to i32
  %icmpA248 = icmp ne i32 %castOOOO247, 0
  store i1 %icmpA248, i1* %andand244, align 1
  br i1 %icmpA248, label %cond_jump_then249, label %cond_jump_end250

cond_jump_then249:                                ; preds = %cond_end243
  %array_length251 = load i32, i32* %array_length, align 4
  %index252 = load i32, i32* %index, align 4
  %le253 = icmp slt i32 %array_length251, %index252
  %andand254 = and i1 %icmpA248, %le253
  store i1 %andand254, i1* %andand244, align 1
  br label %cond_jump_end250

cond_jump_end250:                                 ; preds = %cond_jump_then249, %cond_end243
  %andand_result_value255 = load i1, i1* %andand244, align 1
  br i1 %andand_result_value255, label %cond_jump_then256, label %cond_end257

cond_jump_then256:                                ; preds = %cond_jump_end250
  %t1258 = load %CType*, %CType** %t1, align 8
  %sec259 = load %Section*, %Section** %sec, align 8
  %c260 = load i64, i64* %c, align 4
  %array_length261 = load i32, i32* %array_length, align 4
  %size1262 = load i32, i32* %size1, align 4
  %mul263 = mul i32 %array_length261, %size1262
  %icastD264 = sext i32 %mul263 to i64
  %add265 = add i64 %c260, %icastD264
  %index266 = load i32, i32* %index, align 4
  %array_length267 = load i32, i32* %array_length, align 4
  %sub268 = sub i32 %index266, %array_length267
  %size1269 = load i32, i32* %size1, align 4
  %mul270 = mul i32 %sub268, %size1269
  call void @init_putz(%CType* %t1258, %Section* %sec259, i64 %add265, i32 %mul270)
  br label %cond_end257

cond_end257:                                      ; preds = %cond_jump_then256, %cond_jump_end250
  %index271 = load i32, i32* %index, align 4
  %add272 = add i32 %index271, 1
  store i32 %add272, i32* %index, align 4
  %index273 = load i32, i32* %index, align 4
  %sub274 = sub i32 %index273, 1
  %index275 = load i32, i32* %index, align 4
  %array_length276 = load i32, i32* %array_length, align 4
  %gt277 = icmp sgt i32 %index275, %array_length276
  br i1 %gt277, label %cond_jump_then278, label %cond_end279

cond_jump_then278:                                ; preds = %cond_end257
  %index280 = load i32, i32* %index, align 4
  store i32 %index280, i32* %array_length, align 4
  br label %cond_end279

cond_end279:                                      ; preds = %cond_jump_then278, %cond_end257
  %index282 = load i32, i32* %index, align 4
  %n283 = load i32, i32* %n, align 4
  %gteq_signed284 = icmp sge i32 %index282, %n283
  store i1 %gteq_signed284, i1* %andand281, align 1
  br i1 %gteq_signed284, label %cond_jump_then285, label %cond_jump_end286

cond_jump_then285:                                ; preds = %cond_end279
  %no_oblock287 = load i32, i32* %no_oblock, align 4
  %icmpA288 = icmp ne i32 %no_oblock287, 0
  %andand289 = and i1 %gteq_signed284, %icmpA288
  store i1 %andand289, i1* %andand281, align 1
  br label %cond_jump_end286

cond_jump_end286:                                 ; preds = %cond_jump_then285, %cond_end279
  %andand_result_value290 = load i1, i1* %andand281, align 1
  br i1 %andand_result_value290, label %cond_jump_then291, label %cond_end292

cond_jump_then291:                                ; preds = %cond_jump_end286
  br label %cond_end_block226

cond_end292:                                      ; preds = %after_break, %cond_jump_end286
  %tok293 = load i32, i32* @tok, align 4
  %eq294 = icmp eq i32 %tok293, 125
  br i1 %eq294, label %cond_jump_then295, label %cond_end296

after_break:                                      ; No predecessors!
  br label %cond_end292

cond_jump_then295:                                ; preds = %cond_end292
  br label %cond_end_block226

cond_end296:                                      ; preds = %after_break297, %cond_end292
  call void @skip(i32 44)
  br label %loop_top_block222

after_break297:                                   ; No predecessors!
  br label %cond_end296

cond_jump_then302:                                ; preds = %cond_end70
  call void @skip(i32 125)
  br label %cond_end303

cond_end303:                                      ; preds = %cond_jump_then302, %cond_end70
  %size_only306 = load i32, i32* %size_only, align 4
  %logical_denial307 = icmp eq i32 %size_only306, 0
  %castOOOO308 = zext i1 %logical_denial307 to i32
  %icmpA309 = icmp ne i32 %castOOOO308, 0
  store i1 %icmpA309, i1* %andand305, align 1
  br i1 %icmpA309, label %cond_jump_then310, label %cond_jump_end311

cond_jump_then310:                                ; preds = %cond_end303
  %n312 = load i32, i32* %n, align 4
  %gteq_signed313 = icmp sge i32 %n312, 0
  %andand314 = and i1 %icmpA309, %gteq_signed313
  store i1 %andand314, i1* %andand305, align 1
  br label %cond_jump_end311

cond_jump_end311:                                 ; preds = %cond_jump_then310, %cond_end303
  %andand_result_value315 = load i1, i1* %andand305, align 1
  store i1 %andand_result_value315, i1* %andand304, align 1
  br i1 %andand_result_value315, label %cond_jump_then316, label %cond_jump_end317

cond_jump_then316:                                ; preds = %cond_jump_end311
  %array_length318 = load i32, i32* %array_length, align 4
  %n319 = load i32, i32* %n, align 4
  %le320 = icmp slt i32 %array_length318, %n319
  %andand321 = and i1 %andand_result_value315, %le320
  store i1 %andand321, i1* %andand304, align 1
  br label %cond_jump_end317

cond_jump_end317:                                 ; preds = %cond_jump_then316, %cond_jump_end311
  %andand_result_value322 = load i1, i1* %andand304, align 1
  br i1 %andand_result_value322, label %cond_jump_then323, label %cond_end324

cond_jump_then323:                                ; preds = %cond_jump_end317
  %t1325 = load %CType*, %CType** %t1, align 8
  %sec326 = load %Section*, %Section** %sec, align 8
  %c327 = load i64, i64* %c, align 4
  %array_length328 = load i32, i32* %array_length, align 4
  %size1329 = load i32, i32* %size1, align 4
  %mul330 = mul i32 %array_length328, %size1329
  %icastD331 = sext i32 %mul330 to i64
  %add332 = add i64 %c327, %icastD331
  %n333 = load i32, i32* %n, align 4
  %array_length334 = load i32, i32* %array_length, align 4
  %sub335 = sub i32 %n333, %array_length334
  %size1336 = load i32, i32* %size1, align 4
  %mul337 = mul i32 %sub335, %size1336
  call void @init_putz(%CType* %t1325, %Section* %sec326, i64 %add332, i32 %mul337)
  br label %cond_end324

cond_end324:                                      ; preds = %cond_jump_then323, %cond_jump_end317
  %n338 = load i32, i32* %n, align 4
  %le339 = icmp slt i32 %n338, 0
  br i1 %le339, label %cond_jump_then340, label %cond_end341

cond_jump_then340:                                ; preds = %cond_end324
  %s342 = load %Sym*, %Sym** %s, align 8
  %array_length343 = load i32, i32* %array_length, align 4
  %icastD344 = sext i32 %array_length343 to i64
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s342, i32 0, i32 2
  store i64 %icastD344, i64* %fieldTU, align 4
  br label %cond_end341

cond_end341:                                      ; preds = %cond_jump_then340, %cond_end324
  br label %cond_end

cond_jump_then351:                                ; preds = %cond_jump_elif0
  %sec355 = load %Section*, %Section** %sec, align 8
  %icmpB356 = icmp ne %Section* %sec355, null
  store i1 %icmpB356, i1* %oror354, align 1
  br i1 %icmpB356, label %cond_jump_end358, label %cond_jump_then357

cond_jump_end352:                                 ; preds = %cond_jump_end366, %cond_jump_elif0
  %andand_result_value372 = load i1, i1* %andand345, align 1
  br i1 %andand_result_value372, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_then357:                                ; preds = %cond_jump_then351
  %first359 = load i32, i32* %first, align 4
  %logical_denial360 = icmp eq i32 %first359, 0
  %castOOOO361 = zext i1 %logical_denial360 to i32
  %icmpA362 = icmp ne i32 %castOOOO361, 0
  %oror363 = or i1 %icmpB356, %icmpA362
  store i1 %oror363, i1* %oror354, align 1
  br label %cond_jump_end358

cond_jump_end358:                                 ; preds = %cond_jump_then357, %cond_jump_then351
  %oror_result_value364 = load i1, i1* %oror354, align 1
  store i1 %oror_result_value364, i1* %oror353, align 1
  br i1 %oror_result_value364, label %cond_jump_end366, label %cond_jump_then365

cond_jump_then365:                                ; preds = %cond_jump_end358
  %tok367 = load i32, i32* @tok, align 4
  %eq368 = icmp eq i32 %tok367, 123
  %oror369 = or i1 %oror_result_value364, %eq368
  store i1 %oror369, i1* %oror353, align 1
  br label %cond_jump_end366

cond_jump_end366:                                 ; preds = %cond_jump_then365, %cond_jump_end358
  %oror_result_value370 = load i1, i1* %oror353, align 1
  %andand371 = and i1 %eq350, %oror_result_value370
  store i1 %andand371, i1* %andand345, align 1
  br label %cond_jump_end352

cond_jump_then375:                                ; preds = %cond_jump_elif_then0
  call void @next()
  br label %loop_top_block379

cond_end376:                                      ; preds = %cond_end395, %cond_jump_elif_then0
  store i32 1, i32* %no_oblock, align 4
  %first400 = load i32, i32* %first, align 4
  %icmpA401 = icmp ne i32 %first400, 0
  store i1 %icmpA401, i1* %oror399, align 1
  br i1 %icmpA401, label %cond_jump_end403, label %cond_jump_then402

loop_top_block379:                                ; preds = %cond_then_block382, %cond_jump_then375
  %tok380 = load i32, i32* @tok, align 4
  %eq381 = icmp eq i32 %tok380, 40
  br i1 %eq381, label %cond_then_block382, label %cond_end_block383

cond_then_block382:                               ; preds = %loop_top_block379
  %par_count384 = load i32, i32* %par_count, align 4
  %add385 = add i32 %par_count384, 1
  store i32 %add385, i32* %par_count, align 4
  %par_count386 = load i32, i32* %par_count, align 4
  %sub387 = sub i32 %par_count386, 1
  call void @next()
  br label %loop_top_block379

cond_end_block383:                                ; preds = %loop_top_block379
  %type1388 = load %CType, %CType* %type1377, align 8
  %ad1389 = load %AttributeDef, %AttributeDef* %ad1, align 8
  %fun_result390 = call i32 @parse_btype(%CType* %type1377, %AttributeDef* %ad1)
  %logical_denial391 = icmp eq i32 %fun_result390, 0
  %castOOOO392 = zext i1 %logical_denial391 to i32
  %icmpA393 = icmp ne i32 %castOOOO392, 0
  br i1 %icmpA393, label %cond_jump_then394, label %cond_end395

cond_jump_then394:                                ; preds = %cond_end_block383
  call void @expect(i8* bitcast ([5 x i8]* @194 to i8*))
  br label %cond_end395

cond_end395:                                      ; preds = %cond_jump_then394, %cond_end_block383
  %type1396 = load %CType, %CType* %type1377, align 8
  %ad1397 = load %AttributeDef, %AttributeDef* %ad1, align 8
  %n398 = load i32, i32* %n, align 4
  call void @type_decl(%CType* %type1377, %AttributeDef* %ad1, i32* %n, i32 1)
  call void @skip(i32 41)
  br label %cond_end376

cond_jump_then402:                                ; preds = %cond_end376
  %tok404 = load i32, i32* @tok, align 4
  %eq405 = icmp eq i32 %tok404, 123
  %oror406 = or i1 %icmpA401, %eq405
  store i1 %oror406, i1* %oror399, align 1
  br label %cond_jump_end403

cond_jump_end403:                                 ; preds = %cond_jump_then402, %cond_end376
  %oror_result_value407 = load i1, i1* %oror399, align 1
  br i1 %oror_result_value407, label %cond_jump_then408, label %cond_end409

cond_jump_then408:                                ; preds = %cond_jump_end403
  call void @skip(i32 123)
  store i32 0, i32* %no_oblock, align 4
  br label %cond_end409

cond_end409:                                      ; preds = %cond_jump_then408, %cond_jump_end403
  %type410 = load %CType*, %CType** %type, align 8
  %fieldLLL411 = getelementptr inbounds %CType, %CType* %type410, i32 0, i32 1
  %ref412 = load %Sym*, %Sym** %fieldLLL411, align 8
  store %Sym* %ref412, %Sym** %s, align 8
  %s413 = load %Sym*, %Sym** %s, align 8
  %fieldLLL414 = getelementptr inbounds %Sym, %Sym* %s413, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL414, align 8
  store %Sym* %next, %Sym** %f, align 8
  store i32 0, i32* %array_length, align 4
  store i32 0, i32* %index, align 4
  %s415 = load %Sym*, %Sym** %s, align 8
  %fieldLLL416 = getelementptr inbounds %Sym, %Sym* %s415, i32 0, i32 2
  %c417 = load i64, i64* %fieldLLL416, align 4
  %icastM418 = trunc i64 %c417 to i32
  store i32 %icastM418, i32* %n, align 4
  br label %loop_top_block419

loop_top_block419:                                ; preds = %cond_end487, %cond_end409
  %tok420 = load i32, i32* @tok, align 4
  %not_eq421 = icmp ne i32 %tok420, 125
  br i1 %not_eq421, label %cond_then_block422, label %cond_end_block423

cond_then_block422:                               ; preds = %loop_top_block419
  %type424 = load %CType*, %CType** %type, align 8
  %sec425 = load %Section*, %Section** %sec, align 8
  %c426 = load i64, i64* %c, align 4
  %f427 = load %Sym*, %Sym** %f, align 8
  %size_only428 = load i32, i32* %size_only, align 4
  call void @decl_designator(%CType* %type424, %Section* %sec425, i64 %c426, i32* null, %Sym** %f, i32 %size_only428)
  %f429 = load %Sym*, %Sym** %f, align 8
  %fieldLLL430 = getelementptr inbounds %Sym, %Sym* %f429, i32 0, i32 2
  %c431 = load i64, i64* %fieldLLL430, align 4
  %icastM432 = trunc i64 %c431 to i32
  store i32 %icastM432, i32* %index, align 4
  %size_only434 = load i32, i32* %size_only, align 4
  %logical_denial435 = icmp eq i32 %size_only434, 0
  %castOOOO436 = zext i1 %logical_denial435 to i32
  %icmpA437 = icmp ne i32 %castOOOO436, 0
  store i1 %icmpA437, i1* %andand433, align 1
  br i1 %icmpA437, label %cond_jump_then438, label %cond_jump_end439

cond_end_block423:                                ; preds = %cond_jump_then486, %cond_jump_then481, %loop_top_block419
  %size_only490 = load i32, i32* %size_only, align 4
  %logical_denial491 = icmp eq i32 %size_only490, 0
  %castOOOO492 = zext i1 %logical_denial491 to i32
  %icmpA493 = icmp ne i32 %castOOOO492, 0
  store i1 %icmpA493, i1* %andand489, align 1
  br i1 %icmpA493, label %cond_jump_then494, label %cond_jump_end495

cond_jump_then438:                                ; preds = %cond_then_block422
  %array_length440 = load i32, i32* %array_length, align 4
  %index441 = load i32, i32* %index, align 4
  %le442 = icmp slt i32 %array_length440, %index441
  %andand443 = and i1 %icmpA437, %le442
  store i1 %andand443, i1* %andand433, align 1
  br label %cond_jump_end439

cond_jump_end439:                                 ; preds = %cond_jump_then438, %cond_then_block422
  %andand_result_value444 = load i1, i1* %andand433, align 1
  br i1 %andand_result_value444, label %cond_jump_then445, label %cond_end446

cond_jump_then445:                                ; preds = %cond_jump_end439
  %type447 = load %CType*, %CType** %type, align 8
  %sec448 = load %Section*, %Section** %sec, align 8
  %c449 = load i64, i64* %c, align 4
  %array_length450 = load i32, i32* %array_length, align 4
  %icastD451 = sext i32 %array_length450 to i64
  %add452 = add i64 %c449, %icastD451
  %index453 = load i32, i32* %index, align 4
  %array_length454 = load i32, i32* %array_length, align 4
  %sub455 = sub i32 %index453, %array_length454
  call void @init_putz(%CType* %type447, %Section* %sec448, i64 %add452, i32 %sub455)
  br label %cond_end446

cond_end446:                                      ; preds = %cond_jump_then445, %cond_jump_end439
  %index456 = load i32, i32* %index, align 4
  %f457 = load %Sym*, %Sym** %f, align 8
  %fieldLLL458 = getelementptr inbounds %Sym, %Sym* %f457, i32 0, i32 3
  %type459 = load %CType, %CType* %fieldLLL458, align 8
  %align1460 = load i32, i32* %align1, align 4
  %fun_result461 = call i32 @type_size(%CType* %fieldLLL458, i32* %align1)
  %add462 = add i32 %index456, %fun_result461
  store i32 %add462, i32* %index, align 4
  %index463 = load i32, i32* %index, align 4
  %array_length464 = load i32, i32* %array_length, align 4
  %gt465 = icmp sgt i32 %index463, %array_length464
  br i1 %gt465, label %cond_jump_then466, label %cond_end467

cond_jump_then466:                                ; preds = %cond_end446
  %index468 = load i32, i32* %index, align 4
  store i32 %index468, i32* %array_length, align 4
  br label %cond_end467

cond_end467:                                      ; preds = %cond_jump_then466, %cond_end446
  %f469 = load %Sym*, %Sym** %f, align 8
  %fieldLLL470 = getelementptr inbounds %Sym, %Sym* %f469, i32 0, i32 4
  %next471 = load %Sym*, %Sym** %fieldLLL470, align 8
  store %Sym* %next471, %Sym** %f, align 8
  %no_oblock473 = load i32, i32* %no_oblock, align 4
  %icmpA474 = icmp ne i32 %no_oblock473, 0
  store i1 %icmpA474, i1* %andand472, align 1
  br i1 %icmpA474, label %cond_jump_then475, label %cond_jump_end476

cond_jump_then475:                                ; preds = %cond_end467
  %f477 = load %Sym*, %Sym** %f, align 8
  %eq478 = icmp eq %Sym* %f477, null
  %andand479 = and i1 %icmpA474, %eq478
  store i1 %andand479, i1* %andand472, align 1
  br label %cond_jump_end476

cond_jump_end476:                                 ; preds = %cond_jump_then475, %cond_end467
  %andand_result_value480 = load i1, i1* %andand472, align 1
  br i1 %andand_result_value480, label %cond_jump_then481, label %cond_end482

cond_jump_then481:                                ; preds = %cond_jump_end476
  br label %cond_end_block423

cond_end482:                                      ; preds = %after_break483, %cond_jump_end476
  %tok484 = load i32, i32* @tok, align 4
  %eq485 = icmp eq i32 %tok484, 125
  br i1 %eq485, label %cond_jump_then486, label %cond_end487

after_break483:                                   ; No predecessors!
  br label %cond_end482

cond_jump_then486:                                ; preds = %cond_end482
  br label %cond_end_block423

cond_end487:                                      ; preds = %after_break488, %cond_end482
  call void @skip(i32 44)
  br label %loop_top_block419

after_break488:                                   ; No predecessors!
  br label %cond_end487

cond_jump_then494:                                ; preds = %cond_end_block423
  %array_length496 = load i32, i32* %array_length, align 4
  %n497 = load i32, i32* %n, align 4
  %le498 = icmp slt i32 %array_length496, %n497
  %andand499 = and i1 %icmpA493, %le498
  store i1 %andand499, i1* %andand489, align 1
  br label %cond_jump_end495

cond_jump_end495:                                 ; preds = %cond_jump_then494, %cond_end_block423
  %andand_result_value500 = load i1, i1* %andand489, align 1
  br i1 %andand_result_value500, label %cond_jump_then501, label %cond_end502

cond_jump_then501:                                ; preds = %cond_jump_end495
  %type503 = load %CType*, %CType** %type, align 8
  %sec504 = load %Section*, %Section** %sec, align 8
  %c505 = load i64, i64* %c, align 4
  %array_length506 = load i32, i32* %array_length, align 4
  %icastD507 = sext i32 %array_length506 to i64
  %add508 = add i64 %c505, %icastD507
  %n509 = load i32, i32* %n, align 4
  %array_length510 = load i32, i32* %array_length, align 4
  %sub511 = sub i32 %n509, %array_length510
  call void @init_putz(%CType* %type503, %Section* %sec504, i64 %add508, i32 %sub511)
  br label %cond_end502

cond_end502:                                      ; preds = %cond_jump_then501, %cond_jump_end495
  %no_oblock512 = load i32, i32* %no_oblock, align 4
  %logical_denial513 = icmp eq i32 %no_oblock512, 0
  %castOOOO514 = zext i1 %logical_denial513 to i32
  %icmpA515 = icmp ne i32 %castOOOO514, 0
  br i1 %icmpA515, label %cond_jump_then516, label %cond_end517

cond_jump_then516:                                ; preds = %cond_end502
  call void @skip(i32 125)
  br label %cond_end517

cond_end517:                                      ; preds = %cond_jump_then516, %cond_end502
  br label %loop_top_block518

loop_top_block518:                                ; preds = %cond_then_block521, %cond_end517
  %par_count519 = load i32, i32* %par_count, align 4
  %icmpA520 = icmp ne i32 %par_count519, 0
  br i1 %icmpA520, label %cond_then_block521, label %cond_end_block522

cond_then_block521:                               ; preds = %loop_top_block518
  call void @skip(i32 41)
  %par_count523 = load i32, i32* %par_count, align 4
  %sub524 = sub i32 %par_count523, 1
  store i32 %sub524, i32* %par_count, align 4
  %add525 = add i32 %sub524, 1
  br label %loop_top_block518

cond_end_block522:                                ; preds = %loop_top_block518
  br label %cond_end

loop_top_block535:                                ; preds = %cond_end566, %cond_jump_elif_then2
  %parlevel538 = load i32, i32* %parlevel, align 4
  %gt539 = icmp sgt i32 %parlevel538, 0
  store i1 %gt539, i1* %oror537, align 1
  br i1 %gt539, label %cond_jump_end541, label %cond_jump_then540

cond_jump_then540:                                ; preds = %loop_top_block535
  %tok543 = load i32, i32* @tok, align 4
  %not_eq544 = icmp ne i32 %tok543, 125
  store i1 %not_eq544, i1* %andand542, align 1
  br i1 %not_eq544, label %cond_jump_then545, label %cond_jump_end546

cond_jump_end541:                                 ; preds = %cond_jump_end546, %loop_top_block535
  %oror_result_value552 = load i1, i1* %oror537, align 1
  store i1 %oror_result_value552, i1* %andand536, align 1
  br i1 %oror_result_value552, label %cond_jump_then553, label %cond_jump_end554

cond_jump_then545:                                ; preds = %cond_jump_then540
  %tok547 = load i32, i32* @tok, align 4
  %not_eq548 = icmp ne i32 %tok547, 44
  %andand549 = and i1 %not_eq544, %not_eq548
  store i1 %andand549, i1* %andand542, align 1
  br label %cond_jump_end546

cond_jump_end546:                                 ; preds = %cond_jump_then545, %cond_jump_then540
  %andand_result_value550 = load i1, i1* %andand542, align 1
  %oror551 = or i1 %gt539, %andand_result_value550
  store i1 %oror551, i1* %oror537, align 1
  br label %cond_jump_end541

cond_jump_then553:                                ; preds = %cond_jump_end541
  %tok555 = load i32, i32* @tok, align 4
  %not_eq556 = icmp ne i32 %tok555, -1
  %andand557 = and i1 %oror_result_value552, %not_eq556
  store i1 %andand557, i1* %andand536, align 1
  br label %cond_jump_end554

cond_jump_end554:                                 ; preds = %cond_jump_then553, %cond_jump_end541
  %andand_result_value558 = load i1, i1* %andand536, align 1
  br i1 %andand_result_value558, label %cond_then_block559, label %cond_end_block560

cond_then_block559:                               ; preds = %cond_jump_end554
  %tok561 = load i32, i32* @tok, align 4
  %eq562 = icmp eq i32 %tok561, 40
  br i1 %eq562, label %cond_jump_then563, label %cond_jump_elif0564

cond_end_block560:                                ; preds = %cond_jump_end554
  br label %cond_end

cond_jump_then563:                                ; preds = %cond_then_block559
  %parlevel567 = load i32, i32* %parlevel, align 4
  %add568 = add i32 %parlevel567, 1
  store i32 %add568, i32* %parlevel, align 4
  %parlevel569 = load i32, i32* %parlevel, align 4
  %sub570 = sub i32 %parlevel569, 1
  br label %cond_end566

cond_jump_elif0564:                               ; preds = %cond_then_block559
  %tok571 = load i32, i32* @tok, align 4
  %eq572 = icmp eq i32 %tok571, 41
  br i1 %eq572, label %cond_jump_elif_then0565, label %cond_end566

cond_jump_elif_then0565:                          ; preds = %cond_jump_elif0564
  %parlevel573 = load i32, i32* %parlevel, align 4
  %sub574 = sub i32 %parlevel573, 1
  store i32 %sub574, i32* %parlevel, align 4
  %add575 = add i32 %sub574, 1
  br label %cond_end566

cond_end566:                                      ; preds = %cond_jump_elif_then0565, %cond_jump_elif0564, %cond_jump_then563
  call void @next()
  br label %loop_top_block535

cond_jump_then580:                                ; preds = %cond_else_block
  store i32 2, i32* %expr_type, align 4
  br label %cond_end581

cond_end581:                                      ; preds = %cond_jump_then580, %cond_else_block
  %type582 = load %CType*, %CType** %type, align 8
  %sec583 = load %Section*, %Section** %sec, align 8
  %c584 = load i64, i64* %c, align 4
  %expr_type585 = load i32, i32* %expr_type, align 4
  call void @init_putv(%CType* %type582, %Section* %sec583, i64 %c584, i32 0, i32 %expr_type585)
  br label %cond_end
}

define internal void @decl_initializer_alloc(%CType* %0, %AttributeDef* %1, i32 %2, i32 %3, i32 %4, i32 %5) {
entry:
  %bounds_ptr417 = alloca i64*, align 8
  %cval = alloca %CValue, align 16
  %esym = alloca %come_anon88*, align 8
  %oror355 = alloca i1, align 1
  %andand323 = alloca i1, align 1
  %andand225 = alloca i1, align 1
  %andand224 = alloca i1, align 1
  %andand166 = alloca i1, align 1
  %sym = alloca %Sym*, align 8
  %bounds_ptr = alloca i64*, align 8
  %andand127 = alloca i1, align 1
  %andand105 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror33 = alloca i1, align 1
  %oror = alloca i1, align 1
  %sec = alloca %Section*, align 8
  %init_str = alloca %TokenString, align 8
  %castXXXX8 = bitcast %TokenString* %init_str to i8*
  %6 = call i8* @memset(i8* %castXXXX8, i32 0, i64 24)
  %saved_parse_state = alloca %ParseState, align 16
  %castXXXX = bitcast %ParseState* %saved_parse_state to i8*
  %7 = call i8* @memset(i8* %castXXXX, i32 0, i64 32)
  %level = alloca i32, align 4
  %data_offset = alloca i32, align 4
  %addr = alloca i32, align 4
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %ad = alloca %AttributeDef*, align 8
  %ad2 = alloca %AttributeDef**, align 8
  store %AttributeDef* %1, %AttributeDef** %ad, align 8
  store %AttributeDef** %ad, %AttributeDef*** %ad2, align 8
  %r = alloca i32, align 4
  %r3 = alloca i32*, align 8
  store i32 %2, i32* %r, align 4
  store i32* %r, i32** %r3, align 8
  %has_init = alloca i32, align 4
  %has_init4 = alloca i32*, align 8
  store i32 %3, i32* %has_init, align 4
  store i32* %has_init, i32** %has_init4, align 8
  %v = alloca i32, align 4
  %v5 = alloca i32*, align 8
  store i32 %4, i32* %v, align 4
  store i32* %v, i32** %v5, align 8
  %scope = alloca i32, align 4
  %scope6 = alloca i32*, align 8
  store i32 %5, i32* %scope, align 4
  store i32* %scope, i32** %scope6, align 8
  %saved_parse_state7 = load %ParseState, %ParseState* %saved_parse_state, align 16
  %fieldTTT = getelementptr inbounds %ParseState, %ParseState* %saved_parse_state, i32 0, i32 0
  store i32* null, i32** %fieldTTT, align 8
  %type9 = load %CType*, %CType** %type, align 8
  %align10 = load i32, i32* %align, align 4
  %fun_result = call i32 @type_size(%CType* %type9, i32* %align)
  store i32 %fun_result, i32* %size, align 4
  %init_str11 = load %TokenString, %TokenString* %init_str, align 8
  store i32 4596, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.140, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

tok_str_new:                                      ; preds = %entry
  %s = alloca %TokenString*, align 8
  store %TokenString* %init_str, %TokenString** %s, align 8
  %s12 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s12, i32 0, i32 0
  store i32* null, i32** %fieldTU, align 8
  %s13 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU14 = getelementptr inbounds %TokenString, %TokenString* %s13, i32 0, i32 1
  store i32 0, i32* %fieldTU14, align 4
  %s15 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU16 = getelementptr inbounds %TokenString, %TokenString* %s15, i32 0, i32 2
  store i32 0, i32* %fieldTU16, align 4
  %s17 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU18 = getelementptr inbounds %TokenString, %TokenString* %s17, i32 0, i32 3
  store i32 -1, i32* %fieldTU18, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  %size19 = load i32, i32* %size, align 4
  %le = icmp slt i32 %size19, 0
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %tok_str_new_end
  %has_init20 = load i32, i32* %has_init, align 4
  %logical_denial = icmp eq i32 %has_init20, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then21, label %cond_end22

cond_end:                                         ; preds = %cond_end80, %tok_str_new_end
  %ad81 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL = getelementptr inbounds %AttributeDef, %AttributeDef* %ad81, i32 0, i32 0
  %aligned = load i32, i32* %fieldLLL, align 4
  %icmpA82 = icmp ne i32 %aligned, 0
  br i1 %icmpA82, label %cond_jump_then83, label %cond_jump_elif084

cond_jump_then21:                                 ; preds = %cond_jump_then
  call void (i8*, ...) @error(i8* bitcast ([18 x i8]* @195 to i8*))
  br label %cond_end22

cond_end22:                                       ; preds = %cond_jump_then21, %cond_jump_then
  %has_init23 = load i32, i32* %has_init, align 4
  %eq = icmp eq i32 %has_init23, 2
  br i1 %eq, label %cond_jump_then24, label %cond_else_block

cond_jump_then24:                                 ; preds = %cond_end22
  br label %loop_top_block

cond_else_block:                                  ; preds = %cond_end22
  store i32 0, i32* %level, align 4
  br label %loop_top_block32

cond_end25:                                       ; preds = %cond_end_block46, %cond_end_block
  %init_str66 = load %TokenString, %TokenString* %init_str, align 8
  call void @tok_str_add(%TokenString* %init_str, i32 -1)
  %init_str67 = load %TokenString, %TokenString* %init_str, align 8
  call void @tok_str_add(%TokenString* %init_str, i32 0)
  %saved_parse_state68 = load %ParseState, %ParseState* %saved_parse_state, align 16
  call void @save_parse_state(%ParseState* %saved_parse_state)
  %init_str69 = load %TokenString, %TokenString* %init_str, align 8
  %fieldVVV = getelementptr inbounds %TokenString, %TokenString* %init_str, i32 0, i32 0
  %str = load i32*, i32** %fieldVVV, align 8
  store i32* %str, i32** @macro_ptr, align 8
  call void @next()
  %type70 = load %CType*, %CType** %type, align 8
  call void @decl_initializer(%CType* %type70, %Section* null, i64 0, i32 1, i32 1)
  %init_str71 = load %TokenString, %TokenString* %init_str, align 8
  %fieldVVV72 = getelementptr inbounds %TokenString, %TokenString* %init_str, i32 0, i32 0
  %str73 = load i32*, i32** %fieldVVV72, align 8
  store i32* %str73, i32** @macro_ptr, align 8
  call void @next()
  %type74 = load %CType*, %CType** %type, align 8
  %align75 = load i32, i32* %align, align 4
  %fun_result76 = call i32 @type_size(%CType* %type74, i32* %align)
  store i32 %fun_result76, i32* %size, align 4
  %size77 = load i32, i32* %size, align 4
  %le78 = icmp slt i32 %size77, 0
  br i1 %le78, label %cond_jump_then79, label %cond_end80

loop_top_block:                                   ; preds = %cond_then_block, %cond_jump_then24
  %tok = load i32, i32* @tok, align 4
  %eq26 = icmp eq i32 %tok, 181
  store i1 %eq26, i1* %oror, align 1
  br i1 %eq26, label %cond_jump_end, label %cond_jump_then27

cond_jump_then27:                                 ; preds = %loop_top_block
  %tok28 = load i32, i32* @tok, align 4
  %eq29 = icmp eq i32 %tok28, 184
  %oror30 = or i1 %eq26, %eq29
  store i1 %oror30, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then27, %loop_top_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  %init_str31 = load %TokenString, %TokenString* %init_str, align 8
  call void @tok_str_add_tok(%TokenString* %init_str)
  call void @next()
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end
  br label %cond_end25

loop_top_block32:                                 ; preds = %cond_end55, %cond_else_block
  %level34 = load i32, i32* %level, align 4
  %gt = icmp sgt i32 %level34, 0
  store i1 %gt, i1* %oror33, align 1
  br i1 %gt, label %cond_jump_end36, label %cond_jump_then35

cond_jump_then35:                                 ; preds = %loop_top_block32
  %tok37 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok37, 44
  store i1 %not_eq, i1* %andand, align 1
  br i1 %not_eq, label %cond_jump_then38, label %cond_jump_end39

cond_jump_end36:                                  ; preds = %cond_jump_end39, %loop_top_block32
  %oror_result_value44 = load i1, i1* %oror33, align 1
  br i1 %oror_result_value44, label %cond_then_block45, label %cond_end_block46

cond_jump_then38:                                 ; preds = %cond_jump_then35
  %tok40 = load i32, i32* @tok, align 4
  %not_eq41 = icmp ne i32 %tok40, 59
  %andand42 = and i1 %not_eq, %not_eq41
  store i1 %andand42, i1* %andand, align 1
  br label %cond_jump_end39

cond_jump_end39:                                  ; preds = %cond_jump_then38, %cond_jump_then35
  %andand_result_value = load i1, i1* %andand, align 1
  %oror43 = or i1 %gt, %andand_result_value
  store i1 %oror43, i1* %oror33, align 1
  br label %cond_jump_end36

cond_then_block45:                                ; preds = %cond_jump_end36
  %tok47 = load i32, i32* @tok, align 4
  %le48 = icmp slt i32 %tok47, 0
  br i1 %le48, label %cond_jump_then49, label %cond_end50

cond_end_block46:                                 ; preds = %cond_jump_then64, %cond_jump_end36
  br label %cond_end25

cond_jump_then49:                                 ; preds = %cond_then_block45
  call void (i8*, ...) @error(i8* bitcast ([38 x i8]* @196 to i8*))
  br label %cond_end50

cond_end50:                                       ; preds = %cond_jump_then49, %cond_then_block45
  %init_str51 = load %TokenString, %TokenString* %init_str, align 8
  call void @tok_str_add_tok(%TokenString* %init_str)
  %tok52 = load i32, i32* @tok, align 4
  %eq53 = icmp eq i32 %tok52, 123
  br i1 %eq53, label %cond_jump_then54, label %cond_jump_elif0

cond_jump_then54:                                 ; preds = %cond_end50
  %level56 = load i32, i32* %level, align 4
  %add = add i32 %level56, 1
  store i32 %add, i32* %level, align 4
  %level57 = load i32, i32* %level, align 4
  %sub = sub i32 %level57, 1
  br label %cond_end55

cond_jump_elif0:                                  ; preds = %cond_end50
  %tok58 = load i32, i32* @tok, align 4
  %eq59 = icmp eq i32 %tok58, 125
  br i1 %eq59, label %cond_jump_elif_then0, label %cond_end55

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %level60 = load i32, i32* %level, align 4
  %sub61 = sub i32 %level60, 1
  store i32 %sub61, i32* %level, align 4
  %add62 = add i32 %sub61, 1
  %level63 = load i32, i32* %level, align 4
  %leeq = icmp sle i32 %level63, 0
  br i1 %leeq, label %cond_jump_then64, label %cond_end65

cond_end55:                                       ; preds = %cond_end65, %cond_jump_elif0, %cond_jump_then54
  call void @next()
  br label %loop_top_block32

cond_jump_then64:                                 ; preds = %cond_jump_elif_then0
  call void @next()
  br label %cond_end_block46

cond_end65:                                       ; preds = %after_break, %cond_jump_elif_then0
  br label %cond_end55

after_break:                                      ; No predecessors!
  br label %cond_end65

cond_jump_then79:                                 ; preds = %cond_end25
  call void (i8*, ...) @error(i8* bitcast ([18 x i8]* @197 to i8*))
  br label %cond_end80

cond_end80:                                       ; preds = %cond_jump_then79, %cond_end25
  br label %cond_end

cond_jump_then83:                                 ; preds = %cond_end
  %ad87 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL88 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad87, i32 0, i32 0
  %aligned89 = load i32, i32* %fieldLLL88, align 4
  %align90 = load i32, i32* %align, align 4
  %gt91 = icmp sgt i32 %aligned89, %align90
  br i1 %gt91, label %cond_jump_then92, label %cond_end93

cond_jump_elif084:                                ; preds = %cond_end
  %ad97 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL98 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad97, i32 0, i32 1
  %packed = load i32, i32* %fieldLLL98, align 4
  %icmpA99 = icmp ne i32 %packed, 0
  br i1 %icmpA99, label %cond_jump_elif_then085, label %cond_end86

cond_jump_elif_then085:                           ; preds = %cond_jump_elif084
  store i32 1, i32* %align, align 4
  br label %cond_end86

cond_end86:                                       ; preds = %cond_jump_elif_then085, %cond_jump_elif084, %cond_end93
  %r100 = load i32, i32* %r, align 4
  %andtmp = and i32 %r100, 255
  %eq101 = icmp eq i32 %andtmp, 242
  br i1 %eq101, label %cond_jump_then102, label %cond_else_block103

cond_jump_then92:                                 ; preds = %cond_jump_then83
  %ad94 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL95 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad94, i32 0, i32 0
  %aligned96 = load i32, i32* %fieldLLL95, align 4
  store i32 %aligned96, i32* %align, align 4
  br label %cond_end93

cond_end93:                                       ; preds = %cond_jump_then92, %cond_jump_then83
  br label %cond_end86

cond_jump_then102:                                ; preds = %cond_end86
  store %Section* null, %Section** %sec, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL106 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 43
  %do_bounds_check = load i32, i32* %fieldLLL106, align 4
  %icmpA107 = icmp ne i32 %do_bounds_check, 0
  store i1 %icmpA107, i1* %andand105, align 1
  br i1 %icmpA107, label %cond_jump_then108, label %cond_jump_end109

cond_else_block103:                               ; preds = %cond_end86
  store %Sym* null, %Sym** %sym, align 8
  %v167 = load i32, i32* %v, align 4
  %icmpA168 = icmp ne i32 %v167, 0
  store i1 %icmpA168, i1* %andand166, align 1
  br i1 %icmpA168, label %cond_jump_then169, label %cond_jump_end170

cond_end104:                                      ; preds = %cond_end416, %cond_end157
  %has_init431 = load i32, i32* %has_init, align 4
  %icmpA432 = icmp ne i32 %has_init431, 0
  br i1 %icmpA432, label %cond_jump_then433, label %cond_end434

cond_jump_then108:                                ; preds = %cond_jump_then102
  %type110 = load %CType*, %CType** %type, align 8
  %fieldLLL111 = getelementptr inbounds %CType, %CType* %type110, i32 0, i32 0
  %t = load i32, i32* %fieldLLL111, align 4
  %andtmp112 = and i32 %t, 32
  %icmpA113 = icmp ne i32 %andtmp112, 0
  %andand114 = and i1 %icmpA107, %icmpA113
  store i1 %andand114, i1* %andand105, align 1
  br label %cond_jump_end109

cond_jump_end109:                                 ; preds = %cond_jump_then108, %cond_jump_then102
  %andand_result_value115 = load i1, i1* %andand105, align 1
  br i1 %andand_result_value115, label %cond_jump_then116, label %cond_end117

cond_jump_then116:                                ; preds = %cond_jump_end109
  %loc = load i32, i32* @loc, align 4
  %sub118 = sub i32 %loc, 1
  store i32 %sub118, i32* @loc, align 4
  %add119 = add i32 %sub118, 1
  br label %cond_end117

cond_end117:                                      ; preds = %cond_jump_then116, %cond_jump_end109
  %loc120 = load i32, i32* @loc, align 4
  %size121 = load i32, i32* %size, align 4
  %sub122 = sub i32 %loc120, %size121
  %align123 = load i32, i32* %align, align 4
  %sub124 = sub i32 0, %align123
  %andtmp125 = and i32 %sub122, %sub124
  store i32 %andtmp125, i32* @loc, align 4
  %loc126 = load i32, i32* @loc, align 4
  store i32 %loc126, i32* %addr, align 4
  %tcc_state128 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL129 = getelementptr inbounds %TCCState, %TCCState* %tcc_state128, i32 0, i32 43
  %do_bounds_check130 = load i32, i32* %fieldLLL129, align 4
  %icmpA131 = icmp ne i32 %do_bounds_check130, 0
  store i1 %icmpA131, i1* %andand127, align 1
  br i1 %icmpA131, label %cond_jump_then132, label %cond_jump_end133

cond_jump_then132:                                ; preds = %cond_end117
  %type134 = load %CType*, %CType** %type, align 8
  %fieldLLL135 = getelementptr inbounds %CType, %CType* %type134, i32 0, i32 0
  %t136 = load i32, i32* %fieldLLL135, align 4
  %andtmp137 = and i32 %t136, 32
  %icmpA138 = icmp ne i32 %andtmp137, 0
  %andand139 = and i1 %icmpA131, %icmpA138
  store i1 %andand139, i1* %andand127, align 1
  br label %cond_jump_end133

cond_jump_end133:                                 ; preds = %cond_jump_then132, %cond_end117
  %andand_result_value140 = load i1, i1* %andand127, align 1
  br i1 %andand_result_value140, label %cond_jump_then141, label %cond_end142

cond_jump_then141:                                ; preds = %cond_jump_end133
  %loc143 = load i32, i32* @loc, align 4
  %sub144 = sub i32 %loc143, 1
  store i32 %sub144, i32* @loc, align 4
  %add145 = add i32 %sub144, 1
  %lbounds_section = load %Section*, %Section** @lbounds_section, align 8
  %fun_result146 = call i8* @section_ptr_add(%Section* %lbounds_section, i64 16)
  %castAQ = bitcast i8* %fun_result146 to i64*
  store i64* %castAQ, i64** %bounds_ptr, align 8
  %bounds_ptr147 = load i64*, i64** %bounds_ptr, align 8
  %addr148 = load i32, i32* %addr, align 4
  %icastD = sext i32 %addr148 to i64
  %element_addressXYXY = getelementptr i64, i64* %bounds_ptr147, i32 0
  store i64 %icastD, i64* %element_addressXYXY, align 4
  %bounds_ptr149 = load i64*, i64** %bounds_ptr, align 8
  %size150 = load i32, i32* %size, align 4
  %icastD151 = sext i32 %size150 to i64
  %element_addressXYXY152 = getelementptr i64, i64* %bounds_ptr149, i32 1
  store i64 %icastD151, i64* %element_addressXYXY152, align 4
  br label %cond_end142

cond_end142:                                      ; preds = %cond_jump_then141, %cond_jump_end133
  %v153 = load i32, i32* %v, align 4
  %icmpA154 = icmp ne i32 %v153, 0
  br i1 %icmpA154, label %cond_jump_then155, label %cond_else_block156

cond_jump_then155:                                ; preds = %cond_end142
  %v158 = load i32, i32* %v, align 4
  %type159 = load %CType*, %CType** %type, align 8
  %r160 = load i32, i32* %r, align 4
  %addr161 = load i32, i32* %addr, align 4
  %fun_result162 = call %Sym* @sym_push(i32 %v158, %CType* %type159, i32 %r160, i32 %addr161)
  br label %cond_end157

cond_else_block156:                               ; preds = %cond_end142
  %type163 = load %CType*, %CType** %type, align 8
  %r164 = load i32, i32* %r, align 4
  %addr165 = load i32, i32* %addr, align 4
  call void @vset(%CType* %type163, i32 %r164, i32 %addr165)
  br label %cond_end157

cond_end157:                                      ; preds = %cond_else_block156, %cond_jump_then155
  br label %cond_end104

cond_jump_then169:                                ; preds = %cond_else_block103
  %scope171 = load i32, i32* %scope, align 4
  %eq172 = icmp eq i32 %scope171, 240
  %andand173 = and i1 %icmpA168, %eq172
  store i1 %andand173, i1* %andand166, align 1
  br label %cond_jump_end170

cond_jump_end170:                                 ; preds = %cond_jump_then169, %cond_else_block103
  %andand_result_value174 = load i1, i1* %andand166, align 1
  br i1 %andand_result_value174, label %cond_jump_then175, label %cond_end176

cond_jump_then175:                                ; preds = %cond_jump_end170
  %v177 = load i32, i32* %v, align 4
  store i32 4681, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.141, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_find

cond_end176:                                      ; preds = %cond_end191, %cond_jump_end170
  %ad271 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL272 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad271, i32 0, i32 2
  %section = load %Section*, %Section** %fieldLLL272, align 8
  store %Section* %section, %Section** %sec, align 8
  %sec273 = load %Section*, %Section** %sec, align 8
  %logical_denial274 = icmp eq %Section* %sec273, null
  %castOOOO275 = zext i1 %logical_denial274 to i32
  %icmpA276 = icmp ne i32 %castOOOO275, 0
  br i1 %icmpA276, label %cond_jump_then277, label %cond_end278

sym_find:                                         ; preds = %cond_jump_then175
  %inline_result_variable = alloca %Sym*, align 8
  %v178 = alloca i32, align 4
  store i32 %v177, i32* %v178, align 4
  %v179 = load i32, i32* %v178, align 4
  %sub180 = sub i32 %v179, 256
  store i32 %sub180, i32* %v178, align 4
  %add181 = add i32 %sub180, 256
  %v182 = load i32, i32* %v178, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub183 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v182, %sub183
  br i1 %gteq_unsinged, label %cond_jump_then184, label %cond_end185

sym_find_end:                                     ; preds = %cond_end185, %cond_jump_then184
  %inline_result_variable188 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable188, %Sym** %sym, align 8
  %sym189 = load %Sym*, %Sym** %sym, align 8
  %icmpB = icmp ne %Sym* %sym189, null
  br i1 %icmpB, label %cond_jump_then190, label %cond_end191

cond_jump_then184:                                ; preds = %sym_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_end185:                                      ; preds = %sym_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v186 = load i32, i32* %v178, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v186
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL187 = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL187, align 8
  store %Sym* %sym_identifier, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_jump_then190:                                ; preds = %sym_find_end
  %sym192 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL193 = getelementptr inbounds %Sym, %Sym* %sym192, i32 0, i32 3
  %type194 = load %CType, %CType* %fieldLLL193, align 8
  %type195 = load %CType*, %CType** %type, align 8
  %fun_result196 = call i32 @is_compatible_types(%CType* %fieldLLL193, %CType* %type195)
  %logical_denial197 = icmp eq i32 %fun_result196, 0
  %castOOOO198 = zext i1 %logical_denial197 to i32
  %icmpA199 = icmp ne i32 %castOOOO198, 0
  br i1 %icmpA199, label %cond_jump_then200, label %cond_end201

cond_end191:                                      ; preds = %cond_end213, %sym_find_end
  br label %cond_end176

cond_jump_then200:                                ; preds = %cond_jump_then190
  %v202 = load i32, i32* %v, align 4
  %fun_result203 = call i8* @get_tok_str(i32 %v202, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([44 x i8]* @198 to i8*), i8* %fun_result203)
  br label %cond_end201

cond_end201:                                      ; preds = %cond_jump_then200, %cond_jump_then190
  %sym204 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL205 = getelementptr inbounds %Sym, %Sym* %sym204, i32 0, i32 3
  %type206 = load %CType, %CType* %fieldLLL205, align 8
  %fieldVVV207 = getelementptr inbounds %CType, %CType* %fieldLLL205, i32 0, i32 0
  %t208 = load i32, i32* %fieldVVV207, align 4
  %andtmp209 = and i32 %t208, 128
  %icmpA210 = icmp ne i32 %andtmp209, 0
  br i1 %icmpA210, label %cond_jump_then211, label %cond_else_block212

cond_jump_then211:                                ; preds = %cond_end201
  %sym214 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL215 = getelementptr inbounds %Sym, %Sym* %sym214, i32 0, i32 3
  %type216 = load %CType, %CType* %fieldLLL215, align 8
  %sym217 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL218 = getelementptr inbounds %Sym, %Sym* %sym217, i32 0, i32 3
  %type219 = load %CType, %CType* %fieldLLL218, align 8
  %fieldVVV220 = getelementptr inbounds %CType, %CType* %fieldLLL218, i32 0, i32 0
  %t221 = load i32, i32* %fieldVVV220, align 4
  %andtmp222 = and i32 %t221, -129
  %fieldTTT223 = getelementptr inbounds %CType, %CType* %fieldLLL215, i32 0, i32 0
  store i32 %andtmp222, i32* %fieldTTT223, align 4
  %sym226 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL227 = getelementptr inbounds %Sym, %Sym* %sym226, i32 0, i32 3
  %type228 = load %CType, %CType* %fieldLLL227, align 8
  %fieldVVV229 = getelementptr inbounds %CType, %CType* %fieldLLL227, i32 0, i32 0
  %t230 = load i32, i32* %fieldVVV229, align 4
  %andtmp231 = and i32 %t230, 32
  %icmpA232 = icmp ne i32 %andtmp231, 0
  store i1 %icmpA232, i1* %andand225, align 1
  br i1 %icmpA232, label %cond_jump_then233, label %cond_jump_end234

cond_else_block212:                               ; preds = %cond_end201
  %has_init265 = load i32, i32* %has_init, align 4
  %logical_denial266 = icmp eq i32 %has_init265, 0
  %castOOOO267 = zext i1 %logical_denial266 to i32
  %icmpA268 = icmp ne i32 %castOOOO267, 0
  br i1 %icmpA268, label %cond_jump_then269, label %cond_end270

cond_end213:                                      ; preds = %cond_end270, %cond_end253
  br label %cond_end191

cond_jump_then233:                                ; preds = %cond_jump_then211
  %sym235 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL236 = getelementptr inbounds %Sym, %Sym* %sym235, i32 0, i32 3
  %type237 = load %CType, %CType* %fieldLLL236, align 8
  %fieldVVV238 = getelementptr inbounds %CType, %CType* %fieldLLL236, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV238, align 8
  %fieldLLL239 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 2
  %c = load i64, i64* %fieldLLL239, align 4
  %le240 = icmp slt i64 %c, 0
  %andand241 = and i1 %icmpA232, %le240
  store i1 %andand241, i1* %andand225, align 1
  br label %cond_jump_end234

cond_jump_end234:                                 ; preds = %cond_jump_then233, %cond_jump_then211
  %andand_result_value242 = load i1, i1* %andand225, align 1
  store i1 %andand_result_value242, i1* %andand224, align 1
  br i1 %andand_result_value242, label %cond_jump_then243, label %cond_jump_end244

cond_jump_then243:                                ; preds = %cond_jump_end234
  %type245 = load %CType*, %CType** %type, align 8
  %fieldLLL246 = getelementptr inbounds %CType, %CType* %type245, i32 0, i32 1
  %ref247 = load %Sym*, %Sym** %fieldLLL246, align 8
  %fieldLLL248 = getelementptr inbounds %Sym, %Sym* %ref247, i32 0, i32 2
  %c249 = load i64, i64* %fieldLLL248, align 4
  %gteq_signed = icmp sge i64 %c249, 0
  %andand250 = and i1 %andand_result_value242, %gteq_signed
  store i1 %andand250, i1* %andand224, align 1
  br label %cond_jump_end244

cond_jump_end244:                                 ; preds = %cond_jump_then243, %cond_jump_end234
  %andand_result_value251 = load i1, i1* %andand224, align 1
  br i1 %andand_result_value251, label %cond_jump_then252, label %cond_end253

cond_jump_then252:                                ; preds = %cond_jump_end244
  %sym254 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL255 = getelementptr inbounds %Sym, %Sym* %sym254, i32 0, i32 3
  %type256 = load %CType, %CType* %fieldLLL255, align 8
  %fieldVVV257 = getelementptr inbounds %CType, %CType* %fieldLLL255, i32 0, i32 1
  %ref258 = load %Sym*, %Sym** %fieldVVV257, align 8
  %type259 = load %CType*, %CType** %type, align 8
  %fieldLLL260 = getelementptr inbounds %CType, %CType* %type259, i32 0, i32 1
  %ref261 = load %Sym*, %Sym** %fieldLLL260, align 8
  %fieldLLL262 = getelementptr inbounds %Sym, %Sym* %ref261, i32 0, i32 2
  %c263 = load i64, i64* %fieldLLL262, align 4
  %fieldTU264 = getelementptr inbounds %Sym, %Sym* %ref258, i32 0, i32 2
  store i64 %c263, i64* %fieldTU264, align 4
  br label %cond_end253

cond_end253:                                      ; preds = %cond_jump_then252, %cond_jump_end244
  br label %cond_end213

cond_jump_then269:                                ; preds = %cond_else_block212
  br label %decl_initializer_alloc.no_alloc
  br label %cond_end270

cond_end270:                                      ; preds = %cond_jump_then269, %cond_else_block212
  br label %cond_end213

decl_initializer_alloc.no_alloc:                  ; preds = %cond_end434, %cond_jump_then269
  ret void

cond_jump_then277:                                ; preds = %cond_end176
  %has_init279 = load i32, i32* %has_init, align 4
  %icmpA280 = icmp ne i32 %has_init279, 0
  br i1 %icmpA280, label %cond_jump_then281, label %cond_jump_elif0282

cond_end278:                                      ; preds = %cond_end284, %cond_end176
  %sec288 = load %Section*, %Section** %sec, align 8
  %icmpB289 = icmp ne %Section* %sec288, null
  br i1 %icmpB289, label %cond_jump_then290, label %cond_else_block291

cond_jump_then281:                                ; preds = %cond_jump_then277
  %data_section = load %Section*, %Section** @data_section, align 8
  store %Section* %data_section, %Section** %sec, align 8
  br label %cond_end284

cond_jump_elif0282:                               ; preds = %cond_jump_then277
  %tcc_state285 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL286 = getelementptr inbounds %TCCState, %TCCState* %tcc_state285, i32 0, i32 26
  %nocommon = load i32, i32* %fieldLLL286, align 4
  %icmpA287 = icmp ne i32 %nocommon, 0
  br i1 %icmpA287, label %cond_jump_elif_then0283, label %cond_end284

cond_jump_elif_then0283:                          ; preds = %cond_jump_elif0282
  %bss_section = load %Section*, %Section** @bss_section, align 8
  store %Section* %bss_section, %Section** %sec, align 8
  br label %cond_end284

cond_end284:                                      ; preds = %cond_jump_elif_then0283, %cond_jump_elif0282, %cond_jump_then281
  br label %cond_end278

cond_jump_then290:                                ; preds = %cond_end278
  %sec293 = load %Section*, %Section** %sec, align 8
  %fieldLLL294 = getelementptr inbounds %Section, %Section* %sec293, i32 0, i32 0
  %data_offset295 = load i64, i64* %fieldLLL294, align 4
  %icastM = trunc i64 %data_offset295 to i32
  store i32 %icastM, i32* %data_offset, align 4
  %data_offset296 = load i32, i32* %data_offset, align 4
  %align297 = load i32, i32* %align, align 4
  %add298 = add i32 %data_offset296, %align297
  %sub299 = sub i32 %add298, 1
  %align300 = load i32, i32* %align, align 4
  %sub301 = sub i32 0, %align300
  %andtmp302 = and i32 %sub299, %sub301
  store i32 %andtmp302, i32* %data_offset, align 4
  %data_offset303 = load i32, i32* %data_offset, align 4
  store i32 %data_offset303, i32* %addr, align 4
  %data_offset304 = load i32, i32* %data_offset, align 4
  %size305 = load i32, i32* %size, align 4
  %add306 = add i32 %data_offset304, %size305
  store i32 %add306, i32* %data_offset, align 4
  %size307 = load i32, i32* %size, align 4
  %sub308 = sub i32 %add306, %size307
  %tcc_state309 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL310 = getelementptr inbounds %TCCState, %TCCState* %tcc_state309, i32 0, i32 43
  %do_bounds_check311 = load i32, i32* %fieldLLL310, align 4
  %icmpA312 = icmp ne i32 %do_bounds_check311, 0
  br i1 %icmpA312, label %cond_jump_then313, label %cond_end314

cond_else_block291:                               ; preds = %cond_end278
  store i32 0, i32* %addr, align 4
  br label %cond_end292

cond_end292:                                      ; preds = %cond_else_block291, %cond_end346
  %v350 = load i32, i32* %v, align 4
  %icmpA351 = icmp ne i32 %v350, 0
  br i1 %icmpA351, label %cond_jump_then352, label %cond_else_block353

cond_jump_then313:                                ; preds = %cond_jump_then290
  %data_offset315 = load i32, i32* %data_offset, align 4
  %add316 = add i32 %data_offset315, 1
  store i32 %add316, i32* %data_offset, align 4
  %data_offset317 = load i32, i32* %data_offset, align 4
  %sub318 = sub i32 %data_offset317, 1
  br label %cond_end314

cond_end314:                                      ; preds = %cond_jump_then313, %cond_jump_then290
  %sec319 = load %Section*, %Section** %sec, align 8
  %data_offset320 = load i32, i32* %data_offset, align 4
  %icastD321 = sext i32 %data_offset320 to i64
  %fieldTU322 = getelementptr inbounds %Section, %Section* %sec319, i32 0, i32 0
  store i64 %icastD321, i64* %fieldTU322, align 4
  %sec324 = load %Section*, %Section** %sec, align 8
  %fieldLLL325 = getelementptr inbounds %Section, %Section* %sec324, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL325, align 4
  %not_eq326 = icmp ne i32 %sh_type, 8
  store i1 %not_eq326, i1* %andand323, align 1
  br i1 %not_eq326, label %cond_jump_then327, label %cond_jump_end328

cond_jump_then327:                                ; preds = %cond_end314
  %data_offset329 = load i32, i32* %data_offset, align 4
  %sec330 = load %Section*, %Section** %sec, align 8
  %fieldLLL331 = getelementptr inbounds %Section, %Section* %sec330, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL331, align 4
  %icastM332 = trunc i64 %data_allocated to i32
  %gt333 = icmp sgt i32 %data_offset329, %icastM332
  %andand334 = and i1 %not_eq326, %gt333
  store i1 %andand334, i1* %andand323, align 1
  br label %cond_jump_end328

cond_jump_end328:                                 ; preds = %cond_jump_then327, %cond_end314
  %andand_result_value335 = load i1, i1* %andand323, align 1
  br i1 %andand_result_value335, label %cond_jump_then336, label %cond_end337

cond_jump_then336:                                ; preds = %cond_jump_end328
  %sec338 = load %Section*, %Section** %sec, align 8
  %data_offset339 = load i32, i32* %data_offset, align 4
  %icastD340 = sext i32 %data_offset339 to i64
  call void @section_realloc(%Section* %sec338, i64 %icastD340)
  br label %cond_end337

cond_end337:                                      ; preds = %cond_jump_then336, %cond_jump_end328
  %align341 = load i32, i32* %align, align 4
  %sec342 = load %Section*, %Section** %sec, align 8
  %fieldLLL343 = getelementptr inbounds %Section, %Section* %sec342, i32 0, i32 8
  %sh_addralign = load i32, i32* %fieldLLL343, align 4
  %gt344 = icmp sgt i32 %align341, %sh_addralign
  br i1 %gt344, label %cond_jump_then345, label %cond_end346

cond_jump_then345:                                ; preds = %cond_end337
  %sec347 = load %Section*, %Section** %sec, align 8
  %align348 = load i32, i32* %align, align 4
  %fieldTU349 = getelementptr inbounds %Section, %Section* %sec347, i32 0, i32 8
  store i32 %align348, i32* %fieldTU349, align 4
  br label %cond_end346

cond_end346:                                      ; preds = %cond_jump_then345, %cond_end337
  br label %cond_end292

cond_jump_then352:                                ; preds = %cond_end292
  %scope356 = load i32, i32* %scope, align 4
  %not_eq357 = icmp ne i32 %scope356, 240
  store i1 %not_eq357, i1* %oror355, align 1
  br i1 %not_eq357, label %cond_jump_end359, label %cond_jump_then358

cond_else_block353:                               ; preds = %cond_end292
  %type399 = load %CType*, %CType** %type, align 8
  %sec400 = load %Section*, %Section** %sec, align 8
  %addr401 = load i32, i32* %addr, align 4
  %icastD402 = sext i32 %addr401 to i64
  %size403 = load i32, i32* %size, align 4
  %icastD404 = sext i32 %size403 to i64
  %fun_result405 = call %Sym* @get_sym_ref(%CType* %type399, %Section* %sec400, i64 %icastD402, i64 %icastD404)
  store %Sym* %fun_result405, %Sym** %sym, align 8
  %cval406 = load %CValue, %CValue* %cval, align 16
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 0, i32* %icastN, align 4
  %type407 = load %CType*, %CType** %type, align 8
  %cval408 = load %CValue, %CValue* %cval, align 16
  call void @vsetc(%CType* %type407, i32 752, %CValue* %cval)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %sym409 = load %Sym*, %Sym** %sym, align 8
  %fieldTU410 = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 4
  store %Sym* %sym409, %Sym** %fieldTU410, align 8
  br label %cond_end354

cond_end354:                                      ; preds = %cond_else_block353, %cond_end376
  %tcc_state411 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL412 = getelementptr inbounds %TCCState, %TCCState* %tcc_state411, i32 0, i32 43
  %do_bounds_check413 = load i32, i32* %fieldLLL412, align 4
  %icmpA414 = icmp ne i32 %do_bounds_check413, 0
  br i1 %icmpA414, label %cond_jump_then415, label %cond_end416

cond_jump_then358:                                ; preds = %cond_jump_then352
  %sym360 = load %Sym*, %Sym** %sym, align 8
  %logical_denial361 = icmp eq %Sym* %sym360, null
  %castOOOO362 = zext i1 %logical_denial361 to i32
  %icmpA363 = icmp ne i32 %castOOOO362, 0
  %oror364 = or i1 %not_eq357, %icmpA363
  store i1 %oror364, i1* %oror355, align 1
  br label %cond_jump_end359

cond_jump_end359:                                 ; preds = %cond_jump_then358, %cond_jump_then352
  %oror_result_value365 = load i1, i1* %oror355, align 1
  br i1 %oror_result_value365, label %cond_jump_then366, label %cond_end367

cond_jump_then366:                                ; preds = %cond_jump_end359
  %v368 = load i32, i32* %v, align 4
  %type369 = load %CType*, %CType** %type, align 8
  %r370 = load i32, i32* %r, align 4
  %ortmp = or i32 %r370, 512
  %fun_result371 = call %Sym* @sym_push(i32 %v368, %CType* %type369, i32 %ortmp, i32 0)
  store %Sym* %fun_result371, %Sym** %sym, align 8
  br label %cond_end367

cond_end367:                                      ; preds = %cond_jump_then366, %cond_jump_end359
  %sec372 = load %Section*, %Section** %sec, align 8
  %icmpB373 = icmp ne %Section* %sec372, null
  br i1 %icmpB373, label %cond_jump_then374, label %cond_else_block375

cond_jump_then374:                                ; preds = %cond_end367
  %sym377 = load %Sym*, %Sym** %sym, align 8
  %sec378 = load %Section*, %Section** %sec, align 8
  %addr379 = load i32, i32* %addr, align 4
  %icastD380 = sext i32 %addr379 to i64
  %size381 = load i32, i32* %size, align 4
  %icastD382 = sext i32 %size381 to i64
  call void @put_extern_sym(%Sym* %sym377, %Section* %sec378, i64 %icastD380, i64 %icastD382)
  br label %cond_end376

cond_else_block375:                               ; preds = %cond_end367
  %sym383 = load %Sym*, %Sym** %sym, align 8
  %align384 = load i32, i32* %align, align 4
  %icastD385 = sext i32 %align384 to i64
  %size386 = load i32, i32* %size, align 4
  %icastD387 = sext i32 %size386 to i64
  call void @put_extern_sym(%Sym* %sym383, %Section* null, i64 %icastD385, i64 %icastD387)
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL388 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL388, align 8
  %castAQ389 = bitcast i8* %data to %come_anon88*
  %sym390 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL391 = getelementptr inbounds %Sym, %Sym* %sym390, i32 0, i32 2
  %c392 = load i64, i64* %fieldLLL391, align 4
  %icastM393 = trunc i64 %c392 to i32
  %castXYXXYXYXY = bitcast i8** %fieldLLL388 to %come_anon88**
  %element_addressAB394 = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY395 = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB394, i32 %icastM393
  %load_element396 = load %come_anon88, %come_anon88* %element_addressXYXZY395, align 4
  store %come_anon88* %element_addressXYXZY395, %come_anon88** %esym, align 8
  %esym397 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldTU398 = getelementptr inbounds %come_anon88, %come_anon88* %esym397, i32 0, i32 3
  store i16 -14, i16* %fieldTU398, align 2
  br label %cond_end376

cond_end376:                                      ; preds = %cond_else_block375, %cond_jump_then374
  br label %cond_end354

cond_jump_then415:                                ; preds = %cond_end354
  %bounds_section = load %Section*, %Section** @bounds_section, align 8
  %sym418 = load %Sym*, %Sym** %sym, align 8
  %bounds_section419 = load %Section*, %Section** @bounds_section, align 8
  %fieldLLL420 = getelementptr inbounds %Section, %Section* %bounds_section419, i32 0, i32 0
  %data_offset421 = load i64, i64* %fieldLLL420, align 4
  call void @greloc(%Section* %bounds_section, %Sym* %sym418, i64 %data_offset421, i32 1)
  %bounds_section422 = load %Section*, %Section** @bounds_section, align 8
  %fun_result423 = call i8* @section_ptr_add(%Section* %bounds_section422, i64 16)
  %castAQ424 = bitcast i8* %fun_result423 to i64*
  store i64* %castAQ424, i64** %bounds_ptr417, align 8
  %bounds_ptr425 = load i64*, i64** %bounds_ptr417, align 8
  %element_addressXYXY426 = getelementptr i64, i64* %bounds_ptr425, i32 0
  store i64 0, i64* %element_addressXYXY426, align 4
  %bounds_ptr427 = load i64*, i64** %bounds_ptr417, align 8
  %size428 = load i32, i32* %size, align 4
  %icastD429 = sext i32 %size428 to i64
  %element_addressXYXY430 = getelementptr i64, i64* %bounds_ptr427, i32 1
  store i64 %icastD429, i64* %element_addressXYXY430, align 4
  br label %cond_end416

cond_end416:                                      ; preds = %cond_jump_then415, %cond_end354
  br label %cond_end104

cond_jump_then433:                                ; preds = %cond_end104
  %type435 = load %CType*, %CType** %type, align 8
  %sec436 = load %Section*, %Section** %sec, align 8
  %addr437 = load i32, i32* %addr, align 4
  %icastD438 = sext i32 %addr437 to i64
  call void @decl_initializer(%CType* %type435, %Section* %sec436, i64 %icastD438, i32 1, i32 0)
  %init_str439 = load %TokenString, %TokenString* %init_str, align 8
  %fieldVVV440 = getelementptr inbounds %TokenString, %TokenString* %init_str, i32 0, i32 0
  %str441 = load i32*, i32** %fieldVVV440, align 8
  %icmpB442 = icmp ne i32* %str441, null
  br i1 %icmpB442, label %cond_jump_then443, label %cond_end444

cond_end434:                                      ; preds = %cond_end444, %cond_end104
  br label %decl_initializer_alloc.no_alloc

cond_jump_then443:                                ; preds = %cond_jump_then433
  %init_str445 = load %TokenString, %TokenString* %init_str, align 8
  %fieldVVV446 = getelementptr inbounds %TokenString, %TokenString* %init_str, i32 0, i32 0
  %str447 = load i32*, i32** %fieldVVV446, align 8
  call void @tok_str_free(i32* %str447)
  %saved_parse_state448 = load %ParseState, %ParseState* %saved_parse_state, align 16
  call void @restore_parse_state(%ParseState* %saved_parse_state)
  br label %cond_end444

cond_end444:                                      ; preds = %cond_jump_then443, %cond_jump_then433
  br label %cond_end434
}

define i32 @gv(i32 %0) {
entry:
  %t279 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %oror254 = alloca i1, align 1
  %oror253 = alloca i1, align 1
  %bt250 = alloca i32, align 4
  %andand232 = alloca i1, align 1
  %andand204 = alloca i1, align 1
  %oror180 = alloca i1, align 1
  %oror179 = alloca i1, align 1
  %oror178 = alloca i1, align 1
  %offset = alloca i64, align 8
  %ptr = alloca i32*, align 8
  %sym = alloca %Sym*, align 8
  %oror78 = alloca i1, align 1
  %oror77 = alloca i1, align 1
  %bt = alloca i32, align 4
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %bits = alloca i32, align 4
  %type2 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type2 to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %i = alloca i32, align 4
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %bit_size = alloca i32, align 4
  %bit_pos = alloca i32, align 4
  %rc2 = alloca i32, align 4
  %r = alloca i32, align 4
  %rc = alloca i32, align 4
  %rc1 = alloca i32*, align 8
  store i32 %0, i32* %rc, align 4
  store i32* %rc, i32** %rc1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 64
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i32 32, i32* %bits, align 4
  %vtop3 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL4 = getelementptr inbounds %SValue, %SValue* %vtop3, i32 0, i32 0
  %type5 = load %CType, %CType* %fieldLLL4, align 8
  %fieldVVV6 = getelementptr inbounds %CType, %CType* %fieldLLL4, i32 0, i32 0
  %t7 = load i32, i32* %fieldVVV6, align 4
  %rshifttmp = lshr i32 %t7, 16
  %andtmp8 = and i32 %rshifttmp, 63
  store i32 %andtmp8, i32* %bit_pos, align 4
  %vtop9 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL10 = getelementptr inbounds %SValue, %SValue* %vtop9, i32 0, i32 0
  %type11 = load %CType, %CType* %fieldLLL10, align 8
  %fieldVVV12 = getelementptr inbounds %CType, %CType* %fieldLLL10, i32 0, i32 0
  %t13 = load i32, i32* %fieldVVV12, align 4
  %rshifttmp14 = lshr i32 %t13, 22
  %andtmp15 = and i32 %rshifttmp14, 63
  store i32 %andtmp15, i32* %bit_size, align 4
  %vtop16 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL17 = getelementptr inbounds %SValue, %SValue* %vtop16, i32 0, i32 0
  %type18 = load %CType, %CType* %fieldLLL17, align 8
  %vtop19 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL20 = getelementptr inbounds %SValue, %SValue* %vtop19, i32 0, i32 0
  %type21 = load %CType, %CType* %fieldLLL20, align 8
  %fieldVVV22 = getelementptr inbounds %CType, %CType* %fieldLLL20, i32 0, i32 0
  %t23 = load i32, i32* %fieldVVV22, align 4
  %andtmp24 = and i32 %t23, 65471
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL17, i32 0, i32 0
  store i32 %andtmp24, i32* %fieldTTT, align 4
  %vtop25 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL26 = getelementptr inbounds %SValue, %SValue* %vtop25, i32 0, i32 0
  %type27 = load %CType, %CType* %fieldLLL26, align 8
  %fieldVVV28 = getelementptr inbounds %CType, %CType* %fieldLLL26, i32 0, i32 0
  %t29 = load i32, i32* %fieldVVV28, align 4
  %andtmp30 = and i32 %t29, 15
  %eq = icmp eq i32 %andtmp30, 12
  br i1 %eq, label %cond_jump_then31, label %cond_else_block32

cond_else_block:                                  ; preds = %entry
  %vtop69 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL70 = getelementptr inbounds %SValue, %SValue* %vtop69, i32 0, i32 0
  %type71 = load %CType, %CType* %fieldLLL70, align 8
  %fieldVVV72 = getelementptr inbounds %CType, %CType* %fieldLLL70, i32 0, i32 0
  %t73 = load i32, i32* %fieldVVV72, align 4
  store i32 398, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.100, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end:                                         ; preds = %cond_end229, %cond_end55
  %r328 = load i32, i32* %r, align 4
  ret i32 %r328

cond_jump_then31:                                 ; preds = %cond_jump_then
  %type34 = load %CType, %CType* %type2, align 8
  %fieldTTT35 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  store i32 12, i32* %fieldTTT35, align 4
  store i32 64, i32* %bits, align 4
  br label %cond_end33

cond_else_block32:                                ; preds = %cond_jump_then
  %type36 = load %CType, %CType* %type2, align 8
  %fieldTTT37 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  store i32 0, i32* %fieldTTT37, align 4
  br label %cond_end33

cond_end33:                                       ; preds = %cond_else_block32, %cond_jump_then31
  %vtop38 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL39 = getelementptr inbounds %SValue, %SValue* %vtop38, i32 0, i32 0
  %type40 = load %CType, %CType* %fieldLLL39, align 8
  %fieldVVV41 = getelementptr inbounds %CType, %CType* %fieldLLL39, i32 0, i32 0
  %t42 = load i32, i32* %fieldVVV41, align 4
  %andtmp43 = and i32 %t42, 16
  %icmpA44 = icmp ne i32 %andtmp43, 0
  store i1 %icmpA44, i1* %oror, align 1
  br i1 %icmpA44, label %cond_jump_end, label %cond_jump_then45

cond_jump_then45:                                 ; preds = %cond_end33
  %vtop46 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL47 = getelementptr inbounds %SValue, %SValue* %vtop46, i32 0, i32 0
  %type48 = load %CType, %CType* %fieldLLL47, align 8
  %fieldVVV49 = getelementptr inbounds %CType, %CType* %fieldLLL47, i32 0, i32 0
  %t50 = load i32, i32* %fieldVVV49, align 4
  %andtmp51 = and i32 %t50, 15
  %eq52 = icmp eq i32 %andtmp51, 11
  %oror53 = or i1 %icmpA44, %eq52
  store i1 %oror53, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then45, %cond_end33
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then54, label %cond_end55

cond_jump_then54:                                 ; preds = %cond_jump_end
  %type56 = load %CType, %CType* %type2, align 8
  %type57 = load %CType, %CType* %type2, align 8
  %fieldVVV58 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  %t59 = load i32, i32* %fieldVVV58, align 4
  %ortmp = or i32 %t59, 16
  %fieldTTT60 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTTT60, align 4
  br label %cond_end55

cond_end55:                                       ; preds = %cond_jump_then54, %cond_jump_end
  %type61 = load %CType, %CType* %type2, align 8
  call void @gen_cast(%CType* %type2)
  %bits62 = load i32, i32* %bits, align 4
  %bit_pos63 = load i32, i32* %bit_pos, align 4
  %bit_size64 = load i32, i32* %bit_size, align 4
  %add = add i32 %bit_pos63, %bit_size64
  %sub = sub i32 %bits62, %add
  call void @vpushi(i32 %sub)
  call void @gen_op(i32 1)
  %bits65 = load i32, i32* %bits, align 4
  %bit_size66 = load i32, i32* %bit_size, align 4
  %sub67 = sub i32 %bits65, %bit_size66
  call void @vpushi(i32 %sub67)
  call void @gen_op(i32 2)
  %rc68 = load i32, i32* %rc, align 4
  %fun_result = call i32 @gv(i32 %rc68)
  store i32 %fun_result, i32* %r, align 4
  br label %cond_end

is_float:                                         ; preds = %cond_else_block
  %inline_result_variable = alloca i32, align 4
  %t74 = alloca i32, align 4
  store i32 %t73, i32* %t74, align 4
  %t75 = load i32, i32* %t74, align 4
  %andtmp76 = and i32 %t75, 15
  store i32 %andtmp76, i32* %bt, align 4
  %bt79 = load i32, i32* %bt, align 4
  %eq80 = icmp eq i32 %bt79, 10
  store i1 %eq80, i1* %oror78, align 1
  br i1 %eq80, label %cond_jump_end82, label %cond_jump_then81

is_float_end:                                     ; preds = %cond_jump_end88
  %inline_result_variable93 = load i32, i32* %inline_result_variable, align 4
  %icmpA94 = icmp ne i32 %inline_result_variable93, 0
  store i1 %icmpA94, i1* %andand, align 1
  br i1 %icmpA94, label %cond_jump_then95, label %cond_jump_end96

cond_jump_then81:                                 ; preds = %is_float
  %bt83 = load i32, i32* %bt, align 4
  %eq84 = icmp eq i32 %bt83, 9
  %oror85 = or i1 %eq80, %eq84
  store i1 %oror85, i1* %oror78, align 1
  br label %cond_jump_end82

cond_jump_end82:                                  ; preds = %cond_jump_then81, %is_float
  %oror_result_value86 = load i1, i1* %oror78, align 1
  store i1 %oror_result_value86, i1* %oror77, align 1
  br i1 %oror_result_value86, label %cond_jump_end88, label %cond_jump_then87

cond_jump_then87:                                 ; preds = %cond_jump_end82
  %bt89 = load i32, i32* %bt, align 4
  %eq90 = icmp eq i32 %bt89, 8
  %oror91 = or i1 %oror_result_value86, %eq90
  store i1 %oror91, i1* %oror77, align 1
  br label %cond_jump_end88

cond_jump_end88:                                  ; preds = %cond_jump_then87, %cond_jump_end82
  %oror_result_value92 = load i1, i1* %oror77, align 1
  %icastKX = zext i1 %oror_result_value92 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then95:                                 ; preds = %is_float_end
  %vtop97 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL98 = getelementptr inbounds %SValue, %SValue* %vtop97, i32 0, i32 1
  %r99 = load i16, i16* %fieldLLL98, align 2
  %icastKY = zext i16 %r99 to i32
  %andtmp100 = and i32 %icastKY, 511
  %eq101 = icmp eq i32 %andtmp100, 240
  %andand102 = and i1 %icmpA94, %eq101
  store i1 %andand102, i1* %andand, align 1
  br label %cond_jump_end96

cond_jump_end96:                                  ; preds = %cond_jump_then95, %is_float_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then103, label %cond_end104

cond_jump_then103:                                ; preds = %cond_jump_end96
  %vtop105 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL106 = getelementptr inbounds %SValue, %SValue* %vtop105, i32 0, i32 0
  %type107 = load %CType, %CType* %fieldLLL106, align 8
  %align108 = load i32, i32* %align, align 4
  %fun_result109 = call i32 @type_size(%CType* %fieldLLL106, i32* %align)
  store i32 %fun_result109, i32* %size, align 4
  %data_section = load %Section*, %Section** @data_section, align 8
  %fieldLLL110 = getelementptr inbounds %Section, %Section* %data_section, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL110, align 4
  %align111 = load i32, i32* %align, align 4
  %icastD = sext i32 %align111 to i64
  %add112 = add i64 %data_offset, %icastD
  %sub113 = sub i64 %add112, 1
  %align114 = load i32, i32* %align, align 4
  %sub115 = sub i32 0, %align114
  %icastD116 = sext i32 %sub115 to i64
  %andtmp117 = and i64 %sub113, %icastD116
  store i64 %andtmp117, i64* %offset, align 4
  %data_section118 = load %Section*, %Section** @data_section, align 8
  %offset119 = load i64, i64* %offset, align 4
  %fieldTU = getelementptr inbounds %Section, %Section* %data_section118, i32 0, i32 0
  store i64 %offset119, i64* %fieldTU, align 4
  %size120 = load i32, i32* %size, align 4
  %eq121 = icmp eq i32 %size120, 16
  br i1 %eq121, label %cond_jump_then122, label %cond_end123

cond_end104:                                      ; preds = %cond_end_block, %cond_jump_end96
  %vtop169 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL170 = getelementptr inbounds %SValue, %SValue* %vtop169, i32 0, i32 1
  %r171 = load i16, i16* %fieldLLL170, align 2
  %icastKY172 = zext i16 %r171 to i32
  %andtmp173 = and i32 %icastKY172, 255
  store i32 %andtmp173, i32* %r, align 4
  store i32 1, i32* %rc2, align 4
  %rc174 = load i32, i32* %rc, align 4
  %eq175 = icmp eq i32 %rc174, 4
  br i1 %eq175, label %cond_jump_then176, label %cond_end177

cond_jump_then122:                                ; preds = %cond_jump_then103
  %vtop124 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL125 = getelementptr inbounds %SValue, %SValue* %vtop124, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL125, align 16
  %fieldPPP = getelementptr inbounds %CValue, %CValue* %fieldLLL125, i32 0, i32 0
  %ICASTO = bitcast %CValue* %fieldLLL125 to [1 x i32]*
  %gepOL = getelementptr [1 x i32], [1 x i32]* %ICASTO, i32 0, i32 2
  %elementXXX = load i32, i32* %gepOL, align 4
  %loadS = load i32, i32* %gepOL, align 4
  %and = and i32 %loadS, 65535
  store i32 %and, i32* %gepOL, align 4
  br label %cond_end123

cond_end123:                                      ; preds = %cond_jump_then122, %cond_jump_then103
  %data_section126 = load %Section*, %Section** @data_section, align 8
  %size127 = load i32, i32* %size, align 4
  %icastD128 = sext i32 %size127 to i64
  %fun_result129 = call i8* @section_ptr_add(%Section* %data_section126, i64 %icastD128)
  %castAQ = bitcast i8* %fun_result129 to i32*
  store i32* %castAQ, i32** %ptr, align 8
  %size130 = load i32, i32* %size, align 4
  %rshifttmp131 = lshr i32 %size130, 2
  store i32 %rshifttmp131, i32* %size, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i144 = load i32, i32* %i, align 4
  %add145 = add i32 %i144, 1
  store i32 %add145, i32* %i, align 4
  %i146 = load i32, i32* %i, align 4
  %sub147 = sub i32 %i146, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end123
  %i132 = load i32, i32* %i, align 4
  %size133 = load i32, i32* %size, align 4
  %le = icmp slt i32 %i132, %size133
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %ptr134 = load i32*, i32** %ptr, align 8
  %i135 = load i32, i32* %i, align 4
  %vtop136 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL137 = getelementptr inbounds %SValue, %SValue* %vtop136, i32 0, i32 3
  %c138 = load %CValue, %CValue* %fieldLLL137, align 16
  %fieldPPP139 = getelementptr inbounds %CValue, %CValue* %fieldLLL137, i32 0, i32 0
  %ICASTO140 = bitcast %CValue* %fieldLLL137 to [1 x i32]*
  %i141 = load i32, i32* %i, align 4
  %gepOL142 = getelementptr [1 x i32], [1 x i32]* %ICASTO140, i32 0, i32 %i141
  %elementXXX143 = load i32, i32* %gepOL142, align 4
  %element_addressXYXY = getelementptr i32, i32* %ptr134, i32 %i135
  store i32 %elementXXX143, i32* %element_addressXYXY, align 4
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %vtop148 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL149 = getelementptr inbounds %SValue, %SValue* %vtop148, i32 0, i32 0
  %type150 = load %CType, %CType* %fieldLLL149, align 8
  %data_section151 = load %Section*, %Section** @data_section, align 8
  %offset152 = load i64, i64* %offset, align 4
  %size153 = load i32, i32* %size, align 4
  %lshifttmp = shl i32 %size153, 2
  %icastD154 = sext i32 %lshifttmp to i64
  %fun_result155 = call %Sym* @get_sym_ref(%CType* %fieldLLL149, %Section* %data_section151, i64 %offset152, i64 %icastD154)
  store %Sym* %fun_result155, %Sym** %sym, align 8
  %vtop156 = load %SValue*, %SValue** @vtop, align 8
  %vtop157 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL158 = getelementptr inbounds %SValue, %SValue* %vtop157, i32 0, i32 1
  %r159 = load i16, i16* %fieldLLL158, align 2
  %icastKY160 = zext i16 %r159 to i32
  %ortmp161 = or i32 %icastKY160, 768
  %icastG = trunc i32 %ortmp161 to i16
  %fieldTU162 = getelementptr inbounds %SValue, %SValue* %vtop156, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU162, align 2
  %vtop163 = load %SValue*, %SValue** @vtop, align 8
  %sym164 = load %Sym*, %Sym** %sym, align 8
  %fieldTU165 = getelementptr inbounds %SValue, %SValue* %vtop163, i32 0, i32 4
  store %Sym* %sym164, %Sym** %fieldTU165, align 8
  %vtop166 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL167 = getelementptr inbounds %SValue, %SValue* %vtop166, i32 0, i32 3
  %c168 = load %CValue, %CValue* %fieldLLL167, align 16
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL167, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 0, i32* %icastN, align 4
  br label %cond_end104

cond_jump_then176:                                ; preds = %cond_end104
  store i32 16, i32* %rc2, align 4
  br label %cond_end177

cond_end177:                                      ; preds = %cond_jump_then176, %cond_end104
  %r181 = load i32, i32* %r, align 4
  %gteq_signed = icmp sge i32 %r181, 240
  store i1 %gteq_signed, i1* %oror180, align 1
  br i1 %gteq_signed, label %cond_jump_end183, label %cond_jump_then182

cond_jump_then182:                                ; preds = %cond_end177
  %vtop184 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL185 = getelementptr inbounds %SValue, %SValue* %vtop184, i32 0, i32 1
  %r186 = load i16, i16* %fieldLLL185, align 2
  %icastKY187 = zext i16 %r186 to i32
  %andtmp188 = and i32 %icastKY187, 256
  %icmpA189 = icmp ne i32 %andtmp188, 0
  %oror190 = or i1 %gteq_signed, %icmpA189
  store i1 %oror190, i1* %oror180, align 1
  br label %cond_jump_end183

cond_jump_end183:                                 ; preds = %cond_jump_then182, %cond_end177
  %oror_result_value191 = load i1, i1* %oror180, align 1
  store i1 %oror_result_value191, i1* %oror179, align 1
  br i1 %oror_result_value191, label %cond_jump_end193, label %cond_jump_then192

cond_jump_then192:                                ; preds = %cond_jump_end183
  %r194 = load i32, i32* %r, align 4
  %gepOL195 = getelementptr [5 x i32], [5 x i32]* @reg_classes, i32 0, i32 %r194
  %elementXXX196 = load i32, i32* %gepOL195, align 4
  %rc197 = load i32, i32* %rc, align 4
  %andtmp198 = and i32 %elementXXX196, %rc197
  %logical_denial = icmp eq i32 %andtmp198, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA199 = icmp ne i32 %castOOOO, 0
  %oror200 = or i1 %oror_result_value191, %icmpA199
  store i1 %oror200, i1* %oror179, align 1
  br label %cond_jump_end193

cond_jump_end193:                                 ; preds = %cond_jump_then192, %cond_jump_end183
  %oror_result_value201 = load i1, i1* %oror179, align 1
  store i1 %oror_result_value201, i1* %oror178, align 1
  br i1 %oror_result_value201, label %cond_jump_end203, label %cond_jump_then202

cond_jump_then202:                                ; preds = %cond_jump_end193
  %vtop205 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL206 = getelementptr inbounds %SValue, %SValue* %vtop205, i32 0, i32 0
  %type207 = load %CType, %CType* %fieldLLL206, align 8
  %fieldVVV208 = getelementptr inbounds %CType, %CType* %fieldLLL206, i32 0, i32 0
  %t209 = load i32, i32* %fieldVVV208, align 4
  %andtmp210 = and i32 %t209, 15
  %eq211 = icmp eq i32 %andtmp210, 12
  store i1 %eq211, i1* %andand204, align 1
  br i1 %eq211, label %cond_jump_then212, label %cond_jump_end213

cond_jump_end203:                                 ; preds = %cond_jump_end213, %cond_jump_end193
  %oror_result_value227 = load i1, i1* %oror178, align 1
  br i1 %oror_result_value227, label %cond_jump_then228, label %cond_end229

cond_jump_then212:                                ; preds = %cond_jump_then202
  %vtop214 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL215 = getelementptr inbounds %SValue, %SValue* %vtop214, i32 0, i32 2
  %r2 = load i16, i16* %fieldLLL215, align 2
  %icastKY216 = zext i16 %r2 to i32
  %gepOL217 = getelementptr [5 x i32], [5 x i32]* @reg_classes, i32 0, i32 %icastKY216
  %elementXXX218 = load i32, i32* %gepOL217, align 4
  %rc2219 = load i32, i32* %rc2, align 4
  %andtmp220 = and i32 %elementXXX218, %rc2219
  %logical_denial221 = icmp eq i32 %andtmp220, 0
  %castOOOO222 = zext i1 %logical_denial221 to i32
  %icmpA223 = icmp ne i32 %castOOOO222, 0
  %andand224 = and i1 %eq211, %icmpA223
  store i1 %andand224, i1* %andand204, align 1
  br label %cond_jump_end213

cond_jump_end213:                                 ; preds = %cond_jump_then212, %cond_jump_then202
  %andand_result_value225 = load i1, i1* %andand204, align 1
  %oror226 = or i1 %oror_result_value201, %andand_result_value225
  store i1 %oror226, i1* %oror178, align 1
  br label %cond_jump_end203

cond_jump_then228:                                ; preds = %cond_jump_end203
  %rc230 = load i32, i32* %rc, align 4
  %fun_result231 = call i32 @get_reg(i32 %rc230)
  store i32 %fun_result231, i32* %r, align 4
  %vtop233 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL234 = getelementptr inbounds %SValue, %SValue* %vtop233, i32 0, i32 1
  %r235 = load i16, i16* %fieldLLL234, align 2
  %icastKY236 = zext i16 %r235 to i32
  %andtmp237 = and i32 %icastKY236, 256
  %icmpA238 = icmp ne i32 %andtmp237, 0
  store i1 %icmpA238, i1* %andand232, align 1
  br i1 %icmpA238, label %cond_jump_then239, label %cond_jump_end240

cond_end229:                                      ; preds = %cond_end278, %cond_jump_end203
  %vtop324 = load %SValue*, %SValue** @vtop, align 8
  %r325 = load i32, i32* %r, align 4
  %icastG326 = trunc i32 %r325 to i16
  %fieldTU327 = getelementptr inbounds %SValue, %SValue* %vtop324, i32 0, i32 1
  store i16 %icastG326, i16* %fieldTU327, align 2
  br label %cond_end

cond_jump_then239:                                ; preds = %cond_jump_then228
  %vtop241 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL242 = getelementptr inbounds %SValue, %SValue* %vtop241, i32 0, i32 0
  %type243 = load %CType, %CType* %fieldLLL242, align 8
  %fieldVVV244 = getelementptr inbounds %CType, %CType* %fieldLLL242, i32 0, i32 0
  %t245 = load i32, i32* %fieldVVV244, align 4
  store i32 499, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.101, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float246

cond_jump_end240:                                 ; preds = %is_float_end249, %cond_jump_then228
  %andand_result_value275 = load i1, i1* %andand232, align 1
  br i1 %andand_result_value275, label %cond_jump_then276, label %cond_else_block277

is_float246:                                      ; preds = %cond_jump_then239
  %inline_result_variable247 = alloca i32, align 4
  %t248 = alloca i32, align 4
  store i32 %t245, i32* %t248, align 4
  %t251 = load i32, i32* %t248, align 4
  %andtmp252 = and i32 %t251, 15
  store i32 %andtmp252, i32* %bt250, align 4
  %bt255 = load i32, i32* %bt250, align 4
  %eq256 = icmp eq i32 %bt255, 10
  store i1 %eq256, i1* %oror254, align 1
  br i1 %eq256, label %cond_jump_end258, label %cond_jump_then257

is_float_end249:                                  ; preds = %cond_jump_end264
  %inline_result_variable270 = load i32, i32* %inline_result_variable247, align 4
  %logical_denial271 = icmp eq i32 %inline_result_variable270, 0
  %castOOOO272 = zext i1 %logical_denial271 to i32
  %icmpA273 = icmp ne i32 %castOOOO272, 0
  %andand274 = and i1 %icmpA238, %icmpA273
  store i1 %andand274, i1* %andand232, align 1
  br label %cond_jump_end240

cond_jump_then257:                                ; preds = %is_float246
  %bt259 = load i32, i32* %bt250, align 4
  %eq260 = icmp eq i32 %bt259, 9
  %oror261 = or i1 %eq256, %eq260
  store i1 %oror261, i1* %oror254, align 1
  br label %cond_jump_end258

cond_jump_end258:                                 ; preds = %cond_jump_then257, %is_float246
  %oror_result_value262 = load i1, i1* %oror254, align 1
  store i1 %oror_result_value262, i1* %oror253, align 1
  br i1 %oror_result_value262, label %cond_jump_end264, label %cond_jump_then263

cond_jump_then263:                                ; preds = %cond_jump_end258
  %bt265 = load i32, i32* %bt250, align 4
  %eq266 = icmp eq i32 %bt265, 8
  %oror267 = or i1 %oror_result_value262, %eq266
  store i1 %oror267, i1* %oror253, align 1
  br label %cond_jump_end264

cond_jump_end264:                                 ; preds = %cond_jump_then263, %cond_jump_end258
  %oror_result_value268 = load i1, i1* %oror253, align 1
  %icastKX269 = zext i1 %oror_result_value268 to i32
  store i32 %icastKX269, i32* %inline_result_variable247, align 4
  br label %is_float_end249

cond_jump_then276:                                ; preds = %cond_jump_end240
  %vtop280 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL281 = getelementptr inbounds %SValue, %SValue* %vtop280, i32 0, i32 0
  %type282 = load %CType, %CType* %fieldLLL281, align 8
  %fieldVVV283 = getelementptr inbounds %CType, %CType* %fieldLLL281, i32 0, i32 0
  %t284 = load i32, i32* %fieldVVV283, align 4
  store i32 %t284, i32* %t279, align 4
  %t285 = load i32, i32* %t279, align 4
  store i32 %t285, i32* %t1, align 4
  %vtop286 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL287 = getelementptr inbounds %SValue, %SValue* %vtop286, i32 0, i32 1
  %r288 = load i16, i16* %fieldLLL287, align 2
  %icastKY289 = zext i16 %r288 to i32
  %andtmp290 = and i32 %icastKY289, 4096
  %icmpA291 = icmp ne i32 %andtmp290, 0
  br i1 %icmpA291, label %cond_jump_then292, label %cond_jump_elif0

cond_else_block277:                               ; preds = %cond_jump_end240
  %r322 = load i32, i32* %r, align 4
  %vtop323 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 %r322, %SValue* %vtop323)
  br label %cond_end278

cond_end278:                                      ; preds = %cond_else_block277, %cond_end307
  br label %cond_end229

cond_jump_then292:                                ; preds = %cond_jump_then276
  store i32 1, i32* %t279, align 4
  br label %cond_end293

cond_jump_elif0:                                  ; preds = %cond_jump_then276
  %vtop294 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL295 = getelementptr inbounds %SValue, %SValue* %vtop294, i32 0, i32 1
  %r296 = load i16, i16* %fieldLLL295, align 2
  %icastKY297 = zext i16 %r296 to i32
  %andtmp298 = and i32 %icastKY297, 8192
  %icmpA299 = icmp ne i32 %andtmp298, 0
  br i1 %icmpA299, label %cond_jump_elif_then0, label %cond_end293

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  store i32 2, i32* %t279, align 4
  br label %cond_end293

cond_end293:                                      ; preds = %cond_jump_elif_then0, %cond_jump_elif0, %cond_jump_then292
  %vtop300 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL301 = getelementptr inbounds %SValue, %SValue* %vtop300, i32 0, i32 1
  %r302 = load i16, i16* %fieldLLL301, align 2
  %icastKY303 = zext i16 %r302 to i32
  %andtmp304 = and i32 %icastKY303, 16384
  %icmpA305 = icmp ne i32 %andtmp304, 0
  br i1 %icmpA305, label %cond_jump_then306, label %cond_end307

cond_jump_then306:                                ; preds = %cond_end293
  %t308 = load i32, i32* %t279, align 4
  %ortmp309 = or i32 %t308, 16
  store i32 %ortmp309, i32* %t279, align 4
  br label %cond_end307

cond_end307:                                      ; preds = %cond_jump_then306, %cond_end293
  %vtop310 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL311 = getelementptr inbounds %SValue, %SValue* %vtop310, i32 0, i32 0
  %type312 = load %CType, %CType* %fieldLLL311, align 8
  %t313 = load i32, i32* %t279, align 4
  %fieldTTT314 = getelementptr inbounds %CType, %CType* %fieldLLL311, i32 0, i32 0
  store i32 %t313, i32* %fieldTTT314, align 4
  %r315 = load i32, i32* %r, align 4
  %vtop316 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 %r315, %SValue* %vtop316)
  %vtop317 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL318 = getelementptr inbounds %SValue, %SValue* %vtop317, i32 0, i32 0
  %type319 = load %CType, %CType* %fieldLLL318, align 8
  %t1320 = load i32, i32* %t1, align 4
  %fieldTTT321 = getelementptr inbounds %CType, %CType* %fieldLLL318, i32 0, i32 0
  store i32 %t1320, i32* %fieldTTT321, align 4
  br label %cond_end278
}

define void @gv2(i32 %0, i32 %1) {
entry:
  %andand3 = alloca i1, align 1
  %andand = alloca i1, align 1
  %v = alloca i32, align 4
  %rc1 = alloca i32, align 4
  %rc11 = alloca i32*, align 8
  store i32 %0, i32* %rc1, align 4
  store i32* %rc1, i32** %rc11, align 8
  %rc2 = alloca i32, align 4
  %rc22 = alloca i32*, align 8
  store i32 %1, i32* %rc2, align 4
  store i32* %rc2, i32** %rc22, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 0
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 1
  %r = load i16, i16* %fieldVVV, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 255
  store i32 %andtmp, i32* %v, align 4
  %v4 = load i32, i32* %v, align 4
  %not_eq = icmp ne i32 %v4, 243
  store i1 %not_eq, i1* %andand3, align 1
  br i1 %not_eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %v5 = load i32, i32* %v, align 4
  %andtmp6 = and i32 %v5, -2
  %not_eq7 = icmp ne i32 %andtmp6, 244
  %andand8 = and i1 %not_eq, %not_eq7
  store i1 %andand8, i1* %andand3, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand3, align 1
  store i1 %andand_result_value, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then9, label %cond_jump_end10

cond_jump_then9:                                  ; preds = %cond_jump_end
  %rc111 = load i32, i32* %rc1, align 4
  %rc212 = load i32, i32* %rc2, align 4
  %leeq = icmp sle i32 %rc111, %rc212
  %andand13 = and i1 %andand_result_value, %leeq
  store i1 %andand13, i1* %andand, align 1
  br label %cond_jump_end10

cond_jump_end10:                                  ; preds = %cond_jump_then9, %cond_jump_end
  %andand_result_value14 = load i1, i1* %andand, align 1
  br i1 %andand_result_value14, label %cond_jump_then15, label %cond_else_block

cond_jump_then15:                                 ; preds = %cond_jump_end10
  call void @vswap()
  %rc116 = load i32, i32* %rc1, align 4
  %fun_result = call i32 @gv(i32 %rc116)
  call void @vswap()
  %rc217 = load i32, i32* %rc2, align 4
  %fun_result18 = call i32 @gv(i32 %rc217)
  %vtop19 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB20 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY21 = getelementptr inbounds %SValue, %SValue* %element_addressAB20, i32 -1
  %load_element22 = load %SValue, %SValue* %element_addressXYXZY21, align 16
  %fieldVVV23 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY21, i32 0, i32 1
  %r24 = load i16, i16* %fieldVVV23, align 2
  %icastKY25 = zext i16 %r24 to i32
  %andtmp26 = and i32 %icastKY25, 255
  %gteq_signed = icmp sge i32 %andtmp26, 240
  br i1 %gteq_signed, label %cond_jump_then27, label %cond_end28

cond_else_block:                                  ; preds = %cond_jump_end10
  %rc231 = load i32, i32* %rc2, align 4
  %fun_result32 = call i32 @gv(i32 %rc231)
  call void @vswap()
  %rc133 = load i32, i32* %rc1, align 4
  %fun_result34 = call i32 @gv(i32 %rc133)
  call void @vswap()
  %vtop35 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB36 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY37 = getelementptr inbounds %SValue, %SValue* %element_addressAB36, i32 0
  %load_element38 = load %SValue, %SValue* %element_addressXYXZY37, align 16
  %fieldVVV39 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY37, i32 0, i32 1
  %r40 = load i16, i16* %fieldVVV39, align 2
  %icastKY41 = zext i16 %r40 to i32
  %andtmp42 = and i32 %icastKY41, 255
  %gteq_signed43 = icmp sge i32 %andtmp42, 240
  br i1 %gteq_signed43, label %cond_jump_then44, label %cond_end45

cond_end:                                         ; preds = %cond_end45, %cond_end28
  ret void

cond_jump_then27:                                 ; preds = %cond_jump_then15
  call void @vswap()
  %rc129 = load i32, i32* %rc1, align 4
  %fun_result30 = call i32 @gv(i32 %rc129)
  call void @vswap()
  br label %cond_end28

cond_end28:                                       ; preds = %cond_jump_then27, %cond_jump_then15
  br label %cond_end

cond_jump_then44:                                 ; preds = %cond_else_block
  %rc246 = load i32, i32* %rc2, align 4
  %fun_result47 = call i32 @gv(i32 %rc246)
  br label %cond_end45

cond_end45:                                       ; preds = %cond_jump_then44, %cond_else_block
  br label %cond_end
}

define void @move_reg(i32 %0, i32 %1) {
entry:
  %sv = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %sv to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %s = alloca i32, align 4
  %s2 = alloca i32*, align 8
  store i32 %1, i32* %s, align 4
  store i32* %s, i32** %s2, align 8
  %r3 = load i32, i32* %r, align 4
  %s4 = load i32, i32* %s, align 4
  %not_eq = icmp ne i32 %r3, %s4
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %r5 = load i32, i32* %r, align 4
  call void @save_reg(i32 %r5)
  %sv6 = load %SValue, %SValue* %sv, align 16
  %fieldVVV = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 0
  %type = load %CType, %CType* %fieldVVV, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldVVV, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  %sv7 = load %SValue, %SValue* %sv, align 16
  %s8 = load i32, i32* %s, align 4
  %icastG = trunc i32 %s8 to i16
  %fieldTTT9 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 1
  store i16 %icastG, i16* %fieldTTT9, align 2
  %sv10 = load %SValue, %SValue* %sv, align 16
  %fieldVVV11 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldVVV11, align 16
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldVVV11, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 0, i32* %icastN, align 4
  %r12 = load i32, i32* %r, align 4
  %sv13 = load %SValue, %SValue* %sv, align 16
  call void @load(i32 %r12, %SValue* %sv)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  ret void
}

define void @save_regs(i32 %0) {
entry:
  %p1 = alloca %SValue*, align 8
  %p = alloca %SValue*, align 8
  %r = alloca i32, align 4
  %n = alloca i32, align 4
  %n1 = alloca i32*, align 8
  store i32 %0, i32* %n, align 4
  store i32* %n, i32** %n1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %n2 = load i32, i32* %n, align 4
  %ptrToIntI = ptrtoint %SValue* %vtop to i64
  %sext = sext i32 %n2 to i64
  %mul = mul i64 %sext, 64
  %sub = sub i64 %ptrToIntI, %mul
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** %p1, align 8
  store %SValue* getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0), %SValue** %p, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %p9 = load %SValue*, %SValue** %p, align 8
  %ptrToIntC = ptrtoint %SValue* %p9 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  store %SValue* %intToPtrB, %SValue** %p, align 8
  %p10 = load %SValue*, %SValue** %p, align 8
  %ptrToIntI11 = ptrtoint %SValue* %p10 to i64
  %sub12 = sub i64 %ptrToIntI11, 64
  %iintToPtrD13 = inttoptr i64 %sub12 to %SValue*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %p3 = load %SValue*, %SValue** %p, align 8
  %p14 = load %SValue*, %SValue** %p1, align 8
  %leeq = icmp sle %SValue* %p3, %p14
  br i1 %leeq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p5 = load %SValue*, %SValue** %p, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %p5, i32 0, i32 1
  %r6 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r6 to i32
  %andtmp = and i32 %icastKY, 255
  store i32 %andtmp, i32* %r, align 4
  %r7 = load i32, i32* %r, align 4
  %le = icmp slt i32 %r7, 240
  br i1 %le, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %r8 = load i32, i32* %r, align 4
  call void @save_reg(i32 %r8)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block
  br label %loop_continue_top_block
}

define void @save_reg(i32 %0) {
entry:
  %oror50 = alloca i1, align 1
  %oror49 = alloca i1, align 1
  %bt = alloca i32, align 4
  %andand42 = alloca i1, align 1
  %oror33 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %type = alloca %CType*, align 8
  %sv = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %sv to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %p = alloca %SValue*, align 8
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %saved = alloca i32, align 4
  %l = alloca i32, align 4
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  store i32 0, i32* %saved, align 4
  store i32 0, i32* %l, align 4
  store %SValue* getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0), %SValue** %p, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %p137 = load %SValue*, %SValue** %p, align 8
  %ptrToIntC = ptrtoint %SValue* %p137 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  store %SValue* %intToPtrB, %SValue** %p, align 8
  %p138 = load %SValue*, %SValue** %p, align 8
  %ptrToIntI = ptrtoint %SValue* %p138 to i64
  %sub139 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub139 to %SValue*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %p2 = load %SValue*, %SValue** %p, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %leeq = icmp sle %SValue* %p2, %vtop
  br i1 %leeq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p3 = load %SValue*, %SValue** %p, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %p3, i32 0, i32 1
  %r4 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r4 to i32
  %andtmp = and i32 %icastKY, 255
  %r5 = load i32, i32* %r, align 4
  %eq = icmp eq i32 %andtmp, %r5
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %p6 = load %SValue*, %SValue** %p, align 8
  %fieldLLL7 = getelementptr inbounds %SValue, %SValue* %p6, i32 0, i32 0
  %type8 = load %CType, %CType* %fieldLLL7, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL7, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp9 = and i32 %t, 15
  %eq10 = icmp eq i32 %andtmp9, 12
  store i1 %eq10, i1* %andand, align 1
  br i1 %eq10, label %cond_jump_then11, label %cond_jump_end12

cond_jump_end:                                    ; preds = %cond_jump_end12, %cond_then_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then21, label %cond_end

cond_jump_then11:                                 ; preds = %cond_jump_then
  %p13 = load %SValue*, %SValue** %p, align 8
  %fieldLLL14 = getelementptr inbounds %SValue, %SValue* %p13, i32 0, i32 2
  %r2 = load i16, i16* %fieldLLL14, align 2
  %icastKY15 = zext i16 %r2 to i32
  %andtmp16 = and i32 %icastKY15, 255
  %r17 = load i32, i32* %r, align 4
  %eq18 = icmp eq i32 %andtmp16, %r17
  %andand19 = and i1 %eq10, %eq18
  store i1 %andand19, i1* %andand, align 1
  br label %cond_jump_end12

cond_jump_end12:                                  ; preds = %cond_jump_then11, %cond_jump_then
  %andand_result_value = load i1, i1* %andand, align 1
  %oror20 = or i1 %eq, %andand_result_value
  store i1 %oror20, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_then21:                                 ; preds = %cond_jump_end
  %saved22 = load i32, i32* %saved, align 4
  %logical_denial = icmp eq i32 %saved22, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then23, label %cond_end24

cond_end:                                         ; preds = %cond_end112, %cond_jump_end
  br label %loop_continue_top_block

cond_jump_then23:                                 ; preds = %cond_jump_then21
  %p25 = load %SValue*, %SValue** %p, align 8
  %fieldLLL26 = getelementptr inbounds %SValue, %SValue* %p25, i32 0, i32 1
  %r27 = load i16, i16* %fieldLLL26, align 2
  %icastKY28 = zext i16 %r27 to i32
  %andtmp29 = and i32 %icastKY28, 255
  store i32 %andtmp29, i32* %r, align 4
  %p30 = load %SValue*, %SValue** %p, align 8
  %fieldLLL31 = getelementptr inbounds %SValue, %SValue* %p30, i32 0, i32 0
  %type32 = load %CType, %CType* %fieldLLL31, align 8
  store %CType* %fieldLLL31, %CType** %type, align 8
  %p34 = load %SValue*, %SValue** %p, align 8
  %fieldLLL35 = getelementptr inbounds %SValue, %SValue* %p34, i32 0, i32 1
  %r36 = load i16, i16* %fieldLLL35, align 2
  %icastKY37 = zext i16 %r36 to i32
  %andtmp38 = and i32 %icastKY37, 256
  %icmpA39 = icmp ne i32 %andtmp38, 0
  store i1 %icmpA39, i1* %oror33, align 1
  br i1 %icmpA39, label %cond_jump_end41, label %cond_jump_then40

cond_end24:                                       ; preds = %cond_end103, %cond_jump_then21
  %p105 = load %SValue*, %SValue** %p, align 8
  %fieldLLL106 = getelementptr inbounds %SValue, %SValue* %p105, i32 0, i32 1
  %r107 = load i16, i16* %fieldLLL106, align 2
  %icastKY108 = zext i16 %r107 to i32
  %andtmp109 = and i32 %icastKY108, 256
  %icmpA110 = icmp ne i32 %andtmp109, 0
  br i1 %icmpA110, label %cond_jump_then111, label %cond_else_block

cond_jump_then40:                                 ; preds = %cond_jump_then23
  %type43 = load %CType*, %CType** %type, align 8
  %fieldLLL44 = getelementptr inbounds %CType, %CType* %type43, i32 0, i32 0
  %t45 = load i32, i32* %fieldLLL44, align 4
  store i32 195, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.99, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_jump_end41:                                  ; preds = %cond_jump_end70, %cond_jump_then23
  %oror_result_value78 = load i1, i1* %oror33, align 1
  br i1 %oror_result_value78, label %cond_jump_then79, label %cond_end80

is_float:                                         ; preds = %cond_jump_then40
  %inline_result_variable = alloca i32, align 4
  %t46 = alloca i32, align 4
  store i32 %t45, i32* %t46, align 4
  %t47 = load i32, i32* %t46, align 4
  %andtmp48 = and i32 %t47, 15
  store i32 %andtmp48, i32* %bt, align 4
  %bt51 = load i32, i32* %bt, align 4
  %eq52 = icmp eq i32 %bt51, 10
  store i1 %eq52, i1* %oror50, align 1
  br i1 %eq52, label %cond_jump_end54, label %cond_jump_then53

is_float_end:                                     ; preds = %cond_jump_end60
  %inline_result_variable65 = load i32, i32* %inline_result_variable, align 4
  %logical_denial66 = icmp eq i32 %inline_result_variable65, 0
  %castOOOO67 = zext i1 %logical_denial66 to i32
  %icmpA68 = icmp ne i32 %castOOOO67, 0
  store i1 %icmpA68, i1* %andand42, align 1
  br i1 %icmpA68, label %cond_jump_then69, label %cond_jump_end70

cond_jump_then53:                                 ; preds = %is_float
  %bt55 = load i32, i32* %bt, align 4
  %eq56 = icmp eq i32 %bt55, 9
  %oror57 = or i1 %eq52, %eq56
  store i1 %oror57, i1* %oror50, align 1
  br label %cond_jump_end54

cond_jump_end54:                                  ; preds = %cond_jump_then53, %is_float
  %oror_result_value58 = load i1, i1* %oror50, align 1
  store i1 %oror_result_value58, i1* %oror49, align 1
  br i1 %oror_result_value58, label %cond_jump_end60, label %cond_jump_then59

cond_jump_then59:                                 ; preds = %cond_jump_end54
  %bt61 = load i32, i32* %bt, align 4
  %eq62 = icmp eq i32 %bt61, 8
  %oror63 = or i1 %oror_result_value58, %eq62
  store i1 %oror63, i1* %oror49, align 1
  br label %cond_jump_end60

cond_jump_end60:                                  ; preds = %cond_jump_then59, %cond_jump_end54
  %oror_result_value64 = load i1, i1* %oror49, align 1
  %icastKX = zext i1 %oror_result_value64 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then69:                                 ; preds = %is_float_end
  %type71 = load %CType*, %CType** %type, align 8
  %fieldLLL72 = getelementptr inbounds %CType, %CType* %type71, i32 0, i32 0
  %t73 = load i32, i32* %fieldLLL72, align 4
  %andtmp74 = and i32 %t73, 15
  %not_eq = icmp ne i32 %andtmp74, 12
  %andand75 = and i1 %icmpA68, %not_eq
  store i1 %andand75, i1* %andand42, align 1
  br label %cond_jump_end70

cond_jump_end70:                                  ; preds = %cond_jump_then69, %is_float_end
  %andand_result_value76 = load i1, i1* %andand42, align 1
  %oror77 = or i1 %icmpA39, %andand_result_value76
  store i1 %oror77, i1* %oror33, align 1
  br label %cond_jump_end41

cond_jump_then79:                                 ; preds = %cond_jump_end41
  %char_pointer_type = load %CType, %CType* @char_pointer_type, align 8
  store %CType* @char_pointer_type, %CType** %type, align 8
  br label %cond_end80

cond_end80:                                       ; preds = %cond_jump_then79, %cond_jump_end41
  %type81 = load %CType*, %CType** %type, align 8
  %align82 = load i32, i32* %align, align 4
  %fun_result = call i32 @type_size(%CType* %type81, i32* %align)
  store i32 %fun_result, i32* %size, align 4
  %loc = load i32, i32* @loc, align 4
  %size83 = load i32, i32* %size, align 4
  %sub = sub i32 %loc, %size83
  %align84 = load i32, i32* %align, align 4
  %sub85 = sub i32 0, %align84
  %andtmp86 = and i32 %sub, %sub85
  store i32 %andtmp86, i32* @loc, align 4
  %sv87 = load %SValue, %SValue* %sv, align 16
  %fieldVVV88 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 0
  %type89 = load %CType, %CType* %fieldVVV88, align 8
  %type90 = load %CType*, %CType** %type, align 8
  %fieldLLL91 = getelementptr inbounds %CType, %CType* %type90, i32 0, i32 0
  %t92 = load i32, i32* %fieldLLL91, align 4
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldVVV88, i32 0, i32 0
  store i32 %t92, i32* %fieldTTT, align 4
  %sv93 = load %SValue, %SValue* %sv, align 16
  %fieldTTT94 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 1
  store i16 498, i16* %fieldTTT94, align 2
  %sv95 = load %SValue, %SValue* %sv, align 16
  %fieldVVV96 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldVVV96, align 16
  %loc97 = load i32, i32* @loc, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldVVV96, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %loc97, i32* %icastN, align 4
  %r98 = load i32, i32* %r, align 4
  %sv99 = load %SValue, %SValue* %sv, align 16
  call void @store(i32 %r98, %SValue* %sv)
  %r100 = load i32, i32* %r, align 4
  %eq101 = icmp eq i32 %r100, 4
  br i1 %eq101, label %cond_jump_then102, label %cond_end103

cond_jump_then102:                                ; preds = %cond_end80
  call void @o(i32 55773)
  br label %cond_end103

cond_end103:                                      ; preds = %cond_jump_then102, %cond_end80
  %loc104 = load i32, i32* @loc, align 4
  store i32 %loc104, i32* %l, align 4
  store i32 1, i32* %saved, align 4
  br label %cond_end24

cond_jump_then111:                                ; preds = %cond_end24
  %p113 = load %SValue*, %SValue** %p, align 8
  %p114 = load %SValue*, %SValue** %p, align 8
  %fieldLLL115 = getelementptr inbounds %SValue, %SValue* %p114, i32 0, i32 1
  %r116 = load i16, i16* %fieldLLL115, align 2
  %icastKY117 = zext i16 %r116 to i32
  %andtmp118 = and i32 %icastKY117, -33024
  %ortmp = or i32 %andtmp118, 241
  %icastG = trunc i32 %ortmp to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %p113, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU, align 2
  br label %cond_end112

cond_else_block:                                  ; preds = %cond_end24
  %p119 = load %SValue*, %SValue** %p, align 8
  %p120 = load %SValue*, %SValue** %p, align 8
  %fieldLLL121 = getelementptr inbounds %SValue, %SValue* %p120, i32 0, i32 0
  %type122 = load %CType, %CType* %fieldLLL121, align 8
  %fieldVVV123 = getelementptr inbounds %CType, %CType* %fieldLLL121, i32 0, i32 0
  %t124 = load i32, i32* %fieldVVV123, align 4
  %fun_result125 = call i32 @lvalue_type(i32 %t124)
  %ortmp126 = or i32 %fun_result125, 242
  %icastG127 = trunc i32 %ortmp126 to i16
  %fieldTU128 = getelementptr inbounds %SValue, %SValue* %p119, i32 0, i32 1
  store i16 %icastG127, i16* %fieldTU128, align 2
  br label %cond_end112

cond_end112:                                      ; preds = %cond_else_block, %cond_jump_then111
  %p129 = load %SValue*, %SValue** %p, align 8
  %fieldTU130 = getelementptr inbounds %SValue, %SValue* %p129, i32 0, i32 2
  store i16 240, i16* %fieldTU130, align 2
  %p131 = load %SValue*, %SValue** %p, align 8
  %fieldLLL132 = getelementptr inbounds %SValue, %SValue* %p131, i32 0, i32 3
  %c133 = load %CValue, %CValue* %fieldLLL132, align 16
  %l134 = load i32, i32* %l, align 4
  %fieldIII135 = getelementptr inbounds %CValue, %CValue* %fieldLLL132, i32 0, i32 0
  %icastN136 = bitcast fp128* %fieldIII135 to i32*
  store i32 %l134, i32* %icastN136, align 4
  br label %cond_end
}

define void @vpop() {
entry:
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %v = alloca i32, align 4
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 255
  store i32 %andtmp, i32* %v, align 4
  %v1 = load i32, i32* %v, align 4
  %eq = icmp eq i32 %v1, 4
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  %logical_denial = icmp eq i32 %nocode_wanted, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  %andand2 = and i1 %eq, %icmpA
  store i1 %andand2, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then3, label %cond_jump_elif0

cond_jump_then3:                                  ; preds = %cond_jump_end
  call void @o(i32 55773)
  br label %cond_end

cond_jump_elif0:                                  ; preds = %cond_jump_end
  %v4 = load i32, i32* %v, align 4
  %eq5 = icmp eq i32 %v4, 244
  store i1 %eq5, i1* %oror, align 1
  br i1 %eq5, label %cond_jump_end7, label %cond_jump_then6

cond_jump_elif_then0:                             ; preds = %cond_jump_end7
  %vtop11 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL12 = getelementptr inbounds %SValue, %SValue* %vtop11, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL12, align 16
  %ICASTO = bitcast %CValue* %fieldLLL12 to i32*
  %ul = load i32, i32* %ICASTO, align 4
  call void @gsym(i32 %ul)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_elif_then0, %cond_jump_end7, %cond_jump_then3
  %vtop13 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop13 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  ret void

cond_jump_then6:                                  ; preds = %cond_jump_elif0
  %v8 = load i32, i32* %v, align 4
  %eq9 = icmp eq i32 %v8, 245
  %oror10 = or i1 %eq5, %eq9
  store i1 %oror10, i1* %oror, align 1
  br label %cond_jump_end7

cond_jump_end7:                                   ; preds = %cond_jump_then6, %cond_jump_elif0
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then0, label %cond_end
}

define void @vswap() {
entry:
  %tmp = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %tmp to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 0
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  store %SValue %load_element, %SValue* %tmp, align 16
  %vtop1 = load %SValue*, %SValue** @vtop, align 8
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB3 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY4 = getelementptr inbounds %SValue, %SValue* %element_addressAB3, i32 -1
  %load_element5 = load %SValue, %SValue* %element_addressXYXZY4, align 16
  %element_addressXYXY = getelementptr %SValue, %SValue* %vtop1, i32 0
  store %SValue %load_element5, %SValue* %element_addressXYXY, align 16
  %vtop6 = load %SValue*, %SValue** @vtop, align 8
  %tmp7 = load %SValue, %SValue* %tmp, align 16
  %element_addressXYXY8 = getelementptr %SValue, %SValue* %vtop6, i32 -1
  store %SValue %tmp7, %SValue* %element_addressXYXY8, align 16
  ret void
}

define void @vdup() {
entry:
  %vtop = load %SValue*, %SValue** @vtop, align 8
  call void @vpushv(%SValue* %vtop)
  ret void
}

define i32 @get_reg(i32 %0) {
entry:
  %andand62 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %p = alloca %SValue*, align 8
  %r = alloca i32, align 4
  %rc = alloca i32, align 4
  %rc1 = alloca i32*, align 8
  store i32 %0, i32* %rc, align 4
  store i32* %rc, i32** %rc1, align 8
  store i32 0, i32* %r, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %get_reg.notfound
  %r28 = load i32, i32* %r, align 4
  %add29 = add i32 %r28, 1
  store i32 %add29, i32* %r, align 4
  %r30 = load i32, i32* %r, align 4
  %sub31 = sub i32 %r30, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %r2 = load i32, i32* %r, align 4
  %le = icmp slt i32 %r2, 5
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %r3 = load i32, i32* %r, align 4
  %gepOL = getelementptr [5 x i32], [5 x i32]* @reg_classes, i32 0, i32 %r3
  %elementXXX = load i32, i32* %gepOL, align 4
  %rc4 = load i32, i32* %rc, align 4
  %andtmp = and i32 %elementXXX, %rc4
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  store %SValue* getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0), %SValue** %p, align 8
  br label %loop_top_block33

cond_jump_then:                                   ; preds = %cond_then_block
  store %SValue* getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0), %SValue** %p, align 8
  br label %loop_top_block6

cond_end:                                         ; preds = %cond_then_block
  br label %get_reg.notfound

loop_continue_top_block5:                         ; preds = %cond_end24
  %p25 = load %SValue*, %SValue** %p, align 8
  %ptrToIntC = ptrtoint %SValue* %p25 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  store %SValue* %intToPtrB, %SValue** %p, align 8
  %p26 = load %SValue*, %SValue** %p, align 8
  %ptrToIntI = ptrtoint %SValue* %p26 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  br label %loop_top_block6

loop_top_block6:                                  ; preds = %loop_continue_top_block5, %cond_jump_then
  %p7 = load %SValue*, %SValue** %p, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %leeq = icmp sle %SValue* %p7, %vtop
  br i1 %leeq, label %cond_then_block8, label %cond_end_block9

cond_then_block8:                                 ; preds = %loop_top_block6
  %p10 = load %SValue*, %SValue** %p, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %p10, i32 0, i32 1
  %r11 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r11 to i32
  %andtmp12 = and i32 %icastKY, 255
  %r13 = load i32, i32* %r, align 4
  %eq = icmp eq i32 %andtmp12, %r13
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then14

cond_end_block9:                                  ; preds = %loop_top_block6
  %r27 = load i32, i32* %r, align 4
  ret i32 %r27

cond_jump_then14:                                 ; preds = %cond_then_block8
  %p15 = load %SValue*, %SValue** %p, align 8
  %fieldLLL16 = getelementptr inbounds %SValue, %SValue* %p15, i32 0, i32 2
  %r217 = load i16, i16* %fieldLLL16, align 2
  %icastKY18 = zext i16 %r217 to i32
  %andtmp19 = and i32 %icastKY18, 255
  %r20 = load i32, i32* %r, align 4
  %eq21 = icmp eq i32 %andtmp19, %r20
  %oror22 = or i1 %eq, %eq21
  store i1 %oror22, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then14, %cond_then_block8
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then23, label %cond_end24

cond_jump_then23:                                 ; preds = %cond_jump_end
  br label %get_reg.notfound
  br label %cond_end24

cond_end24:                                       ; preds = %cond_jump_then23, %cond_jump_end
  br label %loop_continue_top_block5

get_reg.notfound:                                 ; preds = %cond_end, %cond_jump_then23
  br label %loop_continue_top_block

loop_continue_top_block32:                        ; preds = %cond_end76
  %p79 = load %SValue*, %SValue** %p, align 8
  %ptrToIntC80 = ptrtoint %SValue* %p79 to i64
  %add81 = add i64 %ptrToIntC80, 64
  %intToPtrB82 = inttoptr i64 %add81 to %SValue*
  store %SValue* %intToPtrB82, %SValue** %p, align 8
  %p83 = load %SValue*, %SValue** %p, align 8
  %ptrToIntI84 = ptrtoint %SValue* %p83 to i64
  %sub85 = sub i64 %ptrToIntI84, 64
  %iintToPtrD86 = inttoptr i64 %sub85 to %SValue*
  br label %loop_top_block33

loop_top_block33:                                 ; preds = %loop_continue_top_block32, %cond_end_block
  %p34 = load %SValue*, %SValue** %p, align 8
  %vtop35 = load %SValue*, %SValue** @vtop, align 8
  %leeq36 = icmp sle %SValue* %p34, %vtop35
  br i1 %leeq36, label %cond_then_block37, label %cond_end_block38

cond_then_block37:                                ; preds = %loop_top_block33
  %p39 = load %SValue*, %SValue** %p, align 8
  %fieldLLL40 = getelementptr inbounds %SValue, %SValue* %p39, i32 0, i32 1
  %r41 = load i16, i16* %fieldLLL40, align 2
  %icastKY42 = zext i16 %r41 to i32
  %andtmp43 = and i32 %icastKY42, 255
  store i32 %andtmp43, i32* %r, align 4
  %r44 = load i32, i32* %r, align 4
  %le45 = icmp slt i32 %r44, 240
  store i1 %le45, i1* %andand, align 1
  br i1 %le45, label %cond_jump_then46, label %cond_jump_end47

cond_end_block38:                                 ; preds = %loop_top_block33
  ret i32 -1

cond_jump_then46:                                 ; preds = %cond_then_block37
  %r48 = load i32, i32* %r, align 4
  %gepOL49 = getelementptr [5 x i32], [5 x i32]* @reg_classes, i32 0, i32 %r48
  %elementXXX50 = load i32, i32* %gepOL49, align 4
  %rc51 = load i32, i32* %rc, align 4
  %andtmp52 = and i32 %elementXXX50, %rc51
  %icmpA53 = icmp ne i32 %andtmp52, 0
  %andand54 = and i1 %le45, %icmpA53
  store i1 %andand54, i1* %andand, align 1
  br label %cond_jump_end47

cond_jump_end47:                                  ; preds = %cond_jump_then46, %cond_then_block37
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then55, label %cond_end56

cond_jump_then55:                                 ; preds = %cond_jump_end47
  br label %get_reg.save_found
  br label %cond_end56

cond_end56:                                       ; preds = %cond_jump_then55, %cond_jump_end47
  %p57 = load %SValue*, %SValue** %p, align 8
  %fieldLLL58 = getelementptr inbounds %SValue, %SValue* %p57, i32 0, i32 2
  %r259 = load i16, i16* %fieldLLL58, align 2
  %icastKY60 = zext i16 %r259 to i32
  %andtmp61 = and i32 %icastKY60, 255
  store i32 %andtmp61, i32* %r, align 4
  %r63 = load i32, i32* %r, align 4
  %le64 = icmp slt i32 %r63, 240
  store i1 %le64, i1* %andand62, align 1
  br i1 %le64, label %cond_jump_then65, label %cond_jump_end66

get_reg.save_found:                               ; preds = %cond_jump_then75, %cond_jump_then55
  %r77 = load i32, i32* %r, align 4
  call void @save_reg(i32 %r77)
  %r78 = load i32, i32* %r, align 4
  ret i32 %r78

cond_jump_then65:                                 ; preds = %cond_end56
  %r67 = load i32, i32* %r, align 4
  %gepOL68 = getelementptr [5 x i32], [5 x i32]* @reg_classes, i32 0, i32 %r67
  %elementXXX69 = load i32, i32* %gepOL68, align 4
  %rc70 = load i32, i32* %rc, align 4
  %andtmp71 = and i32 %elementXXX69, %rc70
  %icmpA72 = icmp ne i32 %andtmp71, 0
  %andand73 = and i1 %le64, %icmpA72
  store i1 %andand73, i1* %andand62, align 1
  br label %cond_jump_end66

cond_jump_end66:                                  ; preds = %cond_jump_then65, %cond_end56
  %andand_result_value74 = load i1, i1* %andand62, align 1
  br i1 %andand_result_value74, label %cond_jump_then75, label %cond_end76

cond_jump_then75:                                 ; preds = %cond_jump_end66
  br label %get_reg.save_found

cond_end76:                                       ; preds = %cond_jump_end66
  br label %loop_continue_top_block32
}

define i32 @get_reg_ex(i32 %0, i32 %1) {
entry:
  %oror = alloca i1, align 1
  %n = alloca i32, align 4
  %p = alloca %SValue*, align 8
  %r = alloca i32, align 4
  %rc = alloca i32, align 4
  %rc1 = alloca i32*, align 8
  store i32 %0, i32* %rc, align 4
  store i32* %rc, i32** %rc1, align 8
  %rc2 = alloca i32, align 4
  %rc22 = alloca i32*, align 8
  store i32 %1, i32* %rc2, align 4
  store i32* %rc2, i32** %rc22, align 8
  store i32 0, i32* %r, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %r36 = load i32, i32* %r, align 4
  %add37 = add i32 %r36, 1
  store i32 %add37, i32* %r, align 4
  %r38 = load i32, i32* %r, align 4
  %sub39 = sub i32 %r38, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %r3 = load i32, i32* %r, align 4
  %le = icmp slt i32 %r3, 5
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %r4 = load i32, i32* %r, align 4
  %gepOL = getelementptr [5 x i32], [5 x i32]* @reg_classes, i32 0, i32 %r4
  %elementXXX = load i32, i32* %gepOL, align 4
  %rc25 = load i32, i32* %rc2, align 4
  %andtmp = and i32 %elementXXX, %rc25
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %rc40 = load i32, i32* %rc, align 4
  %fun_result = call i32 @get_reg(i32 %rc40)
  ret i32 %fun_result

cond_jump_then:                                   ; preds = %cond_then_block
  store i32 0, i32* %n, align 4
  store %SValue* getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0), %SValue** %p, align 8
  br label %loop_top_block7

cond_end:                                         ; preds = %cond_end34, %cond_then_block
  br label %loop_continue_top_block

loop_continue_top_block6:                         ; preds = %cond_end24
  %p27 = load %SValue*, %SValue** %p, align 8
  %ptrToIntC = ptrtoint %SValue* %p27 to i64
  %add28 = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add28 to %SValue*
  store %SValue* %intToPtrB, %SValue** %p, align 8
  %p29 = load %SValue*, %SValue** %p, align 8
  %ptrToIntI = ptrtoint %SValue* %p29 to i64
  %sub30 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub30 to %SValue*
  br label %loop_top_block7

loop_top_block7:                                  ; preds = %loop_continue_top_block6, %cond_jump_then
  %p8 = load %SValue*, %SValue** %p, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %leeq = icmp sle %SValue* %p8, %vtop
  br i1 %leeq, label %cond_then_block9, label %cond_end_block10

cond_then_block9:                                 ; preds = %loop_top_block7
  %p11 = load %SValue*, %SValue** %p, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %p11, i32 0, i32 1
  %r12 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r12 to i32
  %andtmp13 = and i32 %icastKY, 255
  %r14 = load i32, i32* %r, align 4
  %eq = icmp eq i32 %andtmp13, %r14
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then15

cond_end_block10:                                 ; preds = %loop_top_block7
  %n31 = load i32, i32* %n, align 4
  %leeq32 = icmp sle i32 %n31, 1
  br i1 %leeq32, label %cond_jump_then33, label %cond_end34

cond_jump_then15:                                 ; preds = %cond_then_block9
  %p16 = load %SValue*, %SValue** %p, align 8
  %fieldLLL17 = getelementptr inbounds %SValue, %SValue* %p16, i32 0, i32 2
  %r2 = load i16, i16* %fieldLLL17, align 2
  %icastKY18 = zext i16 %r2 to i32
  %andtmp19 = and i32 %icastKY18, 255
  %r20 = load i32, i32* %r, align 4
  %eq21 = icmp eq i32 %andtmp19, %r20
  %oror22 = or i1 %eq, %eq21
  store i1 %oror22, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then15, %cond_then_block9
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then23, label %cond_end24

cond_jump_then23:                                 ; preds = %cond_jump_end
  %n25 = load i32, i32* %n, align 4
  %add = add i32 %n25, 1
  store i32 %add, i32* %n, align 4
  %n26 = load i32, i32* %n, align 4
  %sub = sub i32 %n26, 1
  br label %cond_end24

cond_end24:                                       ; preds = %cond_jump_then23, %cond_jump_end
  br label %loop_continue_top_block6

cond_jump_then33:                                 ; preds = %cond_end_block10
  %r35 = load i32, i32* %r, align 4
  ret i32 %r35

cond_end34:                                       ; preds = %cond_end_block10
  br label %cond_end
}

define void @gen_op(i32 %0) {
entry:
  %andand327 = alloca i1, align 1
  %oror304 = alloca i1, align 1
  %oror303 = alloca i1, align 1
  %bt300 = alloca i32, align 4
  %oror275 = alloca i1, align 1
  %oror274 = alloca i1, align 1
  %oror230 = alloca i1, align 1
  %oror216 = alloca i1, align 1
  %oror207 = alloca i1, align 1
  %oror196 = alloca i1, align 1
  %andand173 = alloca i1, align 1
  %andand172 = alloca i1, align 1
  %andand171 = alloca i1, align 1
  %andand170 = alloca i1, align 1
  %oror161 = alloca i1, align 1
  %oror147 = alloca i1, align 1
  %oror127 = alloca i1, align 1
  %oror126 = alloca i1, align 1
  %bt123 = alloca i32, align 4
  %oror100 = alloca i1, align 1
  %oror99 = alloca i1, align 1
  %bt = alloca i32, align 4
  %oror94 = alloca i1, align 1
  %andand61 = alloca i1, align 1
  %andand30 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %type1 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type1 to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %t = alloca i32, align 4
  %bt2 = alloca i32, align 4
  %bt1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %u = alloca i32, align 4
  %op = alloca i32, align 4
  %op1 = alloca i32*, align 8
  store i32 %0, i32* %op, align 4
  store i32* %op, i32** %op1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 -1
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 0
  %type = load %CType, %CType* %fieldVVV, align 8
  %fieldVVV2 = getelementptr inbounds %CType, %CType* %fieldVVV, i32 0, i32 0
  %t3 = load i32, i32* %fieldVVV2, align 4
  store i32 %t3, i32* %t1, align 4
  %vtop4 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB5 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY6 = getelementptr inbounds %SValue, %SValue* %element_addressAB5, i32 0
  %load_element7 = load %SValue, %SValue* %element_addressXYXZY6, align 16
  %fieldVVV8 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY6, i32 0, i32 0
  %type9 = load %CType, %CType* %fieldVVV8, align 8
  %fieldVVV10 = getelementptr inbounds %CType, %CType* %fieldVVV8, i32 0, i32 0
  %t11 = load i32, i32* %fieldVVV10, align 4
  store i32 %t11, i32* %t2, align 4
  %t112 = load i32, i32* %t1, align 4
  %andtmp = and i32 %t112, 15
  store i32 %andtmp, i32* %bt1, align 4
  %t213 = load i32, i32* %t2, align 4
  %andtmp14 = and i32 %t213, 15
  store i32 %andtmp14, i32* %bt2, align 4
  %bt115 = load i32, i32* %bt1, align 4
  %eq = icmp eq i32 %bt115, 4
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %bt216 = load i32, i32* %bt2, align 4
  %eq17 = icmp eq i32 %bt216, 4
  %oror18 = or i1 %eq, %eq17
  store i1 %oror18, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then19, label %cond_jump_elif0

cond_jump_then19:                                 ; preds = %cond_jump_end
  %op20 = load i32, i32* %op, align 4
  %gteq_signed = icmp sge i32 %op20, 146
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then21, label %cond_jump_end22

cond_jump_elif0:                                  ; preds = %cond_jump_end
  %bt195 = load i32, i32* %bt1, align 4
  store i32 1337, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.110, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_jump_elif_then0:                             ; preds = %cond_jump_end117
  %bt1148 = load i32, i32* %bt1, align 4
  %eq149 = icmp eq i32 %bt1148, 10
  store i1 %eq149, i1* %oror147, align 1
  br i1 %eq149, label %cond_jump_end151, label %cond_jump_then150

cond_jump_elif1:                                  ; preds = %cond_jump_end117
  %bt1208 = load i32, i32* %bt1, align 4
  %eq209 = icmp eq i32 %bt1208, 12
  store i1 %eq209, i1* %oror207, align 1
  br i1 %eq209, label %cond_jump_end211, label %cond_jump_then210

cond_jump_elif_then1:                             ; preds = %cond_jump_end211
  store i32 12, i32* %t, align 4
  %t1217 = load i32, i32* %t1, align 4
  %andtmp218 = and i32 %t1217, 31
  %eq219 = icmp eq i32 %andtmp218, 28
  store i1 %eq219, i1* %oror216, align 1
  br i1 %eq219, label %cond_jump_end221, label %cond_jump_then220

cond_else_block:                                  ; preds = %cond_jump_end211
  store i32 0, i32* %t, align 4
  %t1231 = load i32, i32* %t1, align 4
  %andtmp232 = and i32 %t1231, 31
  %eq233 = icmp eq i32 %andtmp232, 16
  store i1 %eq233, i1* %oror230, align 1
  br i1 %eq233, label %cond_jump_end235, label %cond_jump_then234

cond_end:                                         ; preds = %cond_end338, %cond_end228, %cond_end206, %cond_end41
  ret void

cond_jump_then21:                                 ; preds = %cond_jump_then19
  %op23 = load i32, i32* %op, align 4
  %leeq = icmp sle i32 %op23, 161
  %andand24 = and i1 %gteq_signed, %leeq
  store i1 %andand24, i1* %andand, align 1
  br label %cond_jump_end22

cond_jump_end22:                                  ; preds = %cond_jump_then21, %cond_jump_then19
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then25, label %cond_end26

cond_jump_then25:                                 ; preds = %cond_jump_end22
  %vtop27 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop27 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  %vtop28 = load %SValue*, %SValue** @vtop, align 8
  %op29 = load i32, i32* %op, align 4
  call void @check_comparison_pointer_types(%SValue* %iintToPtrD, %SValue* %vtop28, i32 %op29)
  store i32 28, i32* %t, align 4
  br label %gen_op.std_op
  br label %cond_end26

cond_end26:                                       ; preds = %cond_jump_then25, %cond_jump_end22
  %bt131 = load i32, i32* %bt1, align 4
  %eq32 = icmp eq i32 %bt131, 4
  store i1 %eq32, i1* %andand30, align 1
  br i1 %eq32, label %cond_jump_then33, label %cond_jump_end34

gen_op.std_op:                                    ; preds = %cond_end242, %cond_end228, %cond_end206, %cond_jump_then25
  %t245 = load i32, i32* %t, align 4
  %andtmp246 = and i32 %t245, 16
  %icmpA247 = icmp ne i32 %andtmp246, 0
  br i1 %icmpA247, label %cond_jump_then248, label %cond_end249

cond_jump_then33:                                 ; preds = %cond_end26
  %bt235 = load i32, i32* %bt2, align 4
  %eq36 = icmp eq i32 %bt235, 4
  %andand37 = and i1 %eq32, %eq36
  store i1 %andand37, i1* %andand30, align 1
  br label %cond_jump_end34

cond_jump_end34:                                  ; preds = %cond_jump_then33, %cond_end26
  %andand_result_value38 = load i1, i1* %andand30, align 1
  br i1 %andand_result_value38, label %cond_jump_then39, label %cond_else_block40

cond_jump_then39:                                 ; preds = %cond_jump_end34
  %op42 = load i32, i32* %op, align 4
  %not_eq = icmp ne i32 %op42, 45
  br i1 %not_eq, label %cond_jump_then43, label %cond_end44

cond_else_block40:                                ; preds = %cond_jump_end34
  %op62 = load i32, i32* %op, align 4
  %not_eq63 = icmp ne i32 %op62, 45
  store i1 %not_eq63, i1* %andand61, align 1
  br i1 %not_eq63, label %cond_jump_then64, label %cond_jump_end65

cond_end41:                                       ; preds = %cond_end75, %cond_end44
  br label %cond_end

cond_jump_then43:                                 ; preds = %cond_jump_then39
  call void (i8*, ...) @error(i8* bitcast ([25 x i8]* @100 to i8*))
  br label %cond_end44

cond_end44:                                       ; preds = %cond_jump_then43, %cond_jump_then39
  %vtop45 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI46 = ptrtoint %SValue* %vtop45 to i64
  %sub47 = sub i64 %ptrToIntI46, 64
  %iintToPtrD48 = inttoptr i64 %sub47 to %SValue*
  %vtop49 = load %SValue*, %SValue** @vtop, align 8
  %op50 = load i32, i32* %op, align 4
  call void @check_comparison_pointer_types(%SValue* %iintToPtrD48, %SValue* %vtop49, i32 %op50)
  %vtop51 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB52 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY53 = getelementptr inbounds %SValue, %SValue* %element_addressAB52, i32 -1
  %load_element54 = load %SValue, %SValue* %element_addressXYXZY53, align 16
  %fieldVVV55 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY53, i32 0, i32 0
  %type56 = load %CType, %CType* %fieldVVV55, align 8
  %fun_result = call i32 @pointed_size(%CType* %fieldVVV55)
  store i32 %fun_result, i32* %u, align 4
  %op57 = load i32, i32* %op, align 4
  call void @gen_opic(i32 %op57)
  %vtop58 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop58, i32 0, i32 0
  %type59 = load %CType, %CType* %fieldLLL, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  store i32 12, i32* %fieldTTT, align 4
  %u60 = load i32, i32* %u, align 4
  call void @vpushi(i32 %u60)
  call void @gen_op(i32 178)
  br label %cond_end41

cond_jump_then64:                                 ; preds = %cond_else_block40
  %op66 = load i32, i32* %op, align 4
  %not_eq67 = icmp ne i32 %op66, 43
  %andand68 = and i1 %not_eq63, %not_eq67
  store i1 %andand68, i1* %andand61, align 1
  br label %cond_jump_end65

cond_jump_end65:                                  ; preds = %cond_jump_then64, %cond_else_block40
  %andand_result_value69 = load i1, i1* %andand61, align 1
  br i1 %andand_result_value69, label %cond_jump_then70, label %cond_end71

cond_jump_then70:                                 ; preds = %cond_jump_end65
  call void (i8*, ...) @error(i8* bitcast ([25 x i8]* @101 to i8*))
  br label %cond_end71

cond_end71:                                       ; preds = %cond_jump_then70, %cond_jump_end65
  %bt272 = load i32, i32* %bt2, align 4
  %eq73 = icmp eq i32 %bt272, 4
  br i1 %eq73, label %cond_jump_then74, label %cond_end75

cond_jump_then74:                                 ; preds = %cond_end71
  call void @vswap()
  %t176 = load i32, i32* %t1, align 4
  %t277 = load i32, i32* %t2, align 4
  call void @swap(i32* %t1, i32* %t2)
  br label %cond_end75

cond_end75:                                       ; preds = %cond_jump_then74, %cond_end71
  %vtop78 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB79 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY80 = getelementptr inbounds %SValue, %SValue* %element_addressAB79, i32 -1
  %load_element81 = load %SValue, %SValue* %element_addressXYXZY80, align 16
  %fieldVVV82 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY80, i32 0, i32 0
  %type83 = load %CType, %CType* %fieldVVV82, align 8
  store %CType %type83, %CType* %type1, align 8
  %vtop84 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB85 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY86 = getelementptr inbounds %SValue, %SValue* %element_addressAB85, i32 -1
  %load_element87 = load %SValue, %SValue* %element_addressXYXZY86, align 16
  %fieldVVV88 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY86, i32 0, i32 0
  %type89 = load %CType, %CType* %fieldVVV88, align 8
  %fun_result90 = call i32 @pointed_size(%CType* %fieldVVV88)
  %icastD = sext i32 %fun_result90 to i64
  call void @vpushll(i64 %icastD)
  call void @gen_op(i32 42)
  %op91 = load i32, i32* %op, align 4
  call void @gen_opic(i32 %op91)
  %vtop92 = load %SValue*, %SValue** @vtop, align 8
  %type193 = load %CType, %CType* %type1, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop92, i32 0, i32 0
  store %CType %type193, %CType* %fieldTU, align 8
  br label %cond_end41

is_float:                                         ; preds = %cond_jump_elif0
  %inline_result_variable = alloca i32, align 4
  %t96 = alloca i32, align 4
  store i32 %bt195, i32* %t96, align 4
  %t97 = load i32, i32* %t96, align 4
  %andtmp98 = and i32 %t97, 15
  store i32 %andtmp98, i32* %bt, align 4
  %bt101 = load i32, i32* %bt, align 4
  %eq102 = icmp eq i32 %bt101, 10
  store i1 %eq102, i1* %oror100, align 1
  br i1 %eq102, label %cond_jump_end104, label %cond_jump_then103

is_float_end:                                     ; preds = %cond_jump_end110
  %inline_result_variable115 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable115, 0
  store i1 %icmpA, i1* %oror94, align 1
  br i1 %icmpA, label %cond_jump_end117, label %cond_jump_then116

cond_jump_then103:                                ; preds = %is_float
  %bt105 = load i32, i32* %bt, align 4
  %eq106 = icmp eq i32 %bt105, 9
  %oror107 = or i1 %eq102, %eq106
  store i1 %oror107, i1* %oror100, align 1
  br label %cond_jump_end104

cond_jump_end104:                                 ; preds = %cond_jump_then103, %is_float
  %oror_result_value108 = load i1, i1* %oror100, align 1
  store i1 %oror_result_value108, i1* %oror99, align 1
  br i1 %oror_result_value108, label %cond_jump_end110, label %cond_jump_then109

cond_jump_then109:                                ; preds = %cond_jump_end104
  %bt111 = load i32, i32* %bt, align 4
  %eq112 = icmp eq i32 %bt111, 8
  %oror113 = or i1 %oror_result_value108, %eq112
  store i1 %oror113, i1* %oror99, align 1
  br label %cond_jump_end110

cond_jump_end110:                                 ; preds = %cond_jump_then109, %cond_jump_end104
  %oror_result_value114 = load i1, i1* %oror99, align 1
  %icastKX = zext i1 %oror_result_value114 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then116:                                ; preds = %is_float_end
  %bt2118 = load i32, i32* %bt2, align 4
  store i32 1337, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.111, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float119

cond_jump_end117:                                 ; preds = %is_float_end122, %is_float_end
  %oror_result_value146 = load i1, i1* %oror94, align 1
  br i1 %oror_result_value146, label %cond_jump_elif_then0, label %cond_jump_elif1

is_float119:                                      ; preds = %cond_jump_then116
  %inline_result_variable120 = alloca i32, align 4
  %t121 = alloca i32, align 4
  store i32 %bt2118, i32* %t121, align 4
  %t124 = load i32, i32* %t121, align 4
  %andtmp125 = and i32 %t124, 15
  store i32 %andtmp125, i32* %bt123, align 4
  %bt128 = load i32, i32* %bt123, align 4
  %eq129 = icmp eq i32 %bt128, 10
  store i1 %eq129, i1* %oror127, align 1
  br i1 %eq129, label %cond_jump_end131, label %cond_jump_then130

is_float_end122:                                  ; preds = %cond_jump_end137
  %inline_result_variable143 = load i32, i32* %inline_result_variable120, align 4
  %icmpA144 = icmp ne i32 %inline_result_variable143, 0
  %oror145 = or i1 %icmpA, %icmpA144
  store i1 %oror145, i1* %oror94, align 1
  br label %cond_jump_end117

cond_jump_then130:                                ; preds = %is_float119
  %bt132 = load i32, i32* %bt123, align 4
  %eq133 = icmp eq i32 %bt132, 9
  %oror134 = or i1 %eq129, %eq133
  store i1 %oror134, i1* %oror127, align 1
  br label %cond_jump_end131

cond_jump_end131:                                 ; preds = %cond_jump_then130, %is_float119
  %oror_result_value135 = load i1, i1* %oror127, align 1
  store i1 %oror_result_value135, i1* %oror126, align 1
  br i1 %oror_result_value135, label %cond_jump_end137, label %cond_jump_then136

cond_jump_then136:                                ; preds = %cond_jump_end131
  %bt138 = load i32, i32* %bt123, align 4
  %eq139 = icmp eq i32 %bt138, 8
  %oror140 = or i1 %oror_result_value135, %eq139
  store i1 %oror140, i1* %oror126, align 1
  br label %cond_jump_end137

cond_jump_end137:                                 ; preds = %cond_jump_then136, %cond_jump_end131
  %oror_result_value141 = load i1, i1* %oror126, align 1
  %icastKX142 = zext i1 %oror_result_value141 to i32
  store i32 %icastKX142, i32* %inline_result_variable120, align 4
  br label %is_float_end122

cond_jump_then150:                                ; preds = %cond_jump_elif_then0
  %bt2152 = load i32, i32* %bt2, align 4
  %eq153 = icmp eq i32 %bt2152, 10
  %oror154 = or i1 %eq149, %eq153
  store i1 %oror154, i1* %oror147, align 1
  br label %cond_jump_end151

cond_jump_end151:                                 ; preds = %cond_jump_then150, %cond_jump_elif_then0
  %oror_result_value155 = load i1, i1* %oror147, align 1
  br i1 %oror_result_value155, label %cond_jump_then156, label %cond_jump_elif0157

cond_jump_then156:                                ; preds = %cond_jump_end151
  store i32 10, i32* %t, align 4
  br label %cond_end160

cond_jump_elif0157:                               ; preds = %cond_jump_end151
  %bt1162 = load i32, i32* %bt1, align 4
  %eq163 = icmp eq i32 %bt1162, 9
  store i1 %eq163, i1* %oror161, align 1
  br i1 %eq163, label %cond_jump_end165, label %cond_jump_then164

cond_jump_elif_then0158:                          ; preds = %cond_jump_end165
  store i32 9, i32* %t, align 4
  br label %cond_end160

cond_else_block159:                               ; preds = %cond_jump_end165
  store i32 8, i32* %t, align 4
  br label %cond_end160

cond_end160:                                      ; preds = %cond_else_block159, %cond_jump_elif_then0158, %cond_jump_then156
  %op174 = load i32, i32* %op, align 4
  %not_eq175 = icmp ne i32 %op174, 43
  store i1 %not_eq175, i1* %andand173, align 1
  br i1 %not_eq175, label %cond_jump_then176, label %cond_jump_end177

cond_jump_then164:                                ; preds = %cond_jump_elif0157
  %bt2166 = load i32, i32* %bt2, align 4
  %eq167 = icmp eq i32 %bt2166, 9
  %oror168 = or i1 %eq163, %eq167
  store i1 %oror168, i1* %oror161, align 1
  br label %cond_jump_end165

cond_jump_end165:                                 ; preds = %cond_jump_then164, %cond_jump_elif0157
  %oror_result_value169 = load i1, i1* %oror161, align 1
  br i1 %oror_result_value169, label %cond_jump_elif_then0158, label %cond_else_block159

cond_jump_then176:                                ; preds = %cond_end160
  %op178 = load i32, i32* %op, align 4
  %not_eq179 = icmp ne i32 %op178, 45
  %andand180 = and i1 %not_eq175, %not_eq179
  store i1 %andand180, i1* %andand173, align 1
  br label %cond_jump_end177

cond_jump_end177:                                 ; preds = %cond_jump_then176, %cond_end160
  %andand_result_value181 = load i1, i1* %andand173, align 1
  store i1 %andand_result_value181, i1* %andand172, align 1
  br i1 %andand_result_value181, label %cond_jump_then182, label %cond_jump_end183

cond_jump_then182:                                ; preds = %cond_jump_end177
  %op184 = load i32, i32* %op, align 4
  %not_eq185 = icmp ne i32 %op184, 42
  %andand186 = and i1 %andand_result_value181, %not_eq185
  store i1 %andand186, i1* %andand172, align 1
  br label %cond_jump_end183

cond_jump_end183:                                 ; preds = %cond_jump_then182, %cond_jump_end177
  %andand_result_value187 = load i1, i1* %andand172, align 1
  store i1 %andand_result_value187, i1* %andand171, align 1
  br i1 %andand_result_value187, label %cond_jump_then188, label %cond_jump_end189

cond_jump_then188:                                ; preds = %cond_jump_end183
  %op190 = load i32, i32* %op, align 4
  %not_eq191 = icmp ne i32 %op190, 47
  %andand192 = and i1 %andand_result_value187, %not_eq191
  store i1 %andand192, i1* %andand171, align 1
  br label %cond_jump_end189

cond_jump_end189:                                 ; preds = %cond_jump_then188, %cond_jump_end183
  %andand_result_value193 = load i1, i1* %andand171, align 1
  store i1 %andand_result_value193, i1* %andand170, align 1
  br i1 %andand_result_value193, label %cond_jump_then194, label %cond_jump_end195

cond_jump_then194:                                ; preds = %cond_jump_end189
  %op197 = load i32, i32* %op, align 4
  %le = icmp slt i32 %op197, 146
  store i1 %le, i1* %oror196, align 1
  br i1 %le, label %cond_jump_end199, label %cond_jump_then198

cond_jump_end195:                                 ; preds = %cond_jump_end199, %cond_jump_end189
  %andand_result_value204 = load i1, i1* %andand170, align 1
  br i1 %andand_result_value204, label %cond_jump_then205, label %cond_end206

cond_jump_then198:                                ; preds = %cond_jump_then194
  %op200 = load i32, i32* %op, align 4
  %gt = icmp sgt i32 %op200, 159
  %oror201 = or i1 %le, %gt
  store i1 %oror201, i1* %oror196, align 1
  br label %cond_jump_end199

cond_jump_end199:                                 ; preds = %cond_jump_then198, %cond_jump_then194
  %oror_result_value202 = load i1, i1* %oror196, align 1
  %andand203 = and i1 %andand_result_value193, %oror_result_value202
  store i1 %andand203, i1* %andand170, align 1
  br label %cond_jump_end195

cond_jump_then205:                                ; preds = %cond_jump_end195
  call void (i8*, ...) @error(i8* bitcast ([38 x i8]* @102 to i8*))
  br label %cond_end206

cond_end206:                                      ; preds = %cond_jump_then205, %cond_jump_end195
  br label %gen_op.std_op
  br label %cond_end

cond_jump_then210:                                ; preds = %cond_jump_elif1
  %bt2212 = load i32, i32* %bt2, align 4
  %eq213 = icmp eq i32 %bt2212, 12
  %oror214 = or i1 %eq209, %eq213
  store i1 %oror214, i1* %oror207, align 1
  br label %cond_jump_end211

cond_jump_end211:                                 ; preds = %cond_jump_then210, %cond_jump_elif1
  %oror_result_value215 = load i1, i1* %oror207, align 1
  br i1 %oror_result_value215, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_then220:                                ; preds = %cond_jump_elif_then1
  %t2222 = load i32, i32* %t2, align 4
  %andtmp223 = and i32 %t2222, 31
  %eq224 = icmp eq i32 %andtmp223, 28
  %oror225 = or i1 %eq219, %eq224
  store i1 %oror225, i1* %oror216, align 1
  br label %cond_jump_end221

cond_jump_end221:                                 ; preds = %cond_jump_then220, %cond_jump_elif_then1
  %oror_result_value226 = load i1, i1* %oror216, align 1
  br i1 %oror_result_value226, label %cond_jump_then227, label %cond_end228

cond_jump_then227:                                ; preds = %cond_jump_end221
  %t229 = load i32, i32* %t, align 4
  %ortmp = or i32 %t229, 16
  store i32 %ortmp, i32* %t, align 4
  br label %cond_end228

cond_end228:                                      ; preds = %cond_jump_then227, %cond_jump_end221
  br label %gen_op.std_op
  br label %cond_end

cond_jump_then234:                                ; preds = %cond_else_block
  %t2236 = load i32, i32* %t2, align 4
  %andtmp237 = and i32 %t2236, 31
  %eq238 = icmp eq i32 %andtmp237, 16
  %oror239 = or i1 %eq233, %eq238
  store i1 %oror239, i1* %oror230, align 1
  br label %cond_jump_end235

cond_jump_end235:                                 ; preds = %cond_jump_then234, %cond_else_block
  %oror_result_value240 = load i1, i1* %oror230, align 1
  br i1 %oror_result_value240, label %cond_jump_then241, label %cond_end242

cond_jump_then241:                                ; preds = %cond_jump_end235
  %t243 = load i32, i32* %t, align 4
  %ortmp244 = or i32 %t243, 16
  store i32 %ortmp244, i32* %t, align 4
  br label %cond_end242

cond_end242:                                      ; preds = %cond_jump_then241, %cond_jump_end235
  br label %gen_op.std_op

cond_jump_then248:                                ; preds = %gen_op.std_op
  %op250 = load i32, i32* %op, align 4
  %eq251 = icmp eq i32 %op250, 2
  br i1 %eq251, label %cond_jump_then252, label %cond_jump_elif0253

cond_end249:                                      ; preds = %cond_end257, %gen_op.std_op
  call void @vswap()
  %type1270 = load %CType, %CType* %type1, align 8
  %t271 = load i32, i32* %t, align 4
  %fieldTTT272 = getelementptr inbounds %CType, %CType* %type1, i32 0, i32 0
  store i32 %t271, i32* %fieldTTT272, align 4
  %type1273 = load %CType, %CType* %type1, align 8
  call void @gen_cast(%CType* %type1)
  call void @vswap()
  %op276 = load i32, i32* %op, align 4
  %eq277 = icmp eq i32 %op276, 205
  store i1 %eq277, i1* %oror275, align 1
  br i1 %eq277, label %cond_jump_end279, label %cond_jump_then278

cond_jump_then252:                                ; preds = %cond_jump_then248
  store i32 205, i32* %op, align 4
  br label %cond_end257

cond_jump_elif0253:                               ; preds = %cond_jump_then248
  %op258 = load i32, i32* %op, align 4
  %eq259 = icmp eq i32 %op258, 47
  br i1 %eq259, label %cond_jump_elif_then0254, label %cond_jump_elif1255

cond_jump_elif_then0254:                          ; preds = %cond_jump_elif0253
  store i32 176, i32* %op, align 4
  br label %cond_end257

cond_jump_elif1255:                               ; preds = %cond_jump_elif0253
  %op260 = load i32, i32* %op, align 4
  %eq261 = icmp eq i32 %op260, 37
  br i1 %eq261, label %cond_jump_elif_then1256, label %cond_jump_elif2

cond_jump_elif_then1256:                          ; preds = %cond_jump_elif1255
  store i32 177, i32* %op, align 4
  br label %cond_end257

cond_jump_elif2:                                  ; preds = %cond_jump_elif1255
  %op262 = load i32, i32* %op, align 4
  %eq263 = icmp eq i32 %op262, 156
  br i1 %eq263, label %cond_jump_elif_then2, label %cond_jump_elif3

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  store i32 146, i32* %op, align 4
  br label %cond_end257

cond_jump_elif3:                                  ; preds = %cond_jump_elif2
  %op264 = load i32, i32* %op, align 4
  %eq265 = icmp eq i32 %op264, 159
  br i1 %eq265, label %cond_jump_elif_then3, label %cond_jump_elif4

cond_jump_elif_then3:                             ; preds = %cond_jump_elif3
  store i32 151, i32* %op, align 4
  br label %cond_end257

cond_jump_elif4:                                  ; preds = %cond_jump_elif3
  %op266 = load i32, i32* %op, align 4
  %eq267 = icmp eq i32 %op266, 158
  br i1 %eq267, label %cond_jump_elif_then4, label %cond_jump_elif5

cond_jump_elif_then4:                             ; preds = %cond_jump_elif4
  store i32 150, i32* %op, align 4
  br label %cond_end257

cond_jump_elif5:                                  ; preds = %cond_jump_elif4
  %op268 = load i32, i32* %op, align 4
  %eq269 = icmp eq i32 %op268, 157
  br i1 %eq269, label %cond_jump_elif_then5, label %cond_end257

cond_jump_elif_then5:                             ; preds = %cond_jump_elif5
  store i32 147, i32* %op, align 4
  br label %cond_end257

cond_end257:                                      ; preds = %cond_jump_elif_then5, %cond_jump_elif5, %cond_jump_elif_then4, %cond_jump_elif_then3, %cond_jump_elif_then2, %cond_jump_elif_then1256, %cond_jump_elif_then0254, %cond_jump_then252
  br label %cond_end249

cond_jump_then278:                                ; preds = %cond_end249
  %op280 = load i32, i32* %op, align 4
  %eq281 = icmp eq i32 %op280, 2
  %oror282 = or i1 %eq277, %eq281
  store i1 %oror282, i1* %oror275, align 1
  br label %cond_jump_end279

cond_jump_end279:                                 ; preds = %cond_jump_then278, %cond_end249
  %oror_result_value283 = load i1, i1* %oror275, align 1
  store i1 %oror_result_value283, i1* %oror274, align 1
  br i1 %oror_result_value283, label %cond_jump_end285, label %cond_jump_then284

cond_jump_then284:                                ; preds = %cond_jump_end279
  %op286 = load i32, i32* %op, align 4
  %eq287 = icmp eq i32 %op286, 1
  %oror288 = or i1 %oror_result_value283, %eq287
  store i1 %oror288, i1* %oror274, align 1
  br label %cond_jump_end285

cond_jump_end285:                                 ; preds = %cond_jump_then284, %cond_jump_end279
  %oror_result_value289 = load i1, i1* %oror274, align 1
  br i1 %oror_result_value289, label %cond_jump_then290, label %cond_end291

cond_jump_then290:                                ; preds = %cond_jump_end285
  %type1292 = load %CType, %CType* %type1, align 8
  %fieldTTT293 = getelementptr inbounds %CType, %CType* %type1, i32 0, i32 0
  store i32 0, i32* %fieldTTT293, align 4
  br label %cond_end291

cond_end291:                                      ; preds = %cond_jump_then290, %cond_jump_end285
  %type1294 = load %CType, %CType* %type1, align 8
  call void @gen_cast(%CType* %type1)
  %t295 = load i32, i32* %t, align 4
  store i32 1394, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.112, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float296

is_float296:                                      ; preds = %cond_end291
  %inline_result_variable297 = alloca i32, align 4
  %t298 = alloca i32, align 4
  store i32 %t295, i32* %t298, align 4
  %t301 = load i32, i32* %t298, align 4
  %andtmp302 = and i32 %t301, 15
  store i32 %andtmp302, i32* %bt300, align 4
  %bt305 = load i32, i32* %bt300, align 4
  %eq306 = icmp eq i32 %bt305, 10
  store i1 %eq306, i1* %oror304, align 1
  br i1 %eq306, label %cond_jump_end308, label %cond_jump_then307

is_float_end299:                                  ; preds = %cond_jump_end314
  %inline_result_variable320 = load i32, i32* %inline_result_variable297, align 4
  %icmpA321 = icmp ne i32 %inline_result_variable320, 0
  br i1 %icmpA321, label %cond_jump_then322, label %cond_else_block323

cond_jump_then307:                                ; preds = %is_float296
  %bt309 = load i32, i32* %bt300, align 4
  %eq310 = icmp eq i32 %bt309, 9
  %oror311 = or i1 %eq306, %eq310
  store i1 %oror311, i1* %oror304, align 1
  br label %cond_jump_end308

cond_jump_end308:                                 ; preds = %cond_jump_then307, %is_float296
  %oror_result_value312 = load i1, i1* %oror304, align 1
  store i1 %oror_result_value312, i1* %oror303, align 1
  br i1 %oror_result_value312, label %cond_jump_end314, label %cond_jump_then313

cond_jump_then313:                                ; preds = %cond_jump_end308
  %bt315 = load i32, i32* %bt300, align 4
  %eq316 = icmp eq i32 %bt315, 8
  %oror317 = or i1 %oror_result_value312, %eq316
  store i1 %oror317, i1* %oror303, align 1
  br label %cond_jump_end314

cond_jump_end314:                                 ; preds = %cond_jump_then313, %cond_jump_end308
  %oror_result_value318 = load i1, i1* %oror303, align 1
  %icastKX319 = zext i1 %oror_result_value318 to i32
  store i32 %icastKX319, i32* %inline_result_variable297, align 4
  br label %is_float_end299

cond_jump_then322:                                ; preds = %is_float_end299
  %op325 = load i32, i32* %op, align 4
  call void @gen_opif(i32 %op325)
  br label %cond_end324

cond_else_block323:                               ; preds = %is_float_end299
  %op326 = load i32, i32* %op, align 4
  call void @gen_opic(i32 %op326)
  br label %cond_end324

cond_end324:                                      ; preds = %cond_else_block323, %cond_jump_then322
  %op328 = load i32, i32* %op, align 4
  %gteq_signed329 = icmp sge i32 %op328, 146
  store i1 %gteq_signed329, i1* %andand327, align 1
  br i1 %gteq_signed329, label %cond_jump_then330, label %cond_jump_end331

cond_jump_then330:                                ; preds = %cond_end324
  %op332 = load i32, i32* %op, align 4
  %leeq333 = icmp sle i32 %op332, 159
  %andand334 = and i1 %gteq_signed329, %leeq333
  store i1 %andand334, i1* %andand327, align 1
  br label %cond_jump_end331

cond_jump_end331:                                 ; preds = %cond_jump_then330, %cond_end324
  %andand_result_value335 = load i1, i1* %andand327, align 1
  br i1 %andand_result_value335, label %cond_jump_then336, label %cond_else_block337

cond_jump_then336:                                ; preds = %cond_jump_end331
  %vtop339 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL340 = getelementptr inbounds %SValue, %SValue* %vtop339, i32 0, i32 0
  %type341 = load %CType, %CType* %fieldLLL340, align 8
  %fieldTTT342 = getelementptr inbounds %CType, %CType* %fieldLLL340, i32 0, i32 0
  store i32 0, i32* %fieldTTT342, align 4
  br label %cond_end338

cond_else_block337:                               ; preds = %cond_jump_end331
  %vtop343 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL344 = getelementptr inbounds %SValue, %SValue* %vtop343, i32 0, i32 0
  %type345 = load %CType, %CType* %fieldLLL344, align 8
  %t346 = load i32, i32* %t, align 4
  %fieldTTT347 = getelementptr inbounds %CType, %CType* %fieldLLL344, i32 0, i32 0
  store i32 %t346, i32* %fieldTTT347, align 4
  br label %cond_end338

cond_end338:                                      ; preds = %cond_else_block337, %cond_jump_then336
  br label %cond_end
}

define void @force_charshort_cast(i32 %0) {
entry:
  %dbt = alloca i32, align 4
  %bits = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %andtmp = and i32 %t2, 15
  store i32 %andtmp, i32* %dbt, align 4
  %dbt3 = load i32, i32* %dbt, align 4
  %eq = icmp eq i32 %dbt3, 1
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i32 8, i32* %bits, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  store i32 16, i32* %bits, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %t4 = load i32, i32* %t, align 4
  %andtmp5 = and i32 %t4, 16
  %icmpA = icmp ne i32 %andtmp5, 0
  br i1 %icmpA, label %cond_jump_then6, label %cond_else_block7

cond_jump_then6:                                  ; preds = %cond_end
  %bits9 = load i32, i32* %bits, align 4
  %lshifttmp = shl i32 1, %bits9
  %sub = sub i32 %lshifttmp, 1
  call void @vpushi(i32 %sub)
  call void @gen_op(i32 38)
  br label %cond_end8

cond_else_block7:                                 ; preds = %cond_end
  %bits10 = load i32, i32* %bits, align 4
  %sub11 = sub i32 32, %bits10
  store i32 %sub11, i32* %bits, align 4
  %bits12 = load i32, i32* %bits, align 4
  call void @vpushi(i32 %bits12)
  call void @gen_op(i32 1)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %vtop13 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL14 = getelementptr inbounds %SValue, %SValue* %vtop13, i32 0, i32 0
  %type15 = load %CType, %CType* %fieldLLL14, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL14, i32 0, i32 0
  %t16 = load i32, i32* %fieldVVV, align 4
  %andtmp17 = and i32 %t16, -17
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  store i32 %andtmp17, i32* %fieldTTT, align 4
  %bits18 = load i32, i32* %bits, align 4
  call void @vpushi(i32 %bits18)
  call void @gen_op(i32 2)
  br label %cond_end8

cond_end8:                                        ; preds = %cond_else_block7, %cond_jump_then6
  ret void
}

define internal void @gen_cast(%CType* %0) {
entry:
  %andand540 = alloca i1, align 1
  %oror513 = alloca i1, align 1
  %andand488 = alloca i1, align 1
  %andand487 = alloca i1, align 1
  %r486 = alloca i32, align 4
  %oror469 = alloca i1, align 1
  %andand449 = alloca i1, align 1
  %andand431 = alloca i1, align 1
  %andand430 = alloca i1, align 1
  %andand402 = alloca i1, align 1
  %andand383 = alloca i1, align 1
  %s = alloca i32, align 4
  %andand229 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror60 = alloca i1, align 1
  %oror59 = alloca i1, align 1
  %bt56 = alloca i32, align 4
  %oror38 = alloca i1, align 1
  %oror = alloca i1, align 1
  %bt = alloca i32, align 4
  %p = alloca i32, align 4
  %c = alloca i32, align 4
  %df = alloca i32, align 4
  %sf = alloca i32, align 4
  %dbt = alloca i32, align 4
  %sbt = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 1024
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %vtop3 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL4 = getelementptr inbounds %SValue, %SValue* %vtop3, i32 0, i32 1
  %r5 = load i16, i16* %fieldLLL4, align 2
  %icastKY6 = zext i16 %r5 to i32
  %andtmp7 = and i32 %icastKY6, -1025
  %icastG = trunc i32 %andtmp7 to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop2, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU, align 2
  %vtop8 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL9 = getelementptr inbounds %SValue, %SValue* %vtop8, i32 0, i32 0
  %type10 = load %CType, %CType* %fieldLLL9, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL9, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  call void @force_charshort_cast(i32 %t)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %vtop11 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL12 = getelementptr inbounds %SValue, %SValue* %vtop11, i32 0, i32 0
  %type13 = load %CType, %CType* %fieldLLL12, align 8
  %fieldVVV14 = getelementptr inbounds %CType, %CType* %fieldLLL12, i32 0, i32 0
  %t15 = load i32, i32* %fieldVVV14, align 4
  %andtmp16 = and i32 %t15, 64
  %icmpA17 = icmp ne i32 %andtmp16, 0
  br i1 %icmpA17, label %cond_jump_then18, label %cond_end19

cond_jump_then18:                                 ; preds = %cond_end
  %fun_result = call i32 @gv(i32 1)
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_end
  %type20 = load %CType*, %CType** %type, align 8
  %fieldLLL21 = getelementptr inbounds %CType, %CType* %type20, i32 0, i32 0
  %t22 = load i32, i32* %fieldLLL21, align 4
  %andtmp23 = and i32 %t22, 31
  store i32 %andtmp23, i32* %dbt, align 4
  %vtop24 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL25 = getelementptr inbounds %SValue, %SValue* %vtop24, i32 0, i32 0
  %type26 = load %CType, %CType* %fieldLLL25, align 8
  %fieldVVV27 = getelementptr inbounds %CType, %CType* %fieldLLL25, i32 0, i32 0
  %t28 = load i32, i32* %fieldVVV27, align 4
  %andtmp29 = and i32 %t28, 31
  store i32 %andtmp29, i32* %sbt, align 4
  %sbt30 = load i32, i32* %sbt, align 4
  %dbt31 = load i32, i32* %dbt, align 4
  %not_eq = icmp ne i32 %sbt30, %dbt31
  br i1 %not_eq, label %cond_jump_then32, label %cond_jump_elif0

cond_jump_then32:                                 ; preds = %cond_end19
  %sbt34 = load i32, i32* %sbt, align 4
  store i32 1506, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.113, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_jump_elif0:                                  ; preds = %cond_end19
  %dbt541 = load i32, i32* %dbt, align 4
  %andtmp542 = and i32 %dbt541, 15
  %eq543 = icmp eq i32 %andtmp542, 4
  store i1 %eq543, i1* %andand540, align 1
  br i1 %eq543, label %cond_jump_then544, label %cond_jump_end545

cond_jump_elif_then0:                             ; preds = %cond_jump_end545
  %vtop556 = load %SValue*, %SValue** @vtop, align 8
  %vtop557 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL558 = getelementptr inbounds %SValue, %SValue* %vtop557, i32 0, i32 1
  %r559 = load i16, i16* %fieldLLL558, align 2
  %icastKY560 = zext i16 %r559 to i32
  %andtmp561 = and i32 %icastKY560, -28673
  %type562 = load %CType*, %CType** %type, align 8
  %fieldLLL563 = getelementptr inbounds %CType, %CType* %type562, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL563, align 8
  %fieldLLL564 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 3
  %type565 = load %CType, %CType* %fieldLLL564, align 8
  %fieldVVV566 = getelementptr inbounds %CType, %CType* %fieldLLL564, i32 0, i32 0
  %t567 = load i32, i32* %fieldVVV566, align 4
  %fun_result568 = call i32 @lvalue_type(i32 %t567)
  %andtmp569 = and i32 %fun_result568, 28672
  %ortmp = or i32 %andtmp561, %andtmp569
  %icastG570 = trunc i32 %ortmp to i16
  %fieldTU571 = getelementptr inbounds %SValue, %SValue* %vtop556, i32 0, i32 1
  store i16 %icastG570, i16* %fieldTU571, align 2
  br label %cond_end33

cond_end33:                                       ; preds = %cond_jump_elif_then0, %cond_jump_end545, %cond_end96
  %vtop572 = load %SValue*, %SValue** @vtop, align 8
  %type573 = load %CType*, %CType** %type, align 8
  %derefference_valueB = load %CType, %CType* %type573, align 8
  %fieldTU574 = getelementptr inbounds %SValue, %SValue* %vtop572, i32 0, i32 0
  store %CType %derefference_valueB, %CType* %fieldTU574, align 8
  ret void

is_float:                                         ; preds = %cond_jump_then32
  %inline_result_variable = alloca i32, align 4
  %t35 = alloca i32, align 4
  store i32 %sbt34, i32* %t35, align 4
  %t36 = load i32, i32* %t35, align 4
  %andtmp37 = and i32 %t36, 15
  store i32 %andtmp37, i32* %bt, align 4
  %bt39 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt39, 10
  store i1 %eq, i1* %oror38, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then40

is_float_end:                                     ; preds = %cond_jump_end45
  %inline_result_variable50 = load i32, i32* %inline_result_variable, align 4
  store i32 %inline_result_variable50, i32* %sf, align 4
  %dbt51 = load i32, i32* %dbt, align 4
  store i32 1507, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.114, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float52

cond_jump_then40:                                 ; preds = %is_float
  %bt41 = load i32, i32* %bt, align 4
  %eq42 = icmp eq i32 %bt41, 9
  %oror43 = or i1 %eq, %eq42
  store i1 %oror43, i1* %oror38, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then40, %is_float
  %oror_result_value = load i1, i1* %oror38, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end45, label %cond_jump_then44

cond_jump_then44:                                 ; preds = %cond_jump_end
  %bt46 = load i32, i32* %bt, align 4
  %eq47 = icmp eq i32 %bt46, 8
  %oror48 = or i1 %oror_result_value, %eq47
  store i1 %oror48, i1* %oror, align 1
  br label %cond_jump_end45

cond_jump_end45:                                  ; preds = %cond_jump_then44, %cond_jump_end
  %oror_result_value49 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value49 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

is_float52:                                       ; preds = %is_float_end
  %inline_result_variable53 = alloca i32, align 4
  %t54 = alloca i32, align 4
  store i32 %dbt51, i32* %t54, align 4
  %t57 = load i32, i32* %t54, align 4
  %andtmp58 = and i32 %t57, 15
  store i32 %andtmp58, i32* %bt56, align 4
  %bt61 = load i32, i32* %bt56, align 4
  %eq62 = icmp eq i32 %bt61, 10
  store i1 %eq62, i1* %oror60, align 1
  br i1 %eq62, label %cond_jump_end64, label %cond_jump_then63

is_float_end55:                                   ; preds = %cond_jump_end70
  %inline_result_variable76 = load i32, i32* %inline_result_variable53, align 4
  store i32 %inline_result_variable76, i32* %df, align 4
  %vtop77 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL78 = getelementptr inbounds %SValue, %SValue* %vtop77, i32 0, i32 1
  %r79 = load i16, i16* %fieldLLL78, align 2
  %icastKY80 = zext i16 %r79 to i32
  %andtmp81 = and i32 %icastKY80, 1023
  %eq82 = icmp eq i32 %andtmp81, 240
  %icastKX83 = zext i1 %eq82 to i32
  store i32 %icastKX83, i32* %c, align 4
  %vtop84 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL85 = getelementptr inbounds %SValue, %SValue* %vtop84, i32 0, i32 1
  %r86 = load i16, i16* %fieldLLL85, align 2
  %icastKY87 = zext i16 %r86 to i32
  %andtmp88 = and i32 %icastKY87, 1023
  %eq89 = icmp eq i32 %andtmp88, 752
  %icastKX90 = zext i1 %eq89 to i32
  store i32 %icastKX90, i32* %p, align 4
  %c91 = load i32, i32* %c, align 4
  %icmpA92 = icmp ne i32 %c91, 0
  br i1 %icmpA92, label %cond_jump_then93, label %cond_jump_elif094

cond_jump_then63:                                 ; preds = %is_float52
  %bt65 = load i32, i32* %bt56, align 4
  %eq66 = icmp eq i32 %bt65, 9
  %oror67 = or i1 %eq62, %eq66
  store i1 %oror67, i1* %oror60, align 1
  br label %cond_jump_end64

cond_jump_end64:                                  ; preds = %cond_jump_then63, %is_float52
  %oror_result_value68 = load i1, i1* %oror60, align 1
  store i1 %oror_result_value68, i1* %oror59, align 1
  br i1 %oror_result_value68, label %cond_jump_end70, label %cond_jump_then69

cond_jump_then69:                                 ; preds = %cond_jump_end64
  %bt71 = load i32, i32* %bt56, align 4
  %eq72 = icmp eq i32 %bt71, 8
  %oror73 = or i1 %oror_result_value68, %eq72
  store i1 %oror73, i1* %oror59, align 1
  br label %cond_jump_end70

cond_jump_end70:                                  ; preds = %cond_jump_then69, %cond_jump_end64
  %oror_result_value74 = load i1, i1* %oror59, align 1
  %icastKX75 = zext i1 %oror_result_value74 to i32
  store i32 %icastKX75, i32* %inline_result_variable53, align 4
  br label %is_float_end55

cond_jump_then93:                                 ; preds = %is_float_end55
  %sbt97 = load i32, i32* %sbt, align 4
  %eq98 = icmp eq i32 %sbt97, 8
  br i1 %eq98, label %cond_jump_then99, label %cond_jump_elif0100

cond_jump_elif094:                                ; preds = %is_float_end55
  %p384 = load i32, i32* %p, align 4
  %icmpA385 = icmp ne i32 %p384, 0
  store i1 %icmpA385, i1* %andand383, align 1
  br i1 %icmpA385, label %cond_jump_then386, label %cond_jump_end387

cond_jump_elif_then095:                           ; preds = %cond_jump_end387
  %vtop392 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU393 = getelementptr inbounds %SValue, %SValue* %vtop392, i32 0, i32 1
  store i16 240, i16* %fieldTU393, align 2
  %vtop394 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL395 = getelementptr inbounds %SValue, %SValue* %vtop394, i32 0, i32 3
  %c396 = load %CValue, %CValue* %fieldLLL395, align 16
  %fieldIII397 = getelementptr inbounds %CValue, %CValue* %fieldLLL395, i32 0, i32 0
  %icastN398 = bitcast fp128* %fieldIII397 to i32*
  store i32 1, i32* %icastN398, align 4
  br label %cond_end96

cond_jump_elif1:                                  ; preds = %cond_jump_end387
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  %logical_denial399 = icmp eq i32 %nocode_wanted, 0
  %castOOOO400 = zext i1 %logical_denial399 to i32
  %icmpA401 = icmp ne i32 %castOOOO400, 0
  br i1 %icmpA401, label %cond_jump_elif_then1, label %cond_end96

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %sf403 = load i32, i32* %sf, align 4
  %icmpA404 = icmp ne i32 %sf403, 0
  store i1 %icmpA404, i1* %andand402, align 1
  br i1 %icmpA404, label %cond_jump_then405, label %cond_jump_end406

cond_end96:                                       ; preds = %cond_end418, %cond_jump_elif1, %cond_jump_elif_then095, %cond_end127
  br label %cond_end33

cond_jump_then99:                                 ; preds = %cond_jump_then93
  %vtop103 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL104 = getelementptr inbounds %SValue, %SValue* %vtop103, i32 0, i32 3
  %c105 = load %CValue, %CValue* %fieldLLL104, align 16
  %vtop106 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL107 = getelementptr inbounds %SValue, %SValue* %vtop106, i32 0, i32 3
  %c108 = load %CValue, %CValue* %fieldLLL107, align 16
  %ICASTO = bitcast %CValue* %fieldLLL107 to float*
  %f = load float, float* %ICASTO, align 4
  %icastKLL = fpext float %f to fp128
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL104, i32 0, i32 0
  store fp128 %icastKLL, fp128* %fieldIII, align 16
  br label %cond_end102

cond_jump_elif0100:                               ; preds = %cond_jump_then93
  %sbt109 = load i32, i32* %sbt, align 4
  %eq110 = icmp eq i32 %sbt109, 9
  br i1 %eq110, label %cond_jump_elif_then0101, label %cond_end102

cond_jump_elif_then0101:                          ; preds = %cond_jump_elif0100
  %vtop111 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL112 = getelementptr inbounds %SValue, %SValue* %vtop111, i32 0, i32 3
  %c113 = load %CValue, %CValue* %fieldLLL112, align 16
  %vtop114 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL115 = getelementptr inbounds %SValue, %SValue* %vtop114, i32 0, i32 3
  %c116 = load %CValue, %CValue* %fieldLLL115, align 16
  %ICASTO117 = bitcast %CValue* %fieldLLL115 to double*
  %d = load double, double* %ICASTO117, align 8
  %icastKLL118 = fpext double %d to fp128
  %fieldIII119 = getelementptr inbounds %CValue, %CValue* %fieldLLL112, i32 0, i32 0
  store fp128 %icastKLL118, fp128* %fieldIII119, align 16
  br label %cond_end102

cond_end102:                                      ; preds = %cond_jump_elif_then0101, %cond_jump_elif0100, %cond_jump_then99
  %df120 = load i32, i32* %df, align 4
  %icmpA121 = icmp ne i32 %df120, 0
  br i1 %icmpA121, label %cond_jump_then122, label %cond_jump_elif0123

cond_jump_then122:                                ; preds = %cond_end102
  %sbt128 = load i32, i32* %sbt, align 4
  %andtmp129 = and i32 %sbt128, 15
  %eq130 = icmp eq i32 %andtmp129, 12
  br i1 %eq130, label %cond_jump_then131, label %cond_jump_elif0132

cond_jump_elif0123:                               ; preds = %cond_end102
  %sf211 = load i32, i32* %sf, align 4
  %icmpA212 = icmp ne i32 %sf211, 0
  store i1 %icmpA212, i1* %andand, align 1
  br i1 %icmpA212, label %cond_jump_then213, label %cond_jump_end214

cond_jump_elif_then0124:                          ; preds = %cond_jump_end214
  %vtop218 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL219 = getelementptr inbounds %SValue, %SValue* %vtop218, i32 0, i32 3
  %c220 = load %CValue, %CValue* %fieldLLL219, align 16
  %vtop221 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL222 = getelementptr inbounds %SValue, %SValue* %vtop221, i32 0, i32 3
  %c223 = load %CValue, %CValue* %fieldLLL222, align 16
  %ICASTO224 = bitcast %CValue* %fieldLLL222 to fp128*
  %ld225 = load fp128, fp128* %ICASTO224, align 16
  %icastKOL226 = fptosi fp128 %ld225 to i64
  %fieldIII227 = getelementptr inbounds %CValue, %CValue* %fieldLLL219, i32 0, i32 0
  %icastN228 = bitcast fp128* %fieldIII227 to i64*
  store i64 %icastKOL226, i64* %icastN228, align 4
  br label %cond_end127

cond_jump_elif1125:                               ; preds = %cond_jump_end214
  %sf230 = load i32, i32* %sf, align 4
  %icmpA231 = icmp ne i32 %sf230, 0
  store i1 %icmpA231, i1* %andand229, align 1
  br i1 %icmpA231, label %cond_jump_then232, label %cond_jump_end233

cond_jump_elif_then1126:                          ; preds = %cond_jump_end233
  %vtop238 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL239 = getelementptr inbounds %SValue, %SValue* %vtop238, i32 0, i32 3
  %c240 = load %CValue, %CValue* %fieldLLL239, align 16
  %vtop241 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL242 = getelementptr inbounds %SValue, %SValue* %vtop241, i32 0, i32 3
  %c243 = load %CValue, %CValue* %fieldLLL242, align 16
  %ICASTO244 = bitcast %CValue* %fieldLLL242 to fp128*
  %ld245 = load fp128, fp128* %ICASTO244, align 16
  %not_eq246 = fcmp one fp128 %ld245, 0xL00000000000000000000000000000000
  %icastKX247 = zext i1 %not_eq246 to i32
  %fieldIII248 = getelementptr inbounds %CValue, %CValue* %fieldLLL239, i32 0, i32 0
  %icastN249 = bitcast fp128* %fieldIII248 to i32*
  store i32 %icastKX247, i32* %icastN249, align 4
  br label %cond_end127

cond_else_block:                                  ; preds = %cond_jump_end233
  %sf250 = load i32, i32* %sf, align 4
  %icmpA251 = icmp ne i32 %sf250, 0
  br i1 %icmpA251, label %cond_jump_then252, label %cond_jump_elif0253

cond_end127:                                      ; preds = %cond_end313, %cond_jump_elif_then1126, %cond_jump_elif_then0124, %cond_end189
  br label %cond_end96

cond_jump_then131:                                ; preds = %cond_jump_then122
  %sbt135 = load i32, i32* %sbt, align 4
  %andtmp136 = and i32 %sbt135, 16
  %icmpA137 = icmp ne i32 %andtmp136, 0
  br i1 %icmpA137, label %cond_jump_then138, label %cond_else_block139

cond_jump_elif0132:                               ; preds = %cond_jump_then122
  %sf158 = load i32, i32* %sf, align 4
  %logical_denial = icmp eq i32 %sf158, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA159 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA159, label %cond_jump_elif_then0133, label %cond_end134

cond_jump_elif_then0133:                          ; preds = %cond_jump_elif0132
  %sbt160 = load i32, i32* %sbt, align 4
  %andtmp161 = and i32 %sbt160, 16
  %icmpA162 = icmp ne i32 %andtmp161, 0
  br i1 %icmpA162, label %cond_jump_then163, label %cond_else_block164

cond_end134:                                      ; preds = %cond_end165, %cond_jump_elif0132, %cond_end140
  %dbt184 = load i32, i32* %dbt, align 4
  %eq185 = icmp eq i32 %dbt184, 8
  br i1 %eq185, label %cond_jump_then186, label %cond_jump_elif0187

cond_jump_then138:                                ; preds = %cond_jump_then131
  %vtop141 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL142 = getelementptr inbounds %SValue, %SValue* %vtop141, i32 0, i32 3
  %c143 = load %CValue, %CValue* %fieldLLL142, align 16
  %vtop144 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL145 = getelementptr inbounds %SValue, %SValue* %vtop144, i32 0, i32 3
  %c146 = load %CValue, %CValue* %fieldLLL145, align 16
  %ICASTO147 = bitcast %CValue* %fieldLLL145 to i64*
  %ull = load i64, i64* %ICASTO147, align 4
  %icastKOL = uitofp i64 %ull to fp128
  %fieldIII148 = getelementptr inbounds %CValue, %CValue* %fieldLLL142, i32 0, i32 0
  store fp128 %icastKOL, fp128* %fieldIII148, align 16
  br label %cond_end140

cond_else_block139:                               ; preds = %cond_jump_then131
  %vtop149 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL150 = getelementptr inbounds %SValue, %SValue* %vtop149, i32 0, i32 3
  %c151 = load %CValue, %CValue* %fieldLLL150, align 16
  %vtop152 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL153 = getelementptr inbounds %SValue, %SValue* %vtop152, i32 0, i32 3
  %c154 = load %CValue, %CValue* %fieldLLL153, align 16
  %ICASTO155 = bitcast %CValue* %fieldLLL153 to i64*
  %ll = load i64, i64* %ICASTO155, align 4
  %icastKOL156 = sitofp i64 %ll to fp128
  %fieldIII157 = getelementptr inbounds %CValue, %CValue* %fieldLLL150, i32 0, i32 0
  store fp128 %icastKOL156, fp128* %fieldIII157, align 16
  br label %cond_end140

cond_end140:                                      ; preds = %cond_else_block139, %cond_jump_then138
  br label %cond_end134

cond_jump_then163:                                ; preds = %cond_jump_elif_then0133
  %vtop166 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL167 = getelementptr inbounds %SValue, %SValue* %vtop166, i32 0, i32 3
  %c168 = load %CValue, %CValue* %fieldLLL167, align 16
  %vtop169 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL170 = getelementptr inbounds %SValue, %SValue* %vtop169, i32 0, i32 3
  %c171 = load %CValue, %CValue* %fieldLLL170, align 16
  %ICASTO172 = bitcast %CValue* %fieldLLL170 to i32*
  %ui = load i32, i32* %ICASTO172, align 4
  %icastKOL173 = uitofp i32 %ui to fp128
  %fieldIII174 = getelementptr inbounds %CValue, %CValue* %fieldLLL167, i32 0, i32 0
  store fp128 %icastKOL173, fp128* %fieldIII174, align 16
  br label %cond_end165

cond_else_block164:                               ; preds = %cond_jump_elif_then0133
  %vtop175 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL176 = getelementptr inbounds %SValue, %SValue* %vtop175, i32 0, i32 3
  %c177 = load %CValue, %CValue* %fieldLLL176, align 16
  %vtop178 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL179 = getelementptr inbounds %SValue, %SValue* %vtop178, i32 0, i32 3
  %c180 = load %CValue, %CValue* %fieldLLL179, align 16
  %ICASTO181 = bitcast %CValue* %fieldLLL179 to i32*
  %i = load i32, i32* %ICASTO181, align 4
  %icastKOL182 = sitofp i32 %i to fp128
  %fieldIII183 = getelementptr inbounds %CValue, %CValue* %fieldLLL176, i32 0, i32 0
  store fp128 %icastKOL182, fp128* %fieldIII183, align 16
  br label %cond_end165

cond_end165:                                      ; preds = %cond_else_block164, %cond_jump_then163
  br label %cond_end134

cond_jump_then186:                                ; preds = %cond_end134
  %vtop190 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL191 = getelementptr inbounds %SValue, %SValue* %vtop190, i32 0, i32 3
  %c192 = load %CValue, %CValue* %fieldLLL191, align 16
  %vtop193 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL194 = getelementptr inbounds %SValue, %SValue* %vtop193, i32 0, i32 3
  %c195 = load %CValue, %CValue* %fieldLLL194, align 16
  %ICASTO196 = bitcast %CValue* %fieldLLL194 to fp128*
  %ld = load fp128, fp128* %ICASTO196, align 16
  %icastKO = fptrunc fp128 %ld to float
  %fieldIII197 = getelementptr inbounds %CValue, %CValue* %fieldLLL191, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII197 to float*
  store float %icastKO, float* %icastN, align 4
  br label %cond_end189

cond_jump_elif0187:                               ; preds = %cond_end134
  %dbt198 = load i32, i32* %dbt, align 4
  %eq199 = icmp eq i32 %dbt198, 9
  br i1 %eq199, label %cond_jump_elif_then0188, label %cond_end189

cond_jump_elif_then0188:                          ; preds = %cond_jump_elif0187
  %vtop200 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL201 = getelementptr inbounds %SValue, %SValue* %vtop200, i32 0, i32 3
  %c202 = load %CValue, %CValue* %fieldLLL201, align 16
  %vtop203 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL204 = getelementptr inbounds %SValue, %SValue* %vtop203, i32 0, i32 3
  %c205 = load %CValue, %CValue* %fieldLLL204, align 16
  %ICASTO206 = bitcast %CValue* %fieldLLL204 to fp128*
  %ld207 = load fp128, fp128* %ICASTO206, align 16
  %icastKLL208 = fptrunc fp128 %ld207 to double
  %fieldIII209 = getelementptr inbounds %CValue, %CValue* %fieldLLL201, i32 0, i32 0
  %icastN210 = bitcast fp128* %fieldIII209 to double*
  store double %icastKLL208, double* %icastN210, align 8
  br label %cond_end189

cond_end189:                                      ; preds = %cond_jump_elif_then0188, %cond_jump_elif0187, %cond_jump_then186
  br label %cond_end127

cond_jump_then213:                                ; preds = %cond_jump_elif0123
  %dbt215 = load i32, i32* %dbt, align 4
  %eq216 = icmp eq i32 %dbt215, 28
  %andand217 = and i1 %icmpA212, %eq216
  store i1 %andand217, i1* %andand, align 1
  br label %cond_jump_end214

cond_jump_end214:                                 ; preds = %cond_jump_then213, %cond_jump_elif0123
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_elif_then0124, label %cond_jump_elif1125

cond_jump_then232:                                ; preds = %cond_jump_elif1125
  %dbt234 = load i32, i32* %dbt, align 4
  %eq235 = icmp eq i32 %dbt234, 11
  %andand236 = and i1 %icmpA231, %eq235
  store i1 %andand236, i1* %andand229, align 1
  br label %cond_jump_end233

cond_jump_end233:                                 ; preds = %cond_jump_then232, %cond_jump_elif1125
  %andand_result_value237 = load i1, i1* %andand229, align 1
  br i1 %andand_result_value237, label %cond_jump_elif_then1126, label %cond_else_block

cond_jump_then252:                                ; preds = %cond_else_block
  %vtop258 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL259 = getelementptr inbounds %SValue, %SValue* %vtop258, i32 0, i32 3
  %c260 = load %CValue, %CValue* %fieldLLL259, align 16
  %vtop261 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL262 = getelementptr inbounds %SValue, %SValue* %vtop261, i32 0, i32 3
  %c263 = load %CValue, %CValue* %fieldLLL262, align 16
  %ICASTO264 = bitcast %CValue* %fieldLLL262 to fp128*
  %ld265 = load fp128, fp128* %ICASTO264, align 16
  %icastKOL266 = fptosi fp128 %ld265 to i64
  %fieldIII267 = getelementptr inbounds %CValue, %CValue* %fieldLLL259, i32 0, i32 0
  %icastN268 = bitcast fp128* %fieldIII267 to i64*
  store i64 %icastKOL266, i64* %icastN268, align 4
  br label %cond_end257

cond_jump_elif0253:                               ; preds = %cond_else_block
  %sbt269 = load i32, i32* %sbt, align 4
  %eq270 = icmp eq i32 %sbt269, 28
  br i1 %eq270, label %cond_jump_elif_then0254, label %cond_jump_elif1255

cond_jump_elif_then0254:                          ; preds = %cond_jump_elif0253
  %vtop271 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL272 = getelementptr inbounds %SValue, %SValue* %vtop271, i32 0, i32 3
  %c273 = load %CValue, %CValue* %fieldLLL272, align 16
  %vtop274 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL275 = getelementptr inbounds %SValue, %SValue* %vtop274, i32 0, i32 3
  %c276 = load %CValue, %CValue* %fieldLLL275, align 16
  %ICASTO277 = bitcast %CValue* %fieldLLL275 to i64*
  %ull278 = load i64, i64* %ICASTO277, align 4
  %fieldIII279 = getelementptr inbounds %CValue, %CValue* %fieldLLL272, i32 0, i32 0
  %icastN280 = bitcast fp128* %fieldIII279 to i64*
  store i64 %ull278, i64* %icastN280, align 4
  br label %cond_end257

cond_jump_elif1255:                               ; preds = %cond_jump_elif0253
  %sbt281 = load i32, i32* %sbt, align 4
  %andtmp282 = and i32 %sbt281, 16
  %icmpA283 = icmp ne i32 %andtmp282, 0
  br i1 %icmpA283, label %cond_jump_elif_then1256, label %cond_jump_elif2

cond_jump_elif_then1256:                          ; preds = %cond_jump_elif1255
  %vtop284 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL285 = getelementptr inbounds %SValue, %SValue* %vtop284, i32 0, i32 3
  %c286 = load %CValue, %CValue* %fieldLLL285, align 16
  %vtop287 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL288 = getelementptr inbounds %SValue, %SValue* %vtop287, i32 0, i32 3
  %c289 = load %CValue, %CValue* %fieldLLL288, align 16
  %ICASTO290 = bitcast %CValue* %fieldLLL288 to i32*
  %ui291 = load i32, i32* %ICASTO290, align 4
  %icastC = zext i32 %ui291 to i64
  %fieldIII292 = getelementptr inbounds %CValue, %CValue* %fieldLLL285, i32 0, i32 0
  %icastN293 = bitcast fp128* %fieldIII292 to i64*
  store i64 %icastC, i64* %icastN293, align 4
  br label %cond_end257

cond_jump_elif2:                                  ; preds = %cond_jump_elif1255
  %sbt294 = load i32, i32* %sbt, align 4
  %not_eq295 = icmp ne i32 %sbt294, 12
  br i1 %not_eq295, label %cond_jump_elif_then2, label %cond_end257

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  %vtop296 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL297 = getelementptr inbounds %SValue, %SValue* %vtop296, i32 0, i32 3
  %c298 = load %CValue, %CValue* %fieldLLL297, align 16
  %vtop299 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL300 = getelementptr inbounds %SValue, %SValue* %vtop299, i32 0, i32 3
  %c301 = load %CValue, %CValue* %fieldLLL300, align 16
  %ICASTO302 = bitcast %CValue* %fieldLLL300 to i32*
  %i303 = load i32, i32* %ICASTO302, align 4
  %icastD = sext i32 %i303 to i64
  %fieldIII304 = getelementptr inbounds %CValue, %CValue* %fieldLLL297, i32 0, i32 0
  %icastN305 = bitcast fp128* %fieldIII304 to i64*
  store i64 %icastD, i64* %icastN305, align 4
  br label %cond_end257

cond_end257:                                      ; preds = %cond_jump_elif_then2, %cond_jump_elif2, %cond_jump_elif_then1256, %cond_jump_elif_then0254, %cond_jump_then252
  %dbt306 = load i32, i32* %dbt, align 4
  %eq307 = icmp eq i32 %dbt306, 28
  br i1 %eq307, label %cond_jump_then308, label %cond_jump_elif0309

cond_jump_then308:                                ; preds = %cond_end257
  %vtop314 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL315 = getelementptr inbounds %SValue, %SValue* %vtop314, i32 0, i32 3
  %c316 = load %CValue, %CValue* %fieldLLL315, align 16
  %vtop317 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL318 = getelementptr inbounds %SValue, %SValue* %vtop317, i32 0, i32 3
  %c319 = load %CValue, %CValue* %fieldLLL318, align 16
  %ICASTO320 = bitcast %CValue* %fieldLLL318 to i64*
  %ll321 = load i64, i64* %ICASTO320, align 4
  %fieldIII322 = getelementptr inbounds %CValue, %CValue* %fieldLLL315, i32 0, i32 0
  %icastN323 = bitcast fp128* %fieldIII322 to i64*
  store i64 %ll321, i64* %icastN323, align 4
  br label %cond_end313

cond_jump_elif0309:                               ; preds = %cond_end257
  %dbt324 = load i32, i32* %dbt, align 4
  %eq325 = icmp eq i32 %dbt324, 11
  br i1 %eq325, label %cond_jump_elif_then0310, label %cond_jump_elif1311

cond_jump_elif_then0310:                          ; preds = %cond_jump_elif0309
  %vtop326 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL327 = getelementptr inbounds %SValue, %SValue* %vtop326, i32 0, i32 3
  %c328 = load %CValue, %CValue* %fieldLLL327, align 16
  %vtop329 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL330 = getelementptr inbounds %SValue, %SValue* %vtop329, i32 0, i32 3
  %c331 = load %CValue, %CValue* %fieldLLL330, align 16
  %ICASTO332 = bitcast %CValue* %fieldLLL330 to i64*
  %ll333 = load i64, i64* %ICASTO332, align 4
  %not_eq334 = icmp ne i64 %ll333, 0
  %icastKX335 = zext i1 %not_eq334 to i32
  %fieldIII336 = getelementptr inbounds %CValue, %CValue* %fieldLLL327, i32 0, i32 0
  %icastN337 = bitcast fp128* %fieldIII336 to i32*
  store i32 %icastKX335, i32* %icastN337, align 4
  br label %cond_end313

cond_jump_elif1311:                               ; preds = %cond_jump_elif0309
  %dbt338 = load i32, i32* %dbt, align 4
  %not_eq339 = icmp ne i32 %dbt338, 12
  br i1 %not_eq339, label %cond_jump_elif_then1312, label %cond_end313

cond_jump_elif_then1312:                          ; preds = %cond_jump_elif1311
  store i32 0, i32* %s, align 4
  %dbt340 = load i32, i32* %dbt, align 4
  %andtmp341 = and i32 %dbt340, 15
  %eq342 = icmp eq i32 %andtmp341, 1
  br i1 %eq342, label %cond_jump_then343, label %cond_jump_elif0344

cond_end313:                                      ; preds = %cond_end355, %cond_jump_elif1311, %cond_jump_elif_then0310, %cond_jump_then308
  br label %cond_end127

cond_jump_then343:                                ; preds = %cond_jump_elif_then1312
  store i32 24, i32* %s, align 4
  br label %cond_end346

cond_jump_elif0344:                               ; preds = %cond_jump_elif_then1312
  %dbt347 = load i32, i32* %dbt, align 4
  %andtmp348 = and i32 %dbt347, 15
  %eq349 = icmp eq i32 %andtmp348, 2
  br i1 %eq349, label %cond_jump_elif_then0345, label %cond_end346

cond_jump_elif_then0345:                          ; preds = %cond_jump_elif0344
  store i32 16, i32* %s, align 4
  br label %cond_end346

cond_end346:                                      ; preds = %cond_jump_elif_then0345, %cond_jump_elif0344, %cond_jump_then343
  %dbt350 = load i32, i32* %dbt, align 4
  %andtmp351 = and i32 %dbt350, 16
  %icmpA352 = icmp ne i32 %andtmp351, 0
  br i1 %icmpA352, label %cond_jump_then353, label %cond_else_block354

cond_jump_then353:                                ; preds = %cond_end346
  %vtop356 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL357 = getelementptr inbounds %SValue, %SValue* %vtop356, i32 0, i32 3
  %c358 = load %CValue, %CValue* %fieldLLL357, align 16
  %vtop359 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL360 = getelementptr inbounds %SValue, %SValue* %vtop359, i32 0, i32 3
  %c361 = load %CValue, %CValue* %fieldLLL360, align 16
  %ICASTO362 = bitcast %CValue* %fieldLLL360 to i64*
  %ll363 = load i64, i64* %ICASTO362, align 4
  %icastM = trunc i64 %ll363 to i32
  %s364 = load i32, i32* %s, align 4
  %lshifttmp = shl i32 %icastM, %s364
  %s365 = load i32, i32* %s, align 4
  %rshifttmp = lshr i32 %lshifttmp, %s365
  %fieldIII366 = getelementptr inbounds %CValue, %CValue* %fieldLLL357, i32 0, i32 0
  %icastN367 = bitcast fp128* %fieldIII366 to i32*
  store i32 %rshifttmp, i32* %icastN367, align 4
  br label %cond_end355

cond_else_block354:                               ; preds = %cond_end346
  %vtop368 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL369 = getelementptr inbounds %SValue, %SValue* %vtop368, i32 0, i32 3
  %c370 = load %CValue, %CValue* %fieldLLL369, align 16
  %vtop371 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL372 = getelementptr inbounds %SValue, %SValue* %vtop371, i32 0, i32 3
  %c373 = load %CValue, %CValue* %fieldLLL372, align 16
  %ICASTO374 = bitcast %CValue* %fieldLLL372 to i64*
  %ll375 = load i64, i64* %ICASTO374, align 4
  %icastM376 = trunc i64 %ll375 to i32
  %s377 = load i32, i32* %s, align 4
  %lshifttmp378 = shl i32 %icastM376, %s377
  %s379 = load i32, i32* %s, align 4
  %rshifttmp380 = lshr i32 %lshifttmp378, %s379
  %fieldIII381 = getelementptr inbounds %CValue, %CValue* %fieldLLL369, i32 0, i32 0
  %icastN382 = bitcast fp128* %fieldIII381 to i32*
  store i32 %rshifttmp380, i32* %icastN382, align 4
  br label %cond_end355

cond_end355:                                      ; preds = %cond_else_block354, %cond_jump_then353
  br label %cond_end313

cond_jump_then386:                                ; preds = %cond_jump_elif094
  %dbt388 = load i32, i32* %dbt, align 4
  %eq389 = icmp eq i32 %dbt388, 11
  %andand390 = and i1 %icmpA385, %eq389
  store i1 %andand390, i1* %andand383, align 1
  br label %cond_jump_end387

cond_jump_end387:                                 ; preds = %cond_jump_then386, %cond_jump_elif094
  %andand_result_value391 = load i1, i1* %andand383, align 1
  br i1 %andand_result_value391, label %cond_jump_elif_then095, label %cond_jump_elif1

cond_jump_then405:                                ; preds = %cond_jump_elif_then1
  %df407 = load i32, i32* %df, align 4
  %icmpA408 = icmp ne i32 %df407, 0
  %andand409 = and i1 %icmpA404, %icmpA408
  store i1 %andand409, i1* %andand402, align 1
  br label %cond_jump_end406

cond_jump_end406:                                 ; preds = %cond_jump_then405, %cond_jump_elif_then1
  %andand_result_value410 = load i1, i1* %andand402, align 1
  br i1 %andand_result_value410, label %cond_jump_then411, label %cond_jump_elif0412

cond_jump_then411:                                ; preds = %cond_jump_end406
  %dbt419 = load i32, i32* %dbt, align 4
  call void @gen_cvt_ftof(i32 %dbt419)
  br label %cond_end418

cond_jump_elif0412:                               ; preds = %cond_jump_end406
  %df420 = load i32, i32* %df, align 4
  %icmpA421 = icmp ne i32 %df420, 0
  br i1 %icmpA421, label %cond_jump_elif_then0413, label %cond_jump_elif1414

cond_jump_elif_then0413:                          ; preds = %cond_jump_elif0412
  %dbt422 = load i32, i32* %dbt, align 4
  call void @gen_cvt_itof1(i32 %dbt422)
  br label %cond_end418

cond_jump_elif1414:                               ; preds = %cond_jump_elif0412
  %sf423 = load i32, i32* %sf, align 4
  %icmpA424 = icmp ne i32 %sf423, 0
  br i1 %icmpA424, label %cond_jump_elif_then1415, label %cond_jump_elif2416

cond_jump_elif_then1415:                          ; preds = %cond_jump_elif1414
  %dbt425 = load i32, i32* %dbt, align 4
  %eq426 = icmp eq i32 %dbt425, 11
  br i1 %eq426, label %cond_jump_then427, label %cond_else_block428

cond_jump_elif2416:                               ; preds = %cond_jump_elif1414
  %dbt470 = load i32, i32* %dbt, align 4
  %andtmp471 = and i32 %dbt470, 15
  %eq472 = icmp eq i32 %andtmp471, 12
  store i1 %eq472, i1* %oror469, align 1
  br i1 %eq472, label %cond_jump_end474, label %cond_jump_then473

cond_jump_elif_then2417:                          ; preds = %cond_jump_end474
  %sbt480 = load i32, i32* %sbt, align 4
  %andtmp481 = and i32 %sbt480, 15
  %not_eq482 = icmp ne i32 %andtmp481, 12
  br i1 %not_eq482, label %cond_jump_then483, label %cond_end484

cond_jump_elif3:                                  ; preds = %cond_jump_end474
  %dbt511 = load i32, i32* %dbt, align 4
  %eq512 = icmp eq i32 %dbt511, 11
  br i1 %eq512, label %cond_jump_elif_then3, label %cond_jump_elif4

cond_jump_elif_then3:                             ; preds = %cond_jump_elif3
  call void @vpushi(i32 0)
  call void @gen_op(i32 149)
  br label %cond_end418

cond_jump_elif4:                                  ; preds = %cond_jump_elif3
  %dbt514 = load i32, i32* %dbt, align 4
  %andtmp515 = and i32 %dbt514, 15
  %eq516 = icmp eq i32 %andtmp515, 1
  store i1 %eq516, i1* %oror513, align 1
  br i1 %eq516, label %cond_jump_end518, label %cond_jump_then517

cond_jump_elif_then4:                             ; preds = %cond_jump_end518
  %sbt524 = load i32, i32* %sbt, align 4
  %eq525 = icmp eq i32 %sbt524, 4
  br i1 %eq525, label %cond_jump_then526, label %cond_end527

cond_jump_elif5:                                  ; preds = %cond_jump_end518
  %dbt533 = load i32, i32* %dbt, align 4
  %andtmp534 = and i32 %dbt533, 15
  %eq535 = icmp eq i32 %andtmp534, 0
  br i1 %eq535, label %cond_jump_elif_then5, label %cond_end418

cond_jump_elif_then5:                             ; preds = %cond_jump_elif5
  %sbt536 = load i32, i32* %sbt, align 4
  %eq537 = icmp eq i32 %sbt536, 12
  br i1 %eq537, label %cond_jump_then538, label %cond_end539

cond_end418:                                      ; preds = %cond_end539, %cond_jump_elif5, %cond_end527, %cond_jump_elif_then3, %cond_end484, %cond_end429, %cond_jump_elif_then0413, %cond_jump_then411
  br label %cond_end96

cond_jump_then427:                                ; preds = %cond_jump_elif_then1415
  call void @vpushi(i32 0)
  call void @gen_op(i32 149)
  br label %cond_end429

cond_else_block428:                               ; preds = %cond_jump_elif_then1415
  %dbt432 = load i32, i32* %dbt, align 4
  %not_eq433 = icmp ne i32 %dbt432, 16
  store i1 %not_eq433, i1* %andand431, align 1
  br i1 %not_eq433, label %cond_jump_then434, label %cond_jump_end435

cond_end429:                                      ; preds = %cond_end463, %cond_jump_then427
  br label %cond_end418

cond_jump_then434:                                ; preds = %cond_else_block428
  %dbt436 = load i32, i32* %dbt, align 4
  %not_eq437 = icmp ne i32 %dbt436, 28
  %andand438 = and i1 %not_eq433, %not_eq437
  store i1 %andand438, i1* %andand431, align 1
  br label %cond_jump_end435

cond_jump_end435:                                 ; preds = %cond_jump_then434, %cond_else_block428
  %andand_result_value439 = load i1, i1* %andand431, align 1
  store i1 %andand_result_value439, i1* %andand430, align 1
  br i1 %andand_result_value439, label %cond_jump_then440, label %cond_jump_end441

cond_jump_then440:                                ; preds = %cond_jump_end435
  %dbt442 = load i32, i32* %dbt, align 4
  %not_eq443 = icmp ne i32 %dbt442, 12
  %andand444 = and i1 %andand_result_value439, %not_eq443
  store i1 %andand444, i1* %andand430, align 1
  br label %cond_jump_end441

cond_jump_end441:                                 ; preds = %cond_jump_then440, %cond_jump_end435
  %andand_result_value445 = load i1, i1* %andand430, align 1
  br i1 %andand_result_value445, label %cond_jump_then446, label %cond_end447

cond_jump_then446:                                ; preds = %cond_jump_end441
  store i32 0, i32* %dbt, align 4
  br label %cond_end447

cond_end447:                                      ; preds = %cond_jump_then446, %cond_jump_end441
  %dbt448 = load i32, i32* %dbt, align 4
  call void @gen_cvt_ftoi1(i32 %dbt448)
  %dbt450 = load i32, i32* %dbt, align 4
  %eq451 = icmp eq i32 %dbt450, 0
  store i1 %eq451, i1* %andand449, align 1
  br i1 %eq451, label %cond_jump_then452, label %cond_jump_end453

cond_jump_then452:                                ; preds = %cond_end447
  %type454 = load %CType*, %CType** %type, align 8
  %fieldLLL455 = getelementptr inbounds %CType, %CType* %type454, i32 0, i32 0
  %t456 = load i32, i32* %fieldLLL455, align 4
  %andtmp457 = and i32 %t456, 31
  %dbt458 = load i32, i32* %dbt, align 4
  %not_eq459 = icmp ne i32 %andtmp457, %dbt458
  %andand460 = and i1 %eq451, %not_eq459
  store i1 %andand460, i1* %andand449, align 1
  br label %cond_jump_end453

cond_jump_end453:                                 ; preds = %cond_jump_then452, %cond_end447
  %andand_result_value461 = load i1, i1* %andand449, align 1
  br i1 %andand_result_value461, label %cond_jump_then462, label %cond_end463

cond_jump_then462:                                ; preds = %cond_jump_end453
  %vtop464 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL465 = getelementptr inbounds %SValue, %SValue* %vtop464, i32 0, i32 0
  %type466 = load %CType, %CType* %fieldLLL465, align 8
  %dbt467 = load i32, i32* %dbt, align 4
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL465, i32 0, i32 0
  store i32 %dbt467, i32* %fieldTTT, align 4
  %type468 = load %CType*, %CType** %type, align 8
  call void @gen_cast(%CType* %type468)
  br label %cond_end463

cond_end463:                                      ; preds = %cond_jump_then462, %cond_jump_end453
  br label %cond_end429

cond_jump_then473:                                ; preds = %cond_jump_elif2416
  %dbt475 = load i32, i32* %dbt, align 4
  %andtmp476 = and i32 %dbt475, 15
  %eq477 = icmp eq i32 %andtmp476, 4
  %oror478 = or i1 %eq472, %eq477
  store i1 %oror478, i1* %oror469, align 1
  br label %cond_jump_end474

cond_jump_end474:                                 ; preds = %cond_jump_then473, %cond_jump_elif2416
  %oror_result_value479 = load i1, i1* %oror469, align 1
  br i1 %oror_result_value479, label %cond_jump_elif_then2417, label %cond_jump_elif3

cond_jump_then483:                                ; preds = %cond_jump_elif_then2417
  %fun_result485 = call i32 @gv(i32 1)
  store i32 %fun_result485, i32* %r486, align 4
  %sbt489 = load i32, i32* %sbt, align 4
  %not_eq490 = icmp ne i32 %sbt489, 16
  store i1 %not_eq490, i1* %andand488, align 1
  br i1 %not_eq490, label %cond_jump_then491, label %cond_jump_end492

cond_end484:                                      ; preds = %cond_end504, %cond_jump_elif_then2417
  br label %cond_end418

cond_jump_then491:                                ; preds = %cond_jump_then483
  %sbt493 = load i32, i32* %sbt, align 4
  %not_eq494 = icmp ne i32 %sbt493, 4
  %andand495 = and i1 %not_eq490, %not_eq494
  store i1 %andand495, i1* %andand488, align 1
  br label %cond_jump_end492

cond_jump_end492:                                 ; preds = %cond_jump_then491, %cond_jump_then483
  %andand_result_value496 = load i1, i1* %andand488, align 1
  store i1 %andand_result_value496, i1* %andand487, align 1
  br i1 %andand_result_value496, label %cond_jump_then497, label %cond_jump_end498

cond_jump_then497:                                ; preds = %cond_jump_end492
  %sbt499 = load i32, i32* %sbt, align 4
  %not_eq500 = icmp ne i32 %sbt499, 6
  %andand501 = and i1 %andand_result_value496, %not_eq500
  store i1 %andand501, i1* %andand487, align 1
  br label %cond_jump_end498

cond_jump_end498:                                 ; preds = %cond_jump_then497, %cond_jump_end492
  %andand_result_value502 = load i1, i1* %andand487, align 1
  br i1 %andand_result_value502, label %cond_jump_then503, label %cond_end504

cond_jump_then503:                                ; preds = %cond_jump_end498
  call void @o(i32 25416)
  %r505 = load i32, i32* %r486, align 4
  %andtmp506 = and i32 %r505, 7
  %lshifttmp507 = shl i32 %andtmp506, 3
  %add = add i32 192, %lshifttmp507
  %r508 = load i32, i32* %r486, align 4
  %andtmp509 = and i32 %r508, 7
  %add510 = add i32 %add, %andtmp509
  call void @o(i32 %add510)
  br label %cond_end504

cond_end504:                                      ; preds = %cond_jump_then503, %cond_jump_end498
  br label %cond_end484

cond_jump_then517:                                ; preds = %cond_jump_elif4
  %dbt519 = load i32, i32* %dbt, align 4
  %andtmp520 = and i32 %dbt519, 15
  %eq521 = icmp eq i32 %andtmp520, 2
  %oror522 = or i1 %eq516, %eq521
  store i1 %oror522, i1* %oror513, align 1
  br label %cond_jump_end518

cond_jump_end518:                                 ; preds = %cond_jump_then517, %cond_jump_elif4
  %oror_result_value523 = load i1, i1* %oror513, align 1
  br i1 %oror_result_value523, label %cond_jump_elif_then4, label %cond_jump_elif5

cond_jump_then526:                                ; preds = %cond_jump_elif_then4
  %vtop528 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL529 = getelementptr inbounds %SValue, %SValue* %vtop528, i32 0, i32 0
  %type530 = load %CType, %CType* %fieldLLL529, align 8
  %fieldTTT531 = getelementptr inbounds %CType, %CType* %fieldLLL529, i32 0, i32 0
  store i32 0, i32* %fieldTTT531, align 4
  call void (i8*, ...) @warning(i8* bitcast ([50 x i8]* @103 to i8*))
  br label %cond_end527

cond_end527:                                      ; preds = %cond_jump_then526, %cond_jump_elif_then4
  %dbt532 = load i32, i32* %dbt, align 4
  call void @force_charshort_cast(i32 %dbt532)
  br label %cond_end418

cond_jump_then538:                                ; preds = %cond_jump_elif_then5
  call void @lexpand()
  call void @vpop()
  br label %cond_end539

cond_end539:                                      ; preds = %cond_jump_then538, %cond_jump_elif_then5
  br label %cond_end418

cond_jump_then544:                                ; preds = %cond_jump_elif0
  %vtop546 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL547 = getelementptr inbounds %SValue, %SValue* %vtop546, i32 0, i32 1
  %r548 = load i16, i16* %fieldLLL547, align 2
  %icastKY549 = zext i16 %r548 to i32
  %andtmp550 = and i32 %icastKY549, 256
  %logical_denial551 = icmp eq i32 %andtmp550, 0
  %castOOOO552 = zext i1 %logical_denial551 to i32
  %icmpA553 = icmp ne i32 %castOOOO552, 0
  %andand554 = and i1 %eq543, %icmpA553
  store i1 %andand554, i1* %andand540, align 1
  br label %cond_jump_end545

cond_jump_end545:                                 ; preds = %cond_jump_then544, %cond_jump_elif0
  %andand_result_value555 = load i1, i1* %andand540, align 1
  br i1 %andand_result_value555, label %cond_jump_elif_then0, label %cond_end33
}

define void @vstore() {
entry:
  %sv = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %sv to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %oror177 = alloca i1, align 1
  %oror176 = alloca i1, align 1
  %bt = alloca i32, align 4
  %andand21 = alloca i1, align 1
  %oror9 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %delayed_cast = alloca i32, align 4
  %rc = alloca i32, align 4
  %bit_pos = alloca i32, align 4
  %bit_size = alloca i32, align 4
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %t = alloca i32, align 4
  %r = alloca i32, align 4
  %ft = alloca i32, align 4
  %dbt = alloca i32, align 4
  %sbt = alloca i32, align 4
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 -1
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 0
  %type = load %CType, %CType* %fieldVVV, align 8
  %fieldVVV1 = getelementptr inbounds %CType, %CType* %fieldVVV, i32 0, i32 0
  %t2 = load i32, i32* %fieldVVV1, align 4
  store i32 %t2, i32* %ft, align 4
  %vtop3 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop3, i32 0, i32 0
  %type4 = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV5 = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t6 = load i32, i32* %fieldVVV5, align 4
  %andtmp = and i32 %t6, 15
  store i32 %andtmp, i32* %sbt, align 4
  %ft7 = load i32, i32* %ft, align 4
  %andtmp8 = and i32 %ft7, 15
  store i32 %andtmp8, i32* %dbt, align 4
  %sbt10 = load i32, i32* %sbt, align 4
  %eq = icmp eq i32 %sbt10, 0
  store i1 %eq, i1* %oror9, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %sbt11 = load i32, i32* %sbt, align 4
  %eq12 = icmp eq i32 %sbt11, 2
  %oror13 = or i1 %eq, %eq12
  store i1 %oror13, i1* %oror9, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror9, align 1
  store i1 %oror_result_value, i1* %andand, align 1
  br i1 %oror_result_value, label %cond_jump_then14, label %cond_jump_end15

cond_jump_then14:                                 ; preds = %cond_jump_end
  %dbt16 = load i32, i32* %dbt, align 4
  %eq17 = icmp eq i32 %dbt16, 1
  %andand18 = and i1 %oror_result_value, %eq17
  store i1 %andand18, i1* %andand, align 1
  br label %cond_jump_end15

cond_jump_end15:                                  ; preds = %cond_jump_then14, %cond_jump_end
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror, align 1
  br i1 %andand_result_value, label %cond_jump_end20, label %cond_jump_then19

cond_jump_then19:                                 ; preds = %cond_jump_end15
  %sbt22 = load i32, i32* %sbt, align 4
  %eq23 = icmp eq i32 %sbt22, 0
  store i1 %eq23, i1* %andand21, align 1
  br i1 %eq23, label %cond_jump_then24, label %cond_jump_end25

cond_jump_end20:                                  ; preds = %cond_jump_end25, %cond_jump_end15
  %oror_result_value31 = load i1, i1* %oror, align 1
  br i1 %oror_result_value31, label %cond_jump_then32, label %cond_else_block

cond_jump_then24:                                 ; preds = %cond_jump_then19
  %dbt26 = load i32, i32* %dbt, align 4
  %eq27 = icmp eq i32 %dbt26, 2
  %andand28 = and i1 %eq23, %eq27
  store i1 %andand28, i1* %andand21, align 1
  br label %cond_jump_end25

cond_jump_end25:                                  ; preds = %cond_jump_then24, %cond_jump_then19
  %andand_result_value29 = load i1, i1* %andand21, align 1
  %oror30 = or i1 %andand_result_value, %andand_result_value29
  store i1 %oror30, i1* %oror, align 1
  br label %cond_jump_end20

cond_jump_then32:                                 ; preds = %cond_jump_end20
  store i32 1024, i32* %delayed_cast, align 4
  %vtop33 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL34 = getelementptr inbounds %SValue, %SValue* %vtop33, i32 0, i32 0
  %type35 = load %CType, %CType* %fieldLLL34, align 8
  %ft36 = load i32, i32* %ft, align 4
  %andtmp37 = and i32 %ft36, 63551
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL34, i32 0, i32 0
  store i32 %andtmp37, i32* %fieldTTT, align 4
  %ft38 = load i32, i32* %ft, align 4
  %andtmp39 = and i32 %ft38, 2048
  %icmpA = icmp ne i32 %andtmp39, 0
  br i1 %icmpA, label %cond_jump_then40, label %cond_end41

cond_else_block:                                  ; preds = %cond_jump_end20
  store i32 0, i32* %delayed_cast, align 4
  %ft42 = load i32, i32* %ft, align 4
  %andtmp43 = and i32 %ft42, 64
  %logical_denial = icmp eq i32 %andtmp43, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA44 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA44, label %cond_jump_then45, label %cond_end46

cond_end:                                         ; preds = %cond_end46, %cond_end41
  %sbt53 = load i32, i32* %sbt, align 4
  %eq54 = icmp eq i32 %sbt53, 7
  br i1 %eq54, label %cond_jump_then55, label %cond_jump_elif0

cond_jump_then40:                                 ; preds = %cond_jump_then32
  call void (i8*, ...) @warning(i8* bitcast ([33 x i8]* @131 to i8*))
  br label %cond_end41

cond_end41:                                       ; preds = %cond_jump_then40, %cond_jump_then32
  br label %cond_end

cond_jump_then45:                                 ; preds = %cond_else_block
  %vtop47 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB48 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY49 = getelementptr inbounds %SValue, %SValue* %element_addressAB48, i32 -1
  %load_element50 = load %SValue, %SValue* %element_addressXYXZY49, align 16
  %fieldVVV51 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY49, i32 0, i32 0
  %type52 = load %CType, %CType* %fieldVVV51, align 8
  call void @gen_assign_cast(%CType* %fieldVVV51)
  br label %cond_end46

cond_end46:                                       ; preds = %cond_jump_then45, %cond_else_block
  br label %cond_end

cond_jump_then55:                                 ; preds = %cond_end
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  %logical_denial58 = icmp eq i32 %nocode_wanted, 0
  %castOOOO59 = zext i1 %logical_denial58 to i32
  %icmpA60 = icmp ne i32 %castOOOO59, 0
  br i1 %icmpA60, label %cond_jump_then61, label %cond_else_block62

cond_jump_elif0:                                  ; preds = %cond_end
  %ft82 = load i32, i32* %ft, align 4
  %andtmp83 = and i32 %ft82, 64
  %icmpA84 = icmp ne i32 %andtmp83, 0
  br i1 %icmpA84, label %cond_jump_elif_then0, label %cond_else_block56

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %ft85 = load i32, i32* %ft, align 4
  %rshifttmp = lshr i32 %ft85, 16
  %andtmp86 = and i32 %rshifttmp, 63
  store i32 %andtmp86, i32* %bit_pos, align 4
  %ft87 = load i32, i32* %ft, align 4
  %rshifttmp88 = lshr i32 %ft87, 22
  %andtmp89 = and i32 %rshifttmp88, 63
  store i32 %andtmp89, i32* %bit_size, align 4
  %vtop90 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB91 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY92 = getelementptr inbounds %SValue, %SValue* %element_addressAB91, i32 -1
  %load_element93 = load %SValue, %SValue* %element_addressXYXZY92, align 16
  %fieldVVV94 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY92, i32 0, i32 0
  %type95 = load %CType, %CType* %fieldVVV94, align 8
  %ft96 = load i32, i32* %ft, align 4
  %andtmp97 = and i32 %ft96, 65471
  %fieldTTT98 = getelementptr inbounds %CType, %CType* %fieldVVV94, i32 0, i32 0
  store i32 %andtmp97, i32* %fieldTTT98, align 4
  call void @gv_dup()
  call void @vswap()
  call void @vrott(i32 3)
  %ft99 = load i32, i32* %ft, align 4
  %andtmp100 = and i32 %ft99, 15
  %eq101 = icmp eq i32 %andtmp100, 11
  br i1 %eq101, label %cond_jump_then102, label %cond_end103

cond_else_block56:                                ; preds = %cond_jump_elif0
  %nocode_wanted166 = load i32, i32* @nocode_wanted, align 4
  %logical_denial167 = icmp eq i32 %nocode_wanted166, 0
  %castOOOO168 = zext i1 %logical_denial167 to i32
  %icmpA169 = icmp ne i32 %castOOOO168, 0
  br i1 %icmpA169, label %cond_jump_then170, label %cond_end171

cond_end57:                                       ; preds = %cond_end171, %cond_end152, %cond_end63
  ret void

cond_jump_then61:                                 ; preds = %cond_jump_then55
  %vtop64 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL65 = getelementptr inbounds %SValue, %SValue* %vtop64, i32 0, i32 0
  %type66 = load %CType, %CType* %fieldLLL65, align 8
  %align67 = load i32, i32* %align, align 4
  %fun_result = call i32 @type_size(%CType* %fieldLLL65, i32* %align)
  store i32 %fun_result, i32* %size, align 4
  %func_old_type = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 365)
  %vtop68 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop68 to i64
  %sub = sub i64 %ptrToIntI, 128
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  call void @vpushv(%SValue* %iintToPtrD)
  %vtop69 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL70 = getelementptr inbounds %SValue, %SValue* %vtop69, i32 0, i32 0
  %type71 = load %CType, %CType* %fieldLLL70, align 8
  %fieldTTT72 = getelementptr inbounds %CType, %CType* %fieldLLL70, i32 0, i32 0
  store i32 4, i32* %fieldTTT72, align 4
  call void @gaddrof()
  %vtop73 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI74 = ptrtoint %SValue* %vtop73 to i64
  %sub75 = sub i64 %ptrToIntI74, 128
  %iintToPtrD76 = inttoptr i64 %sub75 to %SValue*
  call void @vpushv(%SValue* %iintToPtrD76)
  %vtop77 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL78 = getelementptr inbounds %SValue, %SValue* %vtop77, i32 0, i32 0
  %type79 = load %CType, %CType* %fieldLLL78, align 8
  %fieldTTT80 = getelementptr inbounds %CType, %CType* %fieldLLL78, i32 0, i32 0
  store i32 4, i32* %fieldTTT80, align 4
  call void @gaddrof()
  %size81 = load i32, i32* %size, align 4
  call void @vpushi(i32 %size81)
  call void @gfunc_call(i32 3)
  call void @vswap()
  call void @vpop()
  br label %cond_end63

cond_else_block62:                                ; preds = %cond_jump_then55
  call void @vswap()
  call void @vpop()
  br label %cond_end63

cond_end63:                                       ; preds = %cond_else_block62, %cond_jump_then61
  br label %cond_end57

cond_jump_then102:                                ; preds = %cond_jump_elif_then0
  %vtop104 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB105 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY106 = getelementptr inbounds %SValue, %SValue* %element_addressAB105, i32 -1
  %load_element107 = load %SValue, %SValue* %element_addressXYXZY106, align 16
  %fieldVVV108 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY106, i32 0, i32 0
  %type109 = load %CType, %CType* %fieldVVV108, align 8
  call void @gen_cast(%CType* %fieldVVV108)
  %vtop110 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB111 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY112 = getelementptr inbounds %SValue, %SValue* %element_addressAB111, i32 -1
  %load_element113 = load %SValue, %SValue* %element_addressXYXZY112, align 16
  %fieldVVV114 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY112, i32 0, i32 0
  %type115 = load %CType, %CType* %fieldVVV114, align 8
  %vtop116 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB117 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY118 = getelementptr inbounds %SValue, %SValue* %element_addressAB117, i32 -1
  %load_element119 = load %SValue, %SValue* %element_addressXYXZY118, align 16
  %fieldVVV120 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY118, i32 0, i32 0
  %type121 = load %CType, %CType* %fieldVVV120, align 8
  %fieldVVV122 = getelementptr inbounds %CType, %CType* %fieldVVV120, i32 0, i32 0
  %t123 = load i32, i32* %fieldVVV122, align 4
  %andtmp124 = and i32 %t123, -16
  %ortmp = or i32 %andtmp124, 17
  %fieldTTT125 = getelementptr inbounds %CType, %CType* %fieldVVV114, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTTT125, align 4
  br label %cond_end103

cond_end103:                                      ; preds = %cond_jump_then102, %cond_jump_elif_then0
  call void @vdup()
  %vtop126 = load %SValue*, %SValue** @vtop, align 8
  %vtop127 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB128 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY129 = getelementptr inbounds %SValue, %SValue* %element_addressAB128, i32 -2
  %load_element130 = load %SValue, %SValue* %element_addressXYXZY129, align 16
  %element_addressXYXY = getelementptr %SValue, %SValue* %vtop126, i32 -1
  store %SValue %load_element130, %SValue* %element_addressXYXY, align 16
  %ft131 = load i32, i32* %ft, align 4
  %andtmp132 = and i32 %ft131, 15
  %not_eq = icmp ne i32 %andtmp132, 11
  br i1 %not_eq, label %cond_jump_then133, label %cond_end134

cond_jump_then133:                                ; preds = %cond_end103
  %ft135 = load i32, i32* %ft, align 4
  %andtmp136 = and i32 %ft135, 15
  %eq137 = icmp eq i32 %andtmp136, 12
  br i1 %eq137, label %cond_jump_then138, label %cond_else_block139

cond_end134:                                      ; preds = %cond_end140, %cond_end103
  %bit_pos146 = load i32, i32* %bit_pos, align 4
  call void @vpushi(i32 %bit_pos146)
  call void @gen_op(i32 1)
  call void @vswap()
  %ft147 = load i32, i32* %ft, align 4
  %andtmp148 = and i32 %ft147, 15
  %eq149 = icmp eq i32 %andtmp148, 12
  br i1 %eq149, label %cond_jump_then150, label %cond_else_block151

cond_jump_then138:                                ; preds = %cond_jump_then133
  %bit_size141 = load i32, i32* %bit_size, align 4
  %icastD = sext i32 %bit_size141 to i64
  %lshifttmp = shl i64 1, %icastD
  %sub142 = sub i64 %lshifttmp, 1
  call void @vpushll(i64 %sub142)
  br label %cond_end140

cond_else_block139:                               ; preds = %cond_jump_then133
  %bit_size143 = load i32, i32* %bit_size, align 4
  %lshifttmp144 = shl i32 1, %bit_size143
  %sub145 = sub i32 %lshifttmp144, 1
  call void @vpushi(i32 %sub145)
  br label %cond_end140

cond_end140:                                      ; preds = %cond_else_block139, %cond_jump_then138
  call void @gen_op(i32 38)
  br label %cond_end134

cond_jump_then150:                                ; preds = %cond_end134
  %bit_size153 = load i32, i32* %bit_size, align 4
  %icastD154 = sext i32 %bit_size153 to i64
  %lshifttmp155 = shl i64 1, %icastD154
  %sub156 = sub i64 %lshifttmp155, 1
  %bit_pos157 = load i32, i32* %bit_pos, align 4
  %icastD158 = sext i32 %bit_pos157 to i64
  %lshifttmp159 = shl i64 %sub156, %icastD158
  %xortmp = xor i64 %lshifttmp159, -1
  call void @vpushll(i64 %xortmp)
  br label %cond_end152

cond_else_block151:                               ; preds = %cond_end134
  %bit_size160 = load i32, i32* %bit_size, align 4
  %lshifttmp161 = shl i32 1, %bit_size160
  %sub162 = sub i32 %lshifttmp161, 1
  %bit_pos163 = load i32, i32* %bit_pos, align 4
  %lshifttmp164 = shl i32 %sub162, %bit_pos163
  %xortmp165 = xor i32 %lshifttmp164, -1
  call void @vpushi(i32 %xortmp165)
  br label %cond_end152

cond_end152:                                      ; preds = %cond_else_block151, %cond_jump_then150
  call void @gen_op(i32 38)
  call void @gen_op(i32 124)
  call void @vstore()
  call void @vpop()
  br label %cond_end57

cond_jump_then170:                                ; preds = %cond_else_block56
  store i32 1, i32* %rc, align 4
  %ft172 = load i32, i32* %ft, align 4
  store i32 2103, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.122, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end171:                                      ; preds = %cond_end212, %cond_else_block56
  call void @vswap()
  %vtop242 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI243 = ptrtoint %SValue* %vtop242 to i64
  %sub244 = sub i64 %ptrToIntI243, 64
  %iintToPtrD245 = inttoptr i64 %sub244 to %SValue*
  store %SValue* %iintToPtrD245, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD245 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  %vtop246 = load %SValue*, %SValue** @vtop, align 8
  %vtop247 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL248 = getelementptr inbounds %SValue, %SValue* %vtop247, i32 0, i32 1
  %r249 = load i16, i16* %fieldLLL248, align 2
  %delayed_cast250 = load i32, i32* %delayed_cast, align 4
  %icastKY251 = zext i16 %r249 to i32
  %ortmp252 = or i32 %icastKY251, %delayed_cast250
  %icastG253 = trunc i32 %ortmp252 to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop246, i32 0, i32 1
  store i16 %icastG253, i16* %fieldTU, align 2
  br label %cond_end57

is_float:                                         ; preds = %cond_jump_then170
  %inline_result_variable = alloca i32, align 4
  %t173 = alloca i32, align 4
  store i32 %ft172, i32* %t173, align 4
  %t174 = load i32, i32* %t173, align 4
  %andtmp175 = and i32 %t174, 15
  store i32 %andtmp175, i32* %bt, align 4
  %bt178 = load i32, i32* %bt, align 4
  %eq179 = icmp eq i32 %bt178, 10
  store i1 %eq179, i1* %oror177, align 1
  br i1 %eq179, label %cond_jump_end181, label %cond_jump_then180

is_float_end:                                     ; preds = %cond_jump_end187
  %inline_result_variable192 = load i32, i32* %inline_result_variable, align 4
  %icmpA193 = icmp ne i32 %inline_result_variable192, 0
  br i1 %icmpA193, label %cond_jump_then194, label %cond_end195

cond_jump_then180:                                ; preds = %is_float
  %bt182 = load i32, i32* %bt, align 4
  %eq183 = icmp eq i32 %bt182, 9
  %oror184 = or i1 %eq179, %eq183
  store i1 %oror184, i1* %oror177, align 1
  br label %cond_jump_end181

cond_jump_end181:                                 ; preds = %cond_jump_then180, %is_float
  %oror_result_value185 = load i1, i1* %oror177, align 1
  store i1 %oror_result_value185, i1* %oror176, align 1
  br i1 %oror_result_value185, label %cond_jump_end187, label %cond_jump_then186

cond_jump_then186:                                ; preds = %cond_jump_end181
  %bt188 = load i32, i32* %bt, align 4
  %eq189 = icmp eq i32 %bt188, 8
  %oror190 = or i1 %oror_result_value185, %eq189
  store i1 %oror190, i1* %oror176, align 1
  br label %cond_jump_end187

cond_jump_end187:                                 ; preds = %cond_jump_then186, %cond_jump_end181
  %oror_result_value191 = load i1, i1* %oror176, align 1
  %icastKX = zext i1 %oror_result_value191 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then194:                                ; preds = %is_float_end
  store i32 2, i32* %rc, align 4
  %ft196 = load i32, i32* %ft, align 4
  %andtmp197 = and i32 %ft196, 15
  %eq198 = icmp eq i32 %andtmp197, 10
  br i1 %eq198, label %cond_jump_then199, label %cond_end200

cond_end195:                                      ; preds = %cond_end200, %is_float_end
  %rc201 = load i32, i32* %rc, align 4
  %fun_result202 = call i32 @gv(i32 %rc201)
  store i32 %fun_result202, i32* %r, align 4
  %vtop203 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB204 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY205 = getelementptr inbounds %SValue, %SValue* %element_addressAB204, i32 -1
  %load_element206 = load %SValue, %SValue* %element_addressXYXZY205, align 16
  %fieldVVV207 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY205, i32 0, i32 1
  %r208 = load i16, i16* %fieldVVV207, align 2
  %icastKY = zext i16 %r208 to i32
  %andtmp209 = and i32 %icastKY, 255
  %eq210 = icmp eq i32 %andtmp209, 241
  br i1 %eq210, label %cond_jump_then211, label %cond_end212

cond_jump_then199:                                ; preds = %cond_jump_then194
  store i32 64, i32* %rc, align 4
  br label %cond_end200

cond_end200:                                      ; preds = %cond_jump_then199, %cond_jump_then194
  br label %cond_end195

cond_jump_then211:                                ; preds = %cond_end195
  %fun_result213 = call i32 @get_reg(i32 1)
  store i32 %fun_result213, i32* %t, align 4
  %sv214 = load %SValue, %SValue* %sv, align 16
  %fieldVVV215 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 0
  %type216 = load %CType, %CType* %fieldVVV215, align 8
  %fieldTTT217 = getelementptr inbounds %CType, %CType* %fieldVVV215, i32 0, i32 0
  store i32 4, i32* %fieldTTT217, align 4
  %sv218 = load %SValue, %SValue* %sv, align 16
  %fieldTTT219 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 1
  store i16 498, i16* %fieldTTT219, align 2
  %sv220 = load %SValue, %SValue* %sv, align 16
  %fieldVVV221 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldVVV221, align 16
  %vtop222 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB223 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY224 = getelementptr inbounds %SValue, %SValue* %element_addressAB223, i32 -1
  %load_element225 = load %SValue, %SValue* %element_addressXYXZY224, align 16
  %fieldVVV226 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY224, i32 0, i32 3
  %c227 = load %CValue, %CValue* %fieldVVV226, align 16
  %ICASTO = bitcast %CValue* %fieldVVV226 to i32*
  %ul = load i32, i32* %ICASTO, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldVVV221, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %ul, i32* %icastN, align 4
  %t228 = load i32, i32* %t, align 4
  %sv229 = load %SValue, %SValue* %sv, align 16
  call void @load(i32 %t228, %SValue* %sv)
  %vtop230 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB231 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY232 = getelementptr inbounds %SValue, %SValue* %element_addressAB231, i32 -1
  %load_element233 = load %SValue, %SValue* %element_addressXYXZY232, align 16
  %t234 = load i32, i32* %t, align 4
  %ortmp235 = or i32 %t234, 256
  %icastG = trunc i32 %ortmp235 to i16
  %fieldTTT236 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY232, i32 0, i32 1
  store i16 %icastG, i16* %fieldTTT236, align 2
  br label %cond_end212

cond_end212:                                      ; preds = %cond_jump_then211, %cond_end195
  %r237 = load i32, i32* %r, align 4
  %vtop238 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI239 = ptrtoint %SValue* %vtop238 to i64
  %sub240 = sub i64 %ptrToIntI239, 64
  %iintToPtrD241 = inttoptr i64 %sub240 to %SValue*
  call void @store(i32 %r237, %SValue* %iintToPtrD241)
  br label %cond_end171
}

declare %Sym* @sym_find(i32)

define internal %Sym* @sym_push(i32 %0, %CType* %1, i32 %2, i32 %3) {
entry:
  %andand = alloca i1, align 1
  %ts = alloca %TokenSym*, align 8
  %ps = alloca %Sym**, align 8
  %s = alloca %Sym*, align 8
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %type = alloca %CType*, align 8
  %type2 = alloca %CType**, align 8
  store %CType* %1, %CType** %type, align 8
  store %CType** %type, %CType*** %type2, align 8
  %r = alloca i32, align 4
  %r3 = alloca i32*, align 8
  store i32 %2, i32* %r, align 4
  store i32* %r, i32** %r3, align 8
  %c = alloca i32, align 4
  %c4 = alloca i32*, align 8
  store i32 %3, i32* %c, align 4
  store i32* %c, i32** %c4, align 8
  %local_stack = load %Sym*, %Sym** @local_stack, align 8
  %icmpB = icmp ne %Sym* %local_stack, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %local_stack5 = load %Sym*, %Sym** @local_stack, align 8
  store %Sym** @local_stack, %Sym*** %ps, align 8
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %global_stack = load %Sym*, %Sym** @global_stack, align 8
  store %Sym** @global_stack, %Sym*** %ps, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %ps6 = load %Sym**, %Sym*** %ps, align 8
  %v7 = load i32, i32* %v, align 4
  %type8 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type8, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %c9 = load i32, i32* %c, align 4
  %icastD = sext i32 %c9 to i64
  %fun_result = call %Sym* @sym_push2(%Sym** %ps6, i32 %v7, i32 %t, i64 %icastD)
  store %Sym* %fun_result, %Sym** %s, align 8
  %s10 = load %Sym*, %Sym** %s, align 8
  %fieldLLL11 = getelementptr inbounds %Sym, %Sym* %s10, i32 0, i32 3
  %type12 = load %CType, %CType* %fieldLLL11, align 8
  %type13 = load %CType*, %CType** %type, align 8
  %fieldLLL14 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL14, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL11, i32 0, i32 1
  store %Sym* %ref, %Sym** %fieldTTT, align 8
  %s15 = load %Sym*, %Sym** %s, align 8
  %r16 = load i32, i32* %r, align 4
  %icastD17 = sext i32 %r16 to i64
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s15, i32 0, i32 1
  store i64 %icastD17, i64* %fieldTU, align 4
  %v18 = load i32, i32* %v, align 4
  %andtmp = and i32 %v18, 536870912
  %logical_denial = icmp eq i32 %andtmp, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then19, label %cond_jump_end

cond_jump_then19:                                 ; preds = %cond_end
  %v20 = load i32, i32* %v, align 4
  %andtmp21 = and i32 %v20, -1073741825
  %le = icmp slt i32 %andtmp21, 268435456
  %andand22 = and i1 %icmpA, %le
  store i1 %andand22, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then19, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then23, label %cond_end24

cond_jump_then23:                                 ; preds = %cond_jump_end
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v25 = load i32, i32* %v, align 4
  %andtmp26 = and i32 %v25, -1073741825
  %sub = sub i32 %andtmp26, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  store %TokenSym* %load_element, %TokenSym** %ts, align 8
  %v27 = load i32, i32* %v, align 4
  %andtmp28 = and i32 %v27, 1073741824
  %icmpA29 = icmp ne i32 %andtmp28, 0
  br i1 %icmpA29, label %cond_jump_then30, label %cond_else_block31

cond_end24:                                       ; preds = %cond_end32, %cond_jump_end
  %s42 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s42

cond_jump_then30:                                 ; preds = %cond_jump_then23
  %ts33 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL34 = getelementptr inbounds %TokenSym, %TokenSym* %ts33, i32 0, i32 3
  %sym_struct = load %Sym*, %Sym** %fieldLLL34, align 8
  store %Sym** %fieldLLL34, %Sym*** %ps, align 8
  br label %cond_end32

cond_else_block31:                                ; preds = %cond_jump_then23
  %ts35 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL36 = getelementptr inbounds %TokenSym, %TokenSym* %ts35, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL36, align 8
  store %Sym** %fieldLLL36, %Sym*** %ps, align 8
  br label %cond_end32

cond_end32:                                       ; preds = %cond_else_block31, %cond_jump_then30
  %s37 = load %Sym*, %Sym** %s, align 8
  %ps38 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB = load %Sym*, %Sym** %ps38, align 8
  %fieldTU39 = getelementptr inbounds %Sym, %Sym* %s37, i32 0, i32 6
  store %Sym* %derefference_valueB, %Sym** %fieldTU39, align 8
  %ps40 = load %Sym**, %Sym*** %ps, align 8
  %s41 = load %Sym*, %Sym** %s, align 8
  store %Sym* %s41, %Sym** %ps40, align 8
  br label %cond_end24
}

define internal i32 @type_size(%CType* %0, i32* %1) {
entry:
  %oror57 = alloca i1, align 1
  %oror56 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %ts = alloca i32, align 4
  %bt = alloca i32, align 4
  %s = alloca %Sym*, align 8
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %a = alloca i32*, align 8
  %a2 = alloca i32**, align 8
  store i32* %1, i32** %a, align 8
  store i32** %a, i32*** %a2, align 8
  %type3 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type3, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %andtmp = and i32 %t, 15
  store i32 %andtmp, i32* %bt, align 4
  %bt4 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt4, 7
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  %type5 = load %CType*, %CType** %type, align 8
  %fieldLLL6 = getelementptr inbounds %CType, %CType* %type5, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL6, align 8
  store %Sym* %ref, %Sym** %s, align 8
  %a7 = load i32*, i32** %a, align 8
  %s8 = load %Sym*, %Sym** %s, align 8
  %fieldLLL9 = getelementptr inbounds %Sym, %Sym* %s8, i32 0, i32 1
  %r = load i64, i64* %fieldLLL9, align 4
  %icastM = trunc i64 %r to i32
  store i32 %icastM, i32* %a7, align 4
  %s10 = load %Sym*, %Sym** %s, align 8
  %fieldLLL11 = getelementptr inbounds %Sym, %Sym* %s10, i32 0, i32 2
  %c = load i64, i64* %fieldLLL11, align 4
  %icastM12 = trunc i64 %c to i32
  ret i32 %icastM12

cond_jump_elif0:                                  ; preds = %entry
  %bt13 = load i32, i32* %bt, align 4
  %eq14 = icmp eq i32 %bt13, 4
  br i1 %eq14, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %type15 = load %CType*, %CType** %type, align 8
  %fieldLLL16 = getelementptr inbounds %CType, %CType* %type15, i32 0, i32 0
  %t17 = load i32, i32* %fieldLLL16, align 4
  %andtmp18 = and i32 %t17, 32
  %icmpA = icmp ne i32 %andtmp18, 0
  br i1 %icmpA, label %cond_jump_then19, label %cond_else_block20

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %bt45 = load i32, i32* %bt, align 4
  %eq46 = icmp eq i32 %bt45, 10
  br i1 %eq46, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %a47 = load i32*, i32** %a, align 8
  store i32 8, i32* %a47, align 4
  ret i32 16

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %bt48 = load i32, i32* %bt, align 4
  %eq49 = icmp eq i32 %bt48, 9
  store i1 %eq49, i1* %oror, align 1
  br i1 %eq49, label %cond_jump_end51, label %cond_jump_then50

cond_jump_elif_then2:                             ; preds = %cond_jump_end51
  %a55 = load i32*, i32** %a, align 8
  store i32 8, i32* %a55, align 4
  ret i32 8

cond_jump_elif3:                                  ; preds = %cond_jump_end51
  %bt58 = load i32, i32* %bt, align 4
  %eq59 = icmp eq i32 %bt58, 0
  store i1 %eq59, i1* %oror57, align 1
  br i1 %eq59, label %cond_jump_end61, label %cond_jump_then60

cond_jump_elif_then3:                             ; preds = %cond_jump_end67
  %a72 = load i32*, i32** %a, align 8
  store i32 4, i32* %a72, align 4
  ret i32 4

cond_jump_elif4:                                  ; preds = %cond_jump_end67
  %bt73 = load i32, i32* %bt, align 4
  %eq74 = icmp eq i32 %bt73, 2
  br i1 %eq74, label %cond_jump_elif_then4, label %cond_else_block

cond_jump_elif_then4:                             ; preds = %cond_jump_elif4
  %a75 = load i32*, i32** %a, align 8
  store i32 2, i32* %a75, align 4
  ret i32 2

cond_else_block:                                  ; preds = %cond_jump_elif4
  %a76 = load i32*, i32** %a, align 8
  store i32 1, i32* %a76, align 4
  ret i32 1

cond_end:                                         ; preds = %cond_end21
  ret i32 0

cond_jump_then19:                                 ; preds = %cond_jump_elif_then0
  %type22 = load %CType*, %CType** %type, align 8
  %fieldLLL23 = getelementptr inbounds %CType, %CType* %type22, i32 0, i32 1
  %ref24 = load %Sym*, %Sym** %fieldLLL23, align 8
  store %Sym* %ref24, %Sym** %s, align 8
  %s25 = load %Sym*, %Sym** %s, align 8
  %fieldLLL26 = getelementptr inbounds %Sym, %Sym* %s25, i32 0, i32 3
  %type27 = load %CType, %CType* %fieldLLL26, align 8
  %a28 = load i32*, i32** %a, align 8
  %fun_result = call i32 @type_size(%CType* %fieldLLL26, i32* %a28)
  store i32 %fun_result, i32* %ts, align 4
  %ts29 = load i32, i32* %ts, align 4
  %le = icmp slt i32 %ts29, 0
  store i1 %le, i1* %andand, align 1
  br i1 %le, label %cond_jump_then30, label %cond_jump_end

cond_else_block20:                                ; preds = %cond_jump_elif_then0
  %a44 = load i32*, i32** %a, align 8
  store i32 8, i32* %a44, align 4
  ret i32 8

cond_end21:                                       ; No predecessors!
  br label %cond_end

cond_jump_then30:                                 ; preds = %cond_jump_then19
  %s31 = load %Sym*, %Sym** %s, align 8
  %fieldLLL32 = getelementptr inbounds %Sym, %Sym* %s31, i32 0, i32 2
  %c33 = load i64, i64* %fieldLLL32, align 4
  %le34 = icmp slt i64 %c33, 0
  %andand35 = and i1 %le, %le34
  store i1 %andand35, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then30, %cond_jump_then19
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then36, label %cond_end37

cond_jump_then36:                                 ; preds = %cond_jump_end
  %ts38 = load i32, i32* %ts, align 4
  %sub = sub i32 0, %ts38
  store i32 %sub, i32* %ts, align 4
  br label %cond_end37

cond_end37:                                       ; preds = %cond_jump_then36, %cond_jump_end
  %ts39 = load i32, i32* %ts, align 4
  %s40 = load %Sym*, %Sym** %s, align 8
  %fieldLLL41 = getelementptr inbounds %Sym, %Sym* %s40, i32 0, i32 2
  %c42 = load i64, i64* %fieldLLL41, align 4
  %icastD = sext i32 %ts39 to i64
  %mul = mul i64 %icastD, %c42
  %icastM43 = trunc i64 %mul to i32
  ret i32 %icastM43

cond_jump_then50:                                 ; preds = %cond_jump_elif2
  %bt52 = load i32, i32* %bt, align 4
  %eq53 = icmp eq i32 %bt52, 12
  %oror54 = or i1 %eq49, %eq53
  store i1 %oror54, i1* %oror, align 1
  br label %cond_jump_end51

cond_jump_end51:                                  ; preds = %cond_jump_then50, %cond_jump_elif2
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then2, label %cond_jump_elif3

cond_jump_then60:                                 ; preds = %cond_jump_elif3
  %bt62 = load i32, i32* %bt, align 4
  %eq63 = icmp eq i32 %bt62, 5
  %oror64 = or i1 %eq59, %eq63
  store i1 %oror64, i1* %oror57, align 1
  br label %cond_jump_end61

cond_jump_end61:                                  ; preds = %cond_jump_then60, %cond_jump_elif3
  %oror_result_value65 = load i1, i1* %oror57, align 1
  store i1 %oror_result_value65, i1* %oror56, align 1
  br i1 %oror_result_value65, label %cond_jump_end67, label %cond_jump_then66

cond_jump_then66:                                 ; preds = %cond_jump_end61
  %bt68 = load i32, i32* %bt, align 4
  %eq69 = icmp eq i32 %bt68, 8
  %oror70 = or i1 %oror_result_value65, %eq69
  store i1 %oror70, i1* %oror56, align 1
  br label %cond_jump_end67

cond_jump_end67:                                  ; preds = %cond_jump_then66, %cond_jump_end61
  %oror_result_value71 = load i1, i1* %oror56, align 1
  br i1 %oror_result_value71, label %cond_jump_elif_then3, label %cond_jump_elif4
}

define internal i32 @pointed_size(%CType* %0) {
entry:
  %align = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %type2 = load %CType*, %CType** %type, align 8
  store i32 1195, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.103, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

pointed_type:                                     ; preds = %entry
  %inline_result_variable = alloca %CType*, align 8
  %type3 = alloca %CType*, align 8
  store %CType* %type2, %CType** %type3, align 8
  %type4 = load %CType*, %CType** %type3, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type4, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL, align 8
  %fieldLLL5 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 3
  %type6 = load %CType, %CType* %fieldLLL5, align 8
  store %CType* %fieldLLL5, %CType** %inline_result_variable, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable7 = load %CType*, %CType** %inline_result_variable, align 8
  %align8 = load i32, i32* %align, align 4
  %fun_result = call i32 @type_size(%CType* %inline_result_variable7, i32* %align)
  ret i32 %fun_result
}

define internal i32 @lvalue_type(i32 %0) {
entry:
  %oror = alloca i1, align 1
  %r = alloca i32, align 4
  %bt = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  store i32 256, i32* %r, align 4
  %t2 = load i32, i32* %t, align 4
  %andtmp = and i32 %t2, 15
  store i32 %andtmp, i32* %bt, align 4
  %bt3 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt3, 1
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %bt4 = load i32, i32* %bt, align 4
  %eq5 = icmp eq i32 %bt4, 11
  %oror6 = or i1 %eq, %eq5
  store i1 %oror6, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then7, label %cond_jump_elif0

cond_jump_then7:                                  ; preds = %cond_jump_end
  %r8 = load i32, i32* %r, align 4
  %ortmp = or i32 %r8, 4096
  store i32 %ortmp, i32* %r, align 4
  br label %cond_end

cond_jump_elif0:                                  ; preds = %cond_jump_end
  %bt9 = load i32, i32* %bt, align 4
  %eq10 = icmp eq i32 %bt9, 2
  br i1 %eq10, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %r11 = load i32, i32* %r, align 4
  %ortmp12 = or i32 %r11, 8192
  store i32 %ortmp12, i32* %r, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %cond_jump_elif0
  %r13 = load i32, i32* %r, align 4
  ret i32 %r13

cond_end:                                         ; preds = %cond_jump_elif_then0, %cond_jump_then7
  %t14 = load i32, i32* %t, align 4
  %andtmp15 = and i32 %t14, 16
  %icmpA = icmp ne i32 %andtmp15, 0
  br i1 %icmpA, label %cond_jump_then16, label %cond_end17

cond_jump_then16:                                 ; preds = %cond_end
  %r18 = load i32, i32* %r, align 4
  %ortmp19 = or i32 %r18, 16384
  store i32 %ortmp19, i32* %r, align 4
  br label %cond_end17

cond_end17:                                       ; preds = %cond_jump_then16, %cond_end
  %r20 = load i32, i32* %r, align 4
  ret i32 %r20
}

define internal i32 @parse_btype(%CType* %0, %AttributeDef* %1) {
entry:
  %oror181 = alloca i1, align 1
  %oror = alloca i1, align 1
  %type13 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type13 to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %s = alloca %Sym*, align 8
  %typedef_found = alloca i32, align 4
  %typespec_found = alloca i32, align 4
  %type_found = alloca i32, align 4
  %u = alloca i32, align 4
  %t = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %ad = alloca %AttributeDef*, align 8
  %ad2 = alloca %AttributeDef**, align 8
  store %AttributeDef* %1, %AttributeDef** %ad, align 8
  store %AttributeDef** %ad, %AttributeDef*** %ad2, align 8
  %ad4 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %castAQ = bitcast %AttributeDef* %ad4 to i8*
  %fun_result = call i8* @memset(i8* %castAQ, i32 0, i64 24)
  store i32 0, i32* %type_found, align 4
  store i32 0, i32* %typespec_found, align 4
  store i32 0, i32* %typedef_found, align 4
  store i32 0, i32* %t, align 4
  br label %loop_top_block

loop_top_block:                                   ; preds = %end_blockX, %cond_then_block5, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %tok = load i32, i32* @tok, align 4
  %eqtmp = icmp eq i32 %tok, 291
  br i1 %eqtmp, label %cond_then_block5, label %cond_else_blockX

cond_end_block:                                   ; preds = %loop_top_block
  br label %parse_btype.the_end

end_blockX:                                       ; preds = %cond_else_blockX165, %cond_end198, %cond_then_block149, %cond_then_block139, %cond_then_block133, %cond_then_block127, %cond_then_block121, %cond_then_block115, %cond_then_block103, %cond_then_block93, %cond_then_block83, %cond_then_block73, %cond_end53, %cond_end28, %cond_then_block18, %cond_end
  store i32 1, i32* %type_found, align 4
  br label %loop_top_block

cond_then_block5:                                 ; preds = %cond_then_block
  call void @next()
  br label %loop_top_block

cond_else_blockX:                                 ; preds = %cond_then_block
  %eqtmp8 = icmp eq i32 %tok, 258
  br i1 %eqtmp8, label %cond_then_block6, label %cond_else_blockX7

after_continue:                                   ; No predecessors!
  br label %cond_then_block6

cond_then_block6:                                 ; preds = %cond_else_blockX, %after_continue
  store i32 1, i32* %u, align 4
  br label %parse_btype.basic_type

cond_else_blockX7:                                ; preds = %after_break, %cond_else_blockX
  %eqtmp14 = icmp eq i32 %tok, 257
  br i1 %eqtmp14, label %cond_then_block12, label %cond_else_blockX13

parse_btype.basic_type:                           ; preds = %cond_then_block42, %cond_then_block39, %cond_then_block15, %cond_then_block12, %cond_then_block6
  call void @next()
  br label %parse_btype.basic_type1

parse_btype.basic_type1:                          ; preds = %parse_btype.basic_type2, %cond_else_block52, %cond_else_block, %parse_btype.basic_type
  %t9 = load i32, i32* %t, align 4
  %andtmp = and i32 %t9, 15
  %not_eq = icmp ne i32 %andtmp, 0
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %parse_btype.basic_type1
  call void (i8*, ...) @error(i8* bitcast ([21 x i8]* @146 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %parse_btype.basic_type1
  %t10 = load i32, i32* %t, align 4
  %u11 = load i32, i32* %u, align 4
  %ortmp = or i32 %t10, %u11
  store i32 %ortmp, i32* %t, align 4
  store i32 1, i32* %typespec_found, align 4
  br label %end_blockX

after_break:                                      ; No predecessors!
  br label %cond_else_blockX7
  br label %cond_else_blockX13

cond_then_block12:                                ; preds = %cond_else_blockX7
  store i32 3, i32* %u, align 4
  br label %parse_btype.basic_type
  br label %cond_then_block15

cond_else_blockX13:                               ; preds = %cond_else_blockX7, %after_break
  %eqtmp17 = icmp eq i32 %tok, 295
  br i1 %eqtmp17, label %cond_then_block15, label %cond_else_blockX16

cond_then_block15:                                ; preds = %cond_else_blockX13, %cond_then_block12
  store i32 2, i32* %u, align 4
  br label %parse_btype.basic_type
  br label %cond_then_block18

cond_else_blockX16:                               ; preds = %cond_else_blockX13
  %eqtmp20 = icmp eq i32 %tok, 256
  br i1 %eqtmp20, label %cond_then_block18, label %cond_else_blockX19

cond_then_block18:                                ; preds = %cond_else_blockX16, %cond_then_block15
  call void @next()
  store i32 1, i32* %typespec_found, align 4
  br label %end_blockX

cond_else_blockX19:                               ; preds = %after_break21, %cond_else_blockX16
  %eqtmp24 = icmp eq i32 %tok, 279
  br i1 %eqtmp24, label %cond_then_block22, label %cond_else_blockX23

after_break21:                                    ; No predecessors!
  br label %cond_else_blockX19
  br label %cond_else_blockX23

cond_then_block22:                                ; preds = %cond_else_blockX19
  call void @next()
  %t25 = load i32, i32* %t, align 4
  %andtmp26 = and i32 %t25, 15
  %eq = icmp eq i32 %andtmp26, 9
  br i1 %eq, label %cond_jump_then27, label %cond_jump_elif0

cond_else_blockX23:                               ; preds = %after_break38, %cond_else_blockX19, %after_break21
  %eqtmp41 = icmp eq i32 %tok, 294
  br i1 %eqtmp41, label %cond_then_block39, label %cond_else_blockX40

cond_jump_then27:                                 ; preds = %cond_then_block22
  %t29 = load i32, i32* %t, align 4
  %andtmp30 = and i32 %t29, -16
  %ortmp31 = or i32 %andtmp30, 10
  store i32 %ortmp31, i32* %t, align 4
  br label %cond_end28

cond_jump_elif0:                                  ; preds = %cond_then_block22
  %t32 = load i32, i32* %t, align 4
  %andtmp33 = and i32 %t32, 15
  %eq34 = icmp eq i32 %andtmp33, 13
  br i1 %eq34, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %t35 = load i32, i32* %t, align 4
  %andtmp36 = and i32 %t35, -16
  %ortmp37 = or i32 %andtmp36, 12
  store i32 %ortmp37, i32* %t, align 4
  br label %cond_end28

cond_else_block:                                  ; preds = %cond_jump_elif0
  store i32 13, i32* %u, align 4
  br label %parse_btype.basic_type1
  br label %cond_end28

cond_end28:                                       ; preds = %cond_else_block, %cond_jump_elif_then0, %cond_jump_then27
  br label %end_blockX

after_break38:                                    ; No predecessors!
  br label %cond_else_blockX23
  br label %cond_else_blockX40

cond_then_block39:                                ; preds = %cond_else_blockX23
  store i32 11, i32* %u, align 4
  br label %parse_btype.basic_type
  br label %cond_then_block42

cond_else_blockX40:                               ; preds = %cond_else_blockX23, %after_break38
  %eqtmp44 = icmp eq i32 %tok, 292
  br i1 %eqtmp44, label %cond_then_block42, label %cond_else_blockX43

cond_then_block42:                                ; preds = %cond_else_blockX40, %cond_then_block39
  store i32 8, i32* %u, align 4
  br label %parse_btype.basic_type
  br label %cond_then_block45

cond_else_blockX43:                               ; preds = %cond_else_blockX40
  %eqtmp47 = icmp eq i32 %tok, 293
  br i1 %eqtmp47, label %cond_then_block45, label %cond_else_blockX46

cond_then_block45:                                ; preds = %cond_else_blockX43, %cond_then_block42
  call void @next()
  %t48 = load i32, i32* %t, align 4
  %andtmp49 = and i32 %t48, 15
  %eq50 = icmp eq i32 %andtmp49, 13
  br i1 %eq50, label %cond_jump_then51, label %cond_else_block52

cond_else_blockX46:                               ; preds = %after_break57, %cond_else_blockX43
  %eqtmp60 = icmp eq i32 %tok, 300
  br i1 %eqtmp60, label %cond_then_block58, label %cond_else_blockX59

cond_jump_then51:                                 ; preds = %cond_then_block45
  %t54 = load i32, i32* %t, align 4
  %andtmp55 = and i32 %t54, -16
  %ortmp56 = or i32 %andtmp55, 10
  store i32 %ortmp56, i32* %t, align 4
  br label %cond_end53

cond_else_block52:                                ; preds = %cond_then_block45
  store i32 9, i32* %u, align 4
  br label %parse_btype.basic_type1
  br label %cond_end53

cond_end53:                                       ; preds = %cond_else_block52, %cond_jump_then51
  br label %end_blockX

after_break57:                                    ; No predecessors!
  br label %cond_else_blockX46
  br label %cond_else_blockX59

cond_then_block58:                                ; preds = %cond_else_blockX46
  %type161 = load %CType, %CType* %type13, align 8
  call void @struct_decl(%CType* %type13, i32 5)
  br label %parse_btype.basic_type2

cond_else_blockX59:                               ; preds = %cond_else_blockX46, %after_break57
  %eqtmp69 = icmp eq i32 %tok, 296
  br i1 %eqtmp69, label %cond_then_block67, label %cond_else_blockX68
  br label %cond_then_block67

parse_btype.basic_type2:                          ; preds = %cond_then_block156, %cond_then_block67, %cond_then_block58
  %type162 = load %CType, %CType* %type13, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t63 = load i32, i32* %fieldVVV, align 4
  store i32 %t63, i32* %u, align 4
  %type64 = load %CType*, %CType** %type, align 8
  %type165 = load %CType, %CType* %type13, align 8
  %fieldVVV66 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV66, align 8
  %fieldTU = getelementptr inbounds %CType, %CType* %type64, i32 0, i32 1
  store %Sym* %ref, %Sym** %fieldTU, align 8
  br label %parse_btype.basic_type1
  br label %cond_then_block67

cond_then_block67:                                ; preds = %cond_else_blockX68, %cond_else_blockX59, %cond_else_blockX59, %parse_btype.basic_type2
  %type172 = load %CType, %CType* %type13, align 8
  call void @struct_decl(%CType* %type13, i32 7)
  br label %parse_btype.basic_type2
  br label %cond_then_block73

cond_else_blockX68:                               ; preds = %cond_else_blockX59
  %eqtmp71 = icmp eq i32 %tok, 297
  br i1 %eqtmp71, label %cond_then_block67, label %cond_else_blockX70

cond_else_blockX70:                               ; preds = %cond_else_blockX68
  %eqtmp75 = icmp eq i32 %tok, 273
  br i1 %eqtmp75, label %cond_then_block73, label %cond_else_blockX74
  br label %cond_then_block73

cond_then_block73:                                ; preds = %cond_else_blockX76, %cond_else_blockX74, %cond_else_blockX74, %cond_else_blockX70, %cond_else_blockX70, %cond_then_block67
  %t80 = load i32, i32* %t, align 4
  %ortmp81 = or i32 %t80, 2048
  store i32 %ortmp81, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX74:                               ; preds = %cond_else_blockX70
  %eqtmp77 = icmp eq i32 %tok, 274
  br i1 %eqtmp77, label %cond_then_block73, label %cond_else_blockX76
  br label %cond_then_block73

cond_else_blockX76:                               ; preds = %cond_else_blockX74
  %eqtmp79 = icmp eq i32 %tok, 275
  br i1 %eqtmp79, label %cond_then_block73, label %cond_else_blockX78

cond_else_blockX78:                               ; preds = %after_break82, %cond_else_blockX76
  %eqtmp85 = icmp eq i32 %tok, 276
  br i1 %eqtmp85, label %cond_then_block83, label %cond_else_blockX84
  br label %cond_else_blockX86

after_break82:                                    ; No predecessors!
  br label %cond_else_blockX78
  br label %cond_else_blockX84

cond_then_block83:                                ; preds = %cond_else_blockX86, %cond_else_blockX84, %cond_else_blockX78
  %t90 = load i32, i32* %t, align 4
  %ortmp91 = or i32 %t90, 4096
  store i32 %ortmp91, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX84:                               ; preds = %cond_else_blockX78, %after_break82
  %eqtmp87 = icmp eq i32 %tok, 277
  br i1 %eqtmp87, label %cond_then_block83, label %cond_else_blockX86
  br label %cond_else_blockX88

cond_else_blockX86:                               ; preds = %cond_else_blockX84, %cond_else_blockX78
  %eqtmp89 = icmp eq i32 %tok, 278
  br i1 %eqtmp89, label %cond_then_block83, label %cond_else_blockX88

cond_else_blockX88:                               ; preds = %after_break92, %cond_else_blockX86, %cond_else_blockX84
  %eqtmp95 = icmp eq i32 %tok, 281
  br i1 %eqtmp95, label %cond_then_block93, label %cond_else_blockX94
  br label %cond_else_blockX96

after_break92:                                    ; No predecessors!
  br label %cond_else_blockX88
  br label %cond_else_blockX94

cond_then_block93:                                ; preds = %cond_else_blockX96, %cond_else_blockX94, %cond_else_blockX88
  store i32 1, i32* %typespec_found, align 4
  %t100 = load i32, i32* %t, align 4
  %ortmp101 = or i32 %t100, 8192
  store i32 %ortmp101, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX94:                               ; preds = %cond_else_blockX88, %after_break92
  %eqtmp97 = icmp eq i32 %tok, 282
  br i1 %eqtmp97, label %cond_then_block93, label %cond_else_blockX96
  br label %cond_else_blockX98

cond_else_blockX96:                               ; preds = %cond_else_blockX94, %cond_else_blockX88
  %eqtmp99 = icmp eq i32 %tok, 283
  br i1 %eqtmp99, label %cond_then_block93, label %cond_else_blockX98

cond_else_blockX98:                               ; preds = %after_break102, %cond_else_blockX96, %cond_else_blockX94
  %eqtmp105 = icmp eq i32 %tok, 280
  br i1 %eqtmp105, label %cond_then_block103, label %cond_else_blockX104
  br label %cond_else_blockX106

after_break102:                                   ; No predecessors!
  br label %cond_else_blockX98
  br label %cond_else_blockX104

cond_then_block103:                               ; preds = %cond_else_blockX110, %cond_else_blockX108, %cond_else_blockX106, %cond_else_blockX104, %cond_else_blockX98
  call void @next()
  br label %end_blockX

cond_else_blockX104:                              ; preds = %cond_else_blockX98, %after_break102
  %eqtmp107 = icmp eq i32 %tok, 284
  br i1 %eqtmp107, label %cond_then_block103, label %cond_else_blockX106
  br label %cond_else_blockX108

cond_else_blockX106:                              ; preds = %cond_else_blockX104, %cond_else_blockX98
  %eqtmp109 = icmp eq i32 %tok, 288
  br i1 %eqtmp109, label %cond_then_block103, label %cond_else_blockX108
  br label %cond_else_blockX110

cond_else_blockX108:                              ; preds = %cond_else_blockX106, %cond_else_blockX104
  %eqtmp111 = icmp eq i32 %tok, 289
  br i1 %eqtmp111, label %cond_then_block103, label %cond_else_blockX110
  br label %cond_else_blockX112

cond_else_blockX110:                              ; preds = %cond_else_blockX108, %cond_else_blockX106
  %eqtmp113 = icmp eq i32 %tok, 290
  br i1 %eqtmp113, label %cond_then_block103, label %cond_else_blockX112

cond_else_blockX112:                              ; preds = %after_break114, %cond_else_blockX110, %cond_else_blockX108
  %eqtmp117 = icmp eq i32 %tok, 267
  br i1 %eqtmp117, label %cond_then_block115, label %cond_else_blockX116

after_break114:                                   ; No predecessors!
  br label %cond_else_blockX112
  br label %cond_else_blockX116

cond_then_block115:                               ; preds = %cond_else_blockX112
  %t118 = load i32, i32* %t, align 4
  %ortmp119 = or i32 %t118, 16
  store i32 %ortmp119, i32* %t, align 4
  call void @next()
  store i32 1, i32* %typespec_found, align 4
  br label %end_blockX

cond_else_blockX116:                              ; preds = %after_break120, %cond_else_blockX112, %after_break114
  %eqtmp123 = icmp eq i32 %tok, 265
  br i1 %eqtmp123, label %cond_then_block121, label %cond_else_blockX122

after_break120:                                   ; No predecessors!
  br label %cond_else_blockX116
  br label %cond_else_blockX122

cond_then_block121:                               ; preds = %cond_else_blockX116
  %t124 = load i32, i32* %t, align 4
  %ortmp125 = or i32 %t124, 128
  store i32 %ortmp125, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX122:                              ; preds = %after_break126, %cond_else_blockX116, %after_break120
  %eqtmp129 = icmp eq i32 %tok, 266
  br i1 %eqtmp129, label %cond_then_block127, label %cond_else_blockX128

after_break126:                                   ; No predecessors!
  br label %cond_else_blockX122
  br label %cond_else_blockX128

cond_then_block127:                               ; preds = %cond_else_blockX122
  %t130 = load i32, i32* %t, align 4
  %ortmp131 = or i32 %t130, 256
  store i32 %ortmp131, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX128:                              ; preds = %after_break132, %cond_else_blockX122, %after_break126
  %eqtmp135 = icmp eq i32 %tok, 298
  br i1 %eqtmp135, label %cond_then_block133, label %cond_else_blockX134

after_break132:                                   ; No predecessors!
  br label %cond_else_blockX128
  br label %cond_else_blockX134

cond_then_block133:                               ; preds = %cond_else_blockX128
  %t136 = load i32, i32* %t, align 4
  %ortmp137 = or i32 %t136, 512
  store i32 %ortmp137, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX134:                              ; preds = %after_break138, %cond_else_blockX128, %after_break132
  %eqtmp141 = icmp eq i32 %tok, 285
  br i1 %eqtmp141, label %cond_then_block139, label %cond_else_blockX140
  br label %cond_else_blockX142

after_break138:                                   ; No predecessors!
  br label %cond_else_blockX134
  br label %cond_else_blockX140

cond_then_block139:                               ; preds = %cond_else_blockX142, %cond_else_blockX140, %cond_else_blockX134
  %t146 = load i32, i32* %t, align 4
  %ortmp147 = or i32 %t146, 1024
  store i32 %ortmp147, i32* %t, align 4
  call void @next()
  br label %end_blockX

cond_else_blockX140:                              ; preds = %cond_else_blockX134, %after_break138
  %eqtmp143 = icmp eq i32 %tok, 286
  br i1 %eqtmp143, label %cond_then_block139, label %cond_else_blockX142
  br label %cond_else_blockX144

cond_else_blockX142:                              ; preds = %cond_else_blockX140, %cond_else_blockX134
  %eqtmp145 = icmp eq i32 %tok, 287
  br i1 %eqtmp145, label %cond_then_block139, label %cond_else_blockX144

cond_else_blockX144:                              ; preds = %after_break148, %cond_else_blockX142, %cond_else_blockX140
  %eqtmp151 = icmp eq i32 %tok, 302
  br i1 %eqtmp151, label %cond_then_block149, label %cond_else_blockX150
  br label %cond_else_blockX152

after_break148:                                   ; No predecessors!
  br label %cond_else_blockX144
  br label %cond_else_blockX150

cond_then_block149:                               ; preds = %cond_else_blockX150, %cond_else_blockX144
  %ad154 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @parse_attribute(%AttributeDef* %ad154)
  br label %end_blockX

cond_else_blockX150:                              ; preds = %cond_else_blockX144, %after_break148
  %eqtmp153 = icmp eq i32 %tok, 303
  br i1 %eqtmp153, label %cond_then_block149, label %cond_else_blockX152

cond_else_blockX152:                              ; preds = %after_break155, %cond_else_blockX150, %cond_else_blockX144
  %eqtmp158 = icmp eq i32 %tok, 306
  br i1 %eqtmp158, label %cond_then_block156, label %cond_else_blockX157
  br label %cond_else_blockX159

after_break155:                                   ; No predecessors!
  br label %cond_else_blockX152
  br label %cond_else_blockX157

cond_then_block156:                               ; preds = %cond_else_blockX159, %cond_else_blockX157, %cond_else_blockX152
  call void @next()
  %type1163 = load %CType, %CType* %type13, align 8
  call void @parse_expr_type(%CType* %type13)
  br label %parse_btype.basic_type2
  br label %cond_then_block164

cond_else_blockX157:                              ; preds = %cond_else_blockX152, %after_break155
  %eqtmp160 = icmp eq i32 %tok, 307
  br i1 %eqtmp160, label %cond_then_block156, label %cond_else_blockX159
  br label %cond_else_blockX161

cond_else_blockX159:                              ; preds = %cond_else_blockX157, %cond_else_blockX152
  %eqtmp162 = icmp eq i32 %tok, 308
  br i1 %eqtmp162, label %cond_then_block156, label %cond_else_blockX161

cond_else_blockX161:                              ; preds = %cond_else_blockX159, %cond_else_blockX157
  br label %cond_then_block164

cond_then_block164:                               ; preds = %cond_else_blockX161, %cond_then_block156
  %typespec_found166 = load i32, i32* %typespec_found, align 4
  %icmpA = icmp ne i32 %typespec_found166, 0
  store i1 %icmpA, i1* %oror, align 1
  br i1 %icmpA, label %cond_jump_end, label %cond_jump_then167

cond_else_blockX165:                              ; preds = %after_break214
  br label %end_blockX

cond_jump_then167:                                ; preds = %cond_then_block164
  %typedef_found168 = load i32, i32* %typedef_found, align 4
  %icmpA169 = icmp ne i32 %typedef_found168, 0
  %oror170 = or i1 %icmpA, %icmpA169
  store i1 %oror170, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then167, %cond_then_block164
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then171, label %cond_end172

cond_jump_then171:                                ; preds = %cond_jump_end
  br label %parse_btype.the_end
  br label %cond_end172

cond_end172:                                      ; preds = %cond_jump_then171, %cond_jump_end
  %tok173 = load i32, i32* @tok, align 4
  store i32 2629, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.124, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_find

parse_btype.the_end:                              ; preds = %cond_end_block, %cond_jump_then197, %cond_jump_then171
  %t215 = load i32, i32* %t, align 4
  %andtmp216 = and i32 %t215, 8208
  %eq217 = icmp eq i32 %andtmp216, 8208
  br i1 %eq217, label %cond_jump_then218, label %cond_end219

sym_find:                                         ; preds = %cond_end172
  %inline_result_variable = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %tok173, i32* %v, align 4
  %v174 = load i32, i32* %v, align 4
  %sub = sub i32 %v174, 256
  store i32 %sub, i32* %v, align 4
  %add = add i32 %sub, 256
  %v175 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub176 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v175, %sub176
  br i1 %gteq_unsinged, label %cond_jump_then177, label %cond_end178

sym_find_end:                                     ; preds = %cond_end178, %cond_jump_then177
  %inline_result_variable180 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable180, %Sym** %s, align 8
  %s182 = load %Sym*, %Sym** %s, align 8
  %logical_denial = icmp eq %Sym* %s182, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA183 = icmp ne i32 %castOOOO, 0
  store i1 %icmpA183, i1* %oror181, align 1
  br i1 %icmpA183, label %cond_jump_end185, label %cond_jump_then184

cond_jump_then177:                                ; preds = %sym_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_end178:                                      ; preds = %sym_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v179 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v179
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_identifier, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_jump_then184:                                ; preds = %sym_find_end
  %s186 = load %Sym*, %Sym** %s, align 8
  %fieldLLL187 = getelementptr inbounds %Sym, %Sym* %s186, i32 0, i32 3
  %type188 = load %CType, %CType* %fieldLLL187, align 8
  %fieldVVV189 = getelementptr inbounds %CType, %CType* %fieldLLL187, i32 0, i32 0
  %t190 = load i32, i32* %fieldVVV189, align 4
  %andtmp191 = and i32 %t190, 512
  %logical_denial192 = icmp eq i32 %andtmp191, 0
  %castOOOO193 = zext i1 %logical_denial192 to i32
  %icmpA194 = icmp ne i32 %castOOOO193, 0
  %oror195 = or i1 %icmpA183, %icmpA194
  store i1 %oror195, i1* %oror181, align 1
  br label %cond_jump_end185

cond_jump_end185:                                 ; preds = %cond_jump_then184, %sym_find_end
  %oror_result_value196 = load i1, i1* %oror181, align 1
  br i1 %oror_result_value196, label %cond_jump_then197, label %cond_end198

cond_jump_then197:                                ; preds = %cond_jump_end185
  br label %parse_btype.the_end
  br label %cond_end198

cond_end198:                                      ; preds = %cond_jump_then197, %cond_jump_end185
  store i32 1, i32* %typedef_found, align 4
  %t199 = load i32, i32* %t, align 4
  %s200 = load %Sym*, %Sym** %s, align 8
  %fieldLLL201 = getelementptr inbounds %Sym, %Sym* %s200, i32 0, i32 3
  %type202 = load %CType, %CType* %fieldLLL201, align 8
  %fieldVVV203 = getelementptr inbounds %CType, %CType* %fieldLLL201, i32 0, i32 0
  %t204 = load i32, i32* %fieldVVV203, align 4
  %andtmp205 = and i32 %t204, -513
  %ortmp206 = or i32 %t199, %andtmp205
  store i32 %ortmp206, i32* %t, align 4
  %type207 = load %CType*, %CType** %type, align 8
  %s208 = load %Sym*, %Sym** %s, align 8
  %fieldLLL209 = getelementptr inbounds %Sym, %Sym* %s208, i32 0, i32 3
  %type210 = load %CType, %CType* %fieldLLL209, align 8
  %fieldVVV211 = getelementptr inbounds %CType, %CType* %fieldLLL209, i32 0, i32 1
  %ref212 = load %Sym*, %Sym** %fieldVVV211, align 8
  %fieldTU213 = getelementptr inbounds %CType, %CType* %type207, i32 0, i32 1
  store %Sym* %ref212, %Sym** %fieldTU213, align 8
  call void @next()
  store i32 1, i32* %typespec_found, align 4
  br label %end_blockX

after_break214:                                   ; No predecessors!
  br label %cond_else_blockX165

cond_jump_then218:                                ; preds = %parse_btype.the_end
  call void (i8*, ...) @error(i8* bitcast ([29 x i8]* @147 to i8*))
  br label %cond_end219

cond_end219:                                      ; preds = %cond_jump_then218, %parse_btype.the_end
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL220 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 34
  %char_is_unsigned = load i32, i32* %fieldLLL220, align 4
  %icmpA221 = icmp ne i32 %char_is_unsigned, 0
  br i1 %icmpA221, label %cond_jump_then222, label %cond_end223

cond_jump_then222:                                ; preds = %cond_end219
  %t224 = load i32, i32* %t, align 4
  %andtmp225 = and i32 %t224, 8223
  %eq226 = icmp eq i32 %andtmp225, 1
  br i1 %eq226, label %cond_jump_then227, label %cond_end228

cond_end223:                                      ; preds = %cond_end228, %cond_end219
  %t231 = load i32, i32* %t, align 4
  %andtmp232 = and i32 %t231, -8193
  store i32 %andtmp232, i32* %t, align 4
  %t233 = load i32, i32* %t, align 4
  %andtmp234 = and i32 %t233, 15
  %eq235 = icmp eq i32 %andtmp234, 13
  br i1 %eq235, label %cond_jump_then236, label %cond_end237

cond_jump_then227:                                ; preds = %cond_jump_then222
  %t229 = load i32, i32* %t, align 4
  %ortmp230 = or i32 %t229, 16
  store i32 %ortmp230, i32* %t, align 4
  br label %cond_end228

cond_end228:                                      ; preds = %cond_jump_then227, %cond_jump_then222
  br label %cond_end223

cond_jump_then236:                                ; preds = %cond_end223
  %t238 = load i32, i32* %t, align 4
  %andtmp239 = and i32 %t238, -16
  %ortmp240 = or i32 %andtmp239, 12
  store i32 %ortmp240, i32* %t, align 4
  br label %cond_end237

cond_end237:                                      ; preds = %cond_jump_then236, %cond_end223
  %type241 = load %CType*, %CType** %type, align 8
  %t242 = load i32, i32* %t, align 4
  %fieldTU243 = getelementptr inbounds %CType, %CType* %type241, i32 0, i32 0
  store i32 %t242, i32* %fieldTU243, align 4
  %type_found244 = load i32, i32* %type_found, align 4
  ret i32 %type_found244
}

define internal void @type_decl(%CType* %0, %AttributeDef* %1, i32* %2, i32 %3) {
entry:
  %oror80 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror46 = alloca i1, align 1
  %oror = alloca i1, align 1
  %qualifiers = alloca i32, align 4
  %type2 = alloca %CType*, align 8
  %type15 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type15 to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %s = alloca %Sym*, align 8
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %ad = alloca %AttributeDef*, align 8
  %ad2 = alloca %AttributeDef**, align 8
  store %AttributeDef* %1, %AttributeDef** %ad, align 8
  store %AttributeDef** %ad, %AttributeDef*** %ad2, align 8
  %v = alloca i32*, align 8
  %v3 = alloca i32**, align 8
  store i32* %2, i32** %v, align 8
  store i32** %v, i32*** %v3, align 8
  %td = alloca i32, align 4
  %td4 = alloca i32*, align 8
  store i32 %3, i32* %td, align 4
  store i32* %td, i32** %td4, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %end_blockX, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 42
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  store i32 0, i32* %qualifiers, align 4
  br label %type_decl.redo

cond_end_block:                                   ; preds = %loop_top_block
  %tok34 = load i32, i32* @tok, align 4
  %eq35 = icmp eq i32 %tok34, 302
  store i1 %eq35, i1* %oror, align 1
  br i1 %eq35, label %cond_jump_end, label %cond_jump_then

type_decl.redo:                                   ; preds = %cond_then_block22, %cond_then_block13, %cond_then_block7, %cond_then_block
  call void @next()
  %tok6 = load i32, i32* @tok, align 4
  %eqtmp = icmp eq i32 %tok6, 273
  br i1 %eqtmp, label %cond_then_block7, label %cond_else_blockX
  br label %cond_else_blockX8

end_blockX:                                       ; preds = %cond_else_blockX27
  %type29 = load %CType*, %CType** %type, align 8
  call void @mk_pointer(%CType* %type29)
  %type30 = load %CType*, %CType** %type, align 8
  %type31 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type31, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %qualifiers32 = load i32, i32* %qualifiers, align 4
  %ortmp33 = or i32 %t, %qualifiers32
  %fieldTU = getelementptr inbounds %CType, %CType* %type30, i32 0, i32 0
  store i32 %ortmp33, i32* %fieldTU, align 4
  br label %loop_top_block

cond_then_block7:                                 ; preds = %cond_else_blockX8, %cond_else_blockX, %type_decl.redo
  %qualifiers12 = load i32, i32* %qualifiers, align 4
  %ortmp = or i32 %qualifiers12, 2048
  store i32 %ortmp, i32* %qualifiers, align 4
  br label %type_decl.redo
  br label %cond_then_block13

cond_else_blockX:                                 ; preds = %type_decl.redo
  %eqtmp9 = icmp eq i32 %tok6, 274
  br i1 %eqtmp9, label %cond_then_block7, label %cond_else_blockX8
  br label %cond_else_blockX10

cond_else_blockX8:                                ; preds = %cond_else_blockX, %type_decl.redo
  %eqtmp11 = icmp eq i32 %tok6, 275
  br i1 %eqtmp11, label %cond_then_block7, label %cond_else_blockX10

cond_else_blockX10:                               ; preds = %cond_else_blockX8, %cond_else_blockX
  %eqtmp15 = icmp eq i32 %tok6, 276
  br i1 %eqtmp15, label %cond_then_block13, label %cond_else_blockX14
  br label %cond_then_block13

cond_then_block13:                                ; preds = %cond_else_blockX16, %cond_else_blockX14, %cond_else_blockX14, %cond_else_blockX10, %cond_else_blockX10, %cond_then_block7
  %qualifiers20 = load i32, i32* %qualifiers, align 4
  %ortmp21 = or i32 %qualifiers20, 4096
  store i32 %ortmp21, i32* %qualifiers, align 4
  br label %type_decl.redo
  br label %cond_then_block22

cond_else_blockX14:                               ; preds = %cond_else_blockX10
  %eqtmp17 = icmp eq i32 %tok6, 277
  br i1 %eqtmp17, label %cond_then_block13, label %cond_else_blockX16
  br label %cond_then_block13

cond_else_blockX16:                               ; preds = %cond_else_blockX14
  %eqtmp19 = icmp eq i32 %tok6, 278
  br i1 %eqtmp19, label %cond_then_block13, label %cond_else_blockX18

cond_else_blockX18:                               ; preds = %cond_else_blockX16
  %eqtmp24 = icmp eq i32 %tok6, 288
  br i1 %eqtmp24, label %cond_then_block22, label %cond_else_blockX23
  br label %cond_then_block22

cond_then_block22:                                ; preds = %cond_else_blockX25, %cond_else_blockX23, %cond_else_blockX23, %cond_else_blockX18, %cond_else_blockX18, %cond_then_block13
  br label %type_decl.redo
  br label %cond_else_blockX27

cond_else_blockX23:                               ; preds = %cond_else_blockX18
  %eqtmp26 = icmp eq i32 %tok6, 289
  br i1 %eqtmp26, label %cond_then_block22, label %cond_else_blockX25
  br label %cond_then_block22

cond_else_blockX25:                               ; preds = %cond_else_blockX23
  %eqtmp28 = icmp eq i32 %tok6, 290
  br i1 %eqtmp28, label %cond_then_block22, label %cond_else_blockX27

cond_else_blockX27:                               ; preds = %cond_then_block22, %cond_else_blockX25
  br label %end_blockX

cond_jump_then:                                   ; preds = %cond_end_block
  %tok36 = load i32, i32* @tok, align 4
  %eq37 = icmp eq i32 %tok36, 303
  %oror38 = or i1 %eq35, %eq37
  store i1 %oror38, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_end_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then39, label %cond_end

cond_jump_then39:                                 ; preds = %cond_jump_end
  %ad40 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @parse_attribute(%AttributeDef* %ad40)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then39, %cond_jump_end
  %type141 = load %CType, %CType* %type15, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %type15, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  %tok42 = load i32, i32* @tok, align 4
  %eq43 = icmp eq i32 %tok42, 40
  br i1 %eq43, label %cond_jump_then44, label %cond_else_block

cond_jump_then44:                                 ; preds = %cond_end
  call void @next()
  %tok47 = load i32, i32* @tok, align 4
  %eq48 = icmp eq i32 %tok47, 302
  store i1 %eq48, i1* %oror46, align 1
  br i1 %eq48, label %cond_jump_end50, label %cond_jump_then49

cond_else_block:                                  ; preds = %cond_end
  %tok62 = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok62, 256
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then63, label %cond_jump_end64

cond_end45:                                       ; preds = %cond_end69, %cond_end56
  %type78 = load %CType*, %CType** %type, align 8
  %ad79 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @post_type(%CType* %type78, %AttributeDef* %ad79)
  %tok81 = load i32, i32* @tok, align 4
  %eq82 = icmp eq i32 %tok81, 302
  store i1 %eq82, i1* %oror80, align 1
  br i1 %eq82, label %cond_jump_end84, label %cond_jump_then83

cond_jump_then49:                                 ; preds = %cond_jump_then44
  %tok51 = load i32, i32* @tok, align 4
  %eq52 = icmp eq i32 %tok51, 303
  %oror53 = or i1 %eq48, %eq52
  store i1 %oror53, i1* %oror46, align 1
  br label %cond_jump_end50

cond_jump_end50:                                  ; preds = %cond_jump_then49, %cond_jump_then44
  %oror_result_value54 = load i1, i1* %oror46, align 1
  br i1 %oror_result_value54, label %cond_jump_then55, label %cond_end56

cond_jump_then55:                                 ; preds = %cond_jump_end50
  %ad57 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @parse_attribute(%AttributeDef* %ad57)
  br label %cond_end56

cond_end56:                                       ; preds = %cond_jump_then55, %cond_jump_end50
  %type158 = load %CType, %CType* %type15, align 8
  %ad59 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %v60 = load i32*, i32** %v, align 8
  %td61 = load i32, i32* %td, align 4
  call void @type_decl(%CType* %type15, %AttributeDef* %ad59, i32* %v60, i32 %td61)
  call void @skip(i32 41)
  br label %cond_end45

cond_jump_then63:                                 ; preds = %cond_else_block
  %td65 = load i32, i32* %td, align 4
  %andtmp = and i32 %td65, 2
  %icmpA = icmp ne i32 %andtmp, 0
  %andand66 = and i1 %gteq_signed, %icmpA
  store i1 %andand66, i1* %andand, align 1
  br label %cond_jump_end64

cond_jump_end64:                                  ; preds = %cond_jump_then63, %cond_else_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then67, label %cond_else_block68

cond_jump_then67:                                 ; preds = %cond_jump_end64
  %v70 = load i32*, i32** %v, align 8
  %tok71 = load i32, i32* @tok, align 4
  store i32 %tok71, i32* %v70, align 4
  call void @next()
  br label %cond_end69

cond_else_block68:                                ; preds = %cond_jump_end64
  %td72 = load i32, i32* %td, align 4
  %andtmp73 = and i32 %td72, 1
  %logical_denial = icmp eq i32 %andtmp73, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA74 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA74, label %cond_jump_then75, label %cond_end76

cond_end69:                                       ; preds = %cond_end76, %cond_jump_then67
  br label %cond_end45

cond_jump_then75:                                 ; preds = %cond_else_block68
  call void @expect(i8* bitcast ([11 x i8]* @152 to i8*))
  br label %cond_end76

cond_end76:                                       ; preds = %cond_jump_then75, %cond_else_block68
  %v77 = load i32*, i32** %v, align 8
  store i32 0, i32* %v77, align 4
  br label %cond_end69

cond_jump_then83:                                 ; preds = %cond_end45
  %tok85 = load i32, i32* @tok, align 4
  %eq86 = icmp eq i32 %tok85, 303
  %oror87 = or i1 %eq82, %eq86
  store i1 %oror87, i1* %oror80, align 1
  br label %cond_jump_end84

cond_jump_end84:                                  ; preds = %cond_jump_then83, %cond_end45
  %oror_result_value88 = load i1, i1* %oror80, align 1
  br i1 %oror_result_value88, label %cond_jump_then89, label %cond_end90

cond_jump_then89:                                 ; preds = %cond_jump_end84
  %ad91 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @parse_attribute(%AttributeDef* %ad91)
  br label %cond_end90

cond_end90:                                       ; preds = %cond_jump_then89, %cond_jump_end84
  %type192 = load %CType, %CType* %type15, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %type15, i32 0, i32 0
  %t93 = load i32, i32* %fieldVVV, align 4
  %logical_denial94 = icmp eq i32 %t93, 0
  %castOOOO95 = zext i1 %logical_denial94 to i32
  %icmpA96 = icmp ne i32 %castOOOO95, 0
  br i1 %icmpA96, label %cond_jump_then97, label %cond_end98

cond_jump_then97:                                 ; preds = %cond_end90
  ret void

cond_end98:                                       ; preds = %cond_end90
  %type199 = load %CType, %CType* %type15, align 8
  store %CType* %type15, %CType** %type2, align 8
  br label %loop_top_block100

loop_continue_top_block:                          ; preds = %cond_end115
  br label %loop_top_block100

loop_top_block100:                                ; preds = %loop_continue_top_block, %cond_end98
  br i1 true, label %cond_then_block101, label %cond_end_block102

cond_then_block101:                               ; preds = %loop_top_block100
  %type2103 = load %CType*, %CType** %type2, align 8
  %fieldLLL104 = getelementptr inbounds %CType, %CType* %type2103, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL104, align 8
  store %Sym* %ref, %Sym** %s, align 8
  %s105 = load %Sym*, %Sym** %s, align 8
  %fieldLLL106 = getelementptr inbounds %Sym, %Sym* %s105, i32 0, i32 3
  %type107 = load %CType, %CType* %fieldLLL106, align 8
  store %CType* %fieldLLL106, %CType** %type2, align 8
  %type2108 = load %CType*, %CType** %type2, align 8
  %fieldLLL109 = getelementptr inbounds %CType, %CType* %type2108, i32 0, i32 0
  %t110 = load i32, i32* %fieldLLL109, align 4
  %logical_denial111 = icmp eq i32 %t110, 0
  %castOOOO112 = zext i1 %logical_denial111 to i32
  %icmpA113 = icmp ne i32 %castOOOO112, 0
  br i1 %icmpA113, label %cond_jump_then114, label %cond_end115

cond_end_block102:                                ; preds = %cond_jump_then114, %loop_top_block100
  %type118 = load %CType*, %CType** %type, align 8
  %type1119 = load %CType, %CType* %type15, align 8
  store %CType %type1119, %CType* %type118, align 8
  ret void

cond_jump_then114:                                ; preds = %cond_then_block101
  %type2116 = load %CType*, %CType** %type2, align 8
  %type117 = load %CType*, %CType** %type, align 8
  %derefference_valueB = load %CType, %CType* %type117, align 8
  store %CType %derefference_valueB, %CType* %type2116, align 8
  br label %cond_end_block102

cond_end115:                                      ; preds = %after_break, %cond_then_block101
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end115
}

define internal i32 @compare_types(%CType* %0, %CType* %1, i32 %2) {
entry:
  %t2 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %bt1 = alloca i32, align 4
  %type1 = alloca %CType*, align 8
  %type11 = alloca %CType**, align 8
  store %CType* %0, %CType** %type1, align 8
  store %CType** %type1, %CType*** %type11, align 8
  %type2 = alloca %CType*, align 8
  %type22 = alloca %CType**, align 8
  store %CType* %1, %CType** %type2, align 8
  store %CType** %type2, %CType*** %type22, align 8
  %unqualified = alloca i32, align 4
  %unqualified3 = alloca i32*, align 8
  store i32 %2, i32* %unqualified, align 4
  store i32* %unqualified, i32** %unqualified3, align 8
  %type14 = load %CType*, %CType** %type1, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type14, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %andtmp = and i32 %t, -1921
  store i32 %andtmp, i32* %t1, align 4
  %type25 = load %CType*, %CType** %type2, align 8
  %fieldLLL6 = getelementptr inbounds %CType, %CType* %type25, i32 0, i32 0
  %t7 = load i32, i32* %fieldLLL6, align 4
  %andtmp8 = and i32 %t7, -1921
  store i32 %andtmp8, i32* %t2, align 4
  %unqualified9 = load i32, i32* %unqualified, align 4
  %icmpA = icmp ne i32 %unqualified9, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %t110 = load i32, i32* %t1, align 4
  %andtmp11 = and i32 %t110, -6145
  store i32 %andtmp11, i32* %t1, align 4
  %t212 = load i32, i32* %t2, align 4
  %andtmp13 = and i32 %t212, -6145
  store i32 %andtmp13, i32* %t2, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %t114 = load i32, i32* %t1, align 4
  %t215 = load i32, i32* %t2, align 4
  %not_eq = icmp ne i32 %t114, %t215
  br i1 %not_eq, label %cond_jump_then16, label %cond_end17

cond_jump_then16:                                 ; preds = %cond_end
  ret i32 0

cond_end17:                                       ; preds = %cond_end
  %t118 = load i32, i32* %t1, align 4
  %andtmp19 = and i32 %t118, 15
  store i32 %andtmp19, i32* %bt1, align 4
  %bt120 = load i32, i32* %bt1, align 4
  %eq = icmp eq i32 %bt120, 4
  br i1 %eq, label %cond_jump_then21, label %cond_jump_elif0

cond_jump_then21:                                 ; preds = %cond_end17
  %type123 = load %CType*, %CType** %type1, align 8
  store i32 1786, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.115, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

cond_jump_elif0:                                  ; preds = %cond_end17
  %bt142 = load i32, i32* %bt1, align 4
  %eq43 = icmp eq i32 %bt142, 7
  br i1 %eq43, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %type144 = load %CType*, %CType** %type1, align 8
  %fieldLLL45 = getelementptr inbounds %CType, %CType* %type144, i32 0, i32 1
  %ref46 = load %Sym*, %Sym** %fieldLLL45, align 8
  %type247 = load %CType*, %CType** %type2, align 8
  %fieldLLL48 = getelementptr inbounds %CType, %CType* %type247, i32 0, i32 1
  %ref49 = load %Sym*, %Sym** %fieldLLL48, align 8
  %eq50 = icmp eq %Sym* %ref46, %ref49
  %icastKX = zext i1 %eq50 to i32
  ret i32 %icastKX

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %bt151 = load i32, i32* %bt1, align 4
  %eq52 = icmp eq i32 %bt151, 6
  br i1 %eq52, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %type153 = load %CType*, %CType** %type1, align 8
  %type254 = load %CType*, %CType** %type2, align 8
  %fun_result55 = call i32 @is_compatible_func(%CType* %type153, %CType* %type254)
  ret i32 %fun_result55

cond_else_block:                                  ; preds = %cond_jump_elif1
  ret i32 1

cond_end22:                                       ; No predecessors!
  ret i32 0

pointed_type:                                     ; preds = %cond_jump_then21
  %inline_result_variable = alloca %CType*, align 8
  %type = alloca %CType*, align 8
  store %CType* %type123, %CType** %type, align 8
  %type24 = load %CType*, %CType** %type, align 8
  %fieldLLL25 = getelementptr inbounds %CType, %CType* %type24, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL25, align 8
  %fieldLLL26 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 3
  %type27 = load %CType, %CType* %fieldLLL26, align 8
  store %CType* %fieldLLL26, %CType** %inline_result_variable, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable28 = load %CType*, %CType** %inline_result_variable, align 8
  store %CType* %inline_result_variable28, %CType** %type1, align 8
  %type229 = load %CType*, %CType** %type2, align 8
  store i32 1787, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.116, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type30

pointed_type30:                                   ; preds = %pointed_type_end
  %inline_result_variable31 = alloca %CType*, align 8
  %type32 = alloca %CType*, align 8
  store %CType* %type229, %CType** %type32, align 8
  %type34 = load %CType*, %CType** %type32, align 8
  %fieldLLL35 = getelementptr inbounds %CType, %CType* %type34, i32 0, i32 1
  %ref36 = load %Sym*, %Sym** %fieldLLL35, align 8
  %fieldLLL37 = getelementptr inbounds %Sym, %Sym* %ref36, i32 0, i32 3
  %type38 = load %CType, %CType* %fieldLLL37, align 8
  store %CType* %fieldLLL37, %CType** %inline_result_variable31, align 8
  br label %pointed_type_end33

pointed_type_end33:                               ; preds = %pointed_type30
  %inline_result_variable39 = load %CType*, %CType** %inline_result_variable31, align 8
  store %CType* %inline_result_variable39, %CType** %type2, align 8
  %type140 = load %CType*, %CType** %type1, align 8
  %type241 = load %CType*, %CType** %type2, align 8
  %fun_result = call i32 @is_compatible_types(%CType* %type140, %CType* %type241)
  ret i32 %fun_result
}

define internal i32 @is_compatible_types(%CType* %0, %CType* %1) {
entry:
  %type1 = alloca %CType*, align 8
  %type11 = alloca %CType**, align 8
  store %CType* %0, %CType** %type1, align 8
  store %CType** %type1, %CType*** %type11, align 8
  %type2 = alloca %CType*, align 8
  %type22 = alloca %CType**, align 8
  store %CType* %1, %CType** %type2, align 8
  store %CType** %type2, %CType*** %type22, align 8
  %type13 = load %CType*, %CType** %type1, align 8
  %type24 = load %CType*, %CType** %type2, align 8
  %fun_result = call i32 @compare_types(%CType* %type13, %CType* %type24, i32 0)
  ret i32 %fun_result
}

define internal i32 @is_compatible_parameter_types(%CType* %0, %CType* %1) {
entry:
  %type1 = alloca %CType*, align 8
  %type11 = alloca %CType**, align 8
  store %CType* %0, %CType** %type1, align 8
  store %CType** %type1, %CType*** %type11, align 8
  %type2 = alloca %CType*, align 8
  %type22 = alloca %CType**, align 8
  store %CType* %1, %CType** %type2, align 8
  store %CType** %type2, %CType*** %type22, align 8
  %type13 = load %CType*, %CType** %type1, align 8
  %type24 = load %CType*, %CType** %type2, align 8
  %fun_result = call i32 @compare_types(%CType* %type13, %CType* %type24, i32 1)
  ret i32 %fun_result
}

define i32 @ieee_finite(double %0) {
entry:
  %p = alloca i32*, align 8
  %d = alloca double, align 8
  %d1 = alloca double*, align 8
  store double %0, double* %d, align 8
  store double* %d, double** %d1, align 8
  %d2 = load double, double* %d, align 8
  %castAQ = bitcast double* %d to i32*
  store i32* %castAQ, i32** %p, align 8
  %p3 = load i32*, i32** %p, align 8
  %element_addressAB = load i32*, i32** %p, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 1
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  %ortmp = or i32 %load_element, -2146435073
  %add = add i32 %ortmp, 1
  %rshifttmp = lshr i32 %add, 31
  ret i32 %rshifttmp
}

define void @vpushi(i32 %0) {
entry:
  %cval = alloca %CValue, align 16
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %cval2 = load %CValue, %CValue* %cval, align 16
  %v3 = load i32, i32* %v, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %v3, i32* %icastN, align 4
  %int_type = load %CType, %CType* @int_type, align 8
  %cval4 = load %CValue, %CValue* %cval, align 16
  call void @vsetc(%CType* @int_type, i32 240, %CValue* %cval)
  ret void
}

define void @vpushll(i64 %0) {
entry:
  %ctype = alloca %CType, align 8
  %castXXXX = bitcast %CType* %ctype to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %cval = alloca %CValue, align 16
  %v = alloca i64, align 8
  %v1 = alloca i64*, align 8
  store i64 %0, i64* %v, align 4
  store i64* %v, i64** %v1, align 8
  %ctype2 = load %CType, %CType* %ctype, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %ctype, i32 0, i32 0
  store i32 12, i32* %fieldTTT, align 4
  %cval3 = load %CValue, %CValue* %cval, align 16
  %v4 = load i64, i64* %v, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i64*
  store i64 %v4, i64* %icastN, align 4
  %ctype5 = load %CType, %CType* %ctype, align 8
  %cval6 = load %CValue, %CValue* %cval, align 16
  call void @vsetc(%CType* %ctype, i32 240, %CValue* %cval)
  ret void
}

define void @vrott(i32 %0) {
entry:
  %tmp = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %tmp to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %n1 = alloca i32*, align 8
  store i32 %0, i32* %n, align 4
  store i32* %n, i32** %n1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 0
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  store %SValue %load_element, %SValue* %tmp, align 16
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i14 = load i32, i32* %i, align 4
  %add = add i32 %i14, 1
  store i32 %add, i32* %i, align 4
  %i15 = load i32, i32* %i, align 4
  %sub16 = sub i32 %i15, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i2 = load i32, i32* %i, align 4
  %n3 = load i32, i32* %n, align 4
  %sub = sub i32 %n3, 1
  %le = icmp slt i32 %i2, %sub
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %vtop4 = load %SValue*, %SValue** @vtop, align 8
  %i5 = load i32, i32* %i, align 4
  %sub6 = sub i32 0, %i5
  %vtop7 = load %SValue*, %SValue** @vtop, align 8
  %i8 = load i32, i32* %i, align 4
  %sub9 = sub i32 0, %i8
  %sub10 = sub i32 %sub9, 1
  %element_addressAB11 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY12 = getelementptr inbounds %SValue, %SValue* %element_addressAB11, i32 %sub10
  %load_element13 = load %SValue, %SValue* %element_addressXYXZY12, align 16
  %element_addressXYXY = getelementptr %SValue, %SValue* %vtop4, i32 %sub6
  store %SValue %load_element13, %SValue* %element_addressXYXY, align 16
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %vtop17 = load %SValue*, %SValue** @vtop, align 8
  %n18 = load i32, i32* %n, align 4
  %sub19 = sub i32 0, %n18
  %add20 = add i32 %sub19, 1
  %tmp21 = load %SValue, %SValue* %tmp, align 16
  %element_addressXYXY22 = getelementptr %SValue, %SValue* %vtop17, i32 %add20
  store %SValue %tmp21, %SValue* %element_addressXYXY22, align 16
  ret void
}

declare void @vnrott(i32)

declare void @lexpand_nr()

define internal void @vpush_global_sym(%CType* %0, i32 %1) {
entry:
  %cval = alloca %CValue, align 16
  %sym = alloca %Sym*, align 8
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %v = alloca i32, align 4
  %v2 = alloca i32*, align 8
  store i32 %1, i32* %v, align 4
  store i32* %v, i32** %v2, align 8
  %v3 = load i32, i32* %v, align 4
  %type4 = load %CType*, %CType** %type, align 8
  %fun_result = call %Sym* @external_global_sym(i32 %v3, %CType* %type4, i32 0)
  store %Sym* %fun_result, %Sym** %sym, align 8
  %cval5 = load %CValue, %CValue* %cval, align 16
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 0, i32* %icastN, align 4
  %type6 = load %CType*, %CType** %type, align 8
  %cval7 = load %CValue, %CValue* %cval, align 16
  call void @vsetc(%CType* %type6, i32 752, %CValue* %cval)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %sym8 = load %Sym*, %Sym** %sym, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 4
  store %Sym* %sym8, %Sym** %fieldTU, align 8
  ret void
}

define void @vset(%CType* %0, i32 %1, i32 %2) {
entry:
  %cval = alloca %CValue, align 16
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %r = alloca i32, align 4
  %r2 = alloca i32*, align 8
  store i32 %1, i32* %r, align 4
  store i32* %r, i32** %r2, align 8
  %v = alloca i32, align 4
  %v3 = alloca i32*, align 8
  store i32 %2, i32* %v, align 4
  store i32* %v, i32** %v3, align 8
  %cval4 = load %CValue, %CValue* %cval, align 16
  %v5 = load i32, i32* %v, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %v5, i32* %icastN, align 4
  %type6 = load %CType*, %CType** %type, align 8
  %r7 = load i32, i32* %r, align 4
  %cval8 = load %CValue, %CValue* %cval, align 16
  call void @vsetc(%CType* %type6, i32 %r7, %CValue* %cval)
  ret void
}

define void @type_to_str(i8* %0, i32 %1, %CType* %2, i8* %3) {
entry:
  %tstr = alloca i8*, align 8
  %buf15 = alloca [256 x i8], align 1
  %sa = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %t = alloca i32, align 4
  %v = alloca i32, align 4
  %bt = alloca i32, align 4
  %buf = alloca i8*, align 8
  %buf1 = alloca i8**, align 8
  store i8* %0, i8** %buf, align 8
  store i8** %buf, i8*** %buf1, align 8
  %buf_size = alloca i32, align 4
  %buf_size2 = alloca i32*, align 8
  store i32 %1, i32* %buf_size, align 4
  store i32* %buf_size, i32** %buf_size2, align 8
  %type = alloca %CType*, align 8
  %type3 = alloca %CType**, align 8
  store %CType* %2, %CType** %type, align 8
  store %CType** %type, %CType*** %type3, align 8
  %varstr = alloca i8*, align 8
  %varstr4 = alloca i8**, align 8
  store i8* %3, i8** %varstr, align 8
  store i8** %varstr, i8*** %varstr4, align 8
  %type6 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type6, i32 0, i32 0
  %t7 = load i32, i32* %fieldLLL, align 4
  %andtmp = and i32 %t7, -1921
  store i32 %andtmp, i32* %t, align 4
  %t8 = load i32, i32* %t, align 4
  %andtmp9 = and i32 %t8, 15
  store i32 %andtmp9, i32* %bt, align 4
  %buf10 = load i8*, i8** %buf, align 8
  %element_addressXYXY = getelementptr i8, i8* %buf10, i32 0
  store i8 0, i8* %element_addressXYXY, align 1
  %t11 = load i32, i32* %t, align 4
  %andtmp12 = and i32 %t11, 2048
  %icmpA = icmp ne i32 %andtmp12, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %buf13 = load i8*, i8** %buf, align 8
  %buf_size14 = load i32, i32* %buf_size, align 4
  %fun_result = call i8* @pstrcat(i8* %buf13, i32 %buf_size14, i8* bitcast ([7 x i8]* @104 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %t15 = load i32, i32* %t, align 4
  %andtmp16 = and i32 %t15, 4096
  %icmpA17 = icmp ne i32 %andtmp16, 0
  br i1 %icmpA17, label %cond_jump_then18, label %cond_end19

cond_jump_then18:                                 ; preds = %cond_end
  %buf20 = load i8*, i8** %buf, align 8
  %buf_size21 = load i32, i32* %buf_size, align 4
  %fun_result22 = call i8* @pstrcat(i8* %buf20, i32 %buf_size21, i8* bitcast ([10 x i8]* @105 to i8*))
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_end
  %t23 = load i32, i32* %t, align 4
  %andtmp24 = and i32 %t23, 16
  %icmpA25 = icmp ne i32 %andtmp24, 0
  br i1 %icmpA25, label %cond_jump_then26, label %cond_end27

cond_jump_then26:                                 ; preds = %cond_end19
  %buf28 = load i8*, i8** %buf, align 8
  %buf_size29 = load i32, i32* %buf_size, align 4
  %fun_result30 = call i8* @pstrcat(i8* %buf28, i32 %buf_size29, i8* bitcast ([10 x i8]* @106 to i8*))
  br label %cond_end27

cond_end27:                                       ; preds = %cond_jump_then26, %cond_end19
  %bt31 = load i32, i32* %bt, align 4
  %eqtmp = icmp eq i32 %bt31, 3
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

end_blockX:                                       ; preds = %cond_else_blockX130, %cond_end81, %type_to_str.add_tstr
  %varstr150 = load i8*, i8** %varstr, align 8
  %icmpB151 = icmp ne i8* %varstr150, null
  br i1 %icmpB151, label %cond_jump_then152, label %cond_end153

cond_then_block:                                  ; preds = %cond_end27
  br label %type_to_str.add_tstr
  br label %cond_then_block32

cond_else_blockX:                                 ; preds = %cond_end27
  %eqtmp34 = icmp eq i32 %bt31, 11
  br i1 %eqtmp34, label %cond_then_block32, label %cond_else_blockX33

type_to_str.add_tstr:                             ; preds = %cond_then_block56, %cond_then_block53, %cond_then_block50, %cond_then_block47, %cond_then_block44, %cond_then_block41, %cond_then_block38, %cond_then_block35, %cond_then_block32, %cond_then_block
  %buf59 = load i8*, i8** %buf, align 8
  %buf_size60 = load i32, i32* %buf_size, align 4
  %fun_result61 = call i8* @pstrcat(i8* %buf59, i32 %buf_size60, i8* bitcast ([12 x i8]* @116 to i8*))
  br label %end_blockX

cond_then_block32:                                ; preds = %cond_else_blockX, %cond_then_block
  br label %type_to_str.add_tstr
  br label %cond_then_block35

cond_else_blockX33:                               ; preds = %cond_else_blockX
  %eqtmp37 = icmp eq i32 %bt31, 1
  br i1 %eqtmp37, label %cond_then_block35, label %cond_else_blockX36

cond_then_block35:                                ; preds = %cond_else_blockX33, %cond_then_block32
  br label %type_to_str.add_tstr
  br label %cond_then_block38

cond_else_blockX36:                               ; preds = %cond_else_blockX33
  %eqtmp40 = icmp eq i32 %bt31, 2
  br i1 %eqtmp40, label %cond_then_block38, label %cond_else_blockX39

cond_then_block38:                                ; preds = %cond_else_blockX36, %cond_then_block35
  br label %type_to_str.add_tstr
  br label %cond_then_block41

cond_else_blockX39:                               ; preds = %cond_else_blockX36
  %eqtmp43 = icmp eq i32 %bt31, 0
  br i1 %eqtmp43, label %cond_then_block41, label %cond_else_blockX42

cond_then_block41:                                ; preds = %cond_else_blockX39, %cond_then_block38
  br label %type_to_str.add_tstr
  br label %cond_then_block44

cond_else_blockX42:                               ; preds = %cond_else_blockX39
  %eqtmp46 = icmp eq i32 %bt31, 13
  br i1 %eqtmp46, label %cond_then_block44, label %cond_else_blockX45

cond_then_block44:                                ; preds = %cond_else_blockX42, %cond_then_block41
  br label %type_to_str.add_tstr
  br label %cond_then_block47

cond_else_blockX45:                               ; preds = %cond_else_blockX42
  %eqtmp49 = icmp eq i32 %bt31, 12
  br i1 %eqtmp49, label %cond_then_block47, label %cond_else_blockX48

cond_then_block47:                                ; preds = %cond_else_blockX45, %cond_then_block44
  br label %type_to_str.add_tstr
  br label %cond_then_block50

cond_else_blockX48:                               ; preds = %cond_else_blockX45
  %eqtmp52 = icmp eq i32 %bt31, 8
  br i1 %eqtmp52, label %cond_then_block50, label %cond_else_blockX51

cond_then_block50:                                ; preds = %cond_else_blockX48, %cond_then_block47
  br label %type_to_str.add_tstr
  br label %cond_then_block53

cond_else_blockX51:                               ; preds = %cond_else_blockX48
  %eqtmp55 = icmp eq i32 %bt31, 9
  br i1 %eqtmp55, label %cond_then_block53, label %cond_else_blockX54

cond_then_block53:                                ; preds = %cond_else_blockX51, %cond_then_block50
  br label %type_to_str.add_tstr
  br label %cond_then_block56

cond_else_blockX54:                               ; preds = %cond_else_blockX51
  %eqtmp58 = icmp eq i32 %bt31, 10
  br i1 %eqtmp58, label %cond_then_block56, label %cond_else_blockX57

cond_then_block56:                                ; preds = %cond_else_blockX54, %cond_then_block53
  br label %type_to_str.add_tstr

cond_else_blockX57:                               ; preds = %after_break, %cond_else_blockX54
  %eqtmp64 = icmp eq i32 %bt31, 5
  br i1 %eqtmp64, label %cond_then_block62, label %cond_else_blockX63
  br label %cond_else_blockX65

after_break:                                      ; No predecessors!
  br label %cond_else_blockX57
  br label %cond_else_blockX63

cond_then_block62:                                ; preds = %cond_else_blockX63, %cond_else_blockX57
  %bt67 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt67, 7
  br i1 %eq, label %cond_jump_then68, label %cond_else_block

cond_else_blockX63:                               ; preds = %cond_else_blockX57, %after_break
  %eqtmp66 = icmp eq i32 %bt31, 7
  br i1 %eqtmp66, label %cond_then_block62, label %cond_else_blockX65

cond_else_blockX65:                               ; preds = %after_break90, %cond_else_blockX63, %cond_else_blockX57
  %eqtmp93 = icmp eq i32 %bt31, 6
  br i1 %eqtmp93, label %cond_then_block91, label %cond_else_blockX92

cond_jump_then68:                                 ; preds = %cond_then_block62
  br label %cond_end69

cond_else_block:                                  ; preds = %cond_then_block62
  br label %cond_end69

cond_end69:                                       ; preds = %cond_else_block, %cond_jump_then68
  %buf70 = load i8*, i8** %buf, align 8
  %buf_size71 = load i32, i32* %buf_size, align 4
  %fun_result72 = call i8* @pstrcat(i8* %buf70, i32 %buf_size71, i8* bitcast ([6 x i8]* @118 to i8*))
  %type73 = load %CType*, %CType** %type, align 8
  %fieldLLL74 = getelementptr inbounds %CType, %CType* %type73, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL74, align 8
  %fieldLLL75 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 0
  %v76 = load i32, i32* %fieldLLL75, align 4
  %andtmp77 = and i32 %v76, -1073741825
  store i32 %andtmp77, i32* %v, align 4
  %v78 = load i32, i32* %v, align 4
  %gteq_signed = icmp sge i32 %v78, 268435456
  br i1 %gteq_signed, label %cond_jump_then79, label %cond_else_block80

cond_jump_then79:                                 ; preds = %cond_end69
  %buf82 = load i8*, i8** %buf, align 8
  %buf_size83 = load i32, i32* %buf_size, align 4
  %fun_result84 = call i8* @pstrcat(i8* %buf82, i32 %buf_size83, i8* bitcast ([12 x i8]* @119 to i8*))
  br label %cond_end81

cond_else_block80:                                ; preds = %cond_end69
  %buf85 = load i8*, i8** %buf, align 8
  %buf_size86 = load i32, i32* %buf_size, align 4
  %v87 = load i32, i32* %v, align 4
  %fun_result88 = call i8* @get_tok_str(i32 %v87, %CValue* null)
  %fun_result89 = call i8* @pstrcat(i8* %buf85, i32 %buf_size86, i8* %fun_result88)
  br label %cond_end81

cond_end81:                                       ; preds = %cond_else_block80, %cond_jump_then79
  br label %end_blockX

after_break90:                                    ; No predecessors!
  br label %cond_else_blockX65
  br label %cond_else_blockX92

cond_then_block91:                                ; preds = %cond_else_blockX65
  %type94 = load %CType*, %CType** %type, align 8
  %fieldLLL95 = getelementptr inbounds %CType, %CType* %type94, i32 0, i32 1
  %ref96 = load %Sym*, %Sym** %fieldLLL95, align 8
  store %Sym* %ref96, %Sym** %s, align 8
  %buf97 = load i8*, i8** %buf, align 8
  %buf_size98 = load i32, i32* %buf_size, align 4
  %s99 = load %Sym*, %Sym** %s, align 8
  %fieldLLL100 = getelementptr inbounds %Sym, %Sym* %s99, i32 0, i32 3
  %type101 = load %CType, %CType* %fieldLLL100, align 8
  %varstr102 = load i8*, i8** %varstr, align 8
  call void @type_to_str(i8* %buf97, i32 %buf_size98, %CType* %fieldLLL100, i8* %varstr102)
  %buf103 = load i8*, i8** %buf, align 8
  %buf_size104 = load i32, i32* %buf_size, align 4
  %fun_result105 = call i8* @pstrcat(i8* %buf103, i32 %buf_size104, i8* bitcast ([2 x i8]* @120 to i8*))
  %s106 = load %Sym*, %Sym** %s, align 8
  %fieldLLL107 = getelementptr inbounds %Sym, %Sym* %s106, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL107, align 8
  store %Sym* %next, %Sym** %sa, align 8
  br label %loop_top_block

cond_else_blockX92:                               ; preds = %cond_else_blockX65, %after_break90
  %eqtmp131 = icmp eq i32 %bt31, 4
  br i1 %eqtmp131, label %cond_then_block129, label %cond_else_blockX130

loop_top_block:                                   ; preds = %cond_end122, %cond_then_block91
  %sa108 = load %Sym*, %Sym** %sa, align 8
  %not_eq = icmp ne %Sym* %sa108, null
  br i1 %not_eq, label %cond_then_block109, label %cond_end_block

cond_then_block109:                               ; preds = %loop_top_block
  %autocast = bitcast [256 x i8]* %buf15 to i8*
  %sa110 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL111 = getelementptr inbounds %Sym, %Sym* %sa110, i32 0, i32 3
  %type112 = load %CType, %CType* %fieldLLL111, align 8
  call void @type_to_str(i8* %autocast, i32 256, %CType* %fieldLLL111, i8* null)
  %buf113 = load i8*, i8** %buf, align 8
  %buf_size114 = load i32, i32* %buf_size, align 4
  %autocast115 = bitcast [256 x i8]* %buf15 to i8*
  %fun_result116 = call i8* @pstrcat(i8* %buf113, i32 %buf_size114, i8* %autocast115)
  %sa117 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL118 = getelementptr inbounds %Sym, %Sym* %sa117, i32 0, i32 4
  %next119 = load %Sym*, %Sym** %fieldLLL118, align 8
  store %Sym* %next119, %Sym** %sa, align 8
  %sa120 = load %Sym*, %Sym** %sa, align 8
  %icmpB = icmp ne %Sym* %sa120, null
  br i1 %icmpB, label %cond_jump_then121, label %cond_end122

cond_end_block:                                   ; preds = %loop_top_block
  %buf126 = load i8*, i8** %buf, align 8
  %buf_size127 = load i32, i32* %buf_size, align 4
  %fun_result128 = call i8* @pstrcat(i8* %buf126, i32 %buf_size127, i8* bitcast ([2 x i8]* @122 to i8*))
  br label %type_to_str.no_var
  br label %cond_then_block129

cond_jump_then121:                                ; preds = %cond_then_block109
  %buf123 = load i8*, i8** %buf, align 8
  %buf_size124 = load i32, i32* %buf_size, align 4
  %fun_result125 = call i8* @pstrcat(i8* %buf123, i32 %buf_size124, i8* bitcast ([3 x i8]* @121 to i8*))
  br label %cond_end122

cond_end122:                                      ; preds = %cond_jump_then121, %cond_then_block109
  br label %loop_top_block

type_to_str.no_var:                               ; preds = %cond_end153, %cond_end140, %cond_end_block
  ret void

cond_then_block129:                               ; preds = %cond_else_blockX92, %cond_end_block
  %type132 = load %CType*, %CType** %type, align 8
  %fieldLLL133 = getelementptr inbounds %CType, %CType* %type132, i32 0, i32 1
  %ref134 = load %Sym*, %Sym** %fieldLLL133, align 8
  store %Sym* %ref134, %Sym** %s, align 8
  %autocast135 = bitcast [256 x i8]* %buf15 to i8*
  %fun_result136 = call i8* @pstrcpy(i8* %autocast135, i32 256, i8* bitcast ([2 x i8]* @123 to i8*))
  %varstr137 = load i8*, i8** %varstr, align 8
  %icmpB138 = icmp ne i8* %varstr137, null
  br i1 %icmpB138, label %cond_jump_then139, label %cond_end140

cond_else_blockX130:                              ; preds = %cond_end140, %cond_else_blockX92
  br label %end_blockX

cond_jump_then139:                                ; preds = %cond_then_block129
  %autocast141 = bitcast [256 x i8]* %buf15 to i8*
  %varstr142 = load i8*, i8** %varstr, align 8
  %fun_result143 = call i8* @pstrcat(i8* %autocast141, i32 256, i8* %varstr142)
  br label %cond_end140

cond_end140:                                      ; preds = %cond_jump_then139, %cond_then_block129
  %buf144 = load i8*, i8** %buf, align 8
  %buf_size145 = load i32, i32* %buf_size, align 4
  %s146 = load %Sym*, %Sym** %s, align 8
  %fieldLLL147 = getelementptr inbounds %Sym, %Sym* %s146, i32 0, i32 3
  %type148 = load %CType, %CType* %fieldLLL147, align 8
  %autocast149 = bitcast [256 x i8]* %buf15 to i8*
  call void @type_to_str(i8* %buf144, i32 %buf_size145, %CType* %fieldLLL147, i8* %autocast149)
  br label %type_to_str.no_var
  br label %cond_else_blockX130

cond_jump_then152:                                ; preds = %end_blockX
  %buf154 = load i8*, i8** %buf, align 8
  %buf_size155 = load i32, i32* %buf_size, align 4
  %fun_result156 = call i8* @pstrcat(i8* %buf154, i32 %buf_size155, i8* bitcast ([2 x i8]* @124 to i8*))
  %buf157 = load i8*, i8** %buf, align 8
  %buf_size158 = load i32, i32* %buf_size, align 4
  %varstr159 = load i8*, i8** %varstr, align 8
  %fun_result160 = call i8* @pstrcat(i8* %buf157, i32 %buf_size158, i8* %varstr159)
  br label %cond_end153

cond_end153:                                      ; preds = %cond_jump_then152, %end_blockX
  br label %type_to_str.no_var
}

define internal %Sym* @get_sym_ref(%CType* %0, %Section* %1, i64 %2, i64 %3) {
entry:
  %sym = alloca %Sym*, align 8
  %v = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %sec = alloca %Section*, align 8
  %sec2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec2, align 8
  %offset = alloca i64, align 8
  %offset3 = alloca i64*, align 8
  store i64 %2, i64* %offset, align 4
  store i64* %offset, i64** %offset3, align 8
  %size = alloca i64, align 8
  %size4 = alloca i64*, align 8
  store i64 %3, i64* %size, align 4
  store i64* %size, i64** %size4, align 8
  %anon_sym = load i32, i32* @anon_sym, align 4
  %add = add i32 %anon_sym, 1
  store i32 %add, i32* @anon_sym, align 4
  %anon_sym5 = load i32, i32* @anon_sym, align 4
  %sub = sub i32 %anon_sym5, 1
  store i32 %sub, i32* %v, align 4
  %v6 = load i32, i32* %v, align 4
  %type7 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type7, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %ortmp = or i32 %t, 256
  %fun_result = call %Sym* @global_identifier_push(i32 %v6, i32 %ortmp, i32 0)
  store %Sym* %fun_result, %Sym** %sym, align 8
  %sym8 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL9 = getelementptr inbounds %Sym, %Sym* %sym8, i32 0, i32 3
  %type10 = load %CType, %CType* %fieldLLL9, align 8
  %type11 = load %CType*, %CType** %type, align 8
  %fieldLLL12 = getelementptr inbounds %CType, %CType* %type11, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL12, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL9, i32 0, i32 1
  store %Sym* %ref, %Sym** %fieldTTT, align 8
  %sym13 = load %Sym*, %Sym** %sym, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %sym13, i32 0, i32 1
  store i64 752, i64* %fieldTU, align 4
  %sym14 = load %Sym*, %Sym** %sym, align 8
  %sec15 = load %Section*, %Section** %sec, align 8
  %offset16 = load i64, i64* %offset, align 4
  %size17 = load i64, i64* %size, align 4
  call void @put_extern_sym(%Sym* %sym14, %Section* %sec15, i64 %offset16, i64 %size17)
  %sym18 = load %Sym*, %Sym** %sym, align 8
  ret %Sym* %sym18
}

define internal %Sym* @external_global_sym(i32 %0, %CType* %1, i32 %2) {
entry:
  %s = alloca %Sym*, align 8
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %type = alloca %CType*, align 8
  %type2 = alloca %CType**, align 8
  store %CType* %1, %CType** %type, align 8
  store %CType** %type, %CType*** %type2, align 8
  %r = alloca i32, align 4
  %r3 = alloca i32*, align 8
  store i32 %2, i32* %r, align 4
  store i32* %r, i32** %r3, align 8
  %v4 = load i32, i32* %v, align 4
  store i32 98, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_find

sym_find:                                         ; preds = %entry
  %inline_result_variable = alloca %Sym*, align 8
  %v5 = alloca i32, align 4
  store i32 %v4, i32* %v5, align 4
  %v6 = load i32, i32* %v5, align 4
  %sub = sub i32 %v6, 256
  store i32 %sub, i32* %v5, align 4
  %add = add i32 %sub, 256
  %v7 = load i32, i32* %v5, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub8 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v7, %sub8
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_end

sym_find_end:                                     ; preds = %cond_end, %cond_jump_then
  %inline_result_variable10 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable10, %Sym** %s, align 8
  %s11 = load %Sym*, %Sym** %s, align 8
  %logical_denial = icmp eq %Sym* %s11, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then12, label %cond_end13

cond_jump_then:                                   ; preds = %sym_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_end:                                         ; preds = %sym_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v9 = load i32, i32* %v5, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v9
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_identifier, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_jump_then12:                                 ; preds = %sym_find_end
  %v14 = load i32, i32* %v, align 4
  %type15 = load %CType*, %CType** %type, align 8
  %fieldLLL16 = getelementptr inbounds %CType, %CType* %type15, i32 0, i32 0
  %t = load i32, i32* %fieldLLL16, align 4
  %ortmp = or i32 %t, 128
  %fun_result = call %Sym* @global_identifier_push(i32 %v14, i32 %ortmp, i32 0)
  store %Sym* %fun_result, %Sym** %s, align 8
  %s17 = load %Sym*, %Sym** %s, align 8
  %fieldLLL18 = getelementptr inbounds %Sym, %Sym* %s17, i32 0, i32 3
  %type19 = load %CType, %CType* %fieldLLL18, align 8
  %type20 = load %CType*, %CType** %type, align 8
  %fieldLLL21 = getelementptr inbounds %CType, %CType* %type20, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL21, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL18, i32 0, i32 1
  store %Sym* %ref, %Sym** %fieldTTT, align 8
  %s22 = load %Sym*, %Sym** %s, align 8
  %r23 = load i32, i32* %r, align 4
  %ortmp24 = or i32 %r23, 240
  %ortmp25 = or i32 %ortmp24, 512
  %icastD = sext i32 %ortmp25 to i64
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s22, i32 0, i32 1
  store i64 %icastD, i64* %fieldTU, align 4
  br label %cond_end13

cond_end13:                                       ; preds = %cond_jump_then12, %sym_find_end
  %s26 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s26
}

define internal void @section_realloc(%Section* %0, i64 %1) {
entry:
  %data = alloca i8*, align 8
  %size = alloca i64, align 8
  %sec = alloca %Section*, align 8
  %sec1 = alloca %Section**, align 8
  store %Section* %0, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec1, align 8
  %new_size = alloca i64, align 8
  %new_size2 = alloca i64*, align 8
  store i64 %1, i64* %new_size, align 4
  store i64* %new_size, i64** %new_size2, align 8
  %sec3 = load %Section*, %Section** %sec, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %sec3, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL, align 4
  store i64 %data_allocated, i64* %size, align 4
  %size4 = load i64, i64* %size, align 4
  %eq = icmp eq i64 %size4, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store i64 1, i64* %size, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %cond_end
  %size5 = load i64, i64* %size, align 4
  %new_size6 = load i64, i64* %new_size, align 4
  %le = icmp ult i64 %size5, %new_size6
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %size7 = load i64, i64* %size, align 4
  %mul = mul i64 %size7, 2
  store i64 %mul, i64* %size, align 4
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %sec8 = load %Section*, %Section** %sec, align 8
  %fieldLLL9 = getelementptr inbounds %Section, %Section* %sec8, i32 0, i32 1
  %data10 = load i8*, i8** %fieldLLL9, align 8
  %size11 = load i64, i64* %size, align 4
  %fun_result = call i8* @tcc_realloc(i8* %data10, i64 %size11)
  store i8* %fun_result, i8** %data, align 8
  %data12 = load i8*, i8** %data, align 8
  %logical_denial = icmp eq i8* %data12, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then13, label %cond_end14

cond_jump_then13:                                 ; preds = %cond_end_block
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @10 to i8*))
  br label %cond_end14

cond_end14:                                       ; preds = %cond_jump_then13, %cond_end_block
  %data15 = load i8*, i8** %data, align 8
  %sec16 = load %Section*, %Section** %sec, align 8
  %fieldLLL17 = getelementptr inbounds %Section, %Section* %sec16, i32 0, i32 2
  %data_allocated18 = load i64, i64* %fieldLLL17, align 4
  %ptrToIntC = ptrtoint i8* %data15 to i64
  %mul19 = mul i64 %data_allocated18, 1
  %add = add i64 %ptrToIntC, %mul19
  %intToPtrB = inttoptr i64 %add to i8*
  %size20 = load i64, i64* %size, align 4
  %sec21 = load %Section*, %Section** %sec, align 8
  %fieldLLL22 = getelementptr inbounds %Section, %Section* %sec21, i32 0, i32 2
  %data_allocated23 = load i64, i64* %fieldLLL22, align 4
  %sub = sub i64 %size20, %data_allocated23
  %fun_result24 = call i8* @memset(i8* %intToPtrB, i32 0, i64 %sub)
  %sec25 = load %Section*, %Section** %sec, align 8
  %data26 = load i8*, i8** %data, align 8
  %fieldTU = getelementptr inbounds %Section, %Section* %sec25, i32 0, i32 1
  store i8* %data26, i8** %fieldTU, align 8
  %sec27 = load %Section*, %Section** %sec, align 8
  %size28 = load i64, i64* %size, align 4
  %fieldTU29 = getelementptr inbounds %Section, %Section* %sec27, i32 0, i32 2
  store i64 %size28, i64* %fieldTU29, align 4
  ret void
}

define internal i8* @section_ptr_add(%Section* %0, i64 %1) {
entry:
  %offset1 = alloca i64, align 8
  %offset = alloca i64, align 8
  %sec = alloca %Section*, align 8
  %sec1 = alloca %Section**, align 8
  store %Section* %0, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec1, align 8
  %size = alloca i64, align 8
  %size2 = alloca i64*, align 8
  store i64 %1, i64* %size, align 4
  store i64* %size, i64** %size2, align 8
  %sec3 = load %Section*, %Section** %sec, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %sec3, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  store i64 %data_offset, i64* %offset, align 4
  %offset4 = load i64, i64* %offset, align 4
  %size5 = load i64, i64* %size, align 4
  %add = add i64 %offset4, %size5
  store i64 %add, i64* %offset1, align 4
  %offset16 = load i64, i64* %offset1, align 4
  %sec7 = load %Section*, %Section** %sec, align 8
  %fieldLLL8 = getelementptr inbounds %Section, %Section* %sec7, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL8, align 4
  %gt = icmp ugt i64 %offset16, %data_allocated
  br i1 %gt, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %sec9 = load %Section*, %Section** %sec, align 8
  %offset110 = load i64, i64* %offset1, align 4
  call void @section_realloc(%Section* %sec9, i64 %offset110)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %sec11 = load %Section*, %Section** %sec, align 8
  %offset112 = load i64, i64* %offset1, align 4
  %fieldTU = getelementptr inbounds %Section, %Section* %sec11, i32 0, i32 0
  store i64 %offset112, i64* %fieldTU, align 4
  %sec13 = load %Section*, %Section** %sec, align 8
  %fieldLLL14 = getelementptr inbounds %Section, %Section* %sec13, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL14, align 8
  %offset15 = load i64, i64* %offset, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %offset15, 1
  %add16 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add16 to i8*
  ret i8* %intToPtrB
}

define internal void @put_extern_sym(%Sym* %0, %Section* %1, i64 %2, i64 %3) {
entry:
  %sym = alloca %Sym*, align 8
  %sym1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym1, align 8
  %section = alloca %Section*, align 8
  %section2 = alloca %Section**, align 8
  store %Section* %1, %Section** %section, align 8
  store %Section** %section, %Section*** %section2, align 8
  %value = alloca i64, align 8
  %value3 = alloca i64*, align 8
  store i64 %2, i64* %value, align 4
  store i64* %value, i64** %value3, align 8
  %size = alloca i64, align 8
  %size4 = alloca i64*, align 8
  store i64 %3, i64* %size, align 4
  store i64* %size, i64** %size4, align 8
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %section6 = load %Section*, %Section** %section, align 8
  %value7 = load i64, i64* %value, align 4
  %size8 = load i64, i64* %size, align 4
  call void @put_extern_sym2(%Sym* %sym5, %Section* %section6, i64 %value7, i64 %size8, i32 1)
  ret void
}

define internal void @greloc(%Section* %0, %Sym* %1, i64 %2, i32 %3) {
entry:
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %sym = alloca %Sym*, align 8
  %sym2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym2, align 8
  %offset = alloca i64, align 8
  %offset3 = alloca i64*, align 8
  store i64 %2, i64* %offset, align 4
  store i64* %offset, i64** %offset3, align 8
  %type = alloca i32, align 4
  %type4 = alloca i32*, align 8
  store i32 %3, i32* %type, align 4
  store i32* %type, i32** %type4, align 8
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %sym5, i32 0, i32 2
  %c = load i64, i64* %fieldLLL, align 4
  %logical_denial = icmp eq i64 %c, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %sym6 = load %Sym*, %Sym** %sym, align 8
  call void @put_extern_sym(%Sym* %sym6, %Section* null, i64 0, i64 0)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %s7 = load %Section*, %Section** %s, align 8
  %offset8 = load i64, i64* %offset, align 4
  %type9 = load i32, i32* %type, align 4
  %sym10 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL11 = getelementptr inbounds %Sym, %Sym* %sym10, i32 0, i32 2
  %c12 = load i64, i64* %fieldLLL11, align 4
  %icastM = trunc i64 %c12 to i32
  call void @put_elf_reloc(%Section* %symtab_section, %Section* %s7, i64 %offset8, i32 %type9, i32 %icastM)
  ret void
}

define internal i32 @put_elf_str(%Section* %0, i8* %1) {
entry:
  %ptr = alloca i8*, align 8
  %len = alloca i32, align 4
  %offset = alloca i32, align 4
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %sym = alloca i8*, align 8
  %sym2 = alloca i8**, align 8
  store i8* %1, i8** %sym, align 8
  store i8** %sym, i8*** %sym2, align 8
  %sym3 = load i8*, i8** %sym, align 8
  %fun_result = call i64 @strlen(i8* %sym3)
  %add = add i64 %fun_result, 1
  %icastM = trunc i64 %add to i32
  store i32 %icastM, i32* %len, align 4
  %s4 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s4, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  %icastM5 = trunc i64 %data_offset to i32
  store i32 %icastM5, i32* %offset, align 4
  %s6 = load %Section*, %Section** %s, align 8
  %len7 = load i32, i32* %len, align 4
  %icastD = sext i32 %len7 to i64
  %fun_result8 = call i8* @section_ptr_add(%Section* %s6, i64 %icastD)
  store i8* %fun_result8, i8** %ptr, align 8
  %ptr9 = load i8*, i8** %ptr, align 8
  %sym10 = load i8*, i8** %sym, align 8
  %len11 = load i32, i32* %len, align 4
  %icastD12 = sext i32 %len11 to i64
  %fun_result13 = call i8* @memcpy(i8* %ptr9, i8* %sym10, i64 %icastD12)
  %offset14 = load i32, i32* %offset, align 4
  ret i32 %offset14
}

define internal i32 @put_elf_sym(%Section* %0, i64 %1, i64 %2, i32 %3, i32 %4, i32 %5, i8* %6) {
entry:
  %base = alloca i32*, align 8
  %ptr = alloca i32*, align 8
  %hs = alloca %Section*, align 8
  %sym = alloca %come_anon88*, align 8
  %h = alloca i32, align 4
  %nbuckets = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %name_offset = alloca i32, align 4
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %value = alloca i64, align 8
  %value2 = alloca i64*, align 8
  store i64 %1, i64* %value, align 4
  store i64* %value, i64** %value2, align 8
  %size = alloca i64, align 8
  %size3 = alloca i64*, align 8
  store i64 %2, i64* %size, align 4
  store i64* %size, i64** %size3, align 8
  %info = alloca i32, align 4
  %info4 = alloca i32*, align 8
  store i32 %3, i32* %info, align 4
  store i32* %info, i32** %info4, align 8
  %other = alloca i32, align 4
  %other5 = alloca i32*, align 8
  store i32 %4, i32* %other, align 4
  store i32* %other, i32** %other5, align 8
  %shndx = alloca i32, align 4
  %shndx6 = alloca i32*, align 8
  store i32 %5, i32* %shndx, align 4
  store i32* %shndx, i32** %shndx6, align 8
  %name = alloca i8*, align 8
  %name7 = alloca i8**, align 8
  store i8* %6, i8** %name, align 8
  store i8** %name, i8*** %name7, align 8
  %s8 = load %Section*, %Section** %s, align 8
  %fun_result = call i8* @section_ptr_add(%Section* %s8, i64 24)
  %castAQ = bitcast i8* %fun_result to %come_anon88*
  store %come_anon88* %castAQ, %come_anon88** %sym, align 8
  %name9 = load i8*, i8** %name, align 8
  %icmpB = icmp ne i8* %name9, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %s10 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s10, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL, align 8
  %name11 = load i8*, i8** %name, align 8
  %fun_result12 = call i32 @put_elf_str(%Section* %link, i8* %name11)
  store i32 %fun_result12, i32* %name_offset, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  store i32 0, i32* %name_offset, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %sym13 = load %come_anon88*, %come_anon88** %sym, align 8
  %name_offset14 = load i32, i32* %name_offset, align 4
  %fieldTU = getelementptr inbounds %come_anon88, %come_anon88* %sym13, i32 0, i32 0
  store i32 %name_offset14, i32* %fieldTU, align 4
  %sym15 = load %come_anon88*, %come_anon88** %sym, align 8
  %value16 = load i64, i64* %value, align 4
  %fieldTU17 = getelementptr inbounds %come_anon88, %come_anon88* %sym15, i32 0, i32 4
  store i64 %value16, i64* %fieldTU17, align 4
  %sym18 = load %come_anon88*, %come_anon88** %sym, align 8
  %size19 = load i64, i64* %size, align 4
  %fieldTU20 = getelementptr inbounds %come_anon88, %come_anon88* %sym18, i32 0, i32 5
  store i64 %size19, i64* %fieldTU20, align 4
  %sym21 = load %come_anon88*, %come_anon88** %sym, align 8
  %info22 = load i32, i32* %info, align 4
  %icastJ = trunc i32 %info22 to i8
  %fieldTU23 = getelementptr inbounds %come_anon88, %come_anon88* %sym21, i32 0, i32 1
  store i8 %icastJ, i8* %fieldTU23, align 1
  %sym24 = load %come_anon88*, %come_anon88** %sym, align 8
  %other25 = load i32, i32* %other, align 4
  %icastJ26 = trunc i32 %other25 to i8
  %fieldTU27 = getelementptr inbounds %come_anon88, %come_anon88* %sym24, i32 0, i32 2
  store i8 %icastJ26, i8* %fieldTU27, align 1
  %sym28 = load %come_anon88*, %come_anon88** %sym, align 8
  %shndx29 = load i32, i32* %shndx, align 4
  %icastG = trunc i32 %shndx29 to i16
  %fieldTU30 = getelementptr inbounds %come_anon88, %come_anon88* %sym28, i32 0, i32 3
  store i16 %icastG, i16* %fieldTU30, align 2
  %sym31 = load %come_anon88*, %come_anon88** %sym, align 8
  %s32 = load %Section*, %Section** %s, align 8
  %fieldLLL33 = getelementptr inbounds %Section, %Section* %s32, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL33, align 8
  %castAQ34 = bitcast i8* %data to %come_anon88*
  %ptrToIntG = ptrtoint %come_anon88* %sym31 to i64
  %ptrToIntH = ptrtoint %come_anon88* %castAQ34 to i64
  %sub = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub, 24
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %sym_index, align 4
  %s35 = load %Section*, %Section** %s, align 8
  %fieldLLL36 = getelementptr inbounds %Section, %Section* %s35, i32 0, i32 16
  %hash = load %Section*, %Section** %fieldLLL36, align 8
  store %Section* %hash, %Section** %hs, align 8
  %hs37 = load %Section*, %Section** %hs, align 8
  %icmpB38 = icmp ne %Section* %hs37, null
  br i1 %icmpB38, label %cond_jump_then39, label %cond_end40

cond_jump_then39:                                 ; preds = %cond_end
  %hs41 = load %Section*, %Section** %hs, align 8
  %fun_result42 = call i8* @section_ptr_add(%Section* %hs41, i64 4)
  %castAQ43 = bitcast i8* %fun_result42 to i32*
  store i32* %castAQ43, i32** %ptr, align 8
  %hs44 = load %Section*, %Section** %hs, align 8
  %fieldLLL45 = getelementptr inbounds %Section, %Section* %hs44, i32 0, i32 1
  %data46 = load i8*, i8** %fieldLLL45, align 8
  %castAQ47 = bitcast i8* %data46 to i32*
  store i32* %castAQ47, i32** %base, align 8
  %info48 = load i32, i32* %info, align 4
  %icastJ49 = trunc i32 %info48 to i8
  %icastKY = zext i8 %icastJ49 to i32
  %rshifttmp = lshr i32 %icastKY, 4
  %not_eq = icmp ne i32 %rshifttmp, 0
  br i1 %not_eq, label %cond_jump_then50, label %cond_else_block51

cond_end40:                                       ; preds = %cond_end52, %cond_end
  %sym_index98 = load i32, i32* %sym_index, align 4
  ret i32 %sym_index98

cond_jump_then50:                                 ; preds = %cond_jump_then39
  %base53 = load i32*, i32** %base, align 8
  %element_addressAB = load i32*, i32** %base, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 0
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  store i32 %load_element, i32* %nbuckets, align 4
  %name54 = load i8*, i8** %name, align 8
  %fun_result55 = call i64 @elf_hash(i8* %name54)
  %nbuckets56 = load i32, i32* %nbuckets, align 4
  %icastD = sext i32 %nbuckets56 to i64
  %urem = urem i64 %fun_result55, %icastD
  %icastM57 = trunc i64 %urem to i32
  store i32 %icastM57, i32* %h, align 4
  %ptr58 = load i32*, i32** %ptr, align 8
  %base59 = load i32*, i32** %base, align 8
  %h60 = load i32, i32* %h, align 4
  %add = add i32 2, %h60
  %element_addressAB61 = load i32*, i32** %base, align 8
  %element_addressXYXZY62 = getelementptr inbounds i32, i32* %element_addressAB61, i32 %add
  %load_element63 = load i32, i32* %element_addressXYXZY62, align 4
  store i32 %load_element63, i32* %ptr58, align 4
  %base64 = load i32*, i32** %base, align 8
  %h65 = load i32, i32* %h, align 4
  %add66 = add i32 2, %h65
  %sym_index67 = load i32, i32* %sym_index, align 4
  %element_addressXYXY = getelementptr i32, i32* %base64, i32 %add66
  store i32 %sym_index67, i32* %element_addressXYXY, align 4
  %base68 = load i32*, i32** %base, align 8
  %element_addressAB69 = load i32*, i32** %base, align 8
  %element_addressXYXZY70 = getelementptr inbounds i32, i32* %element_addressAB69, i32 1
  %load_element71 = load i32, i32* %element_addressXYXZY70, align 4
  %loadB = load i32, i32* %element_addressXYXZY70, align 4
  %add72 = add i32 %loadB, 1
  store i32 %add72, i32* %element_addressXYXZY70, align 4
  %hs73 = load %Section*, %Section** %hs, align 8
  %hs74 = load %Section*, %Section** %hs, align 8
  %fieldLLL75 = getelementptr inbounds %Section, %Section* %hs74, i32 0, i32 13
  %nb_hashed_syms = load i32, i32* %fieldLLL75, align 4
  %add76 = add i32 %nb_hashed_syms, 1
  %fieldTU77 = getelementptr inbounds %Section, %Section* %hs73, i32 0, i32 13
  store i32 %add76, i32* %fieldTU77, align 4
  %hs78 = load %Section*, %Section** %hs, align 8
  %fieldLLL79 = getelementptr inbounds %Section, %Section* %hs78, i32 0, i32 13
  %nb_hashed_syms80 = load i32, i32* %fieldLLL79, align 4
  %sub81 = sub i32 %nb_hashed_syms80, 1
  %hs82 = load %Section*, %Section** %hs, align 8
  %fieldLLL83 = getelementptr inbounds %Section, %Section* %hs82, i32 0, i32 13
  %nb_hashed_syms84 = load i32, i32* %fieldLLL83, align 4
  %nbuckets85 = load i32, i32* %nbuckets, align 4
  %mul = mul i32 2, %nbuckets85
  %gt = icmp sgt i32 %nb_hashed_syms84, %mul
  br i1 %gt, label %cond_jump_then86, label %cond_end87

cond_else_block51:                                ; preds = %cond_jump_then39
  %ptr91 = load i32*, i32** %ptr, align 8
  store i32 0, i32* %ptr91, align 4
  %base92 = load i32*, i32** %base, align 8
  %element_addressAB93 = load i32*, i32** %base, align 8
  %element_addressXYXZY94 = getelementptr inbounds i32, i32* %element_addressAB93, i32 1
  %load_element95 = load i32, i32* %element_addressXYXZY94, align 4
  %loadB96 = load i32, i32* %element_addressXYXZY94, align 4
  %add97 = add i32 %loadB96, 1
  store i32 %add97, i32* %element_addressXYXZY94, align 4
  br label %cond_end52

cond_end52:                                       ; preds = %cond_else_block51, %cond_end87
  br label %cond_end40

cond_jump_then86:                                 ; preds = %cond_jump_then50
  %s88 = load %Section*, %Section** %s, align 8
  %nbuckets89 = load i32, i32* %nbuckets, align 4
  %mul90 = mul i32 2, %nbuckets89
  call void @rebuild_hash(%Section* %s88, i32 %mul90)
  br label %cond_end87

cond_end87:                                       ; preds = %cond_jump_then86, %cond_jump_then50
  br label %cond_end52
}

define internal i32 @add_elf_sym(%Section* %0, i64 %1, i64 %2, i32 %3, i32 %4, i32 %5, i8* %6) {
entry:
  %andand93 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand77 = alloca i1, align 1
  %andand = alloca i1, align 1
  %condtional_result_value = alloca i8, align 1
  %new_vis = alloca i8, align 1
  %esym_vis = alloca i8, align 1
  %sym_vis = alloca i8, align 1
  %esym_bind = alloca i32, align 4
  %sym_type = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %sym_bind = alloca i32, align 4
  %esym = alloca %come_anon88*, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %value = alloca i64, align 8
  %value2 = alloca i64*, align 8
  store i64 %1, i64* %value, align 4
  store i64* %value, i64** %value2, align 8
  %size = alloca i64, align 8
  %size3 = alloca i64*, align 8
  store i64 %2, i64* %size, align 4
  store i64* %size, i64** %size3, align 8
  %info = alloca i32, align 4
  %info4 = alloca i32*, align 8
  store i32 %3, i32* %info, align 4
  store i32* %info, i32** %info4, align 8
  %other = alloca i32, align 4
  %other5 = alloca i32*, align 8
  store i32 %4, i32* %other, align 4
  store i32* %other, i32** %other5, align 8
  %sh_num = alloca i32, align 4
  %sh_num6 = alloca i32*, align 8
  store i32 %5, i32* %sh_num, align 4
  store i32* %sh_num, i32** %sh_num6, align 8
  %name = alloca i8*, align 8
  %name7 = alloca i8**, align 8
  store i8* %6, i8** %name, align 8
  store i8** %name, i8*** %name7, align 8
  %info8 = load i32, i32* %info, align 4
  %icastJ = trunc i32 %info8 to i8
  %icastKY = zext i8 %icastJ to i32
  %rshifttmp = lshr i32 %icastKY, 4
  store i32 %rshifttmp, i32* %sym_bind, align 4
  %info9 = load i32, i32* %info, align 4
  %andtmp = and i32 %info9, 15
  store i32 %andtmp, i32* %sym_type, align 4
  %other10 = load i32, i32* %other, align 4
  %andtmp11 = and i32 %other10, 3
  %icastJ12 = trunc i32 %andtmp11 to i8
  store i8 %icastJ12, i8* %sym_vis, align 1
  %sym_bind13 = load i32, i32* %sym_bind, align 4
  %not_eq = icmp ne i32 %sym_bind13, 0
  br i1 %not_eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %s14 = load %Section*, %Section** %s, align 8
  %name15 = load i8*, i8** %name, align 8
  %fun_result = call i32 @find_elf_sym(%Section* %s14, i8* %name15)
  store i32 %fun_result, i32* %sym_index, align 4
  %sym_index16 = load i32, i32* %sym_index, align 4
  %logical_denial = icmp eq i32 %sym_index16, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then17, label %cond_end18

cond_else_block:                                  ; preds = %entry
  br label %add_elf_sym.do_def

cond_end:                                         ; preds = %add_elf_sym.do_def, %cond_end26
  %sym_index151 = load i32, i32* %sym_index, align 4
  ret i32 %sym_index151

cond_jump_then17:                                 ; preds = %cond_jump_then
  br label %add_elf_sym.do_def
  br label %cond_end18

cond_end18:                                       ; preds = %cond_jump_then17, %cond_jump_then
  %s19 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s19, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %castAQ = bitcast i8* %data to %come_anon88*
  %sym_index20 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %sym_index20
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %esym, align 8
  %esym21 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL22 = getelementptr inbounds %come_anon88, %come_anon88* %esym21, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL22, align 2
  %not_eq23 = icmp ne i16 %st_shndx, 0
  br i1 %not_eq23, label %cond_jump_then24, label %cond_else_block25

add_elf_sym.do_def:                               ; preds = %cond_else_block, %cond_jump_then17
  %s139 = load %Section*, %Section** %s, align 8
  %value140 = load i64, i64* %value, align 4
  %size141 = load i64, i64* %size, align 4
  %sym_bind142 = load i32, i32* %sym_bind, align 4
  %lshifttmp143 = shl i32 %sym_bind142, 4
  %sym_type144 = load i32, i32* %sym_type, align 4
  %andtmp145 = and i32 %sym_type144, 15
  %add146 = add i32 %lshifttmp143, %andtmp145
  %other147 = load i32, i32* %other, align 4
  %sh_num148 = load i32, i32* %sh_num, align 4
  %name149 = load i8*, i8** %name, align 8
  %fun_result150 = call i32 @put_elf_sym(%Section* %s139, i64 %value140, i64 %size141, i32 %add146, i32 %other147, i32 %sh_num148, i8* %name149)
  store i32 %fun_result150, i32* %sym_index, align 4
  br label %cond_end

cond_jump_then24:                                 ; preds = %cond_end18
  %esym27 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL28 = getelementptr inbounds %come_anon88, %come_anon88* %esym27, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL28, align 1
  %icastKY29 = zext i8 %st_info to i32
  %rshifttmp30 = lshr i32 %icastKY29, 4
  store i32 %rshifttmp30, i32* %esym_bind, align 4
  %esym31 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL32 = getelementptr inbounds %come_anon88, %come_anon88* %esym31, i32 0, i32 2
  %st_other = load i8, i8* %fieldLLL32, align 1
  %icastKY33 = zext i8 %st_other to i32
  %andtmp34 = and i32 %icastKY33, 3
  %icastJ35 = trunc i32 %andtmp34 to i8
  store i8 %icastJ35, i8* %esym_vis, align 1
  %esym_vis36 = load i8, i8* %esym_vis, align 1
  %eq = icmp eq i8 %esym_vis36, 0
  br i1 %eq, label %cond_jump_then37, label %cond_jump_elif0

cond_else_block25:                                ; preds = %cond_end18
  br label %add_elf_sym.do_patch

cond_end26:                                       ; preds = %add_elf_sym.do_patch, %cond_end70
  br label %cond_end

cond_jump_then37:                                 ; preds = %cond_jump_then24
  %sym_vis40 = load i8, i8* %sym_vis, align 1
  store i8 %sym_vis40, i8* %new_vis, align 1
  br label %cond_end39

cond_jump_elif0:                                  ; preds = %cond_jump_then24
  %sym_vis41 = load i8, i8* %sym_vis, align 1
  %eq42 = icmp eq i8 %sym_vis41, 0
  br i1 %eq42, label %cond_jump_elif_then0, label %cond_else_block38

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %esym_vis43 = load i8, i8* %esym_vis, align 1
  store i8 %esym_vis43, i8* %new_vis, align 1
  br label %cond_end39

cond_else_block38:                                ; preds = %cond_jump_elif0
  %esym_vis44 = load i8, i8* %esym_vis, align 1
  %sym_vis45 = load i8, i8* %sym_vis, align 1
  %le = icmp ult i8 %esym_vis44, %sym_vis45
  br i1 %le, label %cond_jump_then46, label %cond_else_block47

cond_end39:                                       ; preds = %cond_end48, %cond_jump_elif_then0, %cond_jump_then37
  %esym51 = load %come_anon88*, %come_anon88** %esym, align 8
  %esym52 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL53 = getelementptr inbounds %come_anon88, %come_anon88* %esym52, i32 0, i32 2
  %st_other54 = load i8, i8* %fieldLLL53, align 1
  %icastKY55 = zext i8 %st_other54 to i32
  %andtmp56 = and i32 %icastKY55, -4
  %new_vis57 = load i8, i8* %new_vis, align 1
  %icastKY58 = zext i8 %new_vis57 to i32
  %ortmp = or i32 %andtmp56, %icastKY58
  %icastJ59 = trunc i32 %ortmp to i8
  %fieldTU = getelementptr inbounds %come_anon88, %come_anon88* %esym51, i32 0, i32 2
  store i8 %icastJ59, i8* %fieldTU, align 1
  %esym60 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL61 = getelementptr inbounds %come_anon88, %come_anon88* %esym60, i32 0, i32 2
  %st_other62 = load i8, i8* %fieldLLL61, align 1
  %icastKY63 = zext i8 %st_other62 to i32
  store i32 %icastKY63, i32* %other, align 4
  %sh_num64 = load i32, i32* %sh_num, align 4
  %eq65 = icmp eq i32 %sh_num64, 0
  br i1 %eq65, label %cond_jump_then66, label %cond_jump_elif067

cond_jump_then46:                                 ; preds = %cond_else_block38
  %esym_vis49 = load i8, i8* %esym_vis, align 1
  store i8 %esym_vis49, i8* %condtional_result_value, align 1
  br label %cond_end48

cond_else_block47:                                ; preds = %cond_else_block38
  %sym_vis50 = load i8, i8* %sym_vis, align 1
  store i8 %sym_vis50, i8* %condtional_result_value, align 1
  br label %cond_end48

cond_end48:                                       ; preds = %cond_else_block47, %cond_jump_then46
  %conditional_result_value = load i8, i8* %condtional_result_value, align 1
  store i8 %conditional_result_value, i8* %new_vis, align 1
  br label %cond_end39

cond_jump_then66:                                 ; preds = %cond_end39
  br label %cond_end70

cond_jump_elif067:                                ; preds = %cond_end39
  %sym_bind71 = load i32, i32* %sym_bind, align 4
  %eq72 = icmp eq i32 %sym_bind71, 1
  store i1 %eq72, i1* %andand, align 1
  br i1 %eq72, label %cond_jump_then73, label %cond_jump_end

cond_jump_elif_then068:                           ; preds = %cond_jump_end
  br label %add_elf_sym.do_patch
  br label %cond_end70

cond_jump_elif1:                                  ; preds = %cond_jump_end
  %sym_bind78 = load i32, i32* %sym_bind, align 4
  %eq79 = icmp eq i32 %sym_bind78, 2
  store i1 %eq79, i1* %andand77, align 1
  br i1 %eq79, label %cond_jump_then80, label %cond_jump_end81

cond_jump_elif_then1:                             ; preds = %cond_jump_end81
  br label %cond_end70

cond_jump_elif2:                                  ; preds = %cond_jump_end81
  %sym_vis86 = load i8, i8* %sym_vis, align 1
  %eq87 = icmp eq i8 %sym_vis86, 2
  store i1 %eq87, i1* %oror, align 1
  br i1 %eq87, label %cond_jump_end89, label %cond_jump_then88

cond_jump_elif_then2:                             ; preds = %cond_jump_end89
  br label %cond_end70

cond_jump_elif3:                                  ; preds = %cond_jump_end89
  %esym94 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL95 = getelementptr inbounds %come_anon88, %come_anon88* %esym94, i32 0, i32 3
  %st_shndx96 = load i16, i16* %fieldLLL95, align 2
  %eq97 = icmp eq i16 %st_shndx96, -14
  store i1 %eq97, i1* %andand93, align 1
  br i1 %eq97, label %cond_jump_then98, label %cond_jump_end99

cond_jump_elif_then3:                             ; preds = %cond_jump_end99
  br label %add_elf_sym.do_patch
  br label %cond_end70

cond_jump_elif4:                                  ; preds = %cond_jump_end99
  %s104 = load %Section*, %Section** %s, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL105 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 22
  %dynsymtab_section = load %Section*, %Section** %fieldLLL105, align 8
  %eq106 = icmp eq %Section* %s104, %dynsymtab_section
  br i1 %eq106, label %cond_jump_elif_then4, label %cond_else_block69

cond_jump_elif_then4:                             ; preds = %cond_jump_elif4
  br label %cond_end70

cond_else_block69:                                ; preds = %cond_jump_elif4
  %sym_bind107 = load i32, i32* %sym_bind, align 4
  %sh_num108 = load i32, i32* %sh_num, align 4
  %new_vis109 = load i8, i8* %new_vis, align 1
  %icastKY110 = zext i8 %new_vis109 to i32
  %esym_bind111 = load i32, i32* %esym_bind, align 4
  %esym112 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL113 = getelementptr inbounds %come_anon88, %come_anon88* %esym112, i32 0, i32 3
  %st_shndx114 = load i16, i16* %fieldLLL113, align 2
  %icastKY115 = zext i16 %st_shndx114 to i32
  %esym_vis116 = load i8, i8* %esym_vis, align 1
  %icastKY117 = zext i8 %esym_vis116 to i32
  %fun_result118 = call i32 (i8*, ...) @printf(i8* bitcast ([73 x i8]* @218 to i8*), i32 %sym_bind107, i32 %sh_num108, i32 %icastKY110, i32 %esym_bind111, i32 %icastKY115, i32 %icastKY117)
  %name119 = load i8*, i8** %name, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([19 x i8]* @219 to i8*), i8* %name119)
  br label %cond_end70

cond_end70:                                       ; preds = %cond_else_block69, %cond_jump_elif_then4, %cond_jump_elif_then3, %cond_jump_elif_then2, %cond_jump_elif_then1, %cond_jump_elif_then068, %cond_jump_then66
  br label %cond_end26

cond_jump_then73:                                 ; preds = %cond_jump_elif067
  %esym_bind74 = load i32, i32* %esym_bind, align 4
  %eq75 = icmp eq i32 %esym_bind74, 2
  %andand76 = and i1 %eq72, %eq75
  store i1 %andand76, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then73, %cond_jump_elif067
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_elif_then068, label %cond_jump_elif1

add_elf_sym.do_patch:                             ; preds = %cond_else_block25, %cond_jump_elif_then3, %cond_jump_elif_then068
  %esym120 = load %come_anon88*, %come_anon88** %esym, align 8
  %sym_bind121 = load i32, i32* %sym_bind, align 4
  %lshifttmp = shl i32 %sym_bind121, 4
  %sym_type122 = load i32, i32* %sym_type, align 4
  %andtmp123 = and i32 %sym_type122, 15
  %add = add i32 %lshifttmp, %andtmp123
  %icastJ124 = trunc i32 %add to i8
  %fieldTU125 = getelementptr inbounds %come_anon88, %come_anon88* %esym120, i32 0, i32 1
  store i8 %icastJ124, i8* %fieldTU125, align 1
  %esym126 = load %come_anon88*, %come_anon88** %esym, align 8
  %sh_num127 = load i32, i32* %sh_num, align 4
  %icastG = trunc i32 %sh_num127 to i16
  %fieldTU128 = getelementptr inbounds %come_anon88, %come_anon88* %esym126, i32 0, i32 3
  store i16 %icastG, i16* %fieldTU128, align 2
  %esym129 = load %come_anon88*, %come_anon88** %esym, align 8
  %value130 = load i64, i64* %value, align 4
  %fieldTU131 = getelementptr inbounds %come_anon88, %come_anon88* %esym129, i32 0, i32 4
  store i64 %value130, i64* %fieldTU131, align 4
  %esym132 = load %come_anon88*, %come_anon88** %esym, align 8
  %size133 = load i64, i64* %size, align 4
  %fieldTU134 = getelementptr inbounds %come_anon88, %come_anon88* %esym132, i32 0, i32 5
  store i64 %size133, i64* %fieldTU134, align 4
  %esym135 = load %come_anon88*, %come_anon88** %esym, align 8
  %other136 = load i32, i32* %other, align 4
  %icastJ137 = trunc i32 %other136 to i8
  %fieldTU138 = getelementptr inbounds %come_anon88, %come_anon88* %esym135, i32 0, i32 2
  store i8 %icastJ137, i8* %fieldTU138, align 1
  br label %cond_end26

cond_jump_then80:                                 ; preds = %cond_jump_elif1
  %esym_bind82 = load i32, i32* %esym_bind, align 4
  %eq83 = icmp eq i32 %esym_bind82, 1
  %andand84 = and i1 %eq79, %eq83
  store i1 %andand84, i1* %andand77, align 1
  br label %cond_jump_end81

cond_jump_end81:                                  ; preds = %cond_jump_then80, %cond_jump_elif1
  %andand_result_value85 = load i1, i1* %andand77, align 1
  br i1 %andand_result_value85, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_then88:                                 ; preds = %cond_jump_elif2
  %sym_vis90 = load i8, i8* %sym_vis, align 1
  %eq91 = icmp eq i8 %sym_vis90, 1
  %oror92 = or i1 %eq87, %eq91
  store i1 %oror92, i1* %oror, align 1
  br label %cond_jump_end89

cond_jump_end89:                                  ; preds = %cond_jump_then88, %cond_jump_elif2
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then2, label %cond_jump_elif3

cond_jump_then98:                                 ; preds = %cond_jump_elif3
  %sh_num100 = load i32, i32* %sh_num, align 4
  %le101 = icmp slt i32 %sh_num100, 65280
  %andand102 = and i1 %eq97, %le101
  store i1 %andand102, i1* %andand93, align 1
  br label %cond_jump_end99

cond_jump_end99:                                  ; preds = %cond_jump_then98, %cond_jump_elif3
  %andand_result_value103 = load i1, i1* %andand93, align 1
  br i1 %andand_result_value103, label %cond_jump_elif_then3, label %cond_jump_elif4
}

define internal void @put_elf_reloc(%Section* %0, %Section* %1, i64 %2, i32 %3, i32 %4) {
entry:
  %rel = alloca %come_anon94*, align 8
  %sr = alloca %Section*, align 8
  %buf = alloca [256 x i8], align 1
  %symtab = alloca %Section*, align 8
  %symtab1 = alloca %Section**, align 8
  store %Section* %0, %Section** %symtab, align 8
  store %Section** %symtab, %Section*** %symtab1, align 8
  %s = alloca %Section*, align 8
  %s2 = alloca %Section**, align 8
  store %Section* %1, %Section** %s, align 8
  store %Section** %s, %Section*** %s2, align 8
  %offset = alloca i64, align 8
  %offset3 = alloca i64*, align 8
  store i64 %2, i64* %offset, align 4
  store i64* %offset, i64** %offset3, align 8
  %type = alloca i32, align 4
  %type4 = alloca i32*, align 8
  store i32 %3, i32* %type, align 4
  store i32* %type, i32** %type4, align 8
  %symbol = alloca i32, align 4
  %symbol5 = alloca i32*, align 8
  store i32 %4, i32* %symbol, align 4
  store i32* %symbol, i32** %symbol5, align 8
  %s6 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s6, i32 0, i32 15
  %reloc = load %Section*, %Section** %fieldLLL, align 8
  store %Section* %reloc, %Section** %sr, align 8
  %sr7 = load %Section*, %Section** %sr, align 8
  %logical_denial = icmp eq %Section* %sr7, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %autocast = bitcast [256 x i8]* %buf to i8*
  %s8 = load %Section*, %Section** %s, align 8
  %fieldRRRROOU = getelementptr inbounds %Section, %Section* %s8, i32 0, i32 18
  %autocast9 = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %fun_result = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 256, i8* bitcast ([8 x i8]* @220 to i8*), i8* %autocast9)
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %autocast10 = bitcast [256 x i8]* %buf to i8*
  %symtab11 = load %Section*, %Section** %symtab, align 8
  %fieldLLL12 = getelementptr inbounds %Section, %Section* %symtab11, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL12, align 4
  %fun_result13 = call %Section* @new_section(%TCCState* %tcc_state, i8* %autocast10, i32 4, i32 %sh_flags)
  store %Section* %fun_result13, %Section** %sr, align 8
  %sr14 = load %Section*, %Section** %sr, align 8
  %fieldTU = getelementptr inbounds %Section, %Section* %sr14, i32 0, i32 9
  store i32 24, i32* %fieldTU, align 4
  %sr15 = load %Section*, %Section** %sr, align 8
  %symtab16 = load %Section*, %Section** %symtab, align 8
  %fieldTU17 = getelementptr inbounds %Section, %Section* %sr15, i32 0, i32 14
  store %Section* %symtab16, %Section** %fieldTU17, align 8
  %sr18 = load %Section*, %Section** %sr, align 8
  %s19 = load %Section*, %Section** %s, align 8
  %fieldLLL20 = getelementptr inbounds %Section, %Section* %s19, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL20, align 4
  %fieldTU21 = getelementptr inbounds %Section, %Section* %sr18, i32 0, i32 7
  store i32 %sh_num, i32* %fieldTU21, align 4
  %s22 = load %Section*, %Section** %s, align 8
  %sr23 = load %Section*, %Section** %sr, align 8
  %fieldTU24 = getelementptr inbounds %Section, %Section* %s22, i32 0, i32 15
  store %Section* %sr23, %Section** %fieldTU24, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %sr25 = load %Section*, %Section** %sr, align 8
  %fun_result26 = call i8* @section_ptr_add(%Section* %sr25, i64 24)
  %castAQ = bitcast i8* %fun_result26 to %come_anon94*
  store %come_anon94* %castAQ, %come_anon94** %rel, align 8
  %rel27 = load %come_anon94*, %come_anon94** %rel, align 8
  %offset28 = load i64, i64* %offset, align 4
  %fieldTU29 = getelementptr inbounds %come_anon94, %come_anon94* %rel27, i32 0, i32 0
  store i64 %offset28, i64* %fieldTU29, align 4
  %rel30 = load %come_anon94*, %come_anon94** %rel, align 8
  %symbol31 = load i32, i32* %symbol, align 4
  %icastD = sext i32 %symbol31 to i64
  %lshifttmp = shl i64 %icastD, 32
  %type32 = load i32, i32* %type, align 4
  %icastD33 = sext i32 %type32 to i64
  %add = add i64 %lshifttmp, %icastD33
  %fieldTU34 = getelementptr inbounds %come_anon94, %come_anon94* %rel30, i32 0, i32 1
  store i64 %add, i64* %fieldTU34, align 4
  %rel35 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldTU36 = getelementptr inbounds %come_anon94, %come_anon94* %rel35, i32 0, i32 2
  store i64 0, i64* %fieldTU36, align 4
  ret void
}

define internal void @put_stabs(i8* %0, i32 %1, i32 %2, i32 %3, i64 %4) {
entry:
  %sym = alloca %come_anon133*, align 8
  %str = alloca i8*, align 8
  %str1 = alloca i8**, align 8
  store i8* %0, i8** %str, align 8
  store i8** %str, i8*** %str1, align 8
  %type = alloca i32, align 4
  %type2 = alloca i32*, align 8
  store i32 %1, i32* %type, align 4
  store i32* %type, i32** %type2, align 8
  %other = alloca i32, align 4
  %other3 = alloca i32*, align 8
  store i32 %2, i32* %other, align 4
  store i32* %other, i32** %other3, align 8
  %desc = alloca i32, align 4
  %desc4 = alloca i32*, align 8
  store i32 %3, i32* %desc, align 4
  store i32* %desc, i32** %desc4, align 8
  %value = alloca i64, align 8
  %value5 = alloca i64*, align 8
  store i64 %4, i64* %value, align 4
  store i64* %value, i64** %value5, align 8
  %stab_section = load %Section*, %Section** @stab_section, align 8
  %fun_result = call i8* @section_ptr_add(%Section* %stab_section, i64 12)
  %castAQ = bitcast i8* %fun_result to %come_anon133*
  store %come_anon133* %castAQ, %come_anon133** %sym, align 8
  %str6 = load i8*, i8** %str, align 8
  %icmpB = icmp ne i8* %str6, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %sym7 = load %come_anon133*, %come_anon133** %sym, align 8
  %stabstr_section = load %Section*, %Section** @stabstr_section, align 8
  %str8 = load i8*, i8** %str, align 8
  %fun_result9 = call i32 @put_elf_str(%Section* %stabstr_section, i8* %str8)
  %fieldTU = getelementptr inbounds %come_anon133, %come_anon133* %sym7, i32 0, i32 0
  store i32 %fun_result9, i32* %fieldTU, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %sym10 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldTU11 = getelementptr inbounds %come_anon133, %come_anon133* %sym10, i32 0, i32 0
  store i32 0, i32* %fieldTU11, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %sym12 = load %come_anon133*, %come_anon133** %sym, align 8
  %type13 = load i32, i32* %type, align 4
  %icastJ = trunc i32 %type13 to i8
  %fieldTU14 = getelementptr inbounds %come_anon133, %come_anon133* %sym12, i32 0, i32 1
  store i8 %icastJ, i8* %fieldTU14, align 1
  %sym15 = load %come_anon133*, %come_anon133** %sym, align 8
  %other16 = load i32, i32* %other, align 4
  %icastJ17 = trunc i32 %other16 to i8
  %fieldTU18 = getelementptr inbounds %come_anon133, %come_anon133* %sym15, i32 0, i32 2
  store i8 %icastJ17, i8* %fieldTU18, align 1
  %sym19 = load %come_anon133*, %come_anon133** %sym, align 8
  %desc20 = load i32, i32* %desc, align 4
  %icastG = trunc i32 %desc20 to i16
  %fieldTU21 = getelementptr inbounds %come_anon133, %come_anon133* %sym19, i32 0, i32 3
  store i16 %icastG, i16* %fieldTU21, align 2
  %sym22 = load %come_anon133*, %come_anon133** %sym, align 8
  %value23 = load i64, i64* %value, align 4
  %icastM = trunc i64 %value23 to i32
  %fieldTU24 = getelementptr inbounds %come_anon133, %come_anon133* %sym22, i32 0, i32 4
  store i32 %icastM, i32* %fieldTU24, align 4
  ret void
}

define internal void @put_stabs_r(i8* %0, i32 %1, i32 %2, i32 %3, i64 %4, %Section* %5, i32 %6) {
entry:
  %str = alloca i8*, align 8
  %str1 = alloca i8**, align 8
  store i8* %0, i8** %str, align 8
  store i8** %str, i8*** %str1, align 8
  %type = alloca i32, align 4
  %type2 = alloca i32*, align 8
  store i32 %1, i32* %type, align 4
  store i32* %type, i32** %type2, align 8
  %other = alloca i32, align 4
  %other3 = alloca i32*, align 8
  store i32 %2, i32* %other, align 4
  store i32* %other, i32** %other3, align 8
  %desc = alloca i32, align 4
  %desc4 = alloca i32*, align 8
  store i32 %3, i32* %desc, align 4
  store i32* %desc, i32** %desc4, align 8
  %value = alloca i64, align 8
  %value5 = alloca i64*, align 8
  store i64 %4, i64* %value, align 4
  store i64* %value, i64** %value5, align 8
  %sec = alloca %Section*, align 8
  %sec6 = alloca %Section**, align 8
  store %Section* %5, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec6, align 8
  %sym_index = alloca i32, align 4
  %sym_index7 = alloca i32*, align 8
  store i32 %6, i32* %sym_index, align 4
  store i32* %sym_index, i32** %sym_index7, align 8
  %str8 = load i8*, i8** %str, align 8
  %type9 = load i32, i32* %type, align 4
  %other10 = load i32, i32* %other, align 4
  %desc11 = load i32, i32* %desc, align 4
  %value12 = load i64, i64* %value, align 4
  call void @put_stabs(i8* %str8, i32 %type9, i32 %other10, i32 %desc11, i64 %value12)
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %stab_section = load %Section*, %Section** @stab_section, align 8
  %stab_section13 = load %Section*, %Section** @stab_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %stab_section13, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  %sub = sub i64 %data_offset, 4
  %sym_index14 = load i32, i32* %sym_index, align 4
  call void @put_elf_reloc(%Section* %symtab_section, %Section* %stab_section, i64 %sub, i32 1, i32 %sym_index14)
  ret void
}

define internal void @put_stabn(i32 %0, i32 %1, i32 %2, i32 %3) {
entry:
  %type = alloca i32, align 4
  %type1 = alloca i32*, align 8
  store i32 %0, i32* %type, align 4
  store i32* %type, i32** %type1, align 8
  %other = alloca i32, align 4
  %other2 = alloca i32*, align 8
  store i32 %1, i32* %other, align 4
  store i32* %other, i32** %other2, align 8
  %desc = alloca i32, align 4
  %desc3 = alloca i32*, align 8
  store i32 %2, i32* %desc, align 4
  store i32* %desc, i32** %desc3, align 8
  %value = alloca i32, align 4
  %value4 = alloca i32*, align 8
  store i32 %3, i32* %value, align 4
  store i32* %value, i32** %value4, align 8
  %type5 = load i32, i32* %type, align 4
  %other6 = load i32, i32* %other, align 4
  %desc7 = load i32, i32* %desc, align 4
  %value8 = load i32, i32* %value, align 4
  %icastD = sext i32 %value8 to i64
  call void @put_stabs(i8* null, i32 %type5, i32 %other6, i32 %desc7, i64 %icastD)
  ret void
}

define internal void @put_stabd(i32 %0, i32 %1, i32 %2) {
entry:
  %type = alloca i32, align 4
  %type1 = alloca i32*, align 8
  store i32 %0, i32* %type, align 4
  store i32* %type, i32** %type1, align 8
  %other = alloca i32, align 4
  %other2 = alloca i32*, align 8
  store i32 %1, i32* %other, align 4
  store i32* %other, i32** %other2, align 8
  %desc = alloca i32, align 4
  %desc3 = alloca i32*, align 8
  store i32 %2, i32* %desc, align 4
  store i32* %desc, i32** %desc3, align 8
  %type4 = load i32, i32* %type, align 4
  %other5 = load i32, i32* %other, align 4
  %desc6 = load i32, i32* %desc, align 4
  call void @put_stabs(i8* null, i32 %type4, i32 %other5, i32 %desc6, i64 0)
  ret void
}

define internal i32 @tcc_add_dll(%TCCState* %0, i8* %1, i32 %2) {
entry:
  %i = alloca i32, align 4
  %buf = alloca [1024 x i8], align 1
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %filename = alloca i8*, align 8
  %filename2 = alloca i8**, align 8
  store i8* %1, i8** %filename, align 8
  store i8** %filename, i8*** %filename2, align 8
  %flags = alloca i32, align 4
  %flags3 = alloca i32*, align 8
  store i32 %2, i32* %flags, align 4
  store i32* %flags, i32** %flags3, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %i14 = load i32, i32* %i, align 4
  %add = add i32 %i14, 1
  store i32 %add, i32* %i, align 4
  %i15 = load i32, i32* %i, align 4
  %sub = sub i32 %i15, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i4 = load i32, i32* %i, align 4
  %s5 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s5, i32 0, i32 10
  %nb_library_paths = load i32, i32* %fieldLLL, align 4
  %le = icmp slt i32 %i4, %nb_library_paths
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %autocast = bitcast [1024 x i8]* %buf to i8*
  %s6 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL7 = getelementptr inbounds %TCCState, %TCCState* %s6, i32 0, i32 9
  %library_paths = load i8**, i8*** %fieldLLL7, align 8
  %i8 = load i32, i32* %i, align 4
  %element_addressAB = load i8**, i8*** %fieldLLL7, align 8
  %element_addressXYXZY = getelementptr inbounds i8*, i8** %element_addressAB, i32 %i8
  %load_element = load i8*, i8** %element_addressXYXZY, align 8
  %filename9 = load i8*, i8** %filename, align 8
  %fun_result = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 1024, i8* bitcast ([6 x i8]* @337 to i8*), i8* %load_element, i8* %filename9)
  %s10 = load %TCCState*, %TCCState** %s, align 8
  %autocast11 = bitcast [1024 x i8]* %buf to i8*
  %flags12 = load i32, i32* %flags, align 4
  %fun_result13 = call i32 @tcc_add_file_internal(%TCCState* %s10, i8* %autocast11, i32 %flags12)
  %eq = icmp eq i32 %fun_result13, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 -1

cond_jump_then:                                   ; preds = %cond_then_block
  ret i32 0

cond_end:                                         ; preds = %cond_then_block
  br label %loop_continue_top_block
}

define internal i32 @tcc_add_file_internal(%TCCState* %0, i8* %1, i32 %2) {
entry:
  %h = alloca i8*, align 8
  %andand59 = alloca i1, align 1
  %andand58 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %saved_file = alloca %BufferedFile*, align 8
  %ret = alloca i32, align 4
  %fd = alloca i32, align 4
  %ehdr = alloca %come_anon84, align 8
  %castXXXX = bitcast %come_anon84* %ehdr to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %ext = alloca i8*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %filename = alloca i8*, align 8
  %filename2 = alloca i8**, align 8
  store i8* %1, i8** %filename, align 8
  store i8** %filename, i8*** %filename2, align 8
  %flags = alloca i32, align 4
  %flags3 = alloca i32*, align 8
  store i32 %2, i32* %flags, align 4
  store i32* %flags, i32** %flags3, align 8
  %filename4 = load i8*, i8** %filename, align 8
  %fun_result = call i8* @tcc_fileextension(i8* %filename4)
  store i8* %fun_result, i8** %ext, align 8
  %ext5 = load i8*, i8** %ext, align 8
  %element_addressAB = load i8*, i8** %ext, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icmpA = icmp ne i8 %load_element, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %ext6 = load i8*, i8** %ext, align 8
  %ptrToIntC = ptrtoint i8* %ext6 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %ext, align 8
  %ext7 = load i8*, i8** %ext, align 8
  %ptrToIntI = ptrtoint i8* %ext7 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  store %BufferedFile* %file, %BufferedFile** %saved_file, align 8
  %s18 = load %TCCState*, %TCCState** %s1, align 8
  %filename9 = load i8*, i8** %filename, align 8
  %fun_result10 = call %BufferedFile* @tcc_open(%TCCState* %s18, i8* %filename9)
  store %BufferedFile* %fun_result10, %BufferedFile** @file, align 8
  %file11 = load %BufferedFile*, %BufferedFile** @file, align 8
  %logical_denial = icmp eq %BufferedFile* %file11, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA12 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA12, label %cond_jump_then13, label %cond_end14

cond_jump_then13:                                 ; preds = %cond_end
  %flags15 = load i32, i32* %flags, align 4
  %andtmp = and i32 %flags15, 1
  %icmpA16 = icmp ne i32 %andtmp, 0
  br i1 %icmpA16, label %cond_jump_then17, label %cond_end18

cond_end14:                                       ; preds = %cond_end18, %cond_end
  %flags20 = load i32, i32* %flags, align 4
  %andtmp21 = and i32 %flags20, 4
  %icmpA22 = icmp ne i32 %andtmp21, 0
  br i1 %icmpA22, label %cond_jump_then23, label %cond_jump_elif0

cond_jump_then17:                                 ; preds = %cond_jump_then13
  %filename19 = load i8*, i8** %filename, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([20 x i8]* @331 to i8*), i8* %filename19)
  br label %cond_end18

cond_end18:                                       ; preds = %cond_jump_then17, %cond_jump_then13
  store i32 -1, i32* %ret, align 4
  br label %tcc_add_file_internal.fail1
  br label %cond_end14

tcc_add_file_internal.fail1:                      ; preds = %tcc_add_file_internal.the_end, %cond_end18
  %saved_file144 = load %BufferedFile*, %BufferedFile** %saved_file, align 8
  store %BufferedFile* %saved_file144, %BufferedFile** @file, align 8
  %ret145 = load i32, i32* %ret, align 4
  ret i32 %ret145
  br label %tcc_add_file_internal.fail

cond_jump_then23:                                 ; preds = %cond_end14
  %s125 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result26 = call i32 @tcc_preprocess(%TCCState* %s125)
  store i32 %fun_result26, i32* %ret, align 4
  br label %cond_end24

cond_jump_elif0:                                  ; preds = %cond_end14
  %ext27 = load i8*, i8** %ext, align 8
  %element_addressAB28 = load i8*, i8** %ext, align 8
  %element_addressXYXZY29 = getelementptr inbounds i8, i8* %element_addressAB28, i32 0
  %load_element30 = load i8, i8* %element_addressXYXZY29, align 1
  %logical_denial31 = icmp eq i8 %load_element30, 0
  %castOOOO32 = zext i1 %logical_denial31 to i32
  %icmpA33 = icmp ne i32 %castOOOO32, 0
  store i1 %icmpA33, i1* %oror, align 1
  br i1 %icmpA33, label %cond_jump_end, label %cond_jump_then34

cond_jump_elif_then0:                             ; preds = %cond_jump_end
  %s141 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result42 = call i32 @tcc_compile(%TCCState* %s141)
  store i32 %fun_result42, i32* %ret, align 4
  br label %cond_end24

cond_else_block:                                  ; preds = %cond_jump_end
  %file43 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file43, i32 0, i32 2
  %fd44 = load i32, i32* %fieldLLL, align 4
  store i32 %fd44, i32* %fd, align 4
  %fd45 = load i32, i32* %fd, align 4
  %ehdr46 = load %come_anon84, %come_anon84* %ehdr, align 4
  %castAQ = bitcast %come_anon84* %ehdr to i8*
  %ehdr47 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fun_result48 = call i64 @read(i32 %fd45, i8* %castAQ, i64 64)
  %icastM = trunc i64 %fun_result48 to i32
  store i32 %icastM, i32* %ret, align 4
  %fd49 = load i32, i32* %fd, align 4
  %fun_result50 = call i64 @lseek(i32 %fd49, i64 0, i32 0)
  %ret51 = load i32, i32* %ret, align 4
  %leeq = icmp sle i32 %ret51, 0
  br i1 %leeq, label %cond_jump_then52, label %cond_jump_elif053

cond_end24:                                       ; preds = %cond_end94, %cond_jump_elif_then0, %cond_jump_then23
  br label %tcc_add_file_internal.the_end

cond_jump_then34:                                 ; preds = %cond_jump_elif0
  %ext35 = load i8*, i8** %ext, align 8
  %fun_result36 = call i32 @strcmp(i8* %ext35, i8* bitcast ([2 x i8]* @332 to i8*))
  %logical_denial37 = icmp eq i32 %fun_result36, 0
  %castOOOO38 = zext i1 %logical_denial37 to i32
  %icmpA39 = icmp ne i32 %castOOOO38, 0
  %oror40 = or i1 %icmpA33, %icmpA39
  store i1 %oror40, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then34, %cond_jump_elif0
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_then52:                                 ; preds = %cond_else_block
  call void (i8*, ...) @error_noabort(i8* bitcast ([22 x i8]* @333 to i8*))
  br label %tcc_add_file_internal.fail
  br label %cond_end55

cond_jump_elif053:                                ; preds = %cond_else_block
  %ret56 = load i32, i32* %ret, align 4
  %ehdr57 = load %come_anon84, %come_anon84* %ehdr, align 4
  %not_eq = icmp ne i32 %ret56, 64
  br i1 %not_eq, label %cond_jump_elif_then054, label %cond_end55

cond_jump_elif_then054:                           ; preds = %cond_jump_elif053
  br label %tcc_add_file_internal.try_load_script
  br label %cond_end55

cond_end55:                                       ; preds = %cond_jump_elif_then054, %cond_jump_elif053, %cond_jump_then52
  %ehdr60 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG = bitcast [16 x i8]* %fieldRRRR to i8*
  %gepLY = getelementptr i8, i8* %array_castG, i32 0
  %elementYYY = load i8, i8* %gepLY, align 1
  %eq = icmp eq i8 %elementYYY, 127
  store i1 %eq, i1* %andand59, align 1
  br i1 %eq, label %cond_jump_then61, label %cond_jump_end62

tcc_add_file_internal.fail:                       ; preds = %tcc_add_file_internal.fail1, %cond_jump_then141, %cond_else_block101, %cond_jump_then52
  store i32 -1, i32* %ret, align 4
  br label %tcc_add_file_internal.the_end
  ret i32 0

tcc_add_file_internal.try_load_script:            ; preds = %cond_else_block93, %cond_jump_elif_then054
  %s1138 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result139 = call i32 @tcc_load_ldscript(%TCCState* %s1138)
  store i32 %fun_result139, i32* %ret, align 4
  %ret140 = load i32, i32* %ret, align 4
  %le = icmp slt i32 %ret140, 0
  br i1 %le, label %cond_jump_then141, label %cond_end142

cond_jump_then61:                                 ; preds = %cond_end55
  %ehdr63 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR64 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG65 = bitcast [16 x i8]* %fieldRRRR64 to i8*
  %gepLY66 = getelementptr i8, i8* %array_castG65, i32 1
  %elementYYY67 = load i8, i8* %gepLY66, align 1
  %eq68 = icmp eq i8 %elementYYY67, 69
  %andand69 = and i1 %eq, %eq68
  store i1 %andand69, i1* %andand59, align 1
  br label %cond_jump_end62

cond_jump_end62:                                  ; preds = %cond_jump_then61, %cond_end55
  %andand_result_value = load i1, i1* %andand59, align 1
  store i1 %andand_result_value, i1* %andand58, align 1
  br i1 %andand_result_value, label %cond_jump_then70, label %cond_jump_end71

cond_jump_then70:                                 ; preds = %cond_jump_end62
  %ehdr72 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR73 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG74 = bitcast [16 x i8]* %fieldRRRR73 to i8*
  %gepLY75 = getelementptr i8, i8* %array_castG74, i32 2
  %elementYYY76 = load i8, i8* %gepLY75, align 1
  %eq77 = icmp eq i8 %elementYYY76, 76
  %andand78 = and i1 %andand_result_value, %eq77
  store i1 %andand78, i1* %andand58, align 1
  br label %cond_jump_end71

cond_jump_end71:                                  ; preds = %cond_jump_then70, %cond_jump_end62
  %andand_result_value79 = load i1, i1* %andand58, align 1
  store i1 %andand_result_value79, i1* %andand, align 1
  br i1 %andand_result_value79, label %cond_jump_then80, label %cond_jump_end81

cond_jump_then80:                                 ; preds = %cond_jump_end71
  %ehdr82 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR83 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG84 = bitcast [16 x i8]* %fieldRRRR83 to i8*
  %gepLY85 = getelementptr i8, i8* %array_castG84, i32 3
  %elementYYY86 = load i8, i8* %gepLY85, align 1
  %eq87 = icmp eq i8 %elementYYY86, 70
  %andand88 = and i1 %andand_result_value79, %eq87
  store i1 %andand88, i1* %andand, align 1
  br label %cond_jump_end81

cond_jump_end81:                                  ; preds = %cond_jump_then80, %cond_jump_end71
  %andand_result_value89 = load i1, i1* %andand, align 1
  br i1 %andand_result_value89, label %cond_jump_then90, label %cond_jump_elif091

cond_jump_then90:                                 ; preds = %cond_jump_end81
  %file95 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file95, i32 0, i32 3
  store i32 0, i32* %fieldTU, align 4
  %ehdr96 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 1
  %e_type = load i16, i16* %fieldVVV, align 2
  %eq97 = icmp eq i16 %e_type, 1
  br i1 %eq97, label %cond_jump_then98, label %cond_jump_elif099

cond_jump_elif091:                                ; preds = %cond_jump_end81
  %ehdr129 = load %come_anon84, %come_anon84* %ehdr, align 4
  %castAQ130 = bitcast %come_anon84* %ehdr to i8*
  %fun_result131 = call i32 @memcmp(i8* %castAQ130, i8* bitcast ([9 x i8]* @335 to i8*), i64 8)
  %eq132 = icmp eq i32 %fun_result131, 0
  br i1 %eq132, label %cond_jump_elif_then092, label %cond_else_block93

cond_jump_elif_then092:                           ; preds = %cond_jump_elif091
  %file133 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldTU134 = getelementptr inbounds %BufferedFile, %BufferedFile* %file133, i32 0, i32 3
  store i32 0, i32* %fieldTU134, align 4
  %s1135 = load %TCCState*, %TCCState** %s1, align 8
  %fd136 = load i32, i32* %fd, align 4
  %fun_result137 = call i32 @tcc_load_archive(%TCCState* %s1135, i32 %fd136)
  store i32 %fun_result137, i32* %ret, align 4
  br label %cond_end94

cond_else_block93:                                ; preds = %cond_jump_elif091
  br label %tcc_add_file_internal.try_load_script

cond_end94:                                       ; preds = %cond_end142, %cond_jump_elif_then092, %cond_end102
  br label %cond_end24

cond_jump_then98:                                 ; preds = %cond_jump_then90
  %s1103 = load %TCCState*, %TCCState** %s1, align 8
  %fd104 = load i32, i32* %fd, align 4
  %fun_result105 = call i32 @tcc_load_object_file(%TCCState* %s1103, i32 %fd104, i64 0)
  store i32 %fun_result105, i32* %ret, align 4
  br label %cond_end102

cond_jump_elif099:                                ; preds = %cond_jump_then90
  %ehdr106 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV107 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 1
  %e_type108 = load i16, i16* %fieldVVV107, align 2
  %eq109 = icmp eq i16 %e_type108, 3
  br i1 %eq109, label %cond_jump_elif_then0100, label %cond_else_block101

cond_jump_elif_then0100:                          ; preds = %cond_jump_elif099
  %s1110 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL111 = getelementptr inbounds %TCCState, %TCCState* %s1110, i32 0, i32 0
  %output_type = load i32, i32* %fieldLLL111, align 4
  %eq112 = icmp eq i32 %output_type, 0
  br i1 %eq112, label %cond_jump_then113, label %cond_else_block114

cond_else_block101:                               ; preds = %cond_jump_elif099
  call void (i8*, ...) @error_noabort(i8* bitcast ([22 x i8]* @334 to i8*))
  br label %tcc_add_file_internal.fail
  br label %cond_end102

cond_end102:                                      ; preds = %cond_else_block101, %cond_end115, %cond_jump_then98
  br label %cond_end94

cond_jump_then113:                                ; preds = %cond_jump_elif_then0100
  %filename116 = load i8*, i8** %filename, align 8
  %fun_result117 = call i8* @dlopen(i8* %filename116, i32 257)
  store i8* %fun_result117, i8** %h, align 8
  %h118 = load i8*, i8** %h, align 8
  %icmpB = icmp ne i8* %h118, null
  br i1 %icmpB, label %cond_jump_then119, label %cond_else_block120

cond_else_block114:                               ; preds = %cond_jump_elif_then0100
  %s1122 = load %TCCState*, %TCCState** %s1, align 8
  %fd123 = load i32, i32* %fd, align 4
  %filename124 = load i8*, i8** %filename, align 8
  %flags125 = load i32, i32* %flags, align 4
  %andtmp126 = and i32 %flags125, 2
  %not_eq127 = icmp ne i32 %andtmp126, 0
  %icastKX = zext i1 %not_eq127 to i32
  %fun_result128 = call i32 @tcc_load_dll(%TCCState* %s1122, i32 %fd123, i8* %filename124, i32 %icastKX)
  store i32 %fun_result128, i32* %ret, align 4
  br label %cond_end115

cond_end115:                                      ; preds = %cond_else_block114, %cond_end121
  br label %cond_end102

cond_jump_then119:                                ; preds = %cond_jump_then113
  store i32 0, i32* %ret, align 4
  br label %cond_end121

cond_else_block120:                               ; preds = %cond_jump_then113
  store i32 -1, i32* %ret, align 4
  br label %cond_end121

cond_end121:                                      ; preds = %cond_else_block120, %cond_jump_then119
  br label %cond_end115

cond_jump_then141:                                ; preds = %tcc_add_file_internal.try_load_script
  call void (i8*, ...) @error_noabort(i8* bitcast ([23 x i8]* @336 to i8*))
  br label %tcc_add_file_internal.fail
  br label %cond_end142

cond_end142:                                      ; preds = %cond_jump_then141, %tcc_add_file_internal.try_load_script
  br label %cond_end94

tcc_add_file_internal.the_end:                    ; preds = %tcc_add_file_internal.fail, %cond_end24
  %file143 = load %BufferedFile*, %BufferedFile** @file, align 8
  call void @tcc_close(%BufferedFile* %file143)
  br label %tcc_add_file_internal.fail1
}

declare i32 @tcc_output_coff(%TCCState*, %_IO_FILE*)

define i8* @resolve_sym(%TCCState* %0, i8* %1, i32 %2) {
entry:
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %sym = alloca i8*, align 8
  %sym2 = alloca i8**, align 8
  store i8* %1, i8** %sym, align 8
  store i8** %sym, i8*** %sym2, align 8
  %type = alloca i32, align 4
  %type3 = alloca i32*, align 8
  store i32 %2, i32* %type, align 4
  store i32* %type, i32** %type3, align 8
  %sym4 = load i8*, i8** %sym, align 8
  %fun_result = call i8* @dlsym(i8* null, i8* %sym4)
  ret i8* %fun_result
}

declare i32 @pe_load_def_file(%TCCState*, i32)

declare i32 @pe_test_res_file(i8*, i32)

declare i32 @pe_load_res_file(%TCCState*, i32)

declare void @pe_add_runtime(%TCCState*)

declare void @pe_guess_outfile(i8*, i32)

declare i32 @pe_output_file(%TCCState*, i8*)

define internal void @asm_instr() {
entry:
  call void (i8*, ...) @error(i8* bitcast ([27 x i8]* @215 to i8*))
  ret void
}

define internal void @asm_global_instr() {
entry:
  call void (i8*, ...) @error(i8* bitcast ([27 x i8]* @216 to i8*))
  ret void
}

declare void @__assert_fail(i8*, i8*, i32, i8*)

declare void @__assert_perror_fail(i32, i8*, i32, i8*)

declare void @__assert(i8*, i8*, i32)

define void @g(i32 %0) {
entry:
  %ind1 = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32*, align 8
  store i32 %0, i32* %c, align 4
  store i32* %c, i32** %c1, align 8
  %ind = load i32, i32* @ind, align 4
  %add = add i32 %ind, 1
  store i32 %add, i32* %ind1, align 4
  %ind12 = load i32, i32* %ind1, align 4
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %cur_text_section, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL, align 4
  %icastM = trunc i64 %data_allocated to i32
  %gt = icmp sgt i32 %ind12, %icastM
  br i1 %gt, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %cur_text_section3 = load %Section*, %Section** @cur_text_section, align 8
  %ind14 = load i32, i32* %ind1, align 4
  %icastD = sext i32 %ind14 to i64
  call void @section_realloc(%Section* %cur_text_section3, i64 %icastD)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %cur_text_section5 = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL6 = getelementptr inbounds %Section, %Section* %cur_text_section5, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL6, align 8
  %ind7 = load i32, i32* @ind, align 4
  %c8 = load i32, i32* %c, align 4
  %icastJ = trunc i32 %c8 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %ind7
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %ind19 = load i32, i32* %ind1, align 4
  store i32 %ind19, i32* @ind, align 4
  ret void
}

define void @o(i32 %0) {
entry:
  %c = alloca i32, align 4
  %c1 = alloca i32*, align 8
  store i32 %0, i32* %c, align 4
  store i32* %c, i32** %c1, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %c2 = load i32, i32* %c, align 4
  %icmpA = icmp ne i32 %c2, 0
  br i1 %icmpA, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %c3 = load i32, i32* %c, align 4
  call void @g(i32 %c3)
  %c4 = load i32, i32* %c, align 4
  %rshifttmp = lshr i32 %c4, 8
  store i32 %rshifttmp, i32* %c, align 4
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define void @gen_le32(i32 %0) {
entry:
  %c = alloca i32, align 4
  %c1 = alloca i32*, align 8
  store i32 %0, i32* %c, align 4
  store i32* %c, i32** %c1, align 8
  %c2 = load i32, i32* %c, align 4
  call void @g(i32 %c2)
  %c3 = load i32, i32* %c, align 4
  %rshifttmp = lshr i32 %c3, 8
  call void @g(i32 %rshifttmp)
  %c4 = load i32, i32* %c, align 4
  %rshifttmp5 = lshr i32 %c4, 16
  call void @g(i32 %rshifttmp5)
  %c6 = load i32, i32* %c, align 4
  %rshifttmp7 = lshr i32 %c6, 24
  call void @g(i32 %rshifttmp7)
  ret void
}

define void @gen_le64(i64 %0) {
entry:
  %c = alloca i64, align 8
  %c1 = alloca i64*, align 8
  store i64 %0, i64* %c, align 4
  store i64* %c, i64** %c1, align 8
  %c2 = load i64, i64* %c, align 4
  %icastM = trunc i64 %c2 to i32
  call void @g(i32 %icastM)
  %c3 = load i64, i64* %c, align 4
  %rshifttmp = lshr i64 %c3, 8
  %icastM4 = trunc i64 %rshifttmp to i32
  call void @g(i32 %icastM4)
  %c5 = load i64, i64* %c, align 4
  %rshifttmp6 = lshr i64 %c5, 16
  %icastM7 = trunc i64 %rshifttmp6 to i32
  call void @g(i32 %icastM7)
  %c8 = load i64, i64* %c, align 4
  %rshifttmp9 = lshr i64 %c8, 24
  %icastM10 = trunc i64 %rshifttmp9 to i32
  call void @g(i32 %icastM10)
  %c11 = load i64, i64* %c, align 4
  %rshifttmp12 = lshr i64 %c11, 32
  %icastM13 = trunc i64 %rshifttmp12 to i32
  call void @g(i32 %icastM13)
  %c14 = load i64, i64* %c, align 4
  %rshifttmp15 = lshr i64 %c14, 40
  %icastM16 = trunc i64 %rshifttmp15 to i32
  call void @g(i32 %icastM16)
  %c17 = load i64, i64* %c, align 4
  %rshifttmp18 = lshr i64 %c17, 48
  %icastM19 = trunc i64 %rshifttmp18 to i32
  call void @g(i32 %icastM19)
  %c20 = load i64, i64* %c, align 4
  %rshifttmp21 = lshr i64 %c20, 56
  %icastM22 = trunc i64 %rshifttmp21 to i32
  call void @g(i32 %icastM22)
  ret void
}

define void @gsym_addr(i32 %0, i32 %1) {
entry:
  %ptr = alloca i32*, align 8
  %n = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %a = alloca i32, align 4
  %a2 = alloca i32*, align 8
  store i32 %1, i32* %a, align 4
  store i32* %a, i32** %a2, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %t3 = load i32, i32* %t, align 4
  %icmpA = icmp ne i32 %t3, 0
  br i1 %icmpA, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %cur_text_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %t4 = load i32, i32* %t, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %sext = sext i32 %t4 to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to i32*
  store i32* %castAQ, i32** %ptr, align 8
  %ptr5 = load i32*, i32** %ptr, align 8
  %derefference_valueB = load i32, i32* %ptr5, align 4
  store i32 %derefference_valueB, i32* %n, align 4
  %ptr6 = load i32*, i32** %ptr, align 8
  %a7 = load i32, i32* %a, align 4
  %t8 = load i32, i32* %t, align 4
  %sub = sub i32 %a7, %t8
  %sub9 = sub i32 %sub, 4
  store i32 %sub9, i32* %ptr6, align 4
  %n10 = load i32, i32* %n, align 4
  store i32 %n10, i32* %t, align 4
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define void @gsym(i32 %0) {
entry:
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %ind = load i32, i32* @ind, align 4
  call void @gsym_addr(i32 %t2, i32 %ind)
  ret void
}

define internal i32 @is64_type(i32 %0) {
entry:
  %oror2 = alloca i1, align 1
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t3 = load i32, i32* %t, align 4
  %andtmp = and i32 %t3, 15
  %eq = icmp eq i32 %andtmp, 4
  store i1 %eq, i1* %oror2, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %t4 = load i32, i32* %t, align 4
  %andtmp5 = and i32 %t4, 15
  %eq6 = icmp eq i32 %andtmp5, 6
  %oror7 = or i1 %eq, %eq6
  store i1 %oror7, i1* %oror2, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror2, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end9, label %cond_jump_then8

cond_jump_then8:                                  ; preds = %cond_jump_end
  %t10 = load i32, i32* %t, align 4
  %andtmp11 = and i32 %t10, 15
  %eq12 = icmp eq i32 %andtmp11, 12
  %oror13 = or i1 %oror_result_value, %eq12
  store i1 %oror13, i1* %oror, align 1
  br label %cond_jump_end9

cond_jump_end9:                                   ; preds = %cond_jump_then8, %cond_jump_end
  %oror_result_value14 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value14 to i32
  ret i32 %icastKX
}

define internal i32 @is_sse_float(i32 %0) {
entry:
  %oror = alloca i1, align 1
  %bt = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %andtmp = and i32 %t2, 15
  store i32 %andtmp, i32* %bt, align 4
  %bt3 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt3, 9
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %bt4 = load i32, i32* %bt, align 4
  %eq5 = icmp eq i32 %bt4, 8
  %oror6 = or i1 %eq, %eq5
  store i1 %oror6, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value to i32
  ret i32 %icastKX
}

define internal i32 @oad(i32 %0, i32 %1) {
entry:
  %ind1 = alloca i32, align 4
  %c = alloca i32, align 4
  %c1 = alloca i32*, align 8
  store i32 %0, i32* %c, align 4
  store i32* %c, i32** %c1, align 8
  %s = alloca i32, align 4
  %s2 = alloca i32*, align 8
  store i32 %1, i32* %s, align 4
  store i32* %s, i32** %s2, align 8
  %c3 = load i32, i32* %c, align 4
  call void @o(i32 %c3)
  %ind = load i32, i32* @ind, align 4
  %add = add i32 %ind, 4
  store i32 %add, i32* %ind1, align 4
  %ind14 = load i32, i32* %ind1, align 4
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %cur_text_section, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL, align 4
  %icastM = trunc i64 %data_allocated to i32
  %gt = icmp sgt i32 %ind14, %icastM
  br i1 %gt, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %cur_text_section5 = load %Section*, %Section** @cur_text_section, align 8
  %ind16 = load i32, i32* %ind1, align 4
  %icastD = sext i32 %ind16 to i64
  call void @section_realloc(%Section* %cur_text_section5, i64 %icastD)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %cur_text_section7 = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL8 = getelementptr inbounds %Section, %Section* %cur_text_section7, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL8, align 8
  %ind9 = load i32, i32* @ind, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %sext = sext i32 %ind9 to i64
  %mul = mul i64 %sext, 1
  %add10 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add10 to i8*
  %castAQ = bitcast i8* %intToPtrB to i32*
  %s11 = load i32, i32* %s, align 4
  store i32 %s11, i32* %castAQ, align 4
  %ind12 = load i32, i32* @ind, align 4
  store i32 %ind12, i32* %s, align 4
  %ind113 = load i32, i32* %ind1, align 4
  store i32 %ind113, i32* @ind, align 4
  %s14 = load i32, i32* %s, align 4
  ret i32 %s14
}

define internal void @gen_addr64(i32 %0, %Sym* %1, i64 %2) {
entry:
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %sym = alloca %Sym*, align 8
  %sym2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym2, align 8
  %c = alloca i64, align 8
  %c3 = alloca i64*, align 8
  store i64 %2, i64* %c, align 4
  store i64* %c, i64** %c3, align 8
  %r4 = load i32, i32* %r, align 4
  %andtmp = and i32 %r4, 512
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %ind = load i32, i32* @ind, align 4
  %icastD = sext i32 %ind to i64
  call void @greloc(%Section* %cur_text_section, %Sym* %sym5, i64 %icastD, i32 1)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %c6 = load i64, i64* %c, align 4
  call void @gen_le64(i64 %c6)
  ret void
}

define internal void @gen_addrpc32(i32 %0, %Sym* %1, i32 %2) {
entry:
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %sym = alloca %Sym*, align 8
  %sym2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym2, align 8
  %c = alloca i32, align 4
  %c3 = alloca i32*, align 8
  store i32 %2, i32* %c, align 4
  store i32* %c, i32** %c3, align 8
  %r4 = load i32, i32* %r, align 4
  %andtmp = and i32 %r4, 512
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %ind = load i32, i32* @ind, align 4
  %icastD = sext i32 %ind to i64
  call void @greloc(%Section* %cur_text_section, %Sym* %sym5, i64 %icastD, i32 2)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %c6 = load i32, i32* %c, align 4
  %sub = sub i32 %c6, 4
  call void @gen_le32(i32 %sub)
  ret void
}

define internal void @gen_gotpcrel(i32 %0, %Sym* %1, i32 %2) {
entry:
  %rel = alloca %come_anon94*, align 8
  %sr = alloca %Section*, align 8
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %sym = alloca %Sym*, align 8
  %sym2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym2, align 8
  %c = alloca i32, align 4
  %c3 = alloca i32*, align 8
  store i32 %2, i32* %c, align 4
  store i32* %c, i32** %c3, align 8
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %sym4 = load %Sym*, %Sym** %sym, align 8
  %ind = load i32, i32* @ind, align 4
  %icastD = sext i32 %ind to i64
  call void @greloc(%Section* %cur_text_section, %Sym* %sym4, i64 %icastD, i32 9)
  %cur_text_section5 = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %cur_text_section5, i32 0, i32 15
  %reloc = load %Section*, %Section** %fieldLLL, align 8
  store %Section* %reloc, %Section** %sr, align 8
  %sr6 = load %Section*, %Section** %sr, align 8
  %fieldLLL7 = getelementptr inbounds %Section, %Section* %sr6, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL7, align 8
  %sr8 = load %Section*, %Section** %sr, align 8
  %fieldLLL9 = getelementptr inbounds %Section, %Section* %sr8, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL9, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %ptrToIntI = ptrtoint i8* %intToPtrB to i64
  %sub = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub to i8*
  %castAQ = bitcast i8* %iintToPtrD to %come_anon94*
  store %come_anon94* %castAQ, %come_anon94** %rel, align 8
  %rel10 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldTU = getelementptr inbounds %come_anon94, %come_anon94* %rel10, i32 0, i32 2
  store i64 -4, i64* %fieldTU, align 4
  call void @gen_le32(i32 0)
  %c11 = load i32, i32* %c, align 4
  %icmpA = icmp ne i32 %c11, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %r12 = load i32, i32* %r, align 4
  %rshifttmp = lshr i32 %r12, 3
  %andtmp = and i32 %rshifttmp, 1
  %add13 = add i32 72, %andtmp
  call void @o(i32 %add13)
  call void @o(i32 129)
  %r14 = load i32, i32* %r, align 4
  %andtmp15 = and i32 %r14, 7
  %add16 = add i32 192, %andtmp15
  call void @o(i32 %add16)
  %c17 = load i32, i32* %c, align 4
  call void @gen_le32(i32 %c17)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  ret void
}

define internal void @gen_modrm_impl(i32 %0, i32 %1, %Sym* %2, i32 %3, i32 %4) {
entry:
  %op_reg = alloca i32, align 4
  %op_reg1 = alloca i32*, align 8
  store i32 %0, i32* %op_reg, align 4
  store i32* %op_reg, i32** %op_reg1, align 8
  %r = alloca i32, align 4
  %r2 = alloca i32*, align 8
  store i32 %1, i32* %r, align 4
  store i32* %r, i32** %r2, align 8
  %sym = alloca %Sym*, align 8
  %sym3 = alloca %Sym**, align 8
  store %Sym* %2, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym3, align 8
  %c = alloca i32, align 4
  %c4 = alloca i32*, align 8
  store i32 %3, i32* %c, align 4
  store i32* %c, i32** %c4, align 8
  %is_got = alloca i32, align 4
  %is_got5 = alloca i32*, align 8
  store i32 %4, i32* %is_got, align 4
  store i32* %is_got, i32** %is_got5, align 8
  %op_reg6 = load i32, i32* %op_reg, align 4
  %andtmp = and i32 %op_reg6, 7
  %lshifttmp = shl i32 %andtmp, 3
  store i32 %lshifttmp, i32* %op_reg, align 4
  %r7 = load i32, i32* %r, align 4
  %andtmp8 = and i32 %r7, 255
  %eq = icmp eq i32 %andtmp8, 240
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  %op_reg9 = load i32, i32* %op_reg, align 4
  %ortmp = or i32 5, %op_reg9
  call void @o(i32 %ortmp)
  %is_got10 = load i32, i32* %is_got, align 4
  %icmpA = icmp ne i32 %is_got10, 0
  br i1 %icmpA, label %cond_jump_then11, label %cond_else_block12

cond_jump_elif0:                                  ; preds = %entry
  %r20 = load i32, i32* %r, align 4
  %andtmp21 = and i32 %r20, 255
  %eq22 = icmp eq i32 %andtmp21, 242
  br i1 %eq22, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %c23 = load i32, i32* %c, align 4
  %c24 = load i32, i32* %c, align 4
  %icastJ = trunc i32 %c24 to i8
  %icastL = sext i8 %icastJ to i32
  %eq25 = icmp eq i32 %c23, %icastL
  br i1 %eq25, label %cond_jump_then26, label %cond_else_block27

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %r35 = load i32, i32* %r, align 4
  %andtmp36 = and i32 %r35, 255
  %gteq_signed = icmp sge i32 %andtmp36, 16
  br i1 %gteq_signed, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %c37 = load i32, i32* %c, align 4
  %icmpA38 = icmp ne i32 %c37, 0
  br i1 %icmpA38, label %cond_jump_then39, label %cond_else_block40

cond_else_block:                                  ; preds = %cond_jump_elif1
  %op_reg53 = load i32, i32* %op_reg, align 4
  %ortmp54 = or i32 0, %op_reg53
  %r55 = load i32, i32* %r, align 4
  %andtmp56 = and i32 %r55, 255
  %ortmp57 = or i32 %ortmp54, %andtmp56
  call void @g(i32 %ortmp57)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end41, %cond_end28, %cond_end13
  ret void

cond_jump_then11:                                 ; preds = %cond_jump_then
  %r14 = load i32, i32* %r, align 4
  %sym15 = load %Sym*, %Sym** %sym, align 8
  %c16 = load i32, i32* %c, align 4
  call void @gen_gotpcrel(i32 %r14, %Sym* %sym15, i32 %c16)
  br label %cond_end13

cond_else_block12:                                ; preds = %cond_jump_then
  %r17 = load i32, i32* %r, align 4
  %sym18 = load %Sym*, %Sym** %sym, align 8
  %c19 = load i32, i32* %c, align 4
  call void @gen_addrpc32(i32 %r17, %Sym* %sym18, i32 %c19)
  br label %cond_end13

cond_end13:                                       ; preds = %cond_else_block12, %cond_jump_then11
  br label %cond_end

cond_jump_then26:                                 ; preds = %cond_jump_elif_then0
  %op_reg29 = load i32, i32* %op_reg, align 4
  %ortmp30 = or i32 69, %op_reg29
  call void @o(i32 %ortmp30)
  %c31 = load i32, i32* %c, align 4
  call void @g(i32 %c31)
  br label %cond_end28

cond_else_block27:                                ; preds = %cond_jump_elif_then0
  %op_reg32 = load i32, i32* %op_reg, align 4
  %ortmp33 = or i32 133, %op_reg32
  %c34 = load i32, i32* %c, align 4
  %fun_result = call i32 @oad(i32 %ortmp33, i32 %c34)
  br label %cond_end28

cond_end28:                                       ; preds = %cond_else_block27, %cond_jump_then26
  br label %cond_end

cond_jump_then39:                                 ; preds = %cond_jump_elif_then1
  %op_reg42 = load i32, i32* %op_reg, align 4
  %ortmp43 = or i32 128, %op_reg42
  %r44 = load i32, i32* %r, align 4
  %andtmp45 = and i32 %r44, 7
  %ortmp46 = or i32 %ortmp43, %andtmp45
  call void @g(i32 %ortmp46)
  %c47 = load i32, i32* %c, align 4
  call void @gen_le32(i32 %c47)
  br label %cond_end41

cond_else_block40:                                ; preds = %cond_jump_elif_then1
  %op_reg48 = load i32, i32* %op_reg, align 4
  %ortmp49 = or i32 0, %op_reg48
  %r50 = load i32, i32* %r, align 4
  %andtmp51 = and i32 %r50, 7
  %ortmp52 = or i32 %ortmp49, %andtmp51
  call void @g(i32 %ortmp52)
  br label %cond_end41

cond_end41:                                       ; preds = %cond_else_block40, %cond_jump_then39
  br label %cond_end
}

define internal void @gen_modrm(i32 %0, i32 %1, %Sym* %2, i32 %3) {
entry:
  %op_reg = alloca i32, align 4
  %op_reg1 = alloca i32*, align 8
  store i32 %0, i32* %op_reg, align 4
  store i32* %op_reg, i32** %op_reg1, align 8
  %r = alloca i32, align 4
  %r2 = alloca i32*, align 8
  store i32 %1, i32* %r, align 4
  store i32* %r, i32** %r2, align 8
  %sym = alloca %Sym*, align 8
  %sym3 = alloca %Sym**, align 8
  store %Sym* %2, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym3, align 8
  %c = alloca i32, align 4
  %c4 = alloca i32*, align 8
  store i32 %3, i32* %c, align 4
  store i32* %c, i32** %c4, align 8
  %op_reg5 = load i32, i32* %op_reg, align 4
  %r6 = load i32, i32* %r, align 4
  %sym7 = load %Sym*, %Sym** %sym, align 8
  %c8 = load i32, i32* %c, align 4
  call void @gen_modrm_impl(i32 %op_reg5, i32 %r6, %Sym* %sym7, i32 %c8, i32 0)
  ret void
}

define internal void @gen_modrm64(i32 %0, i32 %1, i32 %2, %Sym* %3, i32 %4) {
entry:
  %andand22 = alloca i1, align 1
  %andand = alloca i1, align 1
  %rex = alloca i32, align 4
  %is_got = alloca i32, align 4
  %opcode = alloca i32, align 4
  %opcode1 = alloca i32*, align 8
  store i32 %0, i32* %opcode, align 4
  store i32* %opcode, i32** %opcode1, align 8
  %op_reg = alloca i32, align 4
  %op_reg2 = alloca i32*, align 8
  store i32 %1, i32* %op_reg, align 4
  store i32* %op_reg, i32** %op_reg2, align 8
  %r = alloca i32, align 4
  %r3 = alloca i32*, align 8
  store i32 %2, i32* %r, align 4
  store i32* %r, i32** %r3, align 8
  %sym = alloca %Sym*, align 8
  %sym4 = alloca %Sym**, align 8
  store %Sym* %3, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym4, align 8
  %c = alloca i32, align 4
  %c5 = alloca i32*, align 8
  store i32 %4, i32* %c, align 4
  store i32* %c, i32** %c5, align 8
  %op_reg6 = load i32, i32* %op_reg, align 4
  %rshifttmp = lshr i32 %op_reg6, 3
  %andtmp = and i32 %rshifttmp, 1
  %lshifttmp = shl i32 %andtmp, 2
  %ortmp = or i32 72, %lshifttmp
  store i32 %ortmp, i32* %rex, align 4
  %r7 = load i32, i32* %r, align 4
  %andtmp8 = and i32 %r7, 255
  %not_eq = icmp ne i32 %andtmp8, 240
  store i1 %not_eq, i1* %andand, align 1
  br i1 %not_eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %r9 = load i32, i32* %r, align 4
  %andtmp10 = and i32 %r9, 255
  %not_eq11 = icmp ne i32 %andtmp10, 242
  %andand12 = and i1 %not_eq, %not_eq11
  store i1 %andand12, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then13, label %cond_end

cond_jump_then13:                                 ; preds = %cond_jump_end
  %rex14 = load i32, i32* %rex, align 4
  %r15 = load i32, i32* %r, align 4
  %andtmp16 = and i32 255, %r15
  %rshifttmp17 = lshr i32 %andtmp16, 3
  %andtmp18 = and i32 %rshifttmp17, 1
  %ortmp19 = or i32 %rex14, %andtmp18
  store i32 %ortmp19, i32* %rex, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then13, %cond_jump_end
  %rex20 = load i32, i32* %rex, align 4
  call void @o(i32 %rex20)
  %opcode21 = load i32, i32* %opcode, align 4
  call void @o(i32 %opcode21)
  %op_reg23 = load i32, i32* %op_reg, align 4
  %andtmp24 = and i32 %op_reg23, 16
  %icmpA = icmp ne i32 %andtmp24, 0
  store i1 %icmpA, i1* %andand22, align 1
  br i1 %icmpA, label %cond_jump_then25, label %cond_jump_end26

cond_jump_then25:                                 ; preds = %cond_end
  %sym27 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %sym27, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp28 = and i32 %t, 256
  %logical_denial = icmp eq i32 %andtmp28, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA29 = icmp ne i32 %castOOOO, 0
  %andand30 = and i1 %icmpA, %icmpA29
  store i1 %andand30, i1* %andand22, align 1
  br label %cond_jump_end26

cond_jump_end26:                                  ; preds = %cond_jump_then25, %cond_end
  %andand_result_value31 = load i1, i1* %andand22, align 1
  %icastKX = zext i1 %andand_result_value31 to i32
  store i32 %icastKX, i32* %is_got, align 4
  %op_reg32 = load i32, i32* %op_reg, align 4
  %r33 = load i32, i32* %r, align 4
  %sym34 = load %Sym*, %Sym** %sym, align 8
  %c35 = load i32, i32* %c, align 4
  %is_got36 = load i32, i32* %is_got, align 4
  call void @gen_modrm_impl(i32 %op_reg32, i32 %r33, %Sym* %sym34, i32 %c35, i32 %is_got36)
  ret void
}

define void @load(i32 %0, %SValue* %1) {
entry:
  %conditional_result_type265 = alloca i32, align 4
  %conditional_result_type256 = alloca i32, align 4
  %oror222 = alloca i1, align 1
  %conditional_result_type = alloca i32, align 4
  %oror41 = alloca i1, align 1
  %oror = alloca i1, align 1
  %bt = alloca i32, align 4
  %tr = alloca i32, align 4
  %andand11 = alloca i1, align 1
  %andand10 = alloca i1, align 1
  %andand = alloca i1, align 1
  %v1 = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %v1 to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %fr = alloca i32, align 4
  %fc = alloca i32, align 4
  %ft = alloca i32, align 4
  %t = alloca i32, align 4
  %v = alloca i32, align 4
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %sv = alloca %SValue*, align 8
  %sv2 = alloca %SValue**, align 8
  store %SValue* %1, %SValue** %sv, align 8
  store %SValue** %sv, %SValue*** %sv2, align 8
  %sv3 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %sv3, i32 0, i32 1
  %r4 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r4 to i32
  store i32 %icastKY, i32* %fr, align 4
  %sv5 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL6 = getelementptr inbounds %SValue, %SValue* %sv5, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL6, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL6, i32 0, i32 0
  %t7 = load i32, i32* %fieldVVV, align 4
  store i32 %t7, i32* %ft, align 4
  %sv8 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL9 = getelementptr inbounds %SValue, %SValue* %sv8, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL9, align 16
  %ICASTO = bitcast %CValue* %fieldLLL9 to i32*
  %ul = load i32, i32* %ICASTO, align 4
  store i32 %ul, i32* %fc, align 4
  %fr12 = load i32, i32* %fr, align 4
  %andtmp = and i32 %fr12, 255
  %eq = icmp eq i32 %andtmp, 240
  store i1 %eq, i1* %andand11, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %fr13 = load i32, i32* %fr, align 4
  %andtmp14 = and i32 %fr13, 512
  %icmpA = icmp ne i32 %andtmp14, 0
  %andand15 = and i1 %eq, %icmpA
  store i1 %andand15, i1* %andand11, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand11, align 1
  store i1 %andand_result_value, i1* %andand10, align 1
  br i1 %andand_result_value, label %cond_jump_then16, label %cond_jump_end17

cond_jump_then16:                                 ; preds = %cond_jump_end
  %fr18 = load i32, i32* %fr, align 4
  %andtmp19 = and i32 %fr18, 256
  %icmpA20 = icmp ne i32 %andtmp19, 0
  %andand21 = and i1 %andand_result_value, %icmpA20
  store i1 %andand21, i1* %andand10, align 1
  br label %cond_jump_end17

cond_jump_end17:                                  ; preds = %cond_jump_then16, %cond_jump_end
  %andand_result_value22 = load i1, i1* %andand10, align 1
  store i1 %andand_result_value22, i1* %andand, align 1
  br i1 %andand_result_value22, label %cond_jump_then23, label %cond_jump_end24

cond_jump_then23:                                 ; preds = %cond_jump_end17
  %sv25 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL26 = getelementptr inbounds %SValue, %SValue* %sv25, i32 0, i32 4
  %sym = load %Sym*, %Sym** %fieldLLL26, align 8
  %fieldLLL27 = getelementptr inbounds %Sym, %Sym* %sym, i32 0, i32 3
  %type28 = load %CType, %CType* %fieldLLL27, align 8
  %fieldVVV29 = getelementptr inbounds %CType, %CType* %fieldLLL27, i32 0, i32 0
  %t30 = load i32, i32* %fieldVVV29, align 4
  %andtmp31 = and i32 %t30, 256
  %logical_denial = icmp eq i32 %andtmp31, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA32 = icmp ne i32 %castOOOO, 0
  %andand33 = and i1 %andand_result_value22, %icmpA32
  store i1 %andand33, i1* %andand, align 1
  br label %cond_jump_end24

cond_jump_end24:                                  ; preds = %cond_jump_then23, %cond_jump_end17
  %andand_result_value34 = load i1, i1* %andand, align 1
  br i1 %andand_result_value34, label %cond_jump_then35, label %cond_end

cond_jump_then35:                                 ; preds = %cond_jump_end24
  %r36 = load i32, i32* %r, align 4
  %ortmp = or i32 %r36, 16
  store i32 %ortmp, i32* %tr, align 4
  %ft37 = load i32, i32* %ft, align 4
  store i32 301, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @x86_64-gen.c, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end:                                         ; preds = %cond_end58, %cond_jump_end24
  %fr67 = load i32, i32* %fr, align 4
  %andtmp68 = and i32 %fr67, 255
  store i32 %andtmp68, i32* %v, align 4
  %fr69 = load i32, i32* %fr, align 4
  %andtmp70 = and i32 %fr69, 256
  %icmpA71 = icmp ne i32 %andtmp70, 0
  br i1 %icmpA71, label %cond_jump_then72, label %cond_else_block

is_float:                                         ; preds = %cond_jump_then35
  %inline_result_variable = alloca i32, align 4
  %t38 = alloca i32, align 4
  store i32 %ft37, i32* %t38, align 4
  %t39 = load i32, i32* %t38, align 4
  %andtmp40 = and i32 %t39, 15
  store i32 %andtmp40, i32* %bt, align 4
  %bt42 = load i32, i32* %bt, align 4
  %eq43 = icmp eq i32 %bt42, 10
  store i1 %eq43, i1* %oror41, align 1
  br i1 %eq43, label %cond_jump_end45, label %cond_jump_then44

is_float_end:                                     ; preds = %cond_jump_end50
  %inline_result_variable55 = load i32, i32* %inline_result_variable, align 4
  %icmpA56 = icmp ne i32 %inline_result_variable55, 0
  br i1 %icmpA56, label %cond_jump_then57, label %cond_end58

cond_jump_then44:                                 ; preds = %is_float
  %bt46 = load i32, i32* %bt, align 4
  %eq47 = icmp eq i32 %bt46, 9
  %oror48 = or i1 %eq43, %eq47
  store i1 %oror48, i1* %oror41, align 1
  br label %cond_jump_end45

cond_jump_end45:                                  ; preds = %cond_jump_then44, %is_float
  %oror_result_value = load i1, i1* %oror41, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end50, label %cond_jump_then49

cond_jump_then49:                                 ; preds = %cond_jump_end45
  %bt51 = load i32, i32* %bt, align 4
  %eq52 = icmp eq i32 %bt51, 8
  %oror53 = or i1 %oror_result_value, %eq52
  store i1 %oror53, i1* %oror, align 1
  br label %cond_jump_end50

cond_jump_end50:                                  ; preds = %cond_jump_then49, %cond_jump_end45
  %oror_result_value54 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value54 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then57:                                 ; preds = %is_float_end
  %fun_result = call i32 @get_reg(i32 1)
  %ortmp59 = or i32 %fun_result, 16
  store i32 %ortmp59, i32* %tr, align 4
  br label %cond_end58

cond_end58:                                       ; preds = %cond_jump_then57, %is_float_end
  %tr60 = load i32, i32* %tr, align 4
  %fr61 = load i32, i32* %fr, align 4
  %sv62 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL63 = getelementptr inbounds %SValue, %SValue* %sv62, i32 0, i32 4
  %sym64 = load %Sym*, %Sym** %fieldLLL63, align 8
  call void @gen_modrm64(i32 139, i32 %tr60, i32 %fr61, %Sym* %sym64, i32 0)
  %tr65 = load i32, i32* %tr, align 4
  %ortmp66 = or i32 %tr65, 256
  store i32 %ortmp66, i32* %fr, align 4
  br label %cond_end

cond_jump_then72:                                 ; preds = %cond_end
  %v74 = load i32, i32* %v, align 4
  %eq75 = icmp eq i32 %v74, 241
  br i1 %eq75, label %cond_jump_then76, label %cond_end77

cond_else_block:                                  ; preds = %cond_end
  %v129 = load i32, i32* %v, align 4
  %eq130 = icmp eq i32 %v129, 240
  br i1 %eq130, label %cond_jump_then131, label %cond_jump_elif0132

cond_end73:                                       ; preds = %cond_end140, %cond_end95
  ret void

cond_jump_then76:                                 ; preds = %cond_jump_then72
  %v178 = load %SValue, %SValue* %v1, align 16
  %fieldVVV79 = getelementptr inbounds %SValue, %SValue* %v1, i32 0, i32 0
  %type80 = load %CType, %CType* %fieldVVV79, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldVVV79, i32 0, i32 0
  store i32 4, i32* %fieldTTT, align 4
  %v181 = load %SValue, %SValue* %v1, align 16
  %fieldTTT82 = getelementptr inbounds %SValue, %SValue* %v1, i32 0, i32 1
  store i16 498, i16* %fieldTTT82, align 2
  %v183 = load %SValue, %SValue* %v1, align 16
  %fieldVVV84 = getelementptr inbounds %SValue, %SValue* %v1, i32 0, i32 3
  %c85 = load %CValue, %CValue* %fieldVVV84, align 16
  %fc86 = load i32, i32* %fc, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldVVV84, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %fc86, i32* %icastN, align 4
  %r87 = load i32, i32* %r, align 4
  %v188 = load %SValue, %SValue* %v1, align 16
  call void @load(i32 %r87, %SValue* %v1)
  %r89 = load i32, i32* %r, align 4
  store i32 %r89, i32* %fr, align 4
  br label %cond_end77

cond_end77:                                       ; preds = %cond_jump_then76, %cond_jump_then72
  %ft90 = load i32, i32* %ft, align 4
  %andtmp91 = and i32 %ft90, 15
  %eq92 = icmp eq i32 %andtmp91, 8
  br i1 %eq92, label %cond_jump_then93, label %cond_jump_elif0

cond_jump_then93:                                 ; preds = %cond_end77
  call void @o(i32 7212902)
  store i32 0, i32* %r, align 4
  br label %cond_end95

cond_jump_elif0:                                  ; preds = %cond_end77
  %ft96 = load i32, i32* %ft, align 4
  %andtmp97 = and i32 %ft96, 15
  %eq98 = icmp eq i32 %andtmp97, 9
  br i1 %eq98, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @o(i32 8261619)
  store i32 0, i32* %r, align 4
  br label %cond_end95

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %ft99 = load i32, i32* %ft, align 4
  %andtmp100 = and i32 %ft99, 15
  %eq101 = icmp eq i32 %andtmp100, 10
  br i1 %eq101, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  call void @o(i32 219)
  store i32 5, i32* %r, align 4
  br label %cond_end95

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %ft102 = load i32, i32* %ft, align 4
  %andtmp103 = and i32 %ft102, -1921
  %eq104 = icmp eq i32 %andtmp103, 1
  br i1 %eq104, label %cond_jump_elif_then2, label %cond_jump_elif3

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  call void @o(i32 48655)
  br label %cond_end95

cond_jump_elif3:                                  ; preds = %cond_jump_elif2
  %ft105 = load i32, i32* %ft, align 4
  %andtmp106 = and i32 %ft105, -1921
  %eq107 = icmp eq i32 %andtmp106, 17
  br i1 %eq107, label %cond_jump_elif_then3, label %cond_jump_elif4

cond_jump_elif_then3:                             ; preds = %cond_jump_elif3
  call void @o(i32 46607)
  br label %cond_end95

cond_jump_elif4:                                  ; preds = %cond_jump_elif3
  %ft108 = load i32, i32* %ft, align 4
  %andtmp109 = and i32 %ft108, -1921
  %eq110 = icmp eq i32 %andtmp109, 2
  br i1 %eq110, label %cond_jump_elif_then4, label %cond_jump_elif5

cond_jump_elif_then4:                             ; preds = %cond_jump_elif4
  call void @o(i32 48911)
  br label %cond_end95

cond_jump_elif5:                                  ; preds = %cond_jump_elif4
  %ft111 = load i32, i32* %ft, align 4
  %andtmp112 = and i32 %ft111, -1921
  %eq113 = icmp eq i32 %andtmp112, 18
  br i1 %eq113, label %cond_jump_elif_then5, label %cond_jump_elif6

cond_jump_elif_then5:                             ; preds = %cond_jump_elif5
  call void @o(i32 46863)
  br label %cond_end95

cond_jump_elif6:                                  ; preds = %cond_jump_elif5
  %ft114 = load i32, i32* %ft, align 4
  %fun_result115 = call i32 @is64_type(i32 %ft114)
  %icmpA116 = icmp ne i32 %fun_result115, 0
  br i1 %icmpA116, label %cond_jump_elif_then6, label %cond_else_block94

cond_jump_elif_then6:                             ; preds = %cond_jump_elif6
  %r117 = load i32, i32* %r, align 4
  %fr118 = load i32, i32* %fr, align 4
  %sv119 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL120 = getelementptr inbounds %SValue, %SValue* %sv119, i32 0, i32 4
  %sym121 = load %Sym*, %Sym** %fieldLLL120, align 8
  %fc122 = load i32, i32* %fc, align 4
  call void @gen_modrm64(i32 139, i32 %r117, i32 %fr118, %Sym* %sym121, i32 %fc122)
  ret void

cond_else_block94:                                ; preds = %cond_jump_elif6
  call void @o(i32 139)
  br label %cond_end95

cond_end95:                                       ; preds = %cond_else_block94, %cond_jump_elif_then5, %cond_jump_elif_then4, %cond_jump_elif_then3, %cond_jump_elif_then2, %cond_jump_elif_then1, %cond_jump_elif_then0, %cond_jump_then93
  %r123 = load i32, i32* %r, align 4
  %fr124 = load i32, i32* %fr, align 4
  %sv125 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL126 = getelementptr inbounds %SValue, %SValue* %sv125, i32 0, i32 4
  %sym127 = load %Sym*, %Sym** %fieldLLL126, align 8
  %fc128 = load i32, i32* %fc, align 4
  call void @gen_modrm(i32 %r123, i32 %fr124, %Sym* %sym127, i32 %fc128)
  br label %cond_end73

cond_jump_then131:                                ; preds = %cond_else_block
  %ft141 = load i32, i32* %ft, align 4
  %andtmp142 = and i32 %ft141, 15
  %eq143 = icmp eq i32 %andtmp142, 12
  br i1 %eq143, label %cond_jump_then144, label %cond_else_block145

cond_jump_elif0132:                               ; preds = %cond_else_block
  %v204 = load i32, i32* %v, align 4
  %eq205 = icmp eq i32 %v204, 242
  br i1 %eq205, label %cond_jump_elif_then0133, label %cond_jump_elif1134

cond_jump_elif_then0133:                          ; preds = %cond_jump_elif0132
  %r206 = load i32, i32* %r, align 4
  %rshifttmp = lshr i32 %r206, 3
  %andtmp207 = and i32 %rshifttmp, 1
  %ortmp208 = or i32 72, %andtmp207
  call void @o(i32 %ortmp208)
  call void @o(i32 141)
  %r209 = load i32, i32* %r, align 4
  %sv210 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL211 = getelementptr inbounds %SValue, %SValue* %sv210, i32 0, i32 4
  %sym212 = load %Sym*, %Sym** %fieldLLL211, align 8
  %fc213 = load i32, i32* %fc, align 4
  call void @gen_modrm(i32 %r209, i32 242, %Sym* %sym212, i32 %fc213)
  br label %cond_end140

cond_jump_elif1134:                               ; preds = %cond_jump_elif0132
  %v214 = load i32, i32* %v, align 4
  %eq215 = icmp eq i32 %v214, 243
  br i1 %eq215, label %cond_jump_elif_then1135, label %cond_jump_elif2136

cond_jump_elif_then1135:                          ; preds = %cond_jump_elif1134
  %r216 = load i32, i32* %r, align 4
  %add217 = add i32 184, %r216
  %fun_result218 = call i32 @oad(i32 %add217, i32 0)
  call void @o(i32 15)
  %fc219 = load i32, i32* %fc, align 4
  call void @o(i32 %fc219)
  %r220 = load i32, i32* %r, align 4
  %add221 = add i32 192, %r220
  call void @o(i32 %add221)
  br label %cond_end140

cond_jump_elif2136:                               ; preds = %cond_jump_elif1134
  %v223 = load i32, i32* %v, align 4
  %eq224 = icmp eq i32 %v223, 244
  store i1 %eq224, i1* %oror222, align 1
  br i1 %eq224, label %cond_jump_end226, label %cond_jump_then225

cond_jump_elif_then2137:                          ; preds = %cond_jump_end226
  %v231 = load i32, i32* %v, align 4
  %andtmp232 = and i32 %v231, 1
  store i32 %andtmp232, i32* %t, align 4
  %r233 = load i32, i32* %r, align 4
  %add234 = add i32 184, %r233
  %t235 = load i32, i32* %t, align 4
  %fun_result236 = call i32 @oad(i32 %add234, i32 %t235)
  call void @o(i32 1515)
  %fc237 = load i32, i32* %fc, align 4
  call void @gsym(i32 %fc237)
  %r238 = load i32, i32* %r, align 4
  %add239 = add i32 184, %r238
  %t240 = load i32, i32* %t, align 4
  %xortmp = xor i32 %t240, 1
  %fun_result241 = call i32 @oad(i32 %add239, i32 %xortmp)
  br label %cond_end140

cond_jump_elif3138:                               ; preds = %cond_jump_end226
  %v242 = load i32, i32* %v, align 4
  %r243 = load i32, i32* %r, align 4
  %not_eq = icmp ne i32 %v242, %r243
  br i1 %not_eq, label %cond_jump_elif_then3139, label %cond_end140

cond_jump_elif_then3139:                          ; preds = %cond_jump_elif3138
  %r244 = load i32, i32* %r, align 4
  %eq245 = icmp eq i32 %r244, 3
  br i1 %eq245, label %cond_jump_then246, label %cond_jump_elif0247

cond_end140:                                      ; preds = %cond_end250, %cond_jump_elif3138, %cond_jump_elif_then2137, %cond_jump_elif_then1135, %cond_jump_elif_then0133, %cond_end146
  br label %cond_end73

cond_jump_then144:                                ; preds = %cond_jump_then131
  %fr147 = load i32, i32* %fr, align 4
  %andtmp148 = and i32 %fr147, 512
  %logical_denial149 = icmp eq i32 %andtmp148, 0
  %castOOOO150 = zext i1 %logical_denial149 to i32
  %icmpA151 = icmp ne i32 %castOOOO150, 0
  br i1 %icmpA151, label %cond_jump_then152, label %cond_else_block153

cond_else_block145:                               ; preds = %cond_jump_then131
  %fr165 = load i32, i32* %fr, align 4
  %andtmp166 = and i32 %fr165, 512
  %icmpA167 = icmp ne i32 %andtmp166, 0
  br i1 %icmpA167, label %cond_jump_then168, label %cond_else_block169

cond_end146:                                      ; preds = %cond_end170, %cond_end154
  br label %cond_end140

cond_jump_then152:                                ; preds = %cond_jump_then144
  store i32 0, i32* %conditional_result_type, align 4
  br label %cond_end154

cond_else_block153:                               ; preds = %cond_jump_then144
  call void @__assert_fail(i8* bitcast ([15 x i8]* @0 to i8*), i8* bitcast ([13 x i8]* @1 to i8*), i32 347, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @load.1, i32 0, i32 0))
  store i32 0, i32* %conditional_result_type, align 4
  br label %cond_end154

cond_end154:                                      ; preds = %cond_else_block153, %cond_jump_then152
  %conditional_result_value = load i32, i32* %conditional_result_type, align 4
  call void @o(i32 72)
  %r155 = load i32, i32* %r, align 4
  %andtmp156 = and i32 %r155, 7
  %add = add i32 184, %andtmp156
  call void @o(i32 %add)
  %fr157 = load i32, i32* %fr, align 4
  %sv158 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL159 = getelementptr inbounds %SValue, %SValue* %sv158, i32 0, i32 4
  %sym160 = load %Sym*, %Sym** %fieldLLL159, align 8
  %sv161 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL162 = getelementptr inbounds %SValue, %SValue* %sv161, i32 0, i32 3
  %c163 = load %CValue, %CValue* %fieldLLL162, align 16
  %ICASTO164 = bitcast %CValue* %fieldLLL162 to i64*
  %ull = load i64, i64* %ICASTO164, align 4
  call void @gen_addr64(i32 %fr157, %Sym* %sym160, i64 %ull)
  br label %cond_end146

cond_jump_then168:                                ; preds = %cond_else_block145
  %sv171 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL172 = getelementptr inbounds %SValue, %SValue* %sv171, i32 0, i32 4
  %sym173 = load %Sym*, %Sym** %fieldLLL172, align 8
  %fieldLLL174 = getelementptr inbounds %Sym, %Sym* %sym173, i32 0, i32 3
  %type175 = load %CType, %CType* %fieldLLL174, align 8
  %fieldVVV176 = getelementptr inbounds %CType, %CType* %fieldLLL174, i32 0, i32 0
  %t177 = load i32, i32* %fieldVVV176, align 4
  %andtmp178 = and i32 %t177, 256
  %icmpA179 = icmp ne i32 %andtmp178, 0
  br i1 %icmpA179, label %cond_jump_then180, label %cond_else_block181

cond_else_block169:                               ; preds = %cond_else_block145
  %r200 = load i32, i32* %r, align 4
  %andtmp201 = and i32 %r200, 7
  %add202 = add i32 184, %andtmp201
  call void @o(i32 %add202)
  %fc203 = load i32, i32* %fc, align 4
  call void @gen_le32(i32 %fc203)
  br label %cond_end170

cond_end170:                                      ; preds = %cond_else_block169, %cond_end182
  br label %cond_end146

cond_jump_then180:                                ; preds = %cond_jump_then168
  call void @o(i32 36168)
  %r183 = load i32, i32* %r, align 4
  %andtmp184 = and i32 %r183, 7
  %mul = mul i32 %andtmp184, 8
  %add185 = add i32 5, %mul
  call void @o(i32 %add185)
  %fr186 = load i32, i32* %fr, align 4
  %sv187 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL188 = getelementptr inbounds %SValue, %SValue* %sv187, i32 0, i32 4
  %sym189 = load %Sym*, %Sym** %fieldLLL188, align 8
  %fc190 = load i32, i32* %fc, align 4
  call void @gen_addrpc32(i32 %fr186, %Sym* %sym189, i32 %fc190)
  br label %cond_end182

cond_else_block181:                               ; preds = %cond_jump_then168
  call void @o(i32 35656)
  %r191 = load i32, i32* %r, align 4
  %andtmp192 = and i32 %r191, 7
  %mul193 = mul i32 %andtmp192, 8
  %add194 = add i32 5, %mul193
  call void @o(i32 %add194)
  %r195 = load i32, i32* %r, align 4
  %sv196 = load %SValue*, %SValue** %sv, align 8
  %fieldLLL197 = getelementptr inbounds %SValue, %SValue* %sv196, i32 0, i32 4
  %sym198 = load %Sym*, %Sym** %fieldLLL197, align 8
  %fc199 = load i32, i32* %fc, align 4
  call void @gen_gotpcrel(i32 %r195, %Sym* %sym198, i32 %fc199)
  br label %cond_end182

cond_end182:                                      ; preds = %cond_else_block181, %cond_jump_then180
  br label %cond_end170

cond_jump_then225:                                ; preds = %cond_jump_elif2136
  %v227 = load i32, i32* %v, align 4
  %eq228 = icmp eq i32 %v227, 245
  %oror229 = or i1 %eq224, %eq228
  store i1 %oror229, i1* %oror222, align 1
  br label %cond_jump_end226

cond_jump_end226:                                 ; preds = %cond_jump_then225, %cond_jump_elif2136
  %oror_result_value230 = load i1, i1* %oror222, align 1
  br i1 %oror_result_value230, label %cond_jump_elif_then2137, label %cond_jump_elif3138

cond_jump_then246:                                ; preds = %cond_jump_elif_then3139
  %v251 = load i32, i32* %v, align 4
  %eq252 = icmp eq i32 %v251, 4
  br i1 %eq252, label %cond_jump_then253, label %cond_else_block254

cond_jump_elif0247:                               ; preds = %cond_jump_elif_then3139
  %r258 = load i32, i32* %r, align 4
  %eq259 = icmp eq i32 %r258, 4
  br i1 %eq259, label %cond_jump_elif_then0248, label %cond_else_block249

cond_jump_elif_then0248:                          ; preds = %cond_jump_elif0247
  %v260 = load i32, i32* %v, align 4
  %eq261 = icmp eq i32 %v260, 3
  br i1 %eq261, label %cond_jump_then262, label %cond_else_block263

cond_else_block249:                               ; preds = %cond_jump_elif0247
  %r267 = load i32, i32* %r, align 4
  %rshifttmp268 = lshr i32 %r267, 3
  %andtmp269 = and i32 %rshifttmp268, 1
  %ortmp270 = or i32 72, %andtmp269
  %v271 = load i32, i32* %v, align 4
  %rshifttmp272 = lshr i32 %v271, 3
  %andtmp273 = and i32 %rshifttmp272, 1
  %lshifttmp = shl i32 %andtmp273, 2
  %ortmp274 = or i32 %ortmp270, %lshifttmp
  call void @o(i32 %ortmp274)
  call void @o(i32 137)
  %r275 = load i32, i32* %r, align 4
  %add276 = add i32 192, %r275
  %v277 = load i32, i32* %v, align 4
  %mul278 = mul i32 %v277, 8
  %add279 = add i32 %add276, %mul278
  call void @o(i32 %add279)
  br label %cond_end250

cond_end250:                                      ; preds = %cond_else_block249, %cond_end264, %cond_end255
  br label %cond_end140

cond_jump_then253:                                ; preds = %cond_jump_then246
  store i32 0, i32* %conditional_result_type256, align 4
  br label %cond_end255

cond_else_block254:                               ; preds = %cond_jump_then246
  call void @__assert_fail(i8* bitcast ([14 x i8]* @2 to i8*), i8* bitcast ([13 x i8]* @3 to i8*), i32 384, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @load.2, i32 0, i32 0))
  store i32 0, i32* %conditional_result_type256, align 4
  br label %cond_end255

cond_end255:                                      ; preds = %cond_else_block254, %cond_jump_then253
  %conditional_result_value257 = load i32, i32* %conditional_result_type256, align 4
  call void @o(i32 -266052387)
  call void @o(i32 1141903346)
  call void @o(i32 61476)
  br label %cond_end250

cond_jump_then262:                                ; preds = %cond_jump_elif_then0248
  store i32 0, i32* %conditional_result_type265, align 4
  br label %cond_end264

cond_else_block263:                               ; preds = %cond_jump_elif_then0248
  call void @__assert_fail(i8* bitcast ([15 x i8]* @4 to i8*), i8* bitcast ([13 x i8]* @5 to i8*), i32 391, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @load.3, i32 0, i32 0))
  store i32 0, i32* %conditional_result_type265, align 4
  br label %cond_end264

cond_end264:                                      ; preds = %cond_else_block263, %cond_jump_then262
  %conditional_result_value266 = load i32, i32* %conditional_result_type265, align 4
  call void @o(i32 1141968882)
  call void @o(i32 61476)
  call void @o(i32 -266058531)
  br label %cond_end250
}

define void @store(i32 %0, %SValue* %1) {
entry:
  %oror118 = alloca i1, align 1
  %oror117 = alloca i1, align 1
  %oror78 = alloca i1, align 1
  %oror77 = alloca i1, align 1
  %oror = alloca i1, align 1
  %condtional_result_value = alloca i32, align 4
  %andand = alloca i1, align 1
  %pic = alloca i32, align 4
  %op64 = alloca i32, align 4
  %fc = alloca i32, align 4
  %ft = alloca i32, align 4
  %bt = alloca i32, align 4
  %fr = alloca i32, align 4
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %v = alloca %SValue*, align 8
  %v2 = alloca %SValue**, align 8
  store %SValue* %1, %SValue** %v, align 8
  store %SValue** %v, %SValue*** %v2, align 8
  store i32 0, i32* %op64, align 4
  store i32 0, i32* %pic, align 4
  %v3 = load %SValue*, %SValue** %v, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %v3, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  store i32 %t, i32* %ft, align 4
  %v4 = load %SValue*, %SValue** %v, align 8
  %fieldLLL5 = getelementptr inbounds %SValue, %SValue* %v4, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL5, align 16
  %ICASTO = bitcast %CValue* %fieldLLL5 to i32*
  %ul = load i32, i32* %ICASTO, align 4
  store i32 %ul, i32* %fc, align 4
  %v6 = load %SValue*, %SValue** %v, align 8
  %fieldLLL7 = getelementptr inbounds %SValue, %SValue* %v6, i32 0, i32 1
  %r8 = load i16, i16* %fieldLLL7, align 2
  %icastKY = zext i16 %r8 to i32
  %andtmp = and i32 %icastKY, 255
  store i32 %andtmp, i32* %fr, align 4
  %ft9 = load i32, i32* %ft, align 4
  %andtmp10 = and i32 %ft9, 15
  store i32 %andtmp10, i32* %bt, align 4
  %fr11 = load i32, i32* %fr, align 4
  %eq = icmp eq i32 %fr11, 240
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %v12 = load %SValue*, %SValue** %v, align 8
  %fieldLLL13 = getelementptr inbounds %SValue, %SValue* %v12, i32 0, i32 1
  %r14 = load i16, i16* %fieldLLL13, align 2
  %icastKY15 = zext i16 %r14 to i32
  %andtmp16 = and i32 %icastKY15, 512
  %icmpA = icmp ne i32 %andtmp16, 0
  %andand17 = and i1 %eq, %icmpA
  store i1 %andand17, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then18, label %cond_end

cond_jump_then18:                                 ; preds = %cond_jump_end
  call void @o(i32 1936204)
  %v19 = load %SValue*, %SValue** %v, align 8
  %fieldLLL20 = getelementptr inbounds %SValue, %SValue* %v19, i32 0, i32 4
  %sym = load %Sym*, %Sym** %fieldLLL20, align 8
  %v21 = load %SValue*, %SValue** %v, align 8
  %fieldLLL22 = getelementptr inbounds %SValue, %SValue* %v21, i32 0, i32 3
  %c23 = load %CValue, %CValue* %fieldLLL22, align 16
  %ICASTO24 = bitcast %CValue* %fieldLLL22 to i32*
  %ul25 = load i32, i32* %ICASTO24, align 4
  call void @gen_gotpcrel(i32 11, %Sym* %sym, i32 %ul25)
  %bt26 = load i32, i32* %bt, align 4
  %fun_result = call i32 @is64_type(i32 %bt26)
  %icmpA27 = icmp ne i32 %fun_result, 0
  br i1 %icmpA27, label %cond_jump_then28, label %cond_else_block

cond_end:                                         ; preds = %cond_end29, %cond_jump_end
  %bt30 = load i32, i32* %bt, align 4
  %eq31 = icmp eq i32 %bt30, 8
  br i1 %eq31, label %cond_jump_then32, label %cond_jump_elif0

cond_jump_then28:                                 ; preds = %cond_jump_then18
  store i32 73, i32* %condtional_result_value, align 4
  br label %cond_end29

cond_else_block:                                  ; preds = %cond_jump_then18
  store i32 65, i32* %condtional_result_value, align 4
  br label %cond_end29

cond_end29:                                       ; preds = %cond_else_block, %cond_jump_then28
  %conditional_result_value = load i32, i32* %condtional_result_value, align 4
  store i32 %conditional_result_value, i32* %pic, align 4
  br label %cond_end

cond_jump_then32:                                 ; preds = %cond_end
  call void @o(i32 102)
  %pic35 = load i32, i32* %pic, align 4
  call void @o(i32 %pic35)
  call void @o(i32 32271)
  store i32 0, i32* %r, align 4
  br label %cond_end34

cond_jump_elif0:                                  ; preds = %cond_end
  %bt36 = load i32, i32* %bt, align 4
  %eq37 = icmp eq i32 %bt36, 9
  br i1 %eq37, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @o(i32 102)
  %pic38 = load i32, i32* %pic, align 4
  call void @o(i32 %pic38)
  call void @o(i32 54799)
  store i32 0, i32* %r, align 4
  br label %cond_end34

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %bt39 = load i32, i32* %bt, align 4
  %eq40 = icmp eq i32 %bt39, 10
  br i1 %eq40, label %cond_jump_elif_then1, label %cond_else_block33

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  call void @o(i32 49369)
  %pic41 = load i32, i32* %pic, align 4
  call void @o(i32 %pic41)
  call void @o(i32 219)
  store i32 7, i32* %r, align 4
  br label %cond_end34

cond_else_block33:                                ; preds = %cond_jump_elif1
  %bt42 = load i32, i32* %bt, align 4
  %eq43 = icmp eq i32 %bt42, 2
  br i1 %eq43, label %cond_jump_then44, label %cond_end45

cond_end34:                                       ; preds = %cond_end58, %cond_jump_elif_then1, %cond_jump_elif_then0, %cond_jump_then32
  %pic62 = load i32, i32* %pic, align 4
  %icmpA63 = icmp ne i32 %pic62, 0
  br i1 %icmpA63, label %cond_jump_then64, label %cond_jump_elif065

cond_jump_then44:                                 ; preds = %cond_else_block33
  call void @o(i32 102)
  br label %cond_end45

cond_end45:                                       ; preds = %cond_jump_then44, %cond_else_block33
  %pic46 = load i32, i32* %pic, align 4
  call void @o(i32 %pic46)
  %bt47 = load i32, i32* %bt, align 4
  %eq48 = icmp eq i32 %bt47, 1
  store i1 %eq48, i1* %oror, align 1
  br i1 %eq48, label %cond_jump_end50, label %cond_jump_then49

cond_jump_then49:                                 ; preds = %cond_end45
  %bt51 = load i32, i32* %bt, align 4
  %eq52 = icmp eq i32 %bt51, 11
  %oror53 = or i1 %eq48, %eq52
  store i1 %oror53, i1* %oror, align 1
  br label %cond_jump_end50

cond_jump_end50:                                  ; preds = %cond_jump_then49, %cond_end45
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then54, label %cond_jump_elif055

cond_jump_then54:                                 ; preds = %cond_jump_end50
  call void @o(i32 136)
  br label %cond_end58

cond_jump_elif055:                                ; preds = %cond_jump_end50
  %bt59 = load i32, i32* %bt, align 4
  %fun_result60 = call i32 @is64_type(i32 %bt59)
  %icmpA61 = icmp ne i32 %fun_result60, 0
  br i1 %icmpA61, label %cond_jump_elif_then056, label %cond_else_block57

cond_jump_elif_then056:                           ; preds = %cond_jump_elif055
  store i32 137, i32* %op64, align 4
  br label %cond_end58

cond_else_block57:                                ; preds = %cond_jump_elif055
  call void @o(i32 137)
  br label %cond_end58

cond_end58:                                       ; preds = %cond_else_block57, %cond_jump_elif_then056, %cond_jump_then54
  br label %cond_end34

cond_jump_then64:                                 ; preds = %cond_end34
  %op6469 = load i32, i32* %op64, align 4
  %icmpA70 = icmp ne i32 %op6469, 0
  br i1 %icmpA70, label %cond_jump_then71, label %cond_end72

cond_jump_elif065:                                ; preds = %cond_end34
  %op6475 = load i32, i32* %op64, align 4
  %icmpA76 = icmp ne i32 %op6475, 0
  br i1 %icmpA76, label %cond_jump_elif_then066, label %cond_else_block67

cond_jump_elif_then066:                           ; preds = %cond_jump_elif065
  %fr79 = load i32, i32* %fr, align 4
  %eq80 = icmp eq i32 %fr79, 240
  store i1 %eq80, i1* %oror78, align 1
  br i1 %eq80, label %cond_jump_end82, label %cond_jump_then81

cond_else_block67:                                ; preds = %cond_jump_elif065
  %fr119 = load i32, i32* %fr, align 4
  %eq120 = icmp eq i32 %fr119, 240
  store i1 %eq120, i1* %oror118, align 1
  br i1 %eq120, label %cond_jump_end122, label %cond_jump_then121

cond_end68:                                       ; preds = %cond_end140, %cond_end100, %cond_end72
  ret void

cond_jump_then71:                                 ; preds = %cond_jump_then64
  %op6473 = load i32, i32* %op64, align 4
  call void @o(i32 %op6473)
  br label %cond_end72

cond_end72:                                       ; preds = %cond_jump_then71, %cond_jump_then64
  %r74 = load i32, i32* %r, align 4
  %lshifttmp = shl i32 %r74, 3
  %add = add i32 3, %lshifttmp
  call void @o(i32 %add)
  br label %cond_end68

cond_jump_then81:                                 ; preds = %cond_jump_elif_then066
  %fr83 = load i32, i32* %fr, align 4
  %eq84 = icmp eq i32 %fr83, 242
  %oror85 = or i1 %eq80, %eq84
  store i1 %oror85, i1* %oror78, align 1
  br label %cond_jump_end82

cond_jump_end82:                                  ; preds = %cond_jump_then81, %cond_jump_elif_then066
  %oror_result_value86 = load i1, i1* %oror78, align 1
  store i1 %oror_result_value86, i1* %oror77, align 1
  br i1 %oror_result_value86, label %cond_jump_end88, label %cond_jump_then87

cond_jump_then87:                                 ; preds = %cond_jump_end82
  %v89 = load %SValue*, %SValue** %v, align 8
  %fieldLLL90 = getelementptr inbounds %SValue, %SValue* %v89, i32 0, i32 1
  %r91 = load i16, i16* %fieldLLL90, align 2
  %icastKY92 = zext i16 %r91 to i32
  %andtmp93 = and i32 %icastKY92, 256
  %icmpA94 = icmp ne i32 %andtmp93, 0
  %oror95 = or i1 %oror_result_value86, %icmpA94
  store i1 %oror95, i1* %oror77, align 1
  br label %cond_jump_end88

cond_jump_end88:                                  ; preds = %cond_jump_then87, %cond_jump_end82
  %oror_result_value96 = load i1, i1* %oror77, align 1
  br i1 %oror_result_value96, label %cond_jump_then97, label %cond_jump_elif098

cond_jump_then97:                                 ; preds = %cond_jump_end88
  %op64101 = load i32, i32* %op64, align 4
  %r102 = load i32, i32* %r, align 4
  %v103 = load %SValue*, %SValue** %v, align 8
  %fieldLLL104 = getelementptr inbounds %SValue, %SValue* %v103, i32 0, i32 1
  %r105 = load i16, i16* %fieldLLL104, align 2
  %icastKY106 = zext i16 %r105 to i32
  %v107 = load %SValue*, %SValue** %v, align 8
  %fieldLLL108 = getelementptr inbounds %SValue, %SValue* %v107, i32 0, i32 4
  %sym109 = load %Sym*, %Sym** %fieldLLL108, align 8
  %fc110 = load i32, i32* %fc, align 4
  call void @gen_modrm64(i32 %op64101, i32 %r102, i32 %icastKY106, %Sym* %sym109, i32 %fc110)
  br label %cond_end100

cond_jump_elif098:                                ; preds = %cond_jump_end88
  %fr111 = load i32, i32* %fr, align 4
  %r112 = load i32, i32* %r, align 4
  %not_eq = icmp ne i32 %fr111, %r112
  br i1 %not_eq, label %cond_jump_elif_then099, label %cond_end100

cond_jump_elif_then099:                           ; preds = %cond_jump_elif098
  call void @abort()
  %fr113 = load i32, i32* %fr, align 4
  %add114 = add i32 192, %fr113
  %r115 = load i32, i32* %r, align 4
  %mul = mul i32 %r115, 8
  %add116 = add i32 %add114, %mul
  call void @o(i32 %add116)
  br label %cond_end100

cond_end100:                                      ; preds = %cond_jump_elif_then099, %cond_jump_elif098, %cond_jump_then97
  br label %cond_end68

cond_jump_then121:                                ; preds = %cond_else_block67
  %fr123 = load i32, i32* %fr, align 4
  %eq124 = icmp eq i32 %fr123, 242
  %oror125 = or i1 %eq120, %eq124
  store i1 %oror125, i1* %oror118, align 1
  br label %cond_jump_end122

cond_jump_end122:                                 ; preds = %cond_jump_then121, %cond_else_block67
  %oror_result_value126 = load i1, i1* %oror118, align 1
  store i1 %oror_result_value126, i1* %oror117, align 1
  br i1 %oror_result_value126, label %cond_jump_end128, label %cond_jump_then127

cond_jump_then127:                                ; preds = %cond_jump_end122
  %v129 = load %SValue*, %SValue** %v, align 8
  %fieldLLL130 = getelementptr inbounds %SValue, %SValue* %v129, i32 0, i32 1
  %r131 = load i16, i16* %fieldLLL130, align 2
  %icastKY132 = zext i16 %r131 to i32
  %andtmp133 = and i32 %icastKY132, 256
  %icmpA134 = icmp ne i32 %andtmp133, 0
  %oror135 = or i1 %oror_result_value126, %icmpA134
  store i1 %oror135, i1* %oror117, align 1
  br label %cond_jump_end128

cond_jump_end128:                                 ; preds = %cond_jump_then127, %cond_jump_end122
  %oror_result_value136 = load i1, i1* %oror117, align 1
  br i1 %oror_result_value136, label %cond_jump_then137, label %cond_jump_elif0138

cond_jump_then137:                                ; preds = %cond_jump_end128
  %r141 = load i32, i32* %r, align 4
  %v142 = load %SValue*, %SValue** %v, align 8
  %fieldLLL143 = getelementptr inbounds %SValue, %SValue* %v142, i32 0, i32 1
  %r144 = load i16, i16* %fieldLLL143, align 2
  %icastKY145 = zext i16 %r144 to i32
  %v146 = load %SValue*, %SValue** %v, align 8
  %fieldLLL147 = getelementptr inbounds %SValue, %SValue* %v146, i32 0, i32 4
  %sym148 = load %Sym*, %Sym** %fieldLLL147, align 8
  %fc149 = load i32, i32* %fc, align 4
  call void @gen_modrm(i32 %r141, i32 %icastKY145, %Sym* %sym148, i32 %fc149)
  br label %cond_end140

cond_jump_elif0138:                               ; preds = %cond_jump_end128
  %fr150 = load i32, i32* %fr, align 4
  %r151 = load i32, i32* %r, align 4
  %not_eq152 = icmp ne i32 %fr150, %r151
  br i1 %not_eq152, label %cond_jump_elif_then0139, label %cond_end140

cond_jump_elif_then0139:                          ; preds = %cond_jump_elif0138
  call void @abort()
  %fr153 = load i32, i32* %fr, align 4
  %add154 = add i32 192, %fr153
  %r155 = load i32, i32* %r, align 4
  %mul156 = mul i32 %r155, 8
  %add157 = add i32 %add154, %mul156
  call void @o(i32 %add157)
  br label %cond_end140

cond_end140:                                      ; preds = %cond_jump_elif_then0139, %cond_jump_elif0138, %cond_jump_then137
  br label %cond_end68
}

define internal void @gadd_sp(i32 %0) {
entry:
  %val = alloca i32, align 4
  %val1 = alloca i32*, align 8
  store i32 %0, i32* %val, align 4
  store i32* %val, i32** %val1, align 8
  %val2 = load i32, i32* %val, align 4
  %val3 = load i32, i32* %val, align 4
  %icastJ = trunc i32 %val3 to i8
  %icastL = sext i8 %icastJ to i32
  %eq = icmp eq i32 %val2, %icastL
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  call void @o(i32 12878664)
  %val4 = load i32, i32* %val, align 4
  call void @g(i32 %val4)
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %val5 = load i32, i32* %val, align 4
  %fun_result = call i32 @oad(i32 12878152, i32 %val5)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  ret void
}

define internal void @gcall_or_jmp(i32 %0) {
entry:
  %r = alloca i32, align 4
  %is_jmp = alloca i32, align 4
  %is_jmp1 = alloca i32*, align 8
  store i32 %0, i32* %is_jmp, align 4
  store i32* %is_jmp, i32** %is_jmp1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r2 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r2 to i32
  %andtmp = and i32 %icastKY, 511
  %eq = icmp eq i32 %andtmp, 240
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %vtop3 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL4 = getelementptr inbounds %SValue, %SValue* %vtop3, i32 0, i32 1
  %r5 = load i16, i16* %fieldLLL4, align 2
  %icastKY6 = zext i16 %r5 to i32
  %andtmp7 = and i32 %icastKY6, 512
  %icmpA = icmp ne i32 %andtmp7, 0
  br i1 %icmpA, label %cond_jump_then8, label %cond_else_block9

cond_else_block:                                  ; preds = %entry
  store i32 11, i32* %r, align 4
  %r21 = load i32, i32* %r, align 4
  %vtop22 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 %r21, %SValue* %vtop22)
  call void @o(i32 65)
  call void @o(i32 255)
  %r23 = load i32, i32* %r, align 4
  %andtmp24 = and i32 %r23, 7
  %add25 = add i32 208, %andtmp24
  %is_jmp26 = load i32, i32* %is_jmp, align 4
  %lshifttmp = shl i32 %is_jmp26, 4
  %add27 = add i32 %add25, %lshifttmp
  call void @o(i32 %add27)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end10
  ret void

cond_jump_then8:                                  ; preds = %cond_jump_then
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %vtop11 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL12 = getelementptr inbounds %SValue, %SValue* %vtop11, i32 0, i32 4
  %sym = load %Sym*, %Sym** %fieldLLL12, align 8
  %ind = load i32, i32* @ind, align 4
  %add = add i32 %ind, 1
  %icastD = sext i32 %add to i64
  call void @greloc(%Section* %cur_text_section, %Sym* %sym, i64 %icastD, i32 2)
  br label %cond_end10

cond_else_block9:                                 ; preds = %cond_jump_then
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %cur_text_section13 = load %Section*, %Section** @cur_text_section, align 8
  %ind14 = load i32, i32* @ind, align 4
  %add15 = add i32 %ind14, 1
  %icastD16 = sext i32 %add15 to i64
  call void @put_elf_reloc(%Section* %symtab_section, %Section* %cur_text_section13, i64 %icastD16, i32 2, i32 0)
  br label %cond_end10

cond_end10:                                       ; preds = %cond_else_block9, %cond_jump_then8
  %is_jmp17 = load i32, i32* %is_jmp, align 4
  %add18 = add i32 232, %is_jmp17
  %vtop19 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL20 = getelementptr inbounds %SValue, %SValue* %vtop19, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL20, align 16
  %ICASTO = bitcast %CValue* %fieldLLL20 to i32*
  %ul = load i32, i32* %ICASTO, align 4
  %sub = sub i32 %ul, 4
  %fun_result = call i32 @oad(i32 %add18, i32 %sub)
  br label %cond_end
}

define void @gfunc_call(i32 %0) {
entry:
  %condtional_result_value = alloca i32, align 4
  %j228 = alloca i32, align 4
  %j218 = alloca i32, align 4
  %oror = alloca i1, align 1
  %j160 = alloca i32, align 4
  %j = alloca i32, align 4
  %tmp = alloca %SValue, align 16
  %gen_reg = alloca i32, align 4
  %sse_reg = alloca i32, align 4
  %nb_sse_args = alloca i32, align 4
  %nb_reg_args = alloca i32, align 4
  %orig_vtop = alloca %SValue*, align 8
  %func_sym = alloca %Sym*, align 8
  %func_call = alloca i32, align 4
  %i = alloca i32, align 4
  %args_size = alloca i32, align 4
  %r = alloca i32, align 4
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %nb_args = alloca i32, align 4
  %nb_args1 = alloca i32*, align 8
  store i32 %0, i32* %nb_args, align 4
  store i32* %nb_args, i32** %nb_args1, align 8
  store i32 0, i32* %nb_reg_args, align 4
  store i32 0, i32* %nb_sse_args, align 4
  store i32 0, i32* %args_size, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %i63 = load i32, i32* %i, align 4
  %add64 = add i32 %i63, 1
  store i32 %add64, i32* %i, align 4
  %i65 = load i32, i32* %i, align 4
  %sub66 = sub i32 %i65, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i2 = load i32, i32* %i, align 4
  %nb_args3 = load i32, i32* %nb_args, align 4
  %le = icmp slt i32 %i2, %nb_args3
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %i4 = load i32, i32* %i, align 4
  %sub = sub i32 0, %i4
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 %sub
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 0
  %type = load %CType, %CType* %fieldVVV, align 8
  %fieldVVV5 = getelementptr inbounds %CType, %CType* %fieldVVV, i32 0, i32 0
  %t = load i32, i32* %fieldVVV5, align 4
  %andtmp = and i32 %t, 15
  %eq = icmp eq i32 %andtmp, 7
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_end_block:                                   ; preds = %loop_top_block
  %vtop67 = load %SValue*, %SValue** @vtop, align 8
  store %SValue* %vtop67, %SValue** %orig_vtop, align 8
  %nb_reg_args68 = load i32, i32* %nb_reg_args, align 4
  store i32 %nb_reg_args68, i32* %gen_reg, align 4
  %nb_sse_args69 = load i32, i32* %nb_sse_args, align 4
  store i32 %nb_sse_args69, i32* %sse_reg, align 4
  %args_size70 = load i32, i32* %args_size, align 4
  %andtmp71 = and i32 %args_size70, 8
  store i32 %andtmp71, i32* %args_size, align 4
  %icmpA72 = icmp ne i32 %andtmp71, 0
  br i1 %icmpA72, label %cond_jump_then73, label %cond_end74

cond_jump_then:                                   ; preds = %cond_then_block
  %args_size6 = load i32, i32* %args_size, align 4
  %vtop7 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop7, i32 0, i32 0
  %type8 = load %CType, %CType* %fieldLLL, align 8
  %align9 = load i32, i32* %align, align 4
  %fun_result = call i32 @type_size(%CType* %fieldLLL, i32* %align)
  %add = add i32 %args_size6, %fun_result
  store i32 %add, i32* %args_size, align 4
  %vtop10 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL11 = getelementptr inbounds %SValue, %SValue* %vtop10, i32 0, i32 0
  %type12 = load %CType, %CType* %fieldLLL11, align 8
  %align13 = load i32, i32* %align, align 4
  %fun_result14 = call i32 @type_size(%CType* %fieldLLL11, i32* %align)
  %sub15 = sub i32 %add, %fun_result14
  br label %cond_end

cond_jump_elif0:                                  ; preds = %cond_then_block
  %vtop16 = load %SValue*, %SValue** @vtop, align 8
  %i17 = load i32, i32* %i, align 4
  %sub18 = sub i32 0, %i17
  %element_addressAB19 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY20 = getelementptr inbounds %SValue, %SValue* %element_addressAB19, i32 %sub18
  %load_element21 = load %SValue, %SValue* %element_addressXYXZY20, align 16
  %fieldVVV22 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY20, i32 0, i32 0
  %type23 = load %CType, %CType* %fieldVVV22, align 8
  %fieldVVV24 = getelementptr inbounds %CType, %CType* %fieldVVV22, i32 0, i32 0
  %t25 = load i32, i32* %fieldVVV24, align 4
  %andtmp26 = and i32 %t25, 15
  %eq27 = icmp eq i32 %andtmp26, 10
  br i1 %eq27, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %args_size28 = load i32, i32* %args_size, align 4
  %add29 = add i32 %args_size28, 16
  store i32 %add29, i32* %args_size, align 4
  %sub30 = sub i32 %add29, 16
  br label %cond_end

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %vtop31 = load %SValue*, %SValue** @vtop, align 8
  %i32 = load i32, i32* %i, align 4
  %sub33 = sub i32 0, %i32
  %element_addressAB34 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY35 = getelementptr inbounds %SValue, %SValue* %element_addressAB34, i32 %sub33
  %load_element36 = load %SValue, %SValue* %element_addressXYXZY35, align 16
  %fieldVVV37 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY35, i32 0, i32 0
  %type38 = load %CType, %CType* %fieldVVV37, align 8
  %fieldVVV39 = getelementptr inbounds %CType, %CType* %fieldVVV37, i32 0, i32 0
  %t40 = load i32, i32* %fieldVVV39, align 4
  %fun_result41 = call i32 @is_sse_float(i32 %t40)
  %icmpA = icmp ne i32 %fun_result41, 0
  br i1 %icmpA, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %nb_sse_args42 = load i32, i32* %nb_sse_args, align 4
  %add43 = add i32 %nb_sse_args42, 1
  store i32 %add43, i32* %nb_sse_args, align 4
  %nb_sse_args44 = load i32, i32* %nb_sse_args, align 4
  %sub45 = sub i32 %nb_sse_args44, 1
  %nb_sse_args46 = load i32, i32* %nb_sse_args, align 4
  %gt = icmp sgt i32 %nb_sse_args46, 8
  br i1 %gt, label %cond_jump_then47, label %cond_end48

cond_else_block:                                  ; preds = %cond_jump_elif1
  %nb_reg_args52 = load i32, i32* %nb_reg_args, align 4
  %add53 = add i32 %nb_reg_args52, 1
  store i32 %add53, i32* %nb_reg_args, align 4
  %nb_reg_args54 = load i32, i32* %nb_reg_args, align 4
  %sub55 = sub i32 %nb_reg_args54, 1
  %nb_reg_args56 = load i32, i32* %nb_reg_args, align 4
  %gt57 = icmp sgt i32 %nb_reg_args56, 6
  br i1 %gt57, label %cond_jump_then58, label %cond_end59

cond_end:                                         ; preds = %cond_end59, %cond_end48, %cond_jump_elif_then0, %cond_jump_then
  br label %loop_continue_top_block

cond_jump_then47:                                 ; preds = %cond_jump_elif_then1
  %args_size49 = load i32, i32* %args_size, align 4
  %add50 = add i32 %args_size49, 8
  store i32 %add50, i32* %args_size, align 4
  %sub51 = sub i32 %add50, 8
  br label %cond_end48

cond_end48:                                       ; preds = %cond_jump_then47, %cond_jump_elif_then1
  br label %cond_end

cond_jump_then58:                                 ; preds = %cond_else_block
  %args_size60 = load i32, i32* %args_size, align 4
  %add61 = add i32 %args_size60, 8
  store i32 %add61, i32* %args_size, align 4
  %sub62 = sub i32 %add61, 8
  br label %cond_end59

cond_end59:                                       ; preds = %cond_jump_then58, %cond_else_block
  br label %cond_end

cond_jump_then73:                                 ; preds = %cond_end_block
  call void @o(i32 80)
  br label %cond_end74

cond_end74:                                       ; preds = %cond_jump_then73, %cond_end_block
  store i32 0, i32* %i, align 4
  br label %loop_top_block76

loop_continue_top_block75:                        ; preds = %cond_end95
  %i174 = load i32, i32* %i, align 4
  %add175 = add i32 %i174, 1
  store i32 %add175, i32* %i, align 4
  %i176 = load i32, i32* %i, align 4
  %sub177 = sub i32 %i176, 1
  br label %loop_top_block76

loop_top_block76:                                 ; preds = %loop_continue_top_block75, %cond_end74
  %i77 = load i32, i32* %i, align 4
  %nb_args78 = load i32, i32* %nb_args, align 4
  %le79 = icmp slt i32 %i77, %nb_args78
  br i1 %le79, label %cond_then_block80, label %cond_end_block81

cond_then_block80:                                ; preds = %loop_top_block76
  %vtop82 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL83 = getelementptr inbounds %SValue, %SValue* %vtop82, i32 0, i32 0
  %type84 = load %CType, %CType* %fieldLLL83, align 8
  %fieldVVV85 = getelementptr inbounds %CType, %CType* %fieldLLL83, i32 0, i32 0
  %t86 = load i32, i32* %fieldVVV85, align 4
  %andtmp87 = and i32 %t86, 15
  %eq88 = icmp eq i32 %andtmp87, 7
  br i1 %eq88, label %cond_jump_then89, label %cond_jump_elif090

cond_end_block81:                                 ; preds = %loop_top_block76
  %orig_vtop178 = load %SValue*, %SValue** %orig_vtop, align 8
  store %SValue* %orig_vtop178, %SValue** @vtop, align 8
  %nb_reg_args179 = load i32, i32* %nb_reg_args, align 4
  store i32 %nb_reg_args179, i32* %gen_reg, align 4
  %nb_sse_args180 = load i32, i32* %nb_sse_args, align 4
  store i32 %nb_sse_args180, i32* %sse_reg, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block182

cond_jump_then89:                                 ; preds = %cond_then_block80
  %vtop96 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL97 = getelementptr inbounds %SValue, %SValue* %vtop96, i32 0, i32 0
  %type98 = load %CType, %CType* %fieldLLL97, align 8
  %align99 = load i32, i32* %align, align 4
  %fun_result100 = call i32 @type_size(%CType* %fieldLLL97, i32* %align)
  store i32 %fun_result100, i32* %size, align 4
  %size101 = load i32, i32* %size, align 4
  %add102 = add i32 %size101, 3
  %andtmp103 = and i32 %add102, -4
  store i32 %andtmp103, i32* %size, align 4
  call void @o(i32 72)
  %size104 = load i32, i32* %size, align 4
  %fun_result105 = call i32 @oad(i32 60545, i32 %size104)
  %fun_result106 = call i32 @get_reg(i32 1)
  store i32 %fun_result106, i32* %r, align 4
  %r107 = load i32, i32* %r, align 4
  %rshifttmp = lshr i32 %r107, 3
  %andtmp108 = and i32 %rshifttmp, 1
  %add109 = add i32 72, %andtmp108
  call void @o(i32 %add109)
  call void @o(i32 137)
  %r110 = load i32, i32* %r, align 4
  %add111 = add i32 224, %r110
  call void @o(i32 %add111)
  %vtop112 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB113 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY114 = getelementptr inbounds %SValue, %SValue* %element_addressAB113, i32 1
  %load_element115 = load %SValue, %SValue* %element_addressXYXZY114, align 16
  store %SValue %load_element115, %SValue* %tmp, align 16
  %vtop116 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL117 = getelementptr inbounds %SValue, %SValue* %vtop116, i32 0, i32 0
  %type118 = load %CType, %CType* %fieldLLL117, align 8
  %r119 = load i32, i32* %r, align 4
  %ortmp = or i32 %r119, 256
  call void @vset(%CType* %fieldLLL117, i32 %ortmp, i32 0)
  call void @vswap()
  call void @vstore()
  %vtop120 = load %SValue*, %SValue** @vtop, align 8
  %tmp121 = load %SValue, %SValue* %tmp, align 16
  %element_addressXYXY = getelementptr %SValue, %SValue* %vtop120, i32 1
  store %SValue %tmp121, %SValue* %element_addressXYXY, align 16
  %args_size122 = load i32, i32* %args_size, align 4
  %size123 = load i32, i32* %size, align 4
  %add124 = add i32 %args_size122, %size123
  store i32 %add124, i32* %args_size, align 4
  %size125 = load i32, i32* %size, align 4
  %sub126 = sub i32 %add124, %size125
  br label %cond_end95

cond_jump_elif090:                                ; preds = %cond_then_block80
  %vtop127 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL128 = getelementptr inbounds %SValue, %SValue* %vtop127, i32 0, i32 0
  %type129 = load %CType, %CType* %fieldLLL128, align 8
  %fieldVVV130 = getelementptr inbounds %CType, %CType* %fieldLLL128, i32 0, i32 0
  %t131 = load i32, i32* %fieldVVV130, align 4
  %andtmp132 = and i32 %t131, 15
  %eq133 = icmp eq i32 %andtmp132, 10
  br i1 %eq133, label %cond_jump_elif_then091, label %cond_jump_elif192

cond_jump_elif_then091:                           ; preds = %cond_jump_elif090
  %fun_result134 = call i32 @gv(i32 64)
  store i32 16, i32* %size, align 4
  %size135 = load i32, i32* %size, align 4
  %fun_result136 = call i32 @oad(i32 15499592, i32 %size135)
  call void @o(i32 31963)
  call void @g(i32 36)
  call void @g(i32 0)
  %args_size137 = load i32, i32* %args_size, align 4
  %size138 = load i32, i32* %size, align 4
  %add139 = add i32 %args_size137, %size138
  store i32 %add139, i32* %args_size, align 4
  %size140 = load i32, i32* %size, align 4
  %sub141 = sub i32 %add139, %size140
  br label %cond_end95

cond_jump_elif192:                                ; preds = %cond_jump_elif090
  %vtop142 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL143 = getelementptr inbounds %SValue, %SValue* %vtop142, i32 0, i32 0
  %type144 = load %CType, %CType* %fieldLLL143, align 8
  %fieldVVV145 = getelementptr inbounds %CType, %CType* %fieldLLL143, i32 0, i32 0
  %t146 = load i32, i32* %fieldVVV145, align 4
  %fun_result147 = call i32 @is_sse_float(i32 %t146)
  %icmpA148 = icmp ne i32 %fun_result147, 0
  br i1 %icmpA148, label %cond_jump_elif_then193, label %cond_else_block94

cond_jump_elif_then193:                           ; preds = %cond_jump_elif192
  %sse_reg149 = load i32, i32* %sse_reg, align 4
  %sub150 = sub i32 %sse_reg149, 1
  store i32 %sub150, i32* %sse_reg, align 4
  store i32 %sub150, i32* %j, align 4
  %j151 = load i32, i32* %j, align 4
  %gteq_signed = icmp sge i32 %j151, 8
  br i1 %gteq_signed, label %cond_jump_then152, label %cond_end153

cond_else_block94:                                ; preds = %cond_jump_elif192
  %gen_reg158 = load i32, i32* %gen_reg, align 4
  %sub159 = sub i32 %gen_reg158, 1
  store i32 %sub159, i32* %gen_reg, align 4
  store i32 %sub159, i32* %j160, align 4
  %j161 = load i32, i32* %j160, align 4
  %gteq_signed162 = icmp sge i32 %j161, 6
  br i1 %gteq_signed162, label %cond_jump_then163, label %cond_end164

cond_end95:                                       ; preds = %cond_end164, %cond_end153, %cond_jump_elif_then091, %cond_jump_then89
  %vtop171 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop171 to i64
  %sub172 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub172 to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add173 = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add173 to %SValue*
  br label %loop_continue_top_block75

cond_jump_then152:                                ; preds = %cond_jump_elif_then193
  %fun_result154 = call i32 @gv(i32 2)
  call void @o(i32 80)
  call void @o(i32 81137510)
  call void @o(i32 36)
  %args_size155 = load i32, i32* %args_size, align 4
  %add156 = add i32 %args_size155, 8
  store i32 %add156, i32* %args_size, align 4
  %sub157 = sub i32 %add156, 8
  br label %cond_end153

cond_end153:                                      ; preds = %cond_jump_then152, %cond_jump_elif_then193
  br label %cond_end95

cond_jump_then163:                                ; preds = %cond_else_block94
  %fun_result165 = call i32 @gv(i32 1)
  store i32 %fun_result165, i32* %r, align 4
  %r166 = load i32, i32* %r, align 4
  %add167 = add i32 80, %r166
  call void @o(i32 %add167)
  %args_size168 = load i32, i32* %args_size, align 4
  %add169 = add i32 %args_size168, 8
  store i32 %add169, i32* %args_size, align 4
  %sub170 = sub i32 %add169, 8
  br label %cond_end164

cond_end164:                                      ; preds = %cond_jump_then163, %cond_else_block94
  br label %cond_end95

loop_continue_top_block181:                       ; preds = %cond_end208
  %i265 = load i32, i32* %i, align 4
  %add266 = add i32 %i265, 1
  store i32 %add266, i32* %i, align 4
  %i267 = load i32, i32* %i, align 4
  %sub268 = sub i32 %i267, 1
  br label %loop_top_block182

loop_top_block182:                                ; preds = %loop_continue_top_block181, %cond_end_block81
  %i183 = load i32, i32* %i, align 4
  %nb_args184 = load i32, i32* %nb_args, align 4
  %le185 = icmp slt i32 %i183, %nb_args184
  br i1 %le185, label %cond_then_block186, label %cond_end_block187

cond_then_block186:                               ; preds = %loop_top_block182
  %vtop188 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL189 = getelementptr inbounds %SValue, %SValue* %vtop188, i32 0, i32 0
  %type190 = load %CType, %CType* %fieldLLL189, align 8
  %fieldVVV191 = getelementptr inbounds %CType, %CType* %fieldLLL189, i32 0, i32 0
  %t192 = load i32, i32* %fieldVVV191, align 4
  %andtmp193 = and i32 %t192, 15
  %eq194 = icmp eq i32 %andtmp193, 7
  store i1 %eq194, i1* %oror, align 1
  br i1 %eq194, label %cond_jump_end, label %cond_jump_then195

cond_end_block187:                                ; preds = %loop_top_block182
  call void @save_regs(i32 0)
  %nb_reg_args269 = load i32, i32* %nb_reg_args, align 4
  %gt270 = icmp sgt i32 %nb_reg_args269, 2
  br i1 %gt270, label %cond_jump_then271, label %cond_end272

cond_jump_then195:                                ; preds = %cond_then_block186
  %vtop196 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL197 = getelementptr inbounds %SValue, %SValue* %vtop196, i32 0, i32 0
  %type198 = load %CType, %CType* %fieldLLL197, align 8
  %fieldVVV199 = getelementptr inbounds %CType, %CType* %fieldLLL197, i32 0, i32 0
  %t200 = load i32, i32* %fieldVVV199, align 4
  %andtmp201 = and i32 %t200, 15
  %eq202 = icmp eq i32 %andtmp201, 10
  %oror203 = or i1 %eq194, %eq202
  store i1 %oror203, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then195, %cond_then_block186
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then204, label %cond_jump_elif0205

cond_jump_then204:                                ; preds = %cond_jump_end
  br label %cond_end208

cond_jump_elif0205:                               ; preds = %cond_jump_end
  %vtop209 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL210 = getelementptr inbounds %SValue, %SValue* %vtop209, i32 0, i32 0
  %type211 = load %CType, %CType* %fieldLLL210, align 8
  %fieldVVV212 = getelementptr inbounds %CType, %CType* %fieldLLL210, i32 0, i32 0
  %t213 = load i32, i32* %fieldVVV212, align 4
  %fun_result214 = call i32 @is_sse_float(i32 %t213)
  %icmpA215 = icmp ne i32 %fun_result214, 0
  br i1 %icmpA215, label %cond_jump_elif_then0206, label %cond_else_block207

cond_jump_elif_then0206:                          ; preds = %cond_jump_elif0205
  %sse_reg216 = load i32, i32* %sse_reg, align 4
  %sub217 = sub i32 %sse_reg216, 1
  store i32 %sub217, i32* %sse_reg, align 4
  store i32 %sub217, i32* %j218, align 4
  %j219 = load i32, i32* %j218, align 4
  %le220 = icmp slt i32 %j219, 8
  br i1 %le220, label %cond_jump_then221, label %cond_end222

cond_else_block207:                               ; preds = %cond_jump_elif0205
  %gen_reg226 = load i32, i32* %gen_reg, align 4
  %sub227 = sub i32 %gen_reg226, 1
  store i32 %sub227, i32* %gen_reg, align 4
  store i32 %sub227, i32* %j228, align 4
  %j229 = load i32, i32* %j228, align 4
  %le230 = icmp slt i32 %j229, 6
  br i1 %le230, label %cond_jump_then231, label %cond_end232

cond_end208:                                      ; preds = %cond_end232, %cond_end222, %cond_jump_then204
  %vtop258 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI259 = ptrtoint %SValue* %vtop258 to i64
  %sub260 = sub i64 %ptrToIntI259, 64
  %iintToPtrD261 = inttoptr i64 %sub260 to %SValue*
  store %SValue* %iintToPtrD261, %SValue** @vtop, align 8
  %ptrToIntC262 = ptrtoint %SValue* %iintToPtrD261 to i64
  %add263 = add i64 %ptrToIntC262, 64
  %intToPtrB264 = inttoptr i64 %add263 to %SValue*
  br label %loop_continue_top_block181

cond_jump_then221:                                ; preds = %cond_jump_elif_then0206
  %fun_result223 = call i32 @gv(i32 2)
  call void @o(i32 10255)
  %sse_reg224 = load i32, i32* %sse_reg, align 4
  %lshifttmp = shl i32 %sse_reg224, 3
  %add225 = add i32 192, %lshifttmp
  call void @o(i32 %add225)
  br label %cond_end222

cond_end222:                                      ; preds = %cond_jump_then221, %cond_jump_elif_then0206
  br label %cond_end208

cond_jump_then231:                                ; preds = %cond_else_block207
  %fun_result233 = call i32 @gv(i32 1)
  store i32 %fun_result233, i32* %r, align 4
  %j234 = load i32, i32* %j228, align 4
  %le235 = icmp slt i32 %j234, 2
  br i1 %le235, label %cond_jump_then236, label %cond_jump_elif0237

cond_end232:                                      ; preds = %cond_end240, %cond_else_block207
  br label %cond_end208

cond_jump_then236:                                ; preds = %cond_jump_then231
  call void @o(i32 35144)
  %r241 = load i32, i32* %r, align 4
  %mul = mul i32 %r241, 8
  %add242 = add i32 192, %mul
  %j243 = load i32, i32* %j228, align 4
  %gepOL = getelementptr [6 x i8], [6 x i8]* @arg_regs, i32 0, i32 %j243
  %elementXXX = load i8, i8* %gepOL, align 1
  %icastKY = zext i8 %elementXXX to i32
  %add244 = add i32 %add242, %icastKY
  call void @o(i32 %add244)
  br label %cond_end240

cond_jump_elif0237:                               ; preds = %cond_jump_then231
  %j245 = load i32, i32* %j228, align 4
  %le246 = icmp slt i32 %j245, 4
  br i1 %le246, label %cond_jump_elif_then0238, label %cond_else_block239

cond_jump_elif_then0238:                          ; preds = %cond_jump_elif0237
  call void @o(i32 35145)
  %r247 = load i32, i32* %r, align 4
  %mul248 = mul i32 %r247, 8
  %add249 = add i32 192, %mul248
  %j250 = load i32, i32* %j228, align 4
  %add251 = add i32 %add249, %j250
  call void @o(i32 %add251)
  br label %cond_end240

cond_else_block239:                               ; preds = %cond_jump_elif0237
  call void @o(i32 35145)
  %r252 = load i32, i32* %r, align 4
  %mul253 = mul i32 %r252, 8
  %add254 = add i32 192, %mul253
  %j255 = load i32, i32* %j228, align 4
  %add256 = add i32 %add254, %j255
  %sub257 = sub i32 %add256, 4
  call void @o(i32 %sub257)
  br label %cond_end240

cond_end240:                                      ; preds = %cond_else_block239, %cond_jump_elif_then0238, %cond_jump_then236
  br label %cond_end232

cond_jump_then271:                                ; preds = %cond_end_block187
  call void @o(i32 13797708)
  %nb_reg_args273 = load i32, i32* %nb_reg_args, align 4
  %gt274 = icmp sgt i32 %nb_reg_args273, 3
  br i1 %gt274, label %cond_jump_then275, label %cond_end276

cond_end272:                                      ; preds = %cond_end276, %cond_end_block187
  %vtop277 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL278 = getelementptr inbounds %SValue, %SValue* %vtop277, i32 0, i32 0
  %type279 = load %CType, %CType* %fieldLLL278, align 8
  %fieldVVV280 = getelementptr inbounds %CType, %CType* %fieldLLL278, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV280, align 8
  store %Sym* %ref, %Sym** %func_sym, align 8
  %func_sym281 = load %Sym*, %Sym** %func_sym, align 8
  %fieldLLL282 = getelementptr inbounds %Sym, %Sym* %func_sym281, i32 0, i32 1
  %r283 = load i64, i64* %fieldLLL282, align 4
  %castAQ = bitcast i64* %fieldLLL282 to %come_anon123*
  %fieldLLL284 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ, i32 0, i32 0
  %func_call285 = load i8, i8* %fieldLLL284, align 1
  %icastKY286 = zext i8 %func_call285 to i32
  store i32 %icastKY286, i32* %func_call, align 4
  %nb_sse_args287 = load i32, i32* %nb_sse_args, align 4
  %le288 = icmp slt i32 %nb_sse_args287, 8
  br i1 %le288, label %cond_jump_then289, label %cond_else_block290

cond_jump_then275:                                ; preds = %cond_jump_then271
  call void @o(i32 14256460)
  br label %cond_end276

cond_end276:                                      ; preds = %cond_jump_then275, %cond_jump_then271
  br label %cond_end272

cond_jump_then289:                                ; preds = %cond_end272
  %nb_sse_args292 = load i32, i32* %nb_sse_args, align 4
  store i32 %nb_sse_args292, i32* %condtional_result_value, align 4
  br label %cond_end291

cond_else_block290:                               ; preds = %cond_end272
  store i32 8, i32* %condtional_result_value, align 4
  br label %cond_end291

cond_end291:                                      ; preds = %cond_else_block290, %cond_jump_then289
  %conditional_result_value = load i32, i32* %condtional_result_value, align 4
  %fun_result293 = call i32 @oad(i32 184, i32 %conditional_result_value)
  call void @gcall_or_jmp(i32 0)
  %args_size294 = load i32, i32* %args_size, align 4
  %icmpA295 = icmp ne i32 %args_size294, 0
  br i1 %icmpA295, label %cond_jump_then296, label %cond_end297

cond_jump_then296:                                ; preds = %cond_end291
  %args_size298 = load i32, i32* %args_size, align 4
  call void @gadd_sp(i32 %args_size298)
  br label %cond_end297

cond_end297:                                      ; preds = %cond_jump_then296, %cond_end291
  %vtop299 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI300 = ptrtoint %SValue* %vtop299 to i64
  %sub301 = sub i64 %ptrToIntI300, 64
  %iintToPtrD302 = inttoptr i64 %sub301 to %SValue*
  store %SValue* %iintToPtrD302, %SValue** @vtop, align 8
  %ptrToIntC303 = ptrtoint %SValue* %iintToPtrD302 to i64
  %add304 = add i64 %ptrToIntC303, 64
  %intToPtrB305 = inttoptr i64 %add304 to %SValue*
  ret void
}

define internal void @push_arg_reg(i32 %0) {
entry:
  %i = alloca i32, align 4
  %i1 = alloca i32*, align 8
  store i32 %0, i32* %i, align 4
  store i32* %i, i32** %i1, align 8
  %loc = load i32, i32* @loc, align 4
  %sub = sub i32 %loc, 8
  store i32 %sub, i32* @loc, align 4
  %add = add i32 %sub, 8
  %i2 = load i32, i32* %i, align 4
  %gepOL = getelementptr [6 x i8], [6 x i8]* @arg_regs, i32 0, i32 %i2
  %elementXXX = load i8, i8* %gepOL, align 1
  %icastKY = zext i8 %elementXXX to i32
  %loc3 = load i32, i32* @loc, align 4
  call void @gen_modrm64(i32 137, i32 %icastKY, i32 242, %Sym* null, i32 %loc3)
  ret void
}

define void @gfunc_prolog(%CType* %0) {
entry:
  %oror = alloca i1, align 1
  %seen_stack_size = alloca i32, align 4
  %seen_sse_num = alloca i32, align 4
  %seen_reg_num = alloca i32, align 4
  %type = alloca %CType*, align 8
  %sym = alloca %Sym*, align 8
  %sse_param_index = alloca i32, align 4
  %reg_param_index = alloca i32, align 4
  %param_addr = alloca i32, align 4
  %param_index = alloca i32, align 4
  %func_call = alloca i32, align 4
  %size = alloca i32, align 4
  %align = alloca i32, align 4
  %addr = alloca i32, align 4
  %i = alloca i32, align 4
  %func_type = alloca %CType*, align 8
  %func_type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %func_type, align 8
  store %CType** %func_type, %CType*** %func_type1, align 8
  store i32 0, i32* @func_ret_sub, align 4
  %func_type2 = load %CType*, %CType** %func_type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %func_type2, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %ref, %Sym** %sym, align 8
  %sym3 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL4 = getelementptr inbounds %Sym, %Sym* %sym3, i32 0, i32 1
  %r = load i64, i64* %fieldLLL4, align 4
  %castAQ = bitcast i64* %fieldLLL4 to %come_anon123*
  %fieldLLL5 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ, i32 0, i32 0
  %func_call6 = load i8, i8* %fieldLLL5, align 1
  %icastKY = zext i8 %func_call6 to i32
  store i32 %icastKY, i32* %func_call, align 4
  store i32 16, i32* %addr, align 4
  store i32 0, i32* @loc, align 4
  %ind = load i32, i32* @ind, align 4
  %add = add i32 %ind, 11
  store i32 %add, i32* @ind, align 4
  %sub = sub i32 %add, 11
  %ind7 = load i32, i32* @ind, align 4
  %icastD = sext i32 %ind7 to i64
  store i64 %icastD, i64* @func_sub_sp_offset, align 4
  %func_type8 = load %CType*, %CType** %func_type, align 8
  %fieldLLL9 = getelementptr inbounds %CType, %CType* %func_type8, i32 0, i32 1
  %ref10 = load %Sym*, %Sym** %fieldLLL9, align 8
  %fieldLLL11 = getelementptr inbounds %Sym, %Sym* %ref10, i32 0, i32 2
  %c = load i64, i64* %fieldLLL11, align 4
  %eq = icmp eq i64 %c, 3
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store i32 0, i32* %seen_sse_num, align 4
  store i32 0, i32* %seen_reg_num, align 4
  store i32 16, i32* %seen_stack_size, align 4
  %func_type12 = load %CType*, %CType** %func_type, align 8
  %fieldLLL13 = getelementptr inbounds %CType, %CType* %func_type12, i32 0, i32 1
  %ref14 = load %Sym*, %Sym** %fieldLLL13, align 8
  store %Sym* %ref14, %Sym** %sym, align 8
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end_block99, %entry
  %func_type106 = load %CType*, %CType** %func_type, align 8
  %fieldLLL107 = getelementptr inbounds %CType, %CType* %func_type106, i32 0, i32 1
  %ref108 = load %Sym*, %Sym** %fieldLLL107, align 8
  store %Sym* %ref108, %Sym** %sym, align 8
  store i32 0, i32* %param_index, align 4
  store i32 0, i32* %reg_param_index, align 4
  store i32 0, i32* %sse_param_index, align 4
  %sym109 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL110 = getelementptr inbounds %Sym, %Sym* %sym109, i32 0, i32 3
  %type111 = load %CType, %CType* %fieldLLL110, align 8
  store %CType %type111, %CType* @func_vt, align 8
  %func_vt = load %CType, %CType* @func_vt, align 8
  %t112 = load i32, i32* getelementptr inbounds (%CType, %CType* @func_vt, i32 0, i32 0), align 4
  %andtmp113 = and i32 %t112, 15
  %eq114 = icmp eq i32 %andtmp113, 7
  br i1 %eq114, label %cond_jump_then115, label %cond_end116

loop_top_block:                                   ; preds = %cond_end23, %cond_jump_then
  %sym15 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL16 = getelementptr inbounds %Sym, %Sym* %sym15, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL16, align 8
  store %Sym* %next, %Sym** %sym, align 8
  %not_eq = icmp ne %Sym* %next, null
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym17 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL18 = getelementptr inbounds %Sym, %Sym* %sym17, i32 0, i32 3
  %type19 = load %CType, %CType* %fieldLLL18, align 8
  store %CType* %fieldLLL18, %CType** %type, align 8
  %type20 = load %CType*, %CType** %type, align 8
  %fieldLLL21 = getelementptr inbounds %CType, %CType* %type20, i32 0, i32 0
  %t = load i32, i32* %fieldLLL21, align 4
  %fun_result = call i32 @is_sse_float(i32 %t)
  %icmpA = icmp ne i32 %fun_result, 0
  br i1 %icmpA, label %cond_jump_then22, label %cond_jump_elif0

cond_end_block:                                   ; preds = %loop_top_block
  %loc = load i32, i32* @loc, align 4
  %sub70 = sub i32 %loc, 16
  store i32 %sub70, i32* @loc, align 4
  %add71 = add i32 %sub70, 16
  call void @o(i32 15746503)
  %seen_reg_num72 = load i32, i32* %seen_reg_num, align 4
  %mul = mul i32 %seen_reg_num72, 8
  call void @gen_le32(i32 %mul)
  call void @o(i32 16008647)
  %seen_sse_num73 = load i32, i32* %seen_sse_num, align 4
  %mul74 = mul i32 %seen_sse_num73, 16
  %add75 = add i32 %mul74, 48
  call void @gen_le32(i32 %add75)
  call void @o(i32 16270791)
  %seen_stack_size76 = load i32, i32* %seen_stack_size, align 4
  call void @gen_le32(i32 %seen_stack_size76)
  store i32 0, i32* %i, align 4
  br label %loop_top_block77

cond_jump_then22:                                 ; preds = %cond_then_block
  %seen_sse_num24 = load i32, i32* %seen_sse_num, align 4
  %le = icmp slt i32 %seen_sse_num24, 8
  br i1 %le, label %cond_jump_then25, label %cond_else_block26

cond_jump_elif0:                                  ; preds = %cond_then_block
  %type35 = load %CType*, %CType** %type, align 8
  %fieldLLL36 = getelementptr inbounds %CType, %CType* %type35, i32 0, i32 0
  %t37 = load i32, i32* %fieldLLL36, align 4
  %andtmp = and i32 %t37, 15
  %eq38 = icmp eq i32 %andtmp, 7
  br i1 %eq38, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %type39 = load %CType*, %CType** %type, align 8
  %align40 = load i32, i32* %align, align 4
  %fun_result41 = call i32 @type_size(%CType* %type39, i32* %align)
  store i32 %fun_result41, i32* %size, align 4
  %size42 = load i32, i32* %size, align 4
  %add43 = add i32 %size42, 3
  %andtmp44 = and i32 %add43, -4
  store i32 %andtmp44, i32* %size, align 4
  %seen_stack_size45 = load i32, i32* %seen_stack_size, align 4
  %size46 = load i32, i32* %size, align 4
  %add47 = add i32 %seen_stack_size45, %size46
  store i32 %add47, i32* %seen_stack_size, align 4
  %size48 = load i32, i32* %size, align 4
  %sub49 = sub i32 %add47, %size48
  br label %cond_end23

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %type50 = load %CType*, %CType** %type, align 8
  %fieldLLL51 = getelementptr inbounds %CType, %CType* %type50, i32 0, i32 0
  %t52 = load i32, i32* %fieldLLL51, align 4
  %andtmp53 = and i32 %t52, 15
  %eq54 = icmp eq i32 %andtmp53, 10
  br i1 %eq54, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %seen_stack_size55 = load i32, i32* %seen_stack_size, align 4
  %add56 = add i32 %seen_stack_size55, 16
  store i32 %add56, i32* %seen_stack_size, align 4
  %sub57 = sub i32 %add56, 16
  br label %cond_end23

cond_else_block:                                  ; preds = %cond_jump_elif1
  %seen_reg_num58 = load i32, i32* %seen_reg_num, align 4
  %le59 = icmp slt i32 %seen_reg_num58, 6
  br i1 %le59, label %cond_jump_then60, label %cond_else_block61

cond_end23:                                       ; preds = %cond_end62, %cond_jump_elif_then1, %cond_jump_elif_then0, %cond_end27
  br label %loop_top_block

cond_jump_then25:                                 ; preds = %cond_jump_then22
  %seen_sse_num28 = load i32, i32* %seen_sse_num, align 4
  %add29 = add i32 %seen_sse_num28, 1
  store i32 %add29, i32* %seen_sse_num, align 4
  %seen_sse_num30 = load i32, i32* %seen_sse_num, align 4
  %sub31 = sub i32 %seen_sse_num30, 1
  br label %cond_end27

cond_else_block26:                                ; preds = %cond_jump_then22
  %seen_stack_size32 = load i32, i32* %seen_stack_size, align 4
  %add33 = add i32 %seen_stack_size32, 8
  store i32 %add33, i32* %seen_stack_size, align 4
  %sub34 = sub i32 %add33, 8
  br label %cond_end27

cond_end27:                                       ; preds = %cond_else_block26, %cond_jump_then25
  br label %cond_end23

cond_jump_then60:                                 ; preds = %cond_else_block
  %seen_reg_num63 = load i32, i32* %seen_reg_num, align 4
  %add64 = add i32 %seen_reg_num63, 1
  store i32 %add64, i32* %seen_reg_num, align 4
  %seen_reg_num65 = load i32, i32* %seen_reg_num, align 4
  %sub66 = sub i32 %seen_reg_num65, 1
  br label %cond_end62

cond_else_block61:                                ; preds = %cond_else_block
  %seen_stack_size67 = load i32, i32* %seen_stack_size, align 4
  %add68 = add i32 %seen_stack_size67, 8
  store i32 %add68, i32* %seen_stack_size, align 4
  %sub69 = sub i32 %add68, 8
  br label %cond_end62

cond_end62:                                       ; preds = %cond_else_block61, %cond_jump_then60
  br label %cond_end23

loop_continue_top_block:                          ; preds = %cond_then_block80
  %i90 = load i32, i32* %i, align 4
  %add91 = add i32 %i90, 1
  store i32 %add91, i32* %i, align 4
  %i92 = load i32, i32* %i, align 4
  %sub93 = sub i32 %i92, 1
  br label %loop_top_block77

loop_top_block77:                                 ; preds = %loop_continue_top_block, %cond_end_block
  %i78 = load i32, i32* %i, align 4
  %le79 = icmp slt i32 %i78, 8
  br i1 %le79, label %cond_then_block80, label %cond_end_block81

cond_then_block80:                                ; preds = %loop_top_block77
  %loc82 = load i32, i32* @loc, align 4
  %sub83 = sub i32 %loc82, 16
  store i32 %sub83, i32* @loc, align 4
  %add84 = add i32 %sub83, 16
  call void @o(i32 14028646)
  %i85 = load i32, i32* %i, align 4
  %sub86 = sub i32 7, %i85
  %loc87 = load i32, i32* @loc, align 4
  call void @gen_modrm(i32 %sub86, i32 242, %Sym* null, i32 %loc87)
  call void @o(i32 8767304)
  %loc88 = load i32, i32* @loc, align 4
  %add89 = add i32 %loc88, 8
  call void @gen_le32(i32 %add89)
  call void @gen_le32(i32 0)
  br label %loop_continue_top_block

cond_end_block81:                                 ; preds = %loop_top_block77
  store i32 0, i32* %i, align 4
  br label %loop_top_block95

loop_continue_top_block94:                        ; preds = %cond_then_block98
  %i102 = load i32, i32* %i, align 4
  %add103 = add i32 %i102, 1
  store i32 %add103, i32* %i, align 4
  %i104 = load i32, i32* %i, align 4
  %sub105 = sub i32 %i104, 1
  br label %loop_top_block95

loop_top_block95:                                 ; preds = %loop_continue_top_block94, %cond_end_block81
  %i96 = load i32, i32* %i, align 4
  %le97 = icmp slt i32 %i96, 6
  br i1 %le97, label %cond_then_block98, label %cond_end_block99

cond_then_block98:                                ; preds = %loop_top_block95
  %i100 = load i32, i32* %i, align 4
  %sub101 = sub i32 5, %i100
  call void @push_arg_reg(i32 %sub101)
  br label %loop_continue_top_block94

cond_end_block99:                                 ; preds = %loop_top_block95
  br label %cond_end

cond_jump_then115:                                ; preds = %cond_end
  %reg_param_index117 = load i32, i32* %reg_param_index, align 4
  call void @push_arg_reg(i32 %reg_param_index117)
  %loc118 = load i32, i32* @loc, align 4
  store i32 %loc118, i32* %param_addr, align 4
  %loc119 = load i32, i32* @loc, align 4
  store i32 %loc119, i32* @func_vc, align 4
  %param_index120 = load i32, i32* %param_index, align 4
  %add121 = add i32 %param_index120, 1
  store i32 %add121, i32* %param_index, align 4
  %param_index122 = load i32, i32* %param_index, align 4
  %sub123 = sub i32 %param_index122, 1
  %reg_param_index124 = load i32, i32* %reg_param_index, align 4
  %add125 = add i32 %reg_param_index124, 1
  store i32 %add125, i32* %reg_param_index, align 4
  %reg_param_index126 = load i32, i32* %reg_param_index, align 4
  %sub127 = sub i32 %reg_param_index126, 1
  br label %cond_end116

cond_end116:                                      ; preds = %cond_jump_then115, %cond_end
  br label %loop_top_block128

loop_top_block128:                                ; preds = %cond_end153, %cond_end116
  %sym129 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL130 = getelementptr inbounds %Sym, %Sym* %sym129, i32 0, i32 4
  %next131 = load %Sym*, %Sym** %fieldLLL130, align 8
  store %Sym* %next131, %Sym** %sym, align 8
  %not_eq132 = icmp ne %Sym* %next131, null
  br i1 %not_eq132, label %cond_then_block133, label %cond_end_block134

cond_then_block133:                               ; preds = %loop_top_block128
  %sym135 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL136 = getelementptr inbounds %Sym, %Sym* %sym135, i32 0, i32 3
  %type137 = load %CType, %CType* %fieldLLL136, align 8
  store %CType* %fieldLLL136, %CType** %type, align 8
  %type138 = load %CType*, %CType** %type, align 8
  %align139 = load i32, i32* %align, align 4
  %fun_result140 = call i32 @type_size(%CType* %type138, i32* %align)
  store i32 %fun_result140, i32* %size, align 4
  %size141 = load i32, i32* %size, align 4
  %add142 = add i32 %size141, 3
  %andtmp143 = and i32 %add142, -4
  store i32 %andtmp143, i32* %size, align 4
  %type144 = load %CType*, %CType** %type, align 8
  %fieldLLL145 = getelementptr inbounds %CType, %CType* %type144, i32 0, i32 0
  %t146 = load i32, i32* %fieldLLL145, align 4
  %fun_result147 = call i32 @is_sse_float(i32 %t146)
  %icmpA148 = icmp ne i32 %fun_result147, 0
  br i1 %icmpA148, label %cond_jump_then149, label %cond_jump_elif0150

cond_end_block134:                                ; preds = %loop_top_block128
  ret void

cond_jump_then149:                                ; preds = %cond_then_block133
  %sse_param_index154 = load i32, i32* %sse_param_index, align 4
  %le155 = icmp slt i32 %sse_param_index154, 8
  br i1 %le155, label %cond_jump_then156, label %cond_else_block157

cond_jump_elif0150:                               ; preds = %cond_then_block133
  %type175 = load %CType*, %CType** %type, align 8
  %fieldLLL176 = getelementptr inbounds %CType, %CType* %type175, i32 0, i32 0
  %t177 = load i32, i32* %fieldLLL176, align 4
  %andtmp178 = and i32 %t177, 15
  %eq179 = icmp eq i32 %andtmp178, 7
  store i1 %eq179, i1* %oror, align 1
  br i1 %eq179, label %cond_jump_end, label %cond_jump_then180

cond_jump_elif_then0151:                          ; preds = %cond_jump_end
  %addr187 = load i32, i32* %addr, align 4
  store i32 %addr187, i32* %param_addr, align 4
  %addr188 = load i32, i32* %addr, align 4
  %size189 = load i32, i32* %size, align 4
  %add190 = add i32 %addr188, %size189
  store i32 %add190, i32* %addr, align 4
  %size191 = load i32, i32* %size, align 4
  %sub192 = sub i32 %add190, %size191
  br label %cond_end153

cond_else_block152:                               ; preds = %cond_jump_end
  %reg_param_index193 = load i32, i32* %reg_param_index, align 4
  %le194 = icmp slt i32 %reg_param_index193, 6
  br i1 %le194, label %cond_jump_then195, label %cond_else_block196

cond_end153:                                      ; preds = %cond_end197, %cond_jump_elif_then0151, %cond_end158
  %sym208 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL209 = getelementptr inbounds %Sym, %Sym* %sym208, i32 0, i32 0
  %v = load i32, i32* %fieldLLL209, align 4
  %andtmp210 = and i32 %v, -536870913
  %type211 = load %CType*, %CType** %type, align 8
  %param_addr212 = load i32, i32* %param_addr, align 4
  %fun_result213 = call %Sym* @sym_push(i32 %andtmp210, %CType* %type211, i32 498, i32 %param_addr212)
  %param_index214 = load i32, i32* %param_index, align 4
  %add215 = add i32 %param_index214, 1
  store i32 %add215, i32* %param_index, align 4
  %param_index216 = load i32, i32* %param_index, align 4
  %sub217 = sub i32 %param_index216, 1
  br label %loop_top_block128

cond_jump_then156:                                ; preds = %cond_jump_then149
  %loc159 = load i32, i32* @loc, align 4
  %sub160 = sub i32 %loc159, 8
  store i32 %sub160, i32* @loc, align 4
  %add161 = add i32 %sub160, 8
  call void @o(i32 14028646)
  %sse_param_index162 = load i32, i32* %sse_param_index, align 4
  %loc163 = load i32, i32* @loc, align 4
  call void @gen_modrm(i32 %sse_param_index162, i32 242, %Sym* null, i32 %loc163)
  %loc164 = load i32, i32* @loc, align 4
  store i32 %loc164, i32* %param_addr, align 4
  br label %cond_end158

cond_else_block157:                               ; preds = %cond_jump_then149
  %addr165 = load i32, i32* %addr, align 4
  store i32 %addr165, i32* %param_addr, align 4
  %addr166 = load i32, i32* %addr, align 4
  %size167 = load i32, i32* %size, align 4
  %add168 = add i32 %addr166, %size167
  store i32 %add168, i32* %addr, align 4
  %size169 = load i32, i32* %size, align 4
  %sub170 = sub i32 %add168, %size169
  br label %cond_end158

cond_end158:                                      ; preds = %cond_else_block157, %cond_jump_then156
  %sse_param_index171 = load i32, i32* %sse_param_index, align 4
  %add172 = add i32 %sse_param_index171, 1
  store i32 %add172, i32* %sse_param_index, align 4
  %sse_param_index173 = load i32, i32* %sse_param_index, align 4
  %sub174 = sub i32 %sse_param_index173, 1
  br label %cond_end153

cond_jump_then180:                                ; preds = %cond_jump_elif0150
  %type181 = load %CType*, %CType** %type, align 8
  %fieldLLL182 = getelementptr inbounds %CType, %CType* %type181, i32 0, i32 0
  %t183 = load i32, i32* %fieldLLL182, align 4
  %andtmp184 = and i32 %t183, 15
  %eq185 = icmp eq i32 %andtmp184, 10
  %oror186 = or i1 %eq179, %eq185
  store i1 %oror186, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then180, %cond_jump_elif0150
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then0151, label %cond_else_block152

cond_jump_then195:                                ; preds = %cond_else_block152
  %reg_param_index198 = load i32, i32* %reg_param_index, align 4
  call void @push_arg_reg(i32 %reg_param_index198)
  %loc199 = load i32, i32* @loc, align 4
  store i32 %loc199, i32* %param_addr, align 4
  br label %cond_end197

cond_else_block196:                               ; preds = %cond_else_block152
  %addr200 = load i32, i32* %addr, align 4
  store i32 %addr200, i32* %param_addr, align 4
  %addr201 = load i32, i32* %addr, align 4
  %add202 = add i32 %addr201, 8
  store i32 %add202, i32* %addr, align 4
  %sub203 = sub i32 %add202, 8
  br label %cond_end197

cond_end197:                                      ; preds = %cond_else_block196, %cond_jump_then195
  %reg_param_index204 = load i32, i32* %reg_param_index, align 4
  %add205 = add i32 %reg_param_index204, 1
  store i32 %add205, i32* %reg_param_index, align 4
  %reg_param_index206 = load i32, i32* %reg_param_index, align 4
  %sub207 = sub i32 %reg_param_index206, 1
  br label %cond_end153
}

define void @gfunc_epilog() {
entry:
  %saved_ind = alloca i32, align 4
  %v = alloca i32, align 4
  call void @o(i32 201)
  %func_ret_sub = load i32, i32* @func_ret_sub, align 4
  %eq = icmp eq i32 %func_ret_sub, 0
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  call void @o(i32 195)
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  call void @o(i32 194)
  %func_ret_sub1 = load i32, i32* @func_ret_sub, align 4
  call void @g(i32 %func_ret_sub1)
  %func_ret_sub2 = load i32, i32* @func_ret_sub, align 4
  %rshifttmp = lshr i32 %func_ret_sub2, 8
  call void @g(i32 %rshifttmp)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %loc = load i32, i32* @loc, align 4
  %sub = sub i32 0, %loc
  %add = add i32 %sub, 15
  %andtmp = and i32 %add, -16
  store i32 %andtmp, i32* %v, align 4
  %ind = load i32, i32* @ind, align 4
  store i32 %ind, i32* %saved_ind, align 4
  %func_sub_sp_offset = load i64, i64* @func_sub_sp_offset, align 4
  %sub3 = sub i64 %func_sub_sp_offset, 11
  %icastM = trunc i64 %sub3 to i32
  store i32 %icastM, i32* @ind, align 4
  call void @o(i32 -443987883)
  call void @o(i32 15499592)
  %v4 = load i32, i32* %v, align 4
  call void @gen_le32(i32 %v4)
  %saved_ind5 = load i32, i32* %saved_ind, align 4
  store i32 %saved_ind5, i32* @ind, align 4
  ret void
}

define i32 @gjmp(i32 %0) {
entry:
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %fun_result = call i32 @oad(i32 233, i32 %t2)
  ret i32 %fun_result
}

define void @gjmp_addr(i32 %0) {
entry:
  %r = alloca i32, align 4
  %a = alloca i32, align 4
  %a1 = alloca i32*, align 8
  store i32 %0, i32* %a, align 4
  store i32* %a, i32** %a1, align 8
  %a2 = load i32, i32* %a, align 4
  %ind = load i32, i32* @ind, align 4
  %sub = sub i32 %a2, %ind
  %sub3 = sub i32 %sub, 2
  store i32 %sub3, i32* %r, align 4
  %r4 = load i32, i32* %r, align 4
  %r5 = load i32, i32* %r, align 4
  %icastJ = trunc i32 %r5 to i8
  %icastL = sext i8 %icastJ to i32
  %eq = icmp eq i32 %r4, %icastL
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  call void @g(i32 235)
  %r6 = load i32, i32* %r, align 4
  call void @g(i32 %r6)
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %a7 = load i32, i32* %a, align 4
  %ind8 = load i32, i32* @ind, align 4
  %sub9 = sub i32 %a7, %ind8
  %sub10 = sub i32 %sub9, 5
  %fun_result = call i32 @oad(i32 233, i32 %sub10)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  ret void
}

define i32 @gtst(i32 %0, i32 %1) {
entry:
  %oror52 = alloca i1, align 1
  %oror51 = alloca i1, align 1
  %bt = alloca i32, align 4
  %oror44 = alloca i1, align 1
  %oror = alloca i1, align 1
  %p = alloca i32*, align 8
  %v = alloca i32, align 4
  %inv = alloca i32, align 4
  %inv1 = alloca i32*, align 8
  store i32 %0, i32* %inv, align 4
  store i32* %inv, i32** %inv1, align 8
  %t = alloca i32, align 4
  %t2 = alloca i32*, align 8
  store i32 %1, i32* %t, align 4
  store i32* %t, i32** %t2, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 255
  store i32 %andtmp, i32* %v, align 4
  %v3 = load i32, i32* %v, align 4
  %eq = icmp eq i32 %v3, 243
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  call void @g(i32 15)
  %vtop4 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL5 = getelementptr inbounds %SValue, %SValue* %vtop4, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL5, align 16
  %ICASTO = bitcast %CValue* %fieldLLL5 to i32*
  %i = load i32, i32* %ICASTO, align 4
  %sub = sub i32 %i, 16
  %inv6 = load i32, i32* %inv, align 4
  %xortmp = xor i32 %sub, %inv6
  %t7 = load i32, i32* %t, align 4
  %fun_result = call i32 @oad(i32 %xortmp, i32 %t7)
  store i32 %fun_result, i32* %t, align 4
  br label %cond_end

cond_jump_elif0:                                  ; preds = %entry
  %v8 = load i32, i32* %v, align 4
  %eq9 = icmp eq i32 %v8, 244
  store i1 %eq9, i1* %oror, align 1
  br i1 %eq9, label %cond_jump_end, label %cond_jump_then10

cond_jump_elif_then0:                             ; preds = %cond_jump_end
  %v14 = load i32, i32* %v, align 4
  %andtmp15 = and i32 %v14, 1
  %inv16 = load i32, i32* %inv, align 4
  %eq17 = icmp eq i32 %andtmp15, %inv16
  br i1 %eq17, label %cond_jump_then18, label %cond_else_block19

cond_else_block:                                  ; preds = %cond_jump_end
  %vtop45 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL46 = getelementptr inbounds %SValue, %SValue* %vtop45, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL46, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL46, i32 0, i32 0
  %t47 = load i32, i32* %fieldVVV, align 4
  store i32 891, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @x86_64-gen.c.4, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end:                                         ; preds = %cond_end89, %cond_end20, %cond_jump_then
  %vtop111 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop111 to i64
  %sub112 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub112 to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC113 = ptrtoint %SValue* %iintToPtrD to i64
  %add114 = add i64 %ptrToIntC113, 64
  %intToPtrB115 = inttoptr i64 %add114 to %SValue*
  %t116 = load i32, i32* %t, align 4
  ret i32 %t116

cond_jump_then10:                                 ; preds = %cond_jump_elif0
  %v11 = load i32, i32* %v, align 4
  %eq12 = icmp eq i32 %v11, 245
  %oror13 = or i1 %eq9, %eq12
  store i1 %oror13, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then10, %cond_jump_elif0
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_then18:                                 ; preds = %cond_jump_elif_then0
  %vtop21 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL22 = getelementptr inbounds %SValue, %SValue* %vtop21, i32 0, i32 3
  %c23 = load %CValue, %CValue* %fieldLLL22, align 16
  %ICASTO24 = bitcast %CValue* %fieldLLL22 to i32*
  %i25 = load i32, i32* %ICASTO24, align 4
  store i32* %ICASTO24, i32** %p, align 8
  br label %loop_top_block

cond_else_block19:                                ; preds = %cond_jump_elif_then0
  %t37 = load i32, i32* %t, align 4
  %fun_result38 = call i32 @gjmp(i32 %t37)
  store i32 %fun_result38, i32* %t, align 4
  %vtop39 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL40 = getelementptr inbounds %SValue, %SValue* %vtop39, i32 0, i32 3
  %c41 = load %CValue, %CValue* %fieldLLL40, align 16
  %ICASTO42 = bitcast %CValue* %fieldLLL40 to i32*
  %i43 = load i32, i32* %ICASTO42, align 4
  call void @gsym(i32 %i43)
  br label %cond_end20

cond_end20:                                       ; preds = %cond_else_block19, %cond_end_block
  br label %cond_end

loop_top_block:                                   ; preds = %cond_then_block, %cond_jump_then18
  %p26 = load i32*, i32** %p, align 8
  %derefference_valueB = load i32, i32* %p26, align 4
  %not_eq = icmp ne i32 %derefference_valueB, 0
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL27 = getelementptr inbounds %Section, %Section* %cur_text_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL27, align 8
  %p28 = load i32*, i32** %p, align 8
  %derefference_valueB29 = load i32, i32* %p28, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %sext = sext i32 %derefference_valueB29 to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to i32*
  store i32* %castAQ, i32** %p, align 8
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %p30 = load i32*, i32** %p, align 8
  %t31 = load i32, i32* %t, align 4
  store i32 %t31, i32* %p30, align 4
  %vtop32 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL33 = getelementptr inbounds %SValue, %SValue* %vtop32, i32 0, i32 3
  %c34 = load %CValue, %CValue* %fieldLLL33, align 16
  %ICASTO35 = bitcast %CValue* %fieldLLL33 to i32*
  %i36 = load i32, i32* %ICASTO35, align 4
  store i32 %i36, i32* %t, align 4
  br label %cond_end20

is_float:                                         ; preds = %cond_else_block
  %inline_result_variable = alloca i32, align 4
  %t48 = alloca i32, align 4
  store i32 %t47, i32* %t48, align 4
  %t49 = load i32, i32* %t48, align 4
  %andtmp50 = and i32 %t49, 15
  store i32 %andtmp50, i32* %bt, align 4
  %bt53 = load i32, i32* %bt, align 4
  %eq54 = icmp eq i32 %bt53, 10
  store i1 %eq54, i1* %oror52, align 1
  br i1 %eq54, label %cond_jump_end56, label %cond_jump_then55

is_float_end:                                     ; preds = %cond_jump_end62
  %inline_result_variable67 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable67, 0
  store i1 %icmpA, i1* %oror44, align 1
  br i1 %icmpA, label %cond_jump_end69, label %cond_jump_then68

cond_jump_then55:                                 ; preds = %is_float
  %bt57 = load i32, i32* %bt, align 4
  %eq58 = icmp eq i32 %bt57, 9
  %oror59 = or i1 %eq54, %eq58
  store i1 %oror59, i1* %oror52, align 1
  br label %cond_jump_end56

cond_jump_end56:                                  ; preds = %cond_jump_then55, %is_float
  %oror_result_value60 = load i1, i1* %oror52, align 1
  store i1 %oror_result_value60, i1* %oror51, align 1
  br i1 %oror_result_value60, label %cond_jump_end62, label %cond_jump_then61

cond_jump_then61:                                 ; preds = %cond_jump_end56
  %bt63 = load i32, i32* %bt, align 4
  %eq64 = icmp eq i32 %bt63, 8
  %oror65 = or i1 %oror_result_value60, %eq64
  store i1 %oror65, i1* %oror51, align 1
  br label %cond_jump_end62

cond_jump_end62:                                  ; preds = %cond_jump_then61, %cond_jump_end56
  %oror_result_value66 = load i1, i1* %oror51, align 1
  %icastKX = zext i1 %oror_result_value66 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then68:                                 ; preds = %is_float_end
  %vtop70 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL71 = getelementptr inbounds %SValue, %SValue* %vtop70, i32 0, i32 0
  %type72 = load %CType, %CType* %fieldLLL71, align 8
  %fieldVVV73 = getelementptr inbounds %CType, %CType* %fieldLLL71, i32 0, i32 0
  %t74 = load i32, i32* %fieldVVV73, align 4
  %andtmp75 = and i32 %t74, 15
  %eq76 = icmp eq i32 %andtmp75, 12
  %oror77 = or i1 %icmpA, %eq76
  store i1 %oror77, i1* %oror44, align 1
  br label %cond_jump_end69

cond_jump_end69:                                  ; preds = %cond_jump_then68, %is_float_end
  %oror_result_value78 = load i1, i1* %oror44, align 1
  br i1 %oror_result_value78, label %cond_jump_then79, label %cond_end80

cond_jump_then79:                                 ; preds = %cond_jump_end69
  call void @vpushi(i32 0)
  call void @gen_op(i32 149)
  br label %cond_end80

cond_end80:                                       ; preds = %cond_jump_then79, %cond_jump_end69
  %vtop81 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL82 = getelementptr inbounds %SValue, %SValue* %vtop81, i32 0, i32 1
  %r83 = load i16, i16* %fieldLLL82, align 2
  %icastKY84 = zext i16 %r83 to i32
  %andtmp85 = and i32 %icastKY84, 1023
  %eq86 = icmp eq i32 %andtmp85, 240
  br i1 %eq86, label %cond_jump_then87, label %cond_else_block88

cond_jump_then87:                                 ; preds = %cond_end80
  %vtop90 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL91 = getelementptr inbounds %SValue, %SValue* %vtop90, i32 0, i32 3
  %c92 = load %CValue, %CValue* %fieldLLL91, align 16
  %ICASTO93 = bitcast %CValue* %fieldLLL91 to i32*
  %i94 = load i32, i32* %ICASTO93, align 4
  %not_eq95 = icmp ne i32 %i94, 0
  %inv96 = load i32, i32* %inv, align 4
  %icmpA97 = icmp ne i32 %inv96, 0
  %not_eq98 = icmp ne i1 %not_eq95, %icmpA97
  br i1 %not_eq98, label %cond_jump_then99, label %cond_end100

cond_else_block88:                                ; preds = %cond_end80
  %fun_result103 = call i32 @gv(i32 1)
  store i32 %fun_result103, i32* %v, align 4
  call void @o(i32 133)
  %v104 = load i32, i32* %v, align 4
  %mul105 = mul i32 %v104, 9
  %add106 = add i32 192, %mul105
  call void @o(i32 %add106)
  call void @g(i32 15)
  %inv107 = load i32, i32* %inv, align 4
  %xortmp108 = xor i32 133, %inv107
  %t109 = load i32, i32* %t, align 4
  %fun_result110 = call i32 @oad(i32 %xortmp108, i32 %t109)
  store i32 %fun_result110, i32* %t, align 4
  br label %cond_end89

cond_end89:                                       ; preds = %cond_else_block88, %cond_end100
  br label %cond_end

cond_jump_then99:                                 ; preds = %cond_jump_then87
  %t101 = load i32, i32* %t, align 4
  %fun_result102 = call i32 @gjmp(i32 %t101)
  store i32 %fun_result102, i32* %t, align 4
  br label %cond_end100

cond_end100:                                      ; preds = %cond_jump_then99, %cond_jump_then87
  br label %cond_end89
}

define void @gen_opi(i32 %0) {
entry:
  %oror421 = alloca i1, align 1
  %oror390 = alloca i1, align 1
  %oror189 = alloca i1, align 1
  %oror188 = alloca i1, align 1
  %oror187 = alloca i1, align 1
  %andand136 = alloca i1, align 1
  %oror58 = alloca i1, align 1
  %oror57 = alloca i1, align 1
  %oror56 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %c = alloca i32, align 4
  %opc = alloca i32, align 4
  %fr = alloca i32, align 4
  %r = alloca i32, align 4
  %op = alloca i32, align 4
  %op1 = alloca i32*, align 8
  store i32 %0, i32* %op, align 4
  store i32* %op, i32** %op1, align 8
  %op2 = load i32, i32* %op, align 4
  %eqtmp = icmp eq i32 %op2, 43
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX3

end_blockX:                                       ; preds = %cond_else_blockX438, %cond_end385, %cond_end286, %cond_end243, %cond_end144
  ret void

cond_then_block:                                  ; preds = %cond_else_blockX, %entry
  store i32 0, i32* %opc, align 4
  br label %gen_opi.gen_op8

cond_else_blockX:                                 ; preds = %entry
  %eqtmp4 = icmp eq i32 %op2, 195
  br i1 %eqtmp4, label %cond_then_block, label %cond_else_blockX3

cond_else_blockX3:                                ; preds = %after_break, %cond_else_blockX, %entry
  %eqtmp152 = icmp eq i32 %op2, 45
  br i1 %eqtmp152, label %cond_then_block150, label %cond_else_blockX151
  br label %cond_else_blockX153

gen_opi.gen_op8:                                  ; preds = %cond_then_block437, %cond_then_block167, %cond_then_block164, %cond_then_block161, %cond_then_block158, %cond_then_block155, %cond_then_block150, %cond_then_block
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r5 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r5 to i32
  %andtmp = and i32 %icastKY, 1023
  %eq = icmp eq i32 %andtmp, 240
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %gen_opi.gen_op8
  %vtop6 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL7 = getelementptr inbounds %SValue, %SValue* %vtop6, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL7, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL7, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %fun_result = call i32 @is64_type(i32 %t)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  %andand8 = and i1 %eq, %icmpA
  store i1 %andand8, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %gen_opi.gen_op8
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then9, label %cond_else_block

cond_jump_then9:                                  ; preds = %cond_jump_end
  call void @vswap()
  %fun_result10 = call i32 @gv(i32 1)
  store i32 %fun_result10, i32* %r, align 4
  %vtop11 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL12 = getelementptr inbounds %SValue, %SValue* %vtop11, i32 0, i32 0
  %type13 = load %CType, %CType* %fieldLLL12, align 8
  %fieldVVV14 = getelementptr inbounds %CType, %CType* %fieldLLL12, i32 0, i32 0
  %t15 = load i32, i32* %fieldVVV14, align 4
  %fun_result16 = call i32 @is64_type(i32 %t15)
  %icmpA17 = icmp ne i32 %fun_result16, 0
  br i1 %icmpA17, label %cond_jump_then18, label %cond_end19

cond_else_block:                                  ; preds = %cond_jump_end
  call void @gv2(i32 1, i32 1)
  %vtop45 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 -1
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV46 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 1
  %r47 = load i16, i16* %fieldVVV46, align 2
  %icastKY48 = zext i16 %r47 to i32
  store i32 %icastKY48, i32* %r, align 4
  %vtop49 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB50 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY51 = getelementptr inbounds %SValue, %SValue* %element_addressAB50, i32 0
  %load_element52 = load %SValue, %SValue* %element_addressXYXZY51, align 16
  %fieldVVV53 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY51, i32 0, i32 1
  %r54 = load i16, i16* %fieldVVV53, align 2
  %icastKY55 = zext i16 %r54 to i32
  store i32 %icastKY55, i32* %fr, align 4
  %opc59 = load i32, i32* %opc, align 4
  %not_eq = icmp ne i32 %opc59, 7
  store i1 %not_eq, i1* %oror58, align 1
  br i1 %not_eq, label %cond_jump_end61, label %cond_jump_then60

cond_end:                                         ; preds = %cond_end116, %cond_end30
  %vtop134 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop134 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add135 = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add135 to %SValue*
  %op137 = load i32, i32* %op, align 4
  %gteq_signed = icmp sge i32 %op137, 146
  store i1 %gteq_signed, i1* %andand136, align 1
  br i1 %gteq_signed, label %cond_jump_then138, label %cond_jump_end139

cond_jump_then18:                                 ; preds = %cond_jump_then9
  %r20 = load i32, i32* %r, align 4
  %rshifttmp = lshr i32 %r20, 3
  %andtmp21 = and i32 %rshifttmp, 1
  %ortmp = or i32 72, %andtmp21
  call void @o(i32 %ortmp)
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_jump_then9
  call void @vswap()
  %vtop22 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL23 = getelementptr inbounds %SValue, %SValue* %vtop22, i32 0, i32 3
  %c24 = load %CValue, %CValue* %fieldLLL23, align 16
  %ICASTO = bitcast %CValue* %fieldLLL23 to i32*
  %i = load i32, i32* %ICASTO, align 4
  store i32 %i, i32* %c, align 4
  %c25 = load i32, i32* %c, align 4
  %c26 = load i32, i32* %c, align 4
  %icastJ = trunc i32 %c26 to i8
  %icastL = sext i8 %icastJ to i32
  %eq27 = icmp eq i32 %c25, %icastL
  br i1 %eq27, label %cond_jump_then28, label %cond_else_block29

cond_jump_then28:                                 ; preds = %cond_end19
  call void @o(i32 131)
  %opc31 = load i32, i32* %opc, align 4
  %lshifttmp = shl i32 %opc31, 3
  %ortmp32 = or i32 192, %lshifttmp
  %r33 = load i32, i32* %r, align 4
  %andtmp34 = and i32 %r33, 7
  %ortmp35 = or i32 %ortmp32, %andtmp34
  call void @o(i32 %ortmp35)
  %c36 = load i32, i32* %c, align 4
  call void @g(i32 %c36)
  br label %cond_end30

cond_else_block29:                                ; preds = %cond_end19
  call void @o(i32 129)
  %opc37 = load i32, i32* %opc, align 4
  %lshifttmp38 = shl i32 %opc37, 3
  %ortmp39 = or i32 192, %lshifttmp38
  %r40 = load i32, i32* %r, align 4
  %andtmp41 = and i32 %r40, 7
  %ortmp42 = or i32 %ortmp39, %andtmp41
  %c43 = load i32, i32* %c, align 4
  %fun_result44 = call i32 @oad(i32 %ortmp42, i32 %c43)
  br label %cond_end30

cond_end30:                                       ; preds = %cond_else_block29, %cond_jump_then28
  br label %cond_end

cond_jump_then60:                                 ; preds = %cond_else_block
  %vtop62 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB63 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY64 = getelementptr inbounds %SValue, %SValue* %element_addressAB63, i32 0
  %load_element65 = load %SValue, %SValue* %element_addressXYXZY64, align 16
  %fieldVVV66 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY64, i32 0, i32 0
  %type67 = load %CType, %CType* %fieldVVV66, align 8
  %fieldVVV68 = getelementptr inbounds %CType, %CType* %fieldVVV66, i32 0, i32 0
  %t69 = load i32, i32* %fieldVVV68, align 4
  %fun_result70 = call i32 @is64_type(i32 %t69)
  %icmpA71 = icmp ne i32 %fun_result70, 0
  %oror72 = or i1 %not_eq, %icmpA71
  store i1 %oror72, i1* %oror58, align 1
  br label %cond_jump_end61

cond_jump_end61:                                  ; preds = %cond_jump_then60, %cond_else_block
  %oror_result_value = load i1, i1* %oror58, align 1
  store i1 %oror_result_value, i1* %oror57, align 1
  br i1 %oror_result_value, label %cond_jump_end74, label %cond_jump_then73

cond_jump_then73:                                 ; preds = %cond_jump_end61
  %vtop75 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB76 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY77 = getelementptr inbounds %SValue, %SValue* %element_addressAB76, i32 0
  %load_element78 = load %SValue, %SValue* %element_addressXYXZY77, align 16
  %fieldVVV79 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY77, i32 0, i32 0
  %type80 = load %CType, %CType* %fieldVVV79, align 8
  %fieldVVV81 = getelementptr inbounds %CType, %CType* %fieldVVV79, i32 0, i32 0
  %t82 = load i32, i32* %fieldVVV81, align 4
  %andtmp83 = and i32 %t82, 16
  %icmpA84 = icmp ne i32 %andtmp83, 0
  %oror85 = or i1 %oror_result_value, %icmpA84
  store i1 %oror85, i1* %oror57, align 1
  br label %cond_jump_end74

cond_jump_end74:                                  ; preds = %cond_jump_then73, %cond_jump_end61
  %oror_result_value86 = load i1, i1* %oror57, align 1
  store i1 %oror_result_value86, i1* %oror56, align 1
  br i1 %oror_result_value86, label %cond_jump_end88, label %cond_jump_then87

cond_jump_then87:                                 ; preds = %cond_jump_end74
  %vtop89 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB90 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY91 = getelementptr inbounds %SValue, %SValue* %element_addressAB90, i32 -1
  %load_element92 = load %SValue, %SValue* %element_addressXYXZY91, align 16
  %fieldVVV93 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY91, i32 0, i32 0
  %type94 = load %CType, %CType* %fieldVVV93, align 8
  %fieldVVV95 = getelementptr inbounds %CType, %CType* %fieldVVV93, i32 0, i32 0
  %t96 = load i32, i32* %fieldVVV95, align 4
  %fun_result97 = call i32 @is64_type(i32 %t96)
  %icmpA98 = icmp ne i32 %fun_result97, 0
  %oror99 = or i1 %oror_result_value86, %icmpA98
  store i1 %oror99, i1* %oror56, align 1
  br label %cond_jump_end88

cond_jump_end88:                                  ; preds = %cond_jump_then87, %cond_jump_end74
  %oror_result_value100 = load i1, i1* %oror56, align 1
  store i1 %oror_result_value100, i1* %oror, align 1
  br i1 %oror_result_value100, label %cond_jump_end102, label %cond_jump_then101

cond_jump_then101:                                ; preds = %cond_jump_end88
  %vtop103 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB104 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY105 = getelementptr inbounds %SValue, %SValue* %element_addressAB104, i32 -1
  %load_element106 = load %SValue, %SValue* %element_addressXYXZY105, align 16
  %fieldVVV107 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY105, i32 0, i32 0
  %type108 = load %CType, %CType* %fieldVVV107, align 8
  %fieldVVV109 = getelementptr inbounds %CType, %CType* %fieldVVV107, i32 0, i32 0
  %t110 = load i32, i32* %fieldVVV109, align 4
  %andtmp111 = and i32 %t110, 16
  %icmpA112 = icmp ne i32 %andtmp111, 0
  %oror113 = or i1 %oror_result_value100, %icmpA112
  store i1 %oror113, i1* %oror, align 1
  br label %cond_jump_end102

cond_jump_end102:                                 ; preds = %cond_jump_then101, %cond_jump_end88
  %oror_result_value114 = load i1, i1* %oror, align 1
  br i1 %oror_result_value114, label %cond_jump_then115, label %cond_end116

cond_jump_then115:                                ; preds = %cond_jump_end102
  %r117 = load i32, i32* %r, align 4
  %rshifttmp118 = lshr i32 %r117, 3
  %andtmp119 = and i32 %rshifttmp118, 1
  %ortmp120 = or i32 72, %andtmp119
  %fr121 = load i32, i32* %fr, align 4
  %rshifttmp122 = lshr i32 %fr121, 3
  %andtmp123 = and i32 %rshifttmp122, 1
  %lshifttmp124 = shl i32 %andtmp123, 2
  %ortmp125 = or i32 %ortmp120, %lshifttmp124
  call void @o(i32 %ortmp125)
  br label %cond_end116

cond_end116:                                      ; preds = %cond_jump_then115, %cond_jump_end102
  %opc126 = load i32, i32* %opc, align 4
  %lshifttmp127 = shl i32 %opc126, 3
  %ortmp128 = or i32 %lshifttmp127, 1
  call void @o(i32 %ortmp128)
  %r129 = load i32, i32* %r, align 4
  %andtmp130 = and i32 %r129, 7
  %add = add i32 192, %andtmp130
  %fr131 = load i32, i32* %fr, align 4
  %andtmp132 = and i32 %fr131, 7
  %mul = mul i32 %andtmp132, 8
  %add133 = add i32 %add, %mul
  call void @o(i32 %add133)
  br label %cond_end

cond_jump_then138:                                ; preds = %cond_end
  %op140 = load i32, i32* %op, align 4
  %leeq = icmp sle i32 %op140, 159
  %andand141 = and i1 %gteq_signed, %leeq
  store i1 %andand141, i1* %andand136, align 1
  br label %cond_jump_end139

cond_jump_end139:                                 ; preds = %cond_jump_then138, %cond_end
  %andand_result_value142 = load i1, i1* %andand136, align 1
  br i1 %andand_result_value142, label %cond_jump_then143, label %cond_end144

cond_jump_then143:                                ; preds = %cond_jump_end139
  %vtop145 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop145, i32 0, i32 1
  store i16 243, i16* %fieldTU, align 2
  %vtop146 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL147 = getelementptr inbounds %SValue, %SValue* %vtop146, i32 0, i32 3
  %c148 = load %CValue, %CValue* %fieldLLL147, align 16
  %op149 = load i32, i32* %op, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL147, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %op149, i32* %icastN, align 4
  br label %cond_end144

cond_end144:                                      ; preds = %cond_jump_then143, %cond_jump_end139
  br label %end_blockX

after_break:                                      ; No predecessors!
  br label %cond_else_blockX3
  br label %cond_else_blockX151

cond_then_block150:                               ; preds = %cond_else_blockX151, %cond_else_blockX3
  store i32 5, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_then_block155

cond_else_blockX151:                              ; preds = %cond_else_blockX3, %after_break
  %eqtmp154 = icmp eq i32 %op2, 197
  br i1 %eqtmp154, label %cond_then_block150, label %cond_else_blockX153

cond_else_blockX153:                              ; preds = %cond_else_blockX151, %cond_else_blockX3
  %eqtmp157 = icmp eq i32 %op2, 196
  br i1 %eqtmp157, label %cond_then_block155, label %cond_else_blockX156

cond_then_block155:                               ; preds = %cond_else_blockX153, %cond_then_block150
  store i32 2, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_then_block158

cond_else_blockX156:                              ; preds = %cond_else_blockX153
  %eqtmp160 = icmp eq i32 %op2, 198
  br i1 %eqtmp160, label %cond_then_block158, label %cond_else_blockX159

cond_then_block158:                               ; preds = %cond_else_blockX156, %cond_then_block155
  store i32 3, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_then_block161

cond_else_blockX159:                              ; preds = %cond_else_blockX156
  %eqtmp163 = icmp eq i32 %op2, 38
  br i1 %eqtmp163, label %cond_then_block161, label %cond_else_blockX162

cond_then_block161:                               ; preds = %cond_else_blockX159, %cond_then_block158
  store i32 4, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_then_block164

cond_else_blockX162:                              ; preds = %cond_else_blockX159
  %eqtmp166 = icmp eq i32 %op2, 94
  br i1 %eqtmp166, label %cond_then_block164, label %cond_else_blockX165

cond_then_block164:                               ; preds = %cond_else_blockX162, %cond_then_block161
  store i32 6, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_then_block167

cond_else_blockX165:                              ; preds = %cond_else_blockX162
  %eqtmp169 = icmp eq i32 %op2, 124
  br i1 %eqtmp169, label %cond_then_block167, label %cond_else_blockX168

cond_then_block167:                               ; preds = %cond_else_blockX165, %cond_then_block164
  store i32 1, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_then_block170

cond_else_blockX168:                              ; preds = %cond_else_blockX165
  %eqtmp172 = icmp eq i32 %op2, 42
  br i1 %eqtmp172, label %cond_then_block170, label %cond_else_blockX171

cond_then_block170:                               ; preds = %cond_else_blockX168, %cond_then_block167
  call void @gv2(i32 1, i32 1)
  %vtop173 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB174 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY175 = getelementptr inbounds %SValue, %SValue* %element_addressAB174, i32 -1
  %load_element176 = load %SValue, %SValue* %element_addressXYXZY175, align 16
  %fieldVVV177 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY175, i32 0, i32 1
  %r178 = load i16, i16* %fieldVVV177, align 2
  %icastKY179 = zext i16 %r178 to i32
  store i32 %icastKY179, i32* %r, align 4
  %vtop180 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB181 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY182 = getelementptr inbounds %SValue, %SValue* %element_addressAB181, i32 0
  %load_element183 = load %SValue, %SValue* %element_addressXYXZY182, align 16
  %fieldVVV184 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY182, i32 0, i32 1
  %r185 = load i16, i16* %fieldVVV184, align 2
  %icastKY186 = zext i16 %r185 to i32
  store i32 %icastKY186, i32* %fr, align 4
  %vtop190 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB191 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY192 = getelementptr inbounds %SValue, %SValue* %element_addressAB191, i32 0
  %load_element193 = load %SValue, %SValue* %element_addressXYXZY192, align 16
  %fieldVVV194 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY192, i32 0, i32 0
  %type195 = load %CType, %CType* %fieldVVV194, align 8
  %fieldVVV196 = getelementptr inbounds %CType, %CType* %fieldVVV194, i32 0, i32 0
  %t197 = load i32, i32* %fieldVVV196, align 4
  %fun_result198 = call i32 @is64_type(i32 %t197)
  %icmpA199 = icmp ne i32 %fun_result198, 0
  store i1 %icmpA199, i1* %oror189, align 1
  br i1 %icmpA199, label %cond_jump_end201, label %cond_jump_then200

cond_else_blockX171:                              ; preds = %after_break265, %cond_else_blockX168
  %eqtmp268 = icmp eq i32 %op2, 1
  br i1 %eqtmp268, label %cond_then_block266, label %cond_else_blockX267

cond_jump_then200:                                ; preds = %cond_then_block170
  %vtop202 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB203 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY204 = getelementptr inbounds %SValue, %SValue* %element_addressAB203, i32 0
  %load_element205 = load %SValue, %SValue* %element_addressXYXZY204, align 16
  %fieldVVV206 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY204, i32 0, i32 0
  %type207 = load %CType, %CType* %fieldVVV206, align 8
  %fieldVVV208 = getelementptr inbounds %CType, %CType* %fieldVVV206, i32 0, i32 0
  %t209 = load i32, i32* %fieldVVV208, align 4
  %andtmp210 = and i32 %t209, 16
  %icmpA211 = icmp ne i32 %andtmp210, 0
  %oror212 = or i1 %icmpA199, %icmpA211
  store i1 %oror212, i1* %oror189, align 1
  br label %cond_jump_end201

cond_jump_end201:                                 ; preds = %cond_jump_then200, %cond_then_block170
  %oror_result_value213 = load i1, i1* %oror189, align 1
  store i1 %oror_result_value213, i1* %oror188, align 1
  br i1 %oror_result_value213, label %cond_jump_end215, label %cond_jump_then214

cond_jump_then214:                                ; preds = %cond_jump_end201
  %vtop216 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB217 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY218 = getelementptr inbounds %SValue, %SValue* %element_addressAB217, i32 -1
  %load_element219 = load %SValue, %SValue* %element_addressXYXZY218, align 16
  %fieldVVV220 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY218, i32 0, i32 0
  %type221 = load %CType, %CType* %fieldVVV220, align 8
  %fieldVVV222 = getelementptr inbounds %CType, %CType* %fieldVVV220, i32 0, i32 0
  %t223 = load i32, i32* %fieldVVV222, align 4
  %fun_result224 = call i32 @is64_type(i32 %t223)
  %icmpA225 = icmp ne i32 %fun_result224, 0
  %oror226 = or i1 %oror_result_value213, %icmpA225
  store i1 %oror226, i1* %oror188, align 1
  br label %cond_jump_end215

cond_jump_end215:                                 ; preds = %cond_jump_then214, %cond_jump_end201
  %oror_result_value227 = load i1, i1* %oror188, align 1
  store i1 %oror_result_value227, i1* %oror187, align 1
  br i1 %oror_result_value227, label %cond_jump_end229, label %cond_jump_then228

cond_jump_then228:                                ; preds = %cond_jump_end215
  %vtop230 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB231 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY232 = getelementptr inbounds %SValue, %SValue* %element_addressAB231, i32 -1
  %load_element233 = load %SValue, %SValue* %element_addressXYXZY232, align 16
  %fieldVVV234 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY232, i32 0, i32 0
  %type235 = load %CType, %CType* %fieldVVV234, align 8
  %fieldVVV236 = getelementptr inbounds %CType, %CType* %fieldVVV234, i32 0, i32 0
  %t237 = load i32, i32* %fieldVVV236, align 4
  %andtmp238 = and i32 %t237, 16
  %icmpA239 = icmp ne i32 %andtmp238, 0
  %oror240 = or i1 %oror_result_value227, %icmpA239
  store i1 %oror240, i1* %oror187, align 1
  br label %cond_jump_end229

cond_jump_end229:                                 ; preds = %cond_jump_then228, %cond_jump_end215
  %oror_result_value241 = load i1, i1* %oror187, align 1
  br i1 %oror_result_value241, label %cond_jump_then242, label %cond_end243

cond_jump_then242:                                ; preds = %cond_jump_end229
  %fr244 = load i32, i32* %fr, align 4
  %rshifttmp245 = lshr i32 %fr244, 3
  %andtmp246 = and i32 %rshifttmp245, 1
  %ortmp247 = or i32 72, %andtmp246
  %r248 = load i32, i32* %r, align 4
  %rshifttmp249 = lshr i32 %r248, 3
  %andtmp250 = and i32 %rshifttmp249, 1
  %lshifttmp251 = shl i32 %andtmp250, 2
  %ortmp252 = or i32 %ortmp247, %lshifttmp251
  call void @o(i32 %ortmp252)
  br label %cond_end243

cond_end243:                                      ; preds = %cond_jump_then242, %cond_jump_end229
  %vtop253 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI254 = ptrtoint %SValue* %vtop253 to i64
  %sub255 = sub i64 %ptrToIntI254, 64
  %iintToPtrD256 = inttoptr i64 %sub255 to %SValue*
  store %SValue* %iintToPtrD256, %SValue** @vtop, align 8
  %ptrToIntC257 = ptrtoint %SValue* %iintToPtrD256 to i64
  %add258 = add i64 %ptrToIntC257, 64
  %intToPtrB259 = inttoptr i64 %add258 to %SValue*
  call void @o(i32 44815)
  %fr260 = load i32, i32* %fr, align 4
  %add261 = add i32 192, %fr260
  %r262 = load i32, i32* %r, align 4
  %mul263 = mul i32 %r262, 8
  %add264 = add i32 %add261, %mul263
  call void @o(i32 %add264)
  br label %end_blockX

after_break265:                                   ; No predecessors!
  br label %cond_else_blockX171
  br label %cond_else_blockX267

cond_then_block266:                               ; preds = %cond_else_blockX171
  store i32 4, i32* %opc, align 4
  br label %gen_opi.gen_shift
  br label %cond_then_block269

cond_else_blockX267:                              ; preds = %cond_else_blockX171, %after_break265
  %eqtmp271 = icmp eq i32 %op2, 205
  br i1 %eqtmp271, label %cond_then_block269, label %cond_else_blockX270

gen_opi.gen_shift:                                ; preds = %cond_then_block272, %cond_then_block269, %cond_then_block266
  %opc275 = load i32, i32* %opc, align 4
  %lshifttmp276 = shl i32 %opc275, 3
  %ortmp277 = or i32 192, %lshifttmp276
  store i32 %ortmp277, i32* %opc, align 4
  %vtop278 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL279 = getelementptr inbounds %SValue, %SValue* %vtop278, i32 0, i32 1
  %r280 = load i16, i16* %fieldLLL279, align 2
  %icastKY281 = zext i16 %r280 to i32
  %andtmp282 = and i32 %icastKY281, 1023
  %eq283 = icmp eq i32 %andtmp282, 240
  br i1 %eq283, label %cond_jump_then284, label %cond_else_block285

cond_then_block269:                               ; preds = %cond_else_blockX267, %cond_then_block266
  store i32 5, i32* %opc, align 4
  br label %gen_opi.gen_shift
  br label %cond_then_block272

cond_else_blockX270:                              ; preds = %cond_else_blockX267
  %eqtmp274 = icmp eq i32 %op2, 2
  br i1 %eqtmp274, label %cond_then_block272, label %cond_else_blockX273

cond_then_block272:                               ; preds = %cond_else_blockX270, %cond_then_block269
  store i32 7, i32* %opc, align 4
  br label %gen_opi.gen_shift

cond_else_blockX273:                              ; preds = %after_break346, %cond_else_blockX270
  %eqtmp349 = icmp eq i32 %op2, 47
  br i1 %eqtmp349, label %cond_then_block347, label %cond_else_blockX348
  br label %cond_else_blockX350

cond_jump_then284:                                ; preds = %gen_opi.gen_shift
  call void @vswap()
  %fun_result287 = call i32 @gv(i32 1)
  store i32 %fun_result287, i32* %r, align 4
  %vtop288 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL289 = getelementptr inbounds %SValue, %SValue* %vtop288, i32 0, i32 0
  %type290 = load %CType, %CType* %fieldLLL289, align 8
  %fieldVVV291 = getelementptr inbounds %CType, %CType* %fieldLLL289, i32 0, i32 0
  %t292 = load i32, i32* %fieldVVV291, align 4
  %andtmp293 = and i32 %t292, 15
  %eq294 = icmp eq i32 %andtmp293, 12
  br i1 %eq294, label %cond_jump_then295, label %cond_else_block296

cond_else_block285:                               ; preds = %gen_opi.gen_shift
  call void @gv2(i32 1, i32 8)
  %vtop313 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB314 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY315 = getelementptr inbounds %SValue, %SValue* %element_addressAB314, i32 -1
  %load_element316 = load %SValue, %SValue* %element_addressXYXZY315, align 16
  %fieldVVV317 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY315, i32 0, i32 1
  %r318 = load i16, i16* %fieldVVV317, align 2
  %icastKY319 = zext i16 %r318 to i32
  store i32 %icastKY319, i32* %r, align 4
  %vtop320 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB321 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY322 = getelementptr inbounds %SValue, %SValue* %element_addressAB321, i32 -1
  %load_element323 = load %SValue, %SValue* %element_addressXYXZY322, align 16
  %fieldVVV324 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY322, i32 0, i32 0
  %type325 = load %CType, %CType* %fieldVVV324, align 8
  %fieldVVV326 = getelementptr inbounds %CType, %CType* %fieldVVV324, i32 0, i32 0
  %t327 = load i32, i32* %fieldVVV326, align 4
  %andtmp328 = and i32 %t327, 15
  %eq329 = icmp eq i32 %andtmp328, 12
  br i1 %eq329, label %cond_jump_then330, label %cond_end331

cond_end286:                                      ; preds = %cond_end331, %cond_end297
  %vtop339 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI340 = ptrtoint %SValue* %vtop339 to i64
  %sub341 = sub i64 %ptrToIntI340, 64
  %iintToPtrD342 = inttoptr i64 %sub341 to %SValue*
  store %SValue* %iintToPtrD342, %SValue** @vtop, align 8
  %ptrToIntC343 = ptrtoint %SValue* %iintToPtrD342 to i64
  %add344 = add i64 %ptrToIntC343, 64
  %intToPtrB345 = inttoptr i64 %add344 to %SValue*
  br label %end_blockX

cond_jump_then295:                                ; preds = %cond_jump_then284
  %r298 = load i32, i32* %r, align 4
  %rshifttmp299 = lshr i32 %r298, 3
  %andtmp300 = and i32 %rshifttmp299, 1
  %ortmp301 = or i32 72, %andtmp300
  call void @o(i32 %ortmp301)
  store i32 63, i32* %c, align 4
  br label %cond_end297

cond_else_block296:                               ; preds = %cond_jump_then284
  store i32 31, i32* %c, align 4
  br label %cond_end297

cond_end297:                                      ; preds = %cond_else_block296, %cond_jump_then295
  call void @vswap()
  %c302 = load i32, i32* %c, align 4
  %vtop303 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL304 = getelementptr inbounds %SValue, %SValue* %vtop303, i32 0, i32 3
  %c305 = load %CValue, %CValue* %fieldLLL304, align 16
  %ICASTO306 = bitcast %CValue* %fieldLLL304 to i32*
  %i307 = load i32, i32* %ICASTO306, align 4
  %andtmp308 = and i32 %c302, %i307
  store i32 %andtmp308, i32* %c, align 4
  call void @o(i32 193)
  %opc309 = load i32, i32* %opc, align 4
  %r310 = load i32, i32* %r, align 4
  %ortmp311 = or i32 %opc309, %r310
  call void @o(i32 %ortmp311)
  %c312 = load i32, i32* %c, align 4
  call void @g(i32 %c312)
  br label %cond_end286

cond_jump_then330:                                ; preds = %cond_else_block285
  %r332 = load i32, i32* %r, align 4
  %rshifttmp333 = lshr i32 %r332, 3
  %andtmp334 = and i32 %rshifttmp333, 1
  %ortmp335 = or i32 72, %andtmp334
  call void @o(i32 %ortmp335)
  br label %cond_end331

cond_end331:                                      ; preds = %cond_jump_then330, %cond_else_block285
  call void @o(i32 211)
  %opc336 = load i32, i32* %opc, align 4
  %r337 = load i32, i32* %r, align 4
  %ortmp338 = or i32 %opc336, %r337
  call void @o(i32 %ortmp338)
  br label %cond_end286

after_break346:                                   ; No predecessors!
  br label %cond_else_blockX273
  br label %cond_else_blockX348

cond_then_block347:                               ; preds = %cond_else_blockX356, %cond_else_blockX354, %cond_else_blockX352, %cond_else_blockX350, %cond_else_blockX348, %cond_else_blockX273
  call void @gv2(i32 4, i32 8)
  %vtop360 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB361 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY362 = getelementptr inbounds %SValue, %SValue* %element_addressAB361, i32 -1
  %load_element363 = load %SValue, %SValue* %element_addressXYXZY362, align 16
  %fieldVVV364 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY362, i32 0, i32 1
  %r365 = load i16, i16* %fieldVVV364, align 2
  %icastKY366 = zext i16 %r365 to i32
  store i32 %icastKY366, i32* %r, align 4
  %vtop367 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB368 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY369 = getelementptr inbounds %SValue, %SValue* %element_addressAB368, i32 0
  %load_element370 = load %SValue, %SValue* %element_addressXYXZY369, align 16
  %fieldVVV371 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY369, i32 0, i32 1
  %r372 = load i16, i16* %fieldVVV371, align 2
  %icastKY373 = zext i16 %r372 to i32
  store i32 %icastKY373, i32* %fr, align 4
  %vtop374 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI375 = ptrtoint %SValue* %vtop374 to i64
  %sub376 = sub i64 %ptrToIntI375, 64
  %iintToPtrD377 = inttoptr i64 %sub376 to %SValue*
  store %SValue* %iintToPtrD377, %SValue** @vtop, align 8
  %ptrToIntC378 = ptrtoint %SValue* %iintToPtrD377 to i64
  %add379 = add i64 %ptrToIntC378, 64
  %intToPtrB380 = inttoptr i64 %add379 to %SValue*
  call void @save_reg(i32 2)
  %op381 = load i32, i32* %op, align 4
  %eq382 = icmp eq i32 %op381, 194
  br i1 %eq382, label %cond_jump_then383, label %cond_else_block384

cond_else_blockX348:                              ; preds = %cond_else_blockX273, %after_break346
  %eqtmp351 = icmp eq i32 %op2, 176
  br i1 %eqtmp351, label %cond_then_block347, label %cond_else_blockX350
  br label %cond_else_blockX352

cond_else_blockX350:                              ; preds = %cond_else_blockX348, %cond_else_blockX273
  %eqtmp353 = icmp eq i32 %op2, 178
  br i1 %eqtmp353, label %cond_then_block347, label %cond_else_blockX352
  br label %cond_else_blockX354

cond_else_blockX352:                              ; preds = %cond_else_blockX350, %cond_else_blockX348
  %eqtmp355 = icmp eq i32 %op2, 37
  br i1 %eqtmp355, label %cond_then_block347, label %cond_else_blockX354
  br label %cond_else_blockX356

cond_else_blockX354:                              ; preds = %cond_else_blockX352, %cond_else_blockX350
  %eqtmp357 = icmp eq i32 %op2, 177
  br i1 %eqtmp357, label %cond_then_block347, label %cond_else_blockX356
  br label %cond_else_blockX358

cond_else_blockX356:                              ; preds = %cond_else_blockX354, %cond_else_blockX352
  %eqtmp359 = icmp eq i32 %op2, 194
  br i1 %eqtmp359, label %cond_then_block347, label %cond_else_blockX358

cond_else_blockX358:                              ; preds = %after_break436, %cond_else_blockX356, %cond_else_blockX354
  br label %cond_then_block437

cond_jump_then383:                                ; preds = %cond_then_block347
  call void @o(i32 247)
  %fr386 = load i32, i32* %fr, align 4
  %add387 = add i32 224, %fr386
  call void @o(i32 %add387)
  %vtop388 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU389 = getelementptr inbounds %SValue, %SValue* %vtop388, i32 0, i32 2
  store i16 2, i16* %fieldTU389, align 2
  store i32 0, i32* %r, align 4
  br label %cond_end385

cond_else_block384:                               ; preds = %cond_then_block347
  %op391 = load i32, i32* %op, align 4
  %eq392 = icmp eq i32 %op391, 176
  store i1 %eq392, i1* %oror390, align 1
  br i1 %eq392, label %cond_jump_end394, label %cond_jump_then393

cond_end385:                                      ; preds = %cond_end432, %cond_jump_then383
  %vtop433 = load %SValue*, %SValue** @vtop, align 8
  %r434 = load i32, i32* %r, align 4
  %icastG = trunc i32 %r434 to i16
  %fieldTU435 = getelementptr inbounds %SValue, %SValue* %vtop433, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU435, align 2
  br label %end_blockX

cond_jump_then393:                                ; preds = %cond_else_block384
  %op395 = load i32, i32* %op, align 4
  %eq396 = icmp eq i32 %op395, 177
  %oror397 = or i1 %eq392, %eq396
  store i1 %oror397, i1* %oror390, align 1
  br label %cond_jump_end394

cond_jump_end394:                                 ; preds = %cond_jump_then393, %cond_else_block384
  %oror_result_value398 = load i1, i1* %oror390, align 1
  br i1 %oror_result_value398, label %cond_jump_then399, label %cond_else_block400

cond_jump_then399:                                ; preds = %cond_jump_end394
  call void @o(i32 16241201)
  %fr402 = load i32, i32* %fr, align 4
  %add403 = add i32 240, %fr402
  call void @o(i32 %add403)
  br label %cond_end401

cond_else_block400:                               ; preds = %cond_jump_end394
  %vtop404 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL405 = getelementptr inbounds %SValue, %SValue* %vtop404, i32 0, i32 0
  %type406 = load %CType, %CType* %fieldLLL405, align 8
  %fieldVVV407 = getelementptr inbounds %CType, %CType* %fieldLLL405, i32 0, i32 0
  %t408 = load i32, i32* %fieldVVV407, align 4
  %andtmp409 = and i32 %t408, 15
  %andtmp410 = and i32 %andtmp409, 12
  %icmpA411 = icmp ne i32 %andtmp410, 0
  br i1 %icmpA411, label %cond_jump_then412, label %cond_else_block413

cond_end401:                                      ; preds = %cond_end414, %cond_jump_then399
  %op422 = load i32, i32* %op, align 4
  %eq423 = icmp eq i32 %op422, 37
  store i1 %eq423, i1* %oror421, align 1
  br i1 %eq423, label %cond_jump_end425, label %cond_jump_then424

cond_jump_then412:                                ; preds = %cond_else_block400
  call void @o(i32 39240)
  %fr415 = load i32, i32* %fr, align 4
  %rshifttmp416 = lshr i32 %fr415, 3
  %andtmp417 = and i32 %rshifttmp416, 1
  %add418 = add i32 72, %andtmp417
  call void @o(i32 %add418)
  br label %cond_end414

cond_else_block413:                               ; preds = %cond_else_block400
  call void @o(i32 153)
  br label %cond_end414

cond_end414:                                      ; preds = %cond_else_block413, %cond_jump_then412
  call void @o(i32 247)
  %fr419 = load i32, i32* %fr, align 4
  %add420 = add i32 248, %fr419
  call void @o(i32 %add420)
  br label %cond_end401

cond_jump_then424:                                ; preds = %cond_end401
  %op426 = load i32, i32* %op, align 4
  %eq427 = icmp eq i32 %op426, 177
  %oror428 = or i1 %eq423, %eq427
  store i1 %oror428, i1* %oror421, align 1
  br label %cond_jump_end425

cond_jump_end425:                                 ; preds = %cond_jump_then424, %cond_end401
  %oror_result_value429 = load i1, i1* %oror421, align 1
  br i1 %oror_result_value429, label %cond_jump_then430, label %cond_else_block431

cond_jump_then430:                                ; preds = %cond_jump_end425
  store i32 2, i32* %r, align 4
  br label %cond_end432

cond_else_block431:                               ; preds = %cond_jump_end425
  store i32 0, i32* %r, align 4
  br label %cond_end432

cond_end432:                                      ; preds = %cond_else_block431, %cond_jump_then430
  br label %cond_end385

after_break436:                                   ; No predecessors!
  br label %cond_else_blockX358
  br label %cond_else_blockX438

cond_then_block437:                               ; preds = %cond_else_blockX358
  store i32 7, i32* %opc, align 4
  br label %gen_opi.gen_op8
  br label %cond_else_blockX438

cond_else_blockX438:                              ; preds = %cond_then_block437, %after_break436
  br label %end_blockX
}

define void @gen_opl(i32 %0) {
entry:
  %op = alloca i32, align 4
  %op1 = alloca i32*, align 8
  store i32 %0, i32* %op, align 4
  store i32* %op, i32** %op1, align 8
  %op2 = load i32, i32* %op, align 4
  call void @gen_opi(i32 %op2)
  ret void
}

define void @gen_opf(i32 %0) {
entry:
  %v1360 = alloca %SValue, align 16
  %castXXXX361 = bitcast %SValue* %v1360 to i8*
  %1 = call i8* @memset(i8* %castXXXX361, i32 0, i64 64)
  %oror241 = alloca i1, align 1
  %oror227 = alloca i1, align 1
  %oror215 = alloca i1, align 1
  %v1 = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %v1 to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %andand175 = alloca i1, align 1
  %oror110 = alloca i1, align 1
  %oror88 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand67 = alloca i1, align 1
  %andand = alloca i1, align 1
  %float_type = alloca i32, align 4
  %condtional_result_value = alloca i32, align 4
  %r = alloca i32, align 4
  %swapped = alloca i32, align 4
  %fc = alloca i32, align 4
  %ft = alloca i32, align 4
  %a = alloca i32, align 4
  %op = alloca i32, align 4
  %op1 = alloca i32*, align 8
  store i32 %0, i32* %op, align 4
  store i32* %op, i32** %op1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eq = icmp eq i32 %andtmp, 10
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i32 64, i32* %condtional_result_value, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  store i32 2, i32* %condtional_result_value, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %conditional_result_value = load i32, i32* %condtional_result_value, align 4
  store i32 %conditional_result_value, i32* %float_type, align 4
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 -1
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV3 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 1
  %r4 = load i16, i16* %fieldVVV3, align 2
  %icastKY = zext i16 %r4 to i32
  %andtmp5 = and i32 %icastKY, 511
  %eq6 = icmp eq i32 %andtmp5, 240
  br i1 %eq6, label %cond_jump_then7, label %cond_end8

cond_jump_then7:                                  ; preds = %cond_end
  call void @vswap()
  %float_type9 = load i32, i32* %float_type, align 4
  %fun_result = call i32 @gv(i32 %float_type9)
  call void @vswap()
  br label %cond_end8

cond_end8:                                        ; preds = %cond_jump_then7, %cond_end
  %vtop10 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB11 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY12 = getelementptr inbounds %SValue, %SValue* %element_addressAB11, i32 0
  %load_element13 = load %SValue, %SValue* %element_addressXYXZY12, align 16
  %fieldVVV14 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY12, i32 0, i32 1
  %r15 = load i16, i16* %fieldVVV14, align 2
  %icastKY16 = zext i16 %r15 to i32
  %andtmp17 = and i32 %icastKY16, 511
  %eq18 = icmp eq i32 %andtmp17, 240
  br i1 %eq18, label %cond_jump_then19, label %cond_end20

cond_jump_then19:                                 ; preds = %cond_end8
  %float_type21 = load i32, i32* %float_type, align 4
  %fun_result22 = call i32 @gv(i32 %float_type21)
  br label %cond_end20

cond_end20:                                       ; preds = %cond_jump_then19, %cond_end8
  %vtop23 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB24 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY25 = getelementptr inbounds %SValue, %SValue* %element_addressAB24, i32 -1
  %load_element26 = load %SValue, %SValue* %element_addressXYXZY25, align 16
  %fieldVVV27 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY25, i32 0, i32 1
  %r28 = load i16, i16* %fieldVVV27, align 2
  %icastKY29 = zext i16 %r28 to i32
  %andtmp30 = and i32 %icastKY29, 256
  %icmpA = icmp ne i32 %andtmp30, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then31, label %cond_jump_end

cond_jump_then31:                                 ; preds = %cond_end20
  %vtop32 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB33 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY34 = getelementptr inbounds %SValue, %SValue* %element_addressAB33, i32 0
  %load_element35 = load %SValue, %SValue* %element_addressXYXZY34, align 16
  %fieldVVV36 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY34, i32 0, i32 1
  %r37 = load i16, i16* %fieldVVV36, align 2
  %icastKY38 = zext i16 %r37 to i32
  %andtmp39 = and i32 %icastKY38, 256
  %icmpA40 = icmp ne i32 %andtmp39, 0
  %andand41 = and i1 %icmpA, %icmpA40
  store i1 %andand41, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then31, %cond_end20
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then42, label %cond_end43

cond_jump_then42:                                 ; preds = %cond_jump_end
  call void @vswap()
  %float_type44 = load i32, i32* %float_type, align 4
  %fun_result45 = call i32 @gv(i32 %float_type44)
  call void @vswap()
  br label %cond_end43

cond_end43:                                       ; preds = %cond_jump_then42, %cond_jump_end
  store i32 0, i32* %swapped, align 4
  %vtop46 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB47 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY48 = getelementptr inbounds %SValue, %SValue* %element_addressAB47, i32 -1
  %load_element49 = load %SValue, %SValue* %element_addressXYXZY48, align 16
  %fieldVVV50 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY48, i32 0, i32 1
  %r51 = load i16, i16* %fieldVVV50, align 2
  %icastKY52 = zext i16 %r51 to i32
  %andtmp53 = and i32 %icastKY52, 256
  %icmpA54 = icmp ne i32 %andtmp53, 0
  br i1 %icmpA54, label %cond_jump_then55, label %cond_end56

cond_jump_then55:                                 ; preds = %cond_end43
  call void @vswap()
  store i32 1, i32* %swapped, align 4
  br label %cond_end56

cond_end56:                                       ; preds = %cond_jump_then55, %cond_end43
  %vtop57 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL58 = getelementptr inbounds %SValue, %SValue* %vtop57, i32 0, i32 0
  %type59 = load %CType, %CType* %fieldLLL58, align 8
  %fieldVVV60 = getelementptr inbounds %CType, %CType* %fieldLLL58, i32 0, i32 0
  %t61 = load i32, i32* %fieldVVV60, align 4
  %andtmp62 = and i32 %t61, 15
  %eq63 = icmp eq i32 %andtmp62, 10
  br i1 %eq63, label %cond_jump_then64, label %cond_else_block65

cond_jump_then64:                                 ; preds = %cond_end56
  %op68 = load i32, i32* %op, align 4
  %gteq_signed = icmp sge i32 %op68, 146
  store i1 %gteq_signed, i1* %andand67, align 1
  br i1 %gteq_signed, label %cond_jump_then69, label %cond_jump_end70

cond_else_block65:                                ; preds = %cond_end56
  %op176 = load i32, i32* %op, align 4
  %gteq_signed177 = icmp sge i32 %op176, 146
  store i1 %gteq_signed177, i1* %andand175, align 1
  br i1 %gteq_signed177, label %cond_jump_then178, label %cond_jump_end179

cond_end66:                                       ; preds = %cond_end186, %cond_end76
  ret void

cond_jump_then69:                                 ; preds = %cond_jump_then64
  %op71 = load i32, i32* %op, align 4
  %leeq = icmp sle i32 %op71, 159
  %andand72 = and i1 %gteq_signed, %leeq
  store i1 %andand72, i1* %andand67, align 1
  br label %cond_jump_end70

cond_jump_end70:                                  ; preds = %cond_jump_then69, %cond_jump_then64
  %andand_result_value73 = load i1, i1* %andand67, align 1
  br i1 %andand_result_value73, label %cond_jump_then74, label %cond_else_block75

cond_jump_then74:                                 ; preds = %cond_jump_end70
  %vtop77 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 4, %SValue* %vtop77)
  call void @save_reg(i32 0)
  %op78 = load i32, i32* %op, align 4
  %eq79 = icmp eq i32 %op78, 157
  store i1 %eq79, i1* %oror, align 1
  br i1 %eq79, label %cond_jump_end81, label %cond_jump_then80

cond_else_block75:                                ; preds = %cond_jump_end70
  %vtop124 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 4, %SValue* %vtop124)
  %swapped125 = load i32, i32* %swapped, align 4
  %logical_denial126 = icmp eq i32 %swapped125, 0
  %castOOOO127 = zext i1 %logical_denial126 to i32
  store i32 %castOOOO127, i32* %swapped, align 4
  %op128 = load i32, i32* %op, align 4
  br label %cond_then_block
  br label %cond_else_blockX129

cond_end76:                                       ; preds = %end_blockX, %cond_end107
  br label %cond_end66

cond_jump_then80:                                 ; preds = %cond_jump_then74
  %op82 = load i32, i32* %op, align 4
  %eq83 = icmp eq i32 %op82, 159
  %oror84 = or i1 %eq79, %eq83
  store i1 %oror84, i1* %oror, align 1
  br label %cond_jump_end81

cond_jump_end81:                                  ; preds = %cond_jump_then80, %cond_jump_then74
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then85, label %cond_jump_elif0

cond_jump_then85:                                 ; preds = %cond_jump_end81
  %swapped87 = load i32, i32* %swapped, align 4
  %logical_denial = icmp eq i32 %swapped87, 0
  %castOOOO = zext i1 %logical_denial to i32
  store i32 %castOOOO, i32* %swapped, align 4
  br label %cond_end86

cond_jump_elif0:                                  ; preds = %cond_jump_end81
  %op89 = load i32, i32* %op, align 4
  %eq90 = icmp eq i32 %op89, 148
  store i1 %eq90, i1* %oror88, align 1
  br i1 %eq90, label %cond_jump_end92, label %cond_jump_then91

cond_jump_elif_then0:                             ; preds = %cond_jump_end92
  store i32 0, i32* %swapped, align 4
  br label %cond_end86

cond_end86:                                       ; preds = %cond_jump_elif_then0, %cond_jump_end92, %cond_jump_then85
  %swapped97 = load i32, i32* %swapped, align 4
  %icmpA98 = icmp ne i32 %swapped97, 0
  br i1 %icmpA98, label %cond_jump_then99, label %cond_end100

cond_jump_then91:                                 ; preds = %cond_jump_elif0
  %op93 = load i32, i32* %op, align 4
  %eq94 = icmp eq i32 %op93, 149
  %oror95 = or i1 %eq90, %eq94
  store i1 %oror95, i1* %oror88, align 1
  br label %cond_jump_end92

cond_jump_end92:                                  ; preds = %cond_jump_then91, %cond_jump_elif0
  %oror_result_value96 = load i1, i1* %oror88, align 1
  br i1 %oror_result_value96, label %cond_jump_elif_then0, label %cond_end86

cond_jump_then99:                                 ; preds = %cond_end86
  call void @o(i32 51673)
  br label %cond_end100

cond_end100:                                      ; preds = %cond_jump_then99, %cond_end86
  call void @o(i32 59866)
  call void @o(i32 57567)
  %op101 = load i32, i32* %op, align 4
  %eq102 = icmp eq i32 %op101, 148
  br i1 %eq102, label %cond_jump_then103, label %cond_jump_elif0104

cond_jump_then103:                                ; preds = %cond_end100
  call void @o(i32 4580480)
  call void @o(i32 4258944)
  br label %cond_end107

cond_jump_elif0104:                               ; preds = %cond_end100
  %op108 = load i32, i32* %op, align 4
  %eq109 = icmp eq i32 %op108, 149
  br i1 %eq109, label %cond_jump_elif_then0105, label %cond_jump_elif1

cond_jump_elif_then0105:                          ; preds = %cond_jump_elif0104
  call void @o(i32 4580480)
  call void @o(i32 4256896)
  store i32 149, i32* %op, align 4
  br label %cond_end107

cond_jump_elif1:                                  ; preds = %cond_jump_elif0104
  %op111 = load i32, i32* %op, align 4
  %eq112 = icmp eq i32 %op111, 157
  store i1 %eq112, i1* %oror110, align 1
  br i1 %eq112, label %cond_jump_end114, label %cond_jump_then113

cond_jump_elif_then1:                             ; preds = %cond_jump_end114
  call void @o(i32 378102)
  store i32 148, i32* %op, align 4
  br label %cond_end107

cond_else_block106:                               ; preds = %cond_jump_end114
  call void @o(i32 4572406)
  store i32 148, i32* %op, align 4
  br label %cond_end107

cond_end107:                                      ; preds = %cond_else_block106, %cond_jump_elif_then1, %cond_jump_elif_then0105, %cond_jump_then103
  %vtop119 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop119 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  %vtop120 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop120, i32 0, i32 1
  store i16 243, i16* %fieldTU, align 2
  %vtop121 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL122 = getelementptr inbounds %SValue, %SValue* %vtop121, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL122, align 16
  %op123 = load i32, i32* %op, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL122, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %op123, i32* %icastN, align 4
  br label %cond_end76

cond_jump_then113:                                ; preds = %cond_jump_elif1
  %op115 = load i32, i32* %op, align 4
  %eq116 = icmp eq i32 %op115, 158
  %oror117 = or i1 %eq112, %eq116
  store i1 %oror117, i1* %oror110, align 1
  br label %cond_jump_end114

cond_jump_end114:                                 ; preds = %cond_jump_then113, %cond_jump_elif1
  %oror_result_value118 = load i1, i1* %oror110, align 1
  br i1 %oror_result_value118, label %cond_jump_elif_then1, label %cond_else_block106

end_blockX:                                       ; preds = %cond_else_blockX147, %cond_end152, %cond_then_block142, %cond_end136, %cond_then_block
  %vtop158 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL159 = getelementptr inbounds %SValue, %SValue* %vtop158, i32 0, i32 0
  %type160 = load %CType, %CType* %fieldLLL159, align 8
  %fieldVVV161 = getelementptr inbounds %CType, %CType* %fieldLLL159, i32 0, i32 0
  %t162 = load i32, i32* %fieldVVV161, align 4
  store i32 %t162, i32* %ft, align 4
  %vtop163 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL164 = getelementptr inbounds %SValue, %SValue* %vtop163, i32 0, i32 3
  %c165 = load %CValue, %CValue* %fieldLLL164, align 16
  %ICASTO = bitcast %CValue* %fieldLLL164 to i32*
  %ul = load i32, i32* %ICASTO, align 4
  store i32 %ul, i32* %fc, align 4
  call void @o(i32 222)
  %a166 = load i32, i32* %a, align 4
  %lshifttmp = shl i32 %a166, 3
  %add167 = add i32 193, %lshifttmp
  call void @o(i32 %add167)
  %vtop168 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI169 = ptrtoint %SValue* %vtop168 to i64
  %sub170 = sub i64 %ptrToIntI169, 64
  %iintToPtrD171 = inttoptr i64 %sub170 to %SValue*
  store %SValue* %iintToPtrD171, %SValue** @vtop, align 8
  %ptrToIntC172 = ptrtoint %SValue* %iintToPtrD171 to i64
  %add173 = add i64 %ptrToIntC172, 64
  %intToPtrB174 = inttoptr i64 %add173 to %SValue*
  br label %cond_end76

cond_then_block:                                  ; preds = %cond_else_blockX, %cond_else_block75
  store i32 0, i32* %a, align 4
  br label %end_blockX

cond_else_blockX:                                 ; No predecessors!
  %eqtmp = icmp eq i32 %op128, 43
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX129

cond_else_blockX129:                              ; preds = %after_break, %cond_else_blockX, %cond_else_block75
  %eqtmp132 = icmp eq i32 %op128, 45
  br i1 %eqtmp132, label %cond_then_block130, label %cond_else_blockX131

after_break:                                      ; No predecessors!
  br label %cond_else_blockX129
  br label %cond_else_blockX131

cond_then_block130:                               ; preds = %cond_else_blockX129
  store i32 4, i32* %a, align 4
  %swapped133 = load i32, i32* %swapped, align 4
  %icmpA134 = icmp ne i32 %swapped133, 0
  br i1 %icmpA134, label %cond_jump_then135, label %cond_end136

cond_else_blockX131:                              ; preds = %after_break141, %cond_else_blockX129, %after_break
  %eqtmp144 = icmp eq i32 %op128, 42
  br i1 %eqtmp144, label %cond_then_block142, label %cond_else_blockX143

cond_jump_then135:                                ; preds = %cond_then_block130
  %a137 = load i32, i32* %a, align 4
  %add138 = add i32 %a137, 1
  store i32 %add138, i32* %a, align 4
  %a139 = load i32, i32* %a, align 4
  %sub140 = sub i32 %a139, 1
  br label %cond_end136

cond_end136:                                      ; preds = %cond_jump_then135, %cond_then_block130
  br label %end_blockX

after_break141:                                   ; No predecessors!
  br label %cond_else_blockX131
  br label %cond_else_blockX143

cond_then_block142:                               ; preds = %cond_else_blockX131
  store i32 1, i32* %a, align 4
  br label %end_blockX

cond_else_blockX143:                              ; preds = %after_break145, %cond_else_blockX131, %after_break141
  %eqtmp148 = icmp eq i32 %op128, 47
  br i1 %eqtmp148, label %cond_then_block146, label %cond_else_blockX147

after_break145:                                   ; No predecessors!
  br label %cond_else_blockX143
  br label %cond_else_blockX147

cond_then_block146:                               ; preds = %cond_else_blockX143
  store i32 6, i32* %a, align 4
  %swapped149 = load i32, i32* %swapped, align 4
  %icmpA150 = icmp ne i32 %swapped149, 0
  br i1 %icmpA150, label %cond_jump_then151, label %cond_end152

cond_else_blockX147:                              ; preds = %after_break157, %cond_else_blockX143, %after_break145
  br label %end_blockX

cond_jump_then151:                                ; preds = %cond_then_block146
  %a153 = load i32, i32* %a, align 4
  %add154 = add i32 %a153, 1
  store i32 %add154, i32* %a, align 4
  %a155 = load i32, i32* %a, align 4
  %sub156 = sub i32 %a155, 1
  br label %cond_end152

cond_end152:                                      ; preds = %cond_jump_then151, %cond_then_block146
  br label %end_blockX

after_break157:                                   ; No predecessors!
  br label %cond_else_blockX147

cond_jump_then178:                                ; preds = %cond_else_block65
  %op180 = load i32, i32* %op, align 4
  %leeq181 = icmp sle i32 %op180, 159
  %andand182 = and i1 %gteq_signed177, %leeq181
  store i1 %andand182, i1* %andand175, align 1
  br label %cond_jump_end179

cond_jump_end179:                                 ; preds = %cond_jump_then178, %cond_else_block65
  %andand_result_value183 = load i1, i1* %andand175, align 1
  br i1 %andand_result_value183, label %cond_jump_then184, label %cond_else_block185

cond_jump_then184:                                ; preds = %cond_jump_end179
  %vtop187 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL188 = getelementptr inbounds %SValue, %SValue* %vtop187, i32 0, i32 1
  %r189 = load i16, i16* %fieldLLL188, align 2
  %icastKY190 = zext i16 %r189 to i32
  store i32 %icastKY190, i32* %r, align 4
  %vtop191 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL192 = getelementptr inbounds %SValue, %SValue* %vtop191, i32 0, i32 3
  %c193 = load %CValue, %CValue* %fieldLLL192, align 16
  %ICASTO194 = bitcast %CValue* %fieldLLL192 to i32*
  %ul195 = load i32, i32* %ICASTO194, align 4
  store i32 %ul195, i32* %fc, align 4
  %r196 = load i32, i32* %r, align 4
  %andtmp197 = and i32 %r196, 255
  %eq198 = icmp eq i32 %andtmp197, 241
  br i1 %eq198, label %cond_jump_then199, label %cond_end200

cond_else_block185:                               ; preds = %cond_jump_end179
  %vtop300 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL301 = getelementptr inbounds %SValue, %SValue* %vtop300, i32 0, i32 0
  %type302 = load %CType, %CType* %fieldLLL301, align 8
  %fieldVVV303 = getelementptr inbounds %CType, %CType* %fieldLLL301, i32 0, i32 0
  %t304 = load i32, i32* %fieldVVV303, align 4
  %andtmp305 = and i32 %t304, 15
  %eq306 = icmp eq i32 %andtmp305, 10
  br i1 %eq306, label %cond_jump_then307, label %cond_end308

cond_end186:                                      ; preds = %cond_end347, %cond_end257
  br label %cond_end66

cond_jump_then199:                                ; preds = %cond_jump_then184
  %fun_result201 = call i32 @get_reg(i32 1)
  store i32 %fun_result201, i32* %r, align 4
  %v1202 = load %SValue, %SValue* %v1, align 16
  %fieldVVV203 = getelementptr inbounds %SValue, %SValue* %v1, i32 0, i32 0
  %type204 = load %CType, %CType* %fieldVVV203, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldVVV203, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  %v1205 = load %SValue, %SValue* %v1, align 16
  %fieldTTT206 = getelementptr inbounds %SValue, %SValue* %v1, i32 0, i32 1
  store i16 498, i16* %fieldTTT206, align 2
  %v1207 = load %SValue, %SValue* %v1, align 16
  %fieldVVV208 = getelementptr inbounds %SValue, %SValue* %v1, i32 0, i32 3
  %c209 = load %CValue, %CValue* %fieldVVV208, align 16
  %fc210 = load i32, i32* %fc, align 4
  %fieldIII211 = getelementptr inbounds %CValue, %CValue* %fieldVVV208, i32 0, i32 0
  %icastN212 = bitcast fp128* %fieldIII211 to i32*
  store i32 %fc210, i32* %icastN212, align 4
  %r213 = load i32, i32* %r, align 4
  %v1214 = load %SValue, %SValue* %v1, align 16
  call void @load(i32 %r213, %SValue* %v1)
  store i32 0, i32* %fc, align 4
  br label %cond_end200

cond_end200:                                      ; preds = %cond_jump_then199, %cond_jump_then184
  %op216 = load i32, i32* %op, align 4
  %eq217 = icmp eq i32 %op216, 148
  store i1 %eq217, i1* %oror215, align 1
  br i1 %eq217, label %cond_jump_end219, label %cond_jump_then218

cond_jump_then218:                                ; preds = %cond_end200
  %op220 = load i32, i32* %op, align 4
  %eq221 = icmp eq i32 %op220, 149
  %oror222 = or i1 %eq217, %eq221
  store i1 %oror222, i1* %oror215, align 1
  br label %cond_jump_end219

cond_jump_end219:                                 ; preds = %cond_jump_then218, %cond_end200
  %oror_result_value223 = load i1, i1* %oror215, align 1
  br i1 %oror_result_value223, label %cond_jump_then224, label %cond_else_block225

cond_jump_then224:                                ; preds = %cond_jump_end219
  store i32 0, i32* %swapped, align 4
  br label %cond_end226

cond_else_block225:                               ; preds = %cond_jump_end219
  %op228 = load i32, i32* %op, align 4
  %eq229 = icmp eq i32 %op228, 158
  store i1 %eq229, i1* %oror227, align 1
  br i1 %eq229, label %cond_jump_end231, label %cond_jump_then230

cond_end226:                                      ; preds = %cond_end252, %cond_jump_then224
  %swapped253 = load i32, i32* %swapped, align 4
  %icmpA254 = icmp ne i32 %swapped253, 0
  br i1 %icmpA254, label %cond_jump_then255, label %cond_else_block256

cond_jump_then230:                                ; preds = %cond_else_block225
  %op232 = load i32, i32* %op, align 4
  %eq233 = icmp eq i32 %op232, 156
  %oror234 = or i1 %eq229, %eq233
  store i1 %oror234, i1* %oror227, align 1
  br label %cond_jump_end231

cond_jump_end231:                                 ; preds = %cond_jump_then230, %cond_else_block225
  %oror_result_value235 = load i1, i1* %oror227, align 1
  br i1 %oror_result_value235, label %cond_jump_then236, label %cond_end237

cond_jump_then236:                                ; preds = %cond_jump_end231
  %swapped238 = load i32, i32* %swapped, align 4
  %logical_denial239 = icmp eq i32 %swapped238, 0
  %castOOOO240 = zext i1 %logical_denial239 to i32
  store i32 %castOOOO240, i32* %swapped, align 4
  br label %cond_end237

cond_end237:                                      ; preds = %cond_jump_then236, %cond_jump_end231
  %op242 = load i32, i32* %op, align 4
  %eq243 = icmp eq i32 %op242, 158
  store i1 %eq243, i1* %oror241, align 1
  br i1 %eq243, label %cond_jump_end245, label %cond_jump_then244

cond_jump_then244:                                ; preds = %cond_end237
  %op246 = load i32, i32* %op, align 4
  %eq247 = icmp eq i32 %op246, 157
  %oror248 = or i1 %eq243, %eq247
  store i1 %oror248, i1* %oror241, align 1
  br label %cond_jump_end245

cond_jump_end245:                                 ; preds = %cond_jump_then244, %cond_end237
  %oror_result_value249 = load i1, i1* %oror241, align 1
  br i1 %oror_result_value249, label %cond_jump_then250, label %cond_else_block251

cond_jump_then250:                                ; preds = %cond_jump_end245
  store i32 147, i32* %op, align 4
  br label %cond_end252

cond_else_block251:                               ; preds = %cond_jump_end245
  store i32 151, i32* %op, align 4
  br label %cond_end252

cond_end252:                                      ; preds = %cond_else_block251, %cond_jump_then250
  br label %cond_end226

cond_jump_then255:                                ; preds = %cond_end226
  call void @o(i32 8261619)
  %r258 = load i32, i32* %r, align 4
  %vtop259 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL260 = getelementptr inbounds %SValue, %SValue* %vtop259, i32 0, i32 4
  %sym = load %Sym*, %Sym** %fieldLLL260, align 8
  %fc261 = load i32, i32* %fc, align 4
  call void @gen_modrm(i32 1, i32 %r258, %Sym* %sym, i32 %fc261)
  %vtop262 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL263 = getelementptr inbounds %SValue, %SValue* %vtop262, i32 0, i32 0
  %type264 = load %CType, %CType* %fieldLLL263, align 8
  %fieldVVV265 = getelementptr inbounds %CType, %CType* %fieldLLL263, i32 0, i32 0
  %t266 = load i32, i32* %fieldVVV265, align 4
  %andtmp267 = and i32 %t266, 15
  %eq268 = icmp eq i32 %andtmp267, 9
  br i1 %eq268, label %cond_jump_then269, label %cond_end270

cond_else_block256:                               ; preds = %cond_end226
  %vtop271 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL272 = getelementptr inbounds %SValue, %SValue* %vtop271, i32 0, i32 0
  %type273 = load %CType, %CType* %fieldLLL272, align 8
  %fieldVVV274 = getelementptr inbounds %CType, %CType* %fieldLLL272, i32 0, i32 0
  %t275 = load i32, i32* %fieldVVV274, align 4
  %andtmp276 = and i32 %t275, 15
  %eq277 = icmp eq i32 %andtmp276, 9
  br i1 %eq277, label %cond_jump_then278, label %cond_end279

cond_end257:                                      ; preds = %cond_end279, %cond_end270
  %vtop285 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI286 = ptrtoint %SValue* %vtop285 to i64
  %sub287 = sub i64 %ptrToIntI286, 64
  %iintToPtrD288 = inttoptr i64 %sub287 to %SValue*
  store %SValue* %iintToPtrD288, %SValue** @vtop, align 8
  %ptrToIntC289 = ptrtoint %SValue* %iintToPtrD288 to i64
  %add290 = add i64 %ptrToIntC289, 64
  %intToPtrB291 = inttoptr i64 %add290 to %SValue*
  %vtop292 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU293 = getelementptr inbounds %SValue, %SValue* %vtop292, i32 0, i32 1
  store i16 243, i16* %fieldTU293, align 2
  %vtop294 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL295 = getelementptr inbounds %SValue, %SValue* %vtop294, i32 0, i32 3
  %c296 = load %CValue, %CValue* %fieldLLL295, align 16
  %op297 = load i32, i32* %op, align 4
  %fieldIII298 = getelementptr inbounds %CValue, %CValue* %fieldLLL295, i32 0, i32 0
  %icastN299 = bitcast fp128* %fieldIII298 to i32*
  store i32 %op297, i32* %icastN299, align 4
  br label %cond_end186

cond_jump_then269:                                ; preds = %cond_jump_then255
  call void @o(i32 102)
  br label %cond_end270

cond_end270:                                      ; preds = %cond_jump_then269, %cond_jump_then255
  call void @o(i32 11791)
  call void @o(i32 200)
  br label %cond_end257

cond_jump_then278:                                ; preds = %cond_else_block256
  call void @o(i32 102)
  br label %cond_end279

cond_end279:                                      ; preds = %cond_jump_then278, %cond_else_block256
  call void @o(i32 11791)
  %r280 = load i32, i32* %r, align 4
  %vtop281 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL282 = getelementptr inbounds %SValue, %SValue* %vtop281, i32 0, i32 4
  %sym283 = load %Sym*, %Sym** %fieldLLL282, align 8
  %fc284 = load i32, i32* %fc, align 4
  call void @gen_modrm(i32 0, i32 %r280, %Sym* %sym283, i32 %fc284)
  br label %cond_end257

cond_jump_then307:                                ; preds = %cond_else_block185
  %vtop309 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 3, %SValue* %vtop309)
  %swapped310 = load i32, i32* %swapped, align 4
  %logical_denial311 = icmp eq i32 %swapped310, 0
  %castOOOO312 = zext i1 %logical_denial311 to i32
  store i32 %castOOOO312, i32* %swapped, align 4
  br label %cond_end308

cond_end308:                                      ; preds = %cond_jump_then307, %cond_else_block185
  %op314 = load i32, i32* %op, align 4
  br label %cond_then_block315
  br label %cond_else_blockX317

end_blockX313:                                    ; preds = %cond_else_blockX329, %cond_then_block328, %cond_then_block324, %cond_then_block320, %cond_then_block315
  %vtop332 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL333 = getelementptr inbounds %SValue, %SValue* %vtop332, i32 0, i32 0
  %type334 = load %CType, %CType* %fieldLLL333, align 8
  %fieldVVV335 = getelementptr inbounds %CType, %CType* %fieldLLL333, i32 0, i32 0
  %t336 = load i32, i32* %fieldVVV335, align 4
  store i32 %t336, i32* %ft, align 4
  %vtop337 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL338 = getelementptr inbounds %SValue, %SValue* %vtop337, i32 0, i32 3
  %c339 = load %CValue, %CValue* %fieldLLL338, align 16
  %ICASTO340 = bitcast %CValue* %fieldLLL338 to i32*
  %ul341 = load i32, i32* %ICASTO340, align 4
  store i32 %ul341, i32* %fc, align 4
  %ft342 = load i32, i32* %ft, align 4
  %andtmp343 = and i32 %ft342, 15
  %eq344 = icmp eq i32 %andtmp343, 10
  br i1 %eq344, label %cond_jump_then345, label %cond_else_block346

cond_then_block315:                               ; preds = %cond_else_blockX316, %cond_end308
  store i32 0, i32* %a, align 4
  br label %end_blockX313

cond_else_blockX316:                              ; No predecessors!
  %eqtmp318 = icmp eq i32 %op314, 43
  br i1 %eqtmp318, label %cond_then_block315, label %cond_else_blockX317

cond_else_blockX317:                              ; preds = %after_break319, %cond_else_blockX316, %cond_end308
  %eqtmp322 = icmp eq i32 %op314, 45
  br i1 %eqtmp322, label %cond_then_block320, label %cond_else_blockX321

after_break319:                                   ; No predecessors!
  br label %cond_else_blockX317
  br label %cond_else_blockX321

cond_then_block320:                               ; preds = %cond_else_blockX317
  store i32 4, i32* %a, align 4
  br label %end_blockX313

cond_else_blockX321:                              ; preds = %after_break323, %cond_else_blockX317, %after_break319
  %eqtmp326 = icmp eq i32 %op314, 42
  br i1 %eqtmp326, label %cond_then_block324, label %cond_else_blockX325

after_break323:                                   ; No predecessors!
  br label %cond_else_blockX321
  br label %cond_else_blockX325

cond_then_block324:                               ; preds = %cond_else_blockX321
  store i32 1, i32* %a, align 4
  br label %end_blockX313

cond_else_blockX325:                              ; preds = %after_break327, %cond_else_blockX321, %after_break323
  %eqtmp330 = icmp eq i32 %op314, 47
  br i1 %eqtmp330, label %cond_then_block328, label %cond_else_blockX329

after_break327:                                   ; No predecessors!
  br label %cond_else_blockX325
  br label %cond_else_blockX329

cond_then_block328:                               ; preds = %cond_else_blockX325
  store i32 6, i32* %a, align 4
  br label %end_blockX313

cond_else_blockX329:                              ; preds = %after_break331, %cond_else_blockX325, %after_break327
  br label %end_blockX313

after_break331:                                   ; No predecessors!
  br label %cond_else_blockX329

cond_jump_then345:                                ; preds = %end_blockX313
  call void @o(i32 222)
  %a348 = load i32, i32* %a, align 4
  %lshifttmp349 = shl i32 %a348, 3
  %add350 = add i32 193, %lshifttmp349
  call void @o(i32 %add350)
  br label %cond_end347

cond_else_block346:                               ; preds = %end_blockX313
  %vtop351 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL352 = getelementptr inbounds %SValue, %SValue* %vtop351, i32 0, i32 1
  %r353 = load i16, i16* %fieldLLL352, align 2
  %icastKY354 = zext i16 %r353 to i32
  store i32 %icastKY354, i32* %r, align 4
  %r355 = load i32, i32* %r, align 4
  %andtmp356 = and i32 %r355, 255
  %eq357 = icmp eq i32 %andtmp356, 241
  br i1 %eq357, label %cond_jump_then358, label %cond_end359

cond_end347:                                      ; preds = %cond_end381, %cond_jump_then345
  %vtop404 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI405 = ptrtoint %SValue* %vtop404 to i64
  %sub406 = sub i64 %ptrToIntI405, 64
  %iintToPtrD407 = inttoptr i64 %sub406 to %SValue*
  store %SValue* %iintToPtrD407, %SValue** @vtop, align 8
  %ptrToIntC408 = ptrtoint %SValue* %iintToPtrD407 to i64
  %add409 = add i64 %ptrToIntC408, 64
  %intToPtrB410 = inttoptr i64 %add409 to %SValue*
  br label %cond_end186

cond_jump_then358:                                ; preds = %cond_else_block346
  %fun_result362 = call i32 @get_reg(i32 1)
  store i32 %fun_result362, i32* %r, align 4
  %v1363 = load %SValue, %SValue* %v1360, align 16
  %fieldVVV364 = getelementptr inbounds %SValue, %SValue* %v1360, i32 0, i32 0
  %type365 = load %CType, %CType* %fieldVVV364, align 8
  %fieldTTT366 = getelementptr inbounds %CType, %CType* %fieldVVV364, i32 0, i32 0
  store i32 0, i32* %fieldTTT366, align 4
  %v1367 = load %SValue, %SValue* %v1360, align 16
  %fieldTTT368 = getelementptr inbounds %SValue, %SValue* %v1360, i32 0, i32 1
  store i16 498, i16* %fieldTTT368, align 2
  %v1369 = load %SValue, %SValue* %v1360, align 16
  %fieldVVV370 = getelementptr inbounds %SValue, %SValue* %v1360, i32 0, i32 3
  %c371 = load %CValue, %CValue* %fieldVVV370, align 16
  %fc372 = load i32, i32* %fc, align 4
  %fieldIII373 = getelementptr inbounds %CValue, %CValue* %fieldVVV370, i32 0, i32 0
  %icastN374 = bitcast fp128* %fieldIII373 to i32*
  store i32 %fc372, i32* %icastN374, align 4
  %r375 = load i32, i32* %r, align 4
  %v1376 = load %SValue, %SValue* %v1360, align 16
  call void @load(i32 %r375, %SValue* %v1360)
  store i32 0, i32* %fc, align 4
  br label %cond_end359

cond_end359:                                      ; preds = %cond_jump_then358, %cond_else_block346
  %swapped377 = load i32, i32* %swapped, align 4
  %icmpA378 = icmp ne i32 %swapped377, 0
  br i1 %icmpA378, label %cond_jump_then379, label %cond_else_block380

cond_jump_then379:                                ; preds = %cond_end359
  call void @o(i32 8261619)
  call void @o(i32 200)
  %vtop382 = load %SValue*, %SValue** @vtop, align 8
  call void @load(i32 3, %SValue* %vtop382)
  %ft383 = load i32, i32* %ft, align 4
  %andtmp384 = and i32 %ft383, 15
  %eq385 = icmp eq i32 %andtmp384, 9
  br i1 %eq385, label %cond_jump_then386, label %cond_else_block387

cond_else_block380:                               ; preds = %cond_end359
  %ft391 = load i32, i32* %ft, align 4
  %andtmp392 = and i32 %ft391, 15
  %eq393 = icmp eq i32 %andtmp392, 9
  br i1 %eq393, label %cond_jump_then394, label %cond_else_block395

cond_end381:                                      ; preds = %cond_end396, %cond_end388
  br label %cond_end347

cond_jump_then386:                                ; preds = %cond_jump_then379
  call void @o(i32 242)
  br label %cond_end388

cond_else_block387:                               ; preds = %cond_jump_then379
  call void @o(i32 243)
  br label %cond_end388

cond_end388:                                      ; preds = %cond_else_block387, %cond_jump_then386
  call void @o(i32 15)
  %a389 = load i32, i32* %a, align 4
  %add390 = add i32 88, %a389
  call void @o(i32 %add390)
  call void @o(i32 193)
  br label %cond_end381

cond_jump_then394:                                ; preds = %cond_else_block380
  call void @o(i32 242)
  br label %cond_end396

cond_else_block395:                               ; preds = %cond_else_block380
  call void @o(i32 243)
  br label %cond_end396

cond_end396:                                      ; preds = %cond_else_block395, %cond_jump_then394
  call void @o(i32 15)
  %a397 = load i32, i32* %a, align 4
  %add398 = add i32 88, %a397
  call void @o(i32 %add398)
  %r399 = load i32, i32* %r, align 4
  %vtop400 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL401 = getelementptr inbounds %SValue, %SValue* %vtop400, i32 0, i32 4
  %sym402 = load %Sym*, %Sym** %fieldLLL401, align 8
  %fc403 = load i32, i32* %fc, align 4
  call void @gen_modrm(i32 0, i32 %r399, %Sym* %sym402, i32 %fc403)
  br label %cond_end381
}

define void @gen_cvt_itof(i32 %0) {
entry:
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %andtmp = and i32 %t2, 15
  %eq = icmp eq i32 %andtmp, 10
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  call void @save_reg(i32 4)
  %fun_result = call i32 @gv(i32 1)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t3 = load i32, i32* %fieldVVV, align 4
  %andtmp4 = and i32 %t3, 15
  %eq5 = icmp eq i32 %andtmp4, 12
  br i1 %eq5, label %cond_jump_then6, label %cond_jump_elif0

cond_else_block:                                  ; preds = %entry
  call void @save_reg(i32 3)
  %fun_result32 = call i32 @gv(i32 1)
  %t33 = load i32, i32* %t, align 4
  %andtmp34 = and i32 %t33, 15
  %eq35 = icmp eq i32 %andtmp34, 8
  %icastKX = zext i1 %eq35 to i32
  %add36 = add i32 242, %icastKX
  call void @o(i32 %add36)
  %vtop37 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL38 = getelementptr inbounds %SValue, %SValue* %vtop37, i32 0, i32 0
  %type39 = load %CType, %CType* %fieldLLL38, align 8
  %fieldVVV40 = getelementptr inbounds %CType, %CType* %fieldLLL38, i32 0, i32 0
  %t41 = load i32, i32* %fieldVVV40, align 4
  %andtmp42 = and i32 %t41, 31
  %eq43 = icmp eq i32 %andtmp42, 16
  store i1 %eq43, i1* %oror, align 1
  br i1 %eq43, label %cond_jump_end, label %cond_jump_then44

cond_end:                                         ; preds = %cond_end54, %cond_end8
  ret void

cond_jump_then6:                                  ; preds = %cond_jump_then
  %vtop9 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL10 = getelementptr inbounds %SValue, %SValue* %vtop9, i32 0, i32 1
  %r = load i16, i16* %fieldLLL10, align 2
  %icastKY = zext i16 %r to i32
  %andtmp11 = and i32 %icastKY, 255
  %add = add i32 80, %andtmp11
  call void @o(i32 %add)
  call void @o(i32 2370783)
  call void @o(i32 147096392)
  br label %cond_end8

cond_jump_elif0:                                  ; preds = %cond_jump_then
  %vtop12 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL13 = getelementptr inbounds %SValue, %SValue* %vtop12, i32 0, i32 0
  %type14 = load %CType, %CType* %fieldLLL13, align 8
  %fieldVVV15 = getelementptr inbounds %CType, %CType* %fieldLLL13, i32 0, i32 0
  %t16 = load i32, i32* %fieldVVV15, align 4
  %andtmp17 = and i32 %t16, 31
  %eq18 = icmp eq i32 %andtmp17, 16
  br i1 %eq18, label %cond_jump_elif_then0, label %cond_else_block7

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @o(i32 106)
  call void @g(i32 0)
  %vtop19 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL20 = getelementptr inbounds %SValue, %SValue* %vtop19, i32 0, i32 1
  %r21 = load i16, i16* %fieldLLL20, align 2
  %icastKY22 = zext i16 %r21 to i32
  %andtmp23 = and i32 %icastKY22, 255
  %add24 = add i32 80, %andtmp23
  call void @o(i32 %add24)
  call void @o(i32 2370783)
  call void @o(i32 281314120)
  br label %cond_end8

cond_else_block7:                                 ; preds = %cond_jump_elif0
  %vtop25 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL26 = getelementptr inbounds %SValue, %SValue* %vtop25, i32 0, i32 1
  %r27 = load i16, i16* %fieldLLL26, align 2
  %icastKY28 = zext i16 %r27 to i32
  %andtmp29 = and i32 %icastKY28, 255
  %add30 = add i32 80, %andtmp29
  call void @o(i32 %add30)
  call void @o(i32 2360539)
  call void @o(i32 147096392)
  br label %cond_end8

cond_end8:                                        ; preds = %cond_else_block7, %cond_jump_elif_then0, %cond_jump_then6
  %vtop31 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop31, i32 0, i32 1
  store i16 4, i16* %fieldTU, align 2
  br label %cond_end

cond_jump_then44:                                 ; preds = %cond_else_block
  %vtop45 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL46 = getelementptr inbounds %SValue, %SValue* %vtop45, i32 0, i32 0
  %type47 = load %CType, %CType* %fieldLLL46, align 8
  %fieldVVV48 = getelementptr inbounds %CType, %CType* %fieldLLL46, i32 0, i32 0
  %t49 = load i32, i32* %fieldVVV48, align 4
  %andtmp50 = and i32 %t49, 15
  %eq51 = icmp eq i32 %andtmp50, 12
  %oror52 = or i1 %eq43, %eq51
  store i1 %oror52, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then44, %cond_else_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then53, label %cond_end54

cond_jump_then53:                                 ; preds = %cond_jump_end
  call void @o(i32 72)
  br label %cond_end54

cond_end54:                                       ; preds = %cond_jump_then53, %cond_jump_end
  call void @o(i32 10767)
  %vtop55 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL56 = getelementptr inbounds %SValue, %SValue* %vtop55, i32 0, i32 1
  %r57 = load i16, i16* %fieldLLL56, align 2
  %icastKY58 = zext i16 %r57 to i32
  %andtmp59 = and i32 %icastKY58, 255
  %add60 = add i32 192, %andtmp59
  call void @o(i32 %add60)
  %vtop61 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU62 = getelementptr inbounds %SValue, %SValue* %vtop61, i32 0, i32 1
  store i16 3, i16* %fieldTU62, align 2
  br label %cond_end
}

define void @gen_cvt_ftof(i32 %0) {
entry:
  %tbt = alloca i32, align 4
  %bt = alloca i32, align 4
  %ft = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t2 = load i32, i32* %fieldVVV, align 4
  store i32 %t2, i32* %ft, align 4
  %ft3 = load i32, i32* %ft, align 4
  %andtmp = and i32 %ft3, 15
  store i32 %andtmp, i32* %bt, align 4
  %t4 = load i32, i32* %t, align 4
  %andtmp5 = and i32 %t4, 15
  store i32 %andtmp5, i32* %tbt, align 4
  %bt6 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt6, 8
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  %fun_result = call i32 @gv(i32 2)
  %tbt7 = load i32, i32* %tbt, align 4
  %eq8 = icmp eq i32 %tbt7, 9
  br i1 %eq8, label %cond_jump_then9, label %cond_jump_elif010

cond_jump_elif0:                                  ; preds = %entry
  %bt16 = load i32, i32* %bt, align 4
  %eq17 = icmp eq i32 %bt16, 9
  br i1 %eq17, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %fun_result18 = call i32 @gv(i32 2)
  %tbt19 = load i32, i32* %tbt, align 4
  %eq20 = icmp eq i32 %tbt19, 8
  br i1 %eq20, label %cond_jump_then21, label %cond_jump_elif022

cond_else_block:                                  ; preds = %cond_jump_elif0
  %fun_result29 = call i32 @gv(i32 64)
  %tbt30 = load i32, i32* %tbt, align 4
  %eq31 = icmp eq i32 %tbt30, 9
  br i1 %eq31, label %cond_jump_then32, label %cond_jump_elif033

cond_end:                                         ; preds = %cond_end35, %cond_end24, %cond_end12
  ret void

cond_jump_then9:                                  ; preds = %cond_jump_then
  call void @o(i32 12588047)
  call void @o(i32 12605967)
  br label %cond_end12

cond_jump_elif010:                                ; preds = %cond_jump_then
  %tbt13 = load i32, i32* %tbt, align 4
  %eq14 = icmp eq i32 %tbt13, 10
  br i1 %eq14, label %cond_jump_elif_then011, label %cond_end12

cond_jump_elif_then011:                           ; preds = %cond_jump_elif010
  call void @o(i32 1141968883)
  call void @o(i32 61476)
  call void @o(i32 -266058535)
  %vtop15 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop15, i32 0, i32 1
  store i16 4, i16* %fieldTU, align 2
  br label %cond_end12

cond_end12:                                       ; preds = %cond_jump_elif_then011, %cond_jump_elif010, %cond_jump_then9
  br label %cond_end

cond_jump_then21:                                 ; preds = %cond_jump_elif_then0
  call void @o(i32 -1072427162)
  call void @o(i32 -1067839642)
  br label %cond_end24

cond_jump_elif022:                                ; preds = %cond_jump_elif_then0
  %tbt25 = load i32, i32* %tbt, align 4
  %eq26 = icmp eq i32 %tbt25, 10
  br i1 %eq26, label %cond_jump_elif_then023, label %cond_end24

cond_jump_elif_then023:                           ; preds = %cond_jump_elif022
  call void @o(i32 1141968882)
  call void @o(i32 61476)
  call void @o(i32 -266058531)
  %vtop27 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU28 = getelementptr inbounds %SValue, %SValue* %vtop27, i32 0, i32 1
  store i16 4, i16* %fieldTU28, align 2
  br label %cond_end24

cond_end24:                                       ; preds = %cond_jump_elif_then023, %cond_jump_elif022, %cond_jump_then21
  br label %cond_end

cond_jump_then32:                                 ; preds = %cond_else_block
  call void @o(i32 -266052387)
  call void @o(i32 1141903346)
  call void @o(i32 61476)
  %vtop36 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU37 = getelementptr inbounds %SValue, %SValue* %vtop36, i32 0, i32 1
  store i16 3, i16* %fieldTU37, align 2
  br label %cond_end35

cond_jump_elif033:                                ; preds = %cond_else_block
  %tbt38 = load i32, i32* %tbt, align 4
  %eq39 = icmp eq i32 %tbt38, 8
  br i1 %eq39, label %cond_jump_elif_then034, label %cond_end35

cond_jump_elif_then034:                           ; preds = %cond_jump_elif033
  call void @o(i32 -266052391)
  call void @o(i32 1141903347)
  call void @o(i32 61476)
  %vtop40 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU41 = getelementptr inbounds %SValue, %SValue* %vtop40, i32 0, i32 1
  store i16 3, i16* %fieldTU41, align 2
  br label %cond_end35

cond_end35:                                       ; preds = %cond_jump_elif_then034, %cond_jump_elif033, %cond_jump_then32
  br label %cond_end
}

define void @gen_cvt_ftoi(i32 %0) {
entry:
  %r = alloca i32, align 4
  %size = alloca i32, align 4
  %bt = alloca i32, align 4
  %ft = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t2 = load i32, i32* %fieldVVV, align 4
  store i32 %t2, i32* %ft, align 4
  %ft3 = load i32, i32* %ft, align 4
  %andtmp = and i32 %ft3, 15
  store i32 %andtmp, i32* %bt, align 4
  %bt4 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt4, 10
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @gen_cvt_ftof(i32 9)
  store i32 9, i32* %bt, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %fun_result = call i32 @gv(i32 2)
  %t5 = load i32, i32* %t, align 4
  %not_eq = icmp ne i32 %t5, 0
  br i1 %not_eq, label %cond_jump_then6, label %cond_else_block

cond_jump_then6:                                  ; preds = %cond_end
  store i32 8, i32* %size, align 4
  br label %cond_end7

cond_else_block:                                  ; preds = %cond_end
  store i32 4, i32* %size, align 4
  br label %cond_end7

cond_end7:                                        ; preds = %cond_else_block, %cond_jump_then6
  %fun_result8 = call i32 @get_reg(i32 1)
  store i32 %fun_result8, i32* %r, align 4
  %bt9 = load i32, i32* %bt, align 4
  %eq10 = icmp eq i32 %bt9, 8
  br i1 %eq10, label %cond_jump_then11, label %cond_jump_elif0

cond_jump_then11:                                 ; preds = %cond_end7
  call void @o(i32 243)
  br label %cond_end13

cond_jump_elif0:                                  ; preds = %cond_end7
  %bt14 = load i32, i32* %bt, align 4
  %eq15 = icmp eq i32 %bt14, 9
  br i1 %eq15, label %cond_jump_elif_then0, label %cond_else_block12

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @o(i32 242)
  br label %cond_end13

cond_else_block12:                                ; preds = %cond_jump_elif0
  call void @__assert_fail(i8* bitcast ([2 x i8]* @6 to i8*), i8* bitcast ([13 x i8]* @7 to i8*), i32 1401, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @gen_cvt_ftoi.5, i32 0, i32 0))
  br label %cond_end13

cond_end13:                                       ; preds = %cond_else_block12, %cond_jump_elif_then0, %cond_jump_then11
  %size16 = load i32, i32* %size, align 4
  %eq17 = icmp eq i32 %size16, 8
  br i1 %eq17, label %cond_jump_then18, label %cond_end19

cond_jump_then18:                                 ; preds = %cond_end13
  %r20 = load i32, i32* %r, align 4
  %rshifttmp = lshr i32 %r20, 3
  %andtmp21 = and i32 %rshifttmp, 1
  %add = add i32 72, %andtmp21
  call void @o(i32 %add)
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_end13
  call void @o(i32 11279)
  %r22 = load i32, i32* %r, align 4
  %andtmp23 = and i32 %r22, 7
  %lshifttmp = shl i32 %andtmp23, 3
  %add24 = add i32 192, %lshifttmp
  call void @o(i32 %add24)
  %vtop25 = load %SValue*, %SValue** @vtop, align 8
  %r26 = load i32, i32* %r, align 4
  %icastG = trunc i32 %r26 to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop25, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU, align 2
  ret void
}

define void @ggoto() {
entry:
  call void @gcall_or_jmp(i32 1)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  ret void
}

declare void @_dl_mcount_wrapper_check(i8*)

declare i8* @dlopen(i8*, i32)

declare i32 @dlclose(i8*)

declare i8* @dlsym(i8*, i8*)

declare i8* @dlmopen(i64, i8*, i32)

declare i8* @dlvsym(i8*, i8*, i8*)

declare i8* @dlerror()

declare i32 @dladdr(i8*, %come_anon126*)

declare i32 @dladdr1(i8*, %come_anon126*, i8**, i32)

declare i32 @dlinfo(i8*, i32, i8*)

define void @set_pages_executable(i8* %0, i64 %1) {
entry:
  %end = alloca i64, align 8
  %start = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %ptr1 = alloca i8**, align 8
  store i8* %0, i8** %ptr, align 8
  store i8** %ptr, i8*** %ptr1, align 8
  %length = alloca i64, align 8
  %length2 = alloca i64*, align 8
  store i64 %1, i64* %length, align 4
  store i64* %length, i64** %length2, align 8
  %ptr3 = load i8*, i8** %ptr, align 8
  %icatXXXXXX = ptrtoint i8* %ptr3 to i64
  %andtmp = and i64 %icatXXXXXX, -4096
  store i64 %andtmp, i64* %start, align 4
  %ptr4 = load i8*, i8** %ptr, align 8
  %icatXXXXXX5 = ptrtoint i8* %ptr4 to i64
  %length6 = load i64, i64* %length, align 4
  %add = add i64 %icatXXXXXX5, %length6
  store i64 %add, i64* %end, align 4
  %end7 = load i64, i64* %end, align 4
  %add8 = add i64 %end7, 4096
  %sub = sub i64 %add8, 1
  %andtmp9 = and i64 %sub, -4096
  store i64 %andtmp9, i64* %end, align 4
  %start10 = load i64, i64* %start, align 4
  %castBA = inttoptr i64 %start10 to i8*
  %end11 = load i64, i64* %end, align 4
  %start12 = load i64, i64* %start, align 4
  %sub13 = sub i64 %end11, %start12
  %fun_result = call i32 @mprotect(i8* %castBA, i64 %sub13, i32 7)
  ret void
}

define internal %Sym* @__sym_malloc() {
entry:
  %i = alloca i32, align 4
  %last_sym = alloca %Sym*, align 8
  %sym = alloca %Sym*, align 8
  %sym_pool = alloca %Sym*, align 8
  %fun_result = call i8* @tcc_malloc(i64 8192)
  %castAQ = bitcast i8* %fun_result to %Sym*
  store %Sym* %castAQ, %Sym** %sym_pool, align 8
  %sym_pools = load i8**, i8*** @sym_pools, align 8
  %nb_sym_pools = load i32, i32* @nb_sym_pools, align 4
  %sym_pool1 = load %Sym*, %Sym** %sym_pool, align 8
  %castAQ2 = bitcast %Sym* %sym_pool1 to i8*
  call void @dynarray_add(i8*** @sym_pools, i32* @nb_sym_pools, i8* %castAQ2)
  %sym_free_first = load %Sym*, %Sym** @sym_free_first, align 8
  store %Sym* %sym_free_first, %Sym** %last_sym, align 8
  %sym_pool3 = load %Sym*, %Sym** %sym_pool, align 8
  store %Sym* %sym_pool3, %Sym** %sym, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i10 = load i32, i32* %i, align 4
  %add11 = add i32 %i10, 1
  store i32 %add11, i32* %i, align 4
  %i12 = load i32, i32* %i, align 4
  %sub13 = sub i32 %i12, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i4 = load i32, i32* %i, align 4
  %le = icmp slt i32 %i4, 128
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %last_sym6 = load %Sym*, %Sym** %last_sym, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %sym5, i32 0, i32 4
  store %Sym* %last_sym6, %Sym** %fieldTU, align 8
  %sym7 = load %Sym*, %Sym** %sym, align 8
  store %Sym* %sym7, %Sym** %last_sym, align 8
  %sym8 = load %Sym*, %Sym** %sym, align 8
  %ptrToIntC = ptrtoint %Sym* %sym8 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %Sym*
  store %Sym* %intToPtrB, %Sym** %sym, align 8
  %sym9 = load %Sym*, %Sym** %sym, align 8
  %ptrToIntI = ptrtoint %Sym* %sym9 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %Sym*
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %last_sym14 = load %Sym*, %Sym** %last_sym, align 8
  store %Sym* %last_sym14, %Sym** @sym_free_first, align 8
  %last_sym15 = load %Sym*, %Sym** %last_sym, align 8
  ret %Sym* %last_sym15
}

define %Section* @new_section(%TCCState* %0, i8* %1, i32 %2, i32 %3) {
entry:
  %sec = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  %sh_type = alloca i32, align 4
  %sh_type3 = alloca i32*, align 8
  store i32 %2, i32* %sh_type, align 4
  store i32* %sh_type, i32** %sh_type3, align 8
  %sh_flags = alloca i32, align 4
  %sh_flags4 = alloca i32*, align 8
  store i32 %3, i32* %sh_flags, align 4
  store i32* %sh_flags, i32** %sh_flags4, align 8
  %name5 = load i8*, i8** %name, align 8
  %fun_result = call i64 @strlen(i8* %name5)
  %add = add i64 120, %fun_result
  %fun_result6 = call i8* @tcc_mallocz(i64 %add)
  %castAQ = bitcast i8* %fun_result6 to %Section*
  store %Section* %castAQ, %Section** %sec, align 8
  %sec7 = load %Section*, %Section** %sec, align 8
  %fieldRRRROOU = getelementptr inbounds %Section, %Section* %sec7, i32 0, i32 18
  %autocast = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %name8 = load i8*, i8** %name, align 8
  %fun_result9 = call i8* @strcpy(i8* %autocast, i8* %name8)
  %sec10 = load %Section*, %Section** %sec, align 8
  %sh_type11 = load i32, i32* %sh_type, align 4
  %fieldTU = getelementptr inbounds %Section, %Section* %sec10, i32 0, i32 5
  store i32 %sh_type11, i32* %fieldTU, align 4
  %sec12 = load %Section*, %Section** %sec, align 8
  %sh_flags13 = load i32, i32* %sh_flags, align 4
  %fieldTU14 = getelementptr inbounds %Section, %Section* %sec12, i32 0, i32 6
  store i32 %sh_flags13, i32* %fieldTU14, align 4
  %sh_type15 = load i32, i32* %sh_type, align 4
  %eqtmp = icmp eq i32 %sh_type15, 5
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX16

end_blockX:                                       ; preds = %cond_else_blockX35, %cond_then_block34, %cond_then_block28, %cond_then_block
  %sh_flags39 = load i32, i32* %sh_flags, align 4
  %andtmp = and i32 %sh_flags39, -2147483648
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_then_block:                                  ; preds = %cond_else_blockX22, %cond_else_blockX20, %cond_else_blockX18, %cond_else_blockX16, %cond_else_blockX, %entry
  %sec26 = load %Section*, %Section** %sec, align 8
  %fieldTU27 = getelementptr inbounds %Section, %Section* %sec26, i32 0, i32 8
  store i32 4, i32* %fieldTU27, align 4
  br label %end_blockX

cond_else_blockX:                                 ; preds = %entry
  %eqtmp17 = icmp eq i32 %sh_type15, 9
  br i1 %eqtmp17, label %cond_then_block, label %cond_else_blockX16
  br label %cond_else_blockX18

cond_else_blockX16:                               ; preds = %cond_else_blockX, %entry
  %eqtmp19 = icmp eq i32 %sh_type15, 4
  br i1 %eqtmp19, label %cond_then_block, label %cond_else_blockX18
  br label %cond_else_blockX20

cond_else_blockX18:                               ; preds = %cond_else_blockX16, %cond_else_blockX
  %eqtmp21 = icmp eq i32 %sh_type15, 11
  br i1 %eqtmp21, label %cond_then_block, label %cond_else_blockX20
  br label %cond_else_blockX22

cond_else_blockX20:                               ; preds = %cond_else_blockX18, %cond_else_blockX16
  %eqtmp23 = icmp eq i32 %sh_type15, 2
  br i1 %eqtmp23, label %cond_then_block, label %cond_else_blockX22
  br label %cond_else_blockX24

cond_else_blockX22:                               ; preds = %cond_else_blockX20, %cond_else_blockX18
  %eqtmp25 = icmp eq i32 %sh_type15, 6
  br i1 %eqtmp25, label %cond_then_block, label %cond_else_blockX24

cond_else_blockX24:                               ; preds = %after_break, %cond_else_blockX22, %cond_else_blockX20
  %eqtmp30 = icmp eq i32 %sh_type15, 3
  br i1 %eqtmp30, label %cond_then_block28, label %cond_else_blockX29

after_break:                                      ; No predecessors!
  br label %cond_else_blockX24
  br label %cond_else_blockX29

cond_then_block28:                                ; preds = %cond_else_blockX24
  %sec31 = load %Section*, %Section** %sec, align 8
  %fieldTU32 = getelementptr inbounds %Section, %Section* %sec31, i32 0, i32 8
  store i32 1, i32* %fieldTU32, align 4
  br label %end_blockX

cond_else_blockX29:                               ; preds = %after_break33, %cond_else_blockX24, %after_break
  br label %cond_then_block34

after_break33:                                    ; No predecessors!
  br label %cond_else_blockX29
  br label %cond_else_blockX35

cond_then_block34:                                ; preds = %cond_else_blockX29
  %sec36 = load %Section*, %Section** %sec, align 8
  %fieldTU37 = getelementptr inbounds %Section, %Section* %sec36, i32 0, i32 8
  store i32 32, i32* %fieldTU37, align 4
  br label %end_blockX

cond_else_blockX35:                               ; preds = %after_break38, %after_break33
  br label %end_blockX

after_break38:                                    ; No predecessors!
  br label %cond_else_blockX35

cond_jump_then:                                   ; preds = %end_blockX
  %s140 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s140, i32 0, i32 15
  %priv_sections = load %Section**, %Section*** %fieldLLL, align 8
  %castAQ41 = bitcast %Section*** %fieldLLL to i8***
  %s142 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL43 = getelementptr inbounds %TCCState, %TCCState* %s142, i32 0, i32 16
  %nb_priv_sections = load i32, i32* %fieldLLL43, align 4
  %sec44 = load %Section*, %Section** %sec, align 8
  %castAQ45 = bitcast %Section* %sec44 to i8*
  call void @dynarray_add(i8*** %castAQ41, i32* %fieldLLL43, i8* %castAQ45)
  br label %cond_end

cond_else_block:                                  ; preds = %end_blockX
  %sec46 = load %Section*, %Section** %sec, align 8
  %s147 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL48 = getelementptr inbounds %TCCState, %TCCState* %s147, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL48, align 4
  %fieldTU49 = getelementptr inbounds %Section, %Section* %sec46, i32 0, i32 4
  store i32 %nb_sections, i32* %fieldTU49, align 4
  %s150 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL51 = getelementptr inbounds %TCCState, %TCCState* %s150, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL51, align 8
  %castAQ52 = bitcast %Section*** %fieldLLL51 to i8***
  %s153 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL54 = getelementptr inbounds %TCCState, %TCCState* %s153, i32 0, i32 14
  %nb_sections55 = load i32, i32* %fieldLLL54, align 4
  %sec56 = load %Section*, %Section** %sec, align 8
  %castAQ57 = bitcast %Section* %sec56 to i8*
  call void @dynarray_add(i8*** %castAQ52, i32* %fieldLLL54, i8* %castAQ57)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %sec58 = load %Section*, %Section** %sec, align 8
  ret %Section* %sec58
}

define internal void @free_section(%Section* %0) {
entry:
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %s2 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s2, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  call void @tcc_free(i8* %data)
  ret void
}

define %Section* @find_section(%TCCState* %0, i8* %1) {
entry:
  %i = alloca i32, align 4
  %sec = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %i11 = load i32, i32* %i, align 4
  %add = add i32 %i11, 1
  store i32 %add, i32* %i, align 4
  %i12 = load i32, i32* %i, align 4
  %sub = sub i32 %i12, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i3 = load i32, i32* %i, align 4
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL, align 4
  %le = icmp slt i32 %i3, %nb_sections
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL6 = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL6, align 8
  %i7 = load i32, i32* %i, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL6, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %i7
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  store %Section* %load_element, %Section** %sec, align 8
  %name8 = load i8*, i8** %name, align 8
  %sec9 = load %Section*, %Section** %sec, align 8
  %fieldRRRROOU = getelementptr inbounds %Section, %Section* %sec9, i32 0, i32 18
  %autocast = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %fun_result = call i32 @strcmp(i8* %name8, i8* %autocast)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %s113 = load %TCCState*, %TCCState** %s1, align 8
  %name14 = load i8*, i8** %name, align 8
  %fun_result15 = call %Section* @new_section(%TCCState* %s113, i8* %name14, i32 1, i32 2)
  ret %Section* %fun_result15

cond_jump_then:                                   ; preds = %cond_then_block
  %sec10 = load %Section*, %Section** %sec, align 8
  ret %Section* %sec10

cond_end:                                         ; preds = %cond_then_block
  br label %loop_continue_top_block
}

define internal void @put_extern_sym2(%Sym* %0, %Section* %1, i64 %2, i64 %3, i32 %4) {
entry:
  %andand = alloca i1, align 1
  %buf1 = alloca [256 x i8], align 1
  %name = alloca i8*, align 8
  %esym = alloca %come_anon88*, align 8
  %attr = alloca i32, align 4
  %other = alloca i32, align 4
  %info = alloca i32, align 4
  %sh_num = alloca i32, align 4
  %sym_bind = alloca i32, align 4
  %sym_type = alloca i32, align 4
  %sym = alloca %Sym*, align 8
  %sym1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym1, align 8
  %section = alloca %Section*, align 8
  %section2 = alloca %Section**, align 8
  store %Section* %1, %Section** %section, align 8
  store %Section** %section, %Section*** %section2, align 8
  %value = alloca i64, align 8
  %value3 = alloca i64*, align 8
  store i64 %2, i64* %value, align 4
  store i64* %value, i64** %value3, align 8
  %size = alloca i64, align 8
  %size4 = alloca i64*, align 8
  store i64 %3, i64* %size, align 4
  store i64* %size, i64** %size4, align 8
  %can_add_underscore = alloca i32, align 4
  %can_add_underscore5 = alloca i32*, align 8
  store i32 %4, i32* %can_add_underscore, align 4
  store i32* %can_add_underscore, i32** %can_add_underscore5, align 8
  %section6 = load %Section*, %Section** %section, align 8
  %eq = icmp eq %Section* %section6, null
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  store i32 0, i32* %sh_num, align 4
  br label %cond_end

cond_jump_elif0:                                  ; preds = %entry
  %section7 = load %Section*, %Section** %section, align 8
  %eq8 = icmp eq %Section* %section7, inttoptr (i32 1 to %Section*)
  br i1 %eq8, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  store i32 65521, i32* %sh_num, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %cond_jump_elif0
  %section9 = load %Section*, %Section** %section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %section9, i32 0, i32 4
  %sh_num10 = load i32, i32* %fieldLLL, align 4
  store i32 %sh_num10, i32* %sh_num, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_elif_then0, %cond_jump_then
  store i32 0, i32* %attr, align 4
  store i32 0, i32* %other, align 4
  %sym11 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL12 = getelementptr inbounds %Sym, %Sym* %sym11, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL12, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL12, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eq13 = icmp eq i32 %andtmp, 6
  br i1 %eq13, label %cond_jump_then14, label %cond_else_block15

cond_jump_then14:                                 ; preds = %cond_end
  store i32 2, i32* %sym_type, align 4
  br label %cond_end16

cond_else_block15:                                ; preds = %cond_end
  store i32 1, i32* %sym_type, align 4
  br label %cond_end16

cond_end16:                                       ; preds = %cond_else_block15, %cond_jump_then14
  %sym17 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL18 = getelementptr inbounds %Sym, %Sym* %sym17, i32 0, i32 3
  %type19 = load %CType, %CType* %fieldLLL18, align 8
  %fieldVVV20 = getelementptr inbounds %CType, %CType* %fieldLLL18, i32 0, i32 0
  %t21 = load i32, i32* %fieldVVV20, align 4
  %andtmp22 = and i32 %t21, 256
  %icmpA = icmp ne i32 %andtmp22, 0
  br i1 %icmpA, label %cond_jump_then23, label %cond_else_block24

cond_jump_then23:                                 ; preds = %cond_end16
  store i32 0, i32* %sym_bind, align 4
  br label %cond_end25

cond_else_block24:                                ; preds = %cond_end16
  store i32 1, i32* %sym_bind, align 4
  br label %cond_end25

cond_end25:                                       ; preds = %cond_else_block24, %cond_jump_then23
  %sym26 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL27 = getelementptr inbounds %Sym, %Sym* %sym26, i32 0, i32 2
  %c = load i64, i64* %fieldLLL27, align 4
  %logical_denial = icmp eq i64 %c, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA28 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA28, label %cond_jump_then29, label %cond_else_block30

cond_jump_then29:                                 ; preds = %cond_end25
  %sym32 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL33 = getelementptr inbounds %Sym, %Sym* %sym32, i32 0, i32 0
  %v = load i32, i32* %fieldLLL33, align 4
  %fun_result = call i8* @get_tok_str(i32 %v, %CValue* null)
  store i8* %fun_result, i8** %name, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL34 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 35
  %leading_underscore = load i32, i32* %fieldLLL34, align 4
  %icmpA35 = icmp ne i32 %leading_underscore, 0
  store i1 %icmpA35, i1* %andand, align 1
  br i1 %icmpA35, label %cond_jump_then36, label %cond_jump_end

cond_else_block30:                                ; preds = %cond_end25
  %symtab_section57 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL58 = getelementptr inbounds %Section, %Section* %symtab_section57, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL58, align 8
  %castAQ = bitcast i8* %data to %come_anon88*
  %sym59 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL60 = getelementptr inbounds %Sym, %Sym* %sym59, i32 0, i32 2
  %c61 = load i64, i64* %fieldLLL60, align 4
  %icastM = trunc i64 %c61 to i32
  %castXYXXYXYXY = bitcast i8** %fieldLLL58 to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %icastM
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %esym, align 8
  %esym62 = load %come_anon88*, %come_anon88** %esym, align 8
  %value63 = load i64, i64* %value, align 4
  %fieldTU64 = getelementptr inbounds %come_anon88, %come_anon88* %esym62, i32 0, i32 4
  store i64 %value63, i64* %fieldTU64, align 4
  %esym65 = load %come_anon88*, %come_anon88** %esym, align 8
  %size66 = load i64, i64* %size, align 4
  %fieldTU67 = getelementptr inbounds %come_anon88, %come_anon88* %esym65, i32 0, i32 5
  store i64 %size66, i64* %fieldTU67, align 4
  %esym68 = load %come_anon88*, %come_anon88** %esym, align 8
  %sh_num69 = load i32, i32* %sh_num, align 4
  %icastG = trunc i32 %sh_num69 to i16
  %fieldTU70 = getelementptr inbounds %come_anon88, %come_anon88* %esym68, i32 0, i32 3
  store i16 %icastG, i16* %fieldTU70, align 2
  %esym71 = load %come_anon88*, %come_anon88** %esym, align 8
  %esym72 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL73 = getelementptr inbounds %come_anon88, %come_anon88* %esym72, i32 0, i32 2
  %st_other = load i8, i8* %fieldLLL73, align 1
  %other74 = load i32, i32* %other, align 4
  %icastKY = zext i8 %st_other to i32
  %ortmp = or i32 %icastKY, %other74
  %icastJ = trunc i32 %ortmp to i8
  %fieldTU75 = getelementptr inbounds %come_anon88, %come_anon88* %esym71, i32 0, i32 2
  store i8 %icastJ, i8* %fieldTU75, align 1
  br label %cond_end31

cond_end31:                                       ; preds = %cond_else_block30, %cond_end41
  ret void

cond_jump_then36:                                 ; preds = %cond_jump_then29
  %can_add_underscore37 = load i32, i32* %can_add_underscore, align 4
  %icmpA38 = icmp ne i32 %can_add_underscore37, 0
  %andand39 = and i1 %icmpA35, %icmpA38
  store i1 %andand39, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then36, %cond_jump_then29
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then40, label %cond_end41

cond_jump_then40:                                 ; preds = %cond_jump_end
  %array_castA = bitcast [256 x i8]* %buf1 to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 95, i8* %gepBX, align 1
  %autocast = bitcast [256 x i8]* %buf1 to i8*
  %ptrToIntC = ptrtoint i8* %autocast to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  %name42 = load i8*, i8** %name, align 8
  %fun_result43 = call i8* @pstrcpy(i8* %intToPtrB, i32 255, i8* %name42)
  %autocast44 = bitcast [256 x i8]* %buf1 to i8*
  store i8* %autocast44, i8** %name, align 8
  br label %cond_end41

cond_end41:                                       ; preds = %cond_jump_then40, %cond_jump_end
  %sym_bind45 = load i32, i32* %sym_bind, align 4
  %lshifttmp = shl i32 %sym_bind45, 4
  %sym_type46 = load i32, i32* %sym_type, align 4
  %andtmp47 = and i32 %sym_type46, 15
  %add48 = add i32 %lshifttmp, %andtmp47
  store i32 %add48, i32* %info, align 4
  %sym49 = load %Sym*, %Sym** %sym, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %value50 = load i64, i64* %value, align 4
  %size51 = load i64, i64* %size, align 4
  %info52 = load i32, i32* %info, align 4
  %other53 = load i32, i32* %other, align 4
  %sh_num54 = load i32, i32* %sh_num, align 4
  %name55 = load i8*, i8** %name, align 8
  %fun_result56 = call i32 @add_elf_sym(%Section* %symtab_section, i64 %value50, i64 %size51, i32 %info52, i32 %other53, i32 %sh_num54, i8* %name55)
  %icastD = sext i32 %fun_result56 to i64
  %fieldTU = getelementptr inbounds %Sym, %Sym* %sym49, i32 0, i32 2
  store i64 %icastD, i64* %fieldTU, align 4
  br label %cond_end31
}

define internal void @strcat_vprintf(i8* %0, i32 %1, i8* %2, %__builtin_va_list* %3) {
entry:
  %len = alloca i32, align 4
  %buf = alloca i8*, align 8
  %buf1 = alloca i8**, align 8
  store i8* %0, i8** %buf, align 8
  store i8** %buf, i8*** %buf1, align 8
  %buf_size = alloca i32, align 4
  %buf_size2 = alloca i32*, align 8
  store i32 %1, i32* %buf_size, align 4
  store i32* %buf_size, i32** %buf_size2, align 8
  %fmt = alloca i8*, align 8
  %fmt3 = alloca i8**, align 8
  store i8* %2, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt3, align 8
  %ap = alloca %__builtin_va_list*, align 8
  %ap4 = alloca %__builtin_va_list**, align 8
  store %__builtin_va_list* %3, %__builtin_va_list** %ap, align 8
  store %__builtin_va_list** %ap, %__builtin_va_list*** %ap4, align 8
  %buf5 = load i8*, i8** %buf, align 8
  %fun_result = call i64 @strlen(i8* %buf5)
  %icastM = trunc i64 %fun_result to i32
  store i32 %icastM, i32* %len, align 4
  %buf6 = load i8*, i8** %buf, align 8
  %len7 = load i32, i32* %len, align 4
  %ptrToIntC = ptrtoint i8* %buf6 to i64
  %sext = sext i32 %len7 to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %buf_size8 = load i32, i32* %buf_size, align 4
  %len9 = load i32, i32* %len, align 4
  %sub = sub i32 %buf_size8, %len9
  %icastD = sext i32 %sub to i64
  %fmt10 = load i8*, i8** %fmt, align 8
  %ap11 = load %__builtin_va_list*, %__builtin_va_list** %ap, align 8
  %fun_result12 = call i32 @vsnprintf(i8* %intToPtrB, i64 %icastD, i8* %fmt10, %__builtin_va_list* %ap11)
  ret void
}

define internal void @strcat_printf(i8* %0, i32 %1, i8* %2, ...) {
entry:
  %ap = alloca [1 x %__builtin_va_list], align 8
  %buf = alloca i8*, align 8
  %buf1 = alloca i8**, align 8
  store i8* %0, i8** %buf, align 8
  store i8** %buf, i8*** %buf1, align 8
  %buf_size = alloca i32, align 4
  %buf_size2 = alloca i32*, align 8
  store i32 %1, i32* %buf_size, align 4
  store i32* %buf_size, i32** %buf_size2, align 8
  %fmt = alloca i8*, align 8
  %fmt3 = alloca i8**, align 8
  store i8* %2, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt3, align 8
  %gepOOOOO = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN = bitcast %__builtin_va_list* %gepOOOOO to i8*
  %fmt4 = load i8*, i8** %fmt, align 8
  call void @llvm.va_start(i8* %castAN)
  %buf5 = load i8*, i8** %buf, align 8
  %buf_size6 = load i32, i32* %buf_size, align 4
  %fmt7 = load i8*, i8** %fmt, align 8
  %gepOOOOO8 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  call void @strcat_vprintf(i8* %buf5, i32 %buf_size6, i8* %fmt7, %__builtin_va_list* %gepOOOOO8)
  %gepOOOOO9 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN10 = bitcast %__builtin_va_list* %gepOOOOO9 to i8*
  call void @llvm.va_end(i8* %castAN10)
  ret void
}

define void @error1(%TCCState* %0, i32 %1, i8* %2, %__builtin_va_list* %3) {
entry:
  %oror = alloca i1, align 1
  %f = alloca %BufferedFile**, align 8
  %buf = alloca [2048 x i8], align 1
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %is_warning = alloca i32, align 4
  %is_warning2 = alloca i32*, align 8
  store i32 %1, i32* %is_warning, align 4
  store i32* %is_warning, i32** %is_warning2, align 8
  %fmt = alloca i8*, align 8
  %fmt3 = alloca i8**, align 8
  store i8* %2, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt3, align 8
  %ap = alloca %__builtin_va_list*, align 8
  %ap4 = alloca %__builtin_va_list**, align 8
  store %__builtin_va_list* %3, %__builtin_va_list** %ap, align 8
  store %__builtin_va_list** %ap, %__builtin_va_list*** %ap4, align 8
  %array_castA = bitcast [2048 x i8]* %buf to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 0, i8* %gepBX, align 1
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %icmpB = icmp ne %BufferedFile* %file, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 51
  %autocast = bitcast [32 x %BufferedFile*]* %fieldRRRROOU to %BufferedFile**
  store %BufferedFile** %autocast, %BufferedFile*** %f, align 8
  br label %loop_top_block

cond_else_block:                                  ; preds = %entry
  %autocast34 = bitcast [2048 x i8]* %buf to i8*
  call void (i8*, i32, i8*, ...) @strcat_printf(i8* %autocast34, i32 2048, i8* bitcast ([6 x i8]* @14 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end22
  %is_warning35 = load i32, i32* %is_warning, align 4
  %icmpA = icmp ne i32 %is_warning35, 0
  br i1 %icmpA, label %cond_jump_then36, label %cond_end37

loop_continue_top_block:                          ; preds = %cond_then_block
  %f15 = load %BufferedFile**, %BufferedFile*** %f, align 8
  %ptrToIntC = ptrtoint %BufferedFile** %f15 to i64
  %add = add i64 %ptrToIntC, 8
  %intToPtrB = inttoptr i64 %add to %BufferedFile**
  store %BufferedFile** %intToPtrB, %BufferedFile*** %f, align 8
  %f16 = load %BufferedFile**, %BufferedFile*** %f, align 8
  %ptrToIntI = ptrtoint %BufferedFile** %f16 to i64
  %sub = sub i64 %ptrToIntI, 8
  %iintToPtrD = inttoptr i64 %sub to %BufferedFile**
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then
  %f6 = load %BufferedFile**, %BufferedFile*** %f, align 8
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s17, i32 0, i32 1
  %include_stack_ptr = load %BufferedFile**, %BufferedFile*** %fieldLLL, align 8
  %le = icmp slt %BufferedFile** %f6, %include_stack_ptr
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %autocast8 = bitcast [2048 x i8]* %buf to i8*
  %f9 = load %BufferedFile**, %BufferedFile*** %f, align 8
  %derefference_valueB = load %BufferedFile*, %BufferedFile** %f9, align 8
  %fieldRRRROOU10 = getelementptr inbounds %BufferedFile, %BufferedFile* %derefference_valueB, i32 0, i32 9
  %autocast11 = bitcast [1024 x i8]* %fieldRRRROOU10 to i8*
  %f12 = load %BufferedFile**, %BufferedFile*** %f, align 8
  %derefference_valueB13 = load %BufferedFile*, %BufferedFile** %f12, align 8
  %fieldLLL14 = getelementptr inbounds %BufferedFile, %BufferedFile* %derefference_valueB13, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL14, align 4
  call void (i8*, i32, i8*, ...) @strcat_printf(i8* %autocast8, i32 2048, i8* bitcast ([30 x i8]* @11 to i8*), i8* %autocast11, i32 %line_num)
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %file17 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL18 = getelementptr inbounds %BufferedFile, %BufferedFile* %file17, i32 0, i32 3
  %line_num19 = load i32, i32* %fieldLLL18, align 4
  %gt = icmp sgt i32 %line_num19, 0
  br i1 %gt, label %cond_jump_then20, label %cond_else_block21

cond_jump_then20:                                 ; preds = %cond_end_block
  %autocast23 = bitcast [2048 x i8]* %buf to i8*
  %file24 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU25 = getelementptr inbounds %BufferedFile, %BufferedFile* %file24, i32 0, i32 9
  %autocast26 = bitcast [1024 x i8]* %fieldRRRROOU25 to i8*
  %file27 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL28 = getelementptr inbounds %BufferedFile, %BufferedFile* %file27, i32 0, i32 3
  %line_num29 = load i32, i32* %fieldLLL28, align 4
  call void (i8*, i32, i8*, ...) @strcat_printf(i8* %autocast23, i32 2048, i8* bitcast ([8 x i8]* @12 to i8*), i8* %autocast26, i32 %line_num29)
  br label %cond_end22

cond_else_block21:                                ; preds = %cond_end_block
  %autocast30 = bitcast [2048 x i8]* %buf to i8*
  %file31 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU32 = getelementptr inbounds %BufferedFile, %BufferedFile* %file31, i32 0, i32 9
  %autocast33 = bitcast [1024 x i8]* %fieldRRRROOU32 to i8*
  call void (i8*, i32, i8*, ...) @strcat_printf(i8* %autocast30, i32 2048, i8* bitcast ([5 x i8]* @13 to i8*), i8* %autocast33)
  br label %cond_end22

cond_end22:                                       ; preds = %cond_else_block21, %cond_jump_then20
  br label %cond_end

cond_jump_then36:                                 ; preds = %cond_end
  %autocast38 = bitcast [2048 x i8]* %buf to i8*
  call void (i8*, i32, i8*, ...) @strcat_printf(i8* %autocast38, i32 2048, i8* bitcast ([10 x i8]* @15 to i8*))
  br label %cond_end37

cond_end37:                                       ; preds = %cond_jump_then36, %cond_end
  %autocast39 = bitcast [2048 x i8]* %buf to i8*
  %fmt40 = load i8*, i8** %fmt, align 8
  %ap41 = load %__builtin_va_list*, %__builtin_va_list** %ap, align 8
  call void @strcat_vprintf(i8* %autocast39, i32 2048, i8* %fmt40, %__builtin_va_list* %ap41)
  %s142 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL43 = getelementptr inbounds %TCCState, %TCCState* %s142, i32 0, i32 46
  %error_func = load void (i8*, i8*)*, void (i8*, i8*)** %fieldLLL43, align 8
  %logical_denial = icmp eq void (i8*, i8*)* %error_func, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA44 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA44, label %cond_jump_then45, label %cond_else_block46

cond_jump_then45:                                 ; preds = %cond_end37
  %stderr = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %autocast48 = bitcast [2048 x i8]* %buf to i8*
  %fun_result = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr, i8* bitcast ([4 x i8]* @16 to i8*), i8* %autocast48)
  br label %cond_end47

cond_else_block46:                                ; preds = %cond_end37
  %s149 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL50 = getelementptr inbounds %TCCState, %TCCState* %s149, i32 0, i32 46
  %error_func51 = load void (i8*, i8*)*, void (i8*, i8*)** %fieldLLL50, align 8
  %s152 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL53 = getelementptr inbounds %TCCState, %TCCState* %s152, i32 0, i32 45
  %error_opaque = load i8*, i8** %fieldLLL53, align 8
  %autocast54 = bitcast [2048 x i8]* %buf to i8*
  call void %error_func51(i8* %error_opaque, i8* %autocast54)
  br label %cond_end47

cond_end47:                                       ; preds = %cond_else_block46, %cond_jump_then45
  %is_warning55 = load i32, i32* %is_warning, align 4
  %logical_denial56 = icmp eq i32 %is_warning55, 0
  %castOOOO57 = zext i1 %logical_denial56 to i32
  %icmpA58 = icmp ne i32 %castOOOO57, 0
  store i1 %icmpA58, i1* %oror, align 1
  br i1 %icmpA58, label %cond_jump_end, label %cond_jump_then59

cond_jump_then59:                                 ; preds = %cond_end47
  %s160 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL61 = getelementptr inbounds %TCCState, %TCCState* %s160, i32 0, i32 38
  %warn_error = load i32, i32* %fieldLLL61, align 4
  %icmpA62 = icmp ne i32 %warn_error, 0
  %oror63 = or i1 %icmpA58, %icmpA62
  store i1 %oror63, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then59, %cond_end47
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then64, label %cond_end65

cond_jump_then64:                                 ; preds = %cond_jump_end
  %s166 = load %TCCState*, %TCCState** %s1, align 8
  %s167 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL68 = getelementptr inbounds %TCCState, %TCCState* %s167, i32 0, i32 49
  %nb_errors = load i32, i32* %fieldLLL68, align 4
  %add69 = add i32 %nb_errors, 1
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s166, i32 0, i32 49
  store i32 %add69, i32* %fieldTU, align 4
  %s170 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL71 = getelementptr inbounds %TCCState, %TCCState* %s170, i32 0, i32 49
  %nb_errors72 = load i32, i32* %fieldLLL71, align 4
  %sub73 = sub i32 %nb_errors72, 1
  br label %cond_end65

cond_end65:                                       ; preds = %cond_jump_then64, %cond_jump_end
  ret void
}

define void @expect(i8* %0) {
entry:
  %msg = alloca i8*, align 8
  %msg1 = alloca i8**, align 8
  store i8* %0, i8** %msg, align 8
  store i8** %msg, i8*** %msg1, align 8
  %msg2 = load i8*, i8** %msg, align 8
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @17 to i8*), i8* %msg2)
  ret void
}

define void @skip(i32 %0) {
entry:
  %c = alloca i32, align 4
  %c1 = alloca i32*, align 8
  store i32 %0, i32* %c, align 4
  store i32* %c, i32** %c1, align 8
  %tok = load i32, i32* @tok, align 4
  %c2 = load i32, i32* %c, align 4
  %not_eq = icmp ne i32 %tok, %c2
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %c3 = load i32, i32* %c, align 4
  call void (i8*, ...) @error(i8* bitcast ([14 x i8]* @18 to i8*), i32 %c3)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  call void @next()
  ret void
}

define internal void @test_lvalue() {
entry:
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 256
  %logical_denial = icmp eq i32 %andtmp, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @expect(i8* bitcast ([7 x i8]* @19 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  ret void
}

define internal void @cstr_realloc(%CString* %0, i32 %1) {
entry:
  %data = alloca i8*, align 8
  %size = alloca i32, align 4
  %cstr = alloca %CString*, align 8
  %cstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %cstr, align 8
  store %CString** %cstr, %CString*** %cstr1, align 8
  %new_size = alloca i32, align 4
  %new_size2 = alloca i32*, align 8
  store i32 %1, i32* %new_size, align 4
  store i32* %new_size, i32** %new_size2, align 8
  %cstr3 = load %CString*, %CString** %cstr, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr3, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL, align 4
  store i32 %size_allocated, i32* %size, align 4
  %size4 = load i32, i32* %size, align 4
  %eq = icmp eq i32 %size4, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store i32 8, i32* %size, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %cond_end
  %size5 = load i32, i32* %size, align 4
  %new_size6 = load i32, i32* %new_size, align 4
  %le = icmp slt i32 %size5, %new_size6
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %size7 = load i32, i32* %size, align 4
  %mul = mul i32 %size7, 2
  store i32 %mul, i32* %size, align 4
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %cstr8 = load %CString*, %CString** %cstr, align 8
  %fieldLLL9 = getelementptr inbounds %CString, %CString* %cstr8, i32 0, i32 3
  %data_allocated = load i8*, i8** %fieldLLL9, align 8
  %size10 = load i32, i32* %size, align 4
  %icastD = sext i32 %size10 to i64
  %fun_result = call i8* @tcc_realloc(i8* %data_allocated, i64 %icastD)
  store i8* %fun_result, i8** %data, align 8
  %data11 = load i8*, i8** %data, align 8
  %logical_denial = icmp eq i8* %data11, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then12, label %cond_end13

cond_jump_then12:                                 ; preds = %cond_end_block
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @20 to i8*))
  br label %cond_end13

cond_end13:                                       ; preds = %cond_jump_then12, %cond_end_block
  %cstr14 = load %CString*, %CString** %cstr, align 8
  %data15 = load i8*, i8** %data, align 8
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr14, i32 0, i32 3
  store i8* %data15, i8** %fieldTU, align 8
  %cstr16 = load %CString*, %CString** %cstr, align 8
  %size17 = load i32, i32* %size, align 4
  %fieldTU18 = getelementptr inbounds %CString, %CString* %cstr16, i32 0, i32 2
  store i32 %size17, i32* %fieldTU18, align 4
  %cstr19 = load %CString*, %CString** %cstr, align 8
  %data20 = load i8*, i8** %data, align 8
  %fieldTU21 = getelementptr inbounds %CString, %CString* %cstr19, i32 0, i32 1
  store i8* %data20, i8** %fieldTU21, align 8
  ret void
}

define internal void @cstr_cat(%CString* %0, i8* %1) {
entry:
  %size = alloca i32, align 4
  %c = alloca i32, align 4
  %cstr = alloca %CString*, align 8
  %cstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %cstr, align 8
  store %CString** %cstr, %CString*** %cstr1, align 8
  %str = alloca i8*, align 8
  %str2 = alloca i8**, align 8
  store i8* %1, i8** %str, align 8
  store i8** %str, i8*** %str2, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cstr_ccat_end
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %str3 = load i8*, i8** %str, align 8
  %derefference_valueB = load i8, i8* %str3, align 1
  %icastL = sext i8 %derefference_valueB to i32
  store i32 %icastL, i32* %c, align 4
  %c4 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c4, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_end:                                         ; preds = %after_break, %cond_then_block
  %cstr5 = load %CString*, %CString** %cstr, align 8
  %c6 = load i32, i32* %c, align 4
  store i32 922, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

after_break:                                      ; No predecessors!
  br label %cond_end

cstr_ccat:                                        ; preds = %cond_end
  %cstr7 = alloca %CString*, align 8
  store %CString* %cstr5, %CString** %cstr7, align 8
  %ch = alloca i32, align 4
  store i32 %c6, i32* %ch, align 4
  %cstr8 = load %CString*, %CString** %cstr7, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr8, i32 0, i32 0
  %size9 = load i32, i32* %fieldLLL, align 4
  %add = add i32 %size9, 1
  store i32 %add, i32* %size, align 4
  %size10 = load i32, i32* %size, align 4
  %cstr11 = load %CString*, %CString** %cstr7, align 8
  %fieldLLL12 = getelementptr inbounds %CString, %CString* %cstr11, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL12, align 4
  %gt = icmp sgt i32 %size10, %size_allocated
  br i1 %gt, label %cond_jump_then13, label %cond_end14

cstr_ccat_end:                                    ; preds = %cond_end14
  %str23 = load i8*, i8** %str, align 8
  %ptrToIntC = ptrtoint i8* %str23 to i64
  %add24 = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add24 to i8*
  store i8* %intToPtrB, i8** %str, align 8
  %str25 = load i8*, i8** %str, align 8
  %ptrToIntI = ptrtoint i8* %str25 to i64
  %sub26 = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub26 to i8*
  br label %loop_continue_top_block

cond_jump_then13:                                 ; preds = %cstr_ccat
  %cstr15 = load %CString*, %CString** %cstr7, align 8
  %size16 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr15, i32 %size16)
  br label %cond_end14

cond_end14:                                       ; preds = %cond_jump_then13, %cstr_ccat
  %cstr17 = load %CString*, %CString** %cstr7, align 8
  %fieldLLL18 = getelementptr inbounds %CString, %CString* %cstr17, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL18, align 8
  %size19 = load i32, i32* %size, align 4
  %sub = sub i32 %size19, 1
  %ch20 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch20 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr21 = load %CString*, %CString** %cstr7, align 8
  %size22 = load i32, i32* %size, align 4
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr21, i32 0, i32 0
  store i32 %size22, i32* %fieldTU, align 4
  br label %cstr_ccat_end
}

define internal void @cstr_wccat(%CString* %0, i32 %1) {
entry:
  %size = alloca i32, align 4
  %cstr = alloca %CString*, align 8
  %cstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %cstr, align 8
  store %CString** %cstr, %CString*** %cstr1, align 8
  %ch = alloca i32, align 4
  %ch2 = alloca i32*, align 8
  store i32 %1, i32* %ch, align 4
  store i32* %ch, i32** %ch2, align 8
  %cstr3 = load %CString*, %CString** %cstr, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr3, i32 0, i32 0
  %size4 = load i32, i32* %fieldLLL, align 4
  %icastD = sext i32 %size4 to i64
  %add = add i64 %icastD, 4
  %icastM = trunc i64 %add to i32
  store i32 %icastM, i32* %size, align 4
  %size5 = load i32, i32* %size, align 4
  %cstr6 = load %CString*, %CString** %cstr, align 8
  %fieldLLL7 = getelementptr inbounds %CString, %CString* %cstr6, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL7, align 4
  %gt = icmp sgt i32 %size5, %size_allocated
  br i1 %gt, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %cstr8 = load %CString*, %CString** %cstr, align 8
  %size9 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr8, i32 %size9)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %cstr10 = load %CString*, %CString** %cstr, align 8
  %fieldLLL11 = getelementptr inbounds %CString, %CString* %cstr10, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL11, align 8
  %size12 = load i32, i32* %size, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %sext = sext i32 %size12 to i64
  %mul = mul i64 %sext, 1
  %add13 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add13 to i8*
  %ptrToIntI = ptrtoint i8* %intToPtrB to i64
  %sub = sub i64 %ptrToIntI, 4
  %iintToPtrD = inttoptr i64 %sub to i8*
  %castAQ = bitcast i8* %iintToPtrD to i32*
  %ch14 = load i32, i32* %ch, align 4
  store i32 %ch14, i32* %castAQ, align 4
  %cstr15 = load %CString*, %CString** %cstr, align 8
  %size16 = load i32, i32* %size, align 4
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr15, i32 0, i32 0
  store i32 %size16, i32* %fieldTU, align 4
  ret void
}

define internal void @cstr_new(%CString* %0) {
entry:
  %cstr = alloca %CString*, align 8
  %cstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %cstr, align 8
  store %CString** %cstr, %CString*** %cstr1, align 8
  %cstr2 = load %CString*, %CString** %cstr, align 8
  %castAQ = bitcast %CString* %cstr2 to i8*
  %fun_result = call i8* @memset(i8* %castAQ, i32 0, i64 32)
  ret void
}

define internal void @cstr_free(%CString* %0) {
entry:
  %cstr = alloca %CString*, align 8
  %cstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %cstr, align 8
  store %CString** %cstr, %CString*** %cstr1, align 8
  %cstr2 = load %CString*, %CString** %cstr, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr2, i32 0, i32 3
  %data_allocated = load i8*, i8** %fieldLLL, align 8
  call void @tcc_free(i8* %data_allocated)
  %cstr3 = load %CString*, %CString** %cstr, align 8
  call void @cstr_new(%CString* %cstr3)
  ret void
}

define internal void @add_char(%CString* %0, i32 %1) {
entry:
  %size209 = alloca i32, align 4
  %size176 = alloca i32, align 4
  %size142 = alloca i32, align 4
  %size110 = alloca i32, align 4
  %size75 = alloca i32, align 4
  %size45 = alloca i32, align 4
  %andand = alloca i1, align 1
  %size = alloca i32, align 4
  %oror3 = alloca i1, align 1
  %oror = alloca i1, align 1
  %cstr = alloca %CString*, align 8
  %cstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %cstr, align 8
  store %CString** %cstr, %CString*** %cstr1, align 8
  %c = alloca i32, align 4
  %c2 = alloca i32*, align 8
  store i32 %1, i32* %c, align 4
  store i32* %c, i32** %c2, align 8
  %c4 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c4, 39
  store i1 %eq, i1* %oror3, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %c5 = load i32, i32* %c, align 4
  %eq6 = icmp eq i32 %c5, 34
  %oror7 = or i1 %eq, %eq6
  store i1 %oror7, i1* %oror3, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror3, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end9, label %cond_jump_then8

cond_jump_then8:                                  ; preds = %cond_jump_end
  %c10 = load i32, i32* %c, align 4
  %eq11 = icmp eq i32 %c10, 92
  %oror12 = or i1 %oror_result_value, %eq11
  store i1 %oror12, i1* %oror, align 1
  br label %cond_jump_end9

cond_jump_end9:                                   ; preds = %cond_jump_then8, %cond_jump_end
  %oror_result_value13 = load i1, i1* %oror, align 1
  br i1 %oror_result_value13, label %cond_jump_then14, label %cond_end

cond_jump_then14:                                 ; preds = %cond_jump_end9
  %cstr15 = load %CString*, %CString** %cstr, align 8
  store i32 957, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.6, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

cond_end:                                         ; preds = %cstr_ccat_end, %cond_jump_end9
  %c32 = load i32, i32* %c, align 4
  %gteq_signed = icmp sge i32 %c32, 32
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then33, label %cond_jump_end34

cstr_ccat:                                        ; preds = %cond_jump_then14
  %cstr16 = alloca %CString*, align 8
  store %CString* %cstr15, %CString** %cstr16, align 8
  %ch = alloca i32, align 4
  store i32 92, i32* %ch, align 4
  %cstr17 = load %CString*, %CString** %cstr16, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr17, i32 0, i32 0
  %size18 = load i32, i32* %fieldLLL, align 4
  %add = add i32 %size18, 1
  store i32 %add, i32* %size, align 4
  %size19 = load i32, i32* %size, align 4
  %cstr20 = load %CString*, %CString** %cstr16, align 8
  %fieldLLL21 = getelementptr inbounds %CString, %CString* %cstr20, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL21, align 4
  %gt = icmp sgt i32 %size19, %size_allocated
  br i1 %gt, label %cond_jump_then22, label %cond_end23

cstr_ccat_end:                                    ; preds = %cond_end23
  br label %cond_end

cond_jump_then22:                                 ; preds = %cstr_ccat
  %cstr24 = load %CString*, %CString** %cstr16, align 8
  %size25 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr24, i32 %size25)
  br label %cond_end23

cond_end23:                                       ; preds = %cond_jump_then22, %cstr_ccat
  %cstr26 = load %CString*, %CString** %cstr16, align 8
  %fieldLLL27 = getelementptr inbounds %CString, %CString* %cstr26, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL27, align 8
  %size28 = load i32, i32* %size, align 4
  %sub = sub i32 %size28, 1
  %ch29 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch29 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr30 = load %CString*, %CString** %cstr16, align 8
  %size31 = load i32, i32* %size, align 4
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr30, i32 0, i32 0
  store i32 %size31, i32* %fieldTU, align 4
  br label %cstr_ccat_end

cond_jump_then33:                                 ; preds = %cond_end
  %c35 = load i32, i32* %c, align 4
  %leeq = icmp sle i32 %c35, 126
  %andand36 = and i1 %gteq_signed, %leeq
  store i1 %andand36, i1* %andand, align 1
  br label %cond_jump_end34

cond_jump_end34:                                  ; preds = %cond_jump_then33, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then37, label %cond_else_block

cond_jump_then37:                                 ; preds = %cond_jump_end34
  %cstr39 = load %CString*, %CString** %cstr, align 8
  %c40 = load i32, i32* %c, align 4
  store i32 960, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.7, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat41

cond_else_block:                                  ; preds = %cond_jump_end34
  %cstr70 = load %CString*, %CString** %cstr, align 8
  store i32 962, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.8, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat71

cond_end38:                                       ; preds = %cond_end104, %cstr_ccat_end44
  ret void

cstr_ccat41:                                      ; preds = %cond_jump_then37
  %cstr42 = alloca %CString*, align 8
  store %CString* %cstr39, %CString** %cstr42, align 8
  %ch43 = alloca i32, align 4
  store i32 %c40, i32* %ch43, align 4
  %cstr46 = load %CString*, %CString** %cstr42, align 8
  %fieldLLL47 = getelementptr inbounds %CString, %CString* %cstr46, i32 0, i32 0
  %size48 = load i32, i32* %fieldLLL47, align 4
  %add49 = add i32 %size48, 1
  store i32 %add49, i32* %size45, align 4
  %size50 = load i32, i32* %size45, align 4
  %cstr51 = load %CString*, %CString** %cstr42, align 8
  %fieldLLL52 = getelementptr inbounds %CString, %CString* %cstr51, i32 0, i32 2
  %size_allocated53 = load i32, i32* %fieldLLL52, align 4
  %gt54 = icmp sgt i32 %size50, %size_allocated53
  br i1 %gt54, label %cond_jump_then55, label %cond_end56

cstr_ccat_end44:                                  ; preds = %cond_end56
  br label %cond_end38

cond_jump_then55:                                 ; preds = %cstr_ccat41
  %cstr57 = load %CString*, %CString** %cstr42, align 8
  %size58 = load i32, i32* %size45, align 4
  call void @cstr_realloc(%CString* %cstr57, i32 %size58)
  br label %cond_end56

cond_end56:                                       ; preds = %cond_jump_then55, %cstr_ccat41
  %cstr59 = load %CString*, %CString** %cstr42, align 8
  %fieldLLL60 = getelementptr inbounds %CString, %CString* %cstr59, i32 0, i32 1
  %data61 = load i8*, i8** %fieldLLL60, align 8
  %size62 = load i32, i32* %size45, align 4
  %sub63 = sub i32 %size62, 1
  %ch64 = load i32, i32* %ch43, align 4
  %icastJ65 = trunc i32 %ch64 to i8
  %element_addressXYXY66 = getelementptr i8, i8* %data61, i32 %sub63
  store i8 %icastJ65, i8* %element_addressXYXY66, align 1
  %cstr67 = load %CString*, %CString** %cstr42, align 8
  %size68 = load i32, i32* %size45, align 4
  %fieldTU69 = getelementptr inbounds %CString, %CString* %cstr67, i32 0, i32 0
  store i32 %size68, i32* %fieldTU69, align 4
  br label %cstr_ccat_end44

cstr_ccat71:                                      ; preds = %cond_else_block
  %cstr72 = alloca %CString*, align 8
  store %CString* %cstr70, %CString** %cstr72, align 8
  %ch73 = alloca i32, align 4
  store i32 92, i32* %ch73, align 4
  %cstr76 = load %CString*, %CString** %cstr72, align 8
  %fieldLLL77 = getelementptr inbounds %CString, %CString* %cstr76, i32 0, i32 0
  %size78 = load i32, i32* %fieldLLL77, align 4
  %add79 = add i32 %size78, 1
  store i32 %add79, i32* %size75, align 4
  %size80 = load i32, i32* %size75, align 4
  %cstr81 = load %CString*, %CString** %cstr72, align 8
  %fieldLLL82 = getelementptr inbounds %CString, %CString* %cstr81, i32 0, i32 2
  %size_allocated83 = load i32, i32* %fieldLLL82, align 4
  %gt84 = icmp sgt i32 %size80, %size_allocated83
  br i1 %gt84, label %cond_jump_then85, label %cond_end86

cstr_ccat_end74:                                  ; preds = %cond_end86
  %c100 = load i32, i32* %c, align 4
  %eq101 = icmp eq i32 %c100, 10
  br i1 %eq101, label %cond_jump_then102, label %cond_else_block103

cond_jump_then85:                                 ; preds = %cstr_ccat71
  %cstr87 = load %CString*, %CString** %cstr72, align 8
  %size88 = load i32, i32* %size75, align 4
  call void @cstr_realloc(%CString* %cstr87, i32 %size88)
  br label %cond_end86

cond_end86:                                       ; preds = %cond_jump_then85, %cstr_ccat71
  %cstr89 = load %CString*, %CString** %cstr72, align 8
  %fieldLLL90 = getelementptr inbounds %CString, %CString* %cstr89, i32 0, i32 1
  %data91 = load i8*, i8** %fieldLLL90, align 8
  %size92 = load i32, i32* %size75, align 4
  %sub93 = sub i32 %size92, 1
  %ch94 = load i32, i32* %ch73, align 4
  %icastJ95 = trunc i32 %ch94 to i8
  %element_addressXYXY96 = getelementptr i8, i8* %data91, i32 %sub93
  store i8 %icastJ95, i8* %element_addressXYXY96, align 1
  %cstr97 = load %CString*, %CString** %cstr72, align 8
  %size98 = load i32, i32* %size75, align 4
  %fieldTU99 = getelementptr inbounds %CString, %CString* %cstr97, i32 0, i32 0
  store i32 %size98, i32* %fieldTU99, align 4
  br label %cstr_ccat_end74

cond_jump_then102:                                ; preds = %cstr_ccat_end74
  %cstr105 = load %CString*, %CString** %cstr, align 8
  store i32 964, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.9, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat106

cond_else_block103:                               ; preds = %cstr_ccat_end74
  %cstr135 = load %CString*, %CString** %cstr, align 8
  %c136 = load i32, i32* %c, align 4
  %rshifttmp = lshr i32 %c136, 6
  %andtmp = and i32 %rshifttmp, 7
  %add137 = add i32 48, %andtmp
  store i32 966, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.10, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat138

cond_end104:                                      ; preds = %cstr_ccat_end208, %cstr_ccat_end109
  br label %cond_end38

cstr_ccat106:                                     ; preds = %cond_jump_then102
  %cstr107 = alloca %CString*, align 8
  store %CString* %cstr105, %CString** %cstr107, align 8
  %ch108 = alloca i32, align 4
  store i32 110, i32* %ch108, align 4
  %cstr111 = load %CString*, %CString** %cstr107, align 8
  %fieldLLL112 = getelementptr inbounds %CString, %CString* %cstr111, i32 0, i32 0
  %size113 = load i32, i32* %fieldLLL112, align 4
  %add114 = add i32 %size113, 1
  store i32 %add114, i32* %size110, align 4
  %size115 = load i32, i32* %size110, align 4
  %cstr116 = load %CString*, %CString** %cstr107, align 8
  %fieldLLL117 = getelementptr inbounds %CString, %CString* %cstr116, i32 0, i32 2
  %size_allocated118 = load i32, i32* %fieldLLL117, align 4
  %gt119 = icmp sgt i32 %size115, %size_allocated118
  br i1 %gt119, label %cond_jump_then120, label %cond_end121

cstr_ccat_end109:                                 ; preds = %cond_end121
  br label %cond_end104

cond_jump_then120:                                ; preds = %cstr_ccat106
  %cstr122 = load %CString*, %CString** %cstr107, align 8
  %size123 = load i32, i32* %size110, align 4
  call void @cstr_realloc(%CString* %cstr122, i32 %size123)
  br label %cond_end121

cond_end121:                                      ; preds = %cond_jump_then120, %cstr_ccat106
  %cstr124 = load %CString*, %CString** %cstr107, align 8
  %fieldLLL125 = getelementptr inbounds %CString, %CString* %cstr124, i32 0, i32 1
  %data126 = load i8*, i8** %fieldLLL125, align 8
  %size127 = load i32, i32* %size110, align 4
  %sub128 = sub i32 %size127, 1
  %ch129 = load i32, i32* %ch108, align 4
  %icastJ130 = trunc i32 %ch129 to i8
  %element_addressXYXY131 = getelementptr i8, i8* %data126, i32 %sub128
  store i8 %icastJ130, i8* %element_addressXYXY131, align 1
  %cstr132 = load %CString*, %CString** %cstr107, align 8
  %size133 = load i32, i32* %size110, align 4
  %fieldTU134 = getelementptr inbounds %CString, %CString* %cstr132, i32 0, i32 0
  store i32 %size133, i32* %fieldTU134, align 4
  br label %cstr_ccat_end109

cstr_ccat138:                                     ; preds = %cond_else_block103
  %cstr139 = alloca %CString*, align 8
  store %CString* %cstr135, %CString** %cstr139, align 8
  %ch140 = alloca i32, align 4
  store i32 %add137, i32* %ch140, align 4
  %cstr143 = load %CString*, %CString** %cstr139, align 8
  %fieldLLL144 = getelementptr inbounds %CString, %CString* %cstr143, i32 0, i32 0
  %size145 = load i32, i32* %fieldLLL144, align 4
  %add146 = add i32 %size145, 1
  store i32 %add146, i32* %size142, align 4
  %size147 = load i32, i32* %size142, align 4
  %cstr148 = load %CString*, %CString** %cstr139, align 8
  %fieldLLL149 = getelementptr inbounds %CString, %CString* %cstr148, i32 0, i32 2
  %size_allocated150 = load i32, i32* %fieldLLL149, align 4
  %gt151 = icmp sgt i32 %size147, %size_allocated150
  br i1 %gt151, label %cond_jump_then152, label %cond_end153

cstr_ccat_end141:                                 ; preds = %cond_end153
  %cstr167 = load %CString*, %CString** %cstr, align 8
  %c168 = load i32, i32* %c, align 4
  %rshifttmp169 = lshr i32 %c168, 3
  %andtmp170 = and i32 %rshifttmp169, 7
  %add171 = add i32 48, %andtmp170
  store i32 967, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.11, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat172

cond_jump_then152:                                ; preds = %cstr_ccat138
  %cstr154 = load %CString*, %CString** %cstr139, align 8
  %size155 = load i32, i32* %size142, align 4
  call void @cstr_realloc(%CString* %cstr154, i32 %size155)
  br label %cond_end153

cond_end153:                                      ; preds = %cond_jump_then152, %cstr_ccat138
  %cstr156 = load %CString*, %CString** %cstr139, align 8
  %fieldLLL157 = getelementptr inbounds %CString, %CString* %cstr156, i32 0, i32 1
  %data158 = load i8*, i8** %fieldLLL157, align 8
  %size159 = load i32, i32* %size142, align 4
  %sub160 = sub i32 %size159, 1
  %ch161 = load i32, i32* %ch140, align 4
  %icastJ162 = trunc i32 %ch161 to i8
  %element_addressXYXY163 = getelementptr i8, i8* %data158, i32 %sub160
  store i8 %icastJ162, i8* %element_addressXYXY163, align 1
  %cstr164 = load %CString*, %CString** %cstr139, align 8
  %size165 = load i32, i32* %size142, align 4
  %fieldTU166 = getelementptr inbounds %CString, %CString* %cstr164, i32 0, i32 0
  store i32 %size165, i32* %fieldTU166, align 4
  br label %cstr_ccat_end141

cstr_ccat172:                                     ; preds = %cstr_ccat_end141
  %cstr173 = alloca %CString*, align 8
  store %CString* %cstr167, %CString** %cstr173, align 8
  %ch174 = alloca i32, align 4
  store i32 %add171, i32* %ch174, align 4
  %cstr177 = load %CString*, %CString** %cstr173, align 8
  %fieldLLL178 = getelementptr inbounds %CString, %CString* %cstr177, i32 0, i32 0
  %size179 = load i32, i32* %fieldLLL178, align 4
  %add180 = add i32 %size179, 1
  store i32 %add180, i32* %size176, align 4
  %size181 = load i32, i32* %size176, align 4
  %cstr182 = load %CString*, %CString** %cstr173, align 8
  %fieldLLL183 = getelementptr inbounds %CString, %CString* %cstr182, i32 0, i32 2
  %size_allocated184 = load i32, i32* %fieldLLL183, align 4
  %gt185 = icmp sgt i32 %size181, %size_allocated184
  br i1 %gt185, label %cond_jump_then186, label %cond_end187

cstr_ccat_end175:                                 ; preds = %cond_end187
  %cstr201 = load %CString*, %CString** %cstr, align 8
  %c202 = load i32, i32* %c, align 4
  %andtmp203 = and i32 %c202, 7
  %add204 = add i32 48, %andtmp203
  store i32 968, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.12, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat205

cond_jump_then186:                                ; preds = %cstr_ccat172
  %cstr188 = load %CString*, %CString** %cstr173, align 8
  %size189 = load i32, i32* %size176, align 4
  call void @cstr_realloc(%CString* %cstr188, i32 %size189)
  br label %cond_end187

cond_end187:                                      ; preds = %cond_jump_then186, %cstr_ccat172
  %cstr190 = load %CString*, %CString** %cstr173, align 8
  %fieldLLL191 = getelementptr inbounds %CString, %CString* %cstr190, i32 0, i32 1
  %data192 = load i8*, i8** %fieldLLL191, align 8
  %size193 = load i32, i32* %size176, align 4
  %sub194 = sub i32 %size193, 1
  %ch195 = load i32, i32* %ch174, align 4
  %icastJ196 = trunc i32 %ch195 to i8
  %element_addressXYXY197 = getelementptr i8, i8* %data192, i32 %sub194
  store i8 %icastJ196, i8* %element_addressXYXY197, align 1
  %cstr198 = load %CString*, %CString** %cstr173, align 8
  %size199 = load i32, i32* %size176, align 4
  %fieldTU200 = getelementptr inbounds %CString, %CString* %cstr198, i32 0, i32 0
  store i32 %size199, i32* %fieldTU200, align 4
  br label %cstr_ccat_end175

cstr_ccat205:                                     ; preds = %cstr_ccat_end175
  %cstr206 = alloca %CString*, align 8
  store %CString* %cstr201, %CString** %cstr206, align 8
  %ch207 = alloca i32, align 4
  store i32 %add204, i32* %ch207, align 4
  %cstr210 = load %CString*, %CString** %cstr206, align 8
  %fieldLLL211 = getelementptr inbounds %CString, %CString* %cstr210, i32 0, i32 0
  %size212 = load i32, i32* %fieldLLL211, align 4
  %add213 = add i32 %size212, 1
  store i32 %add213, i32* %size209, align 4
  %size214 = load i32, i32* %size209, align 4
  %cstr215 = load %CString*, %CString** %cstr206, align 8
  %fieldLLL216 = getelementptr inbounds %CString, %CString* %cstr215, i32 0, i32 2
  %size_allocated217 = load i32, i32* %fieldLLL216, align 4
  %gt218 = icmp sgt i32 %size214, %size_allocated217
  br i1 %gt218, label %cond_jump_then219, label %cond_end220

cstr_ccat_end208:                                 ; preds = %cond_end220
  br label %cond_end104

cond_jump_then219:                                ; preds = %cstr_ccat205
  %cstr221 = load %CString*, %CString** %cstr206, align 8
  %size222 = load i32, i32* %size209, align 4
  call void @cstr_realloc(%CString* %cstr221, i32 %size222)
  br label %cond_end220

cond_end220:                                      ; preds = %cond_jump_then219, %cstr_ccat205
  %cstr223 = load %CString*, %CString** %cstr206, align 8
  %fieldLLL224 = getelementptr inbounds %CString, %CString* %cstr223, i32 0, i32 1
  %data225 = load i8*, i8** %fieldLLL224, align 8
  %size226 = load i32, i32* %size209, align 4
  %sub227 = sub i32 %size226, 1
  %ch228 = load i32, i32* %ch207, align 4
  %icastJ229 = trunc i32 %ch228 to i8
  %element_addressXYXY230 = getelementptr i8, i8* %data225, i32 %sub227
  store i8 %icastJ229, i8* %element_addressXYXY230, align 1
  %cstr231 = load %CString*, %CString** %cstr206, align 8
  %size232 = load i32, i32* %size209, align 4
  %fieldTU233 = getelementptr inbounds %CString, %CString* %cstr231, i32 0, i32 0
  store i32 %size232, i32* %fieldTU233, align 4
  br label %cstr_ccat_end208
}

define internal %Sym* @sym_push2(%Sym** %0, i32 %1, i32 %2, i64 %3) {
entry:
  %sym = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %ps = alloca %Sym**, align 8
  %ps1 = alloca %Sym***, align 8
  store %Sym** %0, %Sym*** %ps, align 8
  store %Sym*** %ps, %Sym**** %ps1, align 8
  %v = alloca i32, align 4
  %v2 = alloca i32*, align 8
  store i32 %1, i32* %v, align 4
  store i32* %v, i32** %v2, align 8
  %t = alloca i32, align 4
  %t3 = alloca i32*, align 8
  store i32 %2, i32* %t, align 4
  store i32* %t, i32** %t3, align 8
  %c = alloca i64, align 8
  %c4 = alloca i64*, align 8
  store i64 %3, i64* %c, align 4
  store i64* %c, i64** %c4, align 8
  store i32 977, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.13, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_malloc

sym_malloc:                                       ; preds = %entry
  %inline_result_variable = alloca %Sym*, align 8
  %sym_free_first = load %Sym*, %Sym** @sym_free_first, align 8
  store %Sym* %sym_free_first, %Sym** %sym, align 8
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %logical_denial = icmp eq %Sym* %sym5, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

sym_malloc_end:                                   ; preds = %cond_end
  %inline_result_variable8 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable8, %Sym** %s, align 8
  %s9 = load %Sym*, %Sym** %s, align 8
  %v10 = load i32, i32* %v, align 4
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s9, i32 0, i32 0
  store i32 %v10, i32* %fieldTU, align 4
  %s11 = load %Sym*, %Sym** %s, align 8
  %fieldLLL12 = getelementptr inbounds %Sym, %Sym* %s11, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL12, align 8
  %t13 = load i32, i32* %t, align 4
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL12, i32 0, i32 0
  store i32 %t13, i32* %fieldTTT, align 4
  %s14 = load %Sym*, %Sym** %s, align 8
  %c15 = load i64, i64* %c, align 4
  %fieldTU16 = getelementptr inbounds %Sym, %Sym* %s14, i32 0, i32 2
  store i64 %c15, i64* %fieldTU16, align 4
  %s17 = load %Sym*, %Sym** %s, align 8
  %fieldTU18 = getelementptr inbounds %Sym, %Sym* %s17, i32 0, i32 4
  store %Sym* null, %Sym** %fieldTU18, align 8
  %s19 = load %Sym*, %Sym** %s, align 8
  %ps20 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB = load %Sym*, %Sym** %ps20, align 8
  %fieldTU21 = getelementptr inbounds %Sym, %Sym* %s19, i32 0, i32 5
  store %Sym* %derefference_valueB, %Sym** %fieldTU21, align 8
  %ps22 = load %Sym**, %Sym*** %ps, align 8
  %s23 = load %Sym*, %Sym** %s, align 8
  store %Sym* %s23, %Sym** %ps22, align 8
  %s24 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s24

cond_jump_then:                                   ; preds = %sym_malloc
  %fun_result = call %Sym* @__sym_malloc()
  store %Sym* %fun_result, %Sym** %sym, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %sym_malloc
  %sym6 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %sym6, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %next, %Sym** @sym_free_first, align 8
  %sym7 = load %Sym*, %Sym** %sym, align 8
  store %Sym* %sym7, %Sym** %inline_result_variable, align 8
  br label %sym_malloc_end
}

define internal %Sym* @sym_find2(%Sym* %0, i32 %1) {
entry:
  %s = alloca %Sym*, align 8
  %s1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %s, align 8
  store %Sym** %s, %Sym*** %s1, align 8
  %v = alloca i32, align 4
  %v2 = alloca i32*, align 8
  store i32 %1, i32* %v, align 4
  store i32* %v, i32** %v2, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end, %entry
  %s3 = load %Sym*, %Sym** %s, align 8
  %icmpB = icmp ne %Sym* %s3, null
  br i1 %icmpB, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s4 = load %Sym*, %Sym** %s, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %s4, i32 0, i32 0
  %v5 = load i32, i32* %fieldLLL, align 4
  %v6 = load i32, i32* %v, align 4
  %eq = icmp eq i32 %v5, %v6
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  ret %Sym* null

cond_jump_then:                                   ; preds = %cond_then_block
  %s7 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s7

cond_end:                                         ; preds = %cond_then_block
  %s8 = load %Sym*, %Sym** %s, align 8
  %fieldLLL9 = getelementptr inbounds %Sym, %Sym* %s8, i32 0, i32 5
  %prev = load %Sym*, %Sym** %fieldLLL9, align 8
  store %Sym* %prev, %Sym** %s, align 8
  br label %loop_top_block
}

define internal %Sym* @global_identifier_push(i32 %0, i32 %1, i32 %2) {
entry:
  %ps = alloca %Sym**, align 8
  %s = alloca %Sym*, align 8
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %t = alloca i32, align 4
  %t2 = alloca i32*, align 8
  store i32 %1, i32* %t, align 4
  store i32* %t, i32** %t2, align 8
  %c = alloca i32, align 4
  %c3 = alloca i32*, align 8
  store i32 %2, i32* %c, align 4
  store i32* %c, i32** %c3, align 8
  %global_stack = load %Sym*, %Sym** @global_stack, align 8
  %v4 = load i32, i32* %v, align 4
  %t5 = load i32, i32* %t, align 4
  %c6 = load i32, i32* %c, align 4
  %icastD = sext i32 %c6 to i64
  %fun_result = call %Sym* @sym_push2(%Sym** @global_stack, i32 %v4, i32 %t5, i64 %icastD)
  store %Sym* %fun_result, %Sym** %s, align 8
  %v7 = load i32, i32* %v, align 4
  %le = icmp slt i32 %v7, 268435456
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v8 = load i32, i32* %v, align 4
  %sub = sub i32 %v8, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym** %fieldLLL, %Sym*** %ps, align 8
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end_block, %entry
  %s16 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s16

loop_top_block:                                   ; preds = %cond_then_block, %cond_jump_then
  %ps9 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB = load %Sym*, %Sym** %ps9, align 8
  %not_eq = icmp ne %Sym* %derefference_valueB, null
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %ps10 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB11 = load %Sym*, %Sym** %ps10, align 8
  %fieldLLL12 = getelementptr inbounds %Sym, %Sym* %derefference_valueB11, i32 0, i32 6
  %prev_tok = load %Sym*, %Sym** %fieldLLL12, align 8
  store %Sym** %fieldLLL12, %Sym*** %ps, align 8
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %s13 = load %Sym*, %Sym** %s, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s13, i32 0, i32 6
  store %Sym* null, %Sym** %fieldTU, align 8
  %ps14 = load %Sym**, %Sym*** %ps, align 8
  %s15 = load %Sym*, %Sym** %s, align 8
  store %Sym* %s15, %Sym** %ps14, align 8
  br label %cond_end
}

define internal void @sym_pop(%Sym** %0, %Sym* %1) {
entry:
  %andand = alloca i1, align 1
  %v = alloca i32, align 4
  %ts = alloca %TokenSym*, align 8
  %ps = alloca %Sym**, align 8
  %ss = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %ptop = alloca %Sym**, align 8
  %ptop1 = alloca %Sym***, align 8
  store %Sym** %0, %Sym*** %ptop, align 8
  store %Sym*** %ptop, %Sym**** %ptop1, align 8
  %b = alloca %Sym*, align 8
  %b2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %b, align 8
  store %Sym** %b, %Sym*** %b2, align 8
  %ptop3 = load %Sym**, %Sym*** %ptop, align 8
  %derefference_valueB = load %Sym*, %Sym** %ptop3, align 8
  store %Sym* %derefference_valueB, %Sym** %s, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %sym_free_end, %entry
  %s4 = load %Sym*, %Sym** %s, align 8
  %b5 = load %Sym*, %Sym** %b, align 8
  %not_eq = icmp ne %Sym* %s4, %b5
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s6 = load %Sym*, %Sym** %s, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %s6, i32 0, i32 5
  %prev = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %prev, %Sym** %ss, align 8
  %s7 = load %Sym*, %Sym** %s, align 8
  %fieldLLL8 = getelementptr inbounds %Sym, %Sym* %s7, i32 0, i32 0
  %v9 = load i32, i32* %fieldLLL8, align 4
  store i32 %v9, i32* %v, align 4
  %v10 = load i32, i32* %v, align 4
  %andtmp = and i32 %v10, 536870912
  %logical_denial = icmp eq i32 %andtmp, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then, label %cond_jump_end

cond_end_block:                                   ; preds = %loop_top_block
  %ptop33 = load %Sym**, %Sym*** %ptop, align 8
  %b34 = load %Sym*, %Sym** %b, align 8
  store %Sym* %b34, %Sym** %ptop33, align 8
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %v11 = load i32, i32* %v, align 4
  %andtmp12 = and i32 %v11, -1073741825
  %le = icmp slt i32 %andtmp12, 268435456
  %andand13 = and i1 %icmpA, %le
  store i1 %andand13, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then14, label %cond_end

cond_jump_then14:                                 ; preds = %cond_jump_end
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v15 = load i32, i32* %v, align 4
  %andtmp16 = and i32 %v15, -1073741825
  %sub = sub i32 %andtmp16, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  store %TokenSym* %load_element, %TokenSym** %ts, align 8
  %v17 = load i32, i32* %v, align 4
  %andtmp18 = and i32 %v17, 1073741824
  %icmpA19 = icmp ne i32 %andtmp18, 0
  br i1 %icmpA19, label %cond_jump_then20, label %cond_else_block

cond_end:                                         ; preds = %cond_end21, %cond_jump_end
  %s29 = load %Sym*, %Sym** %s, align 8
  store i32 1085, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @libtcc.c.14, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_free

cond_jump_then20:                                 ; preds = %cond_jump_then14
  %ts22 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL23 = getelementptr inbounds %TokenSym, %TokenSym* %ts22, i32 0, i32 3
  %sym_struct = load %Sym*, %Sym** %fieldLLL23, align 8
  store %Sym** %fieldLLL23, %Sym*** %ps, align 8
  br label %cond_end21

cond_else_block:                                  ; preds = %cond_jump_then14
  %ts24 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL25 = getelementptr inbounds %TokenSym, %TokenSym* %ts24, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL25, align 8
  store %Sym** %fieldLLL25, %Sym*** %ps, align 8
  br label %cond_end21

cond_end21:                                       ; preds = %cond_else_block, %cond_jump_then20
  %ps26 = load %Sym**, %Sym*** %ps, align 8
  %s27 = load %Sym*, %Sym** %s, align 8
  %fieldLLL28 = getelementptr inbounds %Sym, %Sym* %s27, i32 0, i32 6
  %prev_tok = load %Sym*, %Sym** %fieldLLL28, align 8
  store %Sym* %prev_tok, %Sym** %ps26, align 8
  br label %cond_end

sym_free:                                         ; preds = %cond_end
  %sym = alloca %Sym*, align 8
  store %Sym* %s29, %Sym** %sym, align 8
  %sym30 = load %Sym*, %Sym** %sym, align 8
  %sym_free_first = load %Sym*, %Sym** @sym_free_first, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %sym30, i32 0, i32 4
  store %Sym* %sym_free_first, %Sym** %fieldTU, align 8
  %sym31 = load %Sym*, %Sym** %sym, align 8
  store %Sym* %sym31, %Sym** @sym_free_first, align 8
  br label %sym_free_end

sym_free_end:                                     ; preds = %sym_free
  %ss32 = load %Sym*, %Sym** %ss, align 8
  store %Sym* %ss32, %Sym** %s, align 8
  br label %loop_top_block
}

define %BufferedFile* @tcc_open(%TCCState* %0, i8* %1) {
entry:
  %condtional_result_value = alloca i8*, align 8
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %bf = alloca %BufferedFile*, align 8
  %fd = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %filename = alloca i8*, align 8
  %filename2 = alloca i8**, align 8
  store i8* %1, i8** %filename, align 8
  store i8** %filename, i8*** %filename2, align 8
  %filename3 = load i8*, i8** %filename, align 8
  %fun_result = call i32 @strcmp(i8* %filename3, i8* bitcast ([2 x i8]* @21 to i8*))
  %eq = icmp eq i32 %fun_result, 0
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i32 0, i32* %fd, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %fun_result4 = call i32 (i8*, i32, ...) @open(i8* bitcast ([6 x i8]* @22 to i8*), i32 0)
  store i32 %fun_result4, i32* %fd, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 41
  %verbose = load i32, i32* %fieldLLL, align 4
  %eq6 = icmp eq i32 %verbose, 2
  store i1 %eq6, i1* %andand, align 1
  br i1 %eq6, label %cond_jump_then7, label %cond_jump_end

cond_jump_then7:                                  ; preds = %cond_end
  %fd8 = load i32, i32* %fd, align 4
  %gteq_signed = icmp sge i32 %fd8, 0
  %andand9 = and i1 %eq6, %gteq_signed
  store i1 %andand9, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then7, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror, align 1
  br i1 %andand_result_value, label %cond_jump_end11, label %cond_jump_then10

cond_jump_then10:                                 ; preds = %cond_jump_end
  %s112 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL13 = getelementptr inbounds %TCCState, %TCCState* %s112, i32 0, i32 41
  %verbose14 = load i32, i32* %fieldLLL13, align 4
  %eq15 = icmp eq i32 %verbose14, 3
  %oror16 = or i1 %andand_result_value, %eq15
  store i1 %oror16, i1* %oror, align 1
  br label %cond_jump_end11

cond_jump_end11:                                  ; preds = %cond_jump_then10, %cond_jump_end
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then17, label %cond_end18

cond_jump_then17:                                 ; preds = %cond_jump_end11
  %fd19 = load i32, i32* %fd, align 4
  %le = icmp slt i32 %fd19, 0
  br i1 %le, label %cond_jump_then20, label %cond_else_block21

cond_end18:                                       ; preds = %cond_end22, %cond_jump_end11
  %fd27 = load i32, i32* %fd, align 4
  %le28 = icmp slt i32 %fd27, 0
  br i1 %le28, label %cond_jump_then29, label %cond_end30

cond_jump_then20:                                 ; preds = %cond_jump_then17
  store i8* bitcast ([3 x i8]* @24 to i8*), i8** %condtional_result_value, align 8
  br label %cond_end22

cond_else_block21:                                ; preds = %cond_jump_then17
  store i8* bitcast ([3 x i8]* @25 to i8*), i8** %condtional_result_value, align 8
  br label %cond_end22

cond_end22:                                       ; preds = %cond_else_block21, %cond_jump_then20
  %conditional_result_value = load i8*, i8** %condtional_result_value, align 8
  %s123 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL24 = getelementptr inbounds %TCCState, %TCCState* %s123, i32 0, i32 1
  %include_stack_ptr = load %BufferedFile**, %BufferedFile*** %fieldLLL24, align 8
  %s125 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s125, i32 0, i32 51
  %autocast = bitcast [32 x %BufferedFile*]* %fieldRRRROOU to %BufferedFile**
  %ptrToIntG = ptrtoint %BufferedFile** %include_stack_ptr to i64
  %ptrToIntH = ptrtoint %BufferedFile** %autocast to i64
  %sub = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub, 9776
  %fun_result26 = call i32 (i8*, ...) @printf(i8* bitcast ([10 x i8]* @23 to i8*), i8* %conditional_result_value, i64 %div, i8* bitcast ([1 x i8]* @26 to i8*), i8* bitcast ([6 x i8]* @22 to i8*))
  br label %cond_end18

cond_jump_then29:                                 ; preds = %cond_end18
  ret %BufferedFile* null

cond_end30:                                       ; preds = %cond_end18
  %fun_result31 = call i8* @tcc_malloc(i64 9776)
  %castAQ = bitcast i8* %fun_result31 to %BufferedFile*
  store %BufferedFile* %castAQ, %BufferedFile** %bf, align 8
  %bf32 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fd33 = load i32, i32* %fd, align 4
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf32, i32 0, i32 2
  store i32 %fd33, i32* %fieldTU, align 4
  %bf34 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf35 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU36 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf35, i32 0, i32 10
  %autocast37 = bitcast [8193 x i8]* %fieldRRRROOU36 to i8*
  %fieldTU38 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf34, i32 0, i32 0
  store i8* %autocast37, i8** %fieldTU38, align 8
  %bf39 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf40 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU41 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf40, i32 0, i32 10
  %autocast42 = bitcast [8193 x i8]* %fieldRRRROOU41 to i8*
  %fieldTU43 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf39, i32 0, i32 1
  store i8* %autocast42, i8** %fieldTU43, align 8
  %bf44 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU45 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf44, i32 0, i32 10
  %array_castA = bitcast [8193 x i8]* %fieldRRRROOU45 to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 92, i8* %gepBX, align 1
  %bf46 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU47 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf46, i32 0, i32 9
  %autocast48 = bitcast [1024 x i8]* %fieldRRRROOU47 to i8*
  %bf49 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU50 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf49, i32 0, i32 9
  %fun_result51 = call i8* @pstrcpy(i8* %autocast48, i32 1024, i8* bitcast ([6 x i8]* @22 to i8*))
  %bf52 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldTU53 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf52, i32 0, i32 3
  store i32 1, i32* %fieldTU53, align 4
  %bf54 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldTU55 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf54, i32 0, i32 4
  store i32 0, i32* %fieldTU55, align 4
  %bf56 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %s157 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL58 = getelementptr inbounds %TCCState, %TCCState* %s157, i32 0, i32 2
  %ifdef_stack_ptr = load i32*, i32** %fieldLLL58, align 8
  %fieldTU59 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf56, i32 0, i32 6
  store i32* %ifdef_stack_ptr, i32** %fieldTU59, align 8
  %bf60 = load %BufferedFile*, %BufferedFile** %bf, align 8
  ret %BufferedFile* %bf60
}

define void @tcc_close(%BufferedFile* %0) {
entry:
  %bf = alloca %BufferedFile*, align 8
  %bf1 = alloca %BufferedFile**, align 8
  store %BufferedFile* %0, %BufferedFile** %bf, align 8
  store %BufferedFile** %bf, %BufferedFile*** %bf1, align 8
  %total_lines = load i32, i32* @total_lines, align 4
  %bf2 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %bf2, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL, align 4
  %add = add i32 %total_lines, %line_num
  store i32 %add, i32* @total_lines, align 4
  %bf3 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL4 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf3, i32 0, i32 3
  %line_num5 = load i32, i32* %fieldLLL4, align 4
  %sub = sub i32 %add, %line_num5
  %bf6 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL7 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf6, i32 0, i32 2
  %fd = load i32, i32* %fieldLLL7, align 4
  %fun_result = call i32 @close(i32 %fd)
  %bf8 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %castAQ = bitcast %BufferedFile* %bf8 to i8*
  call void @tcc_free(i8* %castAQ)
  ret void
}

define internal void @next_nomacro() {
entry:
  %oror3 = alloca i1, align 1
  %oror2 = alloca i1, align 1
  %oror1 = alloca i1, align 1
  %oror = alloca i1, align 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %is_space_end, %entry
  call void @next_nomacro_spc()
  br label %loop_continue_top_block

loop_continue_top_block:                          ; preds = %loop_top_block
  %tok = load i32, i32* @tok, align 4
  store i32 2344, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.72, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

cond_end_block:                                   ; preds = %is_space_end
  ret void

is_space:                                         ; preds = %loop_continue_top_block
  %inline_result_variable = alloca i32, align 4
  %ch = alloca i32, align 4
  store i32 %tok, i32* %ch, align 4
  %ch4 = load i32, i32* %ch, align 4
  %eq = icmp eq i32 %ch4, 32
  store i1 %eq, i1* %oror3, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

is_space_end:                                     ; preds = %cond_jump_end21
  %inline_result_variable26 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable26, 0
  br i1 %icmpA, label %loop_top_block, label %cond_end_block

cond_jump_then:                                   ; preds = %is_space
  %ch5 = load i32, i32* %ch, align 4
  %eq6 = icmp eq i32 %ch5, 9
  %oror7 = or i1 %eq, %eq6
  store i1 %oror7, i1* %oror3, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %is_space
  %oror_result_value = load i1, i1* %oror3, align 1
  store i1 %oror_result_value, i1* %oror2, align 1
  br i1 %oror_result_value, label %cond_jump_end9, label %cond_jump_then8

cond_jump_then8:                                  ; preds = %cond_jump_end
  %ch10 = load i32, i32* %ch, align 4
  %eq11 = icmp eq i32 %ch10, 11
  %oror12 = or i1 %oror_result_value, %eq11
  store i1 %oror12, i1* %oror2, align 1
  br label %cond_jump_end9

cond_jump_end9:                                   ; preds = %cond_jump_then8, %cond_jump_end
  %oror_result_value13 = load i1, i1* %oror2, align 1
  store i1 %oror_result_value13, i1* %oror1, align 1
  br i1 %oror_result_value13, label %cond_jump_end15, label %cond_jump_then14

cond_jump_then14:                                 ; preds = %cond_jump_end9
  %ch16 = load i32, i32* %ch, align 4
  %eq17 = icmp eq i32 %ch16, 12
  %oror18 = or i1 %oror_result_value13, %eq17
  store i1 %oror18, i1* %oror1, align 1
  br label %cond_jump_end15

cond_jump_end15:                                  ; preds = %cond_jump_then14, %cond_jump_end9
  %oror_result_value19 = load i1, i1* %oror1, align 1
  store i1 %oror_result_value19, i1* %oror, align 1
  br i1 %oror_result_value19, label %cond_jump_end21, label %cond_jump_then20

cond_jump_then20:                                 ; preds = %cond_jump_end15
  %ch22 = load i32, i32* %ch, align 4
  %eq23 = icmp eq i32 %ch22, 13
  %oror24 = or i1 %oror_result_value19, %eq23
  store i1 %oror24, i1* %oror, align 1
  br label %cond_jump_end21

cond_jump_end21:                                  ; preds = %cond_jump_then20, %cond_jump_end15
  %oror_result_value25 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value25 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_space_end
}

define internal void @next_nomacro_spc() {
entry:
  %char_size = alloca i32, align 4
  %size1211 = alloca i32, align 4
  %sep = alloca i32, align 4
  %str = alloca %CString, align 8
  %castXXXX = bitcast %CString* %str to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 32)
  %size1123 = alloca i32, align 4
  %andand1100 = alloca i1, align 1
  %size1044 = alloca i32, align 4
  %oror1008 = alloca i1, align 1
  %oror1007 = alloca i1, align 1
  %oror1006 = alloca i1, align 1
  %oror995 = alloca i1, align 1
  %andand994 = alloca i1, align 1
  %andand964 = alloca i1, align 1
  %andand953 = alloca i1, align 1
  %oror952 = alloca i1, align 1
  %oror951 = alloca i1, align 1
  %andand937 = alloca i1, align 1
  %oror933 = alloca i1, align 1
  %oror932 = alloca i1, align 1
  %oror931 = alloca i1, align 1
  %size886 = alloca i32, align 4
  %size827 = alloca i32, align 4
  %oror809 = alloca i1, align 1
  %andand771 = alloca i1, align 1
  %andand770 = alloca i1, align 1
  %size708 = alloca i32, align 4
  %size638 = alloca i32, align 4
  %andand601 = alloca i1, align 1
  %len = alloca i32, align 4
  %pts = alloca %TokenSym**, align 8
  %andand386 = alloca i1, align 1
  %h269 = alloca i32, align 4
  %s = alloca i8*, align 8
  %h228 = alloca i32, align 4
  %e = alloca %CachedInclude*, align 8
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %s1 = alloca %TCCState*, align 8
  %h = alloca i32, align 4
  %p1 = alloca i8*, align 8
  %p = alloca i8*, align 8
  %ts = alloca %TokenSym*, align 8
  %is_long = alloca i32, align 4
  %c = alloca i32, align 4
  %t = alloca i32, align 4
  %macro_ptr = load i32*, i32** @macro_ptr, align 8
  %icmpB = icmp ne i32* %macro_ptr, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  br label %next_nomacro_spc.redo

cond_else_block:                                  ; preds = %entry
  store i32 2336, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.59, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %next_nomacro1

cond_end:                                         ; preds = %next_nomacro1_end, %cond_end3
  ret void

next_nomacro_spc.redo:                            ; preds = %cond_jump_then120, %cond_jump_then
  %macro_ptr1 = load i32*, i32** @macro_ptr, align 8
  %derefference_valueB = load i32, i32* %macro_ptr1, align 4
  store i32 %derefference_valueB, i32* @tok, align 4
  %tok = load i32, i32* @tok, align 4
  %icmpA = icmp ne i32 %tok, 0
  br i1 %icmpA, label %cond_jump_then2, label %cond_end3

cond_jump_then2:                                  ; preds = %next_nomacro_spc.redo
  %macro_ptr4 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC = ptrtoint i32* %macro_ptr4 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i32*
  store i32* %intToPtrB, i32** @macro_ptr, align 8
  %macro_ptr5 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntI = ptrtoint i32* %macro_ptr5 to i64
  %sub = sub i64 %ptrToIntI, 4
  %iintToPtrD = inttoptr i64 %sub to i32*
  %derefference_valueB6 = load i32, i32* %iintToPtrD, align 4
  store i32 %derefference_valueB6, i32* @tok, align 4
  %tok7 = load i32, i32* @tok, align 4
  %eqtmp = icmp eq i32 %tok7, 179
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX8

cond_end3:                                        ; preds = %cond_end121, %next_nomacro_spc.redo
  br label %cond_end

end_blockX:                                       ; preds = %cond_else_blockX117, %cond_then_block116, %cond_then_block85, %cond_then_block63, %cond_then_block27, %cond_then_block
  %tok119 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok119, 186
  br i1 %eq, label %cond_jump_then120, label %cond_end121

cond_then_block:                                  ; preds = %cond_else_blockX14, %cond_else_blockX12, %cond_else_blockX10, %cond_else_blockX8, %cond_else_blockX, %cond_jump_then2
  %tokc = load %CValue, %CValue* @tokc, align 16
  %macro_ptr18 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC19 = ptrtoint i32* %macro_ptr18 to i64
  %add20 = add i64 %ptrToIntC19, 4
  %intToPtrB21 = inttoptr i64 %add20 to i32*
  store i32* %intToPtrB21, i32** @macro_ptr, align 8
  %macro_ptr22 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntI23 = ptrtoint i32* %macro_ptr22 to i64
  %sub24 = sub i64 %ptrToIntI23, 4
  %iintToPtrD25 = inttoptr i64 %sub24 to i32*
  %derefference_valueB26 = load i32, i32* %iintToPtrD25, align 4
  store i32 %derefference_valueB26, i32* bitcast (%CValue* @tokc to i32*), align 4
  br label %end_blockX

cond_else_blockX:                                 ; preds = %cond_jump_then2
  %eqtmp9 = icmp eq i32 %tok7, 200
  br i1 %eqtmp9, label %cond_then_block, label %cond_else_blockX8
  br label %cond_else_blockX10

cond_else_blockX8:                                ; preds = %cond_else_blockX, %cond_jump_then2
  %eqtmp11 = icmp eq i32 %tok7, 180
  br i1 %eqtmp11, label %cond_then_block, label %cond_else_blockX10
  br label %cond_else_blockX12

cond_else_blockX10:                               ; preds = %cond_else_blockX8, %cond_else_blockX
  %eqtmp13 = icmp eq i32 %tok7, 183
  br i1 %eqtmp13, label %cond_then_block, label %cond_else_blockX12
  br label %cond_else_blockX14

cond_else_blockX12:                               ; preds = %cond_else_blockX10, %cond_else_blockX8
  %eqtmp15 = icmp eq i32 %tok7, 185
  br i1 %eqtmp15, label %cond_then_block, label %cond_else_blockX14
  br label %cond_else_blockX16

cond_else_blockX14:                               ; preds = %cond_else_blockX12, %cond_else_blockX10
  %eqtmp17 = icmp eq i32 %tok7, 186
  br i1 %eqtmp17, label %cond_then_block, label %cond_else_blockX16

cond_else_blockX16:                               ; preds = %after_break, %cond_else_blockX14, %cond_else_blockX12
  %eqtmp29 = icmp eq i32 %tok7, 181
  br i1 %eqtmp29, label %cond_then_block27, label %cond_else_blockX28
  br label %cond_else_blockX30

after_break:                                      ; No predecessors!
  br label %cond_else_blockX16
  br label %cond_else_blockX28

cond_then_block27:                                ; preds = %cond_else_blockX30, %cond_else_blockX28, %cond_else_blockX16
  %tokc34 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr35 = load i32*, i32** @macro_ptr, align 8
  %castAQ = bitcast i32* %macro_ptr35 to %CString*
  store %CString* %castAQ, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %tokc36 = load %CValue, %CValue* @tokc, align 16
  %cstr = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %macro_ptr37 = load i32*, i32** @macro_ptr, align 8
  %castAQ38 = bitcast i32* %macro_ptr37 to i8*
  %ptrToIntC39 = ptrtoint i8* %castAQ38 to i64
  %add40 = add i64 %ptrToIntC39, 32
  %intToPtrB41 = inttoptr i64 %add40 to i8*
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  store i8* %intToPtrB41, i8** %fieldTU, align 8
  %macro_ptr42 = load i32*, i32** @macro_ptr, align 8
  %tokc43 = load %CValue, %CValue* @tokc, align 16
  %cstr44 = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr44, i32 0, i32 0
  %size = load i32, i32* %fieldLLL, align 4
  %icastD = sext i32 %size to i64
  %add45 = add i64 32, %icastD
  %add46 = add i64 %add45, 3
  %rshifttmp = lshr i64 %add46, 2
  %ptrToIntC47 = ptrtoint i32* %macro_ptr42 to i64
  %mul = mul i64 %rshifttmp, 4
  %add48 = add i64 %ptrToIntC47, %mul
  %intToPtrB49 = inttoptr i64 %add48 to i32*
  store i32* %intToPtrB49, i32** @macro_ptr, align 8
  %tokc50 = load %CValue, %CValue* @tokc, align 16
  %cstr51 = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %fieldLLL52 = getelementptr inbounds %CString, %CString* %cstr51, i32 0, i32 0
  %size53 = load i32, i32* %fieldLLL52, align 4
  %icastD54 = sext i32 %size53 to i64
  %add55 = add i64 32, %icastD54
  %add56 = add i64 %add55, 3
  %rshifttmp57 = lshr i64 %add56, 2
  %ptrToIntI58 = ptrtoint i32* %intToPtrB49 to i64
  %mul59 = mul i64 %rshifttmp57, 4
  %sub60 = sub i64 %ptrToIntI58, %mul59
  %iintToPtrD61 = inttoptr i64 %sub60 to i32*
  br label %end_blockX

cond_else_blockX28:                               ; preds = %cond_else_blockX16, %after_break
  %eqtmp31 = icmp eq i32 %tok7, 184
  br i1 %eqtmp31, label %cond_then_block27, label %cond_else_blockX30
  br label %cond_else_blockX32

cond_else_blockX30:                               ; preds = %cond_else_blockX28, %cond_else_blockX16
  %eqtmp33 = icmp eq i32 %tok7, 206
  br i1 %eqtmp33, label %cond_then_block27, label %cond_else_blockX32

cond_else_blockX32:                               ; preds = %after_break62, %cond_else_blockX30, %cond_else_blockX28
  %eqtmp65 = icmp eq i32 %tok7, 192
  br i1 %eqtmp65, label %cond_then_block63, label %cond_else_blockX64
  br label %cond_else_blockX66

after_break62:                                    ; No predecessors!
  br label %cond_else_blockX32
  br label %cond_else_blockX64

cond_then_block63:                                ; preds = %cond_else_blockX66, %cond_else_blockX64, %cond_else_blockX32
  %tokc70 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr71 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 0
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  store i32 %load_element, i32* bitcast (%CValue* @tokc to i32*), align 4
  %tokc72 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr73 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB74 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY75 = getelementptr inbounds i32, i32* %element_addressAB74, i32 1
  %load_element76 = load i32, i32* %element_addressXYXZY75, align 4
  store i32 %load_element76, i32* getelementptr (i32, i32* bitcast (%CValue* @tokc to i32*), i32 1), align 4
  %macro_ptr77 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC78 = ptrtoint i32* %macro_ptr77 to i64
  %add79 = add i64 %ptrToIntC78, 8
  %intToPtrB80 = inttoptr i64 %add79 to i32*
  store i32* %intToPtrB80, i32** @macro_ptr, align 8
  %ptrToIntI81 = ptrtoint i32* %intToPtrB80 to i64
  %sub82 = sub i64 %ptrToIntI81, 8
  %iintToPtrD83 = inttoptr i64 %sub82 to i32*
  br label %end_blockX

cond_else_blockX64:                               ; preds = %cond_else_blockX32, %after_break62
  %eqtmp67 = icmp eq i32 %tok7, 201
  br i1 %eqtmp67, label %cond_then_block63, label %cond_else_blockX66
  br label %cond_else_blockX68

cond_else_blockX66:                               ; preds = %cond_else_blockX64, %cond_else_blockX32
  %eqtmp69 = icmp eq i32 %tok7, 202
  br i1 %eqtmp69, label %cond_then_block63, label %cond_else_blockX68

cond_else_blockX68:                               ; preds = %after_break84, %cond_else_blockX66, %cond_else_blockX64
  %eqtmp87 = icmp eq i32 %tok7, 193
  br i1 %eqtmp87, label %cond_then_block85, label %cond_else_blockX86

after_break84:                                    ; No predecessors!
  br label %cond_else_blockX68
  br label %cond_else_blockX86

cond_then_block85:                                ; preds = %cond_else_blockX68
  %tokc88 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr89 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB90 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY91 = getelementptr inbounds i32, i32* %element_addressAB90, i32 0
  %load_element92 = load i32, i32* %element_addressXYXZY91, align 4
  store i32 %load_element92, i32* bitcast (%CValue* @tokc to i32*), align 4
  %tokc93 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr94 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB95 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY96 = getelementptr inbounds i32, i32* %element_addressAB95, i32 1
  %load_element97 = load i32, i32* %element_addressXYXZY96, align 4
  store i32 %load_element97, i32* getelementptr (i32, i32* bitcast (%CValue* @tokc to i32*), i32 1), align 4
  %tokc98 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr99 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB100 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY101 = getelementptr inbounds i32, i32* %element_addressAB100, i32 2
  %load_element102 = load i32, i32* %element_addressXYXZY101, align 4
  store i32 %load_element102, i32* getelementptr (i32, i32* bitcast (%CValue* @tokc to i32*), i32 2), align 4
  %tokc103 = load %CValue, %CValue* @tokc, align 16
  %macro_ptr104 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB105 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY106 = getelementptr inbounds i32, i32* %element_addressAB105, i32 3
  %load_element107 = load i32, i32* %element_addressXYXZY106, align 4
  store i32 %load_element107, i32* getelementptr (i32, i32* bitcast (%CValue* @tokc to i32*), i32 3), align 4
  %macro_ptr108 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC109 = ptrtoint i32* %macro_ptr108 to i64
  %add110 = add i64 %ptrToIntC109, 16
  %intToPtrB111 = inttoptr i64 %add110 to i32*
  store i32* %intToPtrB111, i32** @macro_ptr, align 8
  %ptrToIntI112 = ptrtoint i32* %intToPtrB111 to i64
  %sub113 = sub i64 %ptrToIntI112, 16
  %iintToPtrD114 = inttoptr i64 %sub113 to i32*
  br label %end_blockX

cond_else_blockX86:                               ; preds = %after_break115, %cond_else_blockX68, %after_break84
  br label %cond_then_block116

after_break115:                                   ; No predecessors!
  br label %cond_else_blockX86
  br label %cond_else_blockX117

cond_then_block116:                               ; preds = %cond_else_blockX86
  br label %end_blockX

cond_else_blockX117:                              ; preds = %after_break118, %after_break115
  br label %end_blockX

after_break118:                                   ; No predecessors!
  br label %cond_else_blockX117

cond_jump_then120:                                ; preds = %end_blockX
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %tokc122 = load %CValue, %CValue* @tokc, align 16
  %i = load i32, i32* bitcast (%CValue* @tokc to i32*), align 4
  %fieldTU123 = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  store i32 %i, i32* %fieldTU123, align 4
  br label %next_nomacro_spc.redo
  br label %cond_end121

cond_end121:                                      ; preds = %cond_jump_then120, %end_blockX
  br label %cond_end3

next_nomacro1:                                    ; preds = %cond_else_block
  %file124 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL125 = getelementptr inbounds %BufferedFile, %BufferedFile* %file124, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL125, align 8
  store i8* %buf_ptr, i8** %p, align 8
  br label %next_nomacro1.redo_no_start

next_nomacro1_end:                                ; preds = %next_nomacro1.keep_tok_flags
  br label %cond_end

next_nomacro1.redo_no_start:                      ; preds = %cond_jump_elif_then01859, %cond_jump_then1857, %cond_jump_then424, %cond_jump_then397, %cond_jump_then361, %cond_end312, %cond_else_block166, %cond_else_block180, %cond_then_block144, %next_nomacro1
  %p126 = load i8*, i8** %p, align 8
  %derefference_valueB127 = load i8, i8* %p126, align 1
  %icastKY = zext i8 %derefference_valueB127 to i32
  store i32 %icastKY, i32* %c, align 4
  %c129 = load i32, i32* %c, align 4
  %eqtmp132 = icmp eq i32 %c129, 32
  br i1 %eqtmp132, label %cond_then_block130, label %cond_else_blockX131
  br label %cond_else_blockX133

end_blockX128:                                    ; preds = %cond_else_blockX1919, %cond_then_block1918, %cond_then_block1881, %cond_end1863, %cond_end1822, %cond_end1785, %cond_end1748, %cond_end1711, %cond_end1674, %cond_end1617, %cond_end1567, %cond_end1518, %cond_end1469, %cond_end1395, %cond_end1321, %cond_end1246, %cond_end1116, %cstr_ccat_end1043, %cond_end788, %cond_end580, %cond_end399, %cond_end198
  store i32 0, i32* @tok_flags, align 4
  br label %next_nomacro1.keep_tok_flags

cond_then_block130:                               ; preds = %cond_else_blockX131, %next_nomacro1.redo_no_start
  %c135 = load i32, i32* %c, align 4
  store i32 %c135, i32* @tok, align 4
  %p136 = load i8*, i8** %p, align 8
  %ptrToIntC137 = ptrtoint i8* %p136 to i64
  %add138 = add i64 %ptrToIntC137, 1
  %intToPtrB139 = inttoptr i64 %add138 to i8*
  store i8* %intToPtrB139, i8** %p, align 8
  %p140 = load i8*, i8** %p, align 8
  %ptrToIntI141 = ptrtoint i8* %p140 to i64
  %sub142 = sub i64 %ptrToIntI141, 1
  %iintToPtrD143 = inttoptr i64 %sub142 to i8*
  br label %next_nomacro1.keep_tok_flags
  br label %cond_then_block144

cond_else_blockX131:                              ; preds = %next_nomacro1.redo_no_start
  %eqtmp134 = icmp eq i32 %c129, 9
  br i1 %eqtmp134, label %cond_then_block130, label %cond_else_blockX133

cond_else_blockX133:                              ; preds = %cond_else_blockX131, %next_nomacro1.redo_no_start
  %eqtmp146 = icmp eq i32 %c129, 12
  br i1 %eqtmp146, label %cond_then_block144, label %cond_else_blockX145
  br label %cond_then_block144

next_nomacro1.keep_tok_flags:                     ; preds = %end_blockX128, %cond_end362, %cond_jump_then196, %cond_then_block130
  %file1922 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p1923 = load i8*, i8** %p, align 8
  %fieldTU1924 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1922, i32 0, i32 0
  store i8* %p1923, i8** %fieldTU1924, align 8
  br label %next_nomacro1_end

cond_then_block144:                               ; preds = %cond_else_blockX147, %cond_else_blockX145, %cond_else_blockX145, %cond_else_blockX133, %cond_else_blockX133, %cond_then_block130
  %p151 = load i8*, i8** %p, align 8
  %ptrToIntC152 = ptrtoint i8* %p151 to i64
  %add153 = add i64 %ptrToIntC152, 1
  %intToPtrB154 = inttoptr i64 %add153 to i8*
  store i8* %intToPtrB154, i8** %p, align 8
  %p155 = load i8*, i8** %p, align 8
  %ptrToIntI156 = ptrtoint i8* %p155 to i64
  %sub157 = sub i64 %ptrToIntI156, 1
  %iintToPtrD158 = inttoptr i64 %sub157 to i8*
  br label %next_nomacro1.redo_no_start
  br label %cond_then_block159

cond_else_blockX145:                              ; preds = %cond_else_blockX133
  %eqtmp148 = icmp eq i32 %c129, 11
  br i1 %eqtmp148, label %cond_then_block144, label %cond_else_blockX147
  br label %cond_then_block144

cond_else_blockX147:                              ; preds = %cond_else_blockX145
  %eqtmp150 = icmp eq i32 %c129, 13
  br i1 %eqtmp150, label %cond_then_block144, label %cond_else_blockX149

cond_else_blockX149:                              ; preds = %cond_else_blockX147
  %eqtmp161 = icmp eq i32 %c129, 92
  br i1 %eqtmp161, label %cond_then_block159, label %cond_else_blockX160

cond_then_block159:                               ; preds = %cond_else_blockX149, %cond_then_block144
  %p162 = load i8*, i8** %p, align 8
  %file163 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL164 = getelementptr inbounds %BufferedFile, %BufferedFile* %file163, i32 0, i32 1
  %buf_end = load i8*, i8** %fieldLLL164, align 8
  %gteq_unsinged = icmp uge i8* %p162, %buf_end
  br i1 %gteq_unsinged, label %cond_jump_then165, label %cond_else_block166

cond_else_blockX160:                              ; preds = %after_break335, %cond_else_blockX149
  %eqtmp338 = icmp eq i32 %c129, 10
  br i1 %eqtmp338, label %cond_then_block336, label %cond_else_blockX337

cond_jump_then165:                                ; preds = %cond_then_block159
  %file168 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p169 = load i8*, i8** %p, align 8
  %fieldTU170 = getelementptr inbounds %BufferedFile, %BufferedFile* %file168, i32 0, i32 0
  store i8* %p169, i8** %fieldTU170, align 8
  %fun_result = call i32 @handle_eob()
  %file171 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL172 = getelementptr inbounds %BufferedFile, %BufferedFile* %file171, i32 0, i32 0
  %buf_ptr173 = load i8*, i8** %fieldLLL172, align 8
  store i8* %buf_ptr173, i8** %p, align 8
  %p174 = load i8*, i8** %p, align 8
  %file175 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL176 = getelementptr inbounds %BufferedFile, %BufferedFile* %file175, i32 0, i32 1
  %buf_end177 = load i8*, i8** %fieldLLL176, align 8
  %gteq_unsinged178 = icmp uge i8* %p174, %buf_end177
  br i1 %gteq_unsinged178, label %cond_jump_then179, label %cond_else_block180

cond_else_block166:                               ; preds = %cond_then_block159
  %file182 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p183 = load i8*, i8** %p, align 8
  %fieldTU184 = getelementptr inbounds %BufferedFile, %BufferedFile* %file182, i32 0, i32 0
  store i8* %p183, i8** %fieldTU184, align 8
  %p185 = load i8*, i8** %p, align 8
  %derefference_valueB186 = load i8, i8* %p185, align 1
  %icastKY187 = zext i8 %derefference_valueB186 to i32
  store i32 %icastKY187, i32* @ch, align 4
  call void @handle_stray()
  %file188 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL189 = getelementptr inbounds %BufferedFile, %BufferedFile* %file188, i32 0, i32 0
  %buf_ptr190 = load i8*, i8** %fieldLLL189, align 8
  store i8* %buf_ptr190, i8** %p, align 8
  br label %next_nomacro1.redo_no_start
  br label %cond_end167

cond_end167:                                      ; preds = %cond_else_block166, %cond_end181
  br label %next_nomacro1.parse_eof

cond_jump_then179:                                ; preds = %cond_jump_then165
  br label %next_nomacro1.parse_eof
  br label %cond_end181

cond_else_block180:                               ; preds = %cond_jump_then165
  br label %next_nomacro1.redo_no_start
  br label %cond_end181

cond_end181:                                      ; preds = %cond_else_block180, %cond_jump_then179
  br label %cond_end167

next_nomacro1.parse_eof:                          ; preds = %cond_end167, %cond_jump_then179
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  store %TCCState* %tcc_state, %TCCState** %s1, align 8
  %parse_flags = load i32, i32* @parse_flags, align 4
  %andtmp = and i32 %parse_flags, 4
  %icmpA191 = icmp ne i32 %andtmp, 0
  store i1 %icmpA191, i1* %andand, align 1
  br i1 %icmpA191, label %cond_jump_then192, label %cond_jump_end

cond_jump_then192:                                ; preds = %next_nomacro1.parse_eof
  %tok_flags = load i32, i32* @tok_flags, align 4
  %andtmp193 = and i32 %tok_flags, 8
  %logical_denial = icmp eq i32 %andtmp193, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA194 = icmp ne i32 %castOOOO, 0
  %andand195 = and i1 %icmpA191, %icmpA194
  store i1 %andand195, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then192, %next_nomacro1.parse_eof
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then196, label %cond_jump_elif0

cond_jump_then196:                                ; preds = %cond_jump_end
  %tok_flags199 = load i32, i32* @tok_flags, align 4
  %ortmp = or i32 %tok_flags199, 8
  store i32 %ortmp, i32* @tok_flags, align 4
  store i32 10, i32* @tok, align 4
  br label %next_nomacro1.keep_tok_flags
  br label %cond_end198

cond_jump_elif0:                                  ; preds = %cond_jump_end
  %s1200 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL201 = getelementptr inbounds %TCCState, %TCCState* %s1200, i32 0, i32 1
  %include_stack_ptr = load %BufferedFile**, %BufferedFile*** %fieldLLL201, align 8
  %s1202 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s1202, i32 0, i32 51
  %autocast = bitcast [32 x %BufferedFile*]* %fieldRRRROOU to %BufferedFile**
  %eq203 = icmp eq %BufferedFile** %include_stack_ptr, %autocast
  store i1 %eq203, i1* %oror, align 1
  br i1 %eq203, label %cond_jump_end205, label %cond_jump_then204

cond_jump_elif_then0:                             ; preds = %cond_jump_end205
  store i32 -1, i32* @tok, align 4
  br label %cond_end198

cond_else_block197:                               ; preds = %cond_jump_end205
  %tok_flags212 = load i32, i32* @tok_flags, align 4
  %andtmp213 = and i32 %tok_flags212, -9
  store i32 %andtmp213, i32* @tok_flags, align 4
  %tok_flags214 = load i32, i32* @tok_flags, align 4
  %andtmp215 = and i32 %tok_flags214, 4
  %icmpA216 = icmp ne i32 %andtmp215, 0
  br i1 %icmpA216, label %cond_jump_then217, label %cond_end218

cond_end198:                                      ; preds = %cond_end312, %cond_jump_elif_then0, %cond_jump_then196
  br label %end_blockX128

cond_jump_then204:                                ; preds = %cond_jump_elif0
  %parse_flags206 = load i32, i32* @parse_flags, align 4
  %andtmp207 = and i32 %parse_flags206, 1
  %logical_denial208 = icmp eq i32 %andtmp207, 0
  %castOOOO209 = zext i1 %logical_denial208 to i32
  %icmpA210 = icmp ne i32 %castOOOO209, 0
  %oror211 = or i1 %eq203, %icmpA210
  store i1 %oror211, i1* %oror, align 1
  br label %cond_jump_end205

cond_jump_end205:                                 ; preds = %cond_jump_then204, %cond_jump_elif0
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then0, label %cond_else_block197

cond_jump_then217:                                ; preds = %cond_else_block197
  %s1219 = load %TCCState*, %TCCState** %s1, align 8
  %file220 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL221 = getelementptr inbounds %BufferedFile, %BufferedFile* %file220, i32 0, i32 7
  %inc_type = load i8, i8* %fieldLLL221, align 1
  %icastL = sext i8 %inc_type to i32
  %file222 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU223 = getelementptr inbounds %BufferedFile, %BufferedFile* %file222, i32 0, i32 8
  %autocast224 = bitcast [512 x i8]* %fieldRRRROOU223 to i8*
  %file225 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL226 = getelementptr inbounds %BufferedFile, %BufferedFile* %file225, i32 0, i32 5
  %ifndef_macro_saved = load i32, i32* %fieldLLL226, align 4
  store i32 2395, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.60, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %add_cached_include

cond_end218:                                      ; preds = %add_cached_include_end, %cond_else_block197
  %tcc_state308 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL309 = getelementptr inbounds %TCCState, %TCCState* %tcc_state308, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL309, align 4
  %icmpA310 = icmp ne i32 %do_debug, 0
  br i1 %icmpA310, label %cond_jump_then311, label %cond_end312

add_cached_include:                               ; preds = %cond_jump_then217
  %s1227 = alloca %TCCState*, align 8
  store %TCCState* %s1219, %TCCState** %s1227, align 8
  %type = alloca i32, align 4
  store i32 %icastL, i32* %type, align 4
  %filename = alloca i8*, align 8
  store i8* %autocast224, i8** %filename, align 8
  %ifndef_macro = alloca i32, align 4
  store i32 %ifndef_macro_saved, i32* %ifndef_macro, align 4
  %s1229 = load %TCCState*, %TCCState** %s1227, align 8
  %type230 = load i32, i32* %type, align 4
  %filename231 = load i8*, i8** %filename, align 8
  %fun_result232 = call %CachedInclude* @search_cached_include(%TCCState* %s1229, i32 %type230, i8* %filename231)
  %icmpB233 = icmp ne %CachedInclude* %fun_result232, null
  br i1 %icmpB233, label %cond_jump_then234, label %cond_end235

add_cached_include_end:                           ; preds = %hash_cached_include_end, %cond_jump_then245, %cond_jump_then234
  br label %cond_end218

cond_jump_then234:                                ; preds = %add_cached_include
  br label %add_cached_include_end

cond_end235:                                      ; preds = %add_cached_include
  %filename236 = load i8*, i8** %filename, align 8
  %fun_result237 = call i64 @strlen(i8* %filename236)
  %add238 = add i64 12, %fun_result237
  %fun_result239 = call i8* @tcc_malloc(i64 %add238)
  %castAQ240 = bitcast i8* %fun_result239 to %CachedInclude*
  store %CachedInclude* %castAQ240, %CachedInclude** %e, align 8
  %e241 = load %CachedInclude*, %CachedInclude** %e, align 8
  %logical_denial242 = icmp eq %CachedInclude* %e241, null
  %castOOOO243 = zext i1 %logical_denial242 to i32
  %icmpA244 = icmp ne i32 %castOOOO243, 0
  br i1 %icmpA244, label %cond_jump_then245, label %cond_end246

cond_jump_then245:                                ; preds = %cond_end235
  br label %add_cached_include_end

cond_end246:                                      ; preds = %cond_end235
  %e247 = load %CachedInclude*, %CachedInclude** %e, align 8
  %type248 = load i32, i32* %type, align 4
  %icastJ = trunc i32 %type248 to i8
  %fieldTU249 = getelementptr inbounds %CachedInclude, %CachedInclude* %e247, i32 0, i32 2
  store i8 %icastJ, i8* %fieldTU249, align 1
  %e250 = load %CachedInclude*, %CachedInclude** %e, align 8
  %fieldRRRROOU251 = getelementptr inbounds %CachedInclude, %CachedInclude* %e250, i32 0, i32 3
  %autocast252 = bitcast [1 x i8]* %fieldRRRROOU251 to i8*
  %filename253 = load i8*, i8** %filename, align 8
  %fun_result254 = call i8* @strcpy(i8* %autocast252, i8* %filename253)
  %e255 = load %CachedInclude*, %CachedInclude** %e, align 8
  %ifndef_macro256 = load i32, i32* %ifndef_macro, align 4
  %fieldTU257 = getelementptr inbounds %CachedInclude, %CachedInclude* %e255, i32 0, i32 0
  store i32 %ifndef_macro256, i32* %fieldTU257, align 4
  %s1258 = load %TCCState*, %TCCState** %s1227, align 8
  %fieldLLL259 = getelementptr inbounds %TCCState, %TCCState* %s1258, i32 0, i32 7
  %cached_includes = load %CachedInclude**, %CachedInclude*** %fieldLLL259, align 8
  %castAQ260 = bitcast %CachedInclude*** %fieldLLL259 to i8***
  %s1261 = load %TCCState*, %TCCState** %s1227, align 8
  %fieldLLL262 = getelementptr inbounds %TCCState, %TCCState* %s1261, i32 0, i32 8
  %nb_cached_includes = load i32, i32* %fieldLLL262, align 4
  %e263 = load %CachedInclude*, %CachedInclude** %e, align 8
  %castAQ264 = bitcast %CachedInclude* %e263 to i8*
  call void @dynarray_add(i8*** %castAQ260, i32* %fieldLLL262, i8* %castAQ264)
  %type265 = load i32, i32* %type, align 4
  %filename266 = load i8*, i8** %filename, align 8
  store i32 2411, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.61, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %hash_cached_include

hash_cached_include:                              ; preds = %cond_end246
  %inline_result_variable = alloca i32, align 4
  %type267 = alloca i32, align 4
  store i32 %type265, i32* %type267, align 4
  %filename268 = alloca i8*, align 8
  store i8* %filename266, i8** %filename268, align 8
  store i32 1, i32* %h269, align 4
  %h270 = load i32, i32* %h269, align 4
  %mul271 = mul i32 %h270, 263
  %type272 = load i32, i32* %type267, align 4
  %add273 = add i32 %mul271, %type272
  store i32 %add273, i32* %h269, align 4
  %filename274 = load i8*, i8** %filename268, align 8
  store i8* %filename274, i8** %s, align 8
  br label %loop_top_block

hash_cached_include_end:                          ; preds = %cond_end_block
  %inline_result_variable296 = load i32, i32* %inline_result_variable, align 4
  store i32 %inline_result_variable296, i32* %h228, align 4
  %e297 = load %CachedInclude*, %CachedInclude** %e, align 8
  %s1298 = load %TCCState*, %TCCState** %s1227, align 8
  %fieldRRRROOU299 = getelementptr inbounds %TCCState, %TCCState* %s1298, i32 0, i32 53
  %h300 = load i32, i32* %h228, align 4
  %array_castG = bitcast [512 x i32]* %fieldRRRROOU299 to i32*
  %gepLY = getelementptr i32, i32* %array_castG, i32 %h300
  %elementYYY = load i32, i32* %gepLY, align 4
  %fieldTU301 = getelementptr inbounds %CachedInclude, %CachedInclude* %e297, i32 0, i32 1
  store i32 %elementYYY, i32* %fieldTU301, align 4
  %s1302 = load %TCCState*, %TCCState** %s1227, align 8
  %fieldRRRROOU303 = getelementptr inbounds %TCCState, %TCCState* %s1302, i32 0, i32 53
  %h304 = load i32, i32* %h228, align 4
  %s1305 = load %TCCState*, %TCCState** %s1227, align 8
  %fieldLLL306 = getelementptr inbounds %TCCState, %TCCState* %s1305, i32 0, i32 8
  %nb_cached_includes307 = load i32, i32* %fieldLLL306, align 4
  %array_castA = bitcast [512 x i32]* %fieldRRRROOU303 to i32*
  %gepBX = getelementptr i32, i32* %array_castA, i32 %h304
  store i32 %nb_cached_includes307, i32* %gepBX, align 4
  br label %add_cached_include_end

loop_top_block:                                   ; preds = %cond_then_block278, %hash_cached_include
  %s275 = load i8*, i8** %s, align 8
  %derefference_valueB276 = load i8, i8* %s275, align 1
  %icmpA277 = icmp ne i8 %derefference_valueB276, 0
  br i1 %icmpA277, label %cond_then_block278, label %cond_end_block

cond_then_block278:                               ; preds = %loop_top_block
  %h279 = load i32, i32* %h269, align 4
  %mul280 = mul i32 %h279, 263
  %s281 = load i8*, i8** %s, align 8
  %derefference_valueB282 = load i8, i8* %s281, align 1
  %icastKY283 = zext i8 %derefference_valueB282 to i32
  %add284 = add i32 %mul280, %icastKY283
  store i32 %add284, i32* %h269, align 4
  %s285 = load i8*, i8** %s, align 8
  %ptrToIntC286 = ptrtoint i8* %s285 to i64
  %add287 = add i64 %ptrToIntC286, 1
  %intToPtrB288 = inttoptr i64 %add287 to i8*
  store i8* %intToPtrB288, i8** %s, align 8
  %s289 = load i8*, i8** %s, align 8
  %ptrToIntI290 = ptrtoint i8* %s289 to i64
  %sub291 = sub i64 %ptrToIntI290, 1
  %iintToPtrD292 = inttoptr i64 %sub291 to i8*
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %h293 = load i32, i32* %h269, align 4
  %andtmp294 = and i32 %h293, 511
  store i32 %andtmp294, i32* %h269, align 4
  %h295 = load i32, i32* %h269, align 4
  store i32 %h295, i32* %inline_result_variable, align 4
  br label %hash_cached_include_end

cond_jump_then311:                                ; preds = %cond_end218
  call void @put_stabd(i32 162, i32 0, i32 0)
  br label %cond_end312

cond_end312:                                      ; preds = %cond_jump_then311, %cond_end218
  %file313 = load %BufferedFile*, %BufferedFile** @file, align 8
  call void @tcc_close(%BufferedFile* %file313)
  %s1314 = load %TCCState*, %TCCState** %s1, align 8
  %s1315 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL316 = getelementptr inbounds %TCCState, %TCCState* %s1315, i32 0, i32 1
  %include_stack_ptr317 = load %BufferedFile**, %BufferedFile*** %fieldLLL316, align 8
  %ptrToIntI318 = ptrtoint %BufferedFile** %include_stack_ptr317 to i64
  %sub319 = sub i64 %ptrToIntI318, 8
  %iintToPtrD320 = inttoptr i64 %sub319 to %BufferedFile**
  %fieldTU321 = getelementptr inbounds %TCCState, %TCCState* %s1314, i32 0, i32 1
  store %BufferedFile** %iintToPtrD320, %BufferedFile*** %fieldTU321, align 8
  %s1322 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL323 = getelementptr inbounds %TCCState, %TCCState* %s1322, i32 0, i32 1
  %include_stack_ptr324 = load %BufferedFile**, %BufferedFile*** %fieldLLL323, align 8
  %ptrToIntC325 = ptrtoint %BufferedFile** %include_stack_ptr324 to i64
  %add326 = add i64 %ptrToIntC325, 8
  %intToPtrB327 = inttoptr i64 %add326 to %BufferedFile**
  %s1328 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL329 = getelementptr inbounds %TCCState, %TCCState* %s1328, i32 0, i32 1
  %include_stack_ptr330 = load %BufferedFile**, %BufferedFile*** %fieldLLL329, align 8
  %derefference_valueB331 = load %BufferedFile*, %BufferedFile** %include_stack_ptr330, align 8
  store %BufferedFile* %derefference_valueB331, %BufferedFile** @file, align 8
  %file332 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL333 = getelementptr inbounds %BufferedFile, %BufferedFile* %file332, i32 0, i32 0
  %buf_ptr334 = load i8*, i8** %fieldLLL333, align 8
  store i8* %buf_ptr334, i8** %p, align 8
  br label %next_nomacro1.redo_no_start
  br label %cond_end198

after_break335:                                   ; No predecessors!
  br label %cond_else_blockX160
  br label %cond_else_blockX337

cond_then_block336:                               ; preds = %cond_else_blockX160
  %file339 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file340 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL341 = getelementptr inbounds %BufferedFile, %BufferedFile* %file340, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL341, align 4
  %add342 = add i32 %line_num, 1
  %fieldTU343 = getelementptr inbounds %BufferedFile, %BufferedFile* %file339, i32 0, i32 3
  store i32 %add342, i32* %fieldTU343, align 4
  %file344 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL345 = getelementptr inbounds %BufferedFile, %BufferedFile* %file344, i32 0, i32 3
  %line_num346 = load i32, i32* %fieldLLL345, align 4
  %sub347 = sub i32 %line_num346, 1
  %tok_flags348 = load i32, i32* @tok_flags, align 4
  %ortmp349 = or i32 %tok_flags348, 1
  store i32 %ortmp349, i32* @tok_flags, align 4
  %p350 = load i8*, i8** %p, align 8
  %ptrToIntC351 = ptrtoint i8* %p350 to i64
  %add352 = add i64 %ptrToIntC351, 1
  %intToPtrB353 = inttoptr i64 %add352 to i8*
  store i8* %intToPtrB353, i8** %p, align 8
  %p354 = load i8*, i8** %p, align 8
  %ptrToIntI355 = ptrtoint i8* %p354 to i64
  %sub356 = sub i64 %ptrToIntI355, 1
  %iintToPtrD357 = inttoptr i64 %sub356 to i8*
  %parse_flags358 = load i32, i32* @parse_flags, align 4
  %andtmp359 = and i32 %parse_flags358, 4
  %eq360 = icmp eq i32 0, %andtmp359
  br i1 %eq360, label %cond_jump_then361, label %cond_end362

cond_else_blockX337:                              ; preds = %cond_else_blockX160, %after_break335
  %eqtmp365 = icmp eq i32 %c129, 35
  br i1 %eqtmp365, label %cond_then_block363, label %cond_else_blockX364

cond_jump_then361:                                ; preds = %cond_then_block336
  br label %next_nomacro1.redo_no_start
  br label %cond_end362

cond_end362:                                      ; preds = %cond_jump_then361, %cond_then_block336
  store i32 10, i32* @tok, align 4
  br label %next_nomacro1.keep_tok_flags
  br label %cond_then_block363

cond_then_block363:                               ; preds = %cond_else_blockX337, %cond_end362
  %p366 = load i8*, i8** %p, align 8
  %ptrToIntC367 = ptrtoint i8* %p366 to i64
  %add368 = add i64 %ptrToIntC367, 1
  %intToPtrB369 = inttoptr i64 %add368 to i8*
  store i8* %intToPtrB369, i8** %p, align 8
  %p370 = load i8*, i8** %p, align 8
  %ptrToIntI371 = ptrtoint i8* %p370 to i64
  %sub372 = sub i64 %ptrToIntI371, 1
  %iintToPtrD373 = inttoptr i64 %sub372 to i8*
  %p374 = load i8*, i8** %p, align 8
  %derefference_valueB375 = load i8, i8* %p374, align 1
  %icastKY376 = zext i8 %derefference_valueB375 to i32
  store i32 %icastKY376, i32* %c, align 4
  %c377 = load i32, i32* %c, align 4
  %eq378 = icmp eq i32 %c377, 92
  br i1 %eq378, label %cond_jump_then379, label %cond_end380

cond_else_blockX364:                              ; preds = %after_break432, %cond_else_blockX337
  %eqtmp435 = icmp eq i32 %c129, 97
  br i1 %eqtmp435, label %cond_then_block433, label %cond_else_blockX434
  br label %cond_else_blockX436

cond_jump_then379:                                ; preds = %cond_then_block363
  %p381 = load i8*, i8** %p, align 8
  %fun_result382 = call i32 @handle_stray1(i8* %p381)
  store i32 %fun_result382, i32* %c, align 4
  %file383 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL384 = getelementptr inbounds %BufferedFile, %BufferedFile* %file383, i32 0, i32 0
  %buf_ptr385 = load i8*, i8** %fieldLLL384, align 8
  store i8* %buf_ptr385, i8** %p, align 8
  br label %cond_end380

cond_end380:                                      ; preds = %cond_jump_then379, %cond_then_block363
  %tok_flags387 = load i32, i32* @tok_flags, align 4
  %andtmp388 = and i32 %tok_flags387, 1
  %icmpA389 = icmp ne i32 %andtmp388, 0
  store i1 %icmpA389, i1* %andand386, align 1
  br i1 %icmpA389, label %cond_jump_then390, label %cond_jump_end391

cond_jump_then390:                                ; preds = %cond_end380
  %parse_flags392 = load i32, i32* @parse_flags, align 4
  %andtmp393 = and i32 %parse_flags392, 1
  %icmpA394 = icmp ne i32 %andtmp393, 0
  %andand395 = and i1 %icmpA389, %icmpA394
  store i1 %andand395, i1* %andand386, align 1
  br label %cond_jump_end391

cond_jump_end391:                                 ; preds = %cond_jump_then390, %cond_end380
  %andand_result_value396 = load i1, i1* %andand386, align 1
  br i1 %andand_result_value396, label %cond_jump_then397, label %cond_else_block398

cond_jump_then397:                                ; preds = %cond_jump_end391
  %file400 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p401 = load i8*, i8** %p, align 8
  %fieldTU402 = getelementptr inbounds %BufferedFile, %BufferedFile* %file400, i32 0, i32 0
  store i8* %p401, i8** %fieldTU402, align 8
  %tok_flags403 = load i32, i32* @tok_flags, align 4
  %andtmp404 = and i32 %tok_flags403, 2
  call void @preprocess(i32 %andtmp404)
  %file405 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL406 = getelementptr inbounds %BufferedFile, %BufferedFile* %file405, i32 0, i32 0
  %buf_ptr407 = load i8*, i8** %fieldLLL406, align 8
  store i8* %buf_ptr407, i8** %p, align 8
  br label %next_nomacro1.redo_no_start
  br label %cond_end399

cond_else_block398:                               ; preds = %cond_jump_end391
  %c408 = load i32, i32* %c, align 4
  %eq409 = icmp eq i32 %c408, 35
  br i1 %eq409, label %cond_jump_then410, label %cond_else_block411

cond_end399:                                      ; preds = %cond_end412, %cond_jump_then397
  br label %end_blockX128

cond_jump_then410:                                ; preds = %cond_else_block398
  %p413 = load i8*, i8** %p, align 8
  %ptrToIntC414 = ptrtoint i8* %p413 to i64
  %add415 = add i64 %ptrToIntC414, 1
  %intToPtrB416 = inttoptr i64 %add415 to i8*
  store i8* %intToPtrB416, i8** %p, align 8
  %p417 = load i8*, i8** %p, align 8
  %ptrToIntI418 = ptrtoint i8* %p417 to i64
  %sub419 = sub i64 %ptrToIntI418, 1
  %iintToPtrD420 = inttoptr i64 %sub419 to i8*
  store i32 182, i32* @tok, align 4
  br label %cond_end412

cond_else_block411:                               ; preds = %cond_else_block398
  %parse_flags421 = load i32, i32* @parse_flags, align 4
  %andtmp422 = and i32 %parse_flags421, 8
  %icmpA423 = icmp ne i32 %andtmp422, 0
  br i1 %icmpA423, label %cond_jump_then424, label %cond_else_block425

cond_end412:                                      ; preds = %cond_end426, %cond_jump_then410
  br label %cond_end399

cond_jump_then424:                                ; preds = %cond_else_block411
  %p427 = load i8*, i8** %p, align 8
  %ptrToIntI428 = ptrtoint i8* %p427 to i64
  %sub429 = sub i64 %ptrToIntI428, 1
  %iintToPtrD430 = inttoptr i64 %sub429 to i8*
  %fun_result431 = call i8* @parse_line_comment(i8* %iintToPtrD430)
  store i8* %fun_result431, i8** %p, align 8
  br label %next_nomacro1.redo_no_start
  br label %cond_end426

cond_else_block425:                               ; preds = %cond_else_block411
  store i32 35, i32* @tok, align 4
  br label %cond_end426

cond_end426:                                      ; preds = %cond_else_block425, %cond_jump_then424
  br label %cond_end412

after_break432:                                   ; No predecessors!
  br label %cond_else_blockX364
  br label %cond_else_blockX434

cond_then_block433:                               ; preds = %cond_else_blockX534, %cond_else_blockX532, %cond_else_blockX530, %cond_else_blockX528, %cond_else_blockX526, %cond_else_blockX524, %cond_else_blockX522, %cond_else_blockX520, %cond_else_blockX518, %cond_else_blockX516, %cond_else_blockX514, %cond_else_blockX512, %cond_else_blockX510, %cond_else_blockX508, %cond_else_blockX506, %cond_else_blockX504, %cond_else_blockX502, %cond_else_blockX500, %cond_else_blockX498, %cond_else_blockX496, %cond_else_blockX494, %cond_else_blockX492, %cond_else_blockX490, %cond_else_blockX488, %cond_else_blockX486, %cond_else_blockX484, %cond_else_blockX482, %cond_else_blockX480, %cond_else_blockX478, %cond_else_blockX476, %cond_else_blockX474, %cond_else_blockX472, %cond_else_blockX470, %cond_else_blockX468, %cond_else_blockX466, %cond_else_blockX464, %cond_else_blockX462, %cond_else_blockX460, %cond_else_blockX458, %cond_else_blockX456, %cond_else_blockX454, %cond_else_blockX452, %cond_else_blockX450, %cond_else_blockX448, %cond_else_blockX446, %cond_else_blockX444, %cond_else_blockX442, %cond_else_blockX440, %cond_else_blockX438, %cond_else_blockX436, %cond_else_blockX434, %cond_else_blockX364
  br label %next_nomacro1.parse_ident_fast

cond_else_blockX434:                              ; preds = %cond_else_blockX364, %after_break432
  %eqtmp437 = icmp eq i32 %c129, 98
  br i1 %eqtmp437, label %cond_then_block433, label %cond_else_blockX436
  br label %cond_else_blockX438

cond_else_blockX436:                              ; preds = %cond_else_blockX434, %cond_else_blockX364
  %eqtmp439 = icmp eq i32 %c129, 99
  br i1 %eqtmp439, label %cond_then_block433, label %cond_else_blockX438
  br label %cond_else_blockX440

cond_else_blockX438:                              ; preds = %cond_else_blockX436, %cond_else_blockX434
  %eqtmp441 = icmp eq i32 %c129, 100
  br i1 %eqtmp441, label %cond_then_block433, label %cond_else_blockX440
  br label %cond_else_blockX442

cond_else_blockX440:                              ; preds = %cond_else_blockX438, %cond_else_blockX436
  %eqtmp443 = icmp eq i32 %c129, 101
  br i1 %eqtmp443, label %cond_then_block433, label %cond_else_blockX442
  br label %cond_else_blockX444

cond_else_blockX442:                              ; preds = %cond_else_blockX440, %cond_else_blockX438
  %eqtmp445 = icmp eq i32 %c129, 102
  br i1 %eqtmp445, label %cond_then_block433, label %cond_else_blockX444
  br label %cond_else_blockX446

cond_else_blockX444:                              ; preds = %cond_else_blockX442, %cond_else_blockX440
  %eqtmp447 = icmp eq i32 %c129, 103
  br i1 %eqtmp447, label %cond_then_block433, label %cond_else_blockX446
  br label %cond_else_blockX448

cond_else_blockX446:                              ; preds = %cond_else_blockX444, %cond_else_blockX442
  %eqtmp449 = icmp eq i32 %c129, 104
  br i1 %eqtmp449, label %cond_then_block433, label %cond_else_blockX448
  br label %cond_else_blockX450

cond_else_blockX448:                              ; preds = %cond_else_blockX446, %cond_else_blockX444
  %eqtmp451 = icmp eq i32 %c129, 105
  br i1 %eqtmp451, label %cond_then_block433, label %cond_else_blockX450
  br label %cond_else_blockX452

cond_else_blockX450:                              ; preds = %cond_else_blockX448, %cond_else_blockX446
  %eqtmp453 = icmp eq i32 %c129, 106
  br i1 %eqtmp453, label %cond_then_block433, label %cond_else_blockX452
  br label %cond_else_blockX454

cond_else_blockX452:                              ; preds = %cond_else_blockX450, %cond_else_blockX448
  %eqtmp455 = icmp eq i32 %c129, 107
  br i1 %eqtmp455, label %cond_then_block433, label %cond_else_blockX454
  br label %cond_else_blockX456

cond_else_blockX454:                              ; preds = %cond_else_blockX452, %cond_else_blockX450
  %eqtmp457 = icmp eq i32 %c129, 108
  br i1 %eqtmp457, label %cond_then_block433, label %cond_else_blockX456
  br label %cond_else_blockX458

cond_else_blockX456:                              ; preds = %cond_else_blockX454, %cond_else_blockX452
  %eqtmp459 = icmp eq i32 %c129, 109
  br i1 %eqtmp459, label %cond_then_block433, label %cond_else_blockX458
  br label %cond_else_blockX460

cond_else_blockX458:                              ; preds = %cond_else_blockX456, %cond_else_blockX454
  %eqtmp461 = icmp eq i32 %c129, 110
  br i1 %eqtmp461, label %cond_then_block433, label %cond_else_blockX460
  br label %cond_else_blockX462

cond_else_blockX460:                              ; preds = %cond_else_blockX458, %cond_else_blockX456
  %eqtmp463 = icmp eq i32 %c129, 111
  br i1 %eqtmp463, label %cond_then_block433, label %cond_else_blockX462
  br label %cond_else_blockX464

cond_else_blockX462:                              ; preds = %cond_else_blockX460, %cond_else_blockX458
  %eqtmp465 = icmp eq i32 %c129, 112
  br i1 %eqtmp465, label %cond_then_block433, label %cond_else_blockX464
  br label %cond_else_blockX466

cond_else_blockX464:                              ; preds = %cond_else_blockX462, %cond_else_blockX460
  %eqtmp467 = icmp eq i32 %c129, 113
  br i1 %eqtmp467, label %cond_then_block433, label %cond_else_blockX466
  br label %cond_else_blockX468

cond_else_blockX466:                              ; preds = %cond_else_blockX464, %cond_else_blockX462
  %eqtmp469 = icmp eq i32 %c129, 114
  br i1 %eqtmp469, label %cond_then_block433, label %cond_else_blockX468
  br label %cond_else_blockX470

cond_else_blockX468:                              ; preds = %cond_else_blockX466, %cond_else_blockX464
  %eqtmp471 = icmp eq i32 %c129, 115
  br i1 %eqtmp471, label %cond_then_block433, label %cond_else_blockX470
  br label %cond_else_blockX472

cond_else_blockX470:                              ; preds = %cond_else_blockX468, %cond_else_blockX466
  %eqtmp473 = icmp eq i32 %c129, 116
  br i1 %eqtmp473, label %cond_then_block433, label %cond_else_blockX472
  br label %cond_else_blockX474

cond_else_blockX472:                              ; preds = %cond_else_blockX470, %cond_else_blockX468
  %eqtmp475 = icmp eq i32 %c129, 117
  br i1 %eqtmp475, label %cond_then_block433, label %cond_else_blockX474
  br label %cond_else_blockX476

cond_else_blockX474:                              ; preds = %cond_else_blockX472, %cond_else_blockX470
  %eqtmp477 = icmp eq i32 %c129, 118
  br i1 %eqtmp477, label %cond_then_block433, label %cond_else_blockX476
  br label %cond_else_blockX478

cond_else_blockX476:                              ; preds = %cond_else_blockX474, %cond_else_blockX472
  %eqtmp479 = icmp eq i32 %c129, 119
  br i1 %eqtmp479, label %cond_then_block433, label %cond_else_blockX478
  br label %cond_else_blockX480

cond_else_blockX478:                              ; preds = %cond_else_blockX476, %cond_else_blockX474
  %eqtmp481 = icmp eq i32 %c129, 120
  br i1 %eqtmp481, label %cond_then_block433, label %cond_else_blockX480
  br label %cond_else_blockX482

cond_else_blockX480:                              ; preds = %cond_else_blockX478, %cond_else_blockX476
  %eqtmp483 = icmp eq i32 %c129, 121
  br i1 %eqtmp483, label %cond_then_block433, label %cond_else_blockX482
  br label %cond_else_blockX484

cond_else_blockX482:                              ; preds = %cond_else_blockX480, %cond_else_blockX478
  %eqtmp485 = icmp eq i32 %c129, 122
  br i1 %eqtmp485, label %cond_then_block433, label %cond_else_blockX484
  br label %cond_else_blockX486

cond_else_blockX484:                              ; preds = %cond_else_blockX482, %cond_else_blockX480
  %eqtmp487 = icmp eq i32 %c129, 65
  br i1 %eqtmp487, label %cond_then_block433, label %cond_else_blockX486
  br label %cond_else_blockX488

cond_else_blockX486:                              ; preds = %cond_else_blockX484, %cond_else_blockX482
  %eqtmp489 = icmp eq i32 %c129, 66
  br i1 %eqtmp489, label %cond_then_block433, label %cond_else_blockX488
  br label %cond_else_blockX490

cond_else_blockX488:                              ; preds = %cond_else_blockX486, %cond_else_blockX484
  %eqtmp491 = icmp eq i32 %c129, 67
  br i1 %eqtmp491, label %cond_then_block433, label %cond_else_blockX490
  br label %cond_else_blockX492

cond_else_blockX490:                              ; preds = %cond_else_blockX488, %cond_else_blockX486
  %eqtmp493 = icmp eq i32 %c129, 68
  br i1 %eqtmp493, label %cond_then_block433, label %cond_else_blockX492
  br label %cond_else_blockX494

cond_else_blockX492:                              ; preds = %cond_else_blockX490, %cond_else_blockX488
  %eqtmp495 = icmp eq i32 %c129, 69
  br i1 %eqtmp495, label %cond_then_block433, label %cond_else_blockX494
  br label %cond_else_blockX496

cond_else_blockX494:                              ; preds = %cond_else_blockX492, %cond_else_blockX490
  %eqtmp497 = icmp eq i32 %c129, 70
  br i1 %eqtmp497, label %cond_then_block433, label %cond_else_blockX496
  br label %cond_else_blockX498

cond_else_blockX496:                              ; preds = %cond_else_blockX494, %cond_else_blockX492
  %eqtmp499 = icmp eq i32 %c129, 71
  br i1 %eqtmp499, label %cond_then_block433, label %cond_else_blockX498
  br label %cond_else_blockX500

cond_else_blockX498:                              ; preds = %cond_else_blockX496, %cond_else_blockX494
  %eqtmp501 = icmp eq i32 %c129, 72
  br i1 %eqtmp501, label %cond_then_block433, label %cond_else_blockX500
  br label %cond_else_blockX502

cond_else_blockX500:                              ; preds = %cond_else_blockX498, %cond_else_blockX496
  %eqtmp503 = icmp eq i32 %c129, 73
  br i1 %eqtmp503, label %cond_then_block433, label %cond_else_blockX502
  br label %cond_else_blockX504

cond_else_blockX502:                              ; preds = %cond_else_blockX500, %cond_else_blockX498
  %eqtmp505 = icmp eq i32 %c129, 74
  br i1 %eqtmp505, label %cond_then_block433, label %cond_else_blockX504
  br label %cond_else_blockX506

cond_else_blockX504:                              ; preds = %cond_else_blockX502, %cond_else_blockX500
  %eqtmp507 = icmp eq i32 %c129, 75
  br i1 %eqtmp507, label %cond_then_block433, label %cond_else_blockX506
  br label %cond_else_blockX508

cond_else_blockX506:                              ; preds = %cond_else_blockX504, %cond_else_blockX502
  %eqtmp509 = icmp eq i32 %c129, 77
  br i1 %eqtmp509, label %cond_then_block433, label %cond_else_blockX508
  br label %cond_else_blockX510

cond_else_blockX508:                              ; preds = %cond_else_blockX506, %cond_else_blockX504
  %eqtmp511 = icmp eq i32 %c129, 78
  br i1 %eqtmp511, label %cond_then_block433, label %cond_else_blockX510
  br label %cond_else_blockX512

cond_else_blockX510:                              ; preds = %cond_else_blockX508, %cond_else_blockX506
  %eqtmp513 = icmp eq i32 %c129, 79
  br i1 %eqtmp513, label %cond_then_block433, label %cond_else_blockX512
  br label %cond_else_blockX514

cond_else_blockX512:                              ; preds = %cond_else_blockX510, %cond_else_blockX508
  %eqtmp515 = icmp eq i32 %c129, 80
  br i1 %eqtmp515, label %cond_then_block433, label %cond_else_blockX514
  br label %cond_else_blockX516

cond_else_blockX514:                              ; preds = %cond_else_blockX512, %cond_else_blockX510
  %eqtmp517 = icmp eq i32 %c129, 81
  br i1 %eqtmp517, label %cond_then_block433, label %cond_else_blockX516
  br label %cond_else_blockX518

cond_else_blockX516:                              ; preds = %cond_else_blockX514, %cond_else_blockX512
  %eqtmp519 = icmp eq i32 %c129, 82
  br i1 %eqtmp519, label %cond_then_block433, label %cond_else_blockX518
  br label %cond_else_blockX520

cond_else_blockX518:                              ; preds = %cond_else_blockX516, %cond_else_blockX514
  %eqtmp521 = icmp eq i32 %c129, 83
  br i1 %eqtmp521, label %cond_then_block433, label %cond_else_blockX520
  br label %cond_else_blockX522

cond_else_blockX520:                              ; preds = %cond_else_blockX518, %cond_else_blockX516
  %eqtmp523 = icmp eq i32 %c129, 84
  br i1 %eqtmp523, label %cond_then_block433, label %cond_else_blockX522
  br label %cond_else_blockX524

cond_else_blockX522:                              ; preds = %cond_else_blockX520, %cond_else_blockX518
  %eqtmp525 = icmp eq i32 %c129, 85
  br i1 %eqtmp525, label %cond_then_block433, label %cond_else_blockX524
  br label %cond_else_blockX526

cond_else_blockX524:                              ; preds = %cond_else_blockX522, %cond_else_blockX520
  %eqtmp527 = icmp eq i32 %c129, 86
  br i1 %eqtmp527, label %cond_then_block433, label %cond_else_blockX526
  br label %cond_else_blockX528

cond_else_blockX526:                              ; preds = %cond_else_blockX524, %cond_else_blockX522
  %eqtmp529 = icmp eq i32 %c129, 87
  br i1 %eqtmp529, label %cond_then_block433, label %cond_else_blockX528
  br label %cond_else_blockX530

cond_else_blockX528:                              ; preds = %cond_else_blockX526, %cond_else_blockX524
  %eqtmp531 = icmp eq i32 %c129, 88
  br i1 %eqtmp531, label %cond_then_block433, label %cond_else_blockX530
  br label %cond_else_blockX532

cond_else_blockX530:                              ; preds = %cond_else_blockX528, %cond_else_blockX526
  %eqtmp533 = icmp eq i32 %c129, 89
  br i1 %eqtmp533, label %cond_then_block433, label %cond_else_blockX532
  br label %cond_else_blockX534

cond_else_blockX532:                              ; preds = %cond_else_blockX530, %cond_else_blockX528
  %eqtmp535 = icmp eq i32 %c129, 90
  br i1 %eqtmp535, label %cond_then_block433, label %cond_else_blockX534
  br label %cond_else_blockX536

cond_else_blockX534:                              ; preds = %cond_else_blockX532, %cond_else_blockX530
  %eqtmp537 = icmp eq i32 %c129, 95
  br i1 %eqtmp537, label %cond_then_block433, label %cond_else_blockX536

cond_else_blockX536:                              ; preds = %after_break761, %cond_else_blockX534, %cond_else_blockX532
  %eqtmp764 = icmp eq i32 %c129, 76
  br i1 %eqtmp764, label %cond_then_block762, label %cond_else_blockX763

next_nomacro1.parse_ident_fast:                   ; preds = %cond_jump_then786, %cond_then_block433
  %p538 = load i8*, i8** %p, align 8
  store i8* %p538, i8** %p1, align 8
  store i32 1, i32* %h, align 4
  %h539 = load i32, i32* %h, align 4
  %mul540 = mul i32 %h539, 263
  %c541 = load i32, i32* %c, align 4
  %add542 = add i32 %mul540, %c541
  store i32 %add542, i32* %h, align 4
  %p543 = load i8*, i8** %p, align 8
  %ptrToIntC544 = ptrtoint i8* %p543 to i64
  %add545 = add i64 %ptrToIntC544, 1
  %intToPtrB546 = inttoptr i64 %add545 to i8*
  store i8* %intToPtrB546, i8** %p, align 8
  %p547 = load i8*, i8** %p, align 8
  %ptrToIntI548 = ptrtoint i8* %p547 to i64
  %sub549 = sub i64 %ptrToIntI548, 1
  %iintToPtrD550 = inttoptr i64 %sub549 to i8*
  br label %loop_top_block551

loop_continue_top_block:                          ; preds = %cond_end563
  br label %loop_top_block551

loop_top_block551:                                ; preds = %loop_continue_top_block, %next_nomacro1.parse_ident_fast
  br i1 true, label %cond_then_block552, label %cond_end_block553

cond_then_block552:                               ; preds = %loop_top_block551
  %p554 = load i8*, i8** %p, align 8
  %derefference_valueB555 = load i8, i8* %p554, align 1
  %icastKY556 = zext i8 %derefference_valueB555 to i32
  store i32 %icastKY556, i32* %c, align 4
  %c557 = load i32, i32* %c, align 4
  %sub558 = sub i32 %c557, -1
  %gepOL = getelementptr [257 x i8], [257 x i8]* @isidnum_table, i32 0, i32 %sub558
  %elementXXX = load i8, i8* %gepOL, align 1
  %logical_denial559 = icmp eq i8 %elementXXX, 0
  %castOOOO560 = zext i1 %logical_denial559 to i32
  %icmpA561 = icmp ne i32 %castOOOO560, 0
  br i1 %icmpA561, label %cond_jump_then562, label %cond_end563

cond_end_block553:                                ; preds = %cond_jump_then562, %loop_top_block551
  %c577 = load i32, i32* %c, align 4
  %not_eq = icmp ne i32 %c577, 92
  br i1 %not_eq, label %cond_jump_then578, label %cond_else_block579

cond_jump_then562:                                ; preds = %cond_then_block552
  br label %cond_end_block553

cond_end563:                                      ; preds = %after_break564, %cond_then_block552
  %h565 = load i32, i32* %h, align 4
  %mul566 = mul i32 %h565, 263
  %c567 = load i32, i32* %c, align 4
  %add568 = add i32 %mul566, %c567
  store i32 %add568, i32* %h, align 4
  %p569 = load i8*, i8** %p, align 8
  %ptrToIntC570 = ptrtoint i8* %p569 to i64
  %add571 = add i64 %ptrToIntC570, 1
  %intToPtrB572 = inttoptr i64 %add571 to i8*
  store i8* %intToPtrB572, i8** %p, align 8
  %p573 = load i8*, i8** %p, align 8
  %ptrToIntI574 = ptrtoint i8* %p573 to i64
  %sub575 = sub i64 %ptrToIntI574, 1
  %iintToPtrD576 = inttoptr i64 %sub575 to i8*
  br label %loop_continue_top_block

after_break564:                                   ; No predecessors!
  br label %cond_end563

cond_jump_then578:                                ; preds = %cond_end_block553
  %p581 = load i8*, i8** %p, align 8
  %p1582 = load i8*, i8** %p1, align 8
  %ptrToIntG = ptrtoint i8* %p581 to i64
  %ptrToIntH = ptrtoint i8* %p1582 to i64
  %sub583 = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub583, 1
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %len, align 4
  %h584 = load i32, i32* %h, align 4
  %andtmp585 = and i32 %h584, 8191
  store i32 %andtmp585, i32* %h, align 4
  %h586 = load i32, i32* %h, align 4
  %gepOL587 = getelementptr [8192 x %TokenSym*], [8192 x %TokenSym*]* @hash_ident, i32 0, i32 %h586
  store %TokenSym** %gepOL587, %TokenSym*** %pts, align 8
  br label %loop_top_block589

cond_else_block579:                               ; preds = %cond_end_block553
  %tokcstr = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  br label %loop_top_block628

cond_end580:                                      ; preds = %cond_end_block701, %next_nomacro1.token_found
  %ts758 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL759 = getelementptr inbounds %TokenSym, %TokenSym* %ts758, i32 0, i32 5
  %tok760 = load i32, i32* %fieldLLL759, align 4
  store i32 %tok760, i32* @tok, align 4
  br label %end_blockX128

loop_continue_top_block588:                       ; preds = %cond_end621
  br label %loop_top_block589

loop_top_block589:                                ; preds = %loop_continue_top_block588, %cond_jump_then578
  br i1 true, label %cond_then_block590, label %cond_end_block591

cond_then_block590:                               ; preds = %loop_top_block589
  %pts592 = load %TokenSym**, %TokenSym*** %pts, align 8
  %derefference_valueB593 = load %TokenSym*, %TokenSym** %pts592, align 8
  store %TokenSym* %derefference_valueB593, %TokenSym** %ts, align 8
  %ts594 = load %TokenSym*, %TokenSym** %ts, align 8
  %logical_denial595 = icmp eq %TokenSym* %ts594, null
  %castOOOO596 = zext i1 %logical_denial595 to i32
  %icmpA597 = icmp ne i32 %castOOOO596, 0
  br i1 %icmpA597, label %cond_jump_then598, label %cond_end599

cond_end_block591:                                ; preds = %cond_jump_then598, %loop_top_block589
  %pts624 = load %TokenSym**, %TokenSym*** %pts, align 8
  %p1625 = load i8*, i8** %p1, align 8
  %len626 = load i32, i32* %len, align 4
  %fun_result627 = call %TokenSym* @tok_alloc_new(%TokenSym** %pts624, i8* %p1625, i32 %len626)
  store %TokenSym* %fun_result627, %TokenSym** %ts, align 8
  br label %next_nomacro1.token_found

cond_jump_then598:                                ; preds = %cond_then_block590
  br label %cond_end_block591

cond_end599:                                      ; preds = %after_break600, %cond_then_block590
  %ts602 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL603 = getelementptr inbounds %TokenSym, %TokenSym* %ts602, i32 0, i32 6
  %len604 = load i32, i32* %fieldLLL603, align 4
  %len605 = load i32, i32* %len, align 4
  %eq606 = icmp eq i32 %len604, %len605
  store i1 %eq606, i1* %andand601, align 1
  br i1 %eq606, label %cond_jump_then607, label %cond_jump_end608

after_break600:                                   ; No predecessors!
  br label %cond_end599

cond_jump_then607:                                ; preds = %cond_end599
  %ts609 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldRRRROOU610 = getelementptr inbounds %TokenSym, %TokenSym* %ts609, i32 0, i32 7
  %castBA = bitcast [1 x i8]* %fieldRRRROOU610 to i8*
  %p1611 = load i8*, i8** %p1, align 8
  %len612 = load i32, i32* %len, align 4
  %icastD613 = sext i32 %len612 to i64
  %fun_result614 = call i32 @memcmp(i8* %castBA, i8* %p1611, i64 %icastD613)
  %logical_denial615 = icmp eq i32 %fun_result614, 0
  %castOOOO616 = zext i1 %logical_denial615 to i32
  %icmpA617 = icmp ne i32 %castOOOO616, 0
  %andand618 = and i1 %eq606, %icmpA617
  store i1 %andand618, i1* %andand601, align 1
  br label %cond_jump_end608

cond_jump_end608:                                 ; preds = %cond_jump_then607, %cond_end599
  %andand_result_value619 = load i1, i1* %andand601, align 1
  br i1 %andand_result_value619, label %cond_jump_then620, label %cond_end621

cond_jump_then620:                                ; preds = %cond_jump_end608
  br label %next_nomacro1.token_found
  br label %cond_end621

cond_end621:                                      ; preds = %cond_jump_then620, %cond_jump_end608
  %ts622 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL623 = getelementptr inbounds %TokenSym, %TokenSym* %ts622, i32 0, i32 0
  %hash_next = load %TokenSym*, %TokenSym** %fieldLLL623, align 8
  store %TokenSym** %fieldLLL623, %TokenSym*** %pts, align 8
  br label %loop_continue_top_block588

next_nomacro1.token_found:                        ; preds = %cond_end_block591, %cond_jump_then620
  br label %cond_end580

loop_top_block628:                                ; preds = %cstr_ccat_end, %cond_else_block579
  %p1629 = load i8*, i8** %p1, align 8
  %p630 = load i8*, i8** %p, align 8
  %le = icmp ult i8* %p1629, %p630
  br i1 %le, label %cond_then_block631, label %cond_end_block632

cond_then_block631:                               ; preds = %loop_top_block628
  %tokcstr633 = load %CString, %CString* @tokcstr, align 8
  %p1634 = load i8*, i8** %p1, align 8
  %derefference_valueB635 = load i8, i8* %p1634, align 1
  %icastKY636 = zext i8 %derefference_valueB635 to i32
  store i32 2499, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.62, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

cond_end_block632:                                ; preds = %loop_top_block628
  %p667 = load i8*, i8** %p, align 8
  %ptrToIntI668 = ptrtoint i8* %p667 to i64
  %sub669 = sub i64 %ptrToIntI668, 1
  %iintToPtrD670 = inttoptr i64 %sub669 to i8*
  store i8* %iintToPtrD670, i8** %p, align 8
  %ptrToIntC671 = ptrtoint i8* %iintToPtrD670 to i64
  %add672 = add i64 %ptrToIntC671, 1
  %intToPtrB673 = inttoptr i64 %add672 to i8*
  %p674 = load i8*, i8** %p, align 8
  %ptrToIntC675 = ptrtoint i8* %p674 to i64
  %add676 = add i64 %ptrToIntC675, 1
  %intToPtrB677 = inttoptr i64 %add676 to i8*
  store i8* %intToPtrB677, i8** %p, align 8
  %p678 = load i8*, i8** %p, align 8
  %ptrToIntI679 = ptrtoint i8* %p678 to i64
  %sub680 = sub i64 %ptrToIntI679, 1
  %iintToPtrD681 = inttoptr i64 %sub680 to i8*
  %p682 = load i8*, i8** %p, align 8
  %derefference_valueB683 = load i8, i8* %p682, align 1
  %icastKY684 = zext i8 %derefference_valueB683 to i32
  store i32 %icastKY684, i32* %c, align 4
  %c685 = load i32, i32* %c, align 4
  %eq686 = icmp eq i32 %c685, 92
  br i1 %eq686, label %cond_jump_then687, label %cond_end688

cstr_ccat:                                        ; preds = %cond_then_block631
  %cstr637 = alloca %CString*, align 8
  store %CString* @tokcstr, %CString** %cstr637, align 8
  %ch = alloca i32, align 4
  store i32 %icastKY636, i32* %ch, align 4
  %cstr639 = load %CString*, %CString** %cstr637, align 8
  %fieldLLL640 = getelementptr inbounds %CString, %CString* %cstr639, i32 0, i32 0
  %size641 = load i32, i32* %fieldLLL640, align 4
  %add642 = add i32 %size641, 1
  store i32 %add642, i32* %size638, align 4
  %size643 = load i32, i32* %size638, align 4
  %cstr644 = load %CString*, %CString** %cstr637, align 8
  %fieldLLL645 = getelementptr inbounds %CString, %CString* %cstr644, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL645, align 4
  %gt = icmp sgt i32 %size643, %size_allocated
  br i1 %gt, label %cond_jump_then646, label %cond_end647

cstr_ccat_end:                                    ; preds = %cond_end647
  %p1659 = load i8*, i8** %p1, align 8
  %ptrToIntC660 = ptrtoint i8* %p1659 to i64
  %add661 = add i64 %ptrToIntC660, 1
  %intToPtrB662 = inttoptr i64 %add661 to i8*
  store i8* %intToPtrB662, i8** %p1, align 8
  %p1663 = load i8*, i8** %p1, align 8
  %ptrToIntI664 = ptrtoint i8* %p1663 to i64
  %sub665 = sub i64 %ptrToIntI664, 1
  %iintToPtrD666 = inttoptr i64 %sub665 to i8*
  br label %loop_top_block628

cond_jump_then646:                                ; preds = %cstr_ccat
  %cstr648 = load %CString*, %CString** %cstr637, align 8
  %size649 = load i32, i32* %size638, align 4
  call void @cstr_realloc(%CString* %cstr648, i32 %size649)
  br label %cond_end647

cond_end647:                                      ; preds = %cond_jump_then646, %cstr_ccat
  %cstr650 = load %CString*, %CString** %cstr637, align 8
  %fieldLLL651 = getelementptr inbounds %CString, %CString* %cstr650, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL651, align 8
  %size652 = load i32, i32* %size638, align 4
  %sub653 = sub i32 %size652, 1
  %ch654 = load i32, i32* %ch, align 4
  %icastJ655 = trunc i32 %ch654 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub653
  store i8 %icastJ655, i8* %element_addressXYXY, align 1
  %cstr656 = load %CString*, %CString** %cstr637, align 8
  %size657 = load i32, i32* %size638, align 4
  %fieldTU658 = getelementptr inbounds %CString, %CString* %cstr656, i32 0, i32 0
  store i32 %size657, i32* %fieldTU658, align 4
  br label %cstr_ccat_end

cond_jump_then687:                                ; preds = %cond_end_block632
  %p689 = load i8*, i8** %p, align 8
  %fun_result690 = call i32 @handle_stray1(i8* %p689)
  store i32 %fun_result690, i32* %c, align 4
  %file691 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL692 = getelementptr inbounds %BufferedFile, %BufferedFile* %file691, i32 0, i32 0
  %buf_ptr693 = load i8*, i8** %fieldLLL692, align 8
  store i8* %buf_ptr693, i8** %p, align 8
  br label %cond_end688

cond_end688:                                      ; preds = %cond_jump_then687, %cond_end_block632
  br label %next_nomacro1.parse_ident_slow

next_nomacro1.parse_ident_slow:                   ; preds = %cstr_ccat_end826, %cond_end688
  br label %loop_top_block694

loop_top_block694:                                ; preds = %cond_end747, %next_nomacro1.parse_ident_slow
  %c695 = load i32, i32* %c, align 4
  %sub696 = sub i32 %c695, -1
  %gepOL697 = getelementptr [257 x i8], [257 x i8]* @isidnum_table, i32 0, i32 %sub696
  %elementXXX698 = load i8, i8* %gepOL697, align 1
  %icmpA699 = icmp ne i8 %elementXXX698, 0
  br i1 %icmpA699, label %cond_then_block700, label %cond_end_block701

cond_then_block700:                               ; preds = %loop_top_block694
  %tokcstr702 = load %CString, %CString* @tokcstr, align 8
  %c703 = load i32, i32* %c, align 4
  store i32 2506, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.63, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat704

cond_end_block701:                                ; preds = %loop_top_block694
  %tokcstr753 = load %CString, %CString* @tokcstr, align 8
  %data754 = load i8*, i8** getelementptr inbounds (%CString, %CString* @tokcstr, i32 0, i32 1), align 8
  %tokcstr755 = load %CString, %CString* @tokcstr, align 8
  %size756 = load i32, i32* getelementptr inbounds (%CString, %CString* @tokcstr, i32 0, i32 0), align 4
  %fun_result757 = call %TokenSym* @tok_alloc(i8* %data754, i32 %size756)
  store %TokenSym* %fun_result757, %TokenSym** %ts, align 8
  br label %cond_end580

cstr_ccat704:                                     ; preds = %cond_then_block700
  %cstr705 = alloca %CString*, align 8
  store %CString* @tokcstr, %CString** %cstr705, align 8
  %ch706 = alloca i32, align 4
  store i32 %c703, i32* %ch706, align 4
  %cstr709 = load %CString*, %CString** %cstr705, align 8
  %fieldLLL710 = getelementptr inbounds %CString, %CString* %cstr709, i32 0, i32 0
  %size711 = load i32, i32* %fieldLLL710, align 4
  %add712 = add i32 %size711, 1
  store i32 %add712, i32* %size708, align 4
  %size713 = load i32, i32* %size708, align 4
  %cstr714 = load %CString*, %CString** %cstr705, align 8
  %fieldLLL715 = getelementptr inbounds %CString, %CString* %cstr714, i32 0, i32 2
  %size_allocated716 = load i32, i32* %fieldLLL715, align 4
  %gt717 = icmp sgt i32 %size713, %size_allocated716
  br i1 %gt717, label %cond_jump_then718, label %cond_end719

cstr_ccat_end707:                                 ; preds = %cond_end719
  %p733 = load i8*, i8** %p, align 8
  %ptrToIntC734 = ptrtoint i8* %p733 to i64
  %add735 = add i64 %ptrToIntC734, 1
  %intToPtrB736 = inttoptr i64 %add735 to i8*
  store i8* %intToPtrB736, i8** %p, align 8
  %p737 = load i8*, i8** %p, align 8
  %ptrToIntI738 = ptrtoint i8* %p737 to i64
  %sub739 = sub i64 %ptrToIntI738, 1
  %iintToPtrD740 = inttoptr i64 %sub739 to i8*
  %p741 = load i8*, i8** %p, align 8
  %derefference_valueB742 = load i8, i8* %p741, align 1
  %icastKY743 = zext i8 %derefference_valueB742 to i32
  store i32 %icastKY743, i32* %c, align 4
  %c744 = load i32, i32* %c, align 4
  %eq745 = icmp eq i32 %c744, 92
  br i1 %eq745, label %cond_jump_then746, label %cond_end747

cond_jump_then718:                                ; preds = %cstr_ccat704
  %cstr720 = load %CString*, %CString** %cstr705, align 8
  %size721 = load i32, i32* %size708, align 4
  call void @cstr_realloc(%CString* %cstr720, i32 %size721)
  br label %cond_end719

cond_end719:                                      ; preds = %cond_jump_then718, %cstr_ccat704
  %cstr722 = load %CString*, %CString** %cstr705, align 8
  %fieldLLL723 = getelementptr inbounds %CString, %CString* %cstr722, i32 0, i32 1
  %data724 = load i8*, i8** %fieldLLL723, align 8
  %size725 = load i32, i32* %size708, align 4
  %sub726 = sub i32 %size725, 1
  %ch727 = load i32, i32* %ch706, align 4
  %icastJ728 = trunc i32 %ch727 to i8
  %element_addressXYXY729 = getelementptr i8, i8* %data724, i32 %sub726
  store i8 %icastJ728, i8* %element_addressXYXY729, align 1
  %cstr730 = load %CString*, %CString** %cstr705, align 8
  %size731 = load i32, i32* %size708, align 4
  %fieldTU732 = getelementptr inbounds %CString, %CString* %cstr730, i32 0, i32 0
  store i32 %size731, i32* %fieldTU732, align 4
  br label %cstr_ccat_end707

cond_jump_then746:                                ; preds = %cstr_ccat_end707
  %p748 = load i8*, i8** %p, align 8
  %fun_result749 = call i32 @handle_stray1(i8* %p748)
  store i32 %fun_result749, i32* %c, align 4
  %file750 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL751 = getelementptr inbounds %BufferedFile, %BufferedFile* %file750, i32 0, i32 0
  %buf_ptr752 = load i8*, i8** %fieldLLL751, align 8
  store i8* %buf_ptr752, i8** %p, align 8
  br label %cond_end747

cond_end747:                                      ; preds = %cond_jump_then746, %cstr_ccat_end707
  br label %loop_top_block694

after_break761:                                   ; No predecessors!
  br label %cond_else_blockX536
  br label %cond_else_blockX763

cond_then_block762:                               ; preds = %cond_else_blockX536
  %p765 = load i8*, i8** %p, align 8
  %element_addressAB766 = load i8*, i8** %p, align 8
  %element_addressXYXZY767 = getelementptr inbounds i8, i8* %element_addressAB766, i32 1
  %load_element768 = load i8, i8* %element_addressXYXZY767, align 1
  %icastKY769 = zext i8 %load_element768 to i32
  store i32 %icastKY769, i32* %t, align 4
  %t772 = load i32, i32* %t, align 4
  %not_eq773 = icmp ne i32 %t772, 92
  store i1 %not_eq773, i1* %andand771, align 1
  br i1 %not_eq773, label %cond_jump_then774, label %cond_jump_end775

cond_else_blockX763:                              ; preds = %after_break852, %cond_else_blockX536, %after_break761
  %eqtmp855 = icmp eq i32 %c129, 48
  br i1 %eqtmp855, label %cond_then_block853, label %cond_else_blockX854
  br label %cond_else_blockX856

cond_jump_then774:                                ; preds = %cond_then_block762
  %t776 = load i32, i32* %t, align 4
  %not_eq777 = icmp ne i32 %t776, 39
  %andand778 = and i1 %not_eq773, %not_eq777
  store i1 %andand778, i1* %andand771, align 1
  br label %cond_jump_end775

cond_jump_end775:                                 ; preds = %cond_jump_then774, %cond_then_block762
  %andand_result_value779 = load i1, i1* %andand771, align 1
  store i1 %andand_result_value779, i1* %andand770, align 1
  br i1 %andand_result_value779, label %cond_jump_then780, label %cond_jump_end781

cond_jump_then780:                                ; preds = %cond_jump_end775
  %t782 = load i32, i32* %t, align 4
  %not_eq783 = icmp ne i32 %t782, 34
  %andand784 = and i1 %andand_result_value779, %not_eq783
  store i1 %andand784, i1* %andand770, align 1
  br label %cond_jump_end781

cond_jump_end781:                                 ; preds = %cond_jump_then780, %cond_jump_end775
  %andand_result_value785 = load i1, i1* %andand770, align 1
  br i1 %andand_result_value785, label %cond_jump_then786, label %cond_else_block787

cond_jump_then786:                                ; preds = %cond_jump_end781
  br label %next_nomacro1.parse_ident_fast
  br label %cond_end788

cond_else_block787:                               ; preds = %cond_jump_end781
  %p789 = load i8*, i8** %p, align 8
  %ptrToIntC790 = ptrtoint i8* %p789 to i64
  %add791 = add i64 %ptrToIntC790, 1
  %intToPtrB792 = inttoptr i64 %add791 to i8*
  store i8* %intToPtrB792, i8** %p, align 8
  %p793 = load i8*, i8** %p, align 8
  %ptrToIntI794 = ptrtoint i8* %p793 to i64
  %sub795 = sub i64 %ptrToIntI794, 1
  %iintToPtrD796 = inttoptr i64 %sub795 to i8*
  %p797 = load i8*, i8** %p, align 8
  %derefference_valueB798 = load i8, i8* %p797, align 1
  %icastKY799 = zext i8 %derefference_valueB798 to i32
  store i32 %icastKY799, i32* %c, align 4
  %c800 = load i32, i32* %c, align 4
  %eq801 = icmp eq i32 %c800, 92
  br i1 %eq801, label %cond_jump_then802, label %cond_end803

cond_end788:                                      ; preds = %cond_end820, %cond_jump_then786
  br label %end_blockX128

cond_jump_then802:                                ; preds = %cond_else_block787
  %p804 = load i8*, i8** %p, align 8
  %fun_result805 = call i32 @handle_stray1(i8* %p804)
  store i32 %fun_result805, i32* %c, align 4
  %file806 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL807 = getelementptr inbounds %BufferedFile, %BufferedFile* %file806, i32 0, i32 0
  %buf_ptr808 = load i8*, i8** %fieldLLL807, align 8
  store i8* %buf_ptr808, i8** %p, align 8
  br label %cond_end803

cond_end803:                                      ; preds = %cond_jump_then802, %cond_else_block787
  %c810 = load i32, i32* %c, align 4
  %eq811 = icmp eq i32 %c810, 39
  store i1 %eq811, i1* %oror809, align 1
  br i1 %eq811, label %cond_jump_end813, label %cond_jump_then812

cond_jump_then812:                                ; preds = %cond_end803
  %c814 = load i32, i32* %c, align 4
  %eq815 = icmp eq i32 %c814, 34
  %oror816 = or i1 %eq811, %eq815
  store i1 %oror816, i1* %oror809, align 1
  br label %cond_jump_end813

cond_jump_end813:                                 ; preds = %cond_jump_then812, %cond_end803
  %oror_result_value817 = load i1, i1* %oror809, align 1
  br i1 %oror_result_value817, label %cond_jump_then818, label %cond_else_block819

cond_jump_then818:                                ; preds = %cond_jump_end813
  store i32 1, i32* %is_long, align 4
  br label %next_nomacro1.str_const
  br label %cond_end820

cond_else_block819:                               ; preds = %cond_jump_end813
  %tokcstr821 = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  %tokcstr822 = load %CString, %CString* @tokcstr, align 8
  store i32 2525, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.64, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat823

cond_end820:                                      ; preds = %cstr_ccat_end826, %cond_jump_then818
  br label %cond_end788

next_nomacro1.str_const:                          ; preds = %cond_then_block1195, %cond_jump_then818
  %c1200 = load i32, i32* %c, align 4
  store i32 %c1200, i32* %sep, align 4
  %str1201 = load %CString, %CString* %str, align 8
  call void @cstr_new(%CString* %str)
  %p1202 = load i8*, i8** %p, align 8
  %sep1203 = load i32, i32* %sep, align 4
  %str1204 = load %CString, %CString* %str, align 8
  %fun_result1205 = call i8* @parse_pp_string(i8* %p1202, i32 %sep1203, %CString* %str)
  store i8* %fun_result1205, i8** %p, align 8
  %str1206 = load %CString, %CString* %str, align 8
  store i32 2582, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.71, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat1207

cstr_ccat823:                                     ; preds = %cond_else_block819
  %cstr824 = alloca %CString*, align 8
  store %CString* @tokcstr, %CString** %cstr824, align 8
  %ch825 = alloca i32, align 4
  store i32 76, i32* %ch825, align 4
  %cstr828 = load %CString*, %CString** %cstr824, align 8
  %fieldLLL829 = getelementptr inbounds %CString, %CString* %cstr828, i32 0, i32 0
  %size830 = load i32, i32* %fieldLLL829, align 4
  %add831 = add i32 %size830, 1
  store i32 %add831, i32* %size827, align 4
  %size832 = load i32, i32* %size827, align 4
  %cstr833 = load %CString*, %CString** %cstr824, align 8
  %fieldLLL834 = getelementptr inbounds %CString, %CString* %cstr833, i32 0, i32 2
  %size_allocated835 = load i32, i32* %fieldLLL834, align 4
  %gt836 = icmp sgt i32 %size832, %size_allocated835
  br i1 %gt836, label %cond_jump_then837, label %cond_end838

cstr_ccat_end826:                                 ; preds = %cond_end838
  br label %next_nomacro1.parse_ident_slow
  br label %cond_end820

cond_jump_then837:                                ; preds = %cstr_ccat823
  %cstr839 = load %CString*, %CString** %cstr824, align 8
  %size840 = load i32, i32* %size827, align 4
  call void @cstr_realloc(%CString* %cstr839, i32 %size840)
  br label %cond_end838

cond_end838:                                      ; preds = %cond_jump_then837, %cstr_ccat823
  %cstr841 = load %CString*, %CString** %cstr824, align 8
  %fieldLLL842 = getelementptr inbounds %CString, %CString* %cstr841, i32 0, i32 1
  %data843 = load i8*, i8** %fieldLLL842, align 8
  %size844 = load i32, i32* %size827, align 4
  %sub845 = sub i32 %size844, 1
  %ch846 = load i32, i32* %ch825, align 4
  %icastJ847 = trunc i32 %ch846 to i8
  %element_addressXYXY848 = getelementptr i8, i8* %data843, i32 %sub845
  store i8 %icastJ847, i8* %element_addressXYXY848, align 1
  %cstr849 = load %CString*, %CString** %cstr824, align 8
  %size850 = load i32, i32* %size827, align 4
  %fieldTU851 = getelementptr inbounds %CString, %CString* %cstr849, i32 0, i32 0
  store i32 %size850, i32* %fieldTU851, align 4
  br label %cstr_ccat_end826

after_break852:                                   ; No predecessors!
  br label %cond_else_blockX763
  br label %cond_else_blockX854

cond_then_block853:                               ; preds = %cond_else_blockX870, %cond_else_blockX868, %cond_else_blockX866, %cond_else_blockX864, %cond_else_blockX862, %cond_else_blockX860, %cond_else_blockX858, %cond_else_blockX856, %cond_else_blockX854, %cond_else_blockX763
  %tokcstr874 = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  br label %next_nomacro1.parse_num

cond_else_blockX854:                              ; preds = %cond_else_blockX763, %after_break852
  %eqtmp857 = icmp eq i32 %c129, 49
  br i1 %eqtmp857, label %cond_then_block853, label %cond_else_blockX856
  br label %cond_else_blockX858

cond_else_blockX856:                              ; preds = %cond_else_blockX854, %cond_else_blockX763
  %eqtmp859 = icmp eq i32 %c129, 50
  br i1 %eqtmp859, label %cond_then_block853, label %cond_else_blockX858
  br label %cond_else_blockX860

cond_else_blockX858:                              ; preds = %cond_else_blockX856, %cond_else_blockX854
  %eqtmp861 = icmp eq i32 %c129, 51
  br i1 %eqtmp861, label %cond_then_block853, label %cond_else_blockX860
  br label %cond_else_blockX862

cond_else_blockX860:                              ; preds = %cond_else_blockX858, %cond_else_blockX856
  %eqtmp863 = icmp eq i32 %c129, 52
  br i1 %eqtmp863, label %cond_then_block853, label %cond_else_blockX862
  br label %cond_else_blockX864

cond_else_blockX862:                              ; preds = %cond_else_blockX860, %cond_else_blockX858
  %eqtmp865 = icmp eq i32 %c129, 53
  br i1 %eqtmp865, label %cond_then_block853, label %cond_else_blockX864
  br label %cond_else_blockX866

cond_else_blockX864:                              ; preds = %cond_else_blockX862, %cond_else_blockX860
  %eqtmp867 = icmp eq i32 %c129, 54
  br i1 %eqtmp867, label %cond_then_block853, label %cond_else_blockX866
  br label %cond_else_blockX868

cond_else_blockX866:                              ; preds = %cond_else_blockX864, %cond_else_blockX862
  %eqtmp869 = icmp eq i32 %c129, 55
  br i1 %eqtmp869, label %cond_then_block853, label %cond_else_blockX868
  br label %cond_else_blockX870

cond_else_blockX868:                              ; preds = %cond_else_blockX866, %cond_else_blockX864
  %eqtmp871 = icmp eq i32 %c129, 56
  br i1 %eqtmp871, label %cond_then_block853, label %cond_else_blockX870
  br label %cond_else_blockX872

cond_else_blockX870:                              ; preds = %cond_else_blockX868, %cond_else_blockX866
  %eqtmp873 = icmp eq i32 %c129, 57
  br i1 %eqtmp873, label %cond_then_block853, label %cond_else_blockX872

cond_else_blockX872:                              ; preds = %after_break1071, %cond_else_blockX870, %cond_else_blockX868
  %eqtmp1074 = icmp eq i32 %c129, 46
  br i1 %eqtmp1074, label %cond_then_block1072, label %cond_else_blockX1073

next_nomacro1.parse_num:                          ; preds = %cstr_ccat_end1122, %cond_then_block853
  br label %loop_top_block876

loop_continue_top_block875:                       ; preds = %cond_end1037
  br label %loop_top_block876

loop_top_block876:                                ; preds = %loop_continue_top_block875, %next_nomacro1.parse_num
  br i1 true, label %cond_then_block877, label %cond_end_block878

cond_then_block877:                               ; preds = %loop_top_block876
  %c879 = load i32, i32* %c, align 4
  store i32 %c879, i32* %t, align 4
  %tokcstr880 = load %CString, %CString* @tokcstr, align 8
  %c881 = load i32, i32* %c, align 4
  store i32 2540, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.65, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat882

cond_end_block878:                                ; preds = %cond_jump_then1036, %loop_top_block876
  %tokcstr1039 = load %CString, %CString* @tokcstr, align 8
  store i32 2548, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.68, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat1040

cstr_ccat882:                                     ; preds = %cond_then_block877
  %cstr883 = alloca %CString*, align 8
  store %CString* @tokcstr, %CString** %cstr883, align 8
  %ch884 = alloca i32, align 4
  store i32 %c881, i32* %ch884, align 4
  %cstr887 = load %CString*, %CString** %cstr883, align 8
  %fieldLLL888 = getelementptr inbounds %CString, %CString* %cstr887, i32 0, i32 0
  %size889 = load i32, i32* %fieldLLL888, align 4
  %add890 = add i32 %size889, 1
  store i32 %add890, i32* %size886, align 4
  %size891 = load i32, i32* %size886, align 4
  %cstr892 = load %CString*, %CString** %cstr883, align 8
  %fieldLLL893 = getelementptr inbounds %CString, %CString* %cstr892, i32 0, i32 2
  %size_allocated894 = load i32, i32* %fieldLLL893, align 4
  %gt895 = icmp sgt i32 %size891, %size_allocated894
  br i1 %gt895, label %cond_jump_then896, label %cond_end897

cstr_ccat_end885:                                 ; preds = %cond_end897
  %p911 = load i8*, i8** %p, align 8
  %ptrToIntC912 = ptrtoint i8* %p911 to i64
  %add913 = add i64 %ptrToIntC912, 1
  %intToPtrB914 = inttoptr i64 %add913 to i8*
  store i8* %intToPtrB914, i8** %p, align 8
  %p915 = load i8*, i8** %p, align 8
  %ptrToIntI916 = ptrtoint i8* %p915 to i64
  %sub917 = sub i64 %ptrToIntI916, 1
  %iintToPtrD918 = inttoptr i64 %sub917 to i8*
  %p919 = load i8*, i8** %p, align 8
  %derefference_valueB920 = load i8, i8* %p919, align 1
  %icastKY921 = zext i8 %derefference_valueB920 to i32
  store i32 %icastKY921, i32* %c, align 4
  %c922 = load i32, i32* %c, align 4
  %eq923 = icmp eq i32 %c922, 92
  br i1 %eq923, label %cond_jump_then924, label %cond_end925

cond_jump_then896:                                ; preds = %cstr_ccat882
  %cstr898 = load %CString*, %CString** %cstr883, align 8
  %size899 = load i32, i32* %size886, align 4
  call void @cstr_realloc(%CString* %cstr898, i32 %size899)
  br label %cond_end897

cond_end897:                                      ; preds = %cond_jump_then896, %cstr_ccat882
  %cstr900 = load %CString*, %CString** %cstr883, align 8
  %fieldLLL901 = getelementptr inbounds %CString, %CString* %cstr900, i32 0, i32 1
  %data902 = load i8*, i8** %fieldLLL901, align 8
  %size903 = load i32, i32* %size886, align 4
  %sub904 = sub i32 %size903, 1
  %ch905 = load i32, i32* %ch884, align 4
  %icastJ906 = trunc i32 %ch905 to i8
  %element_addressXYXY907 = getelementptr i8, i8* %data902, i32 %sub904
  store i8 %icastJ906, i8* %element_addressXYXY907, align 1
  %cstr908 = load %CString*, %CString** %cstr883, align 8
  %size909 = load i32, i32* %size886, align 4
  %fieldTU910 = getelementptr inbounds %CString, %CString* %cstr908, i32 0, i32 0
  store i32 %size909, i32* %fieldTU910, align 4
  br label %cstr_ccat_end885

cond_jump_then924:                                ; preds = %cstr_ccat_end885
  %p926 = load i8*, i8** %p, align 8
  %fun_result927 = call i32 @handle_stray1(i8* %p926)
  store i32 %fun_result927, i32* %c, align 4
  %file928 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL929 = getelementptr inbounds %BufferedFile, %BufferedFile* %file928, i32 0, i32 0
  %buf_ptr930 = load i8*, i8** %fieldLLL929, align 8
  store i8* %buf_ptr930, i8** %p, align 8
  br label %cond_end925

cond_end925:                                      ; preds = %cond_jump_then924, %cstr_ccat_end885
  %c934 = load i32, i32* %c, align 4
  store i32 2542, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.66, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum

isnum:                                            ; preds = %cond_end925
  %inline_result_variable935 = alloca i32, align 4
  %c936 = alloca i32, align 4
  store i32 %c934, i32* %c936, align 4
  %c938 = load i32, i32* %c936, align 4
  %gteq_signed = icmp sge i32 %c938, 48
  store i1 %gteq_signed, i1* %andand937, align 1
  br i1 %gteq_signed, label %cond_jump_then939, label %cond_jump_end940

isnum_end:                                        ; preds = %cond_jump_end940
  %inline_result_variable944 = load i32, i32* %inline_result_variable935, align 4
  %icmpA945 = icmp ne i32 %inline_result_variable944, 0
  store i1 %icmpA945, i1* %oror933, align 1
  br i1 %icmpA945, label %cond_jump_end947, label %cond_jump_then946

cond_jump_then939:                                ; preds = %isnum
  %c941 = load i32, i32* %c936, align 4
  %leeq = icmp sle i32 %c941, 57
  %andand942 = and i1 %gteq_signed, %leeq
  store i1 %andand942, i1* %andand937, align 1
  br label %cond_jump_end940

cond_jump_end940:                                 ; preds = %cond_jump_then939, %isnum
  %andand_result_value943 = load i1, i1* %andand937, align 1
  %icastKX = zext i1 %andand_result_value943 to i32
  store i32 %icastKX, i32* %inline_result_variable935, align 4
  br label %isnum_end

cond_jump_then946:                                ; preds = %isnum_end
  %c948 = load i32, i32* %c, align 4
  store i32 2542, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.67, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isid

cond_jump_end947:                                 ; preds = %isid_end, %isnum_end
  %oror_result_value985 = load i1, i1* %oror933, align 1
  store i1 %oror_result_value985, i1* %oror932, align 1
  br i1 %oror_result_value985, label %cond_jump_end987, label %cond_jump_then986

isid:                                             ; preds = %cond_jump_then946
  %inline_result_variable949 = alloca i32, align 4
  %c950 = alloca i32, align 4
  store i32 %c948, i32* %c950, align 4
  %c954 = load i32, i32* %c950, align 4
  %gteq_signed955 = icmp sge i32 %c954, 97
  store i1 %gteq_signed955, i1* %andand953, align 1
  br i1 %gteq_signed955, label %cond_jump_then956, label %cond_jump_end957

isid_end:                                         ; preds = %cond_jump_end976
  %inline_result_variable982 = load i32, i32* %inline_result_variable949, align 4
  %icmpA983 = icmp ne i32 %inline_result_variable982, 0
  %oror984 = or i1 %icmpA945, %icmpA983
  store i1 %oror984, i1* %oror933, align 1
  br label %cond_jump_end947

cond_jump_then956:                                ; preds = %isid
  %c958 = load i32, i32* %c950, align 4
  %leeq959 = icmp sle i32 %c958, 122
  %andand960 = and i1 %gteq_signed955, %leeq959
  store i1 %andand960, i1* %andand953, align 1
  br label %cond_jump_end957

cond_jump_end957:                                 ; preds = %cond_jump_then956, %isid
  %andand_result_value961 = load i1, i1* %andand953, align 1
  store i1 %andand_result_value961, i1* %oror952, align 1
  br i1 %andand_result_value961, label %cond_jump_end963, label %cond_jump_then962

cond_jump_then962:                                ; preds = %cond_jump_end957
  %c965 = load i32, i32* %c950, align 4
  %gteq_signed966 = icmp sge i32 %c965, 65
  store i1 %gteq_signed966, i1* %andand964, align 1
  br i1 %gteq_signed966, label %cond_jump_then967, label %cond_jump_end968

cond_jump_end963:                                 ; preds = %cond_jump_end968, %cond_jump_end957
  %oror_result_value974 = load i1, i1* %oror952, align 1
  store i1 %oror_result_value974, i1* %oror951, align 1
  br i1 %oror_result_value974, label %cond_jump_end976, label %cond_jump_then975

cond_jump_then967:                                ; preds = %cond_jump_then962
  %c969 = load i32, i32* %c950, align 4
  %leeq970 = icmp sle i32 %c969, 90
  %andand971 = and i1 %gteq_signed966, %leeq970
  store i1 %andand971, i1* %andand964, align 1
  br label %cond_jump_end968

cond_jump_end968:                                 ; preds = %cond_jump_then967, %cond_jump_then962
  %andand_result_value972 = load i1, i1* %andand964, align 1
  %oror973 = or i1 %andand_result_value961, %andand_result_value972
  store i1 %oror973, i1* %oror952, align 1
  br label %cond_jump_end963

cond_jump_then975:                                ; preds = %cond_jump_end963
  %c977 = load i32, i32* %c950, align 4
  %eq978 = icmp eq i32 %c977, 95
  %oror979 = or i1 %oror_result_value974, %eq978
  store i1 %oror979, i1* %oror951, align 1
  br label %cond_jump_end976

cond_jump_end976:                                 ; preds = %cond_jump_then975, %cond_jump_end963
  %oror_result_value980 = load i1, i1* %oror951, align 1
  %icastKX981 = zext i1 %oror_result_value980 to i32
  store i32 %icastKX981, i32* %inline_result_variable949, align 4
  br label %isid_end

cond_jump_then986:                                ; preds = %cond_jump_end947
  %c988 = load i32, i32* %c, align 4
  %eq989 = icmp eq i32 %c988, 46
  %oror990 = or i1 %oror_result_value985, %eq989
  store i1 %oror990, i1* %oror932, align 1
  br label %cond_jump_end987

cond_jump_end987:                                 ; preds = %cond_jump_then986, %cond_jump_end947
  %oror_result_value991 = load i1, i1* %oror932, align 1
  store i1 %oror_result_value991, i1* %oror931, align 1
  br i1 %oror_result_value991, label %cond_jump_end993, label %cond_jump_then992

cond_jump_then992:                                ; preds = %cond_jump_end987
  %c996 = load i32, i32* %c, align 4
  %eq997 = icmp eq i32 %c996, 43
  store i1 %eq997, i1* %oror995, align 1
  br i1 %eq997, label %cond_jump_end999, label %cond_jump_then998

cond_jump_end993:                                 ; preds = %cond_jump_end1005, %cond_jump_end987
  %oror_result_value1032 = load i1, i1* %oror931, align 1
  %logical_denial1033 = icmp eq i1 %oror_result_value1032, false
  %castOOOO1034 = zext i1 %logical_denial1033 to i32
  %icmpA1035 = icmp ne i32 %castOOOO1034, 0
  br i1 %icmpA1035, label %cond_jump_then1036, label %cond_end1037

cond_jump_then998:                                ; preds = %cond_jump_then992
  %c1000 = load i32, i32* %c, align 4
  %eq1001 = icmp eq i32 %c1000, 45
  %oror1002 = or i1 %eq997, %eq1001
  store i1 %oror1002, i1* %oror995, align 1
  br label %cond_jump_end999

cond_jump_end999:                                 ; preds = %cond_jump_then998, %cond_jump_then992
  %oror_result_value1003 = load i1, i1* %oror995, align 1
  store i1 %oror_result_value1003, i1* %andand994, align 1
  br i1 %oror_result_value1003, label %cond_jump_then1004, label %cond_jump_end1005

cond_jump_then1004:                               ; preds = %cond_jump_end999
  %t1009 = load i32, i32* %t, align 4
  %eq1010 = icmp eq i32 %t1009, 101
  store i1 %eq1010, i1* %oror1008, align 1
  br i1 %eq1010, label %cond_jump_end1012, label %cond_jump_then1011

cond_jump_end1005:                                ; preds = %cond_jump_end1024, %cond_jump_end999
  %andand_result_value1030 = load i1, i1* %andand994, align 1
  %oror1031 = or i1 %oror_result_value991, %andand_result_value1030
  store i1 %oror1031, i1* %oror931, align 1
  br label %cond_jump_end993

cond_jump_then1011:                               ; preds = %cond_jump_then1004
  %t1013 = load i32, i32* %t, align 4
  %eq1014 = icmp eq i32 %t1013, 69
  %oror1015 = or i1 %eq1010, %eq1014
  store i1 %oror1015, i1* %oror1008, align 1
  br label %cond_jump_end1012

cond_jump_end1012:                                ; preds = %cond_jump_then1011, %cond_jump_then1004
  %oror_result_value1016 = load i1, i1* %oror1008, align 1
  store i1 %oror_result_value1016, i1* %oror1007, align 1
  br i1 %oror_result_value1016, label %cond_jump_end1018, label %cond_jump_then1017

cond_jump_then1017:                               ; preds = %cond_jump_end1012
  %t1019 = load i32, i32* %t, align 4
  %eq1020 = icmp eq i32 %t1019, 112
  %oror1021 = or i1 %oror_result_value1016, %eq1020
  store i1 %oror1021, i1* %oror1007, align 1
  br label %cond_jump_end1018

cond_jump_end1018:                                ; preds = %cond_jump_then1017, %cond_jump_end1012
  %oror_result_value1022 = load i1, i1* %oror1007, align 1
  store i1 %oror_result_value1022, i1* %oror1006, align 1
  br i1 %oror_result_value1022, label %cond_jump_end1024, label %cond_jump_then1023

cond_jump_then1023:                               ; preds = %cond_jump_end1018
  %t1025 = load i32, i32* %t, align 4
  %eq1026 = icmp eq i32 %t1025, 80
  %oror1027 = or i1 %oror_result_value1022, %eq1026
  store i1 %oror1027, i1* %oror1006, align 1
  br label %cond_jump_end1024

cond_jump_end1024:                                ; preds = %cond_jump_then1023, %cond_jump_end1018
  %oror_result_value1028 = load i1, i1* %oror1006, align 1
  %andand1029 = and i1 %oror_result_value1003, %oror_result_value1028
  store i1 %andand1029, i1* %andand994, align 1
  br label %cond_jump_end1005

cond_jump_then1036:                               ; preds = %cond_jump_end993
  br label %cond_end_block878

cond_end1037:                                     ; preds = %after_break1038, %cond_jump_end993
  br label %loop_continue_top_block875

after_break1038:                                  ; No predecessors!
  br label %cond_end1037

cstr_ccat1040:                                    ; preds = %cond_end_block878
  %cstr1041 = alloca %CString*, align 8
  store %CString* @tokcstr, %CString** %cstr1041, align 8
  %ch1042 = alloca i32, align 4
  store i32 0, i32* %ch1042, align 4
  %cstr1045 = load %CString*, %CString** %cstr1041, align 8
  %fieldLLL1046 = getelementptr inbounds %CString, %CString* %cstr1045, i32 0, i32 0
  %size1047 = load i32, i32* %fieldLLL1046, align 4
  %add1048 = add i32 %size1047, 1
  store i32 %add1048, i32* %size1044, align 4
  %size1049 = load i32, i32* %size1044, align 4
  %cstr1050 = load %CString*, %CString** %cstr1041, align 8
  %fieldLLL1051 = getelementptr inbounds %CString, %CString* %cstr1050, i32 0, i32 2
  %size_allocated1052 = load i32, i32* %fieldLLL1051, align 4
  %gt1053 = icmp sgt i32 %size1049, %size_allocated1052
  br i1 %gt1053, label %cond_jump_then1054, label %cond_end1055

cstr_ccat_end1043:                                ; preds = %cond_end1055
  %tokc1069 = load %CValue, %CValue* @tokc, align 16
  %tokcstr1070 = load %CString, %CString* @tokcstr, align 8
  store %CString* @tokcstr, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  store i32 206, i32* @tok, align 4
  br label %end_blockX128

cond_jump_then1054:                               ; preds = %cstr_ccat1040
  %cstr1056 = load %CString*, %CString** %cstr1041, align 8
  %size1057 = load i32, i32* %size1044, align 4
  call void @cstr_realloc(%CString* %cstr1056, i32 %size1057)
  br label %cond_end1055

cond_end1055:                                     ; preds = %cond_jump_then1054, %cstr_ccat1040
  %cstr1058 = load %CString*, %CString** %cstr1041, align 8
  %fieldLLL1059 = getelementptr inbounds %CString, %CString* %cstr1058, i32 0, i32 1
  %data1060 = load i8*, i8** %fieldLLL1059, align 8
  %size1061 = load i32, i32* %size1044, align 4
  %sub1062 = sub i32 %size1061, 1
  %ch1063 = load i32, i32* %ch1042, align 4
  %icastJ1064 = trunc i32 %ch1063 to i8
  %element_addressXYXY1065 = getelementptr i8, i8* %data1060, i32 %sub1062
  store i8 %icastJ1064, i8* %element_addressXYXY1065, align 1
  %cstr1066 = load %CString*, %CString** %cstr1041, align 8
  %size1067 = load i32, i32* %size1044, align 4
  %fieldTU1068 = getelementptr inbounds %CString, %CString* %cstr1066, i32 0, i32 0
  store i32 %size1067, i32* %fieldTU1068, align 4
  br label %cstr_ccat_end1043

after_break1071:                                  ; No predecessors!
  br label %cond_else_blockX872
  br label %cond_else_blockX1073

cond_then_block1072:                              ; preds = %cond_else_blockX872
  %p1075 = load i8*, i8** %p, align 8
  %ptrToIntC1076 = ptrtoint i8* %p1075 to i64
  %add1077 = add i64 %ptrToIntC1076, 1
  %intToPtrB1078 = inttoptr i64 %add1077 to i8*
  store i8* %intToPtrB1078, i8** %p, align 8
  %p1079 = load i8*, i8** %p, align 8
  %ptrToIntI1080 = ptrtoint i8* %p1079 to i64
  %sub1081 = sub i64 %ptrToIntI1080, 1
  %iintToPtrD1082 = inttoptr i64 %sub1081 to i8*
  %p1083 = load i8*, i8** %p, align 8
  %derefference_valueB1084 = load i8, i8* %p1083, align 1
  %icastKY1085 = zext i8 %derefference_valueB1084 to i32
  store i32 %icastKY1085, i32* %c, align 4
  %c1086 = load i32, i32* %c, align 4
  %eq1087 = icmp eq i32 %c1086, 92
  br i1 %eq1087, label %cond_jump_then1088, label %cond_end1089

cond_else_blockX1073:                             ; preds = %after_break1194, %cond_else_blockX872, %after_break1071
  %eqtmp1197 = icmp eq i32 %c129, 39
  br i1 %eqtmp1197, label %cond_then_block1195, label %cond_else_blockX1196
  br label %cond_else_blockX1198

cond_jump_then1088:                               ; preds = %cond_then_block1072
  %p1090 = load i8*, i8** %p, align 8
  %fun_result1091 = call i32 @handle_stray1(i8* %p1090)
  store i32 %fun_result1091, i32* %c, align 4
  %file1092 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1093 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1092, i32 0, i32 0
  %buf_ptr1094 = load i8*, i8** %fieldLLL1093, align 8
  store i8* %buf_ptr1094, i8** %p, align 8
  br label %cond_end1089

cond_end1089:                                     ; preds = %cond_jump_then1088, %cond_then_block1072
  %c1095 = load i32, i32* %c, align 4
  store i32 2555, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.69, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum1096

isnum1096:                                        ; preds = %cond_end1089
  %inline_result_variable1097 = alloca i32, align 4
  %c1098 = alloca i32, align 4
  store i32 %c1095, i32* %c1098, align 4
  %c1101 = load i32, i32* %c1098, align 4
  %gteq_signed1102 = icmp sge i32 %c1101, 48
  store i1 %gteq_signed1102, i1* %andand1100, align 1
  br i1 %gteq_signed1102, label %cond_jump_then1103, label %cond_jump_end1104

isnum_end1099:                                    ; preds = %cond_jump_end1104
  %inline_result_variable1110 = load i32, i32* %inline_result_variable1097, align 4
  %icmpA1111 = icmp ne i32 %inline_result_variable1110, 0
  br i1 %icmpA1111, label %cond_jump_then1112, label %cond_jump_elif01113

cond_jump_then1103:                               ; preds = %isnum1096
  %c1105 = load i32, i32* %c1098, align 4
  %leeq1106 = icmp sle i32 %c1105, 57
  %andand1107 = and i1 %gteq_signed1102, %leeq1106
  store i1 %andand1107, i1* %andand1100, align 1
  br label %cond_jump_end1104

cond_jump_end1104:                                ; preds = %cond_jump_then1103, %isnum1096
  %andand_result_value1108 = load i1, i1* %andand1100, align 1
  %icastKX1109 = zext i1 %andand_result_value1108 to i32
  store i32 %icastKX1109, i32* %inline_result_variable1097, align 4
  br label %isnum_end1099

cond_jump_then1112:                               ; preds = %isnum_end1099
  %tokcstr1117 = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  %tokcstr1118 = load %CString, %CString* @tokcstr, align 8
  store i32 2557, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.70, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat1119

cond_jump_elif01113:                              ; preds = %isnum_end1099
  %c1148 = load i32, i32* %c, align 4
  %eq1149 = icmp eq i32 %c1148, 46
  br i1 %eq1149, label %cond_jump_elif_then01114, label %cond_else_block1115

cond_jump_elif_then01114:                         ; preds = %cond_jump_elif01113
  %p1150 = load i8*, i8** %p, align 8
  %ptrToIntC1151 = ptrtoint i8* %p1150 to i64
  %add1152 = add i64 %ptrToIntC1151, 1
  %intToPtrB1153 = inttoptr i64 %add1152 to i8*
  store i8* %intToPtrB1153, i8** %p, align 8
  %p1154 = load i8*, i8** %p, align 8
  %ptrToIntI1155 = ptrtoint i8* %p1154 to i64
  %sub1156 = sub i64 %ptrToIntI1155, 1
  %iintToPtrD1157 = inttoptr i64 %sub1156 to i8*
  %p1158 = load i8*, i8** %p, align 8
  %derefference_valueB1159 = load i8, i8* %p1158, align 1
  %icastKY1160 = zext i8 %derefference_valueB1159 to i32
  store i32 %icastKY1160, i32* %c, align 4
  %c1161 = load i32, i32* %c, align 4
  %eq1162 = icmp eq i32 %c1161, 92
  br i1 %eq1162, label %cond_jump_then1163, label %cond_end1164

cond_else_block1115:                              ; preds = %cond_jump_elif01113
  store i32 46, i32* @tok, align 4
  br label %cond_end1116

cond_end1116:                                     ; preds = %cond_else_block1115, %cond_end1188, %cstr_ccat_end1122
  br label %end_blockX128

cstr_ccat1119:                                    ; preds = %cond_jump_then1112
  %cstr1120 = alloca %CString*, align 8
  store %CString* @tokcstr, %CString** %cstr1120, align 8
  %ch1121 = alloca i32, align 4
  store i32 46, i32* %ch1121, align 4
  %cstr1124 = load %CString*, %CString** %cstr1120, align 8
  %fieldLLL1125 = getelementptr inbounds %CString, %CString* %cstr1124, i32 0, i32 0
  %size1126 = load i32, i32* %fieldLLL1125, align 4
  %add1127 = add i32 %size1126, 1
  store i32 %add1127, i32* %size1123, align 4
  %size1128 = load i32, i32* %size1123, align 4
  %cstr1129 = load %CString*, %CString** %cstr1120, align 8
  %fieldLLL1130 = getelementptr inbounds %CString, %CString* %cstr1129, i32 0, i32 2
  %size_allocated1131 = load i32, i32* %fieldLLL1130, align 4
  %gt1132 = icmp sgt i32 %size1128, %size_allocated1131
  br i1 %gt1132, label %cond_jump_then1133, label %cond_end1134

cstr_ccat_end1122:                                ; preds = %cond_end1134
  br label %next_nomacro1.parse_num
  br label %cond_end1116

cond_jump_then1133:                               ; preds = %cstr_ccat1119
  %cstr1135 = load %CString*, %CString** %cstr1120, align 8
  %size1136 = load i32, i32* %size1123, align 4
  call void @cstr_realloc(%CString* %cstr1135, i32 %size1136)
  br label %cond_end1134

cond_end1134:                                     ; preds = %cond_jump_then1133, %cstr_ccat1119
  %cstr1137 = load %CString*, %CString** %cstr1120, align 8
  %fieldLLL1138 = getelementptr inbounds %CString, %CString* %cstr1137, i32 0, i32 1
  %data1139 = load i8*, i8** %fieldLLL1138, align 8
  %size1140 = load i32, i32* %size1123, align 4
  %sub1141 = sub i32 %size1140, 1
  %ch1142 = load i32, i32* %ch1121, align 4
  %icastJ1143 = trunc i32 %ch1142 to i8
  %element_addressXYXY1144 = getelementptr i8, i8* %data1139, i32 %sub1141
  store i8 %icastJ1143, i8* %element_addressXYXY1144, align 1
  %cstr1145 = load %CString*, %CString** %cstr1120, align 8
  %size1146 = load i32, i32* %size1123, align 4
  %fieldTU1147 = getelementptr inbounds %CString, %CString* %cstr1145, i32 0, i32 0
  store i32 %size1146, i32* %fieldTU1147, align 4
  br label %cstr_ccat_end1122

cond_jump_then1163:                               ; preds = %cond_jump_elif_then01114
  %p1165 = load i8*, i8** %p, align 8
  %fun_result1166 = call i32 @handle_stray1(i8* %p1165)
  store i32 %fun_result1166, i32* %c, align 4
  %file1167 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1168 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1167, i32 0, i32 0
  %buf_ptr1169 = load i8*, i8** %fieldLLL1168, align 8
  store i8* %buf_ptr1169, i8** %p, align 8
  br label %cond_end1164

cond_end1164:                                     ; preds = %cond_jump_then1163, %cond_jump_elif_then01114
  %c1170 = load i32, i32* %c, align 4
  %not_eq1171 = icmp ne i32 %c1170, 46
  br i1 %not_eq1171, label %cond_jump_then1172, label %cond_end1173

cond_jump_then1172:                               ; preds = %cond_end1164
  call void @expect(i8* bitcast ([4 x i8]* @77 to i8*))
  br label %cond_end1173

cond_end1173:                                     ; preds = %cond_jump_then1172, %cond_end1164
  %p1174 = load i8*, i8** %p, align 8
  %ptrToIntC1175 = ptrtoint i8* %p1174 to i64
  %add1176 = add i64 %ptrToIntC1175, 1
  %intToPtrB1177 = inttoptr i64 %add1176 to i8*
  store i8* %intToPtrB1177, i8** %p, align 8
  %p1178 = load i8*, i8** %p, align 8
  %ptrToIntI1179 = ptrtoint i8* %p1178 to i64
  %sub1180 = sub i64 %ptrToIntI1179, 1
  %iintToPtrD1181 = inttoptr i64 %sub1180 to i8*
  %p1182 = load i8*, i8** %p, align 8
  %derefference_valueB1183 = load i8, i8* %p1182, align 1
  %icastKY1184 = zext i8 %derefference_valueB1183 to i32
  store i32 %icastKY1184, i32* %c, align 4
  %c1185 = load i32, i32* %c, align 4
  %eq1186 = icmp eq i32 %c1185, 92
  br i1 %eq1186, label %cond_jump_then1187, label %cond_end1188

cond_jump_then1187:                               ; preds = %cond_end1173
  %p1189 = load i8*, i8** %p, align 8
  %fun_result1190 = call i32 @handle_stray1(i8* %p1189)
  store i32 %fun_result1190, i32* %c, align 4
  %file1191 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1192 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1191, i32 0, i32 0
  %buf_ptr1193 = load i8*, i8** %fieldLLL1192, align 8
  store i8* %buf_ptr1193, i8** %p, align 8
  br label %cond_end1188

cond_end1188:                                     ; preds = %cond_jump_then1187, %cond_end1173
  store i32 204, i32* @tok, align 4
  br label %cond_end1116

after_break1194:                                  ; No predecessors!
  br label %cond_else_blockX1073
  br label %cond_else_blockX1196

cond_then_block1195:                              ; preds = %cond_else_blockX1196, %cond_else_blockX1073
  store i32 0, i32* %is_long, align 4
  br label %next_nomacro1.str_const

cond_else_blockX1196:                             ; preds = %cond_else_blockX1073, %after_break1194
  %eqtmp1199 = icmp eq i32 %c129, 34
  br i1 %eqtmp1199, label %cond_then_block1195, label %cond_else_blockX1198

cond_else_blockX1198:                             ; preds = %after_break1291, %cond_else_blockX1196, %cond_else_blockX1073
  %eqtmp1294 = icmp eq i32 %c129, 60
  br i1 %eqtmp1294, label %cond_then_block1292, label %cond_else_blockX1293

cstr_ccat1207:                                    ; preds = %next_nomacro1.str_const
  %cstr1208 = alloca %CString*, align 8
  store %CString* %str, %CString** %cstr1208, align 8
  %ch1209 = alloca i32, align 4
  store i32 0, i32* %ch1209, align 4
  %cstr1212 = load %CString*, %CString** %cstr1208, align 8
  %fieldLLL1213 = getelementptr inbounds %CString, %CString* %cstr1212, i32 0, i32 0
  %size1214 = load i32, i32* %fieldLLL1213, align 4
  %add1215 = add i32 %size1214, 1
  store i32 %add1215, i32* %size1211, align 4
  %size1216 = load i32, i32* %size1211, align 4
  %cstr1217 = load %CString*, %CString** %cstr1208, align 8
  %fieldLLL1218 = getelementptr inbounds %CString, %CString* %cstr1217, i32 0, i32 2
  %size_allocated1219 = load i32, i32* %fieldLLL1218, align 4
  %gt1220 = icmp sgt i32 %size1216, %size_allocated1219
  br i1 %gt1220, label %cond_jump_then1221, label %cond_end1222

cstr_ccat_end1210:                                ; preds = %cond_end1222
  %tokcstr1236 = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  %tokcstr1237 = load %CString, %CString* @tokcstr, align 8
  %str1238 = load %CString, %CString* %str, align 8
  %fieldVVV = getelementptr inbounds %CString, %CString* %str, i32 0, i32 1
  %data1239 = load i8*, i8** %fieldVVV, align 8
  %is_long1240 = load i32, i32* %is_long, align 4
  call void @parse_escape_string(%CString* @tokcstr, i8* %data1239, i32 %is_long1240)
  %str1241 = load %CString, %CString* %str, align 8
  call void @cstr_free(%CString* %str)
  %sep1242 = load i32, i32* %sep, align 4
  %eq1243 = icmp eq i32 %sep1242, 39
  br i1 %eq1243, label %cond_jump_then1244, label %cond_else_block1245

cond_jump_then1221:                               ; preds = %cstr_ccat1207
  %cstr1223 = load %CString*, %CString** %cstr1208, align 8
  %size1224 = load i32, i32* %size1211, align 4
  call void @cstr_realloc(%CString* %cstr1223, i32 %size1224)
  br label %cond_end1222

cond_end1222:                                     ; preds = %cond_jump_then1221, %cstr_ccat1207
  %cstr1225 = load %CString*, %CString** %cstr1208, align 8
  %fieldLLL1226 = getelementptr inbounds %CString, %CString* %cstr1225, i32 0, i32 1
  %data1227 = load i8*, i8** %fieldLLL1226, align 8
  %size1228 = load i32, i32* %size1211, align 4
  %sub1229 = sub i32 %size1228, 1
  %ch1230 = load i32, i32* %ch1209, align 4
  %icastJ1231 = trunc i32 %ch1230 to i8
  %element_addressXYXY1232 = getelementptr i8, i8* %data1227, i32 %sub1229
  store i8 %icastJ1231, i8* %element_addressXYXY1232, align 1
  %cstr1233 = load %CString*, %CString** %cstr1208, align 8
  %size1234 = load i32, i32* %size1211, align 4
  %fieldTU1235 = getelementptr inbounds %CString, %CString* %cstr1233, i32 0, i32 0
  store i32 %size1234, i32* %fieldTU1235, align 4
  br label %cstr_ccat_end1210

cond_jump_then1244:                               ; preds = %cstr_ccat_end1210
  %is_long1247 = load i32, i32* %is_long, align 4
  %logical_denial1248 = icmp eq i32 %is_long1247, 0
  %castOOOO1249 = zext i1 %logical_denial1248 to i32
  %icmpA1250 = icmp ne i32 %castOOOO1249, 0
  br i1 %icmpA1250, label %cond_jump_then1251, label %cond_else_block1252

cond_else_block1245:                              ; preds = %cstr_ccat_end1210
  %tokc1282 = load %CValue, %CValue* @tokc, align 16
  %tokcstr1283 = load %CString, %CString* @tokcstr, align 8
  store %CString* @tokcstr, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %is_long1284 = load i32, i32* %is_long, align 4
  %logical_denial1285 = icmp eq i32 %is_long1284, 0
  %castOOOO1286 = zext i1 %logical_denial1285 to i32
  %icmpA1287 = icmp ne i32 %castOOOO1286, 0
  br i1 %icmpA1287, label %cond_jump_then1288, label %cond_else_block1289

cond_end1246:                                     ; preds = %cond_end1290, %cond_end1273
  br label %end_blockX128

cond_jump_then1251:                               ; preds = %cond_jump_then1244
  store i32 1, i32* %char_size, align 4
  br label %cond_end1253

cond_else_block1252:                              ; preds = %cond_jump_then1244
  store i32 4, i32* %char_size, align 4
  br label %cond_end1253

cond_end1253:                                     ; preds = %cond_else_block1252, %cond_jump_then1251
  %tokcstr1254 = load %CString, %CString* @tokcstr, align 8
  %size1255 = load i32, i32* getelementptr inbounds (%CString, %CString* @tokcstr, i32 0, i32 0), align 4
  %char_size1256 = load i32, i32* %char_size, align 4
  %leeq1257 = icmp sle i32 %size1255, %char_size1256
  br i1 %leeq1257, label %cond_jump_then1258, label %cond_end1259

cond_jump_then1258:                               ; preds = %cond_end1253
  call void (i8*, ...) @error(i8* bitcast ([25 x i8]* @78 to i8*))
  br label %cond_end1259

cond_end1259:                                     ; preds = %cond_jump_then1258, %cond_end1253
  %tokcstr1260 = load %CString, %CString* @tokcstr, align 8
  %size1261 = load i32, i32* getelementptr inbounds (%CString, %CString* @tokcstr, i32 0, i32 0), align 4
  %char_size1262 = load i32, i32* %char_size, align 4
  %mul1263 = mul i32 2, %char_size1262
  %gt1264 = icmp sgt i32 %size1261, %mul1263
  br i1 %gt1264, label %cond_jump_then1265, label %cond_end1266

cond_jump_then1265:                               ; preds = %cond_end1259
  call void (i8*, ...) @warning(i8* bitcast ([35 x i8]* @79 to i8*))
  br label %cond_end1266

cond_end1266:                                     ; preds = %cond_jump_then1265, %cond_end1259
  %is_long1267 = load i32, i32* %is_long, align 4
  %logical_denial1268 = icmp eq i32 %is_long1267, 0
  %castOOOO1269 = zext i1 %logical_denial1268 to i32
  %icmpA1270 = icmp ne i32 %castOOOO1269, 0
  br i1 %icmpA1270, label %cond_jump_then1271, label %cond_else_block1272

cond_jump_then1271:                               ; preds = %cond_end1266
  %tokc1274 = load %CValue, %CValue* @tokc, align 16
  %tokcstr1275 = load %CString, %CString* @tokcstr, align 8
  %data1276 = load i8*, i8** getelementptr inbounds (%CString, %CString* @tokcstr, i32 0, i32 1), align 8
  %derefference_valueA = load i8, i8* %data1276, align 1
  %icastL1277 = sext i8 %derefference_valueA to i32
  store i32 %icastL1277, i32* bitcast (%CValue* @tokc to i32*), align 4
  store i32 180, i32* @tok, align 4
  br label %cond_end1273

cond_else_block1272:                              ; preds = %cond_end1266
  %tokc1278 = load %CValue, %CValue* @tokc, align 16
  %tokcstr1279 = load %CString, %CString* @tokcstr, align 8
  %data1280 = load i8*, i8** getelementptr inbounds (%CString, %CString* @tokcstr, i32 0, i32 1), align 8
  %pointer_cast = bitcast i8* %data1280 to i32*
  %derefference_valueA1281 = load i32, i32* %pointer_cast, align 4
  store i32 %derefference_valueA1281, i32* bitcast (%CValue* @tokc to i32*), align 4
  store i32 183, i32* @tok, align 4
  br label %cond_end1273

cond_end1273:                                     ; preds = %cond_else_block1272, %cond_jump_then1271
  br label %cond_end1246

cond_jump_then1288:                               ; preds = %cond_else_block1245
  store i32 181, i32* @tok, align 4
  br label %cond_end1290

cond_else_block1289:                              ; preds = %cond_else_block1245
  store i32 184, i32* @tok, align 4
  br label %cond_end1290

cond_end1290:                                     ; preds = %cond_else_block1289, %cond_jump_then1288
  br label %cond_end1246

after_break1291:                                  ; No predecessors!
  br label %cond_else_blockX1198
  br label %cond_else_blockX1293

cond_then_block1292:                              ; preds = %cond_else_blockX1198
  %p1295 = load i8*, i8** %p, align 8
  %ptrToIntC1296 = ptrtoint i8* %p1295 to i64
  %add1297 = add i64 %ptrToIntC1296, 1
  %intToPtrB1298 = inttoptr i64 %add1297 to i8*
  store i8* %intToPtrB1298, i8** %p, align 8
  %p1299 = load i8*, i8** %p, align 8
  %ptrToIntI1300 = ptrtoint i8* %p1299 to i64
  %sub1301 = sub i64 %ptrToIntI1300, 1
  %iintToPtrD1302 = inttoptr i64 %sub1301 to i8*
  %p1303 = load i8*, i8** %p, align 8
  %derefference_valueB1304 = load i8, i8* %p1303, align 1
  %icastKY1305 = zext i8 %derefference_valueB1304 to i32
  store i32 %icastKY1305, i32* %c, align 4
  %c1306 = load i32, i32* %c, align 4
  %eq1307 = icmp eq i32 %c1306, 92
  br i1 %eq1307, label %cond_jump_then1308, label %cond_end1309

cond_else_blockX1293:                             ; preds = %after_break1365, %cond_else_blockX1198, %after_break1291
  %eqtmp1368 = icmp eq i32 %c129, 62
  br i1 %eqtmp1368, label %cond_then_block1366, label %cond_else_blockX1367

cond_jump_then1308:                               ; preds = %cond_then_block1292
  %p1310 = load i8*, i8** %p, align 8
  %fun_result1311 = call i32 @handle_stray1(i8* %p1310)
  store i32 %fun_result1311, i32* %c, align 4
  %file1312 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1313 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1312, i32 0, i32 0
  %buf_ptr1314 = load i8*, i8** %fieldLLL1313, align 8
  store i8* %buf_ptr1314, i8** %p, align 8
  br label %cond_end1309

cond_end1309:                                     ; preds = %cond_jump_then1308, %cond_then_block1292
  %c1315 = load i32, i32* %c, align 4
  %eq1316 = icmp eq i32 %c1315, 61
  br i1 %eq1316, label %cond_jump_then1317, label %cond_jump_elif01318

cond_jump_then1317:                               ; preds = %cond_end1309
  %p1322 = load i8*, i8** %p, align 8
  %ptrToIntC1323 = ptrtoint i8* %p1322 to i64
  %add1324 = add i64 %ptrToIntC1323, 1
  %intToPtrB1325 = inttoptr i64 %add1324 to i8*
  store i8* %intToPtrB1325, i8** %p, align 8
  %p1326 = load i8*, i8** %p, align 8
  %ptrToIntI1327 = ptrtoint i8* %p1326 to i64
  %sub1328 = sub i64 %ptrToIntI1327, 1
  %iintToPtrD1329 = inttoptr i64 %sub1328 to i8*
  store i32 158, i32* @tok, align 4
  br label %cond_end1321

cond_jump_elif01318:                              ; preds = %cond_end1309
  %c1330 = load i32, i32* %c, align 4
  %eq1331 = icmp eq i32 %c1330, 60
  br i1 %eq1331, label %cond_jump_elif_then01319, label %cond_else_block1320

cond_jump_elif_then01319:                         ; preds = %cond_jump_elif01318
  %p1332 = load i8*, i8** %p, align 8
  %ptrToIntC1333 = ptrtoint i8* %p1332 to i64
  %add1334 = add i64 %ptrToIntC1333, 1
  %intToPtrB1335 = inttoptr i64 %add1334 to i8*
  store i8* %intToPtrB1335, i8** %p, align 8
  %p1336 = load i8*, i8** %p, align 8
  %ptrToIntI1337 = ptrtoint i8* %p1336 to i64
  %sub1338 = sub i64 %ptrToIntI1337, 1
  %iintToPtrD1339 = inttoptr i64 %sub1338 to i8*
  %p1340 = load i8*, i8** %p, align 8
  %derefference_valueB1341 = load i8, i8* %p1340, align 1
  %icastKY1342 = zext i8 %derefference_valueB1341 to i32
  store i32 %icastKY1342, i32* %c, align 4
  %c1343 = load i32, i32* %c, align 4
  %eq1344 = icmp eq i32 %c1343, 92
  br i1 %eq1344, label %cond_jump_then1345, label %cond_end1346

cond_else_block1320:                              ; preds = %cond_jump_elif01318
  store i32 156, i32* @tok, align 4
  br label %cond_end1321

cond_end1321:                                     ; preds = %cond_else_block1320, %cond_end1356, %cond_jump_then1317
  br label %end_blockX128

cond_jump_then1345:                               ; preds = %cond_jump_elif_then01319
  %p1347 = load i8*, i8** %p, align 8
  %fun_result1348 = call i32 @handle_stray1(i8* %p1347)
  store i32 %fun_result1348, i32* %c, align 4
  %file1349 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1350 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1349, i32 0, i32 0
  %buf_ptr1351 = load i8*, i8** %fieldLLL1350, align 8
  store i8* %buf_ptr1351, i8** %p, align 8
  br label %cond_end1346

cond_end1346:                                     ; preds = %cond_jump_then1345, %cond_jump_elif_then01319
  %c1352 = load i32, i32* %c, align 4
  %eq1353 = icmp eq i32 %c1352, 61
  br i1 %eq1353, label %cond_jump_then1354, label %cond_else_block1355

cond_jump_then1354:                               ; preds = %cond_end1346
  %p1357 = load i8*, i8** %p, align 8
  %ptrToIntC1358 = ptrtoint i8* %p1357 to i64
  %add1359 = add i64 %ptrToIntC1358, 1
  %intToPtrB1360 = inttoptr i64 %add1359 to i8*
  store i8* %intToPtrB1360, i8** %p, align 8
  %p1361 = load i8*, i8** %p, align 8
  %ptrToIntI1362 = ptrtoint i8* %p1361 to i64
  %sub1363 = sub i64 %ptrToIntI1362, 1
  %iintToPtrD1364 = inttoptr i64 %sub1363 to i8*
  store i32 129, i32* @tok, align 4
  br label %cond_end1356

cond_else_block1355:                              ; preds = %cond_end1346
  store i32 1, i32* @tok, align 4
  br label %cond_end1356

cond_end1356:                                     ; preds = %cond_else_block1355, %cond_jump_then1354
  br label %cond_end1321

after_break1365:                                  ; No predecessors!
  br label %cond_else_blockX1293
  br label %cond_else_blockX1367

cond_then_block1366:                              ; preds = %cond_else_blockX1293
  %p1369 = load i8*, i8** %p, align 8
  %ptrToIntC1370 = ptrtoint i8* %p1369 to i64
  %add1371 = add i64 %ptrToIntC1370, 1
  %intToPtrB1372 = inttoptr i64 %add1371 to i8*
  store i8* %intToPtrB1372, i8** %p, align 8
  %p1373 = load i8*, i8** %p, align 8
  %ptrToIntI1374 = ptrtoint i8* %p1373 to i64
  %sub1375 = sub i64 %ptrToIntI1374, 1
  %iintToPtrD1376 = inttoptr i64 %sub1375 to i8*
  %p1377 = load i8*, i8** %p, align 8
  %derefference_valueB1378 = load i8, i8* %p1377, align 1
  %icastKY1379 = zext i8 %derefference_valueB1378 to i32
  store i32 %icastKY1379, i32* %c, align 4
  %c1380 = load i32, i32* %c, align 4
  %eq1381 = icmp eq i32 %c1380, 92
  br i1 %eq1381, label %cond_jump_then1382, label %cond_end1383

cond_else_blockX1367:                             ; preds = %after_break1439, %cond_else_blockX1293, %after_break1365
  %eqtmp1442 = icmp eq i32 %c129, 38
  br i1 %eqtmp1442, label %cond_then_block1440, label %cond_else_blockX1441

cond_jump_then1382:                               ; preds = %cond_then_block1366
  %p1384 = load i8*, i8** %p, align 8
  %fun_result1385 = call i32 @handle_stray1(i8* %p1384)
  store i32 %fun_result1385, i32* %c, align 4
  %file1386 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1387 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1386, i32 0, i32 0
  %buf_ptr1388 = load i8*, i8** %fieldLLL1387, align 8
  store i8* %buf_ptr1388, i8** %p, align 8
  br label %cond_end1383

cond_end1383:                                     ; preds = %cond_jump_then1382, %cond_then_block1366
  %c1389 = load i32, i32* %c, align 4
  %eq1390 = icmp eq i32 %c1389, 61
  br i1 %eq1390, label %cond_jump_then1391, label %cond_jump_elif01392

cond_jump_then1391:                               ; preds = %cond_end1383
  %p1396 = load i8*, i8** %p, align 8
  %ptrToIntC1397 = ptrtoint i8* %p1396 to i64
  %add1398 = add i64 %ptrToIntC1397, 1
  %intToPtrB1399 = inttoptr i64 %add1398 to i8*
  store i8* %intToPtrB1399, i8** %p, align 8
  %p1400 = load i8*, i8** %p, align 8
  %ptrToIntI1401 = ptrtoint i8* %p1400 to i64
  %sub1402 = sub i64 %ptrToIntI1401, 1
  %iintToPtrD1403 = inttoptr i64 %sub1402 to i8*
  store i32 157, i32* @tok, align 4
  br label %cond_end1395

cond_jump_elif01392:                              ; preds = %cond_end1383
  %c1404 = load i32, i32* %c, align 4
  %eq1405 = icmp eq i32 %c1404, 62
  br i1 %eq1405, label %cond_jump_elif_then01393, label %cond_else_block1394

cond_jump_elif_then01393:                         ; preds = %cond_jump_elif01392
  %p1406 = load i8*, i8** %p, align 8
  %ptrToIntC1407 = ptrtoint i8* %p1406 to i64
  %add1408 = add i64 %ptrToIntC1407, 1
  %intToPtrB1409 = inttoptr i64 %add1408 to i8*
  store i8* %intToPtrB1409, i8** %p, align 8
  %p1410 = load i8*, i8** %p, align 8
  %ptrToIntI1411 = ptrtoint i8* %p1410 to i64
  %sub1412 = sub i64 %ptrToIntI1411, 1
  %iintToPtrD1413 = inttoptr i64 %sub1412 to i8*
  %p1414 = load i8*, i8** %p, align 8
  %derefference_valueB1415 = load i8, i8* %p1414, align 1
  %icastKY1416 = zext i8 %derefference_valueB1415 to i32
  store i32 %icastKY1416, i32* %c, align 4
  %c1417 = load i32, i32* %c, align 4
  %eq1418 = icmp eq i32 %c1417, 92
  br i1 %eq1418, label %cond_jump_then1419, label %cond_end1420

cond_else_block1394:                              ; preds = %cond_jump_elif01392
  store i32 159, i32* @tok, align 4
  br label %cond_end1395

cond_end1395:                                     ; preds = %cond_else_block1394, %cond_end1430, %cond_jump_then1391
  br label %end_blockX128

cond_jump_then1419:                               ; preds = %cond_jump_elif_then01393
  %p1421 = load i8*, i8** %p, align 8
  %fun_result1422 = call i32 @handle_stray1(i8* %p1421)
  store i32 %fun_result1422, i32* %c, align 4
  %file1423 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1424 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1423, i32 0, i32 0
  %buf_ptr1425 = load i8*, i8** %fieldLLL1424, align 8
  store i8* %buf_ptr1425, i8** %p, align 8
  br label %cond_end1420

cond_end1420:                                     ; preds = %cond_jump_then1419, %cond_jump_elif_then01393
  %c1426 = load i32, i32* %c, align 4
  %eq1427 = icmp eq i32 %c1426, 61
  br i1 %eq1427, label %cond_jump_then1428, label %cond_else_block1429

cond_jump_then1428:                               ; preds = %cond_end1420
  %p1431 = load i8*, i8** %p, align 8
  %ptrToIntC1432 = ptrtoint i8* %p1431 to i64
  %add1433 = add i64 %ptrToIntC1432, 1
  %intToPtrB1434 = inttoptr i64 %add1433 to i8*
  store i8* %intToPtrB1434, i8** %p, align 8
  %p1435 = load i8*, i8** %p, align 8
  %ptrToIntI1436 = ptrtoint i8* %p1435 to i64
  %sub1437 = sub i64 %ptrToIntI1436, 1
  %iintToPtrD1438 = inttoptr i64 %sub1437 to i8*
  store i32 130, i32* @tok, align 4
  br label %cond_end1430

cond_else_block1429:                              ; preds = %cond_end1420
  store i32 2, i32* @tok, align 4
  br label %cond_end1430

cond_end1430:                                     ; preds = %cond_else_block1429, %cond_jump_then1428
  br label %cond_end1395

after_break1439:                                  ; No predecessors!
  br label %cond_else_blockX1367
  br label %cond_else_blockX1441

cond_then_block1440:                              ; preds = %cond_else_blockX1367
  %p1443 = load i8*, i8** %p, align 8
  %ptrToIntC1444 = ptrtoint i8* %p1443 to i64
  %add1445 = add i64 %ptrToIntC1444, 1
  %intToPtrB1446 = inttoptr i64 %add1445 to i8*
  store i8* %intToPtrB1446, i8** %p, align 8
  %p1447 = load i8*, i8** %p, align 8
  %ptrToIntI1448 = ptrtoint i8* %p1447 to i64
  %sub1449 = sub i64 %ptrToIntI1448, 1
  %iintToPtrD1450 = inttoptr i64 %sub1449 to i8*
  %p1451 = load i8*, i8** %p, align 8
  %derefference_valueB1452 = load i8, i8* %p1451, align 1
  %icastKY1453 = zext i8 %derefference_valueB1452 to i32
  store i32 %icastKY1453, i32* %c, align 4
  %c1454 = load i32, i32* %c, align 4
  %eq1455 = icmp eq i32 %c1454, 92
  br i1 %eq1455, label %cond_jump_then1456, label %cond_end1457

cond_else_blockX1441:                             ; preds = %after_break1488, %cond_else_blockX1367, %after_break1439
  %eqtmp1491 = icmp eq i32 %c129, 124
  br i1 %eqtmp1491, label %cond_then_block1489, label %cond_else_blockX1490

cond_jump_then1456:                               ; preds = %cond_then_block1440
  %p1458 = load i8*, i8** %p, align 8
  %fun_result1459 = call i32 @handle_stray1(i8* %p1458)
  store i32 %fun_result1459, i32* %c, align 4
  %file1460 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1461 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1460, i32 0, i32 0
  %buf_ptr1462 = load i8*, i8** %fieldLLL1461, align 8
  store i8* %buf_ptr1462, i8** %p, align 8
  br label %cond_end1457

cond_end1457:                                     ; preds = %cond_jump_then1456, %cond_then_block1440
  %c1463 = load i32, i32* %c, align 4
  %eq1464 = icmp eq i32 %c1463, 38
  br i1 %eq1464, label %cond_jump_then1465, label %cond_jump_elif01466

cond_jump_then1465:                               ; preds = %cond_end1457
  %p1470 = load i8*, i8** %p, align 8
  %ptrToIntC1471 = ptrtoint i8* %p1470 to i64
  %add1472 = add i64 %ptrToIntC1471, 1
  %intToPtrB1473 = inttoptr i64 %add1472 to i8*
  store i8* %intToPtrB1473, i8** %p, align 8
  %p1474 = load i8*, i8** %p, align 8
  %ptrToIntI1475 = ptrtoint i8* %p1474 to i64
  %sub1476 = sub i64 %ptrToIntI1475, 1
  %iintToPtrD1477 = inttoptr i64 %sub1476 to i8*
  store i32 160, i32* @tok, align 4
  br label %cond_end1469

cond_jump_elif01466:                              ; preds = %cond_end1457
  %c1478 = load i32, i32* %c, align 4
  %eq1479 = icmp eq i32 %c1478, 61
  br i1 %eq1479, label %cond_jump_elif_then01467, label %cond_else_block1468

cond_jump_elif_then01467:                         ; preds = %cond_jump_elif01466
  %p1480 = load i8*, i8** %p, align 8
  %ptrToIntC1481 = ptrtoint i8* %p1480 to i64
  %add1482 = add i64 %ptrToIntC1481, 1
  %intToPtrB1483 = inttoptr i64 %add1482 to i8*
  store i8* %intToPtrB1483, i8** %p, align 8
  %p1484 = load i8*, i8** %p, align 8
  %ptrToIntI1485 = ptrtoint i8* %p1484 to i64
  %sub1486 = sub i64 %ptrToIntI1485, 1
  %iintToPtrD1487 = inttoptr i64 %sub1486 to i8*
  store i32 166, i32* @tok, align 4
  br label %cond_end1469

cond_else_block1468:                              ; preds = %cond_jump_elif01466
  store i32 38, i32* @tok, align 4
  br label %cond_end1469

cond_end1469:                                     ; preds = %cond_else_block1468, %cond_jump_elif_then01467, %cond_jump_then1465
  br label %end_blockX128

after_break1488:                                  ; No predecessors!
  br label %cond_else_blockX1441
  br label %cond_else_blockX1490

cond_then_block1489:                              ; preds = %cond_else_blockX1441
  %p1492 = load i8*, i8** %p, align 8
  %ptrToIntC1493 = ptrtoint i8* %p1492 to i64
  %add1494 = add i64 %ptrToIntC1493, 1
  %intToPtrB1495 = inttoptr i64 %add1494 to i8*
  store i8* %intToPtrB1495, i8** %p, align 8
  %p1496 = load i8*, i8** %p, align 8
  %ptrToIntI1497 = ptrtoint i8* %p1496 to i64
  %sub1498 = sub i64 %ptrToIntI1497, 1
  %iintToPtrD1499 = inttoptr i64 %sub1498 to i8*
  %p1500 = load i8*, i8** %p, align 8
  %derefference_valueB1501 = load i8, i8* %p1500, align 1
  %icastKY1502 = zext i8 %derefference_valueB1501 to i32
  store i32 %icastKY1502, i32* %c, align 4
  %c1503 = load i32, i32* %c, align 4
  %eq1504 = icmp eq i32 %c1503, 92
  br i1 %eq1504, label %cond_jump_then1505, label %cond_end1506

cond_else_blockX1490:                             ; preds = %after_break1537, %cond_else_blockX1441, %after_break1488
  %eqtmp1540 = icmp eq i32 %c129, 43
  br i1 %eqtmp1540, label %cond_then_block1538, label %cond_else_blockX1539

cond_jump_then1505:                               ; preds = %cond_then_block1489
  %p1507 = load i8*, i8** %p, align 8
  %fun_result1508 = call i32 @handle_stray1(i8* %p1507)
  store i32 %fun_result1508, i32* %c, align 4
  %file1509 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1510 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1509, i32 0, i32 0
  %buf_ptr1511 = load i8*, i8** %fieldLLL1510, align 8
  store i8* %buf_ptr1511, i8** %p, align 8
  br label %cond_end1506

cond_end1506:                                     ; preds = %cond_jump_then1505, %cond_then_block1489
  %c1512 = load i32, i32* %c, align 4
  %eq1513 = icmp eq i32 %c1512, 124
  br i1 %eq1513, label %cond_jump_then1514, label %cond_jump_elif01515

cond_jump_then1514:                               ; preds = %cond_end1506
  %p1519 = load i8*, i8** %p, align 8
  %ptrToIntC1520 = ptrtoint i8* %p1519 to i64
  %add1521 = add i64 %ptrToIntC1520, 1
  %intToPtrB1522 = inttoptr i64 %add1521 to i8*
  store i8* %intToPtrB1522, i8** %p, align 8
  %p1523 = load i8*, i8** %p, align 8
  %ptrToIntI1524 = ptrtoint i8* %p1523 to i64
  %sub1525 = sub i64 %ptrToIntI1524, 1
  %iintToPtrD1526 = inttoptr i64 %sub1525 to i8*
  store i32 161, i32* @tok, align 4
  br label %cond_end1518

cond_jump_elif01515:                              ; preds = %cond_end1506
  %c1527 = load i32, i32* %c, align 4
  %eq1528 = icmp eq i32 %c1527, 61
  br i1 %eq1528, label %cond_jump_elif_then01516, label %cond_else_block1517

cond_jump_elif_then01516:                         ; preds = %cond_jump_elif01515
  %p1529 = load i8*, i8** %p, align 8
  %ptrToIntC1530 = ptrtoint i8* %p1529 to i64
  %add1531 = add i64 %ptrToIntC1530, 1
  %intToPtrB1532 = inttoptr i64 %add1531 to i8*
  store i8* %intToPtrB1532, i8** %p, align 8
  %p1533 = load i8*, i8** %p, align 8
  %ptrToIntI1534 = ptrtoint i8* %p1533 to i64
  %sub1535 = sub i64 %ptrToIntI1534, 1
  %iintToPtrD1536 = inttoptr i64 %sub1535 to i8*
  store i32 252, i32* @tok, align 4
  br label %cond_end1518

cond_else_block1517:                              ; preds = %cond_jump_elif01515
  store i32 124, i32* @tok, align 4
  br label %cond_end1518

cond_end1518:                                     ; preds = %cond_else_block1517, %cond_jump_elif_then01516, %cond_jump_then1514
  br label %end_blockX128

after_break1537:                                  ; No predecessors!
  br label %cond_else_blockX1490
  br label %cond_else_blockX1539

cond_then_block1538:                              ; preds = %cond_else_blockX1490
  %p1541 = load i8*, i8** %p, align 8
  %ptrToIntC1542 = ptrtoint i8* %p1541 to i64
  %add1543 = add i64 %ptrToIntC1542, 1
  %intToPtrB1544 = inttoptr i64 %add1543 to i8*
  store i8* %intToPtrB1544, i8** %p, align 8
  %p1545 = load i8*, i8** %p, align 8
  %ptrToIntI1546 = ptrtoint i8* %p1545 to i64
  %sub1547 = sub i64 %ptrToIntI1546, 1
  %iintToPtrD1548 = inttoptr i64 %sub1547 to i8*
  %p1549 = load i8*, i8** %p, align 8
  %derefference_valueB1550 = load i8, i8* %p1549, align 1
  %icastKY1551 = zext i8 %derefference_valueB1550 to i32
  store i32 %icastKY1551, i32* %c, align 4
  %c1552 = load i32, i32* %c, align 4
  %eq1553 = icmp eq i32 %c1552, 92
  br i1 %eq1553, label %cond_jump_then1554, label %cond_end1555

cond_else_blockX1539:                             ; preds = %after_break1587, %cond_else_blockX1490, %after_break1537
  %eqtmp1590 = icmp eq i32 %c129, 45
  br i1 %eqtmp1590, label %cond_then_block1588, label %cond_else_blockX1589

cond_jump_then1554:                               ; preds = %cond_then_block1538
  %p1556 = load i8*, i8** %p, align 8
  %fun_result1557 = call i32 @handle_stray1(i8* %p1556)
  store i32 %fun_result1557, i32* %c, align 4
  %file1558 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1559 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1558, i32 0, i32 0
  %buf_ptr1560 = load i8*, i8** %fieldLLL1559, align 8
  store i8* %buf_ptr1560, i8** %p, align 8
  br label %cond_end1555

cond_end1555:                                     ; preds = %cond_jump_then1554, %cond_then_block1538
  %c1561 = load i32, i32* %c, align 4
  %eq1562 = icmp eq i32 %c1561, 43
  br i1 %eq1562, label %cond_jump_then1563, label %cond_jump_elif01564

cond_jump_then1563:                               ; preds = %cond_end1555
  %p1568 = load i8*, i8** %p, align 8
  %ptrToIntC1569 = ptrtoint i8* %p1568 to i64
  %add1570 = add i64 %ptrToIntC1569, 1
  %intToPtrB1571 = inttoptr i64 %add1570 to i8*
  store i8* %intToPtrB1571, i8** %p, align 8
  %p1572 = load i8*, i8** %p, align 8
  %ptrToIntI1573 = ptrtoint i8* %p1572 to i64
  %sub1574 = sub i64 %ptrToIntI1573, 1
  %iintToPtrD1575 = inttoptr i64 %sub1574 to i8*
  store i32 164, i32* @tok, align 4
  br label %cond_end1567

cond_jump_elif01564:                              ; preds = %cond_end1555
  %c1576 = load i32, i32* %c, align 4
  %eq1577 = icmp eq i32 %c1576, 61
  br i1 %eq1577, label %cond_jump_elif_then01565, label %cond_else_block1566

cond_jump_elif_then01565:                         ; preds = %cond_jump_elif01564
  %p1578 = load i8*, i8** %p, align 8
  %ptrToIntC1579 = ptrtoint i8* %p1578 to i64
  %add1580 = add i64 %ptrToIntC1579, 1
  %intToPtrB1581 = inttoptr i64 %add1580 to i8*
  store i8* %intToPtrB1581, i8** %p, align 8
  %p1583 = load i8*, i8** %p, align 8
  %ptrToIntI1584 = ptrtoint i8* %p1583 to i64
  %sub1585 = sub i64 %ptrToIntI1584, 1
  %iintToPtrD1586 = inttoptr i64 %sub1585 to i8*
  store i32 171, i32* @tok, align 4
  br label %cond_end1567

cond_else_block1566:                              ; preds = %cond_jump_elif01564
  store i32 43, i32* @tok, align 4
  br label %cond_end1567

cond_end1567:                                     ; preds = %cond_else_block1566, %cond_jump_elif_then01565, %cond_jump_then1563
  br label %end_blockX128

after_break1587:                                  ; No predecessors!
  br label %cond_else_blockX1539
  br label %cond_else_blockX1589

cond_then_block1588:                              ; preds = %cond_else_blockX1539
  %p1591 = load i8*, i8** %p, align 8
  %ptrToIntC1592 = ptrtoint i8* %p1591 to i64
  %add1593 = add i64 %ptrToIntC1592, 1
  %intToPtrB1594 = inttoptr i64 %add1593 to i8*
  store i8* %intToPtrB1594, i8** %p, align 8
  %p1595 = load i8*, i8** %p, align 8
  %ptrToIntI1596 = ptrtoint i8* %p1595 to i64
  %sub1597 = sub i64 %ptrToIntI1596, 1
  %iintToPtrD1598 = inttoptr i64 %sub1597 to i8*
  %p1599 = load i8*, i8** %p, align 8
  %derefference_valueB1600 = load i8, i8* %p1599, align 1
  %icastKY1601 = zext i8 %derefference_valueB1600 to i32
  store i32 %icastKY1601, i32* %c, align 4
  %c1602 = load i32, i32* %c, align 4
  %eq1603 = icmp eq i32 %c1602, 92
  br i1 %eq1603, label %cond_jump_then1604, label %cond_end1605

cond_else_blockX1589:                             ; preds = %after_break1646, %cond_else_blockX1539, %after_break1587
  %eqtmp1649 = icmp eq i32 %c129, 33
  br i1 %eqtmp1649, label %cond_then_block1647, label %cond_else_blockX1648

cond_jump_then1604:                               ; preds = %cond_then_block1588
  %p1606 = load i8*, i8** %p, align 8
  %fun_result1607 = call i32 @handle_stray1(i8* %p1606)
  store i32 %fun_result1607, i32* %c, align 4
  %file1608 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1609 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1608, i32 0, i32 0
  %buf_ptr1610 = load i8*, i8** %fieldLLL1609, align 8
  store i8* %buf_ptr1610, i8** %p, align 8
  br label %cond_end1605

cond_end1605:                                     ; preds = %cond_jump_then1604, %cond_then_block1588
  %c1611 = load i32, i32* %c, align 4
  %eq1612 = icmp eq i32 %c1611, 45
  br i1 %eq1612, label %cond_jump_then1613, label %cond_jump_elif01614

cond_jump_then1613:                               ; preds = %cond_end1605
  %p1618 = load i8*, i8** %p, align 8
  %ptrToIntC1619 = ptrtoint i8* %p1618 to i64
  %add1620 = add i64 %ptrToIntC1619, 1
  %intToPtrB1621 = inttoptr i64 %add1620 to i8*
  store i8* %intToPtrB1621, i8** %p, align 8
  %p1622 = load i8*, i8** %p, align 8
  %ptrToIntI1623 = ptrtoint i8* %p1622 to i64
  %sub1624 = sub i64 %ptrToIntI1623, 1
  %iintToPtrD1625 = inttoptr i64 %sub1624 to i8*
  store i32 162, i32* @tok, align 4
  br label %cond_end1617

cond_jump_elif01614:                              ; preds = %cond_end1605
  %c1626 = load i32, i32* %c, align 4
  %eq1627 = icmp eq i32 %c1626, 61
  br i1 %eq1627, label %cond_jump_elif_then01615, label %cond_jump_elif1

cond_jump_elif_then01615:                         ; preds = %cond_jump_elif01614
  %p1628 = load i8*, i8** %p, align 8
  %ptrToIntC1629 = ptrtoint i8* %p1628 to i64
  %add1630 = add i64 %ptrToIntC1629, 1
  %intToPtrB1631 = inttoptr i64 %add1630 to i8*
  store i8* %intToPtrB1631, i8** %p, align 8
  %p1632 = load i8*, i8** %p, align 8
  %ptrToIntI1633 = ptrtoint i8* %p1632 to i64
  %sub1634 = sub i64 %ptrToIntI1633, 1
  %iintToPtrD1635 = inttoptr i64 %sub1634 to i8*
  store i32 173, i32* @tok, align 4
  br label %cond_end1617

cond_jump_elif1:                                  ; preds = %cond_jump_elif01614
  %c1636 = load i32, i32* %c, align 4
  %eq1637 = icmp eq i32 %c1636, 62
  br i1 %eq1637, label %cond_jump_elif_then1, label %cond_else_block1616

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %p1638 = load i8*, i8** %p, align 8
  %ptrToIntC1639 = ptrtoint i8* %p1638 to i64
  %add1640 = add i64 %ptrToIntC1639, 1
  %intToPtrB1641 = inttoptr i64 %add1640 to i8*
  store i8* %intToPtrB1641, i8** %p, align 8
  %p1642 = load i8*, i8** %p, align 8
  %ptrToIntI1643 = ptrtoint i8* %p1642 to i64
  %sub1644 = sub i64 %ptrToIntI1643, 1
  %iintToPtrD1645 = inttoptr i64 %sub1644 to i8*
  store i32 203, i32* @tok, align 4
  br label %cond_end1617

cond_else_block1616:                              ; preds = %cond_jump_elif1
  store i32 45, i32* @tok, align 4
  br label %cond_end1617

cond_end1617:                                     ; preds = %cond_else_block1616, %cond_jump_elif_then1, %cond_jump_elif_then01615, %cond_jump_then1613
  br label %end_blockX128

after_break1646:                                  ; No predecessors!
  br label %cond_else_blockX1589
  br label %cond_else_blockX1648

cond_then_block1647:                              ; preds = %cond_else_blockX1589
  %p1650 = load i8*, i8** %p, align 8
  %ptrToIntC1651 = ptrtoint i8* %p1650 to i64
  %add1652 = add i64 %ptrToIntC1651, 1
  %intToPtrB1653 = inttoptr i64 %add1652 to i8*
  store i8* %intToPtrB1653, i8** %p, align 8
  %p1654 = load i8*, i8** %p, align 8
  %ptrToIntI1655 = ptrtoint i8* %p1654 to i64
  %sub1656 = sub i64 %ptrToIntI1655, 1
  %iintToPtrD1657 = inttoptr i64 %sub1656 to i8*
  %p1658 = load i8*, i8** %p, align 8
  %derefference_valueB1659 = load i8, i8* %p1658, align 1
  %icastKY1660 = zext i8 %derefference_valueB1659 to i32
  store i32 %icastKY1660, i32* %c, align 4
  %c1661 = load i32, i32* %c, align 4
  %eq1662 = icmp eq i32 %c1661, 92
  br i1 %eq1662, label %cond_jump_then1663, label %cond_end1664

cond_else_blockX1648:                             ; preds = %after_break1683, %cond_else_blockX1589, %after_break1646
  %eqtmp1686 = icmp eq i32 %c129, 61
  br i1 %eqtmp1686, label %cond_then_block1684, label %cond_else_blockX1685

cond_jump_then1663:                               ; preds = %cond_then_block1647
  %p1665 = load i8*, i8** %p, align 8
  %fun_result1666 = call i32 @handle_stray1(i8* %p1665)
  store i32 %fun_result1666, i32* %c, align 4
  %file1667 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1668 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1667, i32 0, i32 0
  %buf_ptr1669 = load i8*, i8** %fieldLLL1668, align 8
  store i8* %buf_ptr1669, i8** %p, align 8
  br label %cond_end1664

cond_end1664:                                     ; preds = %cond_jump_then1663, %cond_then_block1647
  %c1670 = load i32, i32* %c, align 4
  %eq1671 = icmp eq i32 %c1670, 61
  br i1 %eq1671, label %cond_jump_then1672, label %cond_else_block1673

cond_jump_then1672:                               ; preds = %cond_end1664
  %p1675 = load i8*, i8** %p, align 8
  %ptrToIntC1676 = ptrtoint i8* %p1675 to i64
  %add1677 = add i64 %ptrToIntC1676, 1
  %intToPtrB1678 = inttoptr i64 %add1677 to i8*
  store i8* %intToPtrB1678, i8** %p, align 8
  %p1679 = load i8*, i8** %p, align 8
  %ptrToIntI1680 = ptrtoint i8* %p1679 to i64
  %sub1681 = sub i64 %ptrToIntI1680, 1
  %iintToPtrD1682 = inttoptr i64 %sub1681 to i8*
  store i32 149, i32* @tok, align 4
  br label %cond_end1674

cond_else_block1673:                              ; preds = %cond_end1664
  store i32 33, i32* @tok, align 4
  br label %cond_end1674

cond_end1674:                                     ; preds = %cond_else_block1673, %cond_jump_then1672
  br label %end_blockX128

after_break1683:                                  ; No predecessors!
  br label %cond_else_blockX1648
  br label %cond_else_blockX1685

cond_then_block1684:                              ; preds = %cond_else_blockX1648
  %p1687 = load i8*, i8** %p, align 8
  %ptrToIntC1688 = ptrtoint i8* %p1687 to i64
  %add1689 = add i64 %ptrToIntC1688, 1
  %intToPtrB1690 = inttoptr i64 %add1689 to i8*
  store i8* %intToPtrB1690, i8** %p, align 8
  %p1691 = load i8*, i8** %p, align 8
  %ptrToIntI1692 = ptrtoint i8* %p1691 to i64
  %sub1693 = sub i64 %ptrToIntI1692, 1
  %iintToPtrD1694 = inttoptr i64 %sub1693 to i8*
  %p1695 = load i8*, i8** %p, align 8
  %derefference_valueB1696 = load i8, i8* %p1695, align 1
  %icastKY1697 = zext i8 %derefference_valueB1696 to i32
  store i32 %icastKY1697, i32* %c, align 4
  %c1698 = load i32, i32* %c, align 4
  %eq1699 = icmp eq i32 %c1698, 92
  br i1 %eq1699, label %cond_jump_then1700, label %cond_end1701

cond_else_blockX1685:                             ; preds = %after_break1720, %cond_else_blockX1648, %after_break1683
  %eqtmp1723 = icmp eq i32 %c129, 42
  br i1 %eqtmp1723, label %cond_then_block1721, label %cond_else_blockX1722

cond_jump_then1700:                               ; preds = %cond_then_block1684
  %p1702 = load i8*, i8** %p, align 8
  %fun_result1703 = call i32 @handle_stray1(i8* %p1702)
  store i32 %fun_result1703, i32* %c, align 4
  %file1704 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1705 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1704, i32 0, i32 0
  %buf_ptr1706 = load i8*, i8** %fieldLLL1705, align 8
  store i8* %buf_ptr1706, i8** %p, align 8
  br label %cond_end1701

cond_end1701:                                     ; preds = %cond_jump_then1700, %cond_then_block1684
  %c1707 = load i32, i32* %c, align 4
  %eq1708 = icmp eq i32 %c1707, 61
  br i1 %eq1708, label %cond_jump_then1709, label %cond_else_block1710

cond_jump_then1709:                               ; preds = %cond_end1701
  %p1712 = load i8*, i8** %p, align 8
  %ptrToIntC1713 = ptrtoint i8* %p1712 to i64
  %add1714 = add i64 %ptrToIntC1713, 1
  %intToPtrB1715 = inttoptr i64 %add1714 to i8*
  store i8* %intToPtrB1715, i8** %p, align 8
  %p1716 = load i8*, i8** %p, align 8
  %ptrToIntI1717 = ptrtoint i8* %p1716 to i64
  %sub1718 = sub i64 %ptrToIntI1717, 1
  %iintToPtrD1719 = inttoptr i64 %sub1718 to i8*
  store i32 148, i32* @tok, align 4
  br label %cond_end1711

cond_else_block1710:                              ; preds = %cond_end1701
  store i32 61, i32* @tok, align 4
  br label %cond_end1711

cond_end1711:                                     ; preds = %cond_else_block1710, %cond_jump_then1709
  br label %end_blockX128

after_break1720:                                  ; No predecessors!
  br label %cond_else_blockX1685
  br label %cond_else_blockX1722

cond_then_block1721:                              ; preds = %cond_else_blockX1685
  %p1724 = load i8*, i8** %p, align 8
  %ptrToIntC1725 = ptrtoint i8* %p1724 to i64
  %add1726 = add i64 %ptrToIntC1725, 1
  %intToPtrB1727 = inttoptr i64 %add1726 to i8*
  store i8* %intToPtrB1727, i8** %p, align 8
  %p1728 = load i8*, i8** %p, align 8
  %ptrToIntI1729 = ptrtoint i8* %p1728 to i64
  %sub1730 = sub i64 %ptrToIntI1729, 1
  %iintToPtrD1731 = inttoptr i64 %sub1730 to i8*
  %p1732 = load i8*, i8** %p, align 8
  %derefference_valueB1733 = load i8, i8* %p1732, align 1
  %icastKY1734 = zext i8 %derefference_valueB1733 to i32
  store i32 %icastKY1734, i32* %c, align 4
  %c1735 = load i32, i32* %c, align 4
  %eq1736 = icmp eq i32 %c1735, 92
  br i1 %eq1736, label %cond_jump_then1737, label %cond_end1738

cond_else_blockX1722:                             ; preds = %after_break1757, %cond_else_blockX1685, %after_break1720
  %eqtmp1760 = icmp eq i32 %c129, 37
  br i1 %eqtmp1760, label %cond_then_block1758, label %cond_else_blockX1759

cond_jump_then1737:                               ; preds = %cond_then_block1721
  %p1739 = load i8*, i8** %p, align 8
  %fun_result1740 = call i32 @handle_stray1(i8* %p1739)
  store i32 %fun_result1740, i32* %c, align 4
  %file1741 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1742 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1741, i32 0, i32 0
  %buf_ptr1743 = load i8*, i8** %fieldLLL1742, align 8
  store i8* %buf_ptr1743, i8** %p, align 8
  br label %cond_end1738

cond_end1738:                                     ; preds = %cond_jump_then1737, %cond_then_block1721
  %c1744 = load i32, i32* %c, align 4
  %eq1745 = icmp eq i32 %c1744, 61
  br i1 %eq1745, label %cond_jump_then1746, label %cond_else_block1747

cond_jump_then1746:                               ; preds = %cond_end1738
  %p1749 = load i8*, i8** %p, align 8
  %ptrToIntC1750 = ptrtoint i8* %p1749 to i64
  %add1751 = add i64 %ptrToIntC1750, 1
  %intToPtrB1752 = inttoptr i64 %add1751 to i8*
  store i8* %intToPtrB1752, i8** %p, align 8
  %p1753 = load i8*, i8** %p, align 8
  %ptrToIntI1754 = ptrtoint i8* %p1753 to i64
  %sub1755 = sub i64 %ptrToIntI1754, 1
  %iintToPtrD1756 = inttoptr i64 %sub1755 to i8*
  store i32 170, i32* @tok, align 4
  br label %cond_end1748

cond_else_block1747:                              ; preds = %cond_end1738
  store i32 42, i32* @tok, align 4
  br label %cond_end1748

cond_end1748:                                     ; preds = %cond_else_block1747, %cond_jump_then1746
  br label %end_blockX128

after_break1757:                                  ; No predecessors!
  br label %cond_else_blockX1722
  br label %cond_else_blockX1759

cond_then_block1758:                              ; preds = %cond_else_blockX1722
  %p1761 = load i8*, i8** %p, align 8
  %ptrToIntC1762 = ptrtoint i8* %p1761 to i64
  %add1763 = add i64 %ptrToIntC1762, 1
  %intToPtrB1764 = inttoptr i64 %add1763 to i8*
  store i8* %intToPtrB1764, i8** %p, align 8
  %p1765 = load i8*, i8** %p, align 8
  %ptrToIntI1766 = ptrtoint i8* %p1765 to i64
  %sub1767 = sub i64 %ptrToIntI1766, 1
  %iintToPtrD1768 = inttoptr i64 %sub1767 to i8*
  %p1769 = load i8*, i8** %p, align 8
  %derefference_valueB1770 = load i8, i8* %p1769, align 1
  %icastKY1771 = zext i8 %derefference_valueB1770 to i32
  store i32 %icastKY1771, i32* %c, align 4
  %c1772 = load i32, i32* %c, align 4
  %eq1773 = icmp eq i32 %c1772, 92
  br i1 %eq1773, label %cond_jump_then1774, label %cond_end1775

cond_else_blockX1759:                             ; preds = %after_break1794, %cond_else_blockX1722, %after_break1757
  %eqtmp1797 = icmp eq i32 %c129, 94
  br i1 %eqtmp1797, label %cond_then_block1795, label %cond_else_blockX1796

cond_jump_then1774:                               ; preds = %cond_then_block1758
  %p1776 = load i8*, i8** %p, align 8
  %fun_result1777 = call i32 @handle_stray1(i8* %p1776)
  store i32 %fun_result1777, i32* %c, align 4
  %file1778 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1779 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1778, i32 0, i32 0
  %buf_ptr1780 = load i8*, i8** %fieldLLL1779, align 8
  store i8* %buf_ptr1780, i8** %p, align 8
  br label %cond_end1775

cond_end1775:                                     ; preds = %cond_jump_then1774, %cond_then_block1758
  %c1781 = load i32, i32* %c, align 4
  %eq1782 = icmp eq i32 %c1781, 61
  br i1 %eq1782, label %cond_jump_then1783, label %cond_else_block1784

cond_jump_then1783:                               ; preds = %cond_end1775
  %p1786 = load i8*, i8** %p, align 8
  %ptrToIntC1787 = ptrtoint i8* %p1786 to i64
  %add1788 = add i64 %ptrToIntC1787, 1
  %intToPtrB1789 = inttoptr i64 %add1788 to i8*
  store i8* %intToPtrB1789, i8** %p, align 8
  %p1790 = load i8*, i8** %p, align 8
  %ptrToIntI1791 = ptrtoint i8* %p1790 to i64
  %sub1792 = sub i64 %ptrToIntI1791, 1
  %iintToPtrD1793 = inttoptr i64 %sub1792 to i8*
  store i32 165, i32* @tok, align 4
  br label %cond_end1785

cond_else_block1784:                              ; preds = %cond_end1775
  store i32 37, i32* @tok, align 4
  br label %cond_end1785

cond_end1785:                                     ; preds = %cond_else_block1784, %cond_jump_then1783
  br label %end_blockX128

after_break1794:                                  ; No predecessors!
  br label %cond_else_blockX1759
  br label %cond_else_blockX1796

cond_then_block1795:                              ; preds = %cond_else_blockX1759
  %p1798 = load i8*, i8** %p, align 8
  %ptrToIntC1799 = ptrtoint i8* %p1798 to i64
  %add1800 = add i64 %ptrToIntC1799, 1
  %intToPtrB1801 = inttoptr i64 %add1800 to i8*
  store i8* %intToPtrB1801, i8** %p, align 8
  %p1802 = load i8*, i8** %p, align 8
  %ptrToIntI1803 = ptrtoint i8* %p1802 to i64
  %sub1804 = sub i64 %ptrToIntI1803, 1
  %iintToPtrD1805 = inttoptr i64 %sub1804 to i8*
  %p1806 = load i8*, i8** %p, align 8
  %derefference_valueB1807 = load i8, i8* %p1806, align 1
  %icastKY1808 = zext i8 %derefference_valueB1807 to i32
  store i32 %icastKY1808, i32* %c, align 4
  %c1809 = load i32, i32* %c, align 4
  %eq1810 = icmp eq i32 %c1809, 92
  br i1 %eq1810, label %cond_jump_then1811, label %cond_end1812

cond_else_blockX1796:                             ; preds = %after_break1831, %cond_else_blockX1759, %after_break1794
  %eqtmp1834 = icmp eq i32 %c129, 47
  br i1 %eqtmp1834, label %cond_then_block1832, label %cond_else_blockX1833

cond_jump_then1811:                               ; preds = %cond_then_block1795
  %p1813 = load i8*, i8** %p, align 8
  %fun_result1814 = call i32 @handle_stray1(i8* %p1813)
  store i32 %fun_result1814, i32* %c, align 4
  %file1815 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1816 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1815, i32 0, i32 0
  %buf_ptr1817 = load i8*, i8** %fieldLLL1816, align 8
  store i8* %buf_ptr1817, i8** %p, align 8
  br label %cond_end1812

cond_end1812:                                     ; preds = %cond_jump_then1811, %cond_then_block1795
  %c1818 = load i32, i32* %c, align 4
  %eq1819 = icmp eq i32 %c1818, 61
  br i1 %eq1819, label %cond_jump_then1820, label %cond_else_block1821

cond_jump_then1820:                               ; preds = %cond_end1812
  %p1823 = load i8*, i8** %p, align 8
  %ptrToIntC1824 = ptrtoint i8* %p1823 to i64
  %add1825 = add i64 %ptrToIntC1824, 1
  %intToPtrB1826 = inttoptr i64 %add1825 to i8*
  store i8* %intToPtrB1826, i8** %p, align 8
  %p1827 = load i8*, i8** %p, align 8
  %ptrToIntI1828 = ptrtoint i8* %p1827 to i64
  %sub1829 = sub i64 %ptrToIntI1828, 1
  %iintToPtrD1830 = inttoptr i64 %sub1829 to i8*
  store i32 222, i32* @tok, align 4
  br label %cond_end1822

cond_else_block1821:                              ; preds = %cond_end1812
  store i32 94, i32* @tok, align 4
  br label %cond_end1822

cond_end1822:                                     ; preds = %cond_else_block1821, %cond_jump_then1820
  br label %end_blockX128

after_break1831:                                  ; No predecessors!
  br label %cond_else_blockX1796
  br label %cond_else_blockX1833

cond_then_block1832:                              ; preds = %cond_else_blockX1796
  %p1835 = load i8*, i8** %p, align 8
  %ptrToIntC1836 = ptrtoint i8* %p1835 to i64
  %add1837 = add i64 %ptrToIntC1836, 1
  %intToPtrB1838 = inttoptr i64 %add1837 to i8*
  store i8* %intToPtrB1838, i8** %p, align 8
  %p1839 = load i8*, i8** %p, align 8
  %ptrToIntI1840 = ptrtoint i8* %p1839 to i64
  %sub1841 = sub i64 %ptrToIntI1840, 1
  %iintToPtrD1842 = inttoptr i64 %sub1841 to i8*
  %p1843 = load i8*, i8** %p, align 8
  %derefference_valueB1844 = load i8, i8* %p1843, align 1
  %icastKY1845 = zext i8 %derefference_valueB1844 to i32
  store i32 %icastKY1845, i32* %c, align 4
  %c1846 = load i32, i32* %c, align 4
  %eq1847 = icmp eq i32 %c1846, 92
  br i1 %eq1847, label %cond_jump_then1848, label %cond_end1849

cond_else_blockX1833:                             ; preds = %after_break1880, %cond_else_blockX1796, %after_break1831
  %eqtmp1883 = icmp eq i32 %c129, 40
  br i1 %eqtmp1883, label %cond_then_block1881, label %cond_else_blockX1882
  br label %cond_else_blockX1884

cond_jump_then1848:                               ; preds = %cond_then_block1832
  %p1850 = load i8*, i8** %p, align 8
  %fun_result1851 = call i32 @handle_stray1(i8* %p1850)
  store i32 %fun_result1851, i32* %c, align 4
  %file1852 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL1853 = getelementptr inbounds %BufferedFile, %BufferedFile* %file1852, i32 0, i32 0
  %buf_ptr1854 = load i8*, i8** %fieldLLL1853, align 8
  store i8* %buf_ptr1854, i8** %p, align 8
  br label %cond_end1849

cond_end1849:                                     ; preds = %cond_jump_then1848, %cond_then_block1832
  %c1855 = load i32, i32* %c, align 4
  %eq1856 = icmp eq i32 %c1855, 42
  br i1 %eq1856, label %cond_jump_then1857, label %cond_jump_elif01858

cond_jump_then1857:                               ; preds = %cond_end1849
  %p1864 = load i8*, i8** %p, align 8
  %fun_result1865 = call i8* @parse_comment(i8* %p1864)
  store i8* %fun_result1865, i8** %p, align 8
  br label %next_nomacro1.redo_no_start
  br label %cond_end1863

cond_jump_elif01858:                              ; preds = %cond_end1849
  %c1866 = load i32, i32* %c, align 4
  %eq1867 = icmp eq i32 %c1866, 47
  br i1 %eq1867, label %cond_jump_elif_then01859, label %cond_jump_elif11860

cond_jump_elif_then01859:                         ; preds = %cond_jump_elif01858
  %p1868 = load i8*, i8** %p, align 8
  %fun_result1869 = call i8* @parse_line_comment(i8* %p1868)
  store i8* %fun_result1869, i8** %p, align 8
  br label %next_nomacro1.redo_no_start
  br label %cond_end1863

cond_jump_elif11860:                              ; preds = %cond_jump_elif01858
  %c1870 = load i32, i32* %c, align 4
  %eq1871 = icmp eq i32 %c1870, 61
  br i1 %eq1871, label %cond_jump_elif_then11861, label %cond_else_block1862

cond_jump_elif_then11861:                         ; preds = %cond_jump_elif11860
  %p1872 = load i8*, i8** %p, align 8
  %ptrToIntC1873 = ptrtoint i8* %p1872 to i64
  %add1874 = add i64 %ptrToIntC1873, 1
  %intToPtrB1875 = inttoptr i64 %add1874 to i8*
  store i8* %intToPtrB1875, i8** %p, align 8
  %p1876 = load i8*, i8** %p, align 8
  %ptrToIntI1877 = ptrtoint i8* %p1876 to i64
  %sub1878 = sub i64 %ptrToIntI1877, 1
  %iintToPtrD1879 = inttoptr i64 %sub1878 to i8*
  store i32 175, i32* @tok, align 4
  br label %cond_end1863

cond_else_block1862:                              ; preds = %cond_jump_elif11860
  store i32 47, i32* @tok, align 4
  br label %cond_end1863

cond_end1863:                                     ; preds = %cond_else_block1862, %cond_jump_elif_then11861, %cond_jump_elif_then01859, %cond_jump_then1857
  br label %end_blockX128

after_break1880:                                  ; No predecessors!
  br label %cond_else_blockX1833
  br label %cond_else_blockX1882

cond_then_block1881:                              ; preds = %cond_else_blockX1904, %cond_else_blockX1902, %cond_else_blockX1900, %cond_else_blockX1898, %cond_else_blockX1896, %cond_else_blockX1894, %cond_else_blockX1892, %cond_else_blockX1890, %cond_else_blockX1888, %cond_else_blockX1886, %cond_else_blockX1884, %cond_else_blockX1882, %cond_else_blockX1833
  %c1908 = load i32, i32* %c, align 4
  store i32 %c1908, i32* @tok, align 4
  %p1909 = load i8*, i8** %p, align 8
  %ptrToIntC1910 = ptrtoint i8* %p1909 to i64
  %add1911 = add i64 %ptrToIntC1910, 1
  %intToPtrB1912 = inttoptr i64 %add1911 to i8*
  store i8* %intToPtrB1912, i8** %p, align 8
  %p1913 = load i8*, i8** %p, align 8
  %ptrToIntI1914 = ptrtoint i8* %p1913 to i64
  %sub1915 = sub i64 %ptrToIntI1914, 1
  %iintToPtrD1916 = inttoptr i64 %sub1915 to i8*
  br label %end_blockX128

cond_else_blockX1882:                             ; preds = %cond_else_blockX1833, %after_break1880
  %eqtmp1885 = icmp eq i32 %c129, 41
  br i1 %eqtmp1885, label %cond_then_block1881, label %cond_else_blockX1884
  br label %cond_else_blockX1886

cond_else_blockX1884:                             ; preds = %cond_else_blockX1882, %cond_else_blockX1833
  %eqtmp1887 = icmp eq i32 %c129, 91
  br i1 %eqtmp1887, label %cond_then_block1881, label %cond_else_blockX1886
  br label %cond_else_blockX1888

cond_else_blockX1886:                             ; preds = %cond_else_blockX1884, %cond_else_blockX1882
  %eqtmp1889 = icmp eq i32 %c129, 93
  br i1 %eqtmp1889, label %cond_then_block1881, label %cond_else_blockX1888
  br label %cond_else_blockX1890

cond_else_blockX1888:                             ; preds = %cond_else_blockX1886, %cond_else_blockX1884
  %eqtmp1891 = icmp eq i32 %c129, 123
  br i1 %eqtmp1891, label %cond_then_block1881, label %cond_else_blockX1890
  br label %cond_else_blockX1892

cond_else_blockX1890:                             ; preds = %cond_else_blockX1888, %cond_else_blockX1886
  %eqtmp1893 = icmp eq i32 %c129, 125
  br i1 %eqtmp1893, label %cond_then_block1881, label %cond_else_blockX1892
  br label %cond_else_blockX1894

cond_else_blockX1892:                             ; preds = %cond_else_blockX1890, %cond_else_blockX1888
  %eqtmp1895 = icmp eq i32 %c129, 44
  br i1 %eqtmp1895, label %cond_then_block1881, label %cond_else_blockX1894
  br label %cond_else_blockX1896

cond_else_blockX1894:                             ; preds = %cond_else_blockX1892, %cond_else_blockX1890
  %eqtmp1897 = icmp eq i32 %c129, 59
  br i1 %eqtmp1897, label %cond_then_block1881, label %cond_else_blockX1896
  br label %cond_else_blockX1898

cond_else_blockX1896:                             ; preds = %cond_else_blockX1894, %cond_else_blockX1892
  %eqtmp1899 = icmp eq i32 %c129, 58
  br i1 %eqtmp1899, label %cond_then_block1881, label %cond_else_blockX1898
  br label %cond_else_blockX1900

cond_else_blockX1898:                             ; preds = %cond_else_blockX1896, %cond_else_blockX1894
  %eqtmp1901 = icmp eq i32 %c129, 63
  br i1 %eqtmp1901, label %cond_then_block1881, label %cond_else_blockX1900
  br label %cond_else_blockX1902

cond_else_blockX1900:                             ; preds = %cond_else_blockX1898, %cond_else_blockX1896
  %eqtmp1903 = icmp eq i32 %c129, 126
  br i1 %eqtmp1903, label %cond_then_block1881, label %cond_else_blockX1902
  br label %cond_else_blockX1904

cond_else_blockX1902:                             ; preds = %cond_else_blockX1900, %cond_else_blockX1898
  %eqtmp1905 = icmp eq i32 %c129, 36
  br i1 %eqtmp1905, label %cond_then_block1881, label %cond_else_blockX1904
  br label %cond_else_blockX1906

cond_else_blockX1904:                             ; preds = %cond_else_blockX1902, %cond_else_blockX1900
  %eqtmp1907 = icmp eq i32 %c129, 64
  br i1 %eqtmp1907, label %cond_then_block1881, label %cond_else_blockX1906

cond_else_blockX1906:                             ; preds = %after_break1917, %cond_else_blockX1904, %cond_else_blockX1902
  br label %cond_then_block1918

after_break1917:                                  ; No predecessors!
  br label %cond_else_blockX1906
  br label %cond_else_blockX1919

cond_then_block1918:                              ; preds = %cond_else_blockX1906
  %c1920 = load i32, i32* %c, align 4
  call void (i8*, ...) @error(i8* bitcast ([30 x i8]* @80 to i8*), i32 %c1920)
  br label %end_blockX128

cond_else_blockX1919:                             ; preds = %after_break1921, %after_break1917
  br label %end_blockX128

after_break1921:                                  ; No predecessors!
  br label %cond_else_blockX1919
}

define internal void @macro_subst(%TokenString* %0, %Sym** %1, i32* %2, %macro_level** %3) {
entry:
  %oror914 = alloca i1, align 1
  %oror913 = alloca i1, align 1
  %oror912 = alloca i1, align 1
  %oror911 = alloca i1, align 1
  %andand883 = alloca i1, align 1
  %size598 = alloca i32, align 4
  %andand560 = alloca i1, align 1
  %q = alloca i8*, align 8
  %str = alloca i8*, align 8
  %andand495 = alloca i1, align 1
  %andand484 = alloca i1, align 1
  %oror483 = alloca i1, align 1
  %oror482 = alloca i1, align 1
  %andand467 = alloca i1, align 1
  %andand463 = alloca i1, align 1
  %c = alloca i32, align 4
  %p = alloca i8*, align 8
  %oror417 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand408 = alloca i1, align 1
  %size388 = alloca i32, align 4
  %andand = alloca i1, align 1
  %cstr = alloca %CString, align 8
  %castXXXX13 = bitcast %CString* %cstr to i8*
  %4 = call i8* @memset(i8* %castXXXX13, i32 0, i64 32)
  %macro_str111 = alloca %TokenString, align 8
  %castXXXX12 = bitcast %TokenString* %macro_str111 to i8*
  %5 = call i8* @memset(i8* %castXXXX12, i32 0, i64 24)
  %cval10 = alloca %CValue, align 16
  %p2 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %t9 = alloca i32, align 4
  %saved_macro_ptr = alloca i32*, align 8
  %ptr8 = alloca i32*, align 8
  %ts = alloca %TokenSym*, align 8
  %ml = alloca %macro_level, align 8
  %castXXXX = bitcast %macro_level* %ml to i8*
  %6 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %cval = alloca %CValue, align 16
  %spc = alloca i32, align 4
  %ret = alloca i32, align 4
  %t = alloca i32, align 4
  %ptr = alloca i32*, align 8
  %macro_str1 = alloca i32*, align 8
  %s = alloca %Sym*, align 8
  %tok_str = alloca %TokenString*, align 8
  %tok_str1 = alloca %TokenString**, align 8
  store %TokenString* %0, %TokenString** %tok_str, align 8
  store %TokenString** %tok_str, %TokenString*** %tok_str1, align 8
  %nested_list = alloca %Sym**, align 8
  %nested_list2 = alloca %Sym***, align 8
  store %Sym** %1, %Sym*** %nested_list, align 8
  store %Sym*** %nested_list, %Sym**** %nested_list2, align 8
  %macro_str = alloca i32*, align 8
  %macro_str3 = alloca i32**, align 8
  store i32* %2, i32** %macro_str, align 8
  store i32** %macro_str, i32*** %macro_str3, align 8
  %can_read_stream = alloca %macro_level**, align 8
  %can_read_stream4 = alloca %macro_level***, align 8
  store %macro_level** %3, %macro_level*** %can_read_stream, align 8
  store %macro_level*** %can_read_stream, %macro_level**** %can_read_stream4, align 8
  %macro_str5 = load i32*, i32** %macro_str, align 8
  store i32* %macro_str5, i32** %ptr, align 8
  %ptr6 = load i32*, i32** %ptr, align 8
  store i32 2742, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.85, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %macro_twosharps

macro_twosharps:                                  ; preds = %entry
  %inline_result_variable = alloca i32*, align 8
  %macro_str7 = alloca i32*, align 8
  store i32* %ptr6, i32** %macro_str7, align 8
  %macro_str14 = load i32*, i32** %macro_str7, align 8
  store i32* %macro_str14, i32** %ptr8, align 8
  br label %loop_top_block

macro_twosharps_end:                              ; preds = %cond_end_block180, %cond_jump_then163
  %inline_result_variable644 = load i32*, i32** %inline_result_variable, align 8
  store i32* %inline_result_variable644, i32** %macro_str1, align 8
  %macro_str1645 = load i32*, i32** %macro_str1, align 8
  %icmpB = icmp ne i32* %macro_str1645, null
  br i1 %icmpB, label %cond_jump_then646, label %cond_end647

loop_continue_top_block:                          ; preds = %cond_end164
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %macro_twosharps
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %ptr15 = load i32*, i32** %ptr8, align 8
  %ptrToIntC = ptrtoint i32* %ptr15 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i32*
  store i32* %intToPtrB, i32** %ptr8, align 8
  %ptr16 = load i32*, i32** %ptr8, align 8
  %ptrToIntI = ptrtoint i32* %ptr16 to i64
  %sub = sub i64 %ptrToIntI, 4
  %iintToPtrD = inttoptr i64 %sub to i32*
  %derefference_valueB = load i32, i32* %iintToPtrD, align 4
  store i32 %derefference_valueB, i32* %t9, align 4
  %t17 = load i32, i32* %t9, align 4
  %eqtmp = icmp eq i32 %t17, 179
  br i1 %eqtmp, label %cond_then_block18, label %cond_else_blockX
  br label %cond_else_blockX19

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  %cstr165 = load %CString, %CString* %cstr, align 8
  call void @cstr_new(%CString* %cstr)
  %macro_str1166 = load %TokenString, %TokenString* %macro_str111, align 8
  store i32 2625, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.86, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

end_blockX:                                       ; preds = %cond_else_blockX157, %cond_then_block156, %cond_then_block109, %cond_then_block79, %cond_then_block39, %cond_then_block18
  %t159 = load i32, i32* %t9, align 4
  %eq = icmp eq i32 %t159, 182
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_then_block18:                                ; preds = %cond_else_blockX25, %cond_else_blockX23, %cond_else_blockX21, %cond_else_blockX19, %cond_else_blockX, %cond_then_block
  %cval29 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr30 = load i32*, i32** %ptr8, align 8
  %ptrToIntC31 = ptrtoint i32* %ptr30 to i64
  %add32 = add i64 %ptrToIntC31, 4
  %intToPtrB33 = inttoptr i64 %add32 to i32*
  store i32* %intToPtrB33, i32** %ptr8, align 8
  %ptr34 = load i32*, i32** %ptr8, align 8
  %ptrToIntI35 = ptrtoint i32* %ptr34 to i64
  %sub36 = sub i64 %ptrToIntI35, 4
  %iintToPtrD37 = inttoptr i64 %sub36 to i32*
  %derefference_valueB38 = load i32, i32* %iintToPtrD37, align 4
  %array_castA = bitcast [1 x i32]* %ICASTO to i32*
  %gepBX = getelementptr i32, i32* %array_castA, i32 0
  store i32 %derefference_valueB38, i32* %gepBX, align 4
  br label %end_blockX

cond_else_blockX:                                 ; preds = %cond_then_block
  %eqtmp20 = icmp eq i32 %t17, 200
  br i1 %eqtmp20, label %cond_then_block18, label %cond_else_blockX19
  br label %cond_else_blockX21

cond_else_blockX19:                               ; preds = %cond_else_blockX, %cond_then_block
  %eqtmp22 = icmp eq i32 %t17, 180
  br i1 %eqtmp22, label %cond_then_block18, label %cond_else_blockX21
  br label %cond_else_blockX23

cond_else_blockX21:                               ; preds = %cond_else_blockX19, %cond_else_blockX
  %eqtmp24 = icmp eq i32 %t17, 183
  br i1 %eqtmp24, label %cond_then_block18, label %cond_else_blockX23
  br label %cond_else_blockX25

cond_else_blockX23:                               ; preds = %cond_else_blockX21, %cond_else_blockX19
  %eqtmp26 = icmp eq i32 %t17, 185
  br i1 %eqtmp26, label %cond_then_block18, label %cond_else_blockX25
  br label %cond_else_blockX27

cond_else_blockX25:                               ; preds = %cond_else_blockX23, %cond_else_blockX21
  %eqtmp28 = icmp eq i32 %t17, 186
  br i1 %eqtmp28, label %cond_then_block18, label %cond_else_blockX27

cond_else_blockX27:                               ; preds = %after_break, %cond_else_blockX25, %cond_else_blockX23
  %eqtmp41 = icmp eq i32 %t17, 181
  br i1 %eqtmp41, label %cond_then_block39, label %cond_else_blockX40
  br label %cond_else_blockX42

after_break:                                      ; No predecessors!
  br label %cond_else_blockX27
  br label %cond_else_blockX40

cond_then_block39:                                ; preds = %cond_else_blockX42, %cond_else_blockX40, %cond_else_blockX27
  %cval46 = load %CValue, %CValue* %cval10, align 16
  %ptr47 = load i32*, i32** %ptr8, align 8
  %castAQ = bitcast i32* %ptr47 to %CString*
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to %CString**
  store %CString* %castAQ, %CString** %icastN, align 8
  %cval48 = load %CValue, %CValue* %cval10, align 16
  %ICASTO49 = bitcast %CValue* %cval10 to %CString**
  %cstr50 = load %CString*, %CString** %ICASTO49, align 8
  %ptr51 = load i32*, i32** %ptr8, align 8
  %castAQ52 = bitcast i32* %ptr51 to i8*
  %ptrToIntC53 = ptrtoint i8* %castAQ52 to i64
  %add54 = add i64 %ptrToIntC53, 32
  %intToPtrB55 = inttoptr i64 %add54 to i8*
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr50, i32 0, i32 1
  store i8* %intToPtrB55, i8** %fieldTU, align 8
  %ptr56 = load i32*, i32** %ptr8, align 8
  %cval57 = load %CValue, %CValue* %cval10, align 16
  %ICASTO58 = bitcast %CValue* %cval10 to %CString**
  %cstr59 = load %CString*, %CString** %ICASTO58, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr59, i32 0, i32 0
  %size = load i32, i32* %fieldLLL, align 4
  %icastD = sext i32 %size to i64
  %add60 = add i64 32, %icastD
  %add61 = add i64 %add60, 3
  %rshifttmp = lshr i64 %add61, 2
  %ptrToIntC62 = ptrtoint i32* %ptr56 to i64
  %mul = mul i64 %rshifttmp, 4
  %add63 = add i64 %ptrToIntC62, %mul
  %intToPtrB64 = inttoptr i64 %add63 to i32*
  store i32* %intToPtrB64, i32** %ptr8, align 8
  %cval65 = load %CValue, %CValue* %cval10, align 16
  %ICASTO66 = bitcast %CValue* %cval10 to %CString**
  %cstr67 = load %CString*, %CString** %ICASTO66, align 8
  %fieldLLL68 = getelementptr inbounds %CString, %CString* %cstr67, i32 0, i32 0
  %size69 = load i32, i32* %fieldLLL68, align 4
  %icastD70 = sext i32 %size69 to i64
  %add71 = add i64 32, %icastD70
  %add72 = add i64 %add71, 3
  %rshifttmp73 = lshr i64 %add72, 2
  %ptrToIntI74 = ptrtoint i32* %intToPtrB64 to i64
  %mul75 = mul i64 %rshifttmp73, 4
  %sub76 = sub i64 %ptrToIntI74, %mul75
  %iintToPtrD77 = inttoptr i64 %sub76 to i32*
  br label %end_blockX

cond_else_blockX40:                               ; preds = %cond_else_blockX27, %after_break
  %eqtmp43 = icmp eq i32 %t17, 184
  br i1 %eqtmp43, label %cond_then_block39, label %cond_else_blockX42
  br label %cond_else_blockX44

cond_else_blockX42:                               ; preds = %cond_else_blockX40, %cond_else_blockX27
  %eqtmp45 = icmp eq i32 %t17, 206
  br i1 %eqtmp45, label %cond_then_block39, label %cond_else_blockX44

cond_else_blockX44:                               ; preds = %after_break78, %cond_else_blockX42, %cond_else_blockX40
  %eqtmp81 = icmp eq i32 %t17, 192
  br i1 %eqtmp81, label %cond_then_block79, label %cond_else_blockX80
  br label %cond_else_blockX82

after_break78:                                    ; No predecessors!
  br label %cond_else_blockX44
  br label %cond_else_blockX80

cond_then_block79:                                ; preds = %cond_else_blockX82, %cond_else_blockX80, %cond_else_blockX44
  %cval86 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP87 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO88 = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr89 = load i32*, i32** %ptr8, align 8
  %element_addressAB = load i32*, i32** %ptr8, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 0
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  %array_castA90 = bitcast [1 x i32]* %ICASTO88 to i32*
  %gepBX91 = getelementptr i32, i32* %array_castA90, i32 0
  store i32 %load_element, i32* %gepBX91, align 4
  %cval92 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP93 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO94 = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr95 = load i32*, i32** %ptr8, align 8
  %element_addressAB96 = load i32*, i32** %ptr8, align 8
  %element_addressXYXZY97 = getelementptr inbounds i32, i32* %element_addressAB96, i32 1
  %load_element98 = load i32, i32* %element_addressXYXZY97, align 4
  %array_castA99 = bitcast [1 x i32]* %ICASTO94 to i32*
  %gepBX100 = getelementptr i32, i32* %array_castA99, i32 1
  store i32 %load_element98, i32* %gepBX100, align 4
  %ptr101 = load i32*, i32** %ptr8, align 8
  %ptrToIntC102 = ptrtoint i32* %ptr101 to i64
  %add103 = add i64 %ptrToIntC102, 8
  %intToPtrB104 = inttoptr i64 %add103 to i32*
  store i32* %intToPtrB104, i32** %ptr8, align 8
  %ptrToIntI105 = ptrtoint i32* %intToPtrB104 to i64
  %sub106 = sub i64 %ptrToIntI105, 8
  %iintToPtrD107 = inttoptr i64 %sub106 to i32*
  br label %end_blockX

cond_else_blockX80:                               ; preds = %cond_else_blockX44, %after_break78
  %eqtmp83 = icmp eq i32 %t17, 201
  br i1 %eqtmp83, label %cond_then_block79, label %cond_else_blockX82
  br label %cond_else_blockX84

cond_else_blockX82:                               ; preds = %cond_else_blockX80, %cond_else_blockX44
  %eqtmp85 = icmp eq i32 %t17, 202
  br i1 %eqtmp85, label %cond_then_block79, label %cond_else_blockX84

cond_else_blockX84:                               ; preds = %after_break108, %cond_else_blockX82, %cond_else_blockX80
  %eqtmp111 = icmp eq i32 %t17, 193
  br i1 %eqtmp111, label %cond_then_block109, label %cond_else_blockX110

after_break108:                                   ; No predecessors!
  br label %cond_else_blockX84
  br label %cond_else_blockX110

cond_then_block109:                               ; preds = %cond_else_blockX84
  %cval112 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP113 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO114 = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr115 = load i32*, i32** %ptr8, align 8
  %element_addressAB116 = load i32*, i32** %ptr8, align 8
  %element_addressXYXZY117 = getelementptr inbounds i32, i32* %element_addressAB116, i32 0
  %load_element118 = load i32, i32* %element_addressXYXZY117, align 4
  %array_castA119 = bitcast [1 x i32]* %ICASTO114 to i32*
  %gepBX120 = getelementptr i32, i32* %array_castA119, i32 0
  store i32 %load_element118, i32* %gepBX120, align 4
  %cval121 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP122 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO123 = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr124 = load i32*, i32** %ptr8, align 8
  %element_addressAB125 = load i32*, i32** %ptr8, align 8
  %element_addressXYXZY126 = getelementptr inbounds i32, i32* %element_addressAB125, i32 1
  %load_element127 = load i32, i32* %element_addressXYXZY126, align 4
  %array_castA128 = bitcast [1 x i32]* %ICASTO123 to i32*
  %gepBX129 = getelementptr i32, i32* %array_castA128, i32 1
  store i32 %load_element127, i32* %gepBX129, align 4
  %cval130 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP131 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO132 = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr133 = load i32*, i32** %ptr8, align 8
  %element_addressAB134 = load i32*, i32** %ptr8, align 8
  %element_addressXYXZY135 = getelementptr inbounds i32, i32* %element_addressAB134, i32 2
  %load_element136 = load i32, i32* %element_addressXYXZY135, align 4
  %array_castA137 = bitcast [1 x i32]* %ICASTO132 to i32*
  %gepBX138 = getelementptr i32, i32* %array_castA137, i32 2
  store i32 %load_element136, i32* %gepBX138, align 4
  %cval139 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP140 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO141 = bitcast %CValue* %cval10 to [1 x i32]*
  %ptr142 = load i32*, i32** %ptr8, align 8
  %element_addressAB143 = load i32*, i32** %ptr8, align 8
  %element_addressXYXZY144 = getelementptr inbounds i32, i32* %element_addressAB143, i32 3
  %load_element145 = load i32, i32* %element_addressXYXZY144, align 4
  %array_castA146 = bitcast [1 x i32]* %ICASTO141 to i32*
  %gepBX147 = getelementptr i32, i32* %array_castA146, i32 3
  store i32 %load_element145, i32* %gepBX147, align 4
  %ptr148 = load i32*, i32** %ptr8, align 8
  %ptrToIntC149 = ptrtoint i32* %ptr148 to i64
  %add150 = add i64 %ptrToIntC149, 16
  %intToPtrB151 = inttoptr i64 %add150 to i32*
  store i32* %intToPtrB151, i32** %ptr8, align 8
  %ptrToIntI152 = ptrtoint i32* %intToPtrB151 to i64
  %sub153 = sub i64 %ptrToIntI152, 16
  %iintToPtrD154 = inttoptr i64 %sub153 to i32*
  br label %end_blockX

cond_else_blockX110:                              ; preds = %after_break155, %cond_else_blockX84, %after_break108
  br label %cond_then_block156

after_break155:                                   ; No predecessors!
  br label %cond_else_blockX110
  br label %cond_else_blockX157

cond_then_block156:                               ; preds = %cond_else_blockX110
  br label %end_blockX

cond_else_blockX157:                              ; preds = %after_break158, %after_break155
  br label %end_blockX

after_break158:                                   ; No predecessors!
  br label %cond_else_blockX157

cond_jump_then:                                   ; preds = %end_blockX
  br label %cond_end_block

cond_end:                                         ; preds = %after_break160, %end_blockX
  %t161 = load i32, i32* %t9, align 4
  %eq162 = icmp eq i32 %t161, 0
  br i1 %eq162, label %cond_jump_then163, label %cond_end164

after_break160:                                   ; No predecessors!
  br label %cond_end

cond_jump_then163:                                ; preds = %cond_end
  store i32* null, i32** %inline_result_variable, align 8
  br label %macro_twosharps_end

cond_end164:                                      ; preds = %cond_end
  br label %loop_continue_top_block

tok_str_new:                                      ; preds = %cond_end_block
  %s167 = alloca %TokenString*, align 8
  store %TokenString* %macro_str111, %TokenString** %s167, align 8
  %s168 = load %TokenString*, %TokenString** %s167, align 8
  %fieldTU169 = getelementptr inbounds %TokenString, %TokenString* %s168, i32 0, i32 0
  store i32* null, i32** %fieldTU169, align 8
  %s170 = load %TokenString*, %TokenString** %s167, align 8
  %fieldTU171 = getelementptr inbounds %TokenString, %TokenString* %s170, i32 0, i32 1
  store i32 0, i32* %fieldTU171, align 4
  %s172 = load %TokenString*, %TokenString** %s167, align 8
  %fieldTU173 = getelementptr inbounds %TokenString, %TokenString* %s172, i32 0, i32 2
  store i32 0, i32* %fieldTU173, align 4
  %s174 = load %TokenString*, %TokenString** %s167, align 8
  %fieldTU175 = getelementptr inbounds %TokenString, %TokenString* %s174, i32 0, i32 3
  store i32 -1, i32* %fieldTU175, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  %macro_ptr = load i32*, i32** @macro_ptr, align 8
  store i32* %macro_ptr, i32** %saved_macro_ptr, align 8
  %macro_str176 = load i32*, i32** %macro_str7, align 8
  store i32* %macro_str176, i32** @macro_ptr, align 8
  br label %loop_top_block178

loop_continue_top_block177:                       ; preds = %cond_end_block194, %cond_jump_then187
  br label %loop_top_block178

loop_top_block178:                                ; preds = %loop_continue_top_block177, %tok_str_new_end
  br i1 true, label %cond_then_block179, label %cond_end_block180

cond_then_block179:                               ; preds = %loop_top_block178
  call void @next_nomacro_spc()
  %tok = load i32, i32* @tok, align 4
  %eq181 = icmp eq i32 %tok, 0
  br i1 %eq181, label %cond_jump_then182, label %cond_end183

cond_end_block180:                                ; preds = %cond_jump_then182, %loop_top_block178
  %saved_macro_ptr638 = load i32*, i32** %saved_macro_ptr, align 8
  store i32* %saved_macro_ptr638, i32** @macro_ptr, align 8
  %cstr639 = load %CString, %CString* %cstr, align 8
  call void @cstr_free(%CString* %cstr)
  %macro_str1640 = load %TokenString, %TokenString* %macro_str111, align 8
  call void @tok_str_add(%TokenString* %macro_str111, i32 0)
  %macro_str1641 = load %TokenString, %TokenString* %macro_str111, align 8
  %fieldVVV642 = getelementptr inbounds %TokenString, %TokenString* %macro_str111, i32 0, i32 0
  %str643 = load i32*, i32** %fieldVVV642, align 8
  store i32* %str643, i32** %inline_result_variable, align 8
  br label %macro_twosharps_end

cond_jump_then182:                                ; preds = %cond_then_block179
  br label %cond_end_block180

cond_end183:                                      ; preds = %after_break184, %cond_then_block179
  %tok185 = load i32, i32* @tok, align 4
  %eq186 = icmp eq i32 %tok185, 182
  br i1 %eq186, label %cond_jump_then187, label %cond_end188

after_break184:                                   ; No predecessors!
  br label %cond_end183

cond_jump_then187:                                ; preds = %cond_end183
  br label %loop_continue_top_block177

cond_end188:                                      ; preds = %after_continue, %cond_end183
  br label %loop_top_block189

after_continue:                                   ; No predecessors!
  br label %cond_end188

loop_top_block189:                                ; preds = %cond_end205, %cond_end188
  %macro_ptr190 = load i32*, i32** @macro_ptr, align 8
  %derefference_valueB191 = load i32, i32* %macro_ptr190, align 4
  %eq192 = icmp eq i32 %derefference_valueB191, 182
  br i1 %eq192, label %cond_then_block193, label %cond_end_block194

cond_then_block193:                               ; preds = %loop_top_block189
  %macro_ptr195 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC196 = ptrtoint i32* %macro_ptr195 to i64
  %add197 = add i64 %ptrToIntC196, 4
  %intToPtrB198 = inttoptr i64 %add197 to i32*
  store i32* %intToPtrB198, i32** @macro_ptr, align 8
  %derefference_valueB199 = load i32, i32* %intToPtrB198, align 4
  store i32 %derefference_valueB199, i32* %t9, align 4
  %t200 = load i32, i32* %t9, align 4
  %icmpA = icmp ne i32 %t200, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then201, label %cond_jump_end

cond_end_block194:                                ; preds = %loop_top_block189
  %macro_str1635 = load %TokenString, %TokenString* %macro_str111, align 8
  %tok636 = load i32, i32* @tok, align 4
  %tokc637 = load %CValue, %CValue* @tokc, align 16
  call void @tok_str_add2(%TokenString* %macro_str111, i32 %tok636, %CValue* @tokc)
  br label %loop_continue_top_block177

cond_jump_then201:                                ; preds = %cond_then_block193
  %t202 = load i32, i32* %t9, align 4
  %not_eq = icmp ne i32 %t202, 182
  %andand203 = and i1 %icmpA, %not_eq
  store i1 %andand203, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then201, %cond_then_block193
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then204, label %cond_end205

cond_jump_then204:                                ; preds = %cond_jump_end
  %macro_ptr206 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC207 = ptrtoint i32* %macro_ptr206 to i64
  %add208 = add i64 %ptrToIntC207, 4
  %intToPtrB209 = inttoptr i64 %add208 to i32*
  store i32* %intToPtrB209, i32** @macro_ptr, align 8
  %macro_ptr210 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntI211 = ptrtoint i32* %macro_ptr210 to i64
  %sub212 = sub i64 %ptrToIntI211, 4
  %iintToPtrD213 = inttoptr i64 %sub212 to i32*
  %derefference_valueB214 = load i32, i32* %iintToPtrD213, align 4
  store i32 %derefference_valueB214, i32* %t9, align 4
  %t216 = load i32, i32* %t9, align 4
  %eqtmp219 = icmp eq i32 %t216, 179
  br i1 %eqtmp219, label %cond_then_block217, label %cond_else_blockX218
  br label %cond_else_blockX220

cond_end205:                                      ; preds = %cond_end429, %cond_jump_end
  br label %loop_top_block189

end_blockX215:                                    ; preds = %cond_else_blockX375, %cond_then_block374, %cond_then_block327, %cond_then_block294, %cond_then_block245, %cond_then_block217
  %cstr377 = load %CString, %CString* %cstr, align 8
  call void @cstr_free(%CString* %cstr)
  %tok378 = load i32, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  %fun_result = call i8* @get_tok_str(i32 %tok378, %CValue* @tokc)
  store i8* %fun_result, i8** %p1, align 8
  %cstr379 = load %CString, %CString* %cstr, align 8
  %p1380 = load i8*, i8** %p1, align 8
  call void @cstr_cat(%CString* %cstr, i8* %p1380)
  %t381 = load i32, i32* %t9, align 4
  %cval382 = load %CValue, %CValue* %cval10, align 16
  %fun_result383 = call i8* @get_tok_str(i32 %t381, %CValue* %cval10)
  store i8* %fun_result383, i8** %p2, align 8
  %cstr384 = load %CString, %CString* %cstr, align 8
  %p2385 = load i8*, i8** %p2, align 8
  call void @cstr_cat(%CString* %cstr, i8* %p2385)
  %cstr386 = load %CString, %CString* %cstr, align 8
  store i32 2646, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.87, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

cond_then_block217:                               ; preds = %cond_else_blockX226, %cond_else_blockX224, %cond_else_blockX222, %cond_else_blockX220, %cond_else_blockX218, %cond_jump_then204
  %cval230 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP231 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO232 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr233 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC234 = ptrtoint i32* %macro_ptr233 to i64
  %add235 = add i64 %ptrToIntC234, 4
  %intToPtrB236 = inttoptr i64 %add235 to i32*
  store i32* %intToPtrB236, i32** @macro_ptr, align 8
  %macro_ptr237 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntI238 = ptrtoint i32* %macro_ptr237 to i64
  %sub239 = sub i64 %ptrToIntI238, 4
  %iintToPtrD240 = inttoptr i64 %sub239 to i32*
  %derefference_valueB241 = load i32, i32* %iintToPtrD240, align 4
  %array_castA242 = bitcast [1 x i32]* %ICASTO232 to i32*
  %gepBX243 = getelementptr i32, i32* %array_castA242, i32 0
  store i32 %derefference_valueB241, i32* %gepBX243, align 4
  br label %end_blockX215

cond_else_blockX218:                              ; preds = %cond_jump_then204
  %eqtmp221 = icmp eq i32 %t216, 200
  br i1 %eqtmp221, label %cond_then_block217, label %cond_else_blockX220
  br label %cond_else_blockX222

cond_else_blockX220:                              ; preds = %cond_else_blockX218, %cond_jump_then204
  %eqtmp223 = icmp eq i32 %t216, 180
  br i1 %eqtmp223, label %cond_then_block217, label %cond_else_blockX222
  br label %cond_else_blockX224

cond_else_blockX222:                              ; preds = %cond_else_blockX220, %cond_else_blockX218
  %eqtmp225 = icmp eq i32 %t216, 183
  br i1 %eqtmp225, label %cond_then_block217, label %cond_else_blockX224
  br label %cond_else_blockX226

cond_else_blockX224:                              ; preds = %cond_else_blockX222, %cond_else_blockX220
  %eqtmp227 = icmp eq i32 %t216, 185
  br i1 %eqtmp227, label %cond_then_block217, label %cond_else_blockX226
  br label %cond_else_blockX228

cond_else_blockX226:                              ; preds = %cond_else_blockX224, %cond_else_blockX222
  %eqtmp229 = icmp eq i32 %t216, 186
  br i1 %eqtmp229, label %cond_then_block217, label %cond_else_blockX228

cond_else_blockX228:                              ; preds = %after_break244, %cond_else_blockX226, %cond_else_blockX224
  %eqtmp247 = icmp eq i32 %t216, 181
  br i1 %eqtmp247, label %cond_then_block245, label %cond_else_blockX246
  br label %cond_else_blockX248

after_break244:                                   ; No predecessors!
  br label %cond_else_blockX228
  br label %cond_else_blockX246

cond_then_block245:                               ; preds = %cond_else_blockX248, %cond_else_blockX246, %cond_else_blockX228
  %cval252 = load %CValue, %CValue* %cval10, align 16
  %macro_ptr253 = load i32*, i32** @macro_ptr, align 8
  %castAQ254 = bitcast i32* %macro_ptr253 to %CString*
  %fieldIII255 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %icastN256 = bitcast fp128* %fieldIII255 to %CString**
  store %CString* %castAQ254, %CString** %icastN256, align 8
  %cval257 = load %CValue, %CValue* %cval10, align 16
  %ICASTO258 = bitcast %CValue* %cval10 to %CString**
  %cstr259 = load %CString*, %CString** %ICASTO258, align 8
  %macro_ptr260 = load i32*, i32** @macro_ptr, align 8
  %castAQ261 = bitcast i32* %macro_ptr260 to i8*
  %ptrToIntC262 = ptrtoint i8* %castAQ261 to i64
  %add263 = add i64 %ptrToIntC262, 32
  %intToPtrB264 = inttoptr i64 %add263 to i8*
  %fieldTU265 = getelementptr inbounds %CString, %CString* %cstr259, i32 0, i32 1
  store i8* %intToPtrB264, i8** %fieldTU265, align 8
  %macro_ptr266 = load i32*, i32** @macro_ptr, align 8
  %cval267 = load %CValue, %CValue* %cval10, align 16
  %ICASTO268 = bitcast %CValue* %cval10 to %CString**
  %cstr269 = load %CString*, %CString** %ICASTO268, align 8
  %fieldLLL270 = getelementptr inbounds %CString, %CString* %cstr269, i32 0, i32 0
  %size271 = load i32, i32* %fieldLLL270, align 4
  %icastD272 = sext i32 %size271 to i64
  %add273 = add i64 32, %icastD272
  %add274 = add i64 %add273, 3
  %rshifttmp275 = lshr i64 %add274, 2
  %ptrToIntC276 = ptrtoint i32* %macro_ptr266 to i64
  %mul277 = mul i64 %rshifttmp275, 4
  %add278 = add i64 %ptrToIntC276, %mul277
  %intToPtrB279 = inttoptr i64 %add278 to i32*
  store i32* %intToPtrB279, i32** @macro_ptr, align 8
  %cval280 = load %CValue, %CValue* %cval10, align 16
  %ICASTO281 = bitcast %CValue* %cval10 to %CString**
  %cstr282 = load %CString*, %CString** %ICASTO281, align 8
  %fieldLLL283 = getelementptr inbounds %CString, %CString* %cstr282, i32 0, i32 0
  %size284 = load i32, i32* %fieldLLL283, align 4
  %icastD285 = sext i32 %size284 to i64
  %add286 = add i64 32, %icastD285
  %add287 = add i64 %add286, 3
  %rshifttmp288 = lshr i64 %add287, 2
  %ptrToIntI289 = ptrtoint i32* %intToPtrB279 to i64
  %mul290 = mul i64 %rshifttmp288, 4
  %sub291 = sub i64 %ptrToIntI289, %mul290
  %iintToPtrD292 = inttoptr i64 %sub291 to i32*
  br label %end_blockX215

cond_else_blockX246:                              ; preds = %cond_else_blockX228, %after_break244
  %eqtmp249 = icmp eq i32 %t216, 184
  br i1 %eqtmp249, label %cond_then_block245, label %cond_else_blockX248
  br label %cond_else_blockX250

cond_else_blockX248:                              ; preds = %cond_else_blockX246, %cond_else_blockX228
  %eqtmp251 = icmp eq i32 %t216, 206
  br i1 %eqtmp251, label %cond_then_block245, label %cond_else_blockX250

cond_else_blockX250:                              ; preds = %after_break293, %cond_else_blockX248, %cond_else_blockX246
  %eqtmp296 = icmp eq i32 %t216, 192
  br i1 %eqtmp296, label %cond_then_block294, label %cond_else_blockX295
  br label %cond_else_blockX297

after_break293:                                   ; No predecessors!
  br label %cond_else_blockX250
  br label %cond_else_blockX295

cond_then_block294:                               ; preds = %cond_else_blockX297, %cond_else_blockX295, %cond_else_blockX250
  %cval301 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP302 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO303 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr304 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB305 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY306 = getelementptr inbounds i32, i32* %element_addressAB305, i32 0
  %load_element307 = load i32, i32* %element_addressXYXZY306, align 4
  %array_castA308 = bitcast [1 x i32]* %ICASTO303 to i32*
  %gepBX309 = getelementptr i32, i32* %array_castA308, i32 0
  store i32 %load_element307, i32* %gepBX309, align 4
  %cval310 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP311 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO312 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr313 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB314 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY315 = getelementptr inbounds i32, i32* %element_addressAB314, i32 1
  %load_element316 = load i32, i32* %element_addressXYXZY315, align 4
  %array_castA317 = bitcast [1 x i32]* %ICASTO312 to i32*
  %gepBX318 = getelementptr i32, i32* %array_castA317, i32 1
  store i32 %load_element316, i32* %gepBX318, align 4
  %macro_ptr319 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC320 = ptrtoint i32* %macro_ptr319 to i64
  %add321 = add i64 %ptrToIntC320, 8
  %intToPtrB322 = inttoptr i64 %add321 to i32*
  store i32* %intToPtrB322, i32** @macro_ptr, align 8
  %ptrToIntI323 = ptrtoint i32* %intToPtrB322 to i64
  %sub324 = sub i64 %ptrToIntI323, 8
  %iintToPtrD325 = inttoptr i64 %sub324 to i32*
  br label %end_blockX215

cond_else_blockX295:                              ; preds = %cond_else_blockX250, %after_break293
  %eqtmp298 = icmp eq i32 %t216, 201
  br i1 %eqtmp298, label %cond_then_block294, label %cond_else_blockX297
  br label %cond_else_blockX299

cond_else_blockX297:                              ; preds = %cond_else_blockX295, %cond_else_blockX250
  %eqtmp300 = icmp eq i32 %t216, 202
  br i1 %eqtmp300, label %cond_then_block294, label %cond_else_blockX299

cond_else_blockX299:                              ; preds = %after_break326, %cond_else_blockX297, %cond_else_blockX295
  %eqtmp329 = icmp eq i32 %t216, 193
  br i1 %eqtmp329, label %cond_then_block327, label %cond_else_blockX328

after_break326:                                   ; No predecessors!
  br label %cond_else_blockX299
  br label %cond_else_blockX328

cond_then_block327:                               ; preds = %cond_else_blockX299
  %cval330 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP331 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO332 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr333 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB334 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY335 = getelementptr inbounds i32, i32* %element_addressAB334, i32 0
  %load_element336 = load i32, i32* %element_addressXYXZY335, align 4
  %array_castA337 = bitcast [1 x i32]* %ICASTO332 to i32*
  %gepBX338 = getelementptr i32, i32* %array_castA337, i32 0
  store i32 %load_element336, i32* %gepBX338, align 4
  %cval339 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP340 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO341 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr342 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB343 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY344 = getelementptr inbounds i32, i32* %element_addressAB343, i32 1
  %load_element345 = load i32, i32* %element_addressXYXZY344, align 4
  %array_castA346 = bitcast [1 x i32]* %ICASTO341 to i32*
  %gepBX347 = getelementptr i32, i32* %array_castA346, i32 1
  store i32 %load_element345, i32* %gepBX347, align 4
  %cval348 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP349 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO350 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr351 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB352 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY353 = getelementptr inbounds i32, i32* %element_addressAB352, i32 2
  %load_element354 = load i32, i32* %element_addressXYXZY353, align 4
  %array_castA355 = bitcast [1 x i32]* %ICASTO350 to i32*
  %gepBX356 = getelementptr i32, i32* %array_castA355, i32 2
  store i32 %load_element354, i32* %gepBX356, align 4
  %cval357 = load %CValue, %CValue* %cval10, align 16
  %fieldPPP358 = getelementptr inbounds %CValue, %CValue* %cval10, i32 0, i32 0
  %ICASTO359 = bitcast %CValue* %cval10 to [1 x i32]*
  %macro_ptr360 = load i32*, i32** @macro_ptr, align 8
  %element_addressAB361 = load i32*, i32** @macro_ptr, align 8
  %element_addressXYXZY362 = getelementptr inbounds i32, i32* %element_addressAB361, i32 3
  %load_element363 = load i32, i32* %element_addressXYXZY362, align 4
  %array_castA364 = bitcast [1 x i32]* %ICASTO359 to i32*
  %gepBX365 = getelementptr i32, i32* %array_castA364, i32 3
  store i32 %load_element363, i32* %gepBX365, align 4
  %macro_ptr366 = load i32*, i32** @macro_ptr, align 8
  %ptrToIntC367 = ptrtoint i32* %macro_ptr366 to i64
  %add368 = add i64 %ptrToIntC367, 16
  %intToPtrB369 = inttoptr i64 %add368 to i32*
  store i32* %intToPtrB369, i32** @macro_ptr, align 8
  %ptrToIntI370 = ptrtoint i32* %intToPtrB369 to i64
  %sub371 = sub i64 %ptrToIntI370, 16
  %iintToPtrD372 = inttoptr i64 %sub371 to i32*
  br label %end_blockX215

cond_else_blockX328:                              ; preds = %after_break373, %cond_else_blockX299, %after_break326
  br label %cond_then_block374

after_break373:                                   ; No predecessors!
  br label %cond_else_blockX328
  br label %cond_else_blockX375

cond_then_block374:                               ; preds = %cond_else_blockX328
  br label %end_blockX215

cond_else_blockX375:                              ; preds = %after_break376, %after_break373
  br label %end_blockX215

after_break376:                                   ; No predecessors!
  br label %cond_else_blockX375

cstr_ccat:                                        ; preds = %end_blockX215
  %cstr387 = alloca %CString*, align 8
  store %CString* %cstr, %CString** %cstr387, align 8
  %ch = alloca i32, align 4
  store i32 0, i32* %ch, align 4
  %cstr389 = load %CString*, %CString** %cstr387, align 8
  %fieldLLL390 = getelementptr inbounds %CString, %CString* %cstr389, i32 0, i32 0
  %size391 = load i32, i32* %fieldLLL390, align 4
  %add392 = add i32 %size391, 1
  store i32 %add392, i32* %size388, align 4
  %size393 = load i32, i32* %size388, align 4
  %cstr394 = load %CString*, %CString** %cstr387, align 8
  %fieldLLL395 = getelementptr inbounds %CString, %CString* %cstr394, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL395, align 4
  %gt = icmp sgt i32 %size393, %size_allocated
  br i1 %gt, label %cond_jump_then396, label %cond_end397

cstr_ccat_end:                                    ; preds = %cond_end397
  %tok409 = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok409, 256
  store i1 %gteq_signed, i1* %oror, align 1
  br i1 %gteq_signed, label %cond_jump_end411, label %cond_jump_then410

cond_jump_then396:                                ; preds = %cstr_ccat
  %cstr398 = load %CString*, %CString** %cstr387, align 8
  %size399 = load i32, i32* %size388, align 4
  call void @cstr_realloc(%CString* %cstr398, i32 %size399)
  br label %cond_end397

cond_end397:                                      ; preds = %cond_jump_then396, %cstr_ccat
  %cstr400 = load %CString*, %CString** %cstr387, align 8
  %fieldLLL401 = getelementptr inbounds %CString, %CString* %cstr400, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL401, align 8
  %size402 = load i32, i32* %size388, align 4
  %sub403 = sub i32 %size402, 1
  %ch404 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch404 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub403
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr405 = load %CString*, %CString** %cstr387, align 8
  %size406 = load i32, i32* %size388, align 4
  %fieldTU407 = getelementptr inbounds %CString, %CString* %cstr405, i32 0, i32 0
  store i32 %size406, i32* %fieldTU407, align 4
  br label %cstr_ccat_end

cond_jump_then410:                                ; preds = %cstr_ccat_end
  %tok412 = load i32, i32* @tok, align 4
  %eq413 = icmp eq i32 %tok412, 206
  %oror414 = or i1 %gteq_signed, %eq413
  store i1 %oror414, i1* %oror, align 1
  br label %cond_jump_end411

cond_jump_end411:                                 ; preds = %cond_jump_then410, %cstr_ccat_end
  %oror_result_value = load i1, i1* %oror, align 1
  store i1 %oror_result_value, i1* %andand408, align 1
  br i1 %oror_result_value, label %cond_jump_then415, label %cond_jump_end416

cond_jump_then415:                                ; preds = %cond_jump_end411
  %t418 = load i32, i32* %t9, align 4
  %gteq_signed419 = icmp sge i32 %t418, 256
  store i1 %gteq_signed419, i1* %oror417, align 1
  br i1 %gteq_signed419, label %cond_jump_end421, label %cond_jump_then420

cond_jump_end416:                                 ; preds = %cond_jump_end421, %cond_jump_end411
  %andand_result_value427 = load i1, i1* %andand408, align 1
  br i1 %andand_result_value427, label %cond_jump_then428, label %cond_else_block

cond_jump_then420:                                ; preds = %cond_jump_then415
  %t422 = load i32, i32* %t9, align 4
  %eq423 = icmp eq i32 %t422, 206
  %oror424 = or i1 %gteq_signed419, %eq423
  store i1 %oror424, i1* %oror417, align 1
  br label %cond_jump_end421

cond_jump_end421:                                 ; preds = %cond_jump_then420, %cond_jump_then415
  %oror_result_value425 = load i1, i1* %oror417, align 1
  %andand426 = and i1 %oror_result_value, %oror_result_value425
  store i1 %andand426, i1* %andand408, align 1
  br label %cond_jump_end416

cond_jump_then428:                                ; preds = %cond_jump_end416
  %tok430 = load i32, i32* @tok, align 4
  %eq431 = icmp eq i32 %tok430, 206
  br i1 %eq431, label %cond_jump_then432, label %cond_else_block433

cond_else_block:                                  ; preds = %cond_jump_end416
  %cstr531 = load %CString, %CString* %cstr, align 8
  %fieldVVV532 = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data533 = load i8*, i8** %fieldVVV532, align 8
  store i8* %data533, i8** %str, align 8
  %str534 = load i8*, i8** %str, align 8
  %fun_result535 = call i32 @strcmp(i8* %str534, i8* bitcast ([4 x i8]* @87 to i8*))
  %logical_denial536 = icmp eq i32 %fun_result535, 0
  %castOOOO537 = zext i1 %logical_denial536 to i32
  %icmpA538 = icmp ne i32 %castOOOO537, 0
  br i1 %icmpA538, label %cond_jump_then539, label %cond_jump_elif0

cond_end429:                                      ; preds = %cond_end541, %cond_end434
  br label %cond_end205

cond_jump_then432:                                ; preds = %cond_jump_then428
  %tokcstr = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  %cstr435 = load %CString, %CString* %cstr, align 8
  store %CString %cstr435, %CString* @tokcstr, align 8
  %cstr436 = load %CString, %CString* %cstr, align 8
  call void @cstr_new(%CString* %cstr)
  %tokc437 = load %CValue, %CValue* @tokc, align 16
  %tokcstr438 = load %CString, %CString* @tokcstr, align 8
  store %CString* @tokcstr, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  br label %cond_end434

cond_else_block433:                               ; preds = %cond_jump_then428
  %t439 = load i32, i32* %t9, align 4
  %eq440 = icmp eq i32 %t439, 206
  br i1 %eq440, label %cond_jump_then441, label %cond_end442

cond_end434:                                      ; preds = %cond_end442, %cond_jump_then432
  br label %cond_end429

cond_jump_then441:                                ; preds = %cond_else_block433
  %p2443 = load i8*, i8** %p2, align 8
  store i8* %p2443, i8** %p, align 8
  br label %loop_top_block445

cond_end442:                                      ; preds = %cond_end_block447, %cond_else_block433
  %cstr521 = load %CString, %CString* %cstr, align 8
  %fieldVVV = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data522 = load i8*, i8** %fieldVVV, align 8
  %cstr523 = load %CString, %CString* %cstr, align 8
  %fieldVVV524 = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data525 = load i8*, i8** %fieldVVV524, align 8
  %fun_result526 = call i64 @strlen(i8* %data525)
  %icastM = trunc i64 %fun_result526 to i32
  %fun_result527 = call %TokenSym* @tok_alloc(i8* %data522, i32 %icastM)
  store %TokenSym* %fun_result527, %TokenSym** %ts, align 8
  %ts528 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL529 = getelementptr inbounds %TokenSym, %TokenSym* %ts528, i32 0, i32 5
  %tok530 = load i32, i32* %fieldLLL529, align 4
  store i32 %tok530, i32* @tok, align 4
  br label %cond_end434

loop_continue_top_block444:                       ; preds = %cond_end520
  br label %loop_top_block445

loop_top_block445:                                ; preds = %loop_continue_top_block444, %cond_jump_then441
  br i1 true, label %cond_then_block446, label %cond_end_block447

cond_then_block446:                               ; preds = %loop_top_block445
  %p448 = load i8*, i8** %p, align 8
  %derefference_valueB449 = load i8, i8* %p448, align 1
  %icastL = sext i8 %derefference_valueB449 to i32
  store i32 %icastL, i32* %c, align 4
  %c450 = load i32, i32* %c, align 4
  %eq451 = icmp eq i32 %c450, 0
  br i1 %eq451, label %cond_jump_then452, label %cond_end453

cond_end_block447:                                ; preds = %cond_jump_then452, %loop_top_block445
  br label %cond_end442

cond_jump_then452:                                ; preds = %cond_then_block446
  br label %cond_end_block447

cond_end453:                                      ; preds = %after_break454, %cond_then_block446
  %p455 = load i8*, i8** %p, align 8
  %ptrToIntC456 = ptrtoint i8* %p455 to i64
  %add457 = add i64 %ptrToIntC456, 1
  %intToPtrB458 = inttoptr i64 %add457 to i8*
  store i8* %intToPtrB458, i8** %p, align 8
  %p459 = load i8*, i8** %p, align 8
  %ptrToIntI460 = ptrtoint i8* %p459 to i64
  %sub461 = sub i64 %ptrToIntI460, 1
  %iintToPtrD462 = inttoptr i64 %sub461 to i8*
  %c464 = load i32, i32* %c, align 4
  store i32 2671, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.88, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum

after_break454:                                   ; No predecessors!
  br label %cond_end453

isnum:                                            ; preds = %cond_end453
  %inline_result_variable465 = alloca i32, align 4
  %c466 = alloca i32, align 4
  store i32 %c464, i32* %c466, align 4
  %c468 = load i32, i32* %c466, align 4
  %gteq_signed469 = icmp sge i32 %c468, 48
  store i1 %gteq_signed469, i1* %andand467, align 1
  br i1 %gteq_signed469, label %cond_jump_then470, label %cond_jump_end471

isnum_end:                                        ; preds = %cond_jump_end471
  %inline_result_variable475 = load i32, i32* %inline_result_variable465, align 4
  %logical_denial = icmp eq i32 %inline_result_variable475, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA476 = icmp ne i32 %castOOOO, 0
  store i1 %icmpA476, i1* %andand463, align 1
  br i1 %icmpA476, label %cond_jump_then477, label %cond_jump_end478

cond_jump_then470:                                ; preds = %isnum
  %c472 = load i32, i32* %c466, align 4
  %leeq = icmp sle i32 %c472, 57
  %andand473 = and i1 %gteq_signed469, %leeq
  store i1 %andand473, i1* %andand467, align 1
  br label %cond_jump_end471

cond_jump_end471:                                 ; preds = %cond_jump_then470, %isnum
  %andand_result_value474 = load i1, i1* %andand467, align 1
  %icastKX = zext i1 %andand_result_value474 to i32
  store i32 %icastKX, i32* %inline_result_variable465, align 4
  br label %isnum_end

cond_jump_then477:                                ; preds = %isnum_end
  %c479 = load i32, i32* %c, align 4
  store i32 2671, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.89, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isid

cond_jump_end478:                                 ; preds = %isid_end, %isnum_end
  %andand_result_value518 = load i1, i1* %andand463, align 1
  br i1 %andand_result_value518, label %cond_jump_then519, label %cond_end520

isid:                                             ; preds = %cond_jump_then477
  %inline_result_variable480 = alloca i32, align 4
  %c481 = alloca i32, align 4
  store i32 %c479, i32* %c481, align 4
  %c485 = load i32, i32* %c481, align 4
  %gteq_signed486 = icmp sge i32 %c485, 97
  store i1 %gteq_signed486, i1* %andand484, align 1
  br i1 %gteq_signed486, label %cond_jump_then487, label %cond_jump_end488

isid_end:                                         ; preds = %cond_jump_end507
  %inline_result_variable513 = load i32, i32* %inline_result_variable480, align 4
  %logical_denial514 = icmp eq i32 %inline_result_variable513, 0
  %castOOOO515 = zext i1 %logical_denial514 to i32
  %icmpA516 = icmp ne i32 %castOOOO515, 0
  %andand517 = and i1 %icmpA476, %icmpA516
  store i1 %andand517, i1* %andand463, align 1
  br label %cond_jump_end478

cond_jump_then487:                                ; preds = %isid
  %c489 = load i32, i32* %c481, align 4
  %leeq490 = icmp sle i32 %c489, 122
  %andand491 = and i1 %gteq_signed486, %leeq490
  store i1 %andand491, i1* %andand484, align 1
  br label %cond_jump_end488

cond_jump_end488:                                 ; preds = %cond_jump_then487, %isid
  %andand_result_value492 = load i1, i1* %andand484, align 1
  store i1 %andand_result_value492, i1* %oror483, align 1
  br i1 %andand_result_value492, label %cond_jump_end494, label %cond_jump_then493

cond_jump_then493:                                ; preds = %cond_jump_end488
  %c496 = load i32, i32* %c481, align 4
  %gteq_signed497 = icmp sge i32 %c496, 65
  store i1 %gteq_signed497, i1* %andand495, align 1
  br i1 %gteq_signed497, label %cond_jump_then498, label %cond_jump_end499

cond_jump_end494:                                 ; preds = %cond_jump_end499, %cond_jump_end488
  %oror_result_value505 = load i1, i1* %oror483, align 1
  store i1 %oror_result_value505, i1* %oror482, align 1
  br i1 %oror_result_value505, label %cond_jump_end507, label %cond_jump_then506

cond_jump_then498:                                ; preds = %cond_jump_then493
  %c500 = load i32, i32* %c481, align 4
  %leeq501 = icmp sle i32 %c500, 90
  %andand502 = and i1 %gteq_signed497, %leeq501
  store i1 %andand502, i1* %andand495, align 1
  br label %cond_jump_end499

cond_jump_end499:                                 ; preds = %cond_jump_then498, %cond_jump_then493
  %andand_result_value503 = load i1, i1* %andand495, align 1
  %oror504 = or i1 %andand_result_value492, %andand_result_value503
  store i1 %oror504, i1* %oror483, align 1
  br label %cond_jump_end494

cond_jump_then506:                                ; preds = %cond_jump_end494
  %c508 = load i32, i32* %c481, align 4
  %eq509 = icmp eq i32 %c508, 95
  %oror510 = or i1 %oror_result_value505, %eq509
  store i1 %oror510, i1* %oror482, align 1
  br label %cond_jump_end507

cond_jump_end507:                                 ; preds = %cond_jump_then506, %cond_jump_end494
  %oror_result_value511 = load i1, i1* %oror482, align 1
  %icastKX512 = zext i1 %oror_result_value511 to i32
  store i32 %icastKX512, i32* %inline_result_variable480, align 4
  br label %isid_end

cond_jump_then519:                                ; preds = %cond_jump_end478
  br label %macro_twosharps.error_pasting
  br label %cond_end520

cond_end520:                                      ; preds = %cond_jump_then519, %cond_jump_end478
  br label %loop_continue_top_block444

macro_twosharps.error_pasting:                    ; preds = %cond_else_block540, %cond_jump_then558, %cond_jump_then519
  %cstr587 = load %CString, %CString* %cstr, align 8
  call void @cstr_free(%CString* %cstr)
  %tok588 = load i32, i32* @tok, align 4
  %tokc589 = load %CValue, %CValue* @tokc, align 16
  %fun_result590 = call i8* @get_tok_str(i32 %tok588, %CValue* @tokc)
  store i8* %fun_result590, i8** %p1, align 8
  %cstr591 = load %CString, %CString* %cstr, align 8
  %p1592 = load i8*, i8** %p1, align 8
  call void @cstr_cat(%CString* %cstr, i8* %p1592)
  %cstr593 = load %CString, %CString* %cstr, align 8
  store i32 2706, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.90, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat594

cond_jump_then539:                                ; preds = %cond_else_block
  store i32 130, i32* @tok, align 4
  br label %cond_end541

cond_jump_elif0:                                  ; preds = %cond_else_block
  %str542 = load i8*, i8** %str, align 8
  %fun_result543 = call i32 @strcmp(i8* %str542, i8* bitcast ([4 x i8]* @88 to i8*))
  %logical_denial544 = icmp eq i32 %fun_result543, 0
  %castOOOO545 = zext i1 %logical_denial544 to i32
  %icmpA546 = icmp ne i32 %castOOOO545, 0
  br i1 %icmpA546, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  store i32 129, i32* @tok, align 4
  br label %cond_end541

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %str547 = load i8*, i8** %str, align 8
  %fun_result548 = call i64 @strlen(i8* %str547)
  %eq549 = icmp eq i64 %fun_result548, 2
  br i1 %eq549, label %cond_jump_elif_then1, label %cond_else_block540

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  br label %loop_top_block551

cond_else_block540:                               ; preds = %cond_jump_elif1
  br label %macro_twosharps.error_pasting

cond_end541:                                      ; preds = %cstr_ccat_end597, %cond_end_block553, %cond_jump_elif_then0, %cond_jump_then539
  br label %cond_end429

loop_continue_top_block550:                       ; preds = %cond_end582
  br label %loop_top_block551

loop_top_block551:                                ; preds = %loop_continue_top_block550, %cond_jump_elif_then1
  br i1 true, label %cond_then_block552, label %cond_end_block553

cond_then_block552:                               ; preds = %loop_top_block551
  %derefference_valueB554 = load i8, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @tok_two_chars, i32 0, i32 0), align 1
  %logical_denial555 = icmp eq i8 %derefference_valueB554, 0
  %castOOOO556 = zext i1 %logical_denial555 to i32
  %icmpA557 = icmp ne i32 %castOOOO556, 0
  br i1 %icmpA557, label %cond_jump_then558, label %cond_end559

cond_end_block553:                                ; preds = %cond_jump_then581, %loop_top_block551
  %element_addressAB584 = load i8*, i8** inttoptr (i64 add (i64 ptrtoint ([64 x i8]* @tok_two_chars to i64), i64 3) to i8**), align 8
  %element_addressXYXZY585 = getelementptr inbounds i8, i8* %element_addressAB584, i32 2
  %load_element586 = load i8, i8* %element_addressXYXZY585, align 1
  %icastKY = zext i8 %load_element586 to i32
  store i32 %icastKY, i32* @tok, align 4
  br label %cond_end541

cond_jump_then558:                                ; preds = %cond_then_block552
  br label %macro_twosharps.error_pasting
  br label %cond_end559

cond_end559:                                      ; preds = %cond_jump_then558, %cond_then_block552
  %element_addressAB561 = load i8*, i8** bitcast ([64 x i8]* @tok_two_chars to i8**), align 8
  %element_addressXYXZY562 = getelementptr inbounds i8, i8* %element_addressAB561, i32 0
  %load_element563 = load i8, i8* %element_addressXYXZY562, align 1
  %str564 = load i8*, i8** %str, align 8
  %element_addressAB565 = load i8*, i8** %str, align 8
  %element_addressXYXZY566 = getelementptr inbounds i8, i8* %element_addressAB565, i32 0
  %load_element567 = load i8, i8* %element_addressXYXZY566, align 1
  %eq568 = icmp eq i8 %load_element563, %load_element567
  store i1 %eq568, i1* %andand560, align 1
  br i1 %eq568, label %cond_jump_then569, label %cond_jump_end570

cond_jump_then569:                                ; preds = %cond_end559
  %element_addressAB571 = load i8*, i8** bitcast ([64 x i8]* @tok_two_chars to i8**), align 8
  %element_addressXYXZY572 = getelementptr inbounds i8, i8* %element_addressAB571, i32 1
  %load_element573 = load i8, i8* %element_addressXYXZY572, align 1
  %str574 = load i8*, i8** %str, align 8
  %element_addressAB575 = load i8*, i8** %str, align 8
  %element_addressXYXZY576 = getelementptr inbounds i8, i8* %element_addressAB575, i32 1
  %load_element577 = load i8, i8* %element_addressXYXZY576, align 1
  %eq578 = icmp eq i8 %load_element573, %load_element577
  %andand579 = and i1 %eq568, %eq578
  store i1 %andand579, i1* %andand560, align 1
  br label %cond_jump_end570

cond_jump_end570:                                 ; preds = %cond_jump_then569, %cond_end559
  %andand_result_value580 = load i1, i1* %andand560, align 1
  br i1 %andand_result_value580, label %cond_jump_then581, label %cond_end582

cond_jump_then581:                                ; preds = %cond_jump_end570
  br label %cond_end_block553

cond_end582:                                      ; preds = %after_break583, %cond_jump_end570
  br label %loop_continue_top_block550

after_break583:                                   ; No predecessors!
  br label %cond_end582

cstr_ccat594:                                     ; preds = %macro_twosharps.error_pasting
  %cstr595 = alloca %CString*, align 8
  store %CString* %cstr, %CString** %cstr595, align 8
  %ch596 = alloca i32, align 4
  store i32 0, i32* %ch596, align 4
  %cstr599 = load %CString*, %CString** %cstr595, align 8
  %fieldLLL600 = getelementptr inbounds %CString, %CString* %cstr599, i32 0, i32 0
  %size601 = load i32, i32* %fieldLLL600, align 4
  %add602 = add i32 %size601, 1
  store i32 %add602, i32* %size598, align 4
  %size603 = load i32, i32* %size598, align 4
  %cstr604 = load %CString*, %CString** %cstr595, align 8
  %fieldLLL605 = getelementptr inbounds %CString, %CString* %cstr604, i32 0, i32 2
  %size_allocated606 = load i32, i32* %fieldLLL605, align 4
  %gt607 = icmp sgt i32 %size603, %size_allocated606
  br i1 %gt607, label %cond_jump_then608, label %cond_end609

cstr_ccat_end597:                                 ; preds = %cond_end609
  %t623 = load i32, i32* %t9, align 4
  %cval624 = load %CValue, %CValue* %cval10, align 16
  %fun_result625 = call i8* @get_tok_str(i32 %t623, %CValue* %cval10)
  store i8* %fun_result625, i8** %p2, align 8
  %cstr626 = load %CString, %CString* %cstr, align 8
  %fieldVVV627 = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data628 = load i8*, i8** %fieldVVV627, align 8
  %p2629 = load i8*, i8** %p2, align 8
  call void (i8*, ...) @warning(i8* bitcast ([64 x i8]* @89 to i8*), i8* %data628, i8* %p2629)
  %macro_str1630 = load %TokenString, %TokenString* %macro_str111, align 8
  %tok631 = load i32, i32* @tok, align 4
  %tokc632 = load %CValue, %CValue* @tokc, align 16
  call void @tok_str_add2(%TokenString* %macro_str111, i32 %tok631, %CValue* @tokc)
  %t633 = load i32, i32* %t9, align 4
  store i32 %t633, i32* @tok, align 4
  %cval634 = load %CValue, %CValue* %cval10, align 16
  store %CValue %cval634, %CValue* @tokc, align 16
  br label %cond_end541

cond_jump_then608:                                ; preds = %cstr_ccat594
  %cstr610 = load %CString*, %CString** %cstr595, align 8
  %size611 = load i32, i32* %size598, align 4
  call void @cstr_realloc(%CString* %cstr610, i32 %size611)
  br label %cond_end609

cond_end609:                                      ; preds = %cond_jump_then608, %cstr_ccat594
  %cstr612 = load %CString*, %CString** %cstr595, align 8
  %fieldLLL613 = getelementptr inbounds %CString, %CString* %cstr612, i32 0, i32 1
  %data614 = load i8*, i8** %fieldLLL613, align 8
  %size615 = load i32, i32* %size598, align 4
  %sub616 = sub i32 %size615, 1
  %ch617 = load i32, i32* %ch596, align 4
  %icastJ618 = trunc i32 %ch617 to i8
  %element_addressXYXY619 = getelementptr i8, i8* %data614, i32 %sub616
  store i8 %icastJ618, i8* %element_addressXYXY619, align 1
  %cstr620 = load %CString*, %CString** %cstr595, align 8
  %size621 = load i32, i32* %size598, align 4
  %fieldTU622 = getelementptr inbounds %CString, %CString* %cstr620, i32 0, i32 0
  store i32 %size621, i32* %fieldTU622, align 4
  br label %cstr_ccat_end597

cond_jump_then646:                                ; preds = %macro_twosharps_end
  %macro_str1648 = load i32*, i32** %macro_str1, align 8
  store i32* %macro_str1648, i32** %ptr, align 8
  br label %cond_end647

cond_end647:                                      ; preds = %cond_jump_then646, %macro_twosharps_end
  store i32 0, i32* %spc, align 4
  br label %loop_top_block649

loop_top_block649:                                ; preds = %cond_end852, %cond_end647
  br i1 true, label %cond_then_block650, label %cond_end_block651

cond_then_block650:                               ; preds = %loop_top_block649
  %ptr652 = load i32*, i32** %ptr, align 8
  %eq653 = icmp eq i32* %ptr652, null
  br i1 %eq653, label %cond_jump_then654, label %cond_end655

cond_end_block651:                                ; preds = %cond_jump_then830, %cond_jump_then654, %loop_top_block649
  %macro_str1963 = load i32*, i32** %macro_str1, align 8
  %icmpB964 = icmp ne i32* %macro_str1963, null
  br i1 %icmpB964, label %cond_jump_then965, label %cond_end966

cond_jump_then654:                                ; preds = %cond_then_block650
  br label %cond_end_block651

cond_end655:                                      ; preds = %after_break656, %cond_then_block650
  %ptr657 = load i32*, i32** %ptr, align 8
  %ptrToIntC658 = ptrtoint i32* %ptr657 to i64
  %add659 = add i64 %ptrToIntC658, 4
  %intToPtrB660 = inttoptr i64 %add659 to i32*
  store i32* %intToPtrB660, i32** %ptr, align 8
  %ptr661 = load i32*, i32** %ptr, align 8
  %ptrToIntI662 = ptrtoint i32* %ptr661 to i64
  %sub663 = sub i64 %ptrToIntI662, 4
  %iintToPtrD664 = inttoptr i64 %sub663 to i32*
  %derefference_valueB665 = load i32, i32* %iintToPtrD664, align 4
  store i32 %derefference_valueB665, i32* %t, align 4
  %t667 = load i32, i32* %t, align 4
  %eqtmp670 = icmp eq i32 %t667, 179
  br i1 %eqtmp670, label %cond_then_block668, label %cond_else_blockX669
  br label %cond_else_blockX671

after_break656:                                   ; No predecessors!
  br label %cond_end655

end_blockX666:                                    ; preds = %cond_else_blockX826, %cond_then_block825, %cond_then_block778, %cond_then_block745, %cond_then_block696, %cond_then_block668
  %t828 = load i32, i32* %t, align 4
  %eq829 = icmp eq i32 %t828, 0
  br i1 %eq829, label %cond_jump_then830, label %cond_end831

cond_then_block668:                               ; preds = %cond_else_blockX677, %cond_else_blockX675, %cond_else_blockX673, %cond_else_blockX671, %cond_else_blockX669, %cond_end655
  %cval681 = load %CValue, %CValue* %cval, align 16
  %fieldPPP682 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO683 = bitcast %CValue* %cval to [1 x i32]*
  %ptr684 = load i32*, i32** %ptr, align 8
  %ptrToIntC685 = ptrtoint i32* %ptr684 to i64
  %add686 = add i64 %ptrToIntC685, 4
  %intToPtrB687 = inttoptr i64 %add686 to i32*
  store i32* %intToPtrB687, i32** %ptr, align 8
  %ptr688 = load i32*, i32** %ptr, align 8
  %ptrToIntI689 = ptrtoint i32* %ptr688 to i64
  %sub690 = sub i64 %ptrToIntI689, 4
  %iintToPtrD691 = inttoptr i64 %sub690 to i32*
  %derefference_valueB692 = load i32, i32* %iintToPtrD691, align 4
  %array_castA693 = bitcast [1 x i32]* %ICASTO683 to i32*
  %gepBX694 = getelementptr i32, i32* %array_castA693, i32 0
  store i32 %derefference_valueB692, i32* %gepBX694, align 4
  br label %end_blockX666

cond_else_blockX669:                              ; preds = %cond_end655
  %eqtmp672 = icmp eq i32 %t667, 200
  br i1 %eqtmp672, label %cond_then_block668, label %cond_else_blockX671
  br label %cond_else_blockX673

cond_else_blockX671:                              ; preds = %cond_else_blockX669, %cond_end655
  %eqtmp674 = icmp eq i32 %t667, 180
  br i1 %eqtmp674, label %cond_then_block668, label %cond_else_blockX673
  br label %cond_else_blockX675

cond_else_blockX673:                              ; preds = %cond_else_blockX671, %cond_else_blockX669
  %eqtmp676 = icmp eq i32 %t667, 183
  br i1 %eqtmp676, label %cond_then_block668, label %cond_else_blockX675
  br label %cond_else_blockX677

cond_else_blockX675:                              ; preds = %cond_else_blockX673, %cond_else_blockX671
  %eqtmp678 = icmp eq i32 %t667, 185
  br i1 %eqtmp678, label %cond_then_block668, label %cond_else_blockX677
  br label %cond_else_blockX679

cond_else_blockX677:                              ; preds = %cond_else_blockX675, %cond_else_blockX673
  %eqtmp680 = icmp eq i32 %t667, 186
  br i1 %eqtmp680, label %cond_then_block668, label %cond_else_blockX679

cond_else_blockX679:                              ; preds = %after_break695, %cond_else_blockX677, %cond_else_blockX675
  %eqtmp698 = icmp eq i32 %t667, 181
  br i1 %eqtmp698, label %cond_then_block696, label %cond_else_blockX697
  br label %cond_else_blockX699

after_break695:                                   ; No predecessors!
  br label %cond_else_blockX679
  br label %cond_else_blockX697

cond_then_block696:                               ; preds = %cond_else_blockX699, %cond_else_blockX697, %cond_else_blockX679
  %cval703 = load %CValue, %CValue* %cval, align 16
  %ptr704 = load i32*, i32** %ptr, align 8
  %castAQ705 = bitcast i32* %ptr704 to %CString*
  %fieldIII706 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN707 = bitcast fp128* %fieldIII706 to %CString**
  store %CString* %castAQ705, %CString** %icastN707, align 8
  %cval708 = load %CValue, %CValue* %cval, align 16
  %ICASTO709 = bitcast %CValue* %cval to %CString**
  %cstr710 = load %CString*, %CString** %ICASTO709, align 8
  %ptr711 = load i32*, i32** %ptr, align 8
  %castAQ712 = bitcast i32* %ptr711 to i8*
  %ptrToIntC713 = ptrtoint i8* %castAQ712 to i64
  %add714 = add i64 %ptrToIntC713, 32
  %intToPtrB715 = inttoptr i64 %add714 to i8*
  %fieldTU716 = getelementptr inbounds %CString, %CString* %cstr710, i32 0, i32 1
  store i8* %intToPtrB715, i8** %fieldTU716, align 8
  %ptr717 = load i32*, i32** %ptr, align 8
  %cval718 = load %CValue, %CValue* %cval, align 16
  %ICASTO719 = bitcast %CValue* %cval to %CString**
  %cstr720 = load %CString*, %CString** %ICASTO719, align 8
  %fieldLLL721 = getelementptr inbounds %CString, %CString* %cstr720, i32 0, i32 0
  %size722 = load i32, i32* %fieldLLL721, align 4
  %icastD723 = sext i32 %size722 to i64
  %add724 = add i64 32, %icastD723
  %add725 = add i64 %add724, 3
  %rshifttmp726 = lshr i64 %add725, 2
  %ptrToIntC727 = ptrtoint i32* %ptr717 to i64
  %mul728 = mul i64 %rshifttmp726, 4
  %add729 = add i64 %ptrToIntC727, %mul728
  %intToPtrB730 = inttoptr i64 %add729 to i32*
  store i32* %intToPtrB730, i32** %ptr, align 8
  %cval731 = load %CValue, %CValue* %cval, align 16
  %ICASTO732 = bitcast %CValue* %cval to %CString**
  %cstr733 = load %CString*, %CString** %ICASTO732, align 8
  %fieldLLL734 = getelementptr inbounds %CString, %CString* %cstr733, i32 0, i32 0
  %size735 = load i32, i32* %fieldLLL734, align 4
  %icastD736 = sext i32 %size735 to i64
  %add737 = add i64 32, %icastD736
  %add738 = add i64 %add737, 3
  %rshifttmp739 = lshr i64 %add738, 2
  %ptrToIntI740 = ptrtoint i32* %intToPtrB730 to i64
  %mul741 = mul i64 %rshifttmp739, 4
  %sub742 = sub i64 %ptrToIntI740, %mul741
  %iintToPtrD743 = inttoptr i64 %sub742 to i32*
  br label %end_blockX666

cond_else_blockX697:                              ; preds = %cond_else_blockX679, %after_break695
  %eqtmp700 = icmp eq i32 %t667, 184
  br i1 %eqtmp700, label %cond_then_block696, label %cond_else_blockX699
  br label %cond_else_blockX701

cond_else_blockX699:                              ; preds = %cond_else_blockX697, %cond_else_blockX679
  %eqtmp702 = icmp eq i32 %t667, 206
  br i1 %eqtmp702, label %cond_then_block696, label %cond_else_blockX701

cond_else_blockX701:                              ; preds = %after_break744, %cond_else_blockX699, %cond_else_blockX697
  %eqtmp747 = icmp eq i32 %t667, 192
  br i1 %eqtmp747, label %cond_then_block745, label %cond_else_blockX746
  br label %cond_else_blockX748

after_break744:                                   ; No predecessors!
  br label %cond_else_blockX701
  br label %cond_else_blockX746

cond_then_block745:                               ; preds = %cond_else_blockX748, %cond_else_blockX746, %cond_else_blockX701
  %cval752 = load %CValue, %CValue* %cval, align 16
  %fieldPPP753 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO754 = bitcast %CValue* %cval to [1 x i32]*
  %ptr755 = load i32*, i32** %ptr, align 8
  %element_addressAB756 = load i32*, i32** %ptr, align 8
  %element_addressXYXZY757 = getelementptr inbounds i32, i32* %element_addressAB756, i32 0
  %load_element758 = load i32, i32* %element_addressXYXZY757, align 4
  %array_castA759 = bitcast [1 x i32]* %ICASTO754 to i32*
  %gepBX760 = getelementptr i32, i32* %array_castA759, i32 0
  store i32 %load_element758, i32* %gepBX760, align 4
  %cval761 = load %CValue, %CValue* %cval, align 16
  %fieldPPP762 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO763 = bitcast %CValue* %cval to [1 x i32]*
  %ptr764 = load i32*, i32** %ptr, align 8
  %element_addressAB765 = load i32*, i32** %ptr, align 8
  %element_addressXYXZY766 = getelementptr inbounds i32, i32* %element_addressAB765, i32 1
  %load_element767 = load i32, i32* %element_addressXYXZY766, align 4
  %array_castA768 = bitcast [1 x i32]* %ICASTO763 to i32*
  %gepBX769 = getelementptr i32, i32* %array_castA768, i32 1
  store i32 %load_element767, i32* %gepBX769, align 4
  %ptr770 = load i32*, i32** %ptr, align 8
  %ptrToIntC771 = ptrtoint i32* %ptr770 to i64
  %add772 = add i64 %ptrToIntC771, 8
  %intToPtrB773 = inttoptr i64 %add772 to i32*
  store i32* %intToPtrB773, i32** %ptr, align 8
  %ptrToIntI774 = ptrtoint i32* %intToPtrB773 to i64
  %sub775 = sub i64 %ptrToIntI774, 8
  %iintToPtrD776 = inttoptr i64 %sub775 to i32*
  br label %end_blockX666

cond_else_blockX746:                              ; preds = %cond_else_blockX701, %after_break744
  %eqtmp749 = icmp eq i32 %t667, 201
  br i1 %eqtmp749, label %cond_then_block745, label %cond_else_blockX748
  br label %cond_else_blockX750

cond_else_blockX748:                              ; preds = %cond_else_blockX746, %cond_else_blockX701
  %eqtmp751 = icmp eq i32 %t667, 202
  br i1 %eqtmp751, label %cond_then_block745, label %cond_else_blockX750

cond_else_blockX750:                              ; preds = %after_break777, %cond_else_blockX748, %cond_else_blockX746
  %eqtmp780 = icmp eq i32 %t667, 193
  br i1 %eqtmp780, label %cond_then_block778, label %cond_else_blockX779

after_break777:                                   ; No predecessors!
  br label %cond_else_blockX750
  br label %cond_else_blockX779

cond_then_block778:                               ; preds = %cond_else_blockX750
  %cval781 = load %CValue, %CValue* %cval, align 16
  %fieldPPP782 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO783 = bitcast %CValue* %cval to [1 x i32]*
  %ptr784 = load i32*, i32** %ptr, align 8
  %element_addressAB785 = load i32*, i32** %ptr, align 8
  %element_addressXYXZY786 = getelementptr inbounds i32, i32* %element_addressAB785, i32 0
  %load_element787 = load i32, i32* %element_addressXYXZY786, align 4
  %array_castA788 = bitcast [1 x i32]* %ICASTO783 to i32*
  %gepBX789 = getelementptr i32, i32* %array_castA788, i32 0
  store i32 %load_element787, i32* %gepBX789, align 4
  %cval790 = load %CValue, %CValue* %cval, align 16
  %fieldPPP791 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO792 = bitcast %CValue* %cval to [1 x i32]*
  %ptr793 = load i32*, i32** %ptr, align 8
  %element_addressAB794 = load i32*, i32** %ptr, align 8
  %element_addressXYXZY795 = getelementptr inbounds i32, i32* %element_addressAB794, i32 1
  %load_element796 = load i32, i32* %element_addressXYXZY795, align 4
  %array_castA797 = bitcast [1 x i32]* %ICASTO792 to i32*
  %gepBX798 = getelementptr i32, i32* %array_castA797, i32 1
  store i32 %load_element796, i32* %gepBX798, align 4
  %cval799 = load %CValue, %CValue* %cval, align 16
  %fieldPPP800 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO801 = bitcast %CValue* %cval to [1 x i32]*
  %ptr802 = load i32*, i32** %ptr, align 8
  %element_addressAB803 = load i32*, i32** %ptr, align 8
  %element_addressXYXZY804 = getelementptr inbounds i32, i32* %element_addressAB803, i32 2
  %load_element805 = load i32, i32* %element_addressXYXZY804, align 4
  %array_castA806 = bitcast [1 x i32]* %ICASTO801 to i32*
  %gepBX807 = getelementptr i32, i32* %array_castA806, i32 2
  store i32 %load_element805, i32* %gepBX807, align 4
  %cval808 = load %CValue, %CValue* %cval, align 16
  %fieldPPP809 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO810 = bitcast %CValue* %cval to [1 x i32]*
  %ptr811 = load i32*, i32** %ptr, align 8
  %element_addressAB812 = load i32*, i32** %ptr, align 8
  %element_addressXYXZY813 = getelementptr inbounds i32, i32* %element_addressAB812, i32 3
  %load_element814 = load i32, i32* %element_addressXYXZY813, align 4
  %array_castA815 = bitcast [1 x i32]* %ICASTO810 to i32*
  %gepBX816 = getelementptr i32, i32* %array_castA815, i32 3
  store i32 %load_element814, i32* %gepBX816, align 4
  %ptr817 = load i32*, i32** %ptr, align 8
  %ptrToIntC818 = ptrtoint i32* %ptr817 to i64
  %add819 = add i64 %ptrToIntC818, 16
  %intToPtrB820 = inttoptr i64 %add819 to i32*
  store i32* %intToPtrB820, i32** %ptr, align 8
  %ptrToIntI821 = ptrtoint i32* %intToPtrB820 to i64
  %sub822 = sub i64 %ptrToIntI821, 16
  %iintToPtrD823 = inttoptr i64 %sub822 to i32*
  br label %end_blockX666

cond_else_blockX779:                              ; preds = %after_break824, %cond_else_blockX750, %after_break777
  br label %cond_then_block825

after_break824:                                   ; No predecessors!
  br label %cond_else_blockX779
  br label %cond_else_blockX826

cond_then_block825:                               ; preds = %cond_else_blockX779
  br label %end_blockX666

cond_else_blockX826:                              ; preds = %after_break827, %after_break824
  br label %end_blockX666

after_break827:                                   ; No predecessors!
  br label %cond_else_blockX826

cond_jump_then830:                                ; preds = %end_blockX666
  br label %cond_end_block651

cond_end831:                                      ; preds = %after_break832, %end_blockX666
  %t833 = load i32, i32* %t, align 4
  store i32 2754, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.91, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find

after_break832:                                   ; No predecessors!
  br label %cond_end831

define_find:                                      ; preds = %cond_end831
  %inline_result_variable834 = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %t833, i32* %v, align 4
  %v835 = load i32, i32* %v, align 4
  %sub836 = sub i32 %v835, 256
  store i32 %sub836, i32* %v, align 4
  %add837 = add i32 %sub836, 256
  %v838 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub839 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v838, %sub839
  br i1 %gteq_unsinged, label %cond_jump_then840, label %cond_end841

define_find_end:                                  ; preds = %cond_end841, %cond_jump_then840
  %inline_result_variable847 = load %Sym*, %Sym** %inline_result_variable834, align 8
  store %Sym* %inline_result_variable847, %Sym** %s, align 8
  %s848 = load %Sym*, %Sym** %s, align 8
  %not_eq849 = icmp ne %Sym* %s848, null
  br i1 %not_eq849, label %cond_jump_then850, label %cond_else_block851

cond_jump_then840:                                ; preds = %define_find
  store %Sym* null, %Sym** %inline_result_variable834, align 8
  br label %define_find_end

cond_end841:                                      ; preds = %define_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v842 = load i32, i32* %v, align 4
  %element_addressAB843 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY844 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB843, i32 %v842
  %load_element845 = load %TokenSym*, %TokenSym** %element_addressXYXZY844, align 8
  %fieldLLL846 = getelementptr inbounds %TokenSym, %TokenSym* %load_element845, i32 0, i32 1
  %sym_define = load %Sym*, %Sym** %fieldLLL846, align 8
  store %Sym* %sym_define, %Sym** %inline_result_variable834, align 8
  br label %define_find_end

cond_jump_then850:                                ; preds = %define_find_end
  %nested_list853 = load %Sym**, %Sym*** %nested_list, align 8
  %derefference_valueB854 = load %Sym*, %Sym** %nested_list853, align 8
  %t855 = load i32, i32* %t, align 4
  %fun_result856 = call %Sym* @sym_find2(%Sym* %derefference_valueB854, i32 %t855)
  %icmpB857 = icmp ne %Sym* %fun_result856, null
  br i1 %icmpB857, label %cond_jump_then858, label %cond_end859

cond_else_block851:                               ; preds = %define_find_end
  br label %macro_subst.no_subst

cond_end852:                                      ; preds = %cond_end959, %cond_end902
  br label %loop_top_block649

cond_jump_then858:                                ; preds = %cond_jump_then850
  br label %macro_subst.no_subst
  br label %cond_end859

cond_end859:                                      ; preds = %cond_jump_then858, %cond_jump_then850
  %ml860 = load %macro_level, %macro_level* %ml, align 8
  %macro_ptr861 = load i32*, i32** @macro_ptr, align 8
  %fieldTTT = getelementptr inbounds %macro_level, %macro_level* %ml, i32 0, i32 1
  store i32* %macro_ptr861, i32** %fieldTTT, align 8
  %can_read_stream862 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %icmpB863 = icmp ne %macro_level** %can_read_stream862, null
  br i1 %icmpB863, label %cond_jump_then864, label %cond_end865

macro_subst.no_subst:                             ; preds = %cond_else_block851, %cond_jump_then901, %cond_jump_then858
  %t903 = load i32, i32* %t, align 4
  %spc904 = load i32, i32* %spc, align 4
  store i32 2773, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.92, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %check_space

cond_jump_then864:                                ; preds = %cond_end859
  %ml866 = load %macro_level, %macro_level* %ml, align 8
  %can_read_stream867 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %derefference_valueB868 = load %macro_level*, %macro_level** %can_read_stream867, align 8
  %fieldTTT869 = getelementptr inbounds %macro_level, %macro_level* %ml, i32 0, i32 0
  store %macro_level* %derefference_valueB868, %macro_level** %fieldTTT869, align 8
  %can_read_stream870 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %ml871 = load %macro_level, %macro_level* %ml, align 8
  store %macro_level* %ml, %macro_level** %can_read_stream870, align 8
  br label %cond_end865

cond_end865:                                      ; preds = %cond_jump_then864, %cond_end859
  %ptr872 = load i32*, i32** %ptr, align 8
  store i32* %ptr872, i32** @macro_ptr, align 8
  %t873 = load i32, i32* %t, align 4
  store i32 %t873, i32* @tok, align 4
  %tok_str874 = load %TokenString*, %TokenString** %tok_str, align 8
  %nested_list875 = load %Sym**, %Sym*** %nested_list, align 8
  %s876 = load %Sym*, %Sym** %s, align 8
  %can_read_stream877 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %fun_result878 = call i32 @macro_subst_tok(%TokenString* %tok_str874, %Sym** %nested_list875, %Sym* %s876, %macro_level** %can_read_stream877)
  store i32 %fun_result878, i32* %ret, align 4
  %macro_ptr879 = load i32*, i32** @macro_ptr, align 8
  store i32* %macro_ptr879, i32** %ptr, align 8
  %ml880 = load %macro_level, %macro_level* %ml, align 8
  %fieldVVV881 = getelementptr inbounds %macro_level, %macro_level* %ml, i32 0, i32 1
  %p882 = load i32*, i32** %fieldVVV881, align 8
  store i32* %p882, i32** @macro_ptr, align 8
  %can_read_stream884 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %icmpB885 = icmp ne %macro_level** %can_read_stream884, null
  store i1 %icmpB885, i1* %andand883, align 1
  br i1 %icmpB885, label %cond_jump_then886, label %cond_jump_end887

cond_jump_then886:                                ; preds = %cond_end865
  %can_read_stream888 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %derefference_valueB889 = load %macro_level*, %macro_level** %can_read_stream888, align 8
  %ml890 = load %macro_level, %macro_level* %ml, align 8
  %eq891 = icmp eq %macro_level* %derefference_valueB889, %ml
  %andand892 = and i1 %icmpB885, %eq891
  store i1 %andand892, i1* %andand883, align 1
  br label %cond_jump_end887

cond_jump_end887:                                 ; preds = %cond_jump_then886, %cond_end865
  %andand_result_value893 = load i1, i1* %andand883, align 1
  br i1 %andand_result_value893, label %cond_jump_then894, label %cond_end895

cond_jump_then894:                                ; preds = %cond_jump_end887
  %can_read_stream896 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %ml897 = load %macro_level, %macro_level* %ml, align 8
  %fieldVVV898 = getelementptr inbounds %macro_level, %macro_level* %ml, i32 0, i32 0
  %prev = load %macro_level*, %macro_level** %fieldVVV898, align 8
  store %macro_level* %prev, %macro_level** %can_read_stream896, align 8
  br label %cond_end895

cond_end895:                                      ; preds = %cond_jump_then894, %cond_jump_end887
  %ret899 = load i32, i32* %ret, align 4
  %not_eq900 = icmp ne i32 %ret899, 0
  br i1 %not_eq900, label %cond_jump_then901, label %cond_end902

cond_jump_then901:                                ; preds = %cond_end895
  br label %macro_subst.no_subst
  br label %cond_end902

cond_end902:                                      ; preds = %cond_jump_then901, %cond_end895
  br label %cond_end852

check_space:                                      ; preds = %macro_subst.no_subst
  %inline_result_variable905 = alloca i32, align 4
  %t906 = alloca i32, align 4
  store i32 %t903, i32* %t906, align 4
  %spc907 = alloca i32*, align 8
  store i32* %spc, i32** %spc907, align 8
  %t908 = load i32, i32* %t906, align 4
  store i32 2773, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.93, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

check_space_end:                                  ; preds = %cond_end946, %cond_jump_then950
  %inline_result_variable954 = load i32, i32* %inline_result_variable905, align 4
  %logical_denial955 = icmp eq i32 %inline_result_variable954, 0
  %castOOOO956 = zext i1 %logical_denial955 to i32
  %icmpA957 = icmp ne i32 %castOOOO956, 0
  br i1 %icmpA957, label %cond_jump_then958, label %cond_end959

is_space:                                         ; preds = %check_space
  %inline_result_variable909 = alloca i32, align 4
  %ch910 = alloca i32, align 4
  store i32 %t908, i32* %ch910, align 4
  %ch915 = load i32, i32* %ch910, align 4
  %eq916 = icmp eq i32 %ch915, 32
  store i1 %eq916, i1* %oror914, align 1
  br i1 %eq916, label %cond_jump_end918, label %cond_jump_then917

is_space_end:                                     ; preds = %cond_jump_end936
  %inline_result_variable942 = load i32, i32* %inline_result_variable909, align 4
  %icmpA943 = icmp ne i32 %inline_result_variable942, 0
  br i1 %icmpA943, label %cond_jump_then944, label %cond_else_block945

cond_jump_then917:                                ; preds = %is_space
  %ch919 = load i32, i32* %ch910, align 4
  %eq920 = icmp eq i32 %ch919, 9
  %oror921 = or i1 %eq916, %eq920
  store i1 %oror921, i1* %oror914, align 1
  br label %cond_jump_end918

cond_jump_end918:                                 ; preds = %cond_jump_then917, %is_space
  %oror_result_value922 = load i1, i1* %oror914, align 1
  store i1 %oror_result_value922, i1* %oror913, align 1
  br i1 %oror_result_value922, label %cond_jump_end924, label %cond_jump_then923

cond_jump_then923:                                ; preds = %cond_jump_end918
  %ch925 = load i32, i32* %ch910, align 4
  %eq926 = icmp eq i32 %ch925, 11
  %oror927 = or i1 %oror_result_value922, %eq926
  store i1 %oror927, i1* %oror913, align 1
  br label %cond_jump_end924

cond_jump_end924:                                 ; preds = %cond_jump_then923, %cond_jump_end918
  %oror_result_value928 = load i1, i1* %oror913, align 1
  store i1 %oror_result_value928, i1* %oror912, align 1
  br i1 %oror_result_value928, label %cond_jump_end930, label %cond_jump_then929

cond_jump_then929:                                ; preds = %cond_jump_end924
  %ch931 = load i32, i32* %ch910, align 4
  %eq932 = icmp eq i32 %ch931, 12
  %oror933 = or i1 %oror_result_value928, %eq932
  store i1 %oror933, i1* %oror912, align 1
  br label %cond_jump_end930

cond_jump_end930:                                 ; preds = %cond_jump_then929, %cond_jump_end924
  %oror_result_value934 = load i1, i1* %oror912, align 1
  store i1 %oror_result_value934, i1* %oror911, align 1
  br i1 %oror_result_value934, label %cond_jump_end936, label %cond_jump_then935

cond_jump_then935:                                ; preds = %cond_jump_end930
  %ch937 = load i32, i32* %ch910, align 4
  %eq938 = icmp eq i32 %ch937, 13
  %oror939 = or i1 %oror_result_value934, %eq938
  store i1 %oror939, i1* %oror911, align 1
  br label %cond_jump_end936

cond_jump_end936:                                 ; preds = %cond_jump_then935, %cond_jump_end930
  %oror_result_value940 = load i1, i1* %oror911, align 1
  %icastKX941 = zext i1 %oror_result_value940 to i32
  store i32 %icastKX941, i32* %inline_result_variable909, align 4
  br label %is_space_end

cond_jump_then944:                                ; preds = %is_space_end
  %spc947 = load i32*, i32** %spc907, align 8
  %derefference_valueB948 = load i32, i32* %spc947, align 4
  %icmpA949 = icmp ne i32 %derefference_valueB948, 0
  br i1 %icmpA949, label %cond_jump_then950, label %cond_end951

cond_else_block945:                               ; preds = %is_space_end
  %spc953 = load i32*, i32** %spc907, align 8
  store i32 0, i32* %spc953, align 4
  br label %cond_end946

cond_end946:                                      ; preds = %cond_else_block945, %cond_end951
  store i32 0, i32* %inline_result_variable905, align 4
  br label %check_space_end

cond_jump_then950:                                ; preds = %cond_jump_then944
  store i32 1, i32* %inline_result_variable905, align 4
  br label %check_space_end

cond_end951:                                      ; preds = %cond_jump_then944
  %spc952 = load i32*, i32** %spc907, align 8
  store i32 1, i32* %spc952, align 4
  br label %cond_end946

cond_jump_then958:                                ; preds = %check_space_end
  %tok_str960 = load %TokenString*, %TokenString** %tok_str, align 8
  %t961 = load i32, i32* %t, align 4
  %cval962 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %tok_str960, i32 %t961, %CValue* %cval)
  br label %cond_end959

cond_end959:                                      ; preds = %cond_jump_then958, %check_space_end
  br label %cond_end852

cond_jump_then965:                                ; preds = %cond_end_block651
  %macro_str1967 = load i32*, i32** %macro_str1, align 8
  call void @tok_str_free(i32* %macro_str1967)
  br label %cond_end966

cond_end966:                                      ; preds = %cond_jump_then965, %cond_end_block651
  ret void
}

define internal %TokenSym* @tok_alloc_new(%TokenSym** %0, i8* %1, i32 %2) {
entry:
  %i = alloca i32, align 4
  %ptable = alloca %TokenSym**, align 8
  %ts = alloca %TokenSym*, align 8
  %pts = alloca %TokenSym**, align 8
  %pts1 = alloca %TokenSym***, align 8
  store %TokenSym** %0, %TokenSym*** %pts, align 8
  store %TokenSym*** %pts, %TokenSym**** %pts1, align 8
  %str = alloca i8*, align 8
  %str2 = alloca i8**, align 8
  store i8* %1, i8** %str, align 8
  store i8** %str, i8*** %str2, align 8
  %len = alloca i32, align 4
  %len3 = alloca i32*, align 8
  store i32 %2, i32* %len, align 4
  store i32* %len, i32** %len3, align 8
  %tok_ident = load i32, i32* @tok_ident, align 4
  %gteq_signed = icmp sge i32 %tok_ident, 268435456
  br i1 %gteq_signed, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @27 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %tok_ident4 = load i32, i32* @tok_ident, align 4
  %sub = sub i32 %tok_ident4, 256
  store i32 %sub, i32* %i, align 4
  %i5 = load i32, i32* %i, align 4
  %srem = srem i32 %i5, 512
  %eq = icmp eq i32 %srem, 0
  br i1 %eq, label %cond_jump_then6, label %cond_end7

cond_jump_then6:                                  ; preds = %cond_end
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %castAQ = bitcast %TokenSym** %table_ident to i8*
  %i8 = load i32, i32* %i, align 4
  %add = add i32 %i8, 512
  %icastD = sext i32 %add to i64
  %mul = mul i64 %icastD, 8
  %fun_result = call i8* @tcc_realloc(i8* %castAQ, i64 %mul)
  %castAQ9 = bitcast i8* %fun_result to %TokenSym**
  store %TokenSym** %castAQ9, %TokenSym*** %ptable, align 8
  %ptable10 = load %TokenSym**, %TokenSym*** %ptable, align 8
  %logical_denial = icmp eq %TokenSym** %ptable10, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then11, label %cond_end12

cond_end7:                                        ; preds = %cond_end12, %cond_end
  %len14 = load i32, i32* %len, align 4
  %icastD15 = sext i32 %len14 to i64
  %add16 = add i64 56, %icastD15
  %fun_result17 = call i8* @tcc_malloc(i64 %add16)
  %castAQ18 = bitcast i8* %fun_result17 to %TokenSym*
  store %TokenSym* %castAQ18, %TokenSym** %ts, align 8
  %table_ident19 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %i20 = load i32, i32* %i, align 4
  %ts21 = load %TokenSym*, %TokenSym** %ts, align 8
  %element_addressXYXY = getelementptr %TokenSym*, %TokenSym** %table_ident19, i32 %i20
  store %TokenSym* %ts21, %TokenSym** %element_addressXYXY, align 8
  %ts22 = load %TokenSym*, %TokenSym** %ts, align 8
  %tok_ident23 = load i32, i32* @tok_ident, align 4
  %add24 = add i32 %tok_ident23, 1
  store i32 %add24, i32* @tok_ident, align 4
  %tok_ident25 = load i32, i32* @tok_ident, align 4
  %sub26 = sub i32 %tok_ident25, 1
  %fieldTU = getelementptr inbounds %TokenSym, %TokenSym* %ts22, i32 0, i32 5
  store i32 %sub26, i32* %fieldTU, align 4
  %ts27 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldTU28 = getelementptr inbounds %TokenSym, %TokenSym* %ts27, i32 0, i32 1
  store %Sym* null, %Sym** %fieldTU28, align 8
  %ts29 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldTU30 = getelementptr inbounds %TokenSym, %TokenSym* %ts29, i32 0, i32 2
  store %Sym* null, %Sym** %fieldTU30, align 8
  %ts31 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldTU32 = getelementptr inbounds %TokenSym, %TokenSym* %ts31, i32 0, i32 3
  store %Sym* null, %Sym** %fieldTU32, align 8
  %ts33 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldTU34 = getelementptr inbounds %TokenSym, %TokenSym* %ts33, i32 0, i32 4
  store %Sym* null, %Sym** %fieldTU34, align 8
  %ts35 = load %TokenSym*, %TokenSym** %ts, align 8
  %len36 = load i32, i32* %len, align 4
  %fieldTU37 = getelementptr inbounds %TokenSym, %TokenSym* %ts35, i32 0, i32 6
  store i32 %len36, i32* %fieldTU37, align 4
  %ts38 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldTU39 = getelementptr inbounds %TokenSym, %TokenSym* %ts38, i32 0, i32 0
  store %TokenSym* null, %TokenSym** %fieldTU39, align 8
  %ts40 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldRRRROOU = getelementptr inbounds %TokenSym, %TokenSym* %ts40, i32 0, i32 7
  %castBA = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %str41 = load i8*, i8** %str, align 8
  %len42 = load i32, i32* %len, align 4
  %icastD43 = sext i32 %len42 to i64
  %fun_result44 = call i8* @memcpy(i8* %castBA, i8* %str41, i64 %icastD43)
  %ts45 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldRRRROOU46 = getelementptr inbounds %TokenSym, %TokenSym* %ts45, i32 0, i32 7
  %len47 = load i32, i32* %len, align 4
  %array_castA = bitcast [1 x i8]* %fieldRRRROOU46 to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 %len47
  store i8 0, i8* %gepBX, align 1
  %pts48 = load %TokenSym**, %TokenSym*** %pts, align 8
  %ts49 = load %TokenSym*, %TokenSym** %ts, align 8
  store %TokenSym* %ts49, %TokenSym** %pts48, align 8
  %ts50 = load %TokenSym*, %TokenSym** %ts, align 8
  ret %TokenSym* %ts50

cond_jump_then11:                                 ; preds = %cond_jump_then6
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @28 to i8*))
  br label %cond_end12

cond_end12:                                       ; preds = %cond_jump_then11, %cond_jump_then6
  %ptable13 = load %TokenSym**, %TokenSym*** %ptable, align 8
  store %TokenSym** %ptable13, %TokenSym*** @table_ident, align 8
  br label %cond_end7
}

define internal %TokenSym* @tok_alloc(i8* %0, i32 %1) {
entry:
  %andand = alloca i1, align 1
  %h = alloca i32, align 4
  %i = alloca i32, align 4
  %pts = alloca %TokenSym**, align 8
  %ts = alloca %TokenSym*, align 8
  %str = alloca i8*, align 8
  %str1 = alloca i8**, align 8
  store i8* %0, i8** %str, align 8
  store i8** %str, i8*** %str1, align 8
  %len = alloca i32, align 4
  %len2 = alloca i32*, align 8
  store i32 %1, i32* %len, align 4
  store i32* %len, i32** %len2, align 8
  store i32 1, i32* %h, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i8 = load i32, i32* %i, align 4
  %add9 = add i32 %i8, 1
  store i32 %add9, i32* %i, align 4
  %i10 = load i32, i32* %i, align 4
  %sub = sub i32 %i10, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i3 = load i32, i32* %i, align 4
  %len4 = load i32, i32* %len, align 4
  %le = icmp slt i32 %i3, %len4
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %h5 = load i32, i32* %h, align 4
  %mul = mul i32 %h5, 263
  %str6 = load i8*, i8** %str, align 8
  %i7 = load i32, i32* %i, align 4
  %element_addressAB = load i8*, i8** %str, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 %i7
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  %add = add i32 %mul, %icastKY
  store i32 %add, i32* %h, align 4
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %h11 = load i32, i32* %h, align 4
  %andtmp = and i32 %h11, 8191
  store i32 %andtmp, i32* %h, align 4
  %h12 = load i32, i32* %h, align 4
  %gepOL = getelementptr [8192 x %TokenSym*], [8192 x %TokenSym*]* @hash_ident, i32 0, i32 %h12
  store %TokenSym** %gepOL, %TokenSym*** %pts, align 8
  br label %loop_top_block14

loop_continue_top_block13:                        ; preds = %cond_end31
  br label %loop_top_block14

loop_top_block14:                                 ; preds = %loop_continue_top_block13, %cond_end_block
  br i1 true, label %cond_then_block15, label %cond_end_block16

cond_then_block15:                                ; preds = %loop_top_block14
  %pts17 = load %TokenSym**, %TokenSym*** %pts, align 8
  %derefference_valueB = load %TokenSym*, %TokenSym** %pts17, align 8
  store %TokenSym* %derefference_valueB, %TokenSym** %ts, align 8
  %ts18 = load %TokenSym*, %TokenSym** %ts, align 8
  %logical_denial = icmp eq %TokenSym* %ts18, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_end_block16:                                 ; preds = %cond_jump_then, %loop_top_block14
  %pts35 = load %TokenSym**, %TokenSym*** %pts, align 8
  %str36 = load i8*, i8** %str, align 8
  %len37 = load i32, i32* %len, align 4
  %fun_result38 = call %TokenSym* @tok_alloc_new(%TokenSym** %pts35, i8* %str36, i32 %len37)
  ret %TokenSym* %fun_result38

cond_jump_then:                                   ; preds = %cond_then_block15
  br label %cond_end_block16

cond_end:                                         ; preds = %after_break, %cond_then_block15
  %ts19 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %ts19, i32 0, i32 6
  %len20 = load i32, i32* %fieldLLL, align 4
  %len21 = load i32, i32* %len, align 4
  %eq = icmp eq i32 %len20, %len21
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then22, label %cond_jump_end

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then22:                                 ; preds = %cond_end
  %ts23 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldRRRROOU = getelementptr inbounds %TokenSym, %TokenSym* %ts23, i32 0, i32 7
  %castBA = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %str24 = load i8*, i8** %str, align 8
  %len25 = load i32, i32* %len, align 4
  %icastD = sext i32 %len25 to i64
  %fun_result = call i32 @memcmp(i8* %castBA, i8* %str24, i64 %icastD)
  %logical_denial26 = icmp eq i32 %fun_result, 0
  %castOOOO27 = zext i1 %logical_denial26 to i32
  %icmpA28 = icmp ne i32 %castOOOO27, 0
  %andand29 = and i1 %eq, %icmpA28
  store i1 %andand29, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then22, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then30, label %cond_end31

cond_jump_then30:                                 ; preds = %cond_jump_end
  %ts32 = load %TokenSym*, %TokenSym** %ts, align 8
  ret %TokenSym* %ts32

cond_end31:                                       ; preds = %cond_jump_end
  %ts33 = load %TokenSym*, %TokenSym** %ts, align 8
  %fieldLLL34 = getelementptr inbounds %TokenSym, %TokenSym* %ts33, i32 0, i32 0
  %hash_next = load %TokenSym*, %TokenSym** %fieldLLL34, align 8
  store %TokenSym** %fieldLLL34, %TokenSym*** %pts, align 8
  br label %loop_continue_top_block13
}

define internal i32 @tcc_peekc_slow(%BufferedFile* %0) {
entry:
  %len = alloca i32, align 4
  %bf = alloca %BufferedFile*, align 8
  %bf1 = alloca %BufferedFile**, align 8
  store %BufferedFile* %0, %BufferedFile** %bf, align 8
  store %BufferedFile** %bf, %BufferedFile*** %bf1, align 8
  %bf2 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %bf2, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  %bf3 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL4 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf3, i32 0, i32 1
  %buf_end = load i8*, i8** %fieldLLL4, align 8
  %gteq_unsinged = icmp uge i8* %buf_ptr, %buf_end
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %bf5 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL6 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf5, i32 0, i32 2
  %fd = load i32, i32* %fieldLLL6, align 4
  %not_eq = icmp ne i32 %fd, -1
  br i1 %not_eq, label %cond_jump_then7, label %cond_else_block

cond_end:                                         ; preds = %cond_end8, %entry
  %bf32 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL33 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf32, i32 0, i32 0
  %buf_ptr34 = load i8*, i8** %fieldLLL33, align 8
  %bf35 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL36 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf35, i32 0, i32 1
  %buf_end37 = load i8*, i8** %fieldLLL36, align 8
  %le38 = icmp ult i8* %buf_ptr34, %buf_end37
  br i1 %le38, label %cond_jump_then39, label %cond_else_block40

cond_jump_then7:                                  ; preds = %cond_jump_then
  store i32 8192, i32* %len, align 4
  %bf9 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL10 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf9, i32 0, i32 2
  %fd11 = load i32, i32* %fieldLLL10, align 4
  %bf12 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf12, i32 0, i32 10
  %castBA = bitcast [8193 x i8]* %fieldRRRROOU to i8*
  %len13 = load i32, i32* %len, align 4
  %icastD = sext i32 %len13 to i64
  %fun_result = call i64 @read(i32 %fd11, i8* %castBA, i64 %icastD)
  %icastM = trunc i64 %fun_result to i32
  store i32 %icastM, i32* %len, align 4
  %len14 = load i32, i32* %len, align 4
  %le = icmp slt i32 %len14, 0
  br i1 %le, label %cond_jump_then15, label %cond_end16

cond_else_block:                                  ; preds = %cond_jump_then
  store i32 0, i32* %len, align 4
  br label %cond_end8

cond_end8:                                        ; preds = %cond_else_block, %cond_end16
  %total_bytes = load i32, i32* @total_bytes, align 4
  %len17 = load i32, i32* %len, align 4
  %add = add i32 %total_bytes, %len17
  store i32 %add, i32* @total_bytes, align 4
  %len18 = load i32, i32* %len, align 4
  %sub = sub i32 %add, %len18
  %bf19 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf20 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU21 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf20, i32 0, i32 10
  %autocast = bitcast [8193 x i8]* %fieldRRRROOU21 to i8*
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %bf19, i32 0, i32 0
  store i8* %autocast, i8** %fieldTU, align 8
  %bf22 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf23 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldRRRROOU24 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf23, i32 0, i32 10
  %len25 = load i32, i32* %len, align 4
  %autocast26 = bitcast [8193 x i8]* %fieldRRRROOU24 to i8*
  %ptrToIntC = ptrtoint i8* %autocast26 to i64
  %sext = sext i32 %len25 to i64
  %mul = mul i64 %sext, 1
  %add27 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add27 to i8*
  %fieldTU28 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf22, i32 0, i32 1
  store i8* %intToPtrB, i8** %fieldTU28, align 8
  %bf29 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL30 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf29, i32 0, i32 1
  %buf_end31 = load i8*, i8** %fieldLLL30, align 8
  store i8 92, i8* %buf_end31, align 1
  br label %cond_end

cond_jump_then15:                                 ; preds = %cond_jump_then7
  store i32 0, i32* %len, align 4
  br label %cond_end16

cond_end16:                                       ; preds = %cond_jump_then15, %cond_jump_then7
  br label %cond_end8

cond_jump_then39:                                 ; preds = %cond_end
  %bf42 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL43 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf42, i32 0, i32 0
  %buf_ptr44 = load i8*, i8** %fieldLLL43, align 8
  %element_addressAB = load i8*, i8** %fieldLLL43, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  ret i32 %icastKY

cond_else_block40:                                ; preds = %cond_end
  %bf45 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %bf46 = load %BufferedFile*, %BufferedFile** %bf, align 8
  %fieldLLL47 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf46, i32 0, i32 1
  %buf_end48 = load i8*, i8** %fieldLLL47, align 8
  %fieldTU49 = getelementptr inbounds %BufferedFile, %BufferedFile* %bf45, i32 0, i32 0
  store i8* %buf_end48, i8** %fieldTU49, align 8
  ret i32 -1

cond_end41:                                       ; No predecessors!
  ret i32 0
}

define internal i32 @handle_eob() {
entry:
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fun_result = call i32 @tcc_peekc_slow(%BufferedFile* %file)
  ret i32 %fun_result
}

define internal i32 @handle_stray_noerror() {
entry:
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end7, %entry
  %ch = load i32, i32* @ch, align 4
  %eq = icmp eq i32 %ch, 92
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  store i32 260, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.23, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 0

inp:                                              ; preds = %cond_then_block
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %file1 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file1, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  %ptrToIntC = ptrtoint i8* %buf_ptr to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  store i8* %intToPtrB, i8** %fieldTU, align 8
  %derefference_valueB = load i8, i8* %intToPtrB, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* @ch, align 4
  %ch2 = load i32, i32* @ch, align 4
  %eq3 = icmp eq i32 %ch2, 92
  br i1 %eq3, label %cond_jump_then, label %cond_end

inp_end:                                          ; preds = %cond_end
  %ch4 = load i32, i32* @ch, align 4
  %eq5 = icmp eq i32 %ch4, 10
  br i1 %eq5, label %cond_jump_then6, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %inp
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* @ch, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %inp
  br label %inp_end

cond_jump_then6:                                  ; preds = %inp_end
  %file8 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file9 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL10 = getelementptr inbounds %BufferedFile, %BufferedFile* %file9, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL10, align 4
  %add11 = add i32 %line_num, 1
  %fieldTU12 = getelementptr inbounds %BufferedFile, %BufferedFile* %file8, i32 0, i32 3
  store i32 %add11, i32* %fieldTU12, align 4
  %file13 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL14 = getelementptr inbounds %BufferedFile, %BufferedFile* %file13, i32 0, i32 3
  %line_num15 = load i32, i32* %fieldLLL14, align 4
  %sub = sub i32 %line_num15, 1
  store i32 263, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.24, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp16

cond_jump_elif0:                                  ; preds = %inp_end
  %ch33 = load i32, i32* @ch, align 4
  %eq34 = icmp eq i32 %ch33, 13
  br i1 %eq34, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  store i32 265, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.25, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp35

cond_else_block:                                  ; preds = %cond_jump_elif0
  br label %handle_stray_noerror.fail

cond_end7:                                        ; preds = %inp_end66, %inp_end17
  br label %loop_top_block

inp16:                                            ; preds = %cond_jump_then6
  %file18 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file19 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL20 = getelementptr inbounds %BufferedFile, %BufferedFile* %file19, i32 0, i32 0
  %buf_ptr21 = load i8*, i8** %fieldLLL20, align 8
  %ptrToIntC22 = ptrtoint i8* %buf_ptr21 to i64
  %add23 = add i64 %ptrToIntC22, 1
  %intToPtrB24 = inttoptr i64 %add23 to i8*
  %fieldTU25 = getelementptr inbounds %BufferedFile, %BufferedFile* %file18, i32 0, i32 0
  store i8* %intToPtrB24, i8** %fieldTU25, align 8
  %derefference_valueB26 = load i8, i8* %intToPtrB24, align 1
  %icastKY27 = zext i8 %derefference_valueB26 to i32
  store i32 %icastKY27, i32* @ch, align 4
  %ch28 = load i32, i32* @ch, align 4
  %eq29 = icmp eq i32 %ch28, 92
  br i1 %eq29, label %cond_jump_then30, label %cond_end31

inp_end17:                                        ; preds = %cond_end31
  br label %cond_end7

cond_jump_then30:                                 ; preds = %inp16
  %fun_result32 = call i32 @handle_eob()
  store i32 %fun_result32, i32* @ch, align 4
  br label %cond_end31

cond_end31:                                       ; preds = %cond_jump_then30, %inp16
  br label %inp_end17

inp35:                                            ; preds = %cond_jump_elif_then0
  %file37 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file38 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL39 = getelementptr inbounds %BufferedFile, %BufferedFile* %file38, i32 0, i32 0
  %buf_ptr40 = load i8*, i8** %fieldLLL39, align 8
  %ptrToIntC41 = ptrtoint i8* %buf_ptr40 to i64
  %add42 = add i64 %ptrToIntC41, 1
  %intToPtrB43 = inttoptr i64 %add42 to i8*
  %fieldTU44 = getelementptr inbounds %BufferedFile, %BufferedFile* %file37, i32 0, i32 0
  store i8* %intToPtrB43, i8** %fieldTU44, align 8
  %derefference_valueB45 = load i8, i8* %intToPtrB43, align 1
  %icastKY46 = zext i8 %derefference_valueB45 to i32
  store i32 %icastKY46, i32* @ch, align 4
  %ch47 = load i32, i32* @ch, align 4
  %eq48 = icmp eq i32 %ch47, 92
  br i1 %eq48, label %cond_jump_then49, label %cond_end50

inp_end36:                                        ; preds = %cond_end50
  %ch52 = load i32, i32* @ch, align 4
  %not_eq = icmp ne i32 %ch52, 10
  br i1 %not_eq, label %cond_jump_then53, label %cond_end54

cond_jump_then49:                                 ; preds = %inp35
  %fun_result51 = call i32 @handle_eob()
  store i32 %fun_result51, i32* @ch, align 4
  br label %cond_end50

cond_end50:                                       ; preds = %cond_jump_then49, %inp35
  br label %inp_end36

cond_jump_then53:                                 ; preds = %inp_end36
  br label %handle_stray_noerror.fail
  br label %cond_end54

cond_end54:                                       ; preds = %cond_jump_then53, %inp_end36
  %file55 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file56 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL57 = getelementptr inbounds %BufferedFile, %BufferedFile* %file56, i32 0, i32 3
  %line_num58 = load i32, i32* %fieldLLL57, align 4
  %add59 = add i32 %line_num58, 1
  %fieldTU60 = getelementptr inbounds %BufferedFile, %BufferedFile* %file55, i32 0, i32 3
  store i32 %add59, i32* %fieldTU60, align 4
  %file61 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL62 = getelementptr inbounds %BufferedFile, %BufferedFile* %file61, i32 0, i32 3
  %line_num63 = load i32, i32* %fieldLLL62, align 4
  %sub64 = sub i32 %line_num63, 1
  store i32 269, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.26, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp65

handle_stray_noerror.fail:                        ; preds = %cond_else_block, %cond_jump_then53
  ret i32 1

inp65:                                            ; preds = %cond_end54
  %file67 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file68 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL69 = getelementptr inbounds %BufferedFile, %BufferedFile* %file68, i32 0, i32 0
  %buf_ptr70 = load i8*, i8** %fieldLLL69, align 8
  %ptrToIntC71 = ptrtoint i8* %buf_ptr70 to i64
  %add72 = add i64 %ptrToIntC71, 1
  %intToPtrB73 = inttoptr i64 %add72 to i8*
  %fieldTU74 = getelementptr inbounds %BufferedFile, %BufferedFile* %file67, i32 0, i32 0
  store i8* %intToPtrB73, i8** %fieldTU74, align 8
  %derefference_valueB75 = load i8, i8* %intToPtrB73, align 1
  %icastKY76 = zext i8 %derefference_valueB75 to i32
  store i32 %icastKY76, i32* @ch, align 4
  %ch77 = load i32, i32* @ch, align 4
  %eq78 = icmp eq i32 %ch77, 92
  br i1 %eq78, label %cond_jump_then79, label %cond_end80

inp_end66:                                        ; preds = %cond_end80
  br label %cond_end7

cond_jump_then79:                                 ; preds = %inp65
  %fun_result81 = call i32 @handle_eob()
  store i32 %fun_result81, i32* @ch, align 4
  br label %cond_end80

cond_end80:                                       ; preds = %cond_jump_then79, %inp65
  br label %inp_end66
}

define internal void @handle_stray() {
entry:
  %fun_result = call i32 @handle_stray_noerror()
  %icmpA = icmp ne i32 %fun_result, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void (i8*, ...) @error(i8* bitcast ([21 x i8]* @35 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  ret void
}

define internal i32 @handle_stray1(i8* %0) {
entry:
  %c = alloca i32, align 4
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  %p2 = load i8*, i8** %p, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 1
  %buf_end = load i8*, i8** %fieldLLL, align 8
  %gteq_unsinged = icmp uge i8* %p2, %buf_end
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %file3 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p4 = load i8*, i8** %p, align 8
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file3, i32 0, i32 0
  store i8* %p4, i8** %fieldTU, align 8
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* %c, align 4
  %file5 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL6 = getelementptr inbounds %BufferedFile, %BufferedFile* %file5, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL6, align 8
  store i8* %buf_ptr, i8** %p, align 8
  %c7 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c7, 92
  br i1 %eq, label %cond_jump_then8, label %cond_end9

cond_else_block:                                  ; preds = %entry
  br label %handle_stray1.parse_stray

cond_end:                                         ; preds = %handle_stray1.parse_stray, %cond_end9
  %c20 = load i32, i32* %c, align 4
  ret i32 %c20

cond_jump_then8:                                  ; preds = %cond_jump_then
  br label %handle_stray1.parse_stray
  br label %cond_end9

cond_end9:                                        ; preds = %cond_jump_then8, %cond_jump_then
  br label %cond_end

handle_stray1.parse_stray:                        ; preds = %cond_else_block, %cond_jump_then8
  %file10 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p11 = load i8*, i8** %p, align 8
  %fieldTU12 = getelementptr inbounds %BufferedFile, %BufferedFile* %file10, i32 0, i32 0
  store i8* %p11, i8** %fieldTU12, align 8
  %p13 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p13, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* @ch, align 4
  call void @handle_stray()
  %file14 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL15 = getelementptr inbounds %BufferedFile, %BufferedFile* %file14, i32 0, i32 0
  %buf_ptr16 = load i8*, i8** %fieldLLL15, align 8
  store i8* %buf_ptr16, i8** %p, align 8
  %p17 = load i8*, i8** %p, align 8
  %derefference_valueB18 = load i8, i8* %p17, align 1
  %icastKY19 = zext i8 %derefference_valueB18 to i32
  store i32 %icastKY19, i32* %c, align 4
  br label %cond_end
}

define internal void @minp() {
entry:
  store i32 335, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.27, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp

inp:                                              ; preds = %entry
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %file1 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file1, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  %ptrToIntC = ptrtoint i8* %buf_ptr to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  store i8* %intToPtrB, i8** %fieldTU, align 8
  %derefference_valueB = load i8, i8* %intToPtrB, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* @ch, align 4
  %ch = load i32, i32* @ch, align 4
  %eq = icmp eq i32 %ch, 92
  br i1 %eq, label %cond_jump_then, label %cond_end

inp_end:                                          ; preds = %cond_end
  %ch2 = load i32, i32* @ch, align 4
  %eq3 = icmp eq i32 %ch2, 92
  br i1 %eq3, label %cond_jump_then4, label %cond_end5

cond_jump_then:                                   ; preds = %inp
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* @ch, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %inp
  br label %inp_end

cond_jump_then4:                                  ; preds = %inp_end
  call void @handle_stray()
  br label %cond_end5

cond_end5:                                        ; preds = %cond_jump_then4, %inp_end
  ret void
}

define internal i8* @parse_line_comment(i8* %0) {
entry:
  %oror = alloca i1, align 1
  %c = alloca i32, align 4
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  %p2 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p2 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p3 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p3 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p4 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p4, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* %c, align 4
  br label %parse_line_comment.redo

cond_end_block:                                   ; preds = %cond_jump_then9, %loop_top_block
  %p146 = load i8*, i8** %p, align 8
  ret i8* %p146

parse_line_comment.redo:                          ; preds = %cond_else_block17, %cond_then_block
  %c5 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c5, 10
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %parse_line_comment.redo
  %c6 = load i32, i32* %c, align 4
  %eq7 = icmp eq i32 %c6, -1
  %oror8 = or i1 %eq, %eq7
  store i1 %oror8, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %parse_line_comment.redo
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then9, label %cond_jump_elif0

cond_jump_then9:                                  ; preds = %cond_jump_end
  br label %cond_end_block

cond_jump_elif0:                                  ; preds = %cond_jump_end
  %c10 = load i32, i32* %c, align 4
  %eq11 = icmp eq i32 %c10, 92
  br i1 %eq11, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %p12 = load i8*, i8** %p, align 8
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  store i8* %p12, i8** %fieldTU, align 8
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* %c, align 4
  %file13 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file13, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  store i8* %buf_ptr, i8** %p, align 8
  %c14 = load i32, i32* %c, align 4
  %eq15 = icmp eq i32 %c14, 92
  br i1 %eq15, label %cond_jump_then16, label %cond_else_block17

cond_else_block:                                  ; preds = %cond_jump_elif0
  %p138 = load i8*, i8** %p, align 8
  %ptrToIntC139 = ptrtoint i8* %p138 to i64
  %add140 = add i64 %ptrToIntC139, 1
  %intToPtrB141 = inttoptr i64 %add140 to i8*
  store i8* %intToPtrB141, i8** %p, align 8
  %p142 = load i8*, i8** %p, align 8
  %ptrToIntI143 = ptrtoint i8* %p142 to i64
  %sub144 = sub i64 %ptrToIntI143, 1
  %iintToPtrD145 = inttoptr i64 %sub144 to i8*
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end18, %after_break
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then16:                                 ; preds = %cond_jump_elif_then0
  %p19 = load i8*, i8** %p, align 8
  %ptrToIntC20 = ptrtoint i8* %p19 to i64
  %add21 = add i64 %ptrToIntC20, 1
  %intToPtrB22 = inttoptr i64 %add21 to i8*
  store i8* %intToPtrB22, i8** %p, align 8
  %p23 = load i8*, i8** %p, align 8
  %ptrToIntI24 = ptrtoint i8* %p23 to i64
  %sub25 = sub i64 %ptrToIntI24, 1
  %iintToPtrD26 = inttoptr i64 %sub25 to i8*
  %p27 = load i8*, i8** %p, align 8
  %derefference_valueB28 = load i8, i8* %p27, align 1
  %icastKY29 = zext i8 %derefference_valueB28 to i32
  store i32 %icastKY29, i32* %c, align 4
  %c30 = load i32, i32* %c, align 4
  %eq31 = icmp eq i32 %c30, 92
  br i1 %eq31, label %cond_jump_then32, label %cond_end33

cond_else_block17:                                ; preds = %cond_jump_elif_then0
  br label %parse_line_comment.redo
  br label %cond_end18

cond_end18:                                       ; preds = %cond_else_block17, %cond_end46
  br label %cond_end

cond_jump_then32:                                 ; preds = %cond_jump_then16
  %file34 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p35 = load i8*, i8** %p, align 8
  %fieldTU36 = getelementptr inbounds %BufferedFile, %BufferedFile* %file34, i32 0, i32 0
  store i8* %p35, i8** %fieldTU36, align 8
  %fun_result37 = call i32 @handle_eob()
  store i32 %fun_result37, i32* %c, align 4
  %file38 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL39 = getelementptr inbounds %BufferedFile, %BufferedFile* %file38, i32 0, i32 0
  %buf_ptr40 = load i8*, i8** %fieldLLL39, align 8
  store i8* %buf_ptr40, i8** %p, align 8
  br label %cond_end33

cond_end33:                                       ; preds = %cond_jump_then32, %cond_jump_then16
  %c41 = load i32, i32* %c, align 4
  %eq42 = icmp eq i32 %c41, 10
  br i1 %eq42, label %cond_jump_then43, label %cond_jump_elif044

cond_jump_then43:                                 ; preds = %cond_end33
  %file47 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file48 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL49 = getelementptr inbounds %BufferedFile, %BufferedFile* %file48, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL49, align 4
  %add50 = add i32 %line_num, 1
  %fieldTU51 = getelementptr inbounds %BufferedFile, %BufferedFile* %file47, i32 0, i32 3
  store i32 %add50, i32* %fieldTU51, align 4
  %file52 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL53 = getelementptr inbounds %BufferedFile, %BufferedFile* %file52, i32 0, i32 3
  %line_num54 = load i32, i32* %fieldLLL53, align 4
  %sub55 = sub i32 %line_num54, 1
  %p56 = load i8*, i8** %p, align 8
  %ptrToIntC57 = ptrtoint i8* %p56 to i64
  %add58 = add i64 %ptrToIntC57, 1
  %intToPtrB59 = inttoptr i64 %add58 to i8*
  store i8* %intToPtrB59, i8** %p, align 8
  %p60 = load i8*, i8** %p, align 8
  %ptrToIntI61 = ptrtoint i8* %p60 to i64
  %sub62 = sub i64 %ptrToIntI61, 1
  %iintToPtrD63 = inttoptr i64 %sub62 to i8*
  %p64 = load i8*, i8** %p, align 8
  %derefference_valueB65 = load i8, i8* %p64, align 1
  %icastKY66 = zext i8 %derefference_valueB65 to i32
  store i32 %icastKY66, i32* %c, align 4
  %c67 = load i32, i32* %c, align 4
  %eq68 = icmp eq i32 %c67, 92
  br i1 %eq68, label %cond_jump_then69, label %cond_end70

cond_jump_elif044:                                ; preds = %cond_end33
  %c78 = load i32, i32* %c, align 4
  %eq79 = icmp eq i32 %c78, 13
  br i1 %eq79, label %cond_jump_elif_then045, label %cond_end46

cond_jump_elif_then045:                           ; preds = %cond_jump_elif044
  %p80 = load i8*, i8** %p, align 8
  %ptrToIntC81 = ptrtoint i8* %p80 to i64
  %add82 = add i64 %ptrToIntC81, 1
  %intToPtrB83 = inttoptr i64 %add82 to i8*
  store i8* %intToPtrB83, i8** %p, align 8
  %p84 = load i8*, i8** %p, align 8
  %ptrToIntI85 = ptrtoint i8* %p84 to i64
  %sub86 = sub i64 %ptrToIntI85, 1
  %iintToPtrD87 = inttoptr i64 %sub86 to i8*
  %p88 = load i8*, i8** %p, align 8
  %derefference_valueB89 = load i8, i8* %p88, align 1
  %icastKY90 = zext i8 %derefference_valueB89 to i32
  store i32 %icastKY90, i32* %c, align 4
  %c91 = load i32, i32* %c, align 4
  %eq92 = icmp eq i32 %c91, 92
  br i1 %eq92, label %cond_jump_then93, label %cond_end94

cond_end46:                                       ; preds = %cond_end105, %cond_jump_elif044, %cond_end70
  br label %cond_end18

cond_jump_then69:                                 ; preds = %cond_jump_then43
  %file71 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p72 = load i8*, i8** %p, align 8
  %fieldTU73 = getelementptr inbounds %BufferedFile, %BufferedFile* %file71, i32 0, i32 0
  store i8* %p72, i8** %fieldTU73, align 8
  %fun_result74 = call i32 @handle_eob()
  store i32 %fun_result74, i32* %c, align 4
  %file75 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL76 = getelementptr inbounds %BufferedFile, %BufferedFile* %file75, i32 0, i32 0
  %buf_ptr77 = load i8*, i8** %fieldLLL76, align 8
  store i8* %buf_ptr77, i8** %p, align 8
  br label %cond_end70

cond_end70:                                       ; preds = %cond_jump_then69, %cond_jump_then43
  br label %cond_end46

cond_jump_then93:                                 ; preds = %cond_jump_elif_then045
  %file95 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p96 = load i8*, i8** %p, align 8
  %fieldTU97 = getelementptr inbounds %BufferedFile, %BufferedFile* %file95, i32 0, i32 0
  store i8* %p96, i8** %fieldTU97, align 8
  %fun_result98 = call i32 @handle_eob()
  store i32 %fun_result98, i32* %c, align 4
  %file99 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL100 = getelementptr inbounds %BufferedFile, %BufferedFile* %file99, i32 0, i32 0
  %buf_ptr101 = load i8*, i8** %fieldLLL100, align 8
  store i8* %buf_ptr101, i8** %p, align 8
  br label %cond_end94

cond_end94:                                       ; preds = %cond_jump_then93, %cond_jump_elif_then045
  %c102 = load i32, i32* %c, align 4
  %eq103 = icmp eq i32 %c102, 10
  br i1 %eq103, label %cond_jump_then104, label %cond_end105

cond_jump_then104:                                ; preds = %cond_end94
  %file106 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file107 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL108 = getelementptr inbounds %BufferedFile, %BufferedFile* %file107, i32 0, i32 3
  %line_num109 = load i32, i32* %fieldLLL108, align 4
  %add110 = add i32 %line_num109, 1
  %fieldTU111 = getelementptr inbounds %BufferedFile, %BufferedFile* %file106, i32 0, i32 3
  store i32 %add110, i32* %fieldTU111, align 4
  %file112 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL113 = getelementptr inbounds %BufferedFile, %BufferedFile* %file112, i32 0, i32 3
  %line_num114 = load i32, i32* %fieldLLL113, align 4
  %sub115 = sub i32 %line_num114, 1
  %p116 = load i8*, i8** %p, align 8
  %ptrToIntC117 = ptrtoint i8* %p116 to i64
  %add118 = add i64 %ptrToIntC117, 1
  %intToPtrB119 = inttoptr i64 %add118 to i8*
  store i8* %intToPtrB119, i8** %p, align 8
  %p120 = load i8*, i8** %p, align 8
  %ptrToIntI121 = ptrtoint i8* %p120 to i64
  %sub122 = sub i64 %ptrToIntI121, 1
  %iintToPtrD123 = inttoptr i64 %sub122 to i8*
  %p124 = load i8*, i8** %p, align 8
  %derefference_valueB125 = load i8, i8* %p124, align 1
  %icastKY126 = zext i8 %derefference_valueB125 to i32
  store i32 %icastKY126, i32* %c, align 4
  %c127 = load i32, i32* %c, align 4
  %eq128 = icmp eq i32 %c127, 92
  br i1 %eq128, label %cond_jump_then129, label %cond_end130

cond_end105:                                      ; preds = %cond_end130, %cond_end94
  br label %cond_end46

cond_jump_then129:                                ; preds = %cond_jump_then104
  %file131 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p132 = load i8*, i8** %p, align 8
  %fieldTU133 = getelementptr inbounds %BufferedFile, %BufferedFile* %file131, i32 0, i32 0
  store i8* %p132, i8** %fieldTU133, align 8
  %fun_result134 = call i32 @handle_eob()
  store i32 %fun_result134, i32* %c, align 4
  %file135 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL136 = getelementptr inbounds %BufferedFile, %BufferedFile* %file135, i32 0, i32 0
  %buf_ptr137 = load i8*, i8** %fieldLLL136, align 8
  store i8* %buf_ptr137, i8** %p, align 8
  br label %cond_end130

cond_end130:                                      ; preds = %cond_jump_then129, %cond_jump_then104
  br label %cond_end105
}

define internal i8* @parse_comment(i8* %0) {
entry:
  %oror33 = alloca i1, align 1
  %oror32 = alloca i1, align 1
  %oror9 = alloca i1, align 1
  %oror = alloca i1, align 1
  %c = alloca i32, align 4
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  %p2 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p2 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p3 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p3 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end62
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  br label %loop_top_block5

cond_end_block:                                   ; preds = %loop_top_block
  br label %parse_comment.end_of_comment

loop_continue_top_block4:                         ; preds = %cond_end49
  br label %loop_top_block5

loop_top_block5:                                  ; preds = %loop_continue_top_block4, %cond_then_block
  br i1 true, label %cond_then_block6, label %cond_end_block7

cond_then_block6:                                 ; preds = %loop_top_block5
  %p8 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p8, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* %c, align 4
  %c10 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c10, 10
  store i1 %eq, i1* %oror9, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_end_block7:                                  ; preds = %cond_jump_then48, %cond_jump_then20, %loop_top_block5
  %c59 = load i32, i32* %c, align 4
  %eq60 = icmp eq i32 %c59, 10
  br i1 %eq60, label %cond_jump_then61, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %cond_then_block6
  %c11 = load i32, i32* %c, align 4
  %eq12 = icmp eq i32 %c11, 42
  %oror13 = or i1 %eq, %eq12
  store i1 %oror13, i1* %oror9, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block6
  %oror_result_value = load i1, i1* %oror9, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end15, label %cond_jump_then14

cond_jump_then14:                                 ; preds = %cond_jump_end
  %c16 = load i32, i32* %c, align 4
  %eq17 = icmp eq i32 %c16, 92
  %oror18 = or i1 %oror_result_value, %eq17
  store i1 %oror18, i1* %oror, align 1
  br label %cond_jump_end15

cond_jump_end15:                                  ; preds = %cond_jump_then14, %cond_jump_end
  %oror_result_value19 = load i1, i1* %oror, align 1
  br i1 %oror_result_value19, label %cond_jump_then20, label %cond_end

cond_jump_then20:                                 ; preds = %cond_jump_end15
  br label %cond_end_block7

cond_end:                                         ; preds = %after_break, %cond_jump_end15
  %p21 = load i8*, i8** %p, align 8
  %ptrToIntC22 = ptrtoint i8* %p21 to i64
  %add23 = add i64 %ptrToIntC22, 1
  %intToPtrB24 = inttoptr i64 %add23 to i8*
  store i8* %intToPtrB24, i8** %p, align 8
  %p25 = load i8*, i8** %p, align 8
  %ptrToIntI26 = ptrtoint i8* %p25 to i64
  %sub27 = sub i64 %ptrToIntI26, 1
  %iintToPtrD28 = inttoptr i64 %sub27 to i8*
  %p29 = load i8*, i8** %p, align 8
  %derefference_valueB30 = load i8, i8* %p29, align 1
  %icastKY31 = zext i8 %derefference_valueB30 to i32
  store i32 %icastKY31, i32* %c, align 4
  %c34 = load i32, i32* %c, align 4
  %eq35 = icmp eq i32 %c34, 10
  store i1 %eq35, i1* %oror33, align 1
  br i1 %eq35, label %cond_jump_end37, label %cond_jump_then36

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then36:                                 ; preds = %cond_end
  %c38 = load i32, i32* %c, align 4
  %eq39 = icmp eq i32 %c38, 42
  %oror40 = or i1 %eq35, %eq39
  store i1 %oror40, i1* %oror33, align 1
  br label %cond_jump_end37

cond_jump_end37:                                  ; preds = %cond_jump_then36, %cond_end
  %oror_result_value41 = load i1, i1* %oror33, align 1
  store i1 %oror_result_value41, i1* %oror32, align 1
  br i1 %oror_result_value41, label %cond_jump_end43, label %cond_jump_then42

cond_jump_then42:                                 ; preds = %cond_jump_end37
  %c44 = load i32, i32* %c, align 4
  %eq45 = icmp eq i32 %c44, 92
  %oror46 = or i1 %oror_result_value41, %eq45
  store i1 %oror46, i1* %oror32, align 1
  br label %cond_jump_end43

cond_jump_end43:                                  ; preds = %cond_jump_then42, %cond_jump_end37
  %oror_result_value47 = load i1, i1* %oror32, align 1
  br i1 %oror_result_value47, label %cond_jump_then48, label %cond_end49

cond_jump_then48:                                 ; preds = %cond_jump_end43
  br label %cond_end_block7

cond_end49:                                       ; preds = %after_break50, %cond_jump_end43
  %p51 = load i8*, i8** %p, align 8
  %ptrToIntC52 = ptrtoint i8* %p51 to i64
  %add53 = add i64 %ptrToIntC52, 1
  %intToPtrB54 = inttoptr i64 %add53 to i8*
  store i8* %intToPtrB54, i8** %p, align 8
  %p55 = load i8*, i8** %p, align 8
  %ptrToIntI56 = ptrtoint i8* %p55 to i64
  %sub57 = sub i64 %ptrToIntI56, 1
  %iintToPtrD58 = inttoptr i64 %sub57 to i8*
  br label %loop_continue_top_block4

after_break50:                                    ; No predecessors!
  br label %cond_end49

cond_jump_then61:                                 ; preds = %cond_end_block7
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %file63 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file63, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL, align 4
  %add64 = add i32 %line_num, 1
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  store i32 %add64, i32* %fieldTU, align 4
  %file65 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL66 = getelementptr inbounds %BufferedFile, %BufferedFile* %file65, i32 0, i32 3
  %line_num67 = load i32, i32* %fieldLLL66, align 4
  %sub68 = sub i32 %line_num67, 1
  %p69 = load i8*, i8** %p, align 8
  %ptrToIntC70 = ptrtoint i8* %p69 to i64
  %add71 = add i64 %ptrToIntC70, 1
  %intToPtrB72 = inttoptr i64 %add71 to i8*
  store i8* %intToPtrB72, i8** %p, align 8
  %p73 = load i8*, i8** %p, align 8
  %ptrToIntI74 = ptrtoint i8* %p73 to i64
  %sub75 = sub i64 %ptrToIntI74, 1
  %iintToPtrD76 = inttoptr i64 %sub75 to i8*
  br label %cond_end62

cond_jump_elif0:                                  ; preds = %cond_end_block7
  %c77 = load i32, i32* %c, align 4
  %eq78 = icmp eq i32 %c77, 42
  br i1 %eq78, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %p79 = load i8*, i8** %p, align 8
  %ptrToIntC80 = ptrtoint i8* %p79 to i64
  %add81 = add i64 %ptrToIntC80, 1
  %intToPtrB82 = inttoptr i64 %add81 to i8*
  store i8* %intToPtrB82, i8** %p, align 8
  %p83 = load i8*, i8** %p, align 8
  %ptrToIntI84 = ptrtoint i8* %p83 to i64
  %sub85 = sub i64 %ptrToIntI84, 1
  %iintToPtrD86 = inttoptr i64 %sub85 to i8*
  br label %loop_top_block88

cond_else_block:                                  ; preds = %cond_jump_elif0
  %file249 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p250 = load i8*, i8** %p, align 8
  %fieldTU251 = getelementptr inbounds %BufferedFile, %BufferedFile* %file249, i32 0, i32 0
  store i8* %p250, i8** %fieldTU251, align 8
  %fun_result252 = call i32 @handle_eob()
  store i32 %fun_result252, i32* %c, align 4
  %file253 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL254 = getelementptr inbounds %BufferedFile, %BufferedFile* %file253, i32 0, i32 0
  %buf_ptr255 = load i8*, i8** %fieldLLL254, align 8
  store i8* %buf_ptr255, i8** %p, align 8
  %c256 = load i32, i32* %c, align 4
  %eq257 = icmp eq i32 %c256, -1
  br i1 %eq257, label %cond_jump_then258, label %cond_jump_elif0259

cond_end62:                                       ; preds = %cond_end261, %parse_comment.after_star, %cond_jump_then61
  br label %loop_continue_top_block

loop_continue_top_block87:                        ; preds = %cond_end100
  br label %loop_top_block88

loop_top_block88:                                 ; preds = %loop_continue_top_block87, %cond_jump_elif_then0
  br i1 true, label %cond_then_block89, label %cond_end_block90

cond_then_block89:                                ; preds = %loop_top_block88
  %p91 = load i8*, i8** %p, align 8
  %derefference_valueB92 = load i8, i8* %p91, align 1
  %icastKY93 = zext i8 %derefference_valueB92 to i32
  store i32 %icastKY93, i32* %c, align 4
  %c94 = load i32, i32* %c, align 4
  %eq95 = icmp eq i32 %c94, 42
  br i1 %eq95, label %cond_jump_then96, label %cond_jump_elif097

cond_end_block90:                                 ; preds = %cond_else_block99, %loop_top_block88
  br label %parse_comment.after_star

cond_jump_then96:                                 ; preds = %cond_then_block89
  %p101 = load i8*, i8** %p, align 8
  %ptrToIntC102 = ptrtoint i8* %p101 to i64
  %add103 = add i64 %ptrToIntC102, 1
  %intToPtrB104 = inttoptr i64 %add103 to i8*
  store i8* %intToPtrB104, i8** %p, align 8
  %p105 = load i8*, i8** %p, align 8
  %ptrToIntI106 = ptrtoint i8* %p105 to i64
  %sub107 = sub i64 %ptrToIntI106, 1
  %iintToPtrD108 = inttoptr i64 %sub107 to i8*
  br label %cond_end100

cond_jump_elif097:                                ; preds = %cond_then_block89
  %c109 = load i32, i32* %c, align 4
  %eq110 = icmp eq i32 %c109, 47
  br i1 %eq110, label %cond_jump_elif_then098, label %cond_jump_elif1

cond_jump_elif_then098:                           ; preds = %cond_jump_elif097
  br label %parse_comment.end_of_comment
  br label %cond_end100

cond_jump_elif1:                                  ; preds = %cond_jump_elif097
  %c111 = load i32, i32* %c, align 4
  %eq112 = icmp eq i32 %c111, 92
  br i1 %eq112, label %cond_jump_elif_then1, label %cond_else_block99

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %file113 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p114 = load i8*, i8** %p, align 8
  %fieldTU115 = getelementptr inbounds %BufferedFile, %BufferedFile* %file113, i32 0, i32 0
  store i8* %p114, i8** %fieldTU115, align 8
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* %c, align 4
  %file116 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL117 = getelementptr inbounds %BufferedFile, %BufferedFile* %file116, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL117, align 8
  store i8* %buf_ptr, i8** %p, align 8
  %c118 = load i32, i32* %c, align 4
  %eq119 = icmp eq i32 %c118, 92
  br i1 %eq119, label %cond_jump_then120, label %cond_end121

cond_else_block99:                                ; preds = %cond_jump_elif1
  br label %cond_end_block90

cond_end100:                                      ; preds = %after_break248, %cond_end121, %cond_jump_elif_then098, %cond_jump_then96
  br label %loop_continue_top_block87

parse_comment.end_of_comment:                     ; preds = %cond_end_block, %cond_jump_elif_then098
  %p272 = load i8*, i8** %p, align 8
  %ptrToIntC273 = ptrtoint i8* %p272 to i64
  %add274 = add i64 %ptrToIntC273, 1
  %intToPtrB275 = inttoptr i64 %add274 to i8*
  store i8* %intToPtrB275, i8** %p, align 8
  %p276 = load i8*, i8** %p, align 8
  %ptrToIntI277 = ptrtoint i8* %p276 to i64
  %sub278 = sub i64 %ptrToIntI277, 1
  %iintToPtrD279 = inttoptr i64 %sub278 to i8*
  %p280 = load i8*, i8** %p, align 8
  ret i8* %p280

cond_jump_then120:                                ; preds = %cond_jump_elif_then1
  br label %loop_top_block122

cond_end121:                                      ; preds = %cond_end_block126, %cond_jump_elif_then1
  br label %cond_end100

loop_top_block122:                                ; preds = %cond_end155, %cond_jump_then120
  %c123 = load i32, i32* %c, align 4
  %eq124 = icmp eq i32 %c123, 92
  br i1 %eq124, label %cond_then_block125, label %cond_end_block126

cond_then_block125:                               ; preds = %loop_top_block122
  %p127 = load i8*, i8** %p, align 8
  %ptrToIntC128 = ptrtoint i8* %p127 to i64
  %add129 = add i64 %ptrToIntC128, 1
  %intToPtrB130 = inttoptr i64 %add129 to i8*
  store i8* %intToPtrB130, i8** %p, align 8
  %p131 = load i8*, i8** %p, align 8
  %ptrToIntI132 = ptrtoint i8* %p131 to i64
  %sub133 = sub i64 %ptrToIntI132, 1
  %iintToPtrD134 = inttoptr i64 %sub133 to i8*
  %p135 = load i8*, i8** %p, align 8
  %derefference_valueB136 = load i8, i8* %p135, align 1
  %icastKY137 = zext i8 %derefference_valueB136 to i32
  store i32 %icastKY137, i32* %c, align 4
  %c138 = load i32, i32* %c, align 4
  %eq139 = icmp eq i32 %c138, 92
  br i1 %eq139, label %cond_jump_then140, label %cond_end141

cond_end_block126:                                ; preds = %loop_top_block122
  br label %cond_end121

cond_jump_then140:                                ; preds = %cond_then_block125
  %file142 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p143 = load i8*, i8** %p, align 8
  %fieldTU144 = getelementptr inbounds %BufferedFile, %BufferedFile* %file142, i32 0, i32 0
  store i8* %p143, i8** %fieldTU144, align 8
  %fun_result145 = call i32 @handle_eob()
  store i32 %fun_result145, i32* %c, align 4
  %file146 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL147 = getelementptr inbounds %BufferedFile, %BufferedFile* %file146, i32 0, i32 0
  %buf_ptr148 = load i8*, i8** %fieldLLL147, align 8
  store i8* %buf_ptr148, i8** %p, align 8
  br label %cond_end141

cond_end141:                                      ; preds = %cond_jump_then140, %cond_then_block125
  %c149 = load i32, i32* %c, align 4
  %eq150 = icmp eq i32 %c149, 10
  br i1 %eq150, label %cond_jump_then151, label %cond_jump_elif0152

cond_jump_then151:                                ; preds = %cond_end141
  %file156 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file157 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL158 = getelementptr inbounds %BufferedFile, %BufferedFile* %file157, i32 0, i32 3
  %line_num159 = load i32, i32* %fieldLLL158, align 4
  %add160 = add i32 %line_num159, 1
  %fieldTU161 = getelementptr inbounds %BufferedFile, %BufferedFile* %file156, i32 0, i32 3
  store i32 %add160, i32* %fieldTU161, align 4
  %file162 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL163 = getelementptr inbounds %BufferedFile, %BufferedFile* %file162, i32 0, i32 3
  %line_num164 = load i32, i32* %fieldLLL163, align 4
  %sub165 = sub i32 %line_num164, 1
  %p166 = load i8*, i8** %p, align 8
  %ptrToIntC167 = ptrtoint i8* %p166 to i64
  %add168 = add i64 %ptrToIntC167, 1
  %intToPtrB169 = inttoptr i64 %add168 to i8*
  store i8* %intToPtrB169, i8** %p, align 8
  %p170 = load i8*, i8** %p, align 8
  %ptrToIntI171 = ptrtoint i8* %p170 to i64
  %sub172 = sub i64 %ptrToIntI171, 1
  %iintToPtrD173 = inttoptr i64 %sub172 to i8*
  %p174 = load i8*, i8** %p, align 8
  %derefference_valueB175 = load i8, i8* %p174, align 1
  %icastKY176 = zext i8 %derefference_valueB175 to i32
  store i32 %icastKY176, i32* %c, align 4
  %c177 = load i32, i32* %c, align 4
  %eq178 = icmp eq i32 %c177, 92
  br i1 %eq178, label %cond_jump_then179, label %cond_end180

cond_jump_elif0152:                               ; preds = %cond_end141
  %c188 = load i32, i32* %c, align 4
  %eq189 = icmp eq i32 %c188, 13
  br i1 %eq189, label %cond_jump_elif_then0153, label %cond_else_block154

cond_jump_elif_then0153:                          ; preds = %cond_jump_elif0152
  %p190 = load i8*, i8** %p, align 8
  %ptrToIntC191 = ptrtoint i8* %p190 to i64
  %add192 = add i64 %ptrToIntC191, 1
  %intToPtrB193 = inttoptr i64 %add192 to i8*
  store i8* %intToPtrB193, i8** %p, align 8
  %p194 = load i8*, i8** %p, align 8
  %ptrToIntI195 = ptrtoint i8* %p194 to i64
  %sub196 = sub i64 %ptrToIntI195, 1
  %iintToPtrD197 = inttoptr i64 %sub196 to i8*
  %p198 = load i8*, i8** %p, align 8
  %derefference_valueB199 = load i8, i8* %p198, align 1
  %icastKY200 = zext i8 %derefference_valueB199 to i32
  store i32 %icastKY200, i32* %c, align 4
  %c201 = load i32, i32* %c, align 4
  %eq202 = icmp eq i32 %c201, 92
  br i1 %eq202, label %cond_jump_then203, label %cond_end204

cond_else_block154:                               ; preds = %cond_jump_elif0152
  br label %parse_comment.after_star
  br label %cond_end155

cond_end155:                                      ; preds = %cond_else_block154, %cond_end215, %cond_end180
  br label %loop_top_block122

cond_jump_then179:                                ; preds = %cond_jump_then151
  %file181 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p182 = load i8*, i8** %p, align 8
  %fieldTU183 = getelementptr inbounds %BufferedFile, %BufferedFile* %file181, i32 0, i32 0
  store i8* %p182, i8** %fieldTU183, align 8
  %fun_result184 = call i32 @handle_eob()
  store i32 %fun_result184, i32* %c, align 4
  %file185 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL186 = getelementptr inbounds %BufferedFile, %BufferedFile* %file185, i32 0, i32 0
  %buf_ptr187 = load i8*, i8** %fieldLLL186, align 8
  store i8* %buf_ptr187, i8** %p, align 8
  br label %cond_end180

cond_end180:                                      ; preds = %cond_jump_then179, %cond_jump_then151
  br label %cond_end155

cond_jump_then203:                                ; preds = %cond_jump_elif_then0153
  %file205 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p206 = load i8*, i8** %p, align 8
  %fieldTU207 = getelementptr inbounds %BufferedFile, %BufferedFile* %file205, i32 0, i32 0
  store i8* %p206, i8** %fieldTU207, align 8
  %fun_result208 = call i32 @handle_eob()
  store i32 %fun_result208, i32* %c, align 4
  %file209 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL210 = getelementptr inbounds %BufferedFile, %BufferedFile* %file209, i32 0, i32 0
  %buf_ptr211 = load i8*, i8** %fieldLLL210, align 8
  store i8* %buf_ptr211, i8** %p, align 8
  br label %cond_end204

cond_end204:                                      ; preds = %cond_jump_then203, %cond_jump_elif_then0153
  %c212 = load i32, i32* %c, align 4
  %eq213 = icmp eq i32 %c212, 10
  br i1 %eq213, label %cond_jump_then214, label %cond_end215

cond_jump_then214:                                ; preds = %cond_end204
  %file216 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file217 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL218 = getelementptr inbounds %BufferedFile, %BufferedFile* %file217, i32 0, i32 3
  %line_num219 = load i32, i32* %fieldLLL218, align 4
  %add220 = add i32 %line_num219, 1
  %fieldTU221 = getelementptr inbounds %BufferedFile, %BufferedFile* %file216, i32 0, i32 3
  store i32 %add220, i32* %fieldTU221, align 4
  %file222 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL223 = getelementptr inbounds %BufferedFile, %BufferedFile* %file222, i32 0, i32 3
  %line_num224 = load i32, i32* %fieldLLL223, align 4
  %sub225 = sub i32 %line_num224, 1
  %p226 = load i8*, i8** %p, align 8
  %ptrToIntC227 = ptrtoint i8* %p226 to i64
  %add228 = add i64 %ptrToIntC227, 1
  %intToPtrB229 = inttoptr i64 %add228 to i8*
  store i8* %intToPtrB229, i8** %p, align 8
  %p230 = load i8*, i8** %p, align 8
  %ptrToIntI231 = ptrtoint i8* %p230 to i64
  %sub232 = sub i64 %ptrToIntI231, 1
  %iintToPtrD233 = inttoptr i64 %sub232 to i8*
  %p234 = load i8*, i8** %p, align 8
  %derefference_valueB235 = load i8, i8* %p234, align 1
  %icastKY236 = zext i8 %derefference_valueB235 to i32
  store i32 %icastKY236, i32* %c, align 4
  %c237 = load i32, i32* %c, align 4
  %eq238 = icmp eq i32 %c237, 92
  br i1 %eq238, label %cond_jump_then239, label %cond_end240

cond_end215:                                      ; preds = %cond_end240, %cond_end204
  br label %cond_end155

cond_jump_then239:                                ; preds = %cond_jump_then214
  %file241 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p242 = load i8*, i8** %p, align 8
  %fieldTU243 = getelementptr inbounds %BufferedFile, %BufferedFile* %file241, i32 0, i32 0
  store i8* %p242, i8** %fieldTU243, align 8
  %fun_result244 = call i32 @handle_eob()
  store i32 %fun_result244, i32* %c, align 4
  %file245 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL246 = getelementptr inbounds %BufferedFile, %BufferedFile* %file245, i32 0, i32 0
  %buf_ptr247 = load i8*, i8** %fieldLLL246, align 8
  store i8* %buf_ptr247, i8** %p, align 8
  br label %cond_end240

cond_end240:                                      ; preds = %cond_jump_then239, %cond_jump_then214
  br label %cond_end215

parse_comment.after_star:                         ; preds = %cond_end_block90, %cond_else_block154
  br label %cond_end62

after_break248:                                   ; No predecessors!
  br label %cond_end100

cond_jump_then258:                                ; preds = %cond_else_block
  call void (i8*, ...) @error(i8* bitcast ([34 x i8]* @36 to i8*))
  br label %cond_end261

cond_jump_elif0259:                               ; preds = %cond_else_block
  %c262 = load i32, i32* %c, align 4
  %eq263 = icmp eq i32 %c262, 92
  br i1 %eq263, label %cond_jump_elif_then0260, label %cond_end261

cond_jump_elif_then0260:                          ; preds = %cond_jump_elif0259
  %p264 = load i8*, i8** %p, align 8
  %ptrToIntC265 = ptrtoint i8* %p264 to i64
  %add266 = add i64 %ptrToIntC265, 1
  %intToPtrB267 = inttoptr i64 %add266 to i8*
  store i8* %intToPtrB267, i8** %p, align 8
  %p268 = load i8*, i8** %p, align 8
  %ptrToIntI269 = ptrtoint i8* %p268 to i64
  %sub270 = sub i64 %ptrToIntI269, 1
  %iintToPtrD271 = inttoptr i64 %sub270 to i8*
  br label %cond_end261

cond_end261:                                      ; preds = %cond_jump_elif_then0260, %cond_jump_elif0259, %cond_jump_then258
  br label %cond_end62
}

define internal i8* @parse_pp_string(i8* %0, i32 %1, %CString* %2) {
entry:
  %size274 = alloca i32, align 4
  %size229 = alloca i32, align 4
  %size146 = alloca i32, align 4
  %size = alloca i32, align 4
  %c = alloca i32, align 4
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  %sep = alloca i32, align 4
  %sep2 = alloca i32*, align 8
  store i32 %1, i32* %sep, align 4
  store i32* %sep, i32** %sep2, align 8
  %str = alloca %CString*, align 8
  %str3 = alloca %CString**, align 8
  store %CString* %2, %CString** %str, align 8
  store %CString** %str, %CString*** %str3, align 8
  %p4 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p4 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p5 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p5 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p6 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p6, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* %c, align 4
  %c7 = load i32, i32* %c, align 4
  %sep8 = load i32, i32* %sep, align 4
  %eq = icmp eq i32 %c7, %sep8
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  %p307 = load i8*, i8** %p, align 8
  %ptrToIntC308 = ptrtoint i8* %p307 to i64
  %add309 = add i64 %ptrToIntC308, 1
  %intToPtrB310 = inttoptr i64 %add309 to i8*
  store i8* %intToPtrB310, i8** %p, align 8
  %p311 = load i8*, i8** %p, align 8
  %ptrToIntI312 = ptrtoint i8* %p311 to i64
  %sub313 = sub i64 %ptrToIntI312, 1
  %iintToPtrD314 = inttoptr i64 %sub313 to i8*
  %p315 = load i8*, i8** %p, align 8
  ret i8* %p315

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_jump_elif0:                                  ; preds = %cond_then_block
  %c9 = load i32, i32* %c, align 4
  %eq10 = icmp eq i32 %c9, 92
  br i1 %eq10, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %p11 = load i8*, i8** %p, align 8
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  store i8* %p11, i8** %fieldTU, align 8
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* %c, align 4
  %file12 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file12, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  store i8* %buf_ptr, i8** %p, align 8
  %c13 = load i32, i32* %c, align 4
  %eq14 = icmp eq i32 %c13, -1
  br i1 %eq14, label %cond_jump_then15, label %cond_jump_elif016

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %c179 = load i32, i32* %c, align 4
  %eq180 = icmp eq i32 %c179, 10
  br i1 %eq180, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %file181 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file182 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL183 = getelementptr inbounds %BufferedFile, %BufferedFile* %file182, i32 0, i32 3
  %line_num184 = load i32, i32* %fieldLLL183, align 4
  %add185 = add i32 %line_num184, 1
  %fieldTU186 = getelementptr inbounds %BufferedFile, %BufferedFile* %file181, i32 0, i32 3
  store i32 %add185, i32* %fieldTU186, align 4
  %file187 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL188 = getelementptr inbounds %BufferedFile, %BufferedFile* %file187, i32 0, i32 3
  %line_num189 = load i32, i32* %fieldLLL188, align 4
  %sub190 = sub i32 %line_num189, 1
  br label %parse_pp_string.add_char
  br label %cond_end

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %c191 = load i32, i32* %c, align 4
  %eq192 = icmp eq i32 %c191, 13
  br i1 %eq192, label %cond_jump_elif_then2, label %cond_else_block

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  %p193 = load i8*, i8** %p, align 8
  %ptrToIntC194 = ptrtoint i8* %p193 to i64
  %add195 = add i64 %ptrToIntC194, 1
  %intToPtrB196 = inttoptr i64 %add195 to i8*
  store i8* %intToPtrB196, i8** %p, align 8
  %p197 = load i8*, i8** %p, align 8
  %ptrToIntI198 = ptrtoint i8* %p197 to i64
  %sub199 = sub i64 %ptrToIntI198, 1
  %iintToPtrD200 = inttoptr i64 %sub199 to i8*
  %p201 = load i8*, i8** %p, align 8
  %derefference_valueB202 = load i8, i8* %p201, align 1
  %icastKY203 = zext i8 %derefference_valueB202 to i32
  store i32 %icastKY203, i32* %c, align 4
  %c204 = load i32, i32* %c, align 4
  %eq205 = icmp eq i32 %c204, 92
  br i1 %eq205, label %cond_jump_then206, label %cond_end207

cond_else_block:                                  ; preds = %cond_jump_elif2
  br label %parse_pp_string.add_char

cond_end:                                         ; preds = %cond_end267, %cond_end219, %cond_jump_elif_then1, %cond_end18, %after_break
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then15:                                 ; preds = %cond_jump_elif_then0
  br label %parse_pp_string.unterminated_string

cond_jump_elif016:                                ; preds = %cond_jump_elif_then0
  %c20 = load i32, i32* %c, align 4
  %eq21 = icmp eq i32 %c20, 92
  br i1 %eq21, label %cond_jump_elif_then017, label %cond_end18

cond_jump_elif_then017:                           ; preds = %cond_jump_elif016
  %p22 = load i8*, i8** %p, align 8
  %ptrToIntC23 = ptrtoint i8* %p22 to i64
  %add24 = add i64 %ptrToIntC23, 1
  %intToPtrB25 = inttoptr i64 %add24 to i8*
  store i8* %intToPtrB25, i8** %p, align 8
  %p26 = load i8*, i8** %p, align 8
  %ptrToIntI27 = ptrtoint i8* %p26 to i64
  %sub28 = sub i64 %ptrToIntI27, 1
  %iintToPtrD29 = inttoptr i64 %sub28 to i8*
  %p30 = load i8*, i8** %p, align 8
  %derefference_valueB31 = load i8, i8* %p30, align 1
  %icastKY32 = zext i8 %derefference_valueB31 to i32
  store i32 %icastKY32, i32* %c, align 4
  %c33 = load i32, i32* %c, align 4
  %eq34 = icmp eq i32 %c33, 92
  br i1 %eq34, label %cond_jump_then35, label %cond_end36

cond_end18:                                       ; preds = %cond_end52, %cond_jump_elif016, %parse_pp_string.unterminated_string
  br label %cond_end

parse_pp_string.unterminated_string:              ; preds = %cond_jump_elif_then150, %cond_jump_then15
  %sep19 = load i32, i32* %sep, align 4
  call void (i8*, ...) @error(i8* bitcast ([33 x i8]* @37 to i8*), i32 %sep19)
  br label %cond_end18

cond_jump_then35:                                 ; preds = %cond_jump_elif_then017
  %file37 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p38 = load i8*, i8** %p, align 8
  %fieldTU39 = getelementptr inbounds %BufferedFile, %BufferedFile* %file37, i32 0, i32 0
  store i8* %p38, i8** %fieldTU39, align 8
  %fun_result40 = call i32 @handle_eob()
  store i32 %fun_result40, i32* %c, align 4
  %file41 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL42 = getelementptr inbounds %BufferedFile, %BufferedFile* %file41, i32 0, i32 0
  %buf_ptr43 = load i8*, i8** %fieldLLL42, align 8
  store i8* %buf_ptr43, i8** %p, align 8
  br label %cond_end36

cond_end36:                                       ; preds = %cond_jump_then35, %cond_jump_elif_then017
  %c44 = load i32, i32* %c, align 4
  %eq45 = icmp eq i32 %c44, 10
  br i1 %eq45, label %cond_jump_then46, label %cond_jump_elif047

cond_jump_then46:                                 ; preds = %cond_end36
  %file53 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file54 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL55 = getelementptr inbounds %BufferedFile, %BufferedFile* %file54, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL55, align 4
  %add56 = add i32 %line_num, 1
  %fieldTU57 = getelementptr inbounds %BufferedFile, %BufferedFile* %file53, i32 0, i32 3
  store i32 %add56, i32* %fieldTU57, align 4
  %file58 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL59 = getelementptr inbounds %BufferedFile, %BufferedFile* %file58, i32 0, i32 3
  %line_num60 = load i32, i32* %fieldLLL59, align 4
  %sub61 = sub i32 %line_num60, 1
  %p62 = load i8*, i8** %p, align 8
  %ptrToIntC63 = ptrtoint i8* %p62 to i64
  %add64 = add i64 %ptrToIntC63, 1
  %intToPtrB65 = inttoptr i64 %add64 to i8*
  store i8* %intToPtrB65, i8** %p, align 8
  %p66 = load i8*, i8** %p, align 8
  %ptrToIntI67 = ptrtoint i8* %p66 to i64
  %sub68 = sub i64 %ptrToIntI67, 1
  %iintToPtrD69 = inttoptr i64 %sub68 to i8*
  br label %cond_end52

cond_jump_elif047:                                ; preds = %cond_end36
  %c70 = load i32, i32* %c, align 4
  %eq71 = icmp eq i32 %c70, 13
  br i1 %eq71, label %cond_jump_elif_then048, label %cond_jump_elif149

cond_jump_elif_then048:                           ; preds = %cond_jump_elif047
  %p72 = load i8*, i8** %p, align 8
  %ptrToIntC73 = ptrtoint i8* %p72 to i64
  %add74 = add i64 %ptrToIntC73, 1
  %intToPtrB75 = inttoptr i64 %add74 to i8*
  store i8* %intToPtrB75, i8** %p, align 8
  %p76 = load i8*, i8** %p, align 8
  %ptrToIntI77 = ptrtoint i8* %p76 to i64
  %sub78 = sub i64 %ptrToIntI77, 1
  %iintToPtrD79 = inttoptr i64 %sub78 to i8*
  %p80 = load i8*, i8** %p, align 8
  %derefference_valueB81 = load i8, i8* %p80, align 1
  %icastKY82 = zext i8 %derefference_valueB81 to i32
  store i32 %icastKY82, i32* %c, align 4
  %c83 = load i32, i32* %c, align 4
  %eq84 = icmp eq i32 %c83, 92
  br i1 %eq84, label %cond_jump_then85, label %cond_end86

cond_jump_elif149:                                ; preds = %cond_jump_elif047
  %c115 = load i32, i32* %c, align 4
  %eq116 = icmp eq i32 %c115, -1
  br i1 %eq116, label %cond_jump_elif_then150, label %cond_else_block51

cond_jump_elif_then150:                           ; preds = %cond_jump_elif149
  br label %parse_pp_string.unterminated_string
  br label %cond_end52

cond_else_block51:                                ; preds = %cond_jump_elif149
  %str117 = load %CString*, %CString** %str, align 8
  %icmpB = icmp ne %CString* %str117, null
  br i1 %icmpB, label %cond_jump_then118, label %cond_end119

cond_end52:                                       ; preds = %cond_end119, %cond_jump_elif_then150, %cond_end96, %cond_jump_then46
  br label %cond_end18

cond_jump_then85:                                 ; preds = %cond_jump_elif_then048
  %file87 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p88 = load i8*, i8** %p, align 8
  %fieldTU89 = getelementptr inbounds %BufferedFile, %BufferedFile* %file87, i32 0, i32 0
  store i8* %p88, i8** %fieldTU89, align 8
  %fun_result90 = call i32 @handle_eob()
  store i32 %fun_result90, i32* %c, align 4
  %file91 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL92 = getelementptr inbounds %BufferedFile, %BufferedFile* %file91, i32 0, i32 0
  %buf_ptr93 = load i8*, i8** %fieldLLL92, align 8
  store i8* %buf_ptr93, i8** %p, align 8
  br label %cond_end86

cond_end86:                                       ; preds = %cond_jump_then85, %cond_jump_elif_then048
  %c94 = load i32, i32* %c, align 4
  %not_eq = icmp ne i32 %c94, 10
  br i1 %not_eq, label %cond_jump_then95, label %cond_end96

cond_jump_then95:                                 ; preds = %cond_end86
  call void @expect(i8* bitcast ([14 x i8]* @38 to i8*))
  br label %cond_end96

cond_end96:                                       ; preds = %cond_jump_then95, %cond_end86
  %file97 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file98 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL99 = getelementptr inbounds %BufferedFile, %BufferedFile* %file98, i32 0, i32 3
  %line_num100 = load i32, i32* %fieldLLL99, align 4
  %add101 = add i32 %line_num100, 1
  %fieldTU102 = getelementptr inbounds %BufferedFile, %BufferedFile* %file97, i32 0, i32 3
  store i32 %add101, i32* %fieldTU102, align 4
  %file103 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL104 = getelementptr inbounds %BufferedFile, %BufferedFile* %file103, i32 0, i32 3
  %line_num105 = load i32, i32* %fieldLLL104, align 4
  %sub106 = sub i32 %line_num105, 1
  %p107 = load i8*, i8** %p, align 8
  %ptrToIntC108 = ptrtoint i8* %p107 to i64
  %add109 = add i64 %ptrToIntC108, 1
  %intToPtrB110 = inttoptr i64 %add109 to i8*
  store i8* %intToPtrB110, i8** %p, align 8
  %p111 = load i8*, i8** %p, align 8
  %ptrToIntI112 = ptrtoint i8* %p111 to i64
  %sub113 = sub i64 %ptrToIntI112, 1
  %iintToPtrD114 = inttoptr i64 %sub113 to i8*
  br label %cond_end52

cond_jump_then118:                                ; preds = %cond_else_block51
  %str120 = load %CString*, %CString** %str, align 8
  store i32 505, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.28, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

cond_end119:                                      ; preds = %cstr_ccat_end145, %cond_else_block51
  %p171 = load i8*, i8** %p, align 8
  %ptrToIntC172 = ptrtoint i8* %p171 to i64
  %add173 = add i64 %ptrToIntC172, 1
  %intToPtrB174 = inttoptr i64 %add173 to i8*
  store i8* %intToPtrB174, i8** %p, align 8
  %p175 = load i8*, i8** %p, align 8
  %ptrToIntI176 = ptrtoint i8* %p175 to i64
  %sub177 = sub i64 %ptrToIntI176, 1
  %iintToPtrD178 = inttoptr i64 %sub177 to i8*
  br label %cond_end52

cstr_ccat:                                        ; preds = %cond_jump_then118
  %cstr = alloca %CString*, align 8
  store %CString* %str120, %CString** %cstr, align 8
  %ch = alloca i32, align 4
  store i32 92, i32* %ch, align 4
  %cstr121 = load %CString*, %CString** %cstr, align 8
  %fieldLLL122 = getelementptr inbounds %CString, %CString* %cstr121, i32 0, i32 0
  %size123 = load i32, i32* %fieldLLL122, align 4
  %add124 = add i32 %size123, 1
  store i32 %add124, i32* %size, align 4
  %size125 = load i32, i32* %size, align 4
  %cstr126 = load %CString*, %CString** %cstr, align 8
  %fieldLLL127 = getelementptr inbounds %CString, %CString* %cstr126, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL127, align 4
  %gt = icmp sgt i32 %size125, %size_allocated
  br i1 %gt, label %cond_jump_then128, label %cond_end129

cstr_ccat_end:                                    ; preds = %cond_end129
  %str140 = load %CString*, %CString** %str, align 8
  %c141 = load i32, i32* %c, align 4
  store i32 506, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.29, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat142

cond_jump_then128:                                ; preds = %cstr_ccat
  %cstr130 = load %CString*, %CString** %cstr, align 8
  %size131 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr130, i32 %size131)
  br label %cond_end129

cond_end129:                                      ; preds = %cond_jump_then128, %cstr_ccat
  %cstr132 = load %CString*, %CString** %cstr, align 8
  %fieldLLL133 = getelementptr inbounds %CString, %CString* %cstr132, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL133, align 8
  %size134 = load i32, i32* %size, align 4
  %sub135 = sub i32 %size134, 1
  %ch136 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch136 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub135
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr137 = load %CString*, %CString** %cstr, align 8
  %size138 = load i32, i32* %size, align 4
  %fieldTU139 = getelementptr inbounds %CString, %CString* %cstr137, i32 0, i32 0
  store i32 %size138, i32* %fieldTU139, align 4
  br label %cstr_ccat_end

cstr_ccat142:                                     ; preds = %cstr_ccat_end
  %cstr143 = alloca %CString*, align 8
  store %CString* %str140, %CString** %cstr143, align 8
  %ch144 = alloca i32, align 4
  store i32 %c141, i32* %ch144, align 4
  %cstr147 = load %CString*, %CString** %cstr143, align 8
  %fieldLLL148 = getelementptr inbounds %CString, %CString* %cstr147, i32 0, i32 0
  %size149 = load i32, i32* %fieldLLL148, align 4
  %add150 = add i32 %size149, 1
  store i32 %add150, i32* %size146, align 4
  %size151 = load i32, i32* %size146, align 4
  %cstr152 = load %CString*, %CString** %cstr143, align 8
  %fieldLLL153 = getelementptr inbounds %CString, %CString* %cstr152, i32 0, i32 2
  %size_allocated154 = load i32, i32* %fieldLLL153, align 4
  %gt155 = icmp sgt i32 %size151, %size_allocated154
  br i1 %gt155, label %cond_jump_then156, label %cond_end157

cstr_ccat_end145:                                 ; preds = %cond_end157
  br label %cond_end119

cond_jump_then156:                                ; preds = %cstr_ccat142
  %cstr158 = load %CString*, %CString** %cstr143, align 8
  %size159 = load i32, i32* %size146, align 4
  call void @cstr_realloc(%CString* %cstr158, i32 %size159)
  br label %cond_end157

cond_end157:                                      ; preds = %cond_jump_then156, %cstr_ccat142
  %cstr160 = load %CString*, %CString** %cstr143, align 8
  %fieldLLL161 = getelementptr inbounds %CString, %CString* %cstr160, i32 0, i32 1
  %data162 = load i8*, i8** %fieldLLL161, align 8
  %size163 = load i32, i32* %size146, align 4
  %sub164 = sub i32 %size163, 1
  %ch165 = load i32, i32* %ch144, align 4
  %icastJ166 = trunc i32 %ch165 to i8
  %element_addressXYXY167 = getelementptr i8, i8* %data162, i32 %sub164
  store i8 %icastJ166, i8* %element_addressXYXY167, align 1
  %cstr168 = load %CString*, %CString** %cstr143, align 8
  %size169 = load i32, i32* %size146, align 4
  %fieldTU170 = getelementptr inbounds %CString, %CString* %cstr168, i32 0, i32 0
  store i32 %size169, i32* %fieldTU170, align 4
  br label %cstr_ccat_end145

parse_pp_string.add_char:                         ; preds = %cond_else_block, %cond_else_block218, %cond_jump_elif_then1
  %str264 = load %CString*, %CString** %str, align 8
  %icmpB265 = icmp ne %CString* %str264, null
  br i1 %icmpB265, label %cond_jump_then266, label %cond_end267

cond_jump_then206:                                ; preds = %cond_jump_elif_then2
  %file208 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p209 = load i8*, i8** %p, align 8
  %fieldTU210 = getelementptr inbounds %BufferedFile, %BufferedFile* %file208, i32 0, i32 0
  store i8* %p209, i8** %fieldTU210, align 8
  %fun_result211 = call i32 @handle_eob()
  store i32 %fun_result211, i32* %c, align 4
  %file212 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL213 = getelementptr inbounds %BufferedFile, %BufferedFile* %file212, i32 0, i32 0
  %buf_ptr214 = load i8*, i8** %fieldLLL213, align 8
  store i8* %buf_ptr214, i8** %p, align 8
  br label %cond_end207

cond_end207:                                      ; preds = %cond_jump_then206, %cond_jump_elif_then2
  %c215 = load i32, i32* %c, align 4
  %not_eq216 = icmp ne i32 %c215, 10
  br i1 %not_eq216, label %cond_jump_then217, label %cond_else_block218

cond_jump_then217:                                ; preds = %cond_end207
  %str220 = load %CString*, %CString** %str, align 8
  %icmpB221 = icmp ne %CString* %str220, null
  br i1 %icmpB221, label %cond_jump_then222, label %cond_end223

cond_else_block218:                               ; preds = %cond_end207
  %file254 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file255 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL256 = getelementptr inbounds %BufferedFile, %BufferedFile* %file255, i32 0, i32 3
  %line_num257 = load i32, i32* %fieldLLL256, align 4
  %add258 = add i32 %line_num257, 1
  %fieldTU259 = getelementptr inbounds %BufferedFile, %BufferedFile* %file254, i32 0, i32 3
  store i32 %add258, i32* %fieldTU259, align 4
  %file260 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL261 = getelementptr inbounds %BufferedFile, %BufferedFile* %file260, i32 0, i32 3
  %line_num262 = load i32, i32* %fieldLLL261, align 4
  %sub263 = sub i32 %line_num262, 1
  br label %parse_pp_string.add_char
  br label %cond_end219

cond_end219:                                      ; preds = %cond_else_block218, %cond_end223
  br label %cond_end

cond_jump_then222:                                ; preds = %cond_jump_then217
  %str224 = load %CString*, %CString** %str, align 8
  store i32 518, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.30, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat225

cond_end223:                                      ; preds = %cstr_ccat_end228, %cond_jump_then217
  br label %cond_end219

cstr_ccat225:                                     ; preds = %cond_jump_then222
  %cstr226 = alloca %CString*, align 8
  store %CString* %str224, %CString** %cstr226, align 8
  %ch227 = alloca i32, align 4
  store i32 13, i32* %ch227, align 4
  %cstr230 = load %CString*, %CString** %cstr226, align 8
  %fieldLLL231 = getelementptr inbounds %CString, %CString* %cstr230, i32 0, i32 0
  %size232 = load i32, i32* %fieldLLL231, align 4
  %add233 = add i32 %size232, 1
  store i32 %add233, i32* %size229, align 4
  %size234 = load i32, i32* %size229, align 4
  %cstr235 = load %CString*, %CString** %cstr226, align 8
  %fieldLLL236 = getelementptr inbounds %CString, %CString* %cstr235, i32 0, i32 2
  %size_allocated237 = load i32, i32* %fieldLLL236, align 4
  %gt238 = icmp sgt i32 %size234, %size_allocated237
  br i1 %gt238, label %cond_jump_then239, label %cond_end240

cstr_ccat_end228:                                 ; preds = %cond_end240
  br label %cond_end223

cond_jump_then239:                                ; preds = %cstr_ccat225
  %cstr241 = load %CString*, %CString** %cstr226, align 8
  %size242 = load i32, i32* %size229, align 4
  call void @cstr_realloc(%CString* %cstr241, i32 %size242)
  br label %cond_end240

cond_end240:                                      ; preds = %cond_jump_then239, %cstr_ccat225
  %cstr243 = load %CString*, %CString** %cstr226, align 8
  %fieldLLL244 = getelementptr inbounds %CString, %CString* %cstr243, i32 0, i32 1
  %data245 = load i8*, i8** %fieldLLL244, align 8
  %size246 = load i32, i32* %size229, align 4
  %sub247 = sub i32 %size246, 1
  %ch248 = load i32, i32* %ch227, align 4
  %icastJ249 = trunc i32 %ch248 to i8
  %element_addressXYXY250 = getelementptr i8, i8* %data245, i32 %sub247
  store i8 %icastJ249, i8* %element_addressXYXY250, align 1
  %cstr251 = load %CString*, %CString** %cstr226, align 8
  %size252 = load i32, i32* %size229, align 4
  %fieldTU253 = getelementptr inbounds %CString, %CString* %cstr251, i32 0, i32 0
  store i32 %size252, i32* %fieldTU253, align 4
  br label %cstr_ccat_end228

cond_jump_then266:                                ; preds = %parse_pp_string.add_char
  %str268 = load %CString*, %CString** %str, align 8
  %c269 = load i32, i32* %c, align 4
  store i32 526, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.31, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat270

cond_end267:                                      ; preds = %cstr_ccat_end273, %parse_pp_string.add_char
  %p299 = load i8*, i8** %p, align 8
  %ptrToIntC300 = ptrtoint i8* %p299 to i64
  %add301 = add i64 %ptrToIntC300, 1
  %intToPtrB302 = inttoptr i64 %add301 to i8*
  store i8* %intToPtrB302, i8** %p, align 8
  %p303 = load i8*, i8** %p, align 8
  %ptrToIntI304 = ptrtoint i8* %p303 to i64
  %sub305 = sub i64 %ptrToIntI304, 1
  %iintToPtrD306 = inttoptr i64 %sub305 to i8*
  br label %cond_end

cstr_ccat270:                                     ; preds = %cond_jump_then266
  %cstr271 = alloca %CString*, align 8
  store %CString* %str268, %CString** %cstr271, align 8
  %ch272 = alloca i32, align 4
  store i32 %c269, i32* %ch272, align 4
  %cstr275 = load %CString*, %CString** %cstr271, align 8
  %fieldLLL276 = getelementptr inbounds %CString, %CString* %cstr275, i32 0, i32 0
  %size277 = load i32, i32* %fieldLLL276, align 4
  %add278 = add i32 %size277, 1
  store i32 %add278, i32* %size274, align 4
  %size279 = load i32, i32* %size274, align 4
  %cstr280 = load %CString*, %CString** %cstr271, align 8
  %fieldLLL281 = getelementptr inbounds %CString, %CString* %cstr280, i32 0, i32 2
  %size_allocated282 = load i32, i32* %fieldLLL281, align 4
  %gt283 = icmp sgt i32 %size279, %size_allocated282
  br i1 %gt283, label %cond_jump_then284, label %cond_end285

cstr_ccat_end273:                                 ; preds = %cond_end285
  br label %cond_end267

cond_jump_then284:                                ; preds = %cstr_ccat270
  %cstr286 = load %CString*, %CString** %cstr271, align 8
  %size287 = load i32, i32* %size274, align 4
  call void @cstr_realloc(%CString* %cstr286, i32 %size287)
  br label %cond_end285

cond_end285:                                      ; preds = %cond_jump_then284, %cstr_ccat270
  %cstr288 = load %CString*, %CString** %cstr271, align 8
  %fieldLLL289 = getelementptr inbounds %CString, %CString* %cstr288, i32 0, i32 1
  %data290 = load i8*, i8** %fieldLLL289, align 8
  %size291 = load i32, i32* %size274, align 4
  %sub292 = sub i32 %size291, 1
  %ch293 = load i32, i32* %ch272, align 4
  %icastJ294 = trunc i32 %ch293 to i8
  %element_addressXYXY295 = getelementptr i8, i8* %data290, i32 %sub292
  store i8 %icastJ294, i8* %element_addressXYXY295, align 1
  %cstr296 = load %CString*, %CString** %cstr271, align 8
  %size297 = load i32, i32* %size274, align 4
  %fieldTU298 = getelementptr inbounds %CString, %CString* %cstr296, i32 0, i32 0
  store i32 %size297, i32* %fieldTU298, align 4
  br label %cstr_ccat_end273
}

define void @preprocess_skip() {
entry:
  %oror158 = alloca i1, align 1
  %oror130 = alloca i1, align 1
  %oror129 = alloca i1, align 1
  %oror113 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %p = alloca i8*, align 8
  %in_warn_or_error = alloca i32, align 4
  %c = alloca i32, align 4
  %start_of_line = alloca i32, align 4
  %a = alloca i32, align 4
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  store i8* %buf_ptr, i8** %p, align 8
  store i32 0, i32* %a, align 4
  br label %preprocess_skip.redo_start

preprocess_skip.redo_start:                       ; preds = %cond_then_block14, %entry
  store i32 1, i32* %start_of_line, align 4
  store i32 0, i32* %in_warn_or_error, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %end_blockX
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %preprocess_skip.redo_start
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  br label %preprocess_skip.redo_no_start

cond_end_block:                                   ; preds = %loop_top_block
  br label %preprocess_skip.the_end

preprocess_skip.redo_no_start:                    ; preds = %cond_end, %cond_then_block3, %cond_then_block
  %p1 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p1, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* %c, align 4
  %c2 = load i32, i32* %c, align 4
  %eqtmp = icmp eq i32 %c2, 32
  br i1 %eqtmp, label %cond_then_block3, label %cond_else_blockX
  br label %cond_else_blockX4

end_blockX:                                       ; preds = %cond_else_blockX169, %cond_then_block168, %cond_end103, %cond_end81, %cond_end57
  store i32 0, i32* %start_of_line, align 4
  br label %loop_continue_top_block

cond_then_block3:                                 ; preds = %cond_else_blockX8, %cond_else_blockX6, %cond_else_blockX4, %cond_else_blockX, %preprocess_skip.redo_no_start
  %p12 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p12 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p13 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p13 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %preprocess_skip.redo_no_start
  br label %cond_then_block14

cond_else_blockX:                                 ; preds = %preprocess_skip.redo_no_start
  %eqtmp5 = icmp eq i32 %c2, 9
  br i1 %eqtmp5, label %cond_then_block3, label %cond_else_blockX4
  br label %cond_else_blockX6

cond_else_blockX4:                                ; preds = %cond_else_blockX, %preprocess_skip.redo_no_start
  %eqtmp7 = icmp eq i32 %c2, 12
  br i1 %eqtmp7, label %cond_then_block3, label %cond_else_blockX6
  br label %cond_else_blockX8

cond_else_blockX6:                                ; preds = %cond_else_blockX4, %cond_else_blockX
  %eqtmp9 = icmp eq i32 %c2, 11
  br i1 %eqtmp9, label %cond_then_block3, label %cond_else_blockX8
  br label %cond_else_blockX10

cond_else_blockX8:                                ; preds = %cond_else_blockX6, %cond_else_blockX4
  %eqtmp11 = icmp eq i32 %c2, 13
  br i1 %eqtmp11, label %cond_then_block3, label %cond_else_blockX10

cond_else_blockX10:                               ; preds = %cond_else_blockX8, %cond_else_blockX6
  %eqtmp16 = icmp eq i32 %c2, 10
  br i1 %eqtmp16, label %cond_then_block14, label %cond_else_blockX15

cond_then_block14:                                ; preds = %cond_else_blockX10, %cond_then_block3
  %file17 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file18 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL19 = getelementptr inbounds %BufferedFile, %BufferedFile* %file18, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL19, align 4
  %add20 = add i32 %line_num, 1
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file17, i32 0, i32 3
  store i32 %add20, i32* %fieldTU, align 4
  %file21 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL22 = getelementptr inbounds %BufferedFile, %BufferedFile* %file21, i32 0, i32 3
  %line_num23 = load i32, i32* %fieldLLL22, align 4
  %sub24 = sub i32 %line_num23, 1
  %p25 = load i8*, i8** %p, align 8
  %ptrToIntC26 = ptrtoint i8* %p25 to i64
  %add27 = add i64 %ptrToIntC26, 1
  %intToPtrB28 = inttoptr i64 %add27 to i8*
  store i8* %intToPtrB28, i8** %p, align 8
  %p29 = load i8*, i8** %p, align 8
  %ptrToIntI30 = ptrtoint i8* %p29 to i64
  %sub31 = sub i64 %ptrToIntI30, 1
  %iintToPtrD32 = inttoptr i64 %sub31 to i8*
  br label %preprocess_skip.redo_start
  br label %cond_then_block33

cond_else_blockX15:                               ; preds = %cond_else_blockX10
  %eqtmp35 = icmp eq i32 %c2, 92
  br i1 %eqtmp35, label %cond_then_block33, label %cond_else_blockX34

cond_then_block33:                                ; preds = %cond_else_blockX15, %cond_then_block14
  %file36 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p37 = load i8*, i8** %p, align 8
  %fieldTU38 = getelementptr inbounds %BufferedFile, %BufferedFile* %file36, i32 0, i32 0
  store i8* %p37, i8** %fieldTU38, align 8
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* %c, align 4
  %c39 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c39, -1
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_else_blockX34:                               ; preds = %cond_else_blockX15
  %eqtmp52 = icmp eq i32 %c2, 34
  br i1 %eqtmp52, label %cond_then_block50, label %cond_else_blockX51
  br label %cond_then_block50

cond_jump_then:                                   ; preds = %cond_then_block33
  call void @expect(i8* bitcast ([7 x i8]* @39 to i8*))
  br label %cond_end

cond_jump_elif0:                                  ; preds = %cond_then_block33
  %c40 = load i32, i32* %c, align 4
  %eq41 = icmp eq i32 %c40, 92
  br i1 %eq41, label %cond_jump_elif_then0, label %cond_end

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %file42 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL43 = getelementptr inbounds %BufferedFile, %BufferedFile* %file42, i32 0, i32 0
  %buf_ptr44 = load i8*, i8** %fieldLLL43, align 8
  %element_addressAB = load i8*, i8** %fieldLLL43, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY45 = zext i8 %load_element to i32
  store i32 %icastKY45, i32* @ch, align 4
  %fun_result46 = call i32 @handle_stray_noerror()
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_elif_then0, %cond_jump_elif0, %cond_jump_then
  %file47 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL48 = getelementptr inbounds %BufferedFile, %BufferedFile* %file47, i32 0, i32 0
  %buf_ptr49 = load i8*, i8** %fieldLLL48, align 8
  store i8* %buf_ptr49, i8** %p, align 8
  br label %preprocess_skip.redo_no_start
  br label %cond_then_block50

cond_then_block50:                                ; preds = %cond_else_blockX51, %cond_else_blockX34, %cond_else_blockX34, %cond_end
  %in_warn_or_error55 = load i32, i32* %in_warn_or_error, align 4
  %icmpA = icmp ne i32 %in_warn_or_error55, 0
  br i1 %icmpA, label %cond_jump_then56, label %cond_end57

cond_else_blockX51:                               ; preds = %cond_else_blockX34
  %eqtmp54 = icmp eq i32 %c2, 39
  br i1 %eqtmp54, label %cond_then_block50, label %cond_else_blockX53

cond_else_blockX53:                               ; preds = %after_break, %cond_else_blockX51
  %eqtmp63 = icmp eq i32 %c2, 47
  br i1 %eqtmp63, label %cond_then_block61, label %cond_else_blockX62

cond_jump_then56:                                 ; preds = %cond_then_block50
  br label %preprocess_skip._default
  br label %cond_end57

cond_end57:                                       ; preds = %cond_jump_then56, %cond_then_block50
  %p58 = load i8*, i8** %p, align 8
  %c59 = load i32, i32* %c, align 4
  %fun_result60 = call i8* @parse_pp_string(i8* %p58, i32 %c59, %CString* null)
  store i8* %fun_result60, i8** %p, align 8
  br label %end_blockX

preprocess_skip._default:                         ; preds = %after_break167, %cond_jump_then66, %cond_jump_then56
  br label %cond_then_block168

after_break:                                      ; No predecessors!
  br label %cond_else_blockX53
  br label %cond_else_blockX62

cond_then_block61:                                ; preds = %cond_else_blockX53
  %in_warn_or_error64 = load i32, i32* %in_warn_or_error, align 4
  %icmpA65 = icmp ne i32 %in_warn_or_error64, 0
  br i1 %icmpA65, label %cond_jump_then66, label %cond_end67

cond_else_blockX62:                               ; preds = %after_break88, %cond_else_blockX53, %after_break
  %eqtmp91 = icmp eq i32 %c2, 35
  br i1 %eqtmp91, label %cond_then_block89, label %cond_else_blockX90

cond_jump_then66:                                 ; preds = %cond_then_block61
  br label %preprocess_skip._default
  br label %cond_end67

cond_end67:                                       ; preds = %cond_jump_then66, %cond_then_block61
  %file68 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p69 = load i8*, i8** %p, align 8
  %fieldTU70 = getelementptr inbounds %BufferedFile, %BufferedFile* %file68, i32 0, i32 0
  store i8* %p69, i8** %fieldTU70, align 8
  %p71 = load i8*, i8** %p, align 8
  %derefference_valueB72 = load i8, i8* %p71, align 1
  %icastKY73 = zext i8 %derefference_valueB72 to i32
  store i32 %icastKY73, i32* @ch, align 4
  call void @minp()
  %file74 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL75 = getelementptr inbounds %BufferedFile, %BufferedFile* %file74, i32 0, i32 0
  %buf_ptr76 = load i8*, i8** %fieldLLL75, align 8
  store i8* %buf_ptr76, i8** %p, align 8
  %ch = load i32, i32* @ch, align 4
  %eq77 = icmp eq i32 %ch, 42
  br i1 %eq77, label %cond_jump_then78, label %cond_jump_elif079

cond_jump_then78:                                 ; preds = %cond_end67
  %p82 = load i8*, i8** %p, align 8
  %fun_result83 = call i8* @parse_comment(i8* %p82)
  store i8* %fun_result83, i8** %p, align 8
  br label %cond_end81

cond_jump_elif079:                                ; preds = %cond_end67
  %ch84 = load i32, i32* @ch, align 4
  %eq85 = icmp eq i32 %ch84, 47
  br i1 %eq85, label %cond_jump_elif_then080, label %cond_end81

cond_jump_elif_then080:                           ; preds = %cond_jump_elif079
  %p86 = load i8*, i8** %p, align 8
  %fun_result87 = call i8* @parse_line_comment(i8* %p86)
  store i8* %fun_result87, i8** %p, align 8
  br label %cond_end81

cond_end81:                                       ; preds = %cond_jump_elif_then080, %cond_jump_elif079, %cond_jump_then78
  br label %end_blockX

after_break88:                                    ; No predecessors!
  br label %cond_else_blockX62
  br label %cond_else_blockX90

cond_then_block89:                                ; preds = %cond_else_blockX62
  %p92 = load i8*, i8** %p, align 8
  %ptrToIntC93 = ptrtoint i8* %p92 to i64
  %add94 = add i64 %ptrToIntC93, 1
  %intToPtrB95 = inttoptr i64 %add94 to i8*
  store i8* %intToPtrB95, i8** %p, align 8
  %p96 = load i8*, i8** %p, align 8
  %ptrToIntI97 = ptrtoint i8* %p96 to i64
  %sub98 = sub i64 %ptrToIntI97, 1
  %iintToPtrD99 = inttoptr i64 %sub98 to i8*
  %start_of_line100 = load i32, i32* %start_of_line, align 4
  %icmpA101 = icmp ne i32 %start_of_line100, 0
  br i1 %icmpA101, label %cond_jump_then102, label %cond_end103

cond_else_blockX90:                               ; preds = %cond_else_blockX62, %after_break88
  br label %cond_then_block168

cond_jump_then102:                                ; preds = %cond_then_block89
  %file104 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p105 = load i8*, i8** %p, align 8
  %fieldTU106 = getelementptr inbounds %BufferedFile, %BufferedFile* %file104, i32 0, i32 0
  store i8* %p105, i8** %fieldTU106, align 8
  call void @next_nomacro()
  %file107 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL108 = getelementptr inbounds %BufferedFile, %BufferedFile* %file107, i32 0, i32 0
  %buf_ptr109 = load i8*, i8** %fieldLLL108, align 8
  store i8* %buf_ptr109, i8** %p, align 8
  %a110 = load i32, i32* %a, align 4
  %eq111 = icmp eq i32 %a110, 0
  store i1 %eq111, i1* %andand, align 1
  br i1 %eq111, label %cond_jump_then112, label %cond_jump_end

cond_end103:                                      ; preds = %cond_end148, %cond_then_block89
  br label %end_blockX

cond_jump_then112:                                ; preds = %cond_jump_then102
  %tok = load i32, i32* @tok, align 4
  %eq114 = icmp eq i32 %tok, 260
  store i1 %eq114, i1* %oror113, align 1
  br i1 %eq114, label %cond_jump_end116, label %cond_jump_then115

cond_jump_end:                                    ; preds = %cond_jump_end121, %cond_jump_then102
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then127, label %cond_end128

cond_jump_then115:                                ; preds = %cond_jump_then112
  %tok117 = load i32, i32* @tok, align 4
  %eq118 = icmp eq i32 %tok117, 318
  %oror119 = or i1 %eq114, %eq118
  store i1 %oror119, i1* %oror113, align 1
  br label %cond_jump_end116

cond_jump_end116:                                 ; preds = %cond_jump_then115, %cond_jump_then112
  %oror_result_value = load i1, i1* %oror113, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end121, label %cond_jump_then120

cond_jump_then120:                                ; preds = %cond_jump_end116
  %tok122 = load i32, i32* @tok, align 4
  %eq123 = icmp eq i32 %tok122, 319
  %oror124 = or i1 %oror_result_value, %eq123
  store i1 %oror124, i1* %oror, align 1
  br label %cond_jump_end121

cond_jump_end121:                                 ; preds = %cond_jump_then120, %cond_jump_end116
  %oror_result_value125 = load i1, i1* %oror, align 1
  %andand126 = and i1 %eq111, %oror_result_value125
  store i1 %andand126, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_then127:                                ; preds = %cond_jump_end
  br label %preprocess_skip.the_end
  br label %cond_end128

cond_end128:                                      ; preds = %cond_jump_then127, %cond_jump_end
  %tok131 = load i32, i32* @tok, align 4
  %eq132 = icmp eq i32 %tok131, 259
  store i1 %eq132, i1* %oror130, align 1
  br i1 %eq132, label %cond_jump_end134, label %cond_jump_then133

preprocess_skip.the_end:                          ; preds = %cond_end_block, %cond_jump_then127
  %file179 = load %BufferedFile*, %BufferedFile** @file, align 8
  %p180 = load i8*, i8** %p, align 8
  %fieldTU181 = getelementptr inbounds %BufferedFile, %BufferedFile* %file179, i32 0, i32 0
  store i8* %p180, i8** %fieldTU181, align 8
  ret void

cond_jump_then133:                                ; preds = %cond_end128
  %tok135 = load i32, i32* @tok, align 4
  %eq136 = icmp eq i32 %tok135, 316
  %oror137 = or i1 %eq132, %eq136
  store i1 %oror137, i1* %oror130, align 1
  br label %cond_jump_end134

cond_jump_end134:                                 ; preds = %cond_jump_then133, %cond_end128
  %oror_result_value138 = load i1, i1* %oror130, align 1
  store i1 %oror_result_value138, i1* %oror129, align 1
  br i1 %oror_result_value138, label %cond_jump_end140, label %cond_jump_then139

cond_jump_then139:                                ; preds = %cond_jump_end134
  %tok141 = load i32, i32* @tok, align 4
  %eq142 = icmp eq i32 %tok141, 317
  %oror143 = or i1 %oror_result_value138, %eq142
  store i1 %oror143, i1* %oror129, align 1
  br label %cond_jump_end140

cond_jump_end140:                                 ; preds = %cond_jump_then139, %cond_jump_end134
  %oror_result_value144 = load i1, i1* %oror129, align 1
  br i1 %oror_result_value144, label %cond_jump_then145, label %cond_jump_elif0146

cond_jump_then145:                                ; preds = %cond_jump_end140
  %a149 = load i32, i32* %a, align 4
  %add150 = add i32 %a149, 1
  store i32 %add150, i32* %a, align 4
  %a151 = load i32, i32* %a, align 4
  %sub152 = sub i32 %a151, 1
  br label %cond_end148

cond_jump_elif0146:                               ; preds = %cond_jump_end140
  %tok153 = load i32, i32* @tok, align 4
  %eq154 = icmp eq i32 %tok153, 319
  br i1 %eq154, label %cond_jump_elif_then0147, label %cond_jump_elif1

cond_jump_elif_then0147:                          ; preds = %cond_jump_elif0146
  %a155 = load i32, i32* %a, align 4
  %sub156 = sub i32 %a155, 1
  store i32 %sub156, i32* %a, align 4
  %add157 = add i32 %sub156, 1
  br label %cond_end148

cond_jump_elif1:                                  ; preds = %cond_jump_elif0146
  %tok159 = load i32, i32* @tok, align 4
  %eq160 = icmp eq i32 %tok159, 322
  store i1 %eq160, i1* %oror158, align 1
  br i1 %eq160, label %cond_jump_end162, label %cond_jump_then161

cond_jump_elif_then1:                             ; preds = %cond_jump_end162
  store i32 1, i32* %in_warn_or_error, align 4
  br label %cond_end148

cond_end148:                                      ; preds = %cond_jump_elif_then1, %cond_jump_end162, %cond_jump_elif_then0147, %cond_jump_then145
  br label %cond_end103

cond_jump_then161:                                ; preds = %cond_jump_elif1
  %tok163 = load i32, i32* @tok, align 4
  %eq164 = icmp eq i32 %tok163, 323
  %oror165 = or i1 %eq160, %eq164
  store i1 %oror165, i1* %oror158, align 1
  br label %cond_jump_end162

cond_jump_end162:                                 ; preds = %cond_jump_then161, %cond_jump_elif1
  %oror_result_value166 = load i1, i1* %oror158, align 1
  br i1 %oror_result_value166, label %cond_jump_elif_then1, label %cond_end148

after_break167:                                   ; No predecessors!
  br label %preprocess_skip._default

cond_then_block168:                               ; preds = %cond_else_blockX90, %preprocess_skip._default
  %p170 = load i8*, i8** %p, align 8
  %ptrToIntC171 = ptrtoint i8* %p170 to i64
  %add172 = add i64 %ptrToIntC171, 1
  %intToPtrB173 = inttoptr i64 %add172 to i8*
  store i8* %intToPtrB173, i8** %p, align 8
  %p174 = load i8*, i8** %p, align 8
  %ptrToIntI175 = ptrtoint i8* %p174 to i64
  %sub176 = sub i64 %ptrToIntI175, 1
  %iintToPtrD177 = inttoptr i64 %sub176 to i8*
  br label %end_blockX

cond_else_blockX169:                              ; preds = %after_break178
  br label %end_blockX

after_break178:                                   ; No predecessors!
  br label %cond_else_blockX169
}

define void @save_parse_state(%ParseState* %0) {
entry:
  %s = alloca %ParseState*, align 8
  %s1 = alloca %ParseState**, align 8
  store %ParseState* %0, %ParseState** %s, align 8
  store %ParseState** %s, %ParseState*** %s1, align 8
  %s2 = load %ParseState*, %ParseState** %s, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL, align 4
  %fieldTU = getelementptr inbounds %ParseState, %ParseState* %s2, i32 0, i32 1
  store i32 %line_num, i32* %fieldTU, align 4
  %s3 = load %ParseState*, %ParseState** %s, align 8
  %macro_ptr = load i32*, i32** @macro_ptr, align 8
  %fieldTU4 = getelementptr inbounds %ParseState, %ParseState* %s3, i32 0, i32 0
  store i32* %macro_ptr, i32** %fieldTU4, align 8
  %s5 = load %ParseState*, %ParseState** %s, align 8
  %tok = load i32, i32* @tok, align 4
  %fieldTU6 = getelementptr inbounds %ParseState, %ParseState* %s5, i32 0, i32 2
  store i32 %tok, i32* %fieldTU6, align 4
  %s7 = load %ParseState*, %ParseState** %s, align 8
  %tokc = load %CValue, %CValue* @tokc, align 16
  %fieldTU8 = getelementptr inbounds %ParseState, %ParseState* %s7, i32 0, i32 3
  store %CValue %tokc, %CValue* %fieldTU8, align 16
  ret void
}

define void @restore_parse_state(%ParseState* %0) {
entry:
  %s = alloca %ParseState*, align 8
  %s1 = alloca %ParseState**, align 8
  store %ParseState* %0, %ParseState** %s, align 8
  store %ParseState** %s, %ParseState*** %s1, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %s2 = load %ParseState*, %ParseState** %s, align 8
  %fieldLLL = getelementptr inbounds %ParseState, %ParseState* %s2, i32 0, i32 1
  %line_num = load i32, i32* %fieldLLL, align 4
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  store i32 %line_num, i32* %fieldTU, align 4
  %s3 = load %ParseState*, %ParseState** %s, align 8
  %fieldLLL4 = getelementptr inbounds %ParseState, %ParseState* %s3, i32 0, i32 0
  %macro_ptr = load i32*, i32** %fieldLLL4, align 8
  store i32* %macro_ptr, i32** @macro_ptr, align 8
  %s5 = load %ParseState*, %ParseState** %s, align 8
  %fieldLLL6 = getelementptr inbounds %ParseState, %ParseState* %s5, i32 0, i32 2
  %tok = load i32, i32* %fieldLLL6, align 4
  store i32 %tok, i32* @tok, align 4
  %s7 = load %ParseState*, %ParseState** %s, align 8
  %fieldLLL8 = getelementptr inbounds %ParseState, %ParseState* %s7, i32 0, i32 3
  %tokc = load %CValue, %CValue* %fieldLLL8, align 16
  store %CValue %tokc, %CValue* @tokc, align 16
  ret void
}

define internal void @tok_str_free(i32* %0) {
entry:
  %str = alloca i32*, align 8
  %str1 = alloca i32**, align 8
  store i32* %0, i32** %str, align 8
  store i32** %str, i32*** %str1, align 8
  %str2 = load i32*, i32** %str, align 8
  %castAQ = bitcast i32* %str2 to i8*
  call void @tcc_free(i8* %castAQ)
  ret void
}

define internal i32* @tok_str_realloc(%TokenString* %0) {
entry:
  %len = alloca i32, align 4
  %str = alloca i32*, align 8
  %s = alloca %TokenString*, align 8
  %s1 = alloca %TokenString**, align 8
  store %TokenString* %0, %TokenString** %s, align 8
  store %TokenString** %s, %TokenString*** %s1, align 8
  %s2 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL = getelementptr inbounds %TokenString, %TokenString* %s2, i32 0, i32 2
  %allocated_len = load i32, i32* %fieldLLL, align 4
  %eq = icmp eq i32 %allocated_len, 0
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i32 8, i32* %len, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %s3 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL4 = getelementptr inbounds %TokenString, %TokenString* %s3, i32 0, i32 2
  %allocated_len5 = load i32, i32* %fieldLLL4, align 4
  %mul = mul i32 %allocated_len5, 2
  store i32 %mul, i32* %len, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %s6 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL7 = getelementptr inbounds %TokenString, %TokenString* %s6, i32 0, i32 0
  %str8 = load i32*, i32** %fieldLLL7, align 8
  %castAQ = bitcast i32* %str8 to i8*
  %len9 = load i32, i32* %len, align 4
  %icastD = sext i32 %len9 to i64
  %mul10 = mul i64 %icastD, 4
  %fun_result = call i8* @tcc_realloc(i8* %castAQ, i64 %mul10)
  %castAQ11 = bitcast i8* %fun_result to i32*
  store i32* %castAQ11, i32** %str, align 8
  %str12 = load i32*, i32** %str, align 8
  %logical_denial = icmp eq i32* %str12, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then13, label %cond_end14

cond_jump_then13:                                 ; preds = %cond_end
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @40 to i8*))
  br label %cond_end14

cond_end14:                                       ; preds = %cond_jump_then13, %cond_end
  %s15 = load %TokenString*, %TokenString** %s, align 8
  %len16 = load i32, i32* %len, align 4
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s15, i32 0, i32 2
  store i32 %len16, i32* %fieldTU, align 4
  %s17 = load %TokenString*, %TokenString** %s, align 8
  %str18 = load i32*, i32** %str, align 8
  %fieldTU19 = getelementptr inbounds %TokenString, %TokenString* %s17, i32 0, i32 0
  store i32* %str18, i32** %fieldTU19, align 8
  %str20 = load i32*, i32** %str, align 8
  ret i32* %str20
}

define internal void @tok_str_add(%TokenString* %0, i32 %1) {
entry:
  %str = alloca i32*, align 8
  %len = alloca i32, align 4
  %s = alloca %TokenString*, align 8
  %s1 = alloca %TokenString**, align 8
  store %TokenString* %0, %TokenString** %s, align 8
  store %TokenString** %s, %TokenString*** %s1, align 8
  %t = alloca i32, align 4
  %t2 = alloca i32*, align 8
  store i32 %1, i32* %t, align 4
  store i32* %t, i32** %t2, align 8
  %s3 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL = getelementptr inbounds %TokenString, %TokenString* %s3, i32 0, i32 1
  %len4 = load i32, i32* %fieldLLL, align 4
  store i32 %len4, i32* %len, align 4
  %s5 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL6 = getelementptr inbounds %TokenString, %TokenString* %s5, i32 0, i32 0
  %str7 = load i32*, i32** %fieldLLL6, align 8
  store i32* %str7, i32** %str, align 8
  %len8 = load i32, i32* %len, align 4
  %s9 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL10 = getelementptr inbounds %TokenString, %TokenString* %s9, i32 0, i32 2
  %allocated_len = load i32, i32* %fieldLLL10, align 4
  %gteq_signed = icmp sge i32 %len8, %allocated_len
  br i1 %gteq_signed, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s11 = load %TokenString*, %TokenString** %s, align 8
  %fun_result = call i32* @tok_str_realloc(%TokenString* %s11)
  store i32* %fun_result, i32** %str, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %str12 = load i32*, i32** %str, align 8
  %len13 = load i32, i32* %len, align 4
  %add = add i32 %len13, 1
  store i32 %add, i32* %len, align 4
  %len14 = load i32, i32* %len, align 4
  %sub = sub i32 %len14, 1
  %t15 = load i32, i32* %t, align 4
  %element_addressXYXY = getelementptr i32, i32* %str12, i32 %sub
  store i32 %t15, i32* %element_addressXYXY, align 4
  %s16 = load %TokenString*, %TokenString** %s, align 8
  %len17 = load i32, i32* %len, align 4
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s16, i32 0, i32 1
  store i32 %len17, i32* %fieldTU, align 4
  ret void
}

define internal void @tok_str_add2(%TokenString* %0, i32 %1, %CValue* %2) {
entry:
  %cstr = alloca %CString*, align 8
  %nb_words = alloca i32, align 4
  %str = alloca i32*, align 8
  %len = alloca i32, align 4
  %s = alloca %TokenString*, align 8
  %s1 = alloca %TokenString**, align 8
  store %TokenString* %0, %TokenString** %s, align 8
  store %TokenString** %s, %TokenString*** %s1, align 8
  %t = alloca i32, align 4
  %t2 = alloca i32*, align 8
  store i32 %1, i32* %t, align 4
  store i32* %t, i32** %t2, align 8
  %cv = alloca %CValue*, align 8
  %cv3 = alloca %CValue**, align 8
  store %CValue* %2, %CValue** %cv, align 8
  store %CValue** %cv, %CValue*** %cv3, align 8
  %s4 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL = getelementptr inbounds %TokenString, %TokenString* %s4, i32 0, i32 1
  %len5 = load i32, i32* %fieldLLL, align 4
  store i32 %len5, i32* %len, align 4
  %s6 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL7 = getelementptr inbounds %TokenString, %TokenString* %s6, i32 0, i32 0
  %str8 = load i32*, i32** %fieldLLL7, align 8
  store i32* %str8, i32** %str, align 8
  %len9 = load i32, i32* %len, align 4
  %add = add i32 %len9, 4
  %s10 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL11 = getelementptr inbounds %TokenString, %TokenString* %s10, i32 0, i32 2
  %allocated_len = load i32, i32* %fieldLLL11, align 4
  %gt = icmp sgt i32 %add, %allocated_len
  br i1 %gt, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s12 = load %TokenString*, %TokenString** %s, align 8
  %fun_result = call i32* @tok_str_realloc(%TokenString* %s12)
  store i32* %fun_result, i32** %str, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %str13 = load i32*, i32** %str, align 8
  %len14 = load i32, i32* %len, align 4
  %add15 = add i32 %len14, 1
  store i32 %add15, i32* %len, align 4
  %len16 = load i32, i32* %len, align 4
  %sub = sub i32 %len16, 1
  %t17 = load i32, i32* %t, align 4
  %element_addressXYXY = getelementptr i32, i32* %str13, i32 %sub
  store i32 %t17, i32* %element_addressXYXY, align 4
  %t18 = load i32, i32* %t, align 4
  %eqtmp = icmp eq i32 %t18, 179
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX19

end_blockX:                                       ; preds = %cond_else_blockX182, %cond_then_block181, %cond_then_block129, %cond_then_block97, %cond_end_block, %cond_then_block
  %s184 = load %TokenString*, %TokenString** %s, align 8
  %len185 = load i32, i32* %len, align 4
  %fieldTU186 = getelementptr inbounds %TokenString, %TokenString* %s184, i32 0, i32 1
  store i32 %len185, i32* %fieldTU186, align 4
  ret void

cond_then_block:                                  ; preds = %cond_else_blockX25, %cond_else_blockX23, %cond_else_blockX21, %cond_else_blockX19, %cond_else_blockX, %cond_end
  %str29 = load i32*, i32** %str, align 8
  %len30 = load i32, i32* %len, align 4
  %add31 = add i32 %len30, 1
  store i32 %add31, i32* %len, align 4
  %len32 = load i32, i32* %len, align 4
  %sub33 = sub i32 %len32, 1
  %cv34 = load %CValue*, %CValue** %cv, align 8
  %fieldPU = getelementptr inbounds %CValue, %CValue* %cv34, i32 0, i32 0
  %ICASTO = bitcast %CValue** %cv to [1 x i32]*
  %array_castG = bitcast [1 x i32]* %ICASTO to i32*
  %gepLY = getelementptr i32, i32* %array_castG, i32 0
  %elementYYY = load i32, i32* %gepLY, align 4
  %element_addressXYXY35 = getelementptr i32, i32* %str29, i32 %sub33
  store i32 %elementYYY, i32* %element_addressXYXY35, align 4
  br label %end_blockX

cond_else_blockX:                                 ; preds = %cond_end
  %eqtmp20 = icmp eq i32 %t18, 200
  br i1 %eqtmp20, label %cond_then_block, label %cond_else_blockX19
  br label %cond_else_blockX21

cond_else_blockX19:                               ; preds = %cond_else_blockX, %cond_end
  %eqtmp22 = icmp eq i32 %t18, 180
  br i1 %eqtmp22, label %cond_then_block, label %cond_else_blockX21
  br label %cond_else_blockX23

cond_else_blockX21:                               ; preds = %cond_else_blockX19, %cond_else_blockX
  %eqtmp24 = icmp eq i32 %t18, 183
  br i1 %eqtmp24, label %cond_then_block, label %cond_else_blockX23
  br label %cond_else_blockX25

cond_else_blockX23:                               ; preds = %cond_else_blockX21, %cond_else_blockX19
  %eqtmp26 = icmp eq i32 %t18, 185
  br i1 %eqtmp26, label %cond_then_block, label %cond_else_blockX25
  br label %cond_else_blockX27

cond_else_blockX25:                               ; preds = %cond_else_blockX23, %cond_else_blockX21
  %eqtmp28 = icmp eq i32 %t18, 186
  br i1 %eqtmp28, label %cond_then_block, label %cond_else_blockX27

cond_else_blockX27:                               ; preds = %after_break, %cond_else_blockX25, %cond_else_blockX23
  %eqtmp38 = icmp eq i32 %t18, 206
  br i1 %eqtmp38, label %cond_then_block36, label %cond_else_blockX37
  br label %cond_else_blockX39

after_break:                                      ; No predecessors!
  br label %cond_else_blockX27
  br label %cond_else_blockX37

cond_then_block36:                                ; preds = %cond_else_blockX39, %cond_else_blockX37, %cond_else_blockX27
  %cv43 = load %CValue*, %CValue** %cv, align 8
  %ICASTO44 = bitcast %CValue* %cv43 to %CString**
  %cstr45 = load %CString*, %CString** %ICASTO44, align 8
  %fieldLLL46 = getelementptr inbounds %CString, %CString* %cstr45, i32 0, i32 0
  %size = load i32, i32* %fieldLLL46, align 4
  %icastD = sext i32 %size to i64
  %add47 = add i64 32, %icastD
  %add48 = add i64 %add47, 3
  %rshifttmp = lshr i64 %add48, 2
  %icastM = trunc i64 %rshifttmp to i32
  store i32 %icastM, i32* %nb_words, align 4
  br label %loop_top_block

cond_else_blockX37:                               ; preds = %cond_else_blockX27, %after_break
  %eqtmp40 = icmp eq i32 %t18, 181
  br i1 %eqtmp40, label %cond_then_block36, label %cond_else_blockX39
  br label %cond_else_blockX41

cond_else_blockX39:                               ; preds = %cond_else_blockX37, %cond_else_blockX27
  %eqtmp42 = icmp eq i32 %t18, 184
  br i1 %eqtmp42, label %cond_then_block36, label %cond_else_blockX41

cond_else_blockX41:                               ; preds = %after_break96, %cond_else_blockX39, %cond_else_blockX37
  %eqtmp99 = icmp eq i32 %t18, 192
  br i1 %eqtmp99, label %cond_then_block97, label %cond_else_blockX98
  br label %cond_else_blockX100

loop_top_block:                                   ; preds = %cond_then_block56, %cond_then_block36
  %len49 = load i32, i32* %len, align 4
  %nb_words50 = load i32, i32* %nb_words, align 4
  %add51 = add i32 %len49, %nb_words50
  %s52 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL53 = getelementptr inbounds %TokenString, %TokenString* %s52, i32 0, i32 2
  %allocated_len54 = load i32, i32* %fieldLLL53, align 4
  %gt55 = icmp sgt i32 %add51, %allocated_len54
  br i1 %gt55, label %cond_then_block56, label %cond_end_block

cond_then_block56:                                ; preds = %loop_top_block
  %s57 = load %TokenString*, %TokenString** %s, align 8
  %fun_result58 = call i32* @tok_str_realloc(%TokenString* %s57)
  store i32* %fun_result58, i32** %str, align 8
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %str59 = load i32*, i32** %str, align 8
  %len60 = load i32, i32* %len, align 4
  %ptrToIntC = ptrtoint i32* %str59 to i64
  %sext = sext i32 %len60 to i64
  %mul = mul i64 %sext, 4
  %add61 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add61 to i32*
  %castAQ = bitcast i32* %intToPtrB to %CString*
  store %CString* %castAQ, %CString** %cstr, align 8
  %cstr62 = load %CString*, %CString** %cstr, align 8
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr62, i32 0, i32 1
  store i8* null, i8** %fieldTU, align 8
  %cstr63 = load %CString*, %CString** %cstr, align 8
  %cv64 = load %CValue*, %CValue** %cv, align 8
  %ICASTO65 = bitcast %CValue* %cv64 to %CString**
  %cstr66 = load %CString*, %CString** %ICASTO65, align 8
  %fieldLLL67 = getelementptr inbounds %CString, %CString* %cstr66, i32 0, i32 0
  %size68 = load i32, i32* %fieldLLL67, align 4
  %fieldTU69 = getelementptr inbounds %CString, %CString* %cstr63, i32 0, i32 0
  store i32 %size68, i32* %fieldTU69, align 4
  %cstr70 = load %CString*, %CString** %cstr, align 8
  %fieldTU71 = getelementptr inbounds %CString, %CString* %cstr70, i32 0, i32 3
  store i8* null, i8** %fieldTU71, align 8
  %cstr72 = load %CString*, %CString** %cstr, align 8
  %cstr73 = load %CString*, %CString** %cstr, align 8
  %fieldLLL74 = getelementptr inbounds %CString, %CString* %cstr73, i32 0, i32 0
  %size75 = load i32, i32* %fieldLLL74, align 4
  %fieldTU76 = getelementptr inbounds %CString, %CString* %cstr72, i32 0, i32 2
  store i32 %size75, i32* %fieldTU76, align 4
  %cstr77 = load %CString*, %CString** %cstr, align 8
  %castAQ78 = bitcast %CString* %cstr77 to i8*
  %ptrToIntC79 = ptrtoint i8* %castAQ78 to i64
  %add80 = add i64 %ptrToIntC79, 32
  %intToPtrB81 = inttoptr i64 %add80 to i8*
  %cv82 = load %CValue*, %CValue** %cv, align 8
  %ICASTO83 = bitcast %CValue* %cv82 to %CString**
  %cstr84 = load %CString*, %CString** %ICASTO83, align 8
  %fieldLLL85 = getelementptr inbounds %CString, %CString* %cstr84, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL85, align 8
  %cstr86 = load %CString*, %CString** %cstr, align 8
  %fieldLLL87 = getelementptr inbounds %CString, %CString* %cstr86, i32 0, i32 0
  %size88 = load i32, i32* %fieldLLL87, align 4
  %icastD89 = sext i32 %size88 to i64
  %fun_result90 = call i8* @memcpy(i8* %intToPtrB81, i8* %data, i64 %icastD89)
  %len91 = load i32, i32* %len, align 4
  %nb_words92 = load i32, i32* %nb_words, align 4
  %add93 = add i32 %len91, %nb_words92
  store i32 %add93, i32* %len, align 4
  %nb_words94 = load i32, i32* %nb_words, align 4
  %sub95 = sub i32 %add93, %nb_words94
  br label %end_blockX

after_break96:                                    ; No predecessors!
  br label %cond_else_blockX41
  br label %cond_else_blockX98

cond_then_block97:                                ; preds = %cond_else_blockX100, %cond_else_blockX98, %cond_else_blockX41
  %str104 = load i32*, i32** %str, align 8
  %len105 = load i32, i32* %len, align 4
  %add106 = add i32 %len105, 1
  store i32 %add106, i32* %len, align 4
  %len107 = load i32, i32* %len, align 4
  %sub108 = sub i32 %len107, 1
  %cv109 = load %CValue*, %CValue** %cv, align 8
  %fieldPU110 = getelementptr inbounds %CValue, %CValue* %cv109, i32 0, i32 0
  %ICASTO111 = bitcast %CValue** %cv to [1 x i32]*
  %array_castG112 = bitcast [1 x i32]* %ICASTO111 to i32*
  %gepLY113 = getelementptr i32, i32* %array_castG112, i32 0
  %elementYYY114 = load i32, i32* %gepLY113, align 4
  %element_addressXYXY115 = getelementptr i32, i32* %str104, i32 %sub108
  store i32 %elementYYY114, i32* %element_addressXYXY115, align 4
  %str116 = load i32*, i32** %str, align 8
  %len117 = load i32, i32* %len, align 4
  %add118 = add i32 %len117, 1
  store i32 %add118, i32* %len, align 4
  %len119 = load i32, i32* %len, align 4
  %sub120 = sub i32 %len119, 1
  %cv121 = load %CValue*, %CValue** %cv, align 8
  %fieldPU122 = getelementptr inbounds %CValue, %CValue* %cv121, i32 0, i32 0
  %ICASTO123 = bitcast %CValue** %cv to [1 x i32]*
  %array_castG124 = bitcast [1 x i32]* %ICASTO123 to i32*
  %gepLY125 = getelementptr i32, i32* %array_castG124, i32 1
  %elementYYY126 = load i32, i32* %gepLY125, align 4
  %element_addressXYXY127 = getelementptr i32, i32* %str116, i32 %sub120
  store i32 %elementYYY126, i32* %element_addressXYXY127, align 4
  br label %end_blockX

cond_else_blockX98:                               ; preds = %cond_else_blockX41, %after_break96
  %eqtmp101 = icmp eq i32 %t18, 201
  br i1 %eqtmp101, label %cond_then_block97, label %cond_else_blockX100
  br label %cond_else_blockX102

cond_else_blockX100:                              ; preds = %cond_else_blockX98, %cond_else_blockX41
  %eqtmp103 = icmp eq i32 %t18, 202
  br i1 %eqtmp103, label %cond_then_block97, label %cond_else_blockX102

cond_else_blockX102:                              ; preds = %after_break128, %cond_else_blockX100, %cond_else_blockX98
  %eqtmp131 = icmp eq i32 %t18, 193
  br i1 %eqtmp131, label %cond_then_block129, label %cond_else_blockX130

after_break128:                                   ; No predecessors!
  br label %cond_else_blockX102
  br label %cond_else_blockX130

cond_then_block129:                               ; preds = %cond_else_blockX102
  %str132 = load i32*, i32** %str, align 8
  %len133 = load i32, i32* %len, align 4
  %add134 = add i32 %len133, 1
  store i32 %add134, i32* %len, align 4
  %len135 = load i32, i32* %len, align 4
  %sub136 = sub i32 %len135, 1
  %cv137 = load %CValue*, %CValue** %cv, align 8
  %fieldPU138 = getelementptr inbounds %CValue, %CValue* %cv137, i32 0, i32 0
  %ICASTO139 = bitcast %CValue** %cv to [1 x i32]*
  %array_castG140 = bitcast [1 x i32]* %ICASTO139 to i32*
  %gepLY141 = getelementptr i32, i32* %array_castG140, i32 0
  %elementYYY142 = load i32, i32* %gepLY141, align 4
  %element_addressXYXY143 = getelementptr i32, i32* %str132, i32 %sub136
  store i32 %elementYYY142, i32* %element_addressXYXY143, align 4
  %str144 = load i32*, i32** %str, align 8
  %len145 = load i32, i32* %len, align 4
  %add146 = add i32 %len145, 1
  store i32 %add146, i32* %len, align 4
  %len147 = load i32, i32* %len, align 4
  %sub148 = sub i32 %len147, 1
  %cv149 = load %CValue*, %CValue** %cv, align 8
  %fieldPU150 = getelementptr inbounds %CValue, %CValue* %cv149, i32 0, i32 0
  %ICASTO151 = bitcast %CValue** %cv to [1 x i32]*
  %array_castG152 = bitcast [1 x i32]* %ICASTO151 to i32*
  %gepLY153 = getelementptr i32, i32* %array_castG152, i32 1
  %elementYYY154 = load i32, i32* %gepLY153, align 4
  %element_addressXYXY155 = getelementptr i32, i32* %str144, i32 %sub148
  store i32 %elementYYY154, i32* %element_addressXYXY155, align 4
  %str156 = load i32*, i32** %str, align 8
  %len157 = load i32, i32* %len, align 4
  %add158 = add i32 %len157, 1
  store i32 %add158, i32* %len, align 4
  %len159 = load i32, i32* %len, align 4
  %sub160 = sub i32 %len159, 1
  %cv161 = load %CValue*, %CValue** %cv, align 8
  %fieldPU162 = getelementptr inbounds %CValue, %CValue* %cv161, i32 0, i32 0
  %ICASTO163 = bitcast %CValue** %cv to [1 x i32]*
  %array_castG164 = bitcast [1 x i32]* %ICASTO163 to i32*
  %gepLY165 = getelementptr i32, i32* %array_castG164, i32 2
  %elementYYY166 = load i32, i32* %gepLY165, align 4
  %element_addressXYXY167 = getelementptr i32, i32* %str156, i32 %sub160
  store i32 %elementYYY166, i32* %element_addressXYXY167, align 4
  %str168 = load i32*, i32** %str, align 8
  %len169 = load i32, i32* %len, align 4
  %add170 = add i32 %len169, 1
  store i32 %add170, i32* %len, align 4
  %len171 = load i32, i32* %len, align 4
  %sub172 = sub i32 %len171, 1
  %cv173 = load %CValue*, %CValue** %cv, align 8
  %fieldPU174 = getelementptr inbounds %CValue, %CValue* %cv173, i32 0, i32 0
  %ICASTO175 = bitcast %CValue** %cv to [1 x i32]*
  %array_castG176 = bitcast [1 x i32]* %ICASTO175 to i32*
  %gepLY177 = getelementptr i32, i32* %array_castG176, i32 3
  %elementYYY178 = load i32, i32* %gepLY177, align 4
  %element_addressXYXY179 = getelementptr i32, i32* %str168, i32 %sub172
  store i32 %elementYYY178, i32* %element_addressXYXY179, align 4
  br label %end_blockX

cond_else_blockX130:                              ; preds = %after_break180, %cond_else_blockX102, %after_break128
  br label %cond_then_block181

after_break180:                                   ; No predecessors!
  br label %cond_else_blockX130
  br label %cond_else_blockX182

cond_then_block181:                               ; preds = %cond_else_blockX130
  br label %end_blockX

cond_else_blockX182:                              ; preds = %after_break183, %after_break180
  br label %end_blockX

after_break183:                                   ; No predecessors!
  br label %cond_else_blockX182
}

define internal void @tok_str_add_tok(%TokenString* %0) {
entry:
  %cval = alloca %CValue, align 16
  %s = alloca %TokenString*, align 8
  %s1 = alloca %TokenString**, align 8
  store %TokenString* %0, %TokenString** %s, align 8
  store %TokenString** %s, %TokenString*** %s1, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL, align 4
  %s2 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL3 = getelementptr inbounds %TokenString, %TokenString* %s2, i32 0, i32 3
  %last_line_num = load i32, i32* %fieldLLL3, align 4
  %not_eq = icmp ne i32 %line_num, %last_line_num
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s4 = load %TokenString*, %TokenString** %s, align 8
  %file5 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL6 = getelementptr inbounds %BufferedFile, %BufferedFile* %file5, i32 0, i32 3
  %line_num7 = load i32, i32* %fieldLLL6, align 4
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s4, i32 0, i32 3
  store i32 %line_num7, i32* %fieldTU, align 4
  %cval8 = load %CValue, %CValue* %cval, align 16
  %s9 = load %TokenString*, %TokenString** %s, align 8
  %fieldLLL10 = getelementptr inbounds %TokenString, %TokenString* %s9, i32 0, i32 3
  %last_line_num11 = load i32, i32* %fieldLLL10, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %last_line_num11, i32* %icastN, align 4
  %s12 = load %TokenString*, %TokenString** %s, align 8
  %cval13 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %s12, i32 186, %CValue* %cval)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %s14 = load %TokenString*, %TokenString** %s, align 8
  %tok = load i32, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  call void @tok_str_add2(%TokenString* %s14, i32 %tok, %CValue* @tokc)
  ret void
}

define internal void @define_undef(%Sym* %0) {
entry:
  %andand = alloca i1, align 1
  %v = alloca i32, align 4
  %s = alloca %Sym*, align 8
  %s1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %s, align 8
  store %Sym** %s, %Sym*** %s1, align 8
  %s2 = load %Sym*, %Sym** %s, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %s2, i32 0, i32 0
  %v3 = load i32, i32* %fieldLLL, align 4
  store i32 %v3, i32* %v, align 4
  %v4 = load i32, i32* %v, align 4
  %gteq_signed = icmp sge i32 %v4, 256
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %v5 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %le = icmp slt i32 %v5, %tok_ident
  %andand6 = and i1 %gteq_signed, %le
  store i1 %andand6, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then7, label %cond_end

cond_jump_then7:                                  ; preds = %cond_jump_end
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v8 = load i32, i32* %v, align 4
  %sub = sub i32 %v8, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldTU = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  store %Sym* null, %Sym** %fieldTU, align 8
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then7, %cond_jump_end
  %s9 = load %Sym*, %Sym** %s, align 8
  %fieldTU10 = getelementptr inbounds %Sym, %Sym* %s9, i32 0, i32 0
  store i32 0, i32* %fieldTU10, align 4
  ret void
}

define internal void @free_defines(%Sym* %0) {
entry:
  %andand = alloca i1, align 1
  %v = alloca i32, align 4
  %top1 = alloca %Sym*, align 8
  %top = alloca %Sym*, align 8
  %b = alloca %Sym*, align 8
  %b1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %b, align 8
  store %Sym** %b, %Sym*** %b1, align 8
  %define_stack = load %Sym*, %Sym** @define_stack, align 8
  store %Sym* %define_stack, %Sym** %top, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %sym_free_end, %entry
  %top2 = load %Sym*, %Sym** %top, align 8
  %b3 = load %Sym*, %Sym** %b, align 8
  %not_eq = icmp ne %Sym* %top2, %b3
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %top4 = load %Sym*, %Sym** %top, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %top4, i32 0, i32 5
  %prev = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %prev, %Sym** %top1, align 8
  %top5 = load %Sym*, %Sym** %top, align 8
  %fieldLLL6 = getelementptr inbounds %Sym, %Sym* %top5, i32 0, i32 2
  %c = load i64, i64* %fieldLLL6, align 4
  %icmpA = icmp ne i64 %c, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %b25 = load %Sym*, %Sym** %b, align 8
  store %Sym* %b25, %Sym** @define_stack, align 8
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %top7 = load %Sym*, %Sym** %top, align 8
  %fieldLLL8 = getelementptr inbounds %Sym, %Sym* %top7, i32 0, i32 2
  %c9 = load i64, i64* %fieldLLL8, align 4
  %castBA = inttoptr i64 %c9 to i32*
  call void @tok_str_free(i32* %castBA)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block
  %top10 = load %Sym*, %Sym** %top, align 8
  %fieldLLL11 = getelementptr inbounds %Sym, %Sym* %top10, i32 0, i32 0
  %v12 = load i32, i32* %fieldLLL11, align 4
  store i32 %v12, i32* %v, align 4
  %v13 = load i32, i32* %v, align 4
  %gteq_signed = icmp sge i32 %v13, 256
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then14, label %cond_jump_end

cond_jump_then14:                                 ; preds = %cond_end
  %v15 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %le = icmp slt i32 %v15, %tok_ident
  %andand16 = and i1 %gteq_signed, %le
  store i1 %andand16, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then14, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then17, label %cond_end18

cond_jump_then17:                                 ; preds = %cond_jump_end
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v19 = load i32, i32* %v, align 4
  %sub = sub i32 %v19, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldTU = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  store %Sym* null, %Sym** %fieldTU, align 8
  br label %cond_end18

cond_end18:                                       ; preds = %cond_jump_then17, %cond_jump_end
  %top20 = load %Sym*, %Sym** %top, align 8
  store i32 902, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.32, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_free

sym_free:                                         ; preds = %cond_end18
  %sym = alloca %Sym*, align 8
  store %Sym* %top20, %Sym** %sym, align 8
  %sym21 = load %Sym*, %Sym** %sym, align 8
  %sym_free_first = load %Sym*, %Sym** @sym_free_first, align 8
  %fieldTU22 = getelementptr inbounds %Sym, %Sym* %sym21, i32 0, i32 4
  store %Sym* %sym_free_first, %Sym** %fieldTU22, align 8
  %sym23 = load %Sym*, %Sym** %sym, align 8
  store %Sym* %sym23, %Sym** @sym_free_first, align 8
  br label %sym_free_end

sym_free_end:                                     ; preds = %sym_free
  %top124 = load %Sym*, %Sym** %top1, align 8
  store %Sym* %top124, %Sym** %top, align 8
  br label %loop_top_block
}

define internal %Sym* @label_find(i32 %0) {
entry:
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %v2 = load i32, i32* %v, align 4
  %sub = sub i32 %v2, 256
  store i32 %sub, i32* %v, align 4
  %add = add i32 %sub, 256
  %v3 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub4 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v3, %sub4
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret %Sym* null

cond_end:                                         ; preds = %entry
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v5 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v5
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 2
  %sym_label = load %Sym*, %Sym** %fieldLLL, align 8
  ret %Sym* %sym_label
}

define internal %Sym* @label_push(%Sym** %0, i32 %1, i32 %2) {
entry:
  %ps = alloca %Sym**, align 8
  %s = alloca %Sym*, align 8
  %ptop = alloca %Sym**, align 8
  %ptop1 = alloca %Sym***, align 8
  store %Sym** %0, %Sym*** %ptop, align 8
  store %Sym*** %ptop, %Sym**** %ptop1, align 8
  %v = alloca i32, align 4
  %v2 = alloca i32*, align 8
  store i32 %1, i32* %v, align 4
  store i32* %v, i32** %v2, align 8
  %flags = alloca i32, align 4
  %flags3 = alloca i32*, align 8
  store i32 %2, i32* %flags, align 4
  store i32* %flags, i32** %flags3, align 8
  %ptop4 = load %Sym**, %Sym*** %ptop, align 8
  %v5 = load i32, i32* %v, align 4
  %fun_result = call %Sym* @sym_push2(%Sym** %ptop4, i32 %v5, i32 0, i64 0)
  store %Sym* %fun_result, %Sym** %s, align 8
  %s6 = load %Sym*, %Sym** %s, align 8
  %flags7 = load i32, i32* %flags, align 4
  %icastD = sext i32 %flags7 to i64
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s6, i32 0, i32 1
  store i64 %icastD, i64* %fieldTU, align 4
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v8 = load i32, i32* %v, align 4
  %sub = sub i32 %v8, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 2
  %sym_label = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym** %fieldLLL, %Sym*** %ps, align 8
  %ptop9 = load %Sym**, %Sym*** %ptop, align 8
  %global_label_stack = load %Sym*, %Sym** @global_label_stack, align 8
  %eq = icmp eq %Sym** %ptop9, @global_label_stack
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end_block, %entry
  %s14 = load %Sym*, %Sym** %s, align 8
  %ps15 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB16 = load %Sym*, %Sym** %ps15, align 8
  %fieldTU17 = getelementptr inbounds %Sym, %Sym* %s14, i32 0, i32 6
  store %Sym* %derefference_valueB16, %Sym** %fieldTU17, align 8
  %ps18 = load %Sym**, %Sym*** %ps, align 8
  %s19 = load %Sym*, %Sym** %s, align 8
  store %Sym* %s19, %Sym** %ps18, align 8
  %s20 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s20

loop_top_block:                                   ; preds = %cond_then_block, %cond_jump_then
  %ps10 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB = load %Sym*, %Sym** %ps10, align 8
  %not_eq = icmp ne %Sym* %derefference_valueB, null
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %ps11 = load %Sym**, %Sym*** %ps, align 8
  %derefference_valueB12 = load %Sym*, %Sym** %ps11, align 8
  %fieldLLL13 = getelementptr inbounds %Sym, %Sym* %derefference_valueB12, i32 0, i32 6
  %prev_tok = load %Sym*, %Sym** %fieldLLL13, align 8
  store %Sym** %fieldLLL13, %Sym*** %ps, align 8
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  br label %cond_end
}

define internal void @label_pop(%Sym** %0, %Sym* %1) {
entry:
  %s1 = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %ptop = alloca %Sym**, align 8
  %ptop1 = alloca %Sym***, align 8
  store %Sym** %0, %Sym*** %ptop, align 8
  store %Sym*** %ptop, %Sym**** %ptop1, align 8
  %slast = alloca %Sym*, align 8
  %slast2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %slast, align 8
  store %Sym** %slast, %Sym*** %slast2, align 8
  %ptop3 = load %Sym**, %Sym*** %ptop, align 8
  %derefference_valueB = load %Sym*, %Sym** %ptop3, align 8
  store %Sym* %derefference_valueB, %Sym** %s, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %sym_free_end
  %s135 = load %Sym*, %Sym** %s1, align 8
  store %Sym* %s135, %Sym** %s, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %s4 = load %Sym*, %Sym** %s, align 8
  %slast5 = load %Sym*, %Sym** %slast, align 8
  %not_eq = icmp ne %Sym* %s4, %slast5
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s6 = load %Sym*, %Sym** %s, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %s6, i32 0, i32 5
  %prev = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %prev, %Sym** %s1, align 8
  %s7 = load %Sym*, %Sym** %s, align 8
  %fieldLLL8 = getelementptr inbounds %Sym, %Sym* %s7, i32 0, i32 1
  %r = load i64, i64* %fieldLLL8, align 4
  %eq = icmp eq i64 %r, 2
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_end_block:                                   ; preds = %loop_top_block
  %ptop36 = load %Sym**, %Sym*** %ptop, align 8
  %slast37 = load %Sym*, %Sym** %slast, align 8
  store %Sym* %slast37, %Sym** %ptop36, align 8
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %s9 = load %Sym*, %Sym** %s, align 8
  %fieldLLL10 = getelementptr inbounds %Sym, %Sym* %s9, i32 0, i32 0
  %v = load i32, i32* %fieldLLL10, align 4
  %fun_result = call i8* @get_tok_str(i32 %v, %CValue* null)
  call void (i8*, ...) @warning(i8* bitcast ([33 x i8]* @41 to i8*), i8* %fun_result)
  br label %cond_end

cond_jump_elif0:                                  ; preds = %cond_then_block
  %s11 = load %Sym*, %Sym** %s, align 8
  %fieldLLL12 = getelementptr inbounds %Sym, %Sym* %s11, i32 0, i32 1
  %r13 = load i64, i64* %fieldLLL12, align 4
  %eq14 = icmp eq i64 %r13, 1
  br i1 %eq14, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %s15 = load %Sym*, %Sym** %s, align 8
  %fieldLLL16 = getelementptr inbounds %Sym, %Sym* %s15, i32 0, i32 0
  %v17 = load i32, i32* %fieldLLL16, align 4
  %fun_result18 = call i8* @get_tok_str(i32 %v17, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([32 x i8]* @42 to i8*), i8* %fun_result18)
  br label %cond_end

cond_else_block:                                  ; preds = %cond_jump_elif0
  %s19 = load %Sym*, %Sym** %s, align 8
  %fieldLLL20 = getelementptr inbounds %Sym, %Sym* %s19, i32 0, i32 2
  %c = load i64, i64* %fieldLLL20, align 4
  %icmpA = icmp ne i64 %c, 0
  br i1 %icmpA, label %cond_jump_then21, label %cond_end22

cond_end:                                         ; preds = %cond_end22, %cond_jump_elif_then0, %cond_jump_then
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %s26 = load %Sym*, %Sym** %s, align 8
  %fieldLLL27 = getelementptr inbounds %Sym, %Sym* %s26, i32 0, i32 0
  %v28 = load i32, i32* %fieldLLL27, align 4
  %sub = sub i32 %v28, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %s29 = load %Sym*, %Sym** %s, align 8
  %fieldLLL30 = getelementptr inbounds %Sym, %Sym* %s29, i32 0, i32 6
  %prev_tok = load %Sym*, %Sym** %fieldLLL30, align 8
  %fieldTU = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 2
  store %Sym* %prev_tok, %Sym** %fieldTU, align 8
  %s31 = load %Sym*, %Sym** %s, align 8
  store i32 955, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.33, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_free

cond_jump_then21:                                 ; preds = %cond_else_block
  %s23 = load %Sym*, %Sym** %s, align 8
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %s24 = load %Sym*, %Sym** %s, align 8
  %fieldLLL25 = getelementptr inbounds %Sym, %Sym* %s24, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL25, align 8
  %icatXXXXXX = ptrtoint %Sym* %next to i64
  call void @put_extern_sym(%Sym* %s23, %Section* %cur_text_section, i64 %icatXXXXXX, i64 1)
  br label %cond_end22

cond_end22:                                       ; preds = %cond_jump_then21, %cond_else_block
  br label %cond_end

sym_free:                                         ; preds = %cond_end
  %sym = alloca %Sym*, align 8
  store %Sym* %s31, %Sym** %sym, align 8
  %sym32 = load %Sym*, %Sym** %sym, align 8
  %sym_free_first = load %Sym*, %Sym** @sym_free_first, align 8
  %fieldTU33 = getelementptr inbounds %Sym, %Sym* %sym32, i32 0, i32 4
  store %Sym* %sym_free_first, %Sym** %fieldTU33, align 8
  %sym34 = load %Sym*, %Sym** %sym, align 8
  store %Sym* %sym34, %Sym** @sym_free_first, align 8
  br label %sym_free_end

sym_free_end:                                     ; preds = %sym_free
  br label %loop_continue_top_block
}

define internal i32 @expr_preprocess() {
entry:
  %andand = alloca i1, align 1
  %str = alloca %TokenString, align 8
  %castXXXX = bitcast %TokenString* %str to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %t = alloca i32, align 4
  %c = alloca i32, align 4
  %str1 = load %TokenString, %TokenString* %str, align 8
  store i32 966, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.34, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

tok_str_new:                                      ; preds = %entry
  %s = alloca %TokenString*, align 8
  store %TokenString* %str, %TokenString** %s, align 8
  %s2 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s2, i32 0, i32 0
  store i32* null, i32** %fieldTU, align 8
  %s3 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU4 = getelementptr inbounds %TokenString, %TokenString* %s3, i32 0, i32 1
  store i32 0, i32* %fieldTU4, align 4
  %s5 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU6 = getelementptr inbounds %TokenString, %TokenString* %s5, i32 0, i32 2
  store i32 0, i32* %fieldTU6, align 4
  %s7 = load %TokenString*, %TokenString** %s, align 8
  %fieldTU8 = getelementptr inbounds %TokenString, %TokenString* %s7, i32 0, i32 3
  store i32 -1, i32* %fieldTU8, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end, %tok_str_new_end
  %tok = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok, 10
  store i1 %not_eq, i1* %andand, align 1
  br i1 %not_eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %loop_top_block
  %tok9 = load i32, i32* @tok, align 4
  %not_eq10 = icmp ne i32 %tok9, -1
  %andand11 = and i1 %not_eq, %not_eq10
  store i1 %andand11, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  call void @next()
  %tok12 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok12, 320
  br i1 %eq, label %cond_jump_then13, label %cond_jump_elif0

cond_end_block:                                   ; preds = %cond_jump_end
  %str36 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add(%TokenString* %str, i32 -1)
  %str37 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add(%TokenString* %str, i32 0)
  %str38 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str39 = load i32*, i32** %fieldVVV, align 8
  store i32* %str39, i32** @macro_ptr, align 8
  call void @next()
  %fun_result = call i32 @expr_const()
  store i32 %fun_result, i32* %c, align 4
  store i32* null, i32** @macro_ptr, align 8
  %str40 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV41 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str42 = load i32*, i32** %fieldVVV41, align 8
  call void @tok_str_free(i32* %str42)
  %c43 = load i32, i32* %c, align 4
  %not_eq44 = icmp ne i32 %c43, 0
  %icastKX45 = zext i1 %not_eq44 to i32
  ret i32 %icastKX45

cond_jump_then13:                                 ; preds = %cond_then_block
  call void @next_nomacro()
  %tok14 = load i32, i32* @tok, align 4
  store i32 %tok14, i32* %t, align 4
  %t15 = load i32, i32* %t, align 4
  %eq16 = icmp eq i32 %t15, 40
  br i1 %eq16, label %cond_jump_then17, label %cond_end18

cond_jump_elif0:                                  ; preds = %cond_then_block
  %tok33 = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok33, 256
  br i1 %gteq_signed, label %cond_jump_elif_then0, label %cond_end

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  store i32 179, i32* @tok, align 4
  %tokc34 = load %CValue, %CValue* @tokc, align 16
  store i32 0, i32* bitcast (%CValue* @tokc to i32*), align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_elif_then0, %cond_jump_elif0, %cond_end31
  %str35 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add_tok(%TokenString* %str)
  br label %loop_top_block

cond_jump_then17:                                 ; preds = %cond_jump_then13
  call void @next_nomacro()
  br label %cond_end18

cond_end18:                                       ; preds = %cond_jump_then17, %cond_jump_then13
  %tok19 = load i32, i32* @tok, align 4
  store i32 974, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.35, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find

define_find:                                      ; preds = %cond_end18
  %inline_result_variable = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %tok19, i32* %v, align 4
  %v20 = load i32, i32* %v, align 4
  %sub = sub i32 %v20, 256
  store i32 %sub, i32* %v, align 4
  %add = add i32 %sub, 256
  %v21 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub22 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v21, %sub22
  br i1 %gteq_unsinged, label %cond_jump_then23, label %cond_end24

define_find_end:                                  ; preds = %cond_end24, %cond_jump_then23
  %inline_result_variable26 = load %Sym*, %Sym** %inline_result_variable, align 8
  %not_eq27 = icmp ne %Sym* %inline_result_variable26, null
  %icastKX = zext i1 %not_eq27 to i32
  store i32 %icastKX, i32* %c, align 4
  %t28 = load i32, i32* %t, align 4
  %eq29 = icmp eq i32 %t28, 40
  br i1 %eq29, label %cond_jump_then30, label %cond_end31

cond_jump_then23:                                 ; preds = %define_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_end24:                                       ; preds = %define_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v25 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v25
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  %sym_define = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_define, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_jump_then30:                                 ; preds = %define_find_end
  call void @next_nomacro()
  br label %cond_end31

cond_end31:                                       ; preds = %cond_jump_then30, %define_find_end
  store i32 179, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  %c32 = load i32, i32* %c, align 4
  store i32 %c32, i32* bitcast (%CValue* @tokc to i32*), align 4
  br label %cond_end
}

define internal void @parse_define() {
entry:
  %s138 = alloca %Sym*, align 8
  %oror78 = alloca i1, align 1
  %oror77 = alloca i1, align 1
  %oror76 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand45 = alloca i1, align 1
  %andand = alloca i1, align 1
  %str = alloca %TokenString, align 8
  %castXXXX = bitcast %TokenString* %str to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %spc = alloca i32, align 4
  %is_vaargs = alloca i32, align 4
  %varg = alloca i32, align 4
  %t = alloca i32, align 4
  %v = alloca i32, align 4
  %ps = alloca %Sym**, align 8
  %first = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %tok = load i32, i32* @tok, align 4
  store i32 %tok, i32* %v, align 4
  %v1 = load i32, i32* %v, align 4
  %le = icmp slt i32 %v1, 256
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %tok2 = load i32, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  %fun_result = call i8* @get_tok_str(i32 %tok2, %CValue* @tokc)
  call void (i8*, ...) @error(i8* bitcast ([24 x i8]* @43 to i8*), i8* %fun_result)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  store %Sym* null, %Sym** %first, align 8
  store i32 0, i32* %t, align 4
  call void @next_nomacro_spc()
  %tok3 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok3, 40
  br i1 %eq, label %cond_jump_then4, label %cond_end5

cond_jump_then4:                                  ; preds = %cond_end
  call void @next_nomacro()
  %first6 = load %Sym*, %Sym** %first, align 8
  store %Sym** %first, %Sym*** %ps, align 8
  br label %loop_top_block

cond_end5:                                        ; preds = %cond_end34, %cond_end
  %str35 = load %TokenString, %TokenString* %str, align 8
  store i32 1056, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.36, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

loop_top_block:                                   ; preds = %cond_end30, %cond_jump_then4
  %tok7 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok7, 41
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %tok8 = load i32, i32* @tok, align 4
  store i32 %tok8, i32* %varg, align 4
  call void @next_nomacro()
  store i32 0, i32* %is_vaargs, align 4
  %varg9 = load i32, i32* %varg, align 4
  %eq10 = icmp eq i32 %varg9, 204
  br i1 %eq10, label %cond_jump_then11, label %cond_jump_elif0

cond_end_block:                                   ; preds = %cond_jump_then29, %loop_top_block
  %tok31 = load i32, i32* @tok, align 4
  %eq32 = icmp eq i32 %tok31, 41
  br i1 %eq32, label %cond_jump_then33, label %cond_end34

cond_jump_then11:                                 ; preds = %cond_then_block
  store i32 331, i32* %varg, align 4
  store i32 1, i32* %is_vaargs, align 4
  br label %cond_end12

cond_jump_elif0:                                  ; preds = %cond_then_block
  %tok13 = load i32, i32* @tok, align 4
  %eq14 = icmp eq i32 %tok13, 204
  store i1 %eq14, i1* %andand, align 1
  br i1 %eq14, label %cond_jump_then15, label %cond_jump_end

cond_jump_elif_then0:                             ; preds = %cond_jump_end
  store i32 1, i32* %is_vaargs, align 4
  call void @next_nomacro()
  br label %cond_end12

cond_end12:                                       ; preds = %cond_jump_elif_then0, %cond_jump_end, %cond_jump_then11
  %varg17 = load i32, i32* %varg, align 4
  %le18 = icmp slt i32 %varg17, 256
  br i1 %le18, label %cond_jump_then19, label %cond_end20

cond_jump_then15:                                 ; preds = %cond_jump_elif0
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %icmpA = icmp ne i32 %gnu_ext, 0
  %andand16 = and i1 %eq14, %icmpA
  store i1 %andand16, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then15, %cond_jump_elif0
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_elif_then0, label %cond_end12

cond_jump_then19:                                 ; preds = %cond_end12
  call void (i8*, ...) @error(i8* bitcast ([32 x i8]* @44 to i8*))
  br label %cond_end20

cond_end20:                                       ; preds = %cond_jump_then19, %cond_end12
  %define_stack = load %Sym*, %Sym** @define_stack, align 8
  %varg21 = load i32, i32* %varg, align 4
  %ortmp = or i32 %varg21, 536870912
  %is_vaargs22 = load i32, i32* %is_vaargs, align 4
  %fun_result23 = call %Sym* @sym_push2(%Sym** @define_stack, i32 %ortmp, i32 %is_vaargs22, i64 0)
  store %Sym* %fun_result23, %Sym** %s, align 8
  %ps24 = load %Sym**, %Sym*** %ps, align 8
  %s25 = load %Sym*, %Sym** %s, align 8
  store %Sym* %s25, %Sym** %ps24, align 8
  %s26 = load %Sym*, %Sym** %s, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %s26, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym** %fieldLLL, %Sym*** %ps, align 8
  %tok27 = load i32, i32* @tok, align 4
  %not_eq28 = icmp ne i32 %tok27, 44
  br i1 %not_eq28, label %cond_jump_then29, label %cond_end30

cond_jump_then29:                                 ; preds = %cond_end20
  br label %cond_end_block

cond_end30:                                       ; preds = %after_break, %cond_end20
  call void @next_nomacro()
  br label %loop_top_block

after_break:                                      ; No predecessors!
  br label %cond_end30

cond_jump_then33:                                 ; preds = %cond_end_block
  call void @next_nomacro_spc()
  br label %cond_end34

cond_end34:                                       ; preds = %cond_jump_then33, %cond_end_block
  store i32 1, i32* %t, align 4
  br label %cond_end5

tok_str_new:                                      ; preds = %cond_end5
  %s36 = alloca %TokenString*, align 8
  store %TokenString* %str, %TokenString** %s36, align 8
  %s37 = load %TokenString*, %TokenString** %s36, align 8
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s37, i32 0, i32 0
  store i32* null, i32** %fieldTU, align 8
  %s38 = load %TokenString*, %TokenString** %s36, align 8
  %fieldTU39 = getelementptr inbounds %TokenString, %TokenString* %s38, i32 0, i32 1
  store i32 0, i32* %fieldTU39, align 4
  %s40 = load %TokenString*, %TokenString** %s36, align 8
  %fieldTU41 = getelementptr inbounds %TokenString, %TokenString* %s40, i32 0, i32 2
  store i32 0, i32* %fieldTU41, align 4
  %s42 = load %TokenString*, %TokenString** %s36, align 8
  %fieldTU43 = getelementptr inbounds %TokenString, %TokenString* %s42, i32 0, i32 3
  store i32 -1, i32* %fieldTU43, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  store i32 2, i32* %spc, align 4
  br label %loop_top_block44

loop_top_block44:                                 ; preds = %parse_define.skip, %tok_str_new_end
  %tok46 = load i32, i32* @tok, align 4
  %not_eq47 = icmp ne i32 %tok46, 10
  store i1 %not_eq47, i1* %andand45, align 1
  br i1 %not_eq47, label %cond_jump_then48, label %cond_jump_end49

cond_jump_then48:                                 ; preds = %loop_top_block44
  %tok50 = load i32, i32* @tok, align 4
  %not_eq51 = icmp ne i32 %tok50, -1
  %andand52 = and i1 %not_eq47, %not_eq51
  store i1 %andand52, i1* %andand45, align 1
  br label %cond_jump_end49

cond_jump_end49:                                  ; preds = %cond_jump_then48, %loop_top_block44
  %andand_result_value53 = load i1, i1* %andand45, align 1
  br i1 %andand_result_value53, label %cond_then_block54, label %cond_end_block55

cond_then_block54:                                ; preds = %cond_jump_end49
  %tok56 = load i32, i32* @tok, align 4
  %eq57 = icmp eq i32 182, %tok56
  br i1 %eq57, label %cond_jump_then58, label %cond_jump_elif059

cond_end_block55:                                 ; preds = %cond_jump_end49
  %spc119 = load i32, i32* %spc, align 4
  %eq120 = icmp eq i32 %spc119, 1
  br i1 %eq120, label %cond_jump_then121, label %cond_end122

cond_jump_then58:                                 ; preds = %cond_then_block54
  %spc62 = load i32, i32* %spc, align 4
  %eq63 = icmp eq i32 1, %spc62
  br i1 %eq63, label %cond_jump_then64, label %cond_end65

cond_jump_elif059:                                ; preds = %cond_then_block54
  %tok68 = load i32, i32* @tok, align 4
  %eq69 = icmp eq i32 35, %tok68
  br i1 %eq69, label %cond_jump_elif_then060, label %cond_jump_elif1

cond_jump_elif_then060:                           ; preds = %cond_jump_elif059
  store i32 2, i32* %spc, align 4
  br label %cond_end61

cond_jump_elif1:                                  ; preds = %cond_jump_elif059
  %tok70 = load i32, i32* @tok, align 4
  %spc71 = load i32, i32* %spc, align 4
  store i32 1067, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.37, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %check_space

cond_jump_elif_then1:                             ; preds = %check_space_end
  br label %parse_define.skip
  br label %cond_end61

cond_end61:                                       ; preds = %cond_jump_elif_then1, %check_space_end, %cond_jump_elif_then060, %cond_end65
  %str116 = load %TokenString, %TokenString* %str, align 8
  %tok117 = load i32, i32* @tok, align 4
  %tokc118 = load %CValue, %CValue* @tokc, align 16
  call void @tok_str_add2(%TokenString* %str, i32 %tok117, %CValue* @tokc)
  br label %parse_define.skip

cond_jump_then64:                                 ; preds = %cond_jump_then58
  %str66 = load %TokenString, %TokenString* %str, align 8
  %str67 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len = load i32, i32* %fieldVVV, align 4
  %sub = sub i32 %len, 1
  %fieldTTT = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  store i32 %sub, i32* %fieldTTT, align 4
  br label %cond_end65

cond_end65:                                       ; preds = %cond_jump_then64, %cond_jump_then58
  store i32 2, i32* %spc, align 4
  br label %cond_end61

check_space:                                      ; preds = %cond_jump_elif1
  %inline_result_variable = alloca i32, align 4
  %t72 = alloca i32, align 4
  store i32 %tok70, i32* %t72, align 4
  %spc73 = alloca i32*, align 8
  store i32* %spc, i32** %spc73, align 8
  %t74 = load i32, i32* %t72, align 4
  store i32 1067, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

check_space_end:                                  ; preds = %cond_end107, %cond_jump_then110
  %inline_result_variable114 = load i32, i32* %inline_result_variable, align 4
  %icmpA115 = icmp ne i32 %inline_result_variable114, 0
  br i1 %icmpA115, label %cond_jump_elif_then1, label %cond_end61

is_space:                                         ; preds = %check_space
  %inline_result_variable75 = alloca i32, align 4
  %ch = alloca i32, align 4
  store i32 %t74, i32* %ch, align 4
  %ch79 = load i32, i32* %ch, align 4
  %eq80 = icmp eq i32 %ch79, 32
  store i1 %eq80, i1* %oror78, align 1
  br i1 %eq80, label %cond_jump_end82, label %cond_jump_then81

is_space_end:                                     ; preds = %cond_jump_end99
  %inline_result_variable104 = load i32, i32* %inline_result_variable75, align 4
  %icmpA105 = icmp ne i32 %inline_result_variable104, 0
  br i1 %icmpA105, label %cond_jump_then106, label %cond_else_block

cond_jump_then81:                                 ; preds = %is_space
  %ch83 = load i32, i32* %ch, align 4
  %eq84 = icmp eq i32 %ch83, 9
  %oror85 = or i1 %eq80, %eq84
  store i1 %oror85, i1* %oror78, align 1
  br label %cond_jump_end82

cond_jump_end82:                                  ; preds = %cond_jump_then81, %is_space
  %oror_result_value = load i1, i1* %oror78, align 1
  store i1 %oror_result_value, i1* %oror77, align 1
  br i1 %oror_result_value, label %cond_jump_end87, label %cond_jump_then86

cond_jump_then86:                                 ; preds = %cond_jump_end82
  %ch88 = load i32, i32* %ch, align 4
  %eq89 = icmp eq i32 %ch88, 11
  %oror90 = or i1 %oror_result_value, %eq89
  store i1 %oror90, i1* %oror77, align 1
  br label %cond_jump_end87

cond_jump_end87:                                  ; preds = %cond_jump_then86, %cond_jump_end82
  %oror_result_value91 = load i1, i1* %oror77, align 1
  store i1 %oror_result_value91, i1* %oror76, align 1
  br i1 %oror_result_value91, label %cond_jump_end93, label %cond_jump_then92

cond_jump_then92:                                 ; preds = %cond_jump_end87
  %ch94 = load i32, i32* %ch, align 4
  %eq95 = icmp eq i32 %ch94, 12
  %oror96 = or i1 %oror_result_value91, %eq95
  store i1 %oror96, i1* %oror76, align 1
  br label %cond_jump_end93

cond_jump_end93:                                  ; preds = %cond_jump_then92, %cond_jump_end87
  %oror_result_value97 = load i1, i1* %oror76, align 1
  store i1 %oror_result_value97, i1* %oror, align 1
  br i1 %oror_result_value97, label %cond_jump_end99, label %cond_jump_then98

cond_jump_then98:                                 ; preds = %cond_jump_end93
  %ch100 = load i32, i32* %ch, align 4
  %eq101 = icmp eq i32 %ch100, 13
  %oror102 = or i1 %oror_result_value97, %eq101
  store i1 %oror102, i1* %oror, align 1
  br label %cond_jump_end99

cond_jump_end99:                                  ; preds = %cond_jump_then98, %cond_jump_end93
  %oror_result_value103 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value103 to i32
  store i32 %icastKX, i32* %inline_result_variable75, align 4
  br label %is_space_end

cond_jump_then106:                                ; preds = %is_space_end
  %spc108 = load i32*, i32** %spc73, align 8
  %derefference_valueB = load i32, i32* %spc108, align 4
  %icmpA109 = icmp ne i32 %derefference_valueB, 0
  br i1 %icmpA109, label %cond_jump_then110, label %cond_end111

cond_else_block:                                  ; preds = %is_space_end
  %spc113 = load i32*, i32** %spc73, align 8
  store i32 0, i32* %spc113, align 4
  br label %cond_end107

cond_end107:                                      ; preds = %cond_else_block, %cond_end111
  store i32 0, i32* %inline_result_variable, align 4
  br label %check_space_end

cond_jump_then110:                                ; preds = %cond_jump_then106
  store i32 1, i32* %inline_result_variable, align 4
  br label %check_space_end

cond_end111:                                      ; preds = %cond_jump_then106
  %spc112 = load i32*, i32** %spc73, align 8
  store i32 1, i32* %spc112, align 4
  br label %cond_end107

parse_define.skip:                                ; preds = %cond_end61, %cond_jump_elif_then1
  call void @next_nomacro_spc()
  br label %loop_top_block44

cond_jump_then121:                                ; preds = %cond_end_block55
  %str123 = load %TokenString, %TokenString* %str, align 8
  %str124 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV125 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len126 = load i32, i32* %fieldVVV125, align 4
  %sub127 = sub i32 %len126, 1
  %fieldTTT128 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  store i32 %sub127, i32* %fieldTTT128, align 4
  br label %cond_end122

cond_end122:                                      ; preds = %cond_jump_then121, %cond_end_block55
  %str129 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add(%TokenString* %str, i32 0)
  %v130 = load i32, i32* %v, align 4
  %t131 = load i32, i32* %t, align 4
  %str132 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV133 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str134 = load i32*, i32** %fieldVVV133, align 8
  %first135 = load %Sym*, %Sym** %first, align 8
  store i32 1081, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.38, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_push

define_push:                                      ; preds = %cond_end122
  %v136 = alloca i32, align 4
  store i32 %v130, i32* %v136, align 4
  %macro_type = alloca i32, align 4
  store i32 %t131, i32* %macro_type, align 4
  %str137 = alloca i32*, align 8
  store i32* %str134, i32** %str137, align 8
  %first_arg = alloca %Sym*, align 8
  store %Sym* %first135, %Sym** %first_arg, align 8
  %define_stack139 = load %Sym*, %Sym** @define_stack, align 8
  %v140 = load i32, i32* %v136, align 4
  %macro_type141 = load i32, i32* %macro_type, align 4
  %str142 = load i32*, i32** %str137, align 8
  %icatXXXXXX = ptrtoint i32* %str142 to i64
  %fun_result143 = call %Sym* @sym_push2(%Sym** @define_stack, i32 %v140, i32 %macro_type141, i64 %icatXXXXXX)
  store %Sym* %fun_result143, %Sym** %s138, align 8
  %s144 = load %Sym*, %Sym** %s138, align 8
  %first_arg145 = load %Sym*, %Sym** %first_arg, align 8
  %fieldTU146 = getelementptr inbounds %Sym, %Sym* %s144, i32 0, i32 4
  store %Sym* %first_arg145, %Sym** %fieldTU146, align 8
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v147 = load i32, i32* %v136, align 4
  %sub148 = sub i32 %v147, 256
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %sub148
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %s149 = load %Sym*, %Sym** %s138, align 8
  %fieldTU150 = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  store %Sym* %s149, %Sym** %fieldTU150, align 8
  br label %define_push_end

define_push_end:                                  ; preds = %define_push
  ret void
}

define internal %CachedInclude* @search_cached_include(%TCCState* %0, i32 %1, i8* %2) {
entry:
  %andand = alloca i1, align 1
  %h8 = alloca i32, align 4
  %s = alloca i8*, align 8
  %h = alloca i32, align 4
  %i = alloca i32, align 4
  %e = alloca %CachedInclude*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %type = alloca i32, align 4
  %type2 = alloca i32*, align 8
  store i32 %1, i32* %type, align 4
  store i32* %type, i32** %type2, align 8
  %filename = alloca i8*, align 8
  %filename3 = alloca i8**, align 8
  store i8* %2, i8** %filename, align 8
  store i8** %filename, i8*** %filename3, align 8
  %type4 = load i32, i32* %type, align 4
  %filename5 = load i8*, i8** %filename, align 8
  store i32 1106, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.39, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %hash_cached_include

hash_cached_include:                              ; preds = %entry
  %inline_result_variable = alloca i32, align 4
  %type6 = alloca i32, align 4
  store i32 %type4, i32* %type6, align 4
  %filename7 = alloca i8*, align 8
  store i8* %filename5, i8** %filename7, align 8
  store i32 1, i32* %h8, align 4
  %h9 = load i32, i32* %h8, align 4
  %mul = mul i32 %h9, 263
  %type10 = load i32, i32* %type6, align 4
  %add = add i32 %mul, %type10
  store i32 %add, i32* %h8, align 4
  %filename11 = load i8*, i8** %filename7, align 8
  store i8* %filename11, i8** %s, align 8
  br label %loop_top_block

hash_cached_include_end:                          ; preds = %cond_end_block
  %inline_result_variable23 = load i32, i32* %inline_result_variable, align 4
  store i32 %inline_result_variable23, i32* %h, align 4
  %s124 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s124, i32 0, i32 53
  %h25 = load i32, i32* %h, align 4
  %array_castG = bitcast [512 x i32]* %fieldRRRROOU to i32*
  %gepLY = getelementptr i32, i32* %array_castG, i32 %h25
  %elementYYY = load i32, i32* %gepLY, align 4
  store i32 %elementYYY, i32* %i, align 4
  br label %loop_top_block26

loop_top_block:                                   ; preds = %cond_then_block, %hash_cached_include
  %s12 = load i8*, i8** %s, align 8
  %derefference_valueB = load i8, i8* %s12, align 1
  %icmpA = icmp ne i8 %derefference_valueB, 0
  br i1 %icmpA, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %h13 = load i32, i32* %h8, align 4
  %mul14 = mul i32 %h13, 263
  %s15 = load i8*, i8** %s, align 8
  %derefference_valueB16 = load i8, i8* %s15, align 1
  %icastKY = zext i8 %derefference_valueB16 to i32
  %add17 = add i32 %mul14, %icastKY
  store i32 %add17, i32* %h8, align 4
  %s18 = load i8*, i8** %s, align 8
  %ptrToIntC = ptrtoint i8* %s18 to i64
  %add19 = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add19 to i8*
  store i8* %intToPtrB, i8** %s, align 8
  %s20 = load i8*, i8** %s, align 8
  %ptrToIntI = ptrtoint i8* %s20 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %h21 = load i32, i32* %h8, align 4
  %andtmp = and i32 %h21, 511
  store i32 %andtmp, i32* %h8, align 4
  %h22 = load i32, i32* %h8, align 4
  store i32 %h22, i32* %inline_result_variable, align 4
  br label %hash_cached_include_end

loop_continue_top_block:                          ; preds = %cond_end45
  br label %loop_top_block26

loop_top_block26:                                 ; preds = %loop_continue_top_block, %hash_cached_include_end
  br i1 true, label %cond_then_block27, label %cond_end_block28

cond_then_block27:                                ; preds = %loop_top_block26
  %i29 = load i32, i32* %i, align 4
  %eq = icmp eq i32 %i29, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block28:                                 ; preds = %cond_jump_then, %loop_top_block26
  ret %CachedInclude* null

cond_jump_then:                                   ; preds = %cond_then_block27
  br label %cond_end_block28

cond_end:                                         ; preds = %after_break, %cond_then_block27
  %s130 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s130, i32 0, i32 7
  %cached_includes = load %CachedInclude**, %CachedInclude*** %fieldLLL, align 8
  %i31 = load i32, i32* %i, align 4
  %sub32 = sub i32 %i31, 1
  %element_addressAB = load %CachedInclude**, %CachedInclude*** %fieldLLL, align 8
  %element_addressXYXZY = getelementptr inbounds %CachedInclude*, %CachedInclude** %element_addressAB, i32 %sub32
  %load_element = load %CachedInclude*, %CachedInclude** %element_addressXYXZY, align 8
  store %CachedInclude* %load_element, %CachedInclude** %e, align 8
  %e33 = load %CachedInclude*, %CachedInclude** %e, align 8
  %fieldLLL34 = getelementptr inbounds %CachedInclude, %CachedInclude* %e33, i32 0, i32 2
  %type35 = load i8, i8* %fieldLLL34, align 1
  %type36 = load i32, i32* %type, align 4
  %icastL = sext i8 %type35 to i32
  %eq37 = icmp eq i32 %icastL, %type36
  store i1 %eq37, i1* %andand, align 1
  br i1 %eq37, label %cond_jump_then38, label %cond_jump_end

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then38:                                 ; preds = %cond_end
  %e39 = load %CachedInclude*, %CachedInclude** %e, align 8
  %fieldRRRROOU40 = getelementptr inbounds %CachedInclude, %CachedInclude* %e39, i32 0, i32 3
  %autocast = bitcast [1 x i8]* %fieldRRRROOU40 to i8*
  %filename41 = load i8*, i8** %filename, align 8
  %fun_result = call i32 @strcmp(i8* %autocast, i8* %filename41)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA42 = icmp ne i32 %castOOOO, 0
  %andand43 = and i1 %eq37, %icmpA42
  store i1 %andand43, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then38, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then44, label %cond_end45

cond_jump_then44:                                 ; preds = %cond_jump_end
  %e46 = load %CachedInclude*, %CachedInclude** %e, align 8
  ret %CachedInclude* %e46

cond_end45:                                       ; preds = %cond_jump_end
  %e47 = load %CachedInclude*, %CachedInclude** %e, align 8
  %fieldLLL48 = getelementptr inbounds %CachedInclude, %CachedInclude* %e47, i32 0, i32 1
  %hash_next = load i32, i32* %fieldLLL48, align 4
  store i32 %hash_next, i32* %i, align 4
  br label %loop_continue_top_block
}

define internal void @pragma_parse(%TCCState* %0) {
entry:
  %oror56 = alloca i1, align 1
  %oror = alloca i1, align 1
  %val = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  call void @next()
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 362
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @next()
  call void @skip(i32 40)
  %tok2 = load i32, i32* @tok, align 4
  %eq3 = icmp eq i32 %tok2, 364
  br i1 %eq3, label %cond_jump_then4, label %cond_else_block

cond_end:                                         ; preds = %cond_end5, %entry
  ret void

cond_jump_then4:                                  ; preds = %cond_jump_then
  call void @next()
  %s16 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s16, i32 0, i32 55
  %pack_stack_ptr = load i32*, i32** %fieldLLL, align 8
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s17, i32 0, i32 54
  %autocast = bitcast [8 x i32]* %fieldRRRROOU to i32*
  %leeq = icmp sle i32* %pack_stack_ptr, %autocast
  br i1 %leeq, label %cond_jump_then8, label %cond_end9

cond_else_block:                                  ; preds = %cond_jump_then
  store i32 0, i32* %val, align 4
  %tok17 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok17, 41
  br i1 %not_eq, label %cond_jump_then18, label %cond_end19

cond_end5:                                        ; preds = %cond_end19, %cond_end9
  br label %cond_end

cond_jump_then8:                                  ; preds = %cond_jump_then4
  br label %pragma_parse.stk_error

cond_end9:                                        ; preds = %pragma_parse.stk_error, %cond_jump_then4
  %s110 = load %TCCState*, %TCCState** %s1, align 8
  %s111 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL12 = getelementptr inbounds %TCCState, %TCCState* %s111, i32 0, i32 55
  %pack_stack_ptr13 = load i32*, i32** %fieldLLL12, align 8
  %ptrToIntI = ptrtoint i32* %pack_stack_ptr13 to i64
  %sub = sub i64 %ptrToIntI, 4
  %iintToPtrD = inttoptr i64 %sub to i32*
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s110, i32 0, i32 55
  store i32* %iintToPtrD, i32** %fieldTU, align 8
  %s114 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL15 = getelementptr inbounds %TCCState, %TCCState* %s114, i32 0, i32 55
  %pack_stack_ptr16 = load i32*, i32** %fieldLLL15, align 8
  %ptrToIntC = ptrtoint i32* %pack_stack_ptr16 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i32*
  br label %cond_end5

pragma_parse.stk_error:                           ; preds = %cond_jump_then36, %cond_jump_then8
  call void (i8*, ...) @error(i8* bitcast ([18 x i8]* @45 to i8*))
  br label %cond_end9

cond_jump_then18:                                 ; preds = %cond_else_block
  %tok20 = load i32, i32* @tok, align 4
  %eq21 = icmp eq i32 %tok20, 363
  br i1 %eq21, label %cond_jump_then22, label %cond_end23

cond_end19:                                       ; preds = %cond_end70, %cond_else_block
  %s171 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL72 = getelementptr inbounds %TCCState, %TCCState* %s171, i32 0, i32 55
  %pack_stack_ptr73 = load i32*, i32** %fieldLLL72, align 8
  %val74 = load i32, i32* %val, align 4
  store i32 %val74, i32* %pack_stack_ptr73, align 4
  call void @skip(i32 41)
  br label %cond_end5

cond_jump_then22:                                 ; preds = %cond_jump_then18
  call void @next()
  %s124 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL25 = getelementptr inbounds %TCCState, %TCCState* %s124, i32 0, i32 55
  %pack_stack_ptr26 = load i32*, i32** %fieldLLL25, align 8
  %s127 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU28 = getelementptr inbounds %TCCState, %TCCState* %s127, i32 0, i32 54
  %autocast29 = bitcast [8 x i32]* %fieldRRRROOU28 to i32*
  %ptrToIntC30 = ptrtoint i32* %autocast29 to i64
  %add31 = add i64 %ptrToIntC30, 32
  %intToPtrB32 = inttoptr i64 %add31 to i32*
  %ptrToIntI33 = ptrtoint i32* %intToPtrB32 to i64
  %sub34 = sub i64 %ptrToIntI33, 4
  %iintToPtrD35 = inttoptr i64 %sub34 to i32*
  %gteq_signed = icmp sge i32* %pack_stack_ptr26, %iintToPtrD35
  br i1 %gteq_signed, label %cond_jump_then36, label %cond_end37

cond_end23:                                       ; preds = %cond_end37, %cond_jump_then18
  %tok52 = load i32, i32* @tok, align 4
  %not_eq53 = icmp ne i32 %tok52, 179
  br i1 %not_eq53, label %cond_jump_then54, label %cond_end55

cond_jump_then36:                                 ; preds = %cond_jump_then22
  br label %pragma_parse.stk_error
  br label %cond_end37

cond_end37:                                       ; preds = %cond_jump_then36, %cond_jump_then22
  %s138 = load %TCCState*, %TCCState** %s1, align 8
  %s139 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL40 = getelementptr inbounds %TCCState, %TCCState* %s139, i32 0, i32 55
  %pack_stack_ptr41 = load i32*, i32** %fieldLLL40, align 8
  %ptrToIntC42 = ptrtoint i32* %pack_stack_ptr41 to i64
  %add43 = add i64 %ptrToIntC42, 4
  %intToPtrB44 = inttoptr i64 %add43 to i32*
  %fieldTU45 = getelementptr inbounds %TCCState, %TCCState* %s138, i32 0, i32 55
  store i32* %intToPtrB44, i32** %fieldTU45, align 8
  %s146 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL47 = getelementptr inbounds %TCCState, %TCCState* %s146, i32 0, i32 55
  %pack_stack_ptr48 = load i32*, i32** %fieldLLL47, align 8
  %ptrToIntI49 = ptrtoint i32* %pack_stack_ptr48 to i64
  %sub50 = sub i64 %ptrToIntI49, 4
  %iintToPtrD51 = inttoptr i64 %sub50 to i32*
  call void @skip(i32 44)
  br label %cond_end23

cond_jump_then54:                                 ; preds = %cond_end23
  br label %pragma_parse.pack_error

cond_end55:                                       ; preds = %pragma_parse.pack_error, %cond_end23
  %tokc = load %CValue, %CValue* @tokc, align 16
  %i = load i32, i32* bitcast (%CValue* @tokc to i32*), align 4
  store i32 %i, i32* %val, align 4
  %val57 = load i32, i32* %val, align 4
  %le = icmp slt i32 %val57, 1
  store i1 %le, i1* %oror56, align 1
  br i1 %le, label %cond_jump_end, label %cond_jump_then58

pragma_parse.pack_error:                          ; preds = %cond_jump_then69, %cond_jump_then54
  call void (i8*, ...) @error(i8* bitcast ([20 x i8]* @46 to i8*))
  br label %cond_end55

cond_jump_then58:                                 ; preds = %cond_end55
  %val59 = load i32, i32* %val, align 4
  %gt = icmp sgt i32 %val59, 16
  %oror60 = or i1 %le, %gt
  store i1 %oror60, i1* %oror56, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then58, %cond_end55
  %oror_result_value = load i1, i1* %oror56, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end62, label %cond_jump_then61

cond_jump_then61:                                 ; preds = %cond_jump_end
  %val63 = load i32, i32* %val, align 4
  %val64 = load i32, i32* %val, align 4
  %sub65 = sub i32 %val64, 1
  %andtmp = and i32 %val63, %sub65
  %not_eq66 = icmp ne i32 %andtmp, 0
  %oror67 = or i1 %oror_result_value, %not_eq66
  store i1 %oror67, i1* %oror, align 1
  br label %cond_jump_end62

cond_jump_end62:                                  ; preds = %cond_jump_then61, %cond_jump_end
  %oror_result_value68 = load i1, i1* %oror, align 1
  br i1 %oror_result_value68, label %cond_jump_then69, label %cond_end70

cond_jump_then69:                                 ; preds = %cond_jump_end62
  br label %pragma_parse.pack_error
  br label %cond_end70

cond_end70:                                       ; preds = %cond_jump_then69, %cond_jump_end62
  call void @next()
  br label %cond_end19
}

define internal void @preprocess(i32 %0) {
entry:
  %oror773 = alloca i1, align 1
  %oror772 = alloca i1, align 1
  %andand696 = alloca i1, align 1
  %oror662 = alloca i1, align 1
  %oror661 = alloca i1, align 1
  %oror660 = alloca i1, align 1
  %oror659 = alloca i1, align 1
  %andand574 = alloca i1, align 1
  %condtional_result_value = alloca i8*, align 8
  %andand296 = alloca i1, align 1
  %size = alloca i32, align 4
  %path = alloca i8*, align 8
  %e = alloca %CachedInclude*, align 8
  %f = alloca %BufferedFile*, align 8
  %buf1 = alloca [1024 x i8], align 1
  %oror162 = alloca i1, align 1
  %oror161 = alloca i1, align 1
  %len = alloca i32, align 4
  %andand73 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror29 = alloca i1, align 1
  %oror28 = alloca i1, align 1
  %oror27 = alloca i1, align 1
  %oror = alloca i1, align 1
  %s = alloca %Sym*, align 8
  %q = alloca i8*, align 8
  %buf = alloca [1024 x i8], align 1
  %saved_parse_flags = alloca i32, align 4
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %is_bof = alloca i32, align 4
  %is_bof1 = alloca i32*, align 8
  store i32 %0, i32* %is_bof, align 4
  store i32* %is_bof, i32** %is_bof1, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  store %TCCState* %tcc_state, %TCCState** %s1, align 8
  %parse_flags = load i32, i32* @parse_flags, align 4
  store i32 %parse_flags, i32* %saved_parse_flags, align 4
  store i32 7, i32* @parse_flags, align 4
  call void @next_nomacro()
  br label %preprocess.redo

preprocess.redo:                                  ; preds = %preprocess.skip, %entry
  %tok = load i32, i32* @tok, align 4
  %eqtmp = icmp eq i32 %tok, 313
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

end_blockX:                                       ; preds = %cond_else_blockX771, %cond_end790, %cond_then_block765, %cond_end761, %cond_end622, %cond_end591, %cond_end547, %preprocess.include_done, %cond_end13, %cond_then_block
  br label %loop_top_block802

cond_then_block:                                  ; preds = %preprocess.redo
  call void @next_nomacro()
  call void @parse_define()
  br label %end_blockX

cond_else_blockX:                                 ; preds = %after_break, %preprocess.redo
  %eqtmp4 = icmp eq i32 %tok, 321
  br i1 %eqtmp4, label %cond_then_block2, label %cond_else_blockX3

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX3

cond_then_block2:                                 ; preds = %cond_else_blockX
  call void @next_nomacro()
  %tok5 = load i32, i32* @tok, align 4
  store i32 1210, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.40, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find

cond_else_blockX3:                                ; preds = %after_break15, %cond_else_blockX, %after_break
  %eqtmp18 = icmp eq i32 %tok, 314
  br i1 %eqtmp18, label %cond_then_block16, label %cond_else_blockX17
  br label %cond_else_blockX19

define_find:                                      ; preds = %cond_then_block2
  %inline_result_variable = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %tok5, i32* %v, align 4
  %v6 = load i32, i32* %v, align 4
  %sub = sub i32 %v6, 256
  store i32 %sub, i32* %v, align 4
  %add = add i32 %sub, 256
  %v7 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub8 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v7, %sub8
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_end

define_find_end:                                  ; preds = %cond_end, %cond_jump_then
  %inline_result_variable10 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable10, %Sym** %s, align 8
  %s11 = load %Sym*, %Sym** %s, align 8
  %icmpB = icmp ne %Sym* %s11, null
  br i1 %icmpB, label %cond_jump_then12, label %cond_end13

cond_jump_then:                                   ; preds = %define_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_end:                                         ; preds = %define_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v9 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v9
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 1
  %sym_define = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_define, %Sym** %inline_result_variable, align 8
  br label %define_find_end

cond_jump_then12:                                 ; preds = %define_find_end
  %s14 = load %Sym*, %Sym** %s, align 8
  call void @define_undef(%Sym* %s14)
  br label %cond_end13

cond_end13:                                       ; preds = %cond_jump_then12, %define_find_end
  br label %end_blockX

after_break15:                                    ; No predecessors!
  br label %cond_else_blockX3
  br label %cond_else_blockX17

cond_then_block16:                                ; preds = %cond_else_blockX17, %cond_else_blockX3
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL21 = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL21, align 8
  %element_addressAB22 = load i8*, i8** %fieldLLL21, align 8
  %element_addressXYXZY23 = getelementptr inbounds i8, i8* %element_addressAB22, i32 0
  %load_element24 = load i8, i8* %element_addressXYXZY23, align 1
  %icastKY = zext i8 %load_element24 to i32
  store i32 %icastKY, i32* @ch, align 4
  store i32 1219, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.41, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %skip_spaces

cond_else_blockX17:                               ; preds = %cond_else_blockX3, %after_break15
  %eqtmp20 = icmp eq i32 %tok, 315
  br i1 %eqtmp20, label %cond_then_block16, label %cond_else_blockX19

cond_else_blockX19:                               ; preds = %after_break401, %cond_else_blockX17, %cond_else_blockX3
  %eqtmp404 = icmp eq i32 %tok, 317
  br i1 %eqtmp404, label %cond_then_block402, label %cond_else_blockX403

skip_spaces:                                      ; preds = %cond_then_block16
  br label %loop_top_block

skip_spaces_end:                                  ; preds = %cond_end_block
  %ch55 = load i32, i32* @ch, align 4
  %eq56 = icmp eq i32 %ch55, 60
  br i1 %eq56, label %cond_jump_then57, label %cond_jump_elif0

loop_top_block:                                   ; preds = %cond_then_block54, %skip_spaces
  %ch = load i32, i32* @ch, align 4
  store i32 1219, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.42, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

is_space:                                         ; preds = %loop_top_block
  %inline_result_variable25 = alloca i32, align 4
  %ch26 = alloca i32, align 4
  store i32 %ch, i32* %ch26, align 4
  %ch30 = load i32, i32* %ch26, align 4
  %eq = icmp eq i32 %ch30, 32
  store i1 %eq, i1* %oror29, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then31

is_space_end:                                     ; preds = %cond_jump_end48
  %inline_result_variable53 = load i32, i32* %inline_result_variable25, align 4
  %icmpA = icmp ne i32 %inline_result_variable53, 0
  br i1 %icmpA, label %cond_then_block54, label %cond_end_block

cond_jump_then31:                                 ; preds = %is_space
  %ch32 = load i32, i32* %ch26, align 4
  %eq33 = icmp eq i32 %ch32, 9
  %oror34 = or i1 %eq, %eq33
  store i1 %oror34, i1* %oror29, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then31, %is_space
  %oror_result_value = load i1, i1* %oror29, align 1
  store i1 %oror_result_value, i1* %oror28, align 1
  br i1 %oror_result_value, label %cond_jump_end36, label %cond_jump_then35

cond_jump_then35:                                 ; preds = %cond_jump_end
  %ch37 = load i32, i32* %ch26, align 4
  %eq38 = icmp eq i32 %ch37, 11
  %oror39 = or i1 %oror_result_value, %eq38
  store i1 %oror39, i1* %oror28, align 1
  br label %cond_jump_end36

cond_jump_end36:                                  ; preds = %cond_jump_then35, %cond_jump_end
  %oror_result_value40 = load i1, i1* %oror28, align 1
  store i1 %oror_result_value40, i1* %oror27, align 1
  br i1 %oror_result_value40, label %cond_jump_end42, label %cond_jump_then41

cond_jump_then41:                                 ; preds = %cond_jump_end36
  %ch43 = load i32, i32* %ch26, align 4
  %eq44 = icmp eq i32 %ch43, 12
  %oror45 = or i1 %oror_result_value40, %eq44
  store i1 %oror45, i1* %oror27, align 1
  br label %cond_jump_end42

cond_jump_end42:                                  ; preds = %cond_jump_then41, %cond_jump_end36
  %oror_result_value46 = load i1, i1* %oror27, align 1
  store i1 %oror_result_value46, i1* %oror, align 1
  br i1 %oror_result_value46, label %cond_jump_end48, label %cond_jump_then47

cond_jump_then47:                                 ; preds = %cond_jump_end42
  %ch49 = load i32, i32* %ch26, align 4
  %eq50 = icmp eq i32 %ch49, 13
  %oror51 = or i1 %oror_result_value46, %eq50
  store i1 %oror51, i1* %oror, align 1
  br label %cond_jump_end48

cond_jump_end48:                                  ; preds = %cond_jump_then47, %cond_jump_end42
  %oror_result_value52 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value52 to i32
  store i32 %icastKX, i32* %inline_result_variable25, align 4
  br label %is_space_end

cond_then_block54:                                ; preds = %is_space_end
  call void @minp()
  br label %loop_top_block

cond_end_block:                                   ; preds = %is_space_end
  br label %skip_spaces_end

cond_jump_then57:                                 ; preds = %skip_spaces_end
  store i32 62, i32* %c, align 4
  br label %preprocess.read_name
  br label %cond_end58

cond_jump_elif0:                                  ; preds = %skip_spaces_end
  %ch59 = load i32, i32* @ch, align 4
  %eq60 = icmp eq i32 %ch59, 34
  br i1 %eq60, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %ch61 = load i32, i32* @ch, align 4
  store i32 %ch61, i32* %c, align 4
  br label %preprocess.read_name

cond_else_block:                                  ; preds = %cond_jump_elif0
  call void @next()
  %array_castA = bitcast [1024 x i8]* %buf to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 0, i8* %gepBX, align 1
  %tok132 = load i32, i32* @tok, align 4
  %eq133 = icmp eq i32 %tok132, 181
  br i1 %eq133, label %cond_jump_then134, label %cond_else_block135

cond_end58:                                       ; preds = %cond_end136, %cond_end_block88, %cond_jump_then57
  %s1194 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL195 = getelementptr inbounds %TCCState, %TCCState* %s1194, i32 0, i32 1
  %include_stack_ptr = load %BufferedFile**, %BufferedFile*** %fieldLLL195, align 8
  %s1196 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s1196, i32 0, i32 51
  %autocast197 = bitcast [32 x %BufferedFile*]* %fieldRRRROOU to %BufferedFile**
  %ptrToIntC198 = ptrtoint %BufferedFile** %autocast197 to i64
  %add199 = add i64 %ptrToIntC198, 256
  %intToPtrB200 = inttoptr i64 %add199 to %BufferedFile**
  %gteq_signed = icmp sge %BufferedFile** %include_stack_ptr, %intToPtrB200
  br i1 %gteq_signed, label %cond_jump_then201, label %cond_end202

preprocess.read_name:                             ; preds = %cond_jump_elif_then0, %cond_jump_then57
  store i32 1226, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.43, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp

inp:                                              ; preds = %preprocess.read_name
  %file62 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file63 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL64 = getelementptr inbounds %BufferedFile, %BufferedFile* %file63, i32 0, i32 0
  %buf_ptr65 = load i8*, i8** %fieldLLL64, align 8
  %ptrToIntC = ptrtoint i8* %buf_ptr65 to i64
  %add66 = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add66 to i8*
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file62, i32 0, i32 0
  store i8* %intToPtrB, i8** %fieldTU, align 8
  %derefference_valueB = load i8, i8* %intToPtrB, align 1
  %icastKY67 = zext i8 %derefference_valueB to i32
  store i32 %icastKY67, i32* @ch, align 4
  %ch68 = load i32, i32* @ch, align 4
  %eq69 = icmp eq i32 %ch68, 92
  br i1 %eq69, label %cond_jump_then70, label %cond_end71

inp_end:                                          ; preds = %cond_end71
  %autocast = bitcast [1024 x i8]* %buf to i8*
  store i8* %autocast, i8** %q, align 8
  br label %loop_top_block72

cond_jump_then70:                                 ; preds = %inp
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* @ch, align 4
  br label %cond_end71

cond_end71:                                       ; preds = %cond_jump_then70, %inp
  br label %inp_end

loop_top_block72:                                 ; preds = %cond_end105, %inp_end
  %ch74 = load i32, i32* @ch, align 4
  %c75 = load i32, i32* %c, align 4
  %not_eq = icmp ne i32 %ch74, %c75
  store i1 %not_eq, i1* %andand73, align 1
  br i1 %not_eq, label %cond_jump_then76, label %cond_jump_end77

cond_jump_then76:                                 ; preds = %loop_top_block72
  %ch78 = load i32, i32* @ch, align 4
  %not_eq79 = icmp ne i32 %ch78, 10
  %andand80 = and i1 %not_eq, %not_eq79
  store i1 %andand80, i1* %andand73, align 1
  br label %cond_jump_end77

cond_jump_end77:                                  ; preds = %cond_jump_then76, %loop_top_block72
  %andand_result_value = load i1, i1* %andand73, align 1
  store i1 %andand_result_value, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then81, label %cond_jump_end82

cond_jump_then81:                                 ; preds = %cond_jump_end77
  %ch83 = load i32, i32* @ch, align 4
  %not_eq84 = icmp ne i32 %ch83, -1
  %andand85 = and i1 %andand_result_value, %not_eq84
  store i1 %andand85, i1* %andand, align 1
  br label %cond_jump_end82

cond_jump_end82:                                  ; preds = %cond_jump_then81, %cond_jump_end77
  %andand_result_value86 = load i1, i1* %andand, align 1
  br i1 %andand_result_value86, label %cond_then_block87, label %cond_end_block88

cond_then_block87:                                ; preds = %cond_jump_end82
  %q89 = load i8*, i8** %q, align 8
  %autocast90 = bitcast [1024 x i8]* %buf to i8*
  %ptrToIntG = ptrtoint i8* %q89 to i64
  %ptrToIntH = ptrtoint i8* %autocast90 to i64
  %sub91 = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub91, 1
  %le = icmp slt i64 %div, 1023
  br i1 %le, label %cond_jump_then92, label %cond_end93

cond_end_block88:                                 ; preds = %cond_jump_end82
  %q131 = load i8*, i8** %q, align 8
  store i8 0, i8* %q131, align 1
  call void @minp()
  br label %cond_end58

cond_jump_then92:                                 ; preds = %cond_then_block87
  %q94 = load i8*, i8** %q, align 8
  %ptrToIntC95 = ptrtoint i8* %q94 to i64
  %add96 = add i64 %ptrToIntC95, 1
  %intToPtrB97 = inttoptr i64 %add96 to i8*
  store i8* %intToPtrB97, i8** %q, align 8
  %q98 = load i8*, i8** %q, align 8
  %ptrToIntI = ptrtoint i8* %q98 to i64
  %sub99 = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub99 to i8*
  %ch100 = load i32, i32* @ch, align 4
  %icastJ = trunc i32 %ch100 to i8
  store i8 %icastJ, i8* %iintToPtrD, align 1
  br label %cond_end93

cond_end93:                                       ; preds = %cond_jump_then92, %cond_then_block87
  %ch101 = load i32, i32* @ch, align 4
  %eq102 = icmp eq i32 %ch101, 92
  br i1 %eq102, label %cond_jump_then103, label %cond_else_block104

cond_jump_then103:                                ; preds = %cond_end93
  %fun_result106 = call i32 @handle_stray_noerror()
  %eq107 = icmp eq i32 %fun_result106, 0
  br i1 %eq107, label %cond_jump_then108, label %cond_end109

cond_else_block104:                               ; preds = %cond_end93
  store i32 1235, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.44, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp114

cond_end105:                                      ; preds = %inp_end115, %cond_end109
  br label %loop_top_block72

cond_jump_then108:                                ; preds = %cond_jump_then103
  %q110 = load i8*, i8** %q, align 8
  %ptrToIntI111 = ptrtoint i8* %q110 to i64
  %sub112 = sub i64 %ptrToIntI111, 1
  %iintToPtrD113 = inttoptr i64 %sub112 to i8*
  store i8* %iintToPtrD113, i8** %q, align 8
  br label %cond_end109

cond_end109:                                      ; preds = %cond_jump_then108, %cond_jump_then103
  br label %cond_end105

inp114:                                           ; preds = %cond_else_block104
  %file116 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file117 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL118 = getelementptr inbounds %BufferedFile, %BufferedFile* %file117, i32 0, i32 0
  %buf_ptr119 = load i8*, i8** %fieldLLL118, align 8
  %ptrToIntC120 = ptrtoint i8* %buf_ptr119 to i64
  %add121 = add i64 %ptrToIntC120, 1
  %intToPtrB122 = inttoptr i64 %add121 to i8*
  %fieldTU123 = getelementptr inbounds %BufferedFile, %BufferedFile* %file116, i32 0, i32 0
  store i8* %intToPtrB122, i8** %fieldTU123, align 8
  %derefference_valueB124 = load i8, i8* %intToPtrB122, align 1
  %icastKY125 = zext i8 %derefference_valueB124 to i32
  store i32 %icastKY125, i32* @ch, align 4
  %ch126 = load i32, i32* @ch, align 4
  %eq127 = icmp eq i32 %ch126, 92
  br i1 %eq127, label %cond_jump_then128, label %cond_end129

inp_end115:                                       ; preds = %cond_end129
  br label %cond_end105

cond_jump_then128:                                ; preds = %inp114
  %fun_result130 = call i32 @handle_eob()
  store i32 %fun_result130, i32* @ch, align 4
  br label %cond_end129

cond_end129:                                      ; preds = %cond_jump_then128, %inp114
  br label %inp_end115

cond_jump_then134:                                ; preds = %cond_else_block
  br label %loop_top_block137

cond_else_block135:                               ; preds = %cond_else_block
  br label %loop_top_block149

cond_end136:                                      ; preds = %cond_end182, %cond_end_block141
  br label %cond_end58

loop_top_block137:                                ; preds = %cond_end145, %cond_jump_then134
  %tok138 = load i32, i32* @tok, align 4
  %not_eq139 = icmp ne i32 %tok138, 10
  br i1 %not_eq139, label %cond_then_block140, label %cond_end_block141

cond_then_block140:                               ; preds = %loop_top_block137
  %tok142 = load i32, i32* @tok, align 4
  %not_eq143 = icmp ne i32 %tok142, 181
  br i1 %not_eq143, label %cond_jump_then144, label %cond_end145

cond_end_block141:                                ; preds = %loop_top_block137
  store i32 34, i32* %c, align 4
  br label %cond_end136

cond_jump_then144:                                ; preds = %cond_then_block140
  br label %preprocess.include_syntax

cond_end145:                                      ; preds = %preprocess.include_syntax, %cond_then_block140
  %autocast146 = bitcast [1024 x i8]* %buf to i8*
  %tokc = load %CValue, %CValue* @tokc, align 16
  %cstr = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %fieldLLL147 = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL147, align 8
  %fun_result148 = call i8* @pstrcat(i8* %autocast146, i32 1024, i8* %data)
  call void @next()
  br label %loop_top_block137

preprocess.include_syntax:                        ; preds = %cond_jump_then181, %cond_jump_then144
  call void (i8*, ...) @error(i8* bitcast ([44 x i8]* @47 to i8*))
  br label %cond_end145

loop_top_block149:                                ; preds = %cond_then_block152, %cond_else_block135
  %tok150 = load i32, i32* @tok, align 4
  %not_eq151 = icmp ne i32 %tok150, 10
  br i1 %not_eq151, label %cond_then_block152, label %cond_end_block153

cond_then_block152:                               ; preds = %loop_top_block149
  %autocast154 = bitcast [1024 x i8]* %buf to i8*
  %tok155 = load i32, i32* @tok, align 4
  %tokc156 = load %CValue, %CValue* @tokc, align 16
  %fun_result157 = call i8* @get_tok_str(i32 %tok155, %CValue* @tokc)
  %fun_result158 = call i8* @pstrcat(i8* %autocast154, i32 1024, i8* %fun_result157)
  call void @next()
  br label %loop_top_block149

cond_end_block153:                                ; preds = %loop_top_block149
  %autocast159 = bitcast [1024 x i8]* %buf to i8*
  %fun_result160 = call i64 @strlen(i8* %autocast159)
  %icastM = trunc i64 %fun_result160 to i32
  store i32 %icastM, i32* %len, align 4
  %len163 = load i32, i32* %len, align 4
  %le164 = icmp slt i32 %len163, 2
  store i1 %le164, i1* %oror162, align 1
  br i1 %le164, label %cond_jump_end166, label %cond_jump_then165

cond_jump_then165:                                ; preds = %cond_end_block153
  %array_castG = bitcast [1024 x i8]* %buf to i8*
  %gepLY = getelementptr i8, i8* %array_castG, i32 0
  %elementYYY = load i8, i8* %gepLY, align 1
  %icastL = sext i8 %elementYYY to i32
  %not_eq167 = icmp ne i32 %icastL, 60
  %oror168 = or i1 %le164, %not_eq167
  store i1 %oror168, i1* %oror162, align 1
  br label %cond_jump_end166

cond_jump_end166:                                 ; preds = %cond_jump_then165, %cond_end_block153
  %oror_result_value169 = load i1, i1* %oror162, align 1
  store i1 %oror_result_value169, i1* %oror161, align 1
  br i1 %oror_result_value169, label %cond_jump_end171, label %cond_jump_then170

cond_jump_then170:                                ; preds = %cond_jump_end166
  %len172 = load i32, i32* %len, align 4
  %sub173 = sub i32 %len172, 1
  %array_castG174 = bitcast [1024 x i8]* %buf to i8*
  %gepLY175 = getelementptr i8, i8* %array_castG174, i32 %sub173
  %elementYYY176 = load i8, i8* %gepLY175, align 1
  %icastL177 = sext i8 %elementYYY176 to i32
  %not_eq178 = icmp ne i32 %icastL177, 62
  %oror179 = or i1 %oror_result_value169, %not_eq178
  store i1 %oror179, i1* %oror161, align 1
  br label %cond_jump_end171

cond_jump_end171:                                 ; preds = %cond_jump_then170, %cond_jump_end166
  %oror_result_value180 = load i1, i1* %oror161, align 1
  br i1 %oror_result_value180, label %cond_jump_then181, label %cond_end182

cond_jump_then181:                                ; preds = %cond_jump_end171
  br label %preprocess.include_syntax
  br label %cond_end182

cond_end182:                                      ; preds = %cond_jump_then181, %cond_jump_end171
  %castBA = bitcast [1024 x i8]* %buf to i8*
  %autocast183 = bitcast [1024 x i8]* %buf to i8*
  %ptrToIntC184 = ptrtoint i8* %autocast183 to i64
  %add185 = add i64 %ptrToIntC184, 1
  %intToPtrB186 = inttoptr i64 %add185 to i8*
  %len187 = load i32, i32* %len, align 4
  %sub188 = sub i32 %len187, 2
  %icastD = sext i32 %sub188 to i64
  %fun_result189 = call i8* @memmove(i8* %castBA, i8* %intToPtrB186, i64 %icastD)
  %len190 = load i32, i32* %len, align 4
  %sub191 = sub i32 %len190, 2
  %array_castA192 = bitcast [1024 x i8]* %buf to i8*
  %gepBX193 = getelementptr i8, i8* %array_castA192, i32 %sub191
  store i8 0, i8* %gepBX193, align 1
  store i32 62, i32* %c, align 4
  br label %cond_end136

cond_jump_then201:                                ; preds = %cond_end58
  call void (i8*, ...) @error(i8* bitcast ([28 x i8]* @48 to i8*))
  br label %cond_end202

cond_end202:                                      ; preds = %cond_jump_then201, %cond_end58
  %s1203 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL204 = getelementptr inbounds %TCCState, %TCCState* %s1203, i32 0, i32 4
  %nb_include_paths = load i32, i32* %fieldLLL204, align 4
  %s1205 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL206 = getelementptr inbounds %TCCState, %TCCState* %s1205, i32 0, i32 6
  %nb_sysinclude_paths = load i32, i32* %fieldLLL206, align 4
  %add207 = add i32 %nb_include_paths, %nb_sysinclude_paths
  store i32 %add207, i32* %n, align 4
  store i32 -2, i32* %i, align 4
  br label %loop_top_block208

loop_continue_top_block:                          ; preds = %cond_end387, %cond_end347, %cond_jump_then337, %cond_jump_then235, %cond_jump_then227
  %i398 = load i32, i32* %i, align 4
  %add399 = add i32 %i398, 1
  store i32 %add399, i32* %i, align 4
  br label %loop_top_block208

loop_top_block208:                                ; preds = %loop_continue_top_block, %cond_end202
  %i209 = load i32, i32* %i, align 4
  %n210 = load i32, i32* %n, align 4
  %le211 = icmp slt i32 %i209, %n210
  br i1 %le211, label %cond_then_block212, label %cond_end_block213

cond_then_block212:                               ; preds = %loop_top_block208
  %i214 = load i32, i32* %i, align 4
  %eq215 = icmp eq i32 %i214, -2
  br i1 %eq215, label %cond_jump_then216, label %cond_jump_elif0217

cond_end_block213:                                ; preds = %loop_top_block208
  %autocast400 = bitcast [1024 x i8]* %buf to i8*
  call void (i8*, ...) @error(i8* bitcast ([28 x i8]* @50 to i8*), i8* %autocast400)
  br label %preprocess.include_done

cond_jump_then216:                                ; preds = %cond_then_block212
  %array_castG221 = bitcast [1024 x i8]* %buf to i8*
  %gepLY222 = getelementptr i8, i8* %array_castG221, i32 0
  %elementYYY223 = load i8, i8* %gepLY222, align 1
  %icastL224 = sext i8 %elementYYY223 to i32
  %eq225 = icmp eq i32 %icastL224, 47
  %logical_denial = icmp eq i1 %eq225, false
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA226 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA226, label %cond_jump_then227, label %cond_end228

cond_jump_elif0217:                               ; preds = %cond_then_block212
  %i231 = load i32, i32* %i, align 4
  %eq232 = icmp eq i32 %i231, -1
  br i1 %eq232, label %cond_jump_elif_then0218, label %cond_else_block219

cond_jump_elif_then0218:                          ; preds = %cond_jump_elif0217
  %c233 = load i32, i32* %c, align 4
  %not_eq234 = icmp ne i32 %c233, 34
  br i1 %not_eq234, label %cond_jump_then235, label %cond_end236

cond_else_block219:                               ; preds = %cond_jump_elif0217
  %i260 = load i32, i32* %i, align 4
  %s1261 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL262 = getelementptr inbounds %TCCState, %TCCState* %s1261, i32 0, i32 4
  %nb_include_paths263 = load i32, i32* %fieldLLL262, align 4
  %le264 = icmp slt i32 %i260, %nb_include_paths263
  br i1 %le264, label %cond_jump_then265, label %cond_else_block266

cond_end220:                                      ; preds = %cond_end267, %cond_end236, %cond_end228
  %autocast289 = bitcast [1024 x i8]* %buf1 to i8*
  %autocast290 = bitcast [1024 x i8]* %buf to i8*
  %fun_result291 = call i8* @pstrcat(i8* %autocast289, i32 1024, i8* %autocast290)
  %s1292 = load %TCCState*, %TCCState** %s1, align 8
  %c293 = load i32, i32* %c, align 4
  %autocast294 = bitcast [1024 x i8]* %buf1 to i8*
  %fun_result295 = call %CachedInclude* @search_cached_include(%TCCState* %s1292, i32 %c293, i8* %autocast294)
  store %CachedInclude* %fun_result295, %CachedInclude** %e, align 8
  %e297 = load %CachedInclude*, %CachedInclude** %e, align 8
  %icmpB298 = icmp ne %CachedInclude* %e297, null
  store i1 %icmpB298, i1* %andand296, align 1
  br i1 %icmpB298, label %cond_jump_then299, label %cond_jump_end300

cond_jump_then227:                                ; preds = %cond_jump_then216
  br label %loop_continue_top_block

cond_end228:                                      ; preds = %after_continue, %cond_jump_then216
  %array_castA229 = bitcast [1024 x i8]* %buf1 to i8*
  %gepBX230 = getelementptr i8, i8* %array_castA229, i32 0
  store i8 0, i8* %gepBX230, align 1
  br label %cond_end220

after_continue:                                   ; No predecessors!
  br label %cond_end228

cond_jump_then235:                                ; preds = %cond_jump_elif_then0218
  br label %loop_continue_top_block

cond_end236:                                      ; preds = %after_continue237, %cond_jump_elif_then0218
  %file238 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU239 = getelementptr inbounds %BufferedFile, %BufferedFile* %file238, i32 0, i32 9
  %autocast240 = bitcast [1024 x i8]* %fieldRRRROOU239 to i8*
  %fun_result241 = call i8* @tcc_basename(i8* %autocast240)
  %file242 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU243 = getelementptr inbounds %BufferedFile, %BufferedFile* %file242, i32 0, i32 9
  %autocast244 = bitcast [1024 x i8]* %fieldRRRROOU243 to i8*
  %ptrToIntG245 = ptrtoint i8* %fun_result241 to i64
  %ptrToIntH246 = ptrtoint i8* %autocast244 to i64
  %sub247 = sub i64 %ptrToIntG245, %ptrToIntH246
  %div248 = sdiv i64 %sub247, 1
  %icastM249 = trunc i64 %div248 to i32
  store i32 %icastM249, i32* %size, align 4
  %castBA250 = bitcast [1024 x i8]* %buf1 to i8*
  %file251 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU252 = getelementptr inbounds %BufferedFile, %BufferedFile* %file251, i32 0, i32 9
  %castBA253 = bitcast [1024 x i8]* %fieldRRRROOU252 to i8*
  %size254 = load i32, i32* %size, align 4
  %icastD255 = sext i32 %size254 to i64
  %fun_result256 = call i8* @memcpy(i8* %castBA250, i8* %castBA253, i64 %icastD255)
  %size257 = load i32, i32* %size, align 4
  %array_castA258 = bitcast [1024 x i8]* %buf1 to i8*
  %gepBX259 = getelementptr i8, i8* %array_castA258, i32 %size257
  store i8 0, i8* %gepBX259, align 1
  br label %cond_end220

after_continue237:                                ; No predecessors!
  br label %cond_end236

cond_jump_then265:                                ; preds = %cond_else_block219
  %s1268 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL269 = getelementptr inbounds %TCCState, %TCCState* %s1268, i32 0, i32 3
  %include_paths = load i8**, i8*** %fieldLLL269, align 8
  %i270 = load i32, i32* %i, align 4
  %element_addressAB271 = load i8**, i8*** %fieldLLL269, align 8
  %element_addressXYXZY272 = getelementptr inbounds i8*, i8** %element_addressAB271, i32 %i270
  %load_element273 = load i8*, i8** %element_addressXYXZY272, align 8
  store i8* %load_element273, i8** %path, align 8
  br label %cond_end267

cond_else_block266:                               ; preds = %cond_else_block219
  %s1274 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL275 = getelementptr inbounds %TCCState, %TCCState* %s1274, i32 0, i32 5
  %sysinclude_paths = load i8**, i8*** %fieldLLL275, align 8
  %i276 = load i32, i32* %i, align 4
  %s1277 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL278 = getelementptr inbounds %TCCState, %TCCState* %s1277, i32 0, i32 4
  %nb_include_paths279 = load i32, i32* %fieldLLL278, align 4
  %sub280 = sub i32 %i276, %nb_include_paths279
  %element_addressAB281 = load i8**, i8*** %fieldLLL275, align 8
  %element_addressXYXZY282 = getelementptr inbounds i8*, i8** %element_addressAB281, i32 %sub280
  %load_element283 = load i8*, i8** %element_addressXYXZY282, align 8
  store i8* %load_element283, i8** %path, align 8
  br label %cond_end267

cond_end267:                                      ; preds = %cond_else_block266, %cond_jump_then265
  %autocast284 = bitcast [1024 x i8]* %buf1 to i8*
  %path285 = load i8*, i8** %path, align 8
  %fun_result286 = call i8* @pstrcpy(i8* %autocast284, i32 1024, i8* %path285)
  %autocast287 = bitcast [1024 x i8]* %buf1 to i8*
  %fun_result288 = call i8* @pstrcat(i8* %autocast287, i32 1024, i8* bitcast ([2 x i8]* @49 to i8*))
  br label %cond_end220

cond_jump_then299:                                ; preds = %cond_end220
  %e301 = load %CachedInclude*, %CachedInclude** %e, align 8
  %fieldLLL302 = getelementptr inbounds %CachedInclude, %CachedInclude* %e301, i32 0, i32 0
  %ifndef_macro = load i32, i32* %fieldLLL302, align 4
  store i32 1314, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.45, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find303

cond_jump_end300:                                 ; preds = %define_find_end306, %cond_end220
  %andand_result_value326 = load i1, i1* %andand296, align 1
  br i1 %andand_result_value326, label %cond_jump_then327, label %cond_else_block328

define_find303:                                   ; preds = %cond_jump_then299
  %inline_result_variable304 = alloca %Sym*, align 8
  %v305 = alloca i32, align 4
  store i32 %ifndef_macro, i32* %v305, align 4
  %v307 = load i32, i32* %v305, align 4
  %sub308 = sub i32 %v307, 256
  store i32 %sub308, i32* %v305, align 4
  %add309 = add i32 %sub308, 256
  %v310 = load i32, i32* %v305, align 4
  %tok_ident311 = load i32, i32* @tok_ident, align 4
  %sub312 = sub i32 %tok_ident311, 256
  %gteq_unsinged313 = icmp uge i32 %v310, %sub312
  br i1 %gteq_unsinged313, label %cond_jump_then314, label %cond_end315

define_find_end306:                               ; preds = %cond_end315, %cond_jump_then314
  %inline_result_variable323 = load %Sym*, %Sym** %inline_result_variable304, align 8
  %icmpB324 = icmp ne %Sym* %inline_result_variable323, null
  %andand325 = and i1 %icmpB298, %icmpB324
  store i1 %andand325, i1* %andand296, align 1
  br label %cond_jump_end300

cond_jump_then314:                                ; preds = %define_find303
  store %Sym* null, %Sym** %inline_result_variable304, align 8
  br label %define_find_end306

cond_end315:                                      ; preds = %define_find303
  %table_ident316 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v317 = load i32, i32* %v305, align 4
  %element_addressAB318 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY319 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB318, i32 %v317
  %load_element320 = load %TokenSym*, %TokenSym** %element_addressXYXZY319, align 8
  %fieldLLL321 = getelementptr inbounds %TokenSym, %TokenSym* %load_element320, i32 0, i32 1
  %sym_define322 = load %Sym*, %Sym** %fieldLLL321, align 8
  store %Sym* %sym_define322, %Sym** %inline_result_variable304, align 8
  br label %define_find_end306

cond_jump_then327:                                ; preds = %cond_jump_end300
  store %BufferedFile* null, %BufferedFile** %f, align 8
  br label %cond_end329

cond_else_block328:                               ; preds = %cond_jump_end300
  %s1330 = load %TCCState*, %TCCState** %s1, align 8
  %autocast331 = bitcast [1024 x i8]* %buf1 to i8*
  %fun_result332 = call %BufferedFile* @tcc_open(%TCCState* %s1330, i8* %autocast331)
  store %BufferedFile* %fun_result332, %BufferedFile** %f, align 8
  %f333 = load %BufferedFile*, %BufferedFile** %f, align 8
  %logical_denial334 = icmp eq %BufferedFile* %f333, null
  %castOOOO335 = zext i1 %logical_denial334 to i32
  %icmpA336 = icmp ne i32 %castOOOO335, 0
  br i1 %icmpA336, label %cond_jump_then337, label %cond_end338

cond_end329:                                      ; preds = %cond_end338, %cond_jump_then327
  %tok340 = load i32, i32* @tok, align 4
  %eq341 = icmp eq i32 %tok340, 315
  br i1 %eq341, label %cond_jump_then342, label %cond_end343

cond_jump_then337:                                ; preds = %cond_else_block328
  br label %loop_continue_top_block

cond_end338:                                      ; preds = %after_continue339, %cond_else_block328
  br label %cond_end329

after_continue339:                                ; No predecessors!
  br label %cond_end338

cond_jump_then342:                                ; preds = %cond_end329
  store i32 314, i32* @tok, align 4
  %f344 = load %BufferedFile*, %BufferedFile** %f, align 8
  %icmpB345 = icmp ne %BufferedFile* %f344, null
  br i1 %icmpB345, label %cond_jump_then346, label %cond_end347

cond_end343:                                      ; preds = %after_continue349, %cond_end329
  %f350 = load %BufferedFile*, %BufferedFile** %f, align 8
  %logical_denial351 = icmp eq %BufferedFile* %f350, null
  %castOOOO352 = zext i1 %logical_denial351 to i32
  %icmpA353 = icmp ne i32 %castOOOO352, 0
  br i1 %icmpA353, label %cond_jump_then354, label %cond_end355

cond_jump_then346:                                ; preds = %cond_jump_then342
  %f348 = load %BufferedFile*, %BufferedFile** %f, align 8
  call void @tcc_close(%BufferedFile* %f348)
  br label %cond_end347

cond_end347:                                      ; preds = %cond_jump_then346, %cond_jump_then342
  br label %loop_continue_top_block

after_continue349:                                ; No predecessors!
  br label %cond_end343

cond_jump_then354:                                ; preds = %cond_end343
  br label %preprocess.include_done
  br label %cond_end355

cond_end355:                                      ; preds = %cond_jump_then354, %cond_end343
  %s1356 = load %TCCState*, %TCCState** %s1, align 8
  %s1357 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL358 = getelementptr inbounds %TCCState, %TCCState* %s1357, i32 0, i32 1
  %include_stack_ptr359 = load %BufferedFile**, %BufferedFile*** %fieldLLL358, align 8
  %ptrToIntC360 = ptrtoint %BufferedFile** %include_stack_ptr359 to i64
  %add361 = add i64 %ptrToIntC360, 8
  %intToPtrB362 = inttoptr i64 %add361 to %BufferedFile**
  %fieldTU363 = getelementptr inbounds %TCCState, %TCCState* %s1356, i32 0, i32 1
  store %BufferedFile** %intToPtrB362, %BufferedFile*** %fieldTU363, align 8
  %s1364 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL365 = getelementptr inbounds %TCCState, %TCCState* %s1364, i32 0, i32 1
  %include_stack_ptr366 = load %BufferedFile**, %BufferedFile*** %fieldLLL365, align 8
  %ptrToIntI367 = ptrtoint %BufferedFile** %include_stack_ptr366 to i64
  %sub368 = sub i64 %ptrToIntI367, 8
  %iintToPtrD369 = inttoptr i64 %sub368 to %BufferedFile**
  %file370 = load %BufferedFile*, %BufferedFile** @file, align 8
  store %BufferedFile* %file370, %BufferedFile** %iintToPtrD369, align 8
  %f371 = load %BufferedFile*, %BufferedFile** %f, align 8
  %c372 = load i32, i32* %c, align 4
  %icastJ373 = trunc i32 %c372 to i8
  %fieldTU374 = getelementptr inbounds %BufferedFile, %BufferedFile* %f371, i32 0, i32 7
  store i8 %icastJ373, i8* %fieldTU374, align 1
  %f375 = load %BufferedFile*, %BufferedFile** %f, align 8
  %fieldRRRROOU376 = getelementptr inbounds %BufferedFile, %BufferedFile* %f375, i32 0, i32 8
  %autocast377 = bitcast [512 x i8]* %fieldRRRROOU376 to i8*
  %f378 = load %BufferedFile*, %BufferedFile** %f, align 8
  %fieldRRRROOU379 = getelementptr inbounds %BufferedFile, %BufferedFile* %f378, i32 0, i32 8
  %autocast380 = bitcast [1024 x i8]* %buf1 to i8*
  %fun_result381 = call i8* @pstrcpy(i8* %autocast377, i32 512, i8* %autocast380)
  %f382 = load %BufferedFile*, %BufferedFile** %f, align 8
  store %BufferedFile* %f382, %BufferedFile** @file, align 8
  %tcc_state383 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL384 = getelementptr inbounds %TCCState, %TCCState* %tcc_state383, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL384, align 4
  %icmpA385 = icmp ne i32 %do_debug, 0
  br i1 %icmpA385, label %cond_jump_then386, label %cond_end387

preprocess.include_done:                          ; preds = %cond_end_block213, %cond_jump_then354
  br label %end_blockX

cond_jump_then386:                                ; preds = %cond_end355
  %file388 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU389 = getelementptr inbounds %BufferedFile, %BufferedFile* %file388, i32 0, i32 9
  %autocast390 = bitcast [1024 x i8]* %fieldRRRROOU389 to i8*
  call void @put_stabs(i8* %autocast390, i32 130, i32 0, i32 0, i64 0)
  br label %cond_end387

cond_end387:                                      ; preds = %cond_jump_then386, %cond_end355
  %tok_flags = load i32, i32* @tok_flags, align 4
  %ortmp = or i32 %tok_flags, 3
  store i32 %ortmp, i32* @tok_flags, align 4
  %file391 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL392 = getelementptr inbounds %BufferedFile, %BufferedFile* %file391, i32 0, i32 0
  %buf_ptr393 = load i8*, i8** %fieldLLL392, align 8
  %element_addressAB394 = load i8*, i8** %fieldLLL392, align 8
  %element_addressXYXZY395 = getelementptr inbounds i8, i8* %element_addressAB394, i32 0
  %load_element396 = load i8, i8* %element_addressXYXZY395, align 1
  %icastKY397 = zext i8 %load_element396 to i32
  store i32 %icastKY397, i32* @ch, align 4
  br label %preprocess.the_end
  br label %loop_continue_top_block

preprocess.the_end:                               ; preds = %cond_end_block806, %cond_end_block603, %cond_end387
  %saved_parse_flags807 = load i32, i32* %saved_parse_flags, align 4
  store i32 %saved_parse_flags807, i32* @parse_flags, align 4
  ret void

after_break401:                                   ; No predecessors!
  br label %cond_else_blockX19
  br label %cond_else_blockX403

cond_then_block402:                               ; preds = %cond_else_blockX19
  store i32 1, i32* %c, align 4
  br label %preprocess.do_ifdef
  br label %cond_then_block405

cond_else_blockX403:                              ; preds = %cond_else_blockX19, %after_break401
  %eqtmp407 = icmp eq i32 %tok, 259
  br i1 %eqtmp407, label %cond_then_block405, label %cond_else_blockX406

preprocess.do_ifdef:                              ; preds = %cond_then_block409, %cond_then_block402
  call void @next_nomacro()
  %tok412 = load i32, i32* @tok, align 4
  %le413 = icmp slt i32 %tok412, 256
  br i1 %le413, label %cond_jump_then414, label %cond_end415

cond_then_block405:                               ; preds = %cond_else_blockX403, %cond_then_block402
  %fun_result408 = call i32 @expr_preprocess()
  store i32 %fun_result408, i32* %c, align 4
  br label %preprocess.do_if
  br label %cond_then_block409

cond_else_blockX406:                              ; preds = %cond_else_blockX403
  %eqtmp411 = icmp eq i32 %tok, 316
  br i1 %eqtmp411, label %cond_then_block409, label %cond_else_blockX410

preprocess.do_if:                                 ; preds = %define_find_end436, %cond_then_block405
  %s1457 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL458 = getelementptr inbounds %TCCState, %TCCState* %s1457, i32 0, i32 2
  %ifdef_stack_ptr = load i32*, i32** %fieldLLL458, align 8
  %s1459 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU460 = getelementptr inbounds %TCCState, %TCCState* %s1459, i32 0, i32 52
  %autocast461 = bitcast [64 x i32]* %fieldRRRROOU460 to i32*
  %ptrToIntC462 = ptrtoint i32* %autocast461 to i64
  %add463 = add i64 %ptrToIntC462, 256
  %intToPtrB464 = inttoptr i64 %add463 to i32*
  %gteq_signed465 = icmp sge i32* %ifdef_stack_ptr, %intToPtrB464
  br i1 %gteq_signed465, label %cond_jump_then466, label %cond_end467

cond_then_block409:                               ; preds = %cond_else_blockX406, %cond_then_block405
  store i32 0, i32* %c, align 4
  br label %preprocess.do_ifdef

cond_else_blockX410:                              ; preds = %cond_else_blockX406
  %eqtmp485 = icmp eq i32 %tok, 260
  br i1 %eqtmp485, label %cond_then_block483, label %cond_else_blockX484

cond_jump_then414:                                ; preds = %preprocess.do_ifdef
  %c416 = load i32, i32* %c, align 4
  %icmpA417 = icmp ne i32 %c416, 0
  br i1 %icmpA417, label %cond_jump_then418, label %cond_else_block419

cond_end415:                                      ; preds = %cond_end420, %preprocess.do_ifdef
  %is_bof421 = load i32, i32* %is_bof, align 4
  %icmpA422 = icmp ne i32 %is_bof421, 0
  br i1 %icmpA422, label %cond_jump_then423, label %cond_end424

cond_jump_then418:                                ; preds = %cond_jump_then414
  store i8* bitcast ([2 x i8]* @52 to i8*), i8** %condtional_result_value, align 8
  br label %cond_end420

cond_else_block419:                               ; preds = %cond_jump_then414
  store i8* bitcast ([1 x i8]* @53 to i8*), i8** %condtional_result_value, align 8
  br label %cond_end420

cond_end420:                                      ; preds = %cond_else_block419, %cond_jump_then418
  %conditional_result_value = load i8*, i8** %condtional_result_value, align 8
  call void (i8*, ...) @error(i8* bitcast ([32 x i8]* @51 to i8*), i8* %conditional_result_value)
  br label %cond_end415

cond_jump_then423:                                ; preds = %cond_end415
  %c425 = load i32, i32* %c, align 4
  %icmpA426 = icmp ne i32 %c425, 0
  br i1 %icmpA426, label %cond_jump_then427, label %cond_end428

cond_end424:                                      ; preds = %cond_end428, %cond_end415
  %tok432 = load i32, i32* @tok, align 4
  store i32 1378, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.46, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %define_find433

cond_jump_then427:                                ; preds = %cond_jump_then423
  %file429 = load %BufferedFile*, %BufferedFile** @file, align 8
  %tok430 = load i32, i32* @tok, align 4
  %fieldTU431 = getelementptr inbounds %BufferedFile, %BufferedFile* %file429, i32 0, i32 4
  store i32 %tok430, i32* %fieldTU431, align 4
  br label %cond_end428

cond_end428:                                      ; preds = %cond_jump_then427, %cond_jump_then423
  br label %cond_end424

define_find433:                                   ; preds = %cond_end424
  %inline_result_variable434 = alloca %Sym*, align 8
  %v435 = alloca i32, align 4
  store i32 %tok432, i32* %v435, align 4
  %v437 = load i32, i32* %v435, align 4
  %sub438 = sub i32 %v437, 256
  store i32 %sub438, i32* %v435, align 4
  %add439 = add i32 %sub438, 256
  %v440 = load i32, i32* %v435, align 4
  %tok_ident441 = load i32, i32* @tok_ident, align 4
  %sub442 = sub i32 %tok_ident441, 256
  %gteq_unsinged443 = icmp uge i32 %v440, %sub442
  br i1 %gteq_unsinged443, label %cond_jump_then444, label %cond_end445

define_find_end436:                               ; preds = %cond_end445, %cond_jump_then444
  %inline_result_variable453 = load %Sym*, %Sym** %inline_result_variable434, align 8
  %not_eq454 = icmp ne %Sym* %inline_result_variable453, null
  %c455 = load i32, i32* %c, align 4
  %icastKX456 = zext i1 %not_eq454 to i32
  %xortmp = xor i32 %icastKX456, %c455
  store i32 %xortmp, i32* %c, align 4
  br label %preprocess.do_if

cond_jump_then444:                                ; preds = %define_find433
  store %Sym* null, %Sym** %inline_result_variable434, align 8
  br label %define_find_end436

cond_end445:                                      ; preds = %define_find433
  %table_ident446 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v447 = load i32, i32* %v435, align 4
  %element_addressAB448 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY449 = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB448, i32 %v447
  %load_element450 = load %TokenSym*, %TokenSym** %element_addressXYXZY449, align 8
  %fieldLLL451 = getelementptr inbounds %TokenSym, %TokenSym* %load_element450, i32 0, i32 1
  %sym_define452 = load %Sym*, %Sym** %fieldLLL451, align 8
  store %Sym* %sym_define452, %Sym** %inline_result_variable434, align 8
  br label %define_find_end436

cond_jump_then466:                                ; preds = %preprocess.do_if
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @54 to i8*))
  br label %cond_end467

cond_end467:                                      ; preds = %cond_jump_then466, %preprocess.do_if
  %s1468 = load %TCCState*, %TCCState** %s1, align 8
  %s1469 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL470 = getelementptr inbounds %TCCState, %TCCState* %s1469, i32 0, i32 2
  %ifdef_stack_ptr471 = load i32*, i32** %fieldLLL470, align 8
  %ptrToIntC472 = ptrtoint i32* %ifdef_stack_ptr471 to i64
  %add473 = add i64 %ptrToIntC472, 4
  %intToPtrB474 = inttoptr i64 %add473 to i32*
  %fieldTU475 = getelementptr inbounds %TCCState, %TCCState* %s1468, i32 0, i32 2
  store i32* %intToPtrB474, i32** %fieldTU475, align 8
  %s1476 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL477 = getelementptr inbounds %TCCState, %TCCState* %s1476, i32 0, i32 2
  %ifdef_stack_ptr478 = load i32*, i32** %fieldLLL477, align 8
  %ptrToIntI479 = ptrtoint i32* %ifdef_stack_ptr478 to i64
  %sub480 = sub i64 %ptrToIntI479, 4
  %iintToPtrD481 = inttoptr i64 %sub480 to i32*
  %c482 = load i32, i32* %c, align 4
  store i32 %c482, i32* %iintToPtrD481, align 4
  br label %preprocess.test_skip
  br label %cond_then_block483

preprocess.test_skip:                             ; preds = %cond_end535, %cond_end503, %cond_end467
  %c541 = load i32, i32* %c, align 4
  %andtmp542 = and i32 %c541, 1
  %logical_denial543 = icmp eq i32 %andtmp542, 0
  %castOOOO544 = zext i1 %logical_denial543 to i32
  %icmpA545 = icmp ne i32 %castOOOO544, 0
  br i1 %icmpA545, label %cond_jump_then546, label %cond_end547

cond_then_block483:                               ; preds = %cond_else_blockX410, %cond_end467
  %s1486 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL487 = getelementptr inbounds %TCCState, %TCCState* %s1486, i32 0, i32 2
  %ifdef_stack_ptr488 = load i32*, i32** %fieldLLL487, align 8
  %s1489 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU490 = getelementptr inbounds %TCCState, %TCCState* %s1489, i32 0, i32 52
  %autocast491 = bitcast [64 x i32]* %fieldRRRROOU490 to i32*
  %eq492 = icmp eq i32* %ifdef_stack_ptr488, %autocast491
  br i1 %eq492, label %cond_jump_then493, label %cond_end494

cond_else_blockX484:                              ; preds = %cond_else_blockX410
  %eqtmp513 = icmp eq i32 %tok, 318
  br i1 %eqtmp513, label %cond_then_block511, label %cond_else_blockX512

cond_jump_then493:                                ; preds = %cond_then_block483
  call void (i8*, ...) @error(i8* bitcast ([27 x i8]* @55 to i8*))
  br label %cond_end494

cond_end494:                                      ; preds = %cond_jump_then493, %cond_then_block483
  %s1495 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL496 = getelementptr inbounds %TCCState, %TCCState* %s1495, i32 0, i32 2
  %ifdef_stack_ptr497 = load i32*, i32** %fieldLLL496, align 8
  %element_addressAB498 = load i32*, i32** %fieldLLL496, align 8
  %element_addressXYXZY499 = getelementptr inbounds i32, i32* %element_addressAB498, i32 -1
  %load_element500 = load i32, i32* %element_addressXYXZY499, align 4
  %andtmp = and i32 %load_element500, 2
  %icmpA501 = icmp ne i32 %andtmp, 0
  br i1 %icmpA501, label %cond_jump_then502, label %cond_end503

cond_jump_then502:                                ; preds = %cond_end494
  call void (i8*, ...) @error(i8* bitcast ([18 x i8]* @56 to i8*))
  br label %cond_end503

cond_end503:                                      ; preds = %cond_jump_then502, %cond_end494
  %s1504 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL505 = getelementptr inbounds %TCCState, %TCCState* %s1504, i32 0, i32 2
  %ifdef_stack_ptr506 = load i32*, i32** %fieldLLL505, align 8
  %element_addressAB507 = load i32*, i32** %fieldLLL505, align 8
  %element_addressXYXZY508 = getelementptr inbounds i32, i32* %element_addressAB507, i32 -1
  %load_element509 = load i32, i32* %element_addressXYXZY508, align 4
  %loadU = load i32, i32* %element_addressXYXZY508, align 4
  %xortmp510 = xor i32 %loadU, 3
  store i32 %xortmp510, i32* %element_addressXYXZY508, align 4
  store i32 %xortmp510, i32* %c, align 4
  br label %preprocess.test_skip
  br label %cond_then_block511

cond_then_block511:                               ; preds = %cond_else_blockX484, %cond_end503
  %s1514 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL515 = getelementptr inbounds %TCCState, %TCCState* %s1514, i32 0, i32 2
  %ifdef_stack_ptr516 = load i32*, i32** %fieldLLL515, align 8
  %s1517 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU518 = getelementptr inbounds %TCCState, %TCCState* %s1517, i32 0, i32 52
  %autocast519 = bitcast [64 x i32]* %fieldRRRROOU518 to i32*
  %eq520 = icmp eq i32* %ifdef_stack_ptr516, %autocast519
  br i1 %eq520, label %cond_jump_then521, label %cond_end522

cond_else_blockX512:                              ; preds = %after_break548, %cond_else_blockX484
  %eqtmp551 = icmp eq i32 %tok, 319
  br i1 %eqtmp551, label %cond_then_block549, label %cond_else_blockX550

cond_jump_then521:                                ; preds = %cond_then_block511
  call void (i8*, ...) @error(i8* bitcast ([27 x i8]* @57 to i8*))
  br label %cond_end522

cond_end522:                                      ; preds = %cond_jump_then521, %cond_then_block511
  %s1523 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL524 = getelementptr inbounds %TCCState, %TCCState* %s1523, i32 0, i32 2
  %ifdef_stack_ptr525 = load i32*, i32** %fieldLLL524, align 8
  %element_addressAB526 = load i32*, i32** %fieldLLL524, align 8
  %element_addressXYXZY527 = getelementptr inbounds i32, i32* %element_addressAB526, i32 -1
  %load_element528 = load i32, i32* %element_addressXYXZY527, align 4
  store i32 %load_element528, i32* %c, align 4
  %c529 = load i32, i32* %c, align 4
  %gt = icmp sgt i32 %c529, 1
  br i1 %gt, label %cond_jump_then530, label %cond_end531

cond_jump_then530:                                ; preds = %cond_end522
  call void (i8*, ...) @error(i8* bitcast ([18 x i8]* @58 to i8*))
  br label %cond_end531

cond_end531:                                      ; preds = %cond_jump_then530, %cond_end522
  %c532 = load i32, i32* %c, align 4
  %eq533 = icmp eq i32 %c532, 1
  br i1 %eq533, label %cond_jump_then534, label %cond_end535

cond_jump_then534:                                ; preds = %cond_end531
  br label %preprocess.skip
  br label %cond_end535

cond_end535:                                      ; preds = %cond_jump_then534, %cond_end531
  %fun_result536 = call i32 @expr_preprocess()
  store i32 %fun_result536, i32* %c, align 4
  %s1537 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL538 = getelementptr inbounds %TCCState, %TCCState* %s1537, i32 0, i32 2
  %ifdef_stack_ptr539 = load i32*, i32** %fieldLLL538, align 8
  %c540 = load i32, i32* %c, align 4
  %element_addressXYXY = getelementptr i32, i32* %ifdef_stack_ptr539, i32 -1
  store i32 %c540, i32* %element_addressXYXY, align 4
  br label %preprocess.test_skip

preprocess.skip:                                  ; preds = %cond_jump_then546, %cond_jump_then534
  call void @preprocess_skip()
  store i32 0, i32* %is_bof, align 4
  br label %preprocess.redo
  br label %cond_end547

cond_jump_then546:                                ; preds = %preprocess.test_skip
  br label %preprocess.skip

cond_end547:                                      ; preds = %preprocess.skip, %preprocess.test_skip
  br label %end_blockX

after_break548:                                   ; No predecessors!
  br label %cond_else_blockX512
  br label %cond_else_blockX550

cond_then_block549:                               ; preds = %cond_else_blockX512
  %s1552 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL553 = getelementptr inbounds %TCCState, %TCCState* %s1552, i32 0, i32 2
  %ifdef_stack_ptr554 = load i32*, i32** %fieldLLL553, align 8
  %file555 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL556 = getelementptr inbounds %BufferedFile, %BufferedFile* %file555, i32 0, i32 6
  %ifdef_stack_ptr557 = load i32*, i32** %fieldLLL556, align 8
  %leeq = icmp sle i32* %ifdef_stack_ptr554, %ifdef_stack_ptr557
  br i1 %leeq, label %cond_jump_then558, label %cond_end559

cond_else_blockX550:                              ; preds = %after_break606, %cond_else_blockX512, %after_break548
  %eqtmp609 = icmp eq i32 %tok, 324
  br i1 %eqtmp609, label %cond_then_block607, label %cond_else_blockX608

cond_jump_then558:                                ; preds = %cond_then_block549
  call void (i8*, ...) @error(i8* bitcast ([28 x i8]* @59 to i8*))
  br label %cond_end559

cond_end559:                                      ; preds = %cond_jump_then558, %cond_then_block549
  %s1560 = load %TCCState*, %TCCState** %s1, align 8
  %s1561 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL562 = getelementptr inbounds %TCCState, %TCCState* %s1561, i32 0, i32 2
  %ifdef_stack_ptr563 = load i32*, i32** %fieldLLL562, align 8
  %ptrToIntI564 = ptrtoint i32* %ifdef_stack_ptr563 to i64
  %sub565 = sub i64 %ptrToIntI564, 4
  %iintToPtrD566 = inttoptr i64 %sub565 to i32*
  %fieldTU567 = getelementptr inbounds %TCCState, %TCCState* %s1560, i32 0, i32 2
  store i32* %iintToPtrD566, i32** %fieldTU567, align 8
  %s1568 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL569 = getelementptr inbounds %TCCState, %TCCState* %s1568, i32 0, i32 2
  %ifdef_stack_ptr570 = load i32*, i32** %fieldLLL569, align 8
  %ptrToIntC571 = ptrtoint i32* %ifdef_stack_ptr570 to i64
  %add572 = add i64 %ptrToIntC571, 4
  %intToPtrB573 = inttoptr i64 %add572 to i32*
  %file575 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL576 = getelementptr inbounds %BufferedFile, %BufferedFile* %file575, i32 0, i32 4
  %ifndef_macro577 = load i32, i32* %fieldLLL576, align 4
  %icmpA578 = icmp ne i32 %ifndef_macro577, 0
  store i1 %icmpA578, i1* %andand574, align 1
  br i1 %icmpA578, label %cond_jump_then579, label %cond_jump_end580

cond_jump_then579:                                ; preds = %cond_end559
  %s1581 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL582 = getelementptr inbounds %TCCState, %TCCState* %s1581, i32 0, i32 2
  %ifdef_stack_ptr583 = load i32*, i32** %fieldLLL582, align 8
  %file584 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL585 = getelementptr inbounds %BufferedFile, %BufferedFile* %file584, i32 0, i32 6
  %ifdef_stack_ptr586 = load i32*, i32** %fieldLLL585, align 8
  %eq587 = icmp eq i32* %ifdef_stack_ptr583, %ifdef_stack_ptr586
  %andand588 = and i1 %icmpA578, %eq587
  store i1 %andand588, i1* %andand574, align 1
  br label %cond_jump_end580

cond_jump_end580:                                 ; preds = %cond_jump_then579, %cond_end559
  %andand_result_value589 = load i1, i1* %andand574, align 1
  br i1 %andand_result_value589, label %cond_jump_then590, label %cond_end591

cond_jump_then590:                                ; preds = %cond_jump_end580
  %file592 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file593 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL594 = getelementptr inbounds %BufferedFile, %BufferedFile* %file593, i32 0, i32 4
  %ifndef_macro595 = load i32, i32* %fieldLLL594, align 4
  %fieldTU596 = getelementptr inbounds %BufferedFile, %BufferedFile* %file592, i32 0, i32 5
  store i32 %ifndef_macro595, i32* %fieldTU596, align 4
  %file597 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldTU598 = getelementptr inbounds %BufferedFile, %BufferedFile* %file597, i32 0, i32 4
  store i32 0, i32* %fieldTU598, align 4
  br label %loop_top_block599

cond_end591:                                      ; preds = %cond_end_block603, %cond_jump_end580
  br label %end_blockX

loop_top_block599:                                ; preds = %cond_then_block602, %cond_jump_then590
  %tok600 = load i32, i32* @tok, align 4
  %not_eq601 = icmp ne i32 %tok600, 10
  br i1 %not_eq601, label %cond_then_block602, label %cond_end_block603

cond_then_block602:                               ; preds = %loop_top_block599
  call void @next_nomacro()
  br label %loop_top_block599

cond_end_block603:                                ; preds = %loop_top_block599
  %tok_flags604 = load i32, i32* @tok_flags, align 4
  %ortmp605 = or i32 %tok_flags604, 4
  store i32 %ortmp605, i32* @tok_flags, align 4
  br label %preprocess.the_end
  br label %cond_end591

after_break606:                                   ; No predecessors!
  br label %cond_else_blockX550
  br label %cond_else_blockX608

cond_then_block607:                               ; preds = %cond_else_blockX550
  call void @next()
  %tok610 = load i32, i32* @tok, align 4
  %not_eq611 = icmp ne i32 %tok610, 179
  br i1 %not_eq611, label %cond_jump_then612, label %cond_end613

cond_else_blockX608:                              ; preds = %after_break637, %cond_else_blockX550, %after_break606
  %eqtmp640 = icmp eq i32 %tok, 322
  br i1 %eqtmp640, label %cond_then_block638, label %cond_else_blockX639
  br label %cond_else_blockX641

cond_jump_then612:                                ; preds = %cond_then_block607
  call void (i8*, ...) @error(i8* bitcast ([6 x i8]* @60 to i8*))
  br label %cond_end613

cond_end613:                                      ; preds = %cond_jump_then612, %cond_then_block607
  %file614 = load %BufferedFile*, %BufferedFile** @file, align 8
  %tokc615 = load %CValue, %CValue* @tokc, align 16
  %i616 = load i32, i32* bitcast (%CValue* @tokc to i32*), align 4
  %sub617 = sub i32 %i616, 1
  %fieldTU618 = getelementptr inbounds %BufferedFile, %BufferedFile* %file614, i32 0, i32 3
  store i32 %sub617, i32* %fieldTU618, align 4
  call void @next()
  %tok619 = load i32, i32* @tok, align 4
  %not_eq620 = icmp ne i32 %tok619, 10
  br i1 %not_eq620, label %cond_jump_then621, label %cond_end622

cond_jump_then621:                                ; preds = %cond_end613
  %tok623 = load i32, i32* @tok, align 4
  %not_eq624 = icmp ne i32 %tok623, 181
  br i1 %not_eq624, label %cond_jump_then625, label %cond_end626

cond_end622:                                      ; preds = %cond_end626, %cond_end613
  br label %end_blockX

cond_jump_then625:                                ; preds = %cond_jump_then621
  call void (i8*, ...) @error(i8* bitcast ([6 x i8]* @61 to i8*))
  br label %cond_end626

cond_end626:                                      ; preds = %cond_jump_then625, %cond_jump_then621
  %file627 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU628 = getelementptr inbounds %BufferedFile, %BufferedFile* %file627, i32 0, i32 9
  %autocast629 = bitcast [1024 x i8]* %fieldRRRROOU628 to i8*
  %file630 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU631 = getelementptr inbounds %BufferedFile, %BufferedFile* %file630, i32 0, i32 9
  %tokc632 = load %CValue, %CValue* @tokc, align 16
  %cstr633 = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %fieldLLL634 = getelementptr inbounds %CString, %CString* %cstr633, i32 0, i32 1
  %data635 = load i8*, i8** %fieldLLL634, align 8
  %fun_result636 = call i8* @pstrcpy(i8* %autocast629, i32 1024, i8* %data635)
  br label %cond_end622

after_break637:                                   ; No predecessors!
  br label %cond_else_blockX608
  br label %cond_else_blockX639

cond_then_block638:                               ; preds = %cond_else_blockX639, %cond_else_blockX608
  %tok643 = load i32, i32* @tok, align 4
  store i32 %tok643, i32* %c, align 4
  %file644 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL645 = getelementptr inbounds %BufferedFile, %BufferedFile* %file644, i32 0, i32 0
  %buf_ptr646 = load i8*, i8** %fieldLLL645, align 8
  %element_addressAB647 = load i8*, i8** %fieldLLL645, align 8
  %element_addressXYXZY648 = getelementptr inbounds i8, i8* %element_addressAB647, i32 0
  %load_element649 = load i8, i8* %element_addressXYXZY648, align 1
  %icastKY650 = zext i8 %load_element649 to i32
  store i32 %icastKY650, i32* @ch, align 4
  store i32 1445, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.47, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %skip_spaces651

cond_else_blockX639:                              ; preds = %cond_else_blockX608, %after_break637
  %eqtmp642 = icmp eq i32 %tok, 323
  br i1 %eqtmp642, label %cond_then_block638, label %cond_else_blockX641

cond_else_blockX641:                              ; preds = %after_break764, %cond_else_blockX639, %cond_else_blockX608
  %eqtmp767 = icmp eq i32 %tok, 325
  br i1 %eqtmp767, label %cond_then_block765, label %cond_else_blockX766

skip_spaces651:                                   ; preds = %cond_then_block638
  br label %loop_top_block653

skip_spaces_end652:                               ; preds = %cond_end_block693
  %autocast694 = bitcast [1024 x i8]* %buf to i8*
  store i8* %autocast694, i8** %q, align 8
  br label %loop_top_block695

loop_top_block653:                                ; preds = %cond_then_block692, %skip_spaces651
  %ch654 = load i32, i32* @ch, align 4
  store i32 1445, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.48, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space655

is_space655:                                      ; preds = %loop_top_block653
  %inline_result_variable656 = alloca i32, align 4
  %ch657 = alloca i32, align 4
  store i32 %ch654, i32* %ch657, align 4
  %ch663 = load i32, i32* %ch657, align 4
  %eq664 = icmp eq i32 %ch663, 32
  store i1 %eq664, i1* %oror662, align 1
  br i1 %eq664, label %cond_jump_end666, label %cond_jump_then665

is_space_end658:                                  ; preds = %cond_jump_end684
  %inline_result_variable690 = load i32, i32* %inline_result_variable656, align 4
  %icmpA691 = icmp ne i32 %inline_result_variable690, 0
  br i1 %icmpA691, label %cond_then_block692, label %cond_end_block693

cond_jump_then665:                                ; preds = %is_space655
  %ch667 = load i32, i32* %ch657, align 4
  %eq668 = icmp eq i32 %ch667, 9
  %oror669 = or i1 %eq664, %eq668
  store i1 %oror669, i1* %oror662, align 1
  br label %cond_jump_end666

cond_jump_end666:                                 ; preds = %cond_jump_then665, %is_space655
  %oror_result_value670 = load i1, i1* %oror662, align 1
  store i1 %oror_result_value670, i1* %oror661, align 1
  br i1 %oror_result_value670, label %cond_jump_end672, label %cond_jump_then671

cond_jump_then671:                                ; preds = %cond_jump_end666
  %ch673 = load i32, i32* %ch657, align 4
  %eq674 = icmp eq i32 %ch673, 11
  %oror675 = or i1 %oror_result_value670, %eq674
  store i1 %oror675, i1* %oror661, align 1
  br label %cond_jump_end672

cond_jump_end672:                                 ; preds = %cond_jump_then671, %cond_jump_end666
  %oror_result_value676 = load i1, i1* %oror661, align 1
  store i1 %oror_result_value676, i1* %oror660, align 1
  br i1 %oror_result_value676, label %cond_jump_end678, label %cond_jump_then677

cond_jump_then677:                                ; preds = %cond_jump_end672
  %ch679 = load i32, i32* %ch657, align 4
  %eq680 = icmp eq i32 %ch679, 12
  %oror681 = or i1 %oror_result_value676, %eq680
  store i1 %oror681, i1* %oror660, align 1
  br label %cond_jump_end678

cond_jump_end678:                                 ; preds = %cond_jump_then677, %cond_jump_end672
  %oror_result_value682 = load i1, i1* %oror660, align 1
  store i1 %oror_result_value682, i1* %oror659, align 1
  br i1 %oror_result_value682, label %cond_jump_end684, label %cond_jump_then683

cond_jump_then683:                                ; preds = %cond_jump_end678
  %ch685 = load i32, i32* %ch657, align 4
  %eq686 = icmp eq i32 %ch685, 13
  %oror687 = or i1 %oror_result_value682, %eq686
  store i1 %oror687, i1* %oror659, align 1
  br label %cond_jump_end684

cond_jump_end684:                                 ; preds = %cond_jump_then683, %cond_jump_end678
  %oror_result_value688 = load i1, i1* %oror659, align 1
  %icastKX689 = zext i1 %oror_result_value688 to i32
  store i32 %icastKX689, i32* %inline_result_variable656, align 4
  br label %is_space_end658

cond_then_block692:                               ; preds = %is_space_end658
  call void @minp()
  br label %loop_top_block653

cond_end_block693:                                ; preds = %is_space_end658
  br label %skip_spaces_end652

loop_top_block695:                                ; preds = %cond_end730, %skip_spaces_end652
  %ch697 = load i32, i32* @ch, align 4
  %not_eq698 = icmp ne i32 %ch697, 10
  store i1 %not_eq698, i1* %andand696, align 1
  br i1 %not_eq698, label %cond_jump_then699, label %cond_jump_end700

cond_jump_then699:                                ; preds = %loop_top_block695
  %ch701 = load i32, i32* @ch, align 4
  %not_eq702 = icmp ne i32 %ch701, -1
  %andand703 = and i1 %not_eq698, %not_eq702
  store i1 %andand703, i1* %andand696, align 1
  br label %cond_jump_end700

cond_jump_end700:                                 ; preds = %cond_jump_then699, %loop_top_block695
  %andand_result_value704 = load i1, i1* %andand696, align 1
  br i1 %andand_result_value704, label %cond_then_block705, label %cond_end_block706

cond_then_block705:                               ; preds = %cond_jump_end700
  %q707 = load i8*, i8** %q, align 8
  %autocast708 = bitcast [1024 x i8]* %buf to i8*
  %ptrToIntG709 = ptrtoint i8* %q707 to i64
  %ptrToIntH710 = ptrtoint i8* %autocast708 to i64
  %sub711 = sub i64 %ptrToIntG709, %ptrToIntH710
  %div712 = sdiv i64 %sub711, 1
  %le713 = icmp slt i64 %div712, 1023
  br i1 %le713, label %cond_jump_then714, label %cond_end715

cond_end_block706:                                ; preds = %cond_jump_end700
  %q756 = load i8*, i8** %q, align 8
  store i8 0, i8* %q756, align 1
  %c757 = load i32, i32* %c, align 4
  %eq758 = icmp eq i32 %c757, 322
  br i1 %eq758, label %cond_jump_then759, label %cond_else_block760

cond_jump_then714:                                ; preds = %cond_then_block705
  %q716 = load i8*, i8** %q, align 8
  %ptrToIntC717 = ptrtoint i8* %q716 to i64
  %add718 = add i64 %ptrToIntC717, 1
  %intToPtrB719 = inttoptr i64 %add718 to i8*
  store i8* %intToPtrB719, i8** %q, align 8
  %q720 = load i8*, i8** %q, align 8
  %ptrToIntI721 = ptrtoint i8* %q720 to i64
  %sub722 = sub i64 %ptrToIntI721, 1
  %iintToPtrD723 = inttoptr i64 %sub722 to i8*
  %ch724 = load i32, i32* @ch, align 4
  %icastJ725 = trunc i32 %ch724 to i8
  store i8 %icastJ725, i8* %iintToPtrD723, align 1
  br label %cond_end715

cond_end715:                                      ; preds = %cond_jump_then714, %cond_then_block705
  %ch726 = load i32, i32* @ch, align 4
  %eq727 = icmp eq i32 %ch726, 92
  br i1 %eq727, label %cond_jump_then728, label %cond_else_block729

cond_jump_then728:                                ; preds = %cond_end715
  %fun_result731 = call i32 @handle_stray_noerror()
  %eq732 = icmp eq i32 %fun_result731, 0
  br i1 %eq732, label %cond_jump_then733, label %cond_end734

cond_else_block729:                               ; preds = %cond_end715
  store i32 1454, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.49, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp739

cond_end730:                                      ; preds = %inp_end740, %cond_end734
  br label %loop_top_block695

cond_jump_then733:                                ; preds = %cond_jump_then728
  %q735 = load i8*, i8** %q, align 8
  %ptrToIntI736 = ptrtoint i8* %q735 to i64
  %sub737 = sub i64 %ptrToIntI736, 1
  %iintToPtrD738 = inttoptr i64 %sub737 to i8*
  store i8* %iintToPtrD738, i8** %q, align 8
  br label %cond_end734

cond_end734:                                      ; preds = %cond_jump_then733, %cond_jump_then728
  br label %cond_end730

inp739:                                           ; preds = %cond_else_block729
  %file741 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file742 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL743 = getelementptr inbounds %BufferedFile, %BufferedFile* %file742, i32 0, i32 0
  %buf_ptr744 = load i8*, i8** %fieldLLL743, align 8
  %ptrToIntC745 = ptrtoint i8* %buf_ptr744 to i64
  %add746 = add i64 %ptrToIntC745, 1
  %intToPtrB747 = inttoptr i64 %add746 to i8*
  %fieldTU748 = getelementptr inbounds %BufferedFile, %BufferedFile* %file741, i32 0, i32 0
  store i8* %intToPtrB747, i8** %fieldTU748, align 8
  %derefference_valueB749 = load i8, i8* %intToPtrB747, align 1
  %icastKY750 = zext i8 %derefference_valueB749 to i32
  store i32 %icastKY750, i32* @ch, align 4
  %ch751 = load i32, i32* @ch, align 4
  %eq752 = icmp eq i32 %ch751, 92
  br i1 %eq752, label %cond_jump_then753, label %cond_end754

inp_end740:                                       ; preds = %cond_end754
  br label %cond_end730

cond_jump_then753:                                ; preds = %inp739
  %fun_result755 = call i32 @handle_eob()
  store i32 %fun_result755, i32* @ch, align 4
  br label %cond_end754

cond_end754:                                      ; preds = %cond_jump_then753, %inp739
  br label %inp_end740

cond_jump_then759:                                ; preds = %cond_end_block706
  %autocast762 = bitcast [1024 x i8]* %buf to i8*
  call void (i8*, ...) @error(i8* bitcast ([10 x i8]* @62 to i8*), i8* %autocast762)
  br label %cond_end761

cond_else_block760:                               ; preds = %cond_end_block706
  %autocast763 = bitcast [1024 x i8]* %buf to i8*
  call void (i8*, ...) @warning(i8* bitcast ([12 x i8]* @63 to i8*), i8* %autocast763)
  br label %cond_end761

cond_end761:                                      ; preds = %cond_else_block760, %cond_jump_then759
  br label %end_blockX

after_break764:                                   ; No predecessors!
  br label %cond_else_blockX641
  br label %cond_else_blockX766

cond_then_block765:                               ; preds = %cond_else_blockX641
  %s1768 = load %TCCState*, %TCCState** %s1, align 8
  call void @pragma_parse(%TCCState* %s1768)
  br label %end_blockX

cond_else_blockX766:                              ; preds = %after_break769, %cond_else_blockX641, %after_break764
  br label %cond_then_block770

after_break769:                                   ; No predecessors!
  br label %cond_else_blockX766
  br label %cond_else_blockX771

cond_then_block770:                               ; preds = %cond_else_blockX766
  %tok774 = load i32, i32* @tok, align 4
  %eq775 = icmp eq i32 %tok774, 10
  store i1 %eq775, i1* %oror773, align 1
  br i1 %eq775, label %cond_jump_end777, label %cond_jump_then776

cond_else_blockX771:                              ; preds = %after_break801, %after_break769
  br label %end_blockX

cond_jump_then776:                                ; preds = %cond_then_block770
  %tok778 = load i32, i32* @tok, align 4
  %eq779 = icmp eq i32 %tok778, 33
  %oror780 = or i1 %eq775, %eq779
  store i1 %oror780, i1* %oror773, align 1
  br label %cond_jump_end777

cond_jump_end777:                                 ; preds = %cond_jump_then776, %cond_then_block770
  %oror_result_value781 = load i1, i1* %oror773, align 1
  store i1 %oror_result_value781, i1* %oror772, align 1
  br i1 %oror_result_value781, label %cond_jump_end783, label %cond_jump_then782

cond_jump_then782:                                ; preds = %cond_jump_end777
  %tok784 = load i32, i32* @tok, align 4
  %eq785 = icmp eq i32 %tok784, 179
  %oror786 = or i1 %oror_result_value781, %eq785
  store i1 %oror786, i1* %oror772, align 1
  br label %cond_jump_end783

cond_jump_end783:                                 ; preds = %cond_jump_then782, %cond_jump_end777
  %oror_result_value787 = load i1, i1* %oror772, align 1
  br i1 %oror_result_value787, label %cond_jump_then788, label %cond_else_block789

cond_jump_then788:                                ; preds = %cond_jump_end783
  br label %cond_end790

cond_else_block789:                               ; preds = %cond_jump_end783
  %saved_parse_flags791 = load i32, i32* %saved_parse_flags, align 4
  %andtmp792 = and i32 %saved_parse_flags791, 8
  %logical_denial793 = icmp eq i32 %andtmp792, 0
  %castOOOO794 = zext i1 %logical_denial793 to i32
  %icmpA795 = icmp ne i32 %castOOOO794, 0
  br i1 %icmpA795, label %cond_jump_then796, label %cond_end797

cond_end790:                                      ; preds = %cond_end797, %cond_jump_then788
  br label %end_blockX

cond_jump_then796:                                ; preds = %cond_else_block789
  %tok798 = load i32, i32* @tok, align 4
  %tokc799 = load %CValue, %CValue* @tokc, align 16
  %fun_result800 = call i8* @get_tok_str(i32 %tok798, %CValue* @tokc)
  call void (i8*, ...) @warning(i8* bitcast ([45 x i8]* @64 to i8*), i8* %fun_result800)
  br label %cond_end797

cond_end797:                                      ; preds = %cond_jump_then796, %cond_else_block789
  br label %cond_end790

after_break801:                                   ; No predecessors!
  br label %cond_else_blockX771

loop_top_block802:                                ; preds = %cond_then_block805, %end_blockX
  %tok803 = load i32, i32* @tok, align 4
  %not_eq804 = icmp ne i32 %tok803, 10
  br i1 %not_eq804, label %cond_then_block805, label %cond_end_block806

cond_then_block805:                               ; preds = %loop_top_block802
  call void @next_nomacro()
  br label %loop_top_block802

cond_end_block806:                                ; preds = %loop_top_block802
  br label %preprocess.the_end
}

define internal void @parse_escape_string(%CString* %0, i8* %1, i32 %2) {
entry:
  %size291 = alloca i32, align 4
  %size = alloca i32, align 4
  %andand228 = alloca i1, align 1
  %andand153 = alloca i1, align 1
  %andand138 = alloca i1, align 1
  %andand124 = alloca i1, align 1
  %andand74 = alloca i1, align 1
  %andand = alloca i1, align 1
  %p = alloca i8*, align 8
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %outstr = alloca %CString*, align 8
  %outstr1 = alloca %CString**, align 8
  store %CString* %0, %CString** %outstr, align 8
  store %CString** %outstr, %CString*** %outstr1, align 8
  %buf = alloca i8*, align 8
  %buf2 = alloca i8**, align 8
  store i8* %1, i8** %buf, align 8
  store i8** %buf, i8*** %buf2, align 8
  %is_long = alloca i32, align 4
  %is_long3 = alloca i32*, align 8
  store i32 %2, i32* %is_long, align 4
  store i32* %is_long, i32** %is_long3, align 8
  %buf4 = load i8*, i8** %buf, align 8
  store i8* %buf4, i8** %p, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end257
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p5 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p5, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* %c, align 4
  %c6 = load i32, i32* %c, align 4
  %eq = icmp eq i32 %c6, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  %is_long279 = load i32, i32* %is_long, align 4
  %logical_denial280 = icmp eq i32 %is_long279, 0
  %castOOOO281 = zext i1 %logical_denial280 to i32
  %icmpA282 = icmp ne i32 %castOOOO281, 0
  br i1 %icmpA282, label %cond_jump_then283, label %cond_else_block284

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_end:                                         ; preds = %after_break, %cond_then_block
  %c7 = load i32, i32* %c, align 4
  %eq8 = icmp eq i32 %c7, 92
  br i1 %eq8, label %cond_jump_then9, label %cond_end10

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then9:                                  ; preds = %cond_end
  %p11 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p11 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p12 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p12 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  %p13 = load i8*, i8** %p, align 8
  %derefference_valueB14 = load i8, i8* %p13, align 1
  %icastKY15 = zext i8 %derefference_valueB14 to i32
  store i32 %icastKY15, i32* %c, align 4
  %c16 = load i32, i32* %c, align 4
  %eqtmp = icmp eq i32 %c16, 48
  br i1 %eqtmp, label %cond_then_block17, label %cond_else_blockX
  br label %cond_else_blockX18

cond_end10:                                       ; preds = %end_blockX, %cond_end
  %p243 = load i8*, i8** %p, align 8
  %ptrToIntC244 = ptrtoint i8* %p243 to i64
  %add245 = add i64 %ptrToIntC244, 1
  %intToPtrB246 = inttoptr i64 %add245 to i8*
  store i8* %intToPtrB246, i8** %p, align 8
  %p247 = load i8*, i8** %p, align 8
  %ptrToIntI248 = ptrtoint i8* %p247 to i64
  %sub249 = sub i64 %ptrToIntI248, 1
  %iintToPtrD250 = inttoptr i64 %sub249 to i8*
  br label %parse_escape_string.add_char_nonext

end_blockX:                                       ; preds = %cond_else_blockX227, %cond_end239, %cond_then_block216, %cond_end214, %cond_then_block205, %cond_then_block201, %cond_then_block197, %cond_then_block193, %cond_then_block189, %cond_then_block185, %cond_then_block181
  br label %cond_end10

cond_then_block17:                                ; preds = %cond_else_blockX28, %cond_else_blockX26, %cond_else_blockX24, %cond_else_blockX22, %cond_else_blockX20, %cond_else_blockX18, %cond_else_blockX, %cond_jump_then9
  %c32 = load i32, i32* %c, align 4
  %sub33 = sub i32 %c32, 48
  store i32 %sub33, i32* %n, align 4
  %p34 = load i8*, i8** %p, align 8
  %ptrToIntC35 = ptrtoint i8* %p34 to i64
  %add36 = add i64 %ptrToIntC35, 1
  %intToPtrB37 = inttoptr i64 %add36 to i8*
  store i8* %intToPtrB37, i8** %p, align 8
  %p38 = load i8*, i8** %p, align 8
  %ptrToIntI39 = ptrtoint i8* %p38 to i64
  %sub40 = sub i64 %ptrToIntI39, 1
  %iintToPtrD41 = inttoptr i64 %sub40 to i8*
  %p42 = load i8*, i8** %p, align 8
  %derefference_valueB43 = load i8, i8* %p42, align 1
  %icastKY44 = zext i8 %derefference_valueB43 to i32
  store i32 %icastKY44, i32* %c, align 4
  %c45 = load i32, i32* %c, align 4
  store i32 1504, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.50, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isoct

cond_else_blockX:                                 ; preds = %cond_jump_then9
  %eqtmp19 = icmp eq i32 %c16, 49
  br i1 %eqtmp19, label %cond_then_block17, label %cond_else_blockX18
  br label %cond_else_blockX20

cond_else_blockX18:                               ; preds = %cond_else_blockX, %cond_jump_then9
  %eqtmp21 = icmp eq i32 %c16, 50
  br i1 %eqtmp21, label %cond_then_block17, label %cond_else_blockX20
  br label %cond_else_blockX22

cond_else_blockX20:                               ; preds = %cond_else_blockX18, %cond_else_blockX
  %eqtmp23 = icmp eq i32 %c16, 51
  br i1 %eqtmp23, label %cond_then_block17, label %cond_else_blockX22
  br label %cond_else_blockX24

cond_else_blockX22:                               ; preds = %cond_else_blockX20, %cond_else_blockX18
  %eqtmp25 = icmp eq i32 %c16, 52
  br i1 %eqtmp25, label %cond_then_block17, label %cond_else_blockX24
  br label %cond_else_blockX26

cond_else_blockX24:                               ; preds = %cond_else_blockX22, %cond_else_blockX20
  %eqtmp27 = icmp eq i32 %c16, 53
  br i1 %eqtmp27, label %cond_then_block17, label %cond_else_blockX26
  br label %cond_else_blockX28

cond_else_blockX26:                               ; preds = %cond_else_blockX24, %cond_else_blockX22
  %eqtmp29 = icmp eq i32 %c16, 54
  br i1 %eqtmp29, label %cond_then_block17, label %cond_else_blockX28
  br label %cond_else_blockX30

cond_else_blockX28:                               ; preds = %cond_else_blockX26, %cond_else_blockX24
  %eqtmp31 = icmp eq i32 %c16, 55
  br i1 %eqtmp31, label %cond_then_block17, label %cond_else_blockX30

cond_else_blockX30:                               ; preds = %cond_else_blockX28, %cond_else_blockX26
  %eqtmp104 = icmp eq i32 %c16, 120
  br i1 %eqtmp104, label %cond_then_block102, label %cond_else_blockX103
  br label %cond_then_block102

isoct:                                            ; preds = %cond_then_block17
  %inline_result_variable = alloca i32, align 4
  %c46 = alloca i32, align 4
  store i32 %c45, i32* %c46, align 4
  %c47 = load i32, i32* %c46, align 4
  %gteq_signed = icmp sge i32 %c47, 48
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then48, label %cond_jump_end

isoct_end:                                        ; preds = %cond_jump_end
  %inline_result_variable51 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable51, 0
  br i1 %icmpA, label %cond_jump_then52, label %cond_end53

cond_jump_then48:                                 ; preds = %isoct
  %c49 = load i32, i32* %c46, align 4
  %leeq = icmp sle i32 %c49, 55
  %andand50 = and i1 %gteq_signed, %leeq
  store i1 %andand50, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then48, %isoct
  %andand_result_value = load i1, i1* %andand, align 1
  %icastKX = zext i1 %andand_result_value to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %isoct_end

cond_jump_then52:                                 ; preds = %isoct_end
  %n54 = load i32, i32* %n, align 4
  %mul = mul i32 %n54, 8
  %c55 = load i32, i32* %c, align 4
  %add56 = add i32 %mul, %c55
  %sub57 = sub i32 %add56, 48
  store i32 %sub57, i32* %n, align 4
  %p58 = load i8*, i8** %p, align 8
  %ptrToIntC59 = ptrtoint i8* %p58 to i64
  %add60 = add i64 %ptrToIntC59, 1
  %intToPtrB61 = inttoptr i64 %add60 to i8*
  store i8* %intToPtrB61, i8** %p, align 8
  %p62 = load i8*, i8** %p, align 8
  %ptrToIntI63 = ptrtoint i8* %p62 to i64
  %sub64 = sub i64 %ptrToIntI63, 1
  %iintToPtrD65 = inttoptr i64 %sub64 to i8*
  %p66 = load i8*, i8** %p, align 8
  %derefference_valueB67 = load i8, i8* %p66, align 1
  %icastKY68 = zext i8 %derefference_valueB67 to i32
  store i32 %icastKY68, i32* %c, align 4
  %c69 = load i32, i32* %c, align 4
  store i32 1508, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.51, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isoct70

cond_end53:                                       ; preds = %cond_end87, %isoct_end
  %n101 = load i32, i32* %n, align 4
  store i32 %n101, i32* %c, align 4
  br label %parse_escape_string.add_char_nonext
  br label %cond_then_block102

isoct70:                                          ; preds = %cond_jump_then52
  %inline_result_variable71 = alloca i32, align 4
  %c72 = alloca i32, align 4
  store i32 %c69, i32* %c72, align 4
  %c75 = load i32, i32* %c72, align 4
  %gteq_signed76 = icmp sge i32 %c75, 48
  store i1 %gteq_signed76, i1* %andand74, align 1
  br i1 %gteq_signed76, label %cond_jump_then77, label %cond_jump_end78

isoct_end73:                                      ; preds = %cond_jump_end78
  %inline_result_variable84 = load i32, i32* %inline_result_variable71, align 4
  %icmpA85 = icmp ne i32 %inline_result_variable84, 0
  br i1 %icmpA85, label %cond_jump_then86, label %cond_end87

cond_jump_then77:                                 ; preds = %isoct70
  %c79 = load i32, i32* %c72, align 4
  %leeq80 = icmp sle i32 %c79, 55
  %andand81 = and i1 %gteq_signed76, %leeq80
  store i1 %andand81, i1* %andand74, align 1
  br label %cond_jump_end78

cond_jump_end78:                                  ; preds = %cond_jump_then77, %isoct70
  %andand_result_value82 = load i1, i1* %andand74, align 1
  %icastKX83 = zext i1 %andand_result_value82 to i32
  store i32 %icastKX83, i32* %inline_result_variable71, align 4
  br label %isoct_end73

cond_jump_then86:                                 ; preds = %isoct_end73
  %n88 = load i32, i32* %n, align 4
  %mul89 = mul i32 %n88, 8
  %c90 = load i32, i32* %c, align 4
  %add91 = add i32 %mul89, %c90
  %sub92 = sub i32 %add91, 48
  store i32 %sub92, i32* %n, align 4
  %p93 = load i8*, i8** %p, align 8
  %ptrToIntC94 = ptrtoint i8* %p93 to i64
  %add95 = add i64 %ptrToIntC94, 1
  %intToPtrB96 = inttoptr i64 %add95 to i8*
  store i8* %intToPtrB96, i8** %p, align 8
  %p97 = load i8*, i8** %p, align 8
  %ptrToIntI98 = ptrtoint i8* %p97 to i64
  %sub99 = sub i64 %ptrToIntI98, 1
  %iintToPtrD100 = inttoptr i64 %sub99 to i8*
  br label %cond_end87

cond_end87:                                       ; preds = %cond_jump_then86, %isoct_end73
  br label %cond_end53

parse_escape_string.add_char_nonext:              ; preds = %cond_end10, %cond_end_block120, %cond_end53
  %is_long251 = load i32, i32* %is_long, align 4
  %logical_denial252 = icmp eq i32 %is_long251, 0
  %castOOOO253 = zext i1 %logical_denial252 to i32
  %icmpA254 = icmp ne i32 %castOOOO253, 0
  br i1 %icmpA254, label %cond_jump_then255, label %cond_else_block256

cond_then_block102:                               ; preds = %cond_else_blockX105, %cond_else_blockX103, %cond_else_blockX103, %cond_else_blockX30, %cond_else_blockX30, %cond_end53
  %p109 = load i8*, i8** %p, align 8
  %ptrToIntC110 = ptrtoint i8* %p109 to i64
  %add111 = add i64 %ptrToIntC110, 1
  %intToPtrB112 = inttoptr i64 %add111 to i8*
  store i8* %intToPtrB112, i8** %p, align 8
  %p113 = load i8*, i8** %p, align 8
  %ptrToIntI114 = ptrtoint i8* %p113 to i64
  %sub115 = sub i64 %ptrToIntI114, 1
  %iintToPtrD116 = inttoptr i64 %sub115 to i8*
  store i32 0, i32* %n, align 4
  br label %loop_top_block118

cond_else_blockX103:                              ; preds = %cond_else_blockX30
  %eqtmp106 = icmp eq i32 %c16, 117
  br i1 %eqtmp106, label %cond_then_block102, label %cond_else_blockX105
  br label %cond_then_block102

cond_else_blockX105:                              ; preds = %cond_else_blockX103
  %eqtmp108 = icmp eq i32 %c16, 85
  br i1 %eqtmp108, label %cond_then_block102, label %cond_else_blockX107

cond_else_blockX107:                              ; preds = %cond_else_blockX105
  %eqtmp183 = icmp eq i32 %c16, 97
  br i1 %eqtmp183, label %cond_then_block181, label %cond_else_blockX182

loop_continue_top_block117:                       ; preds = %cond_end134
  br label %loop_top_block118

loop_top_block118:                                ; preds = %loop_continue_top_block117, %cond_then_block102
  br i1 true, label %cond_then_block119, label %cond_end_block120

cond_then_block119:                               ; preds = %loop_top_block118
  %p121 = load i8*, i8** %p, align 8
  %derefference_valueB122 = load i8, i8* %p121, align 1
  %icastKY123 = zext i8 %derefference_valueB122 to i32
  store i32 %icastKY123, i32* %c, align 4
  %c125 = load i32, i32* %c, align 4
  %gteq_signed126 = icmp sge i32 %c125, 97
  store i1 %gteq_signed126, i1* %andand124, align 1
  br i1 %gteq_signed126, label %cond_jump_then127, label %cond_jump_end128

cond_end_block120:                                ; preds = %cond_else_block, %loop_top_block118
  %n180 = load i32, i32* %n, align 4
  store i32 %n180, i32* %c, align 4
  br label %parse_escape_string.add_char_nonext
  br label %cond_then_block181

cond_jump_then127:                                ; preds = %cond_then_block119
  %c129 = load i32, i32* %c, align 4
  %leeq130 = icmp sle i32 %c129, 102
  %andand131 = and i1 %gteq_signed126, %leeq130
  store i1 %andand131, i1* %andand124, align 1
  br label %cond_jump_end128

cond_jump_end128:                                 ; preds = %cond_jump_then127, %cond_then_block119
  %andand_result_value132 = load i1, i1* %andand124, align 1
  br i1 %andand_result_value132, label %cond_jump_then133, label %cond_jump_elif0

cond_jump_then133:                                ; preds = %cond_jump_end128
  %c135 = load i32, i32* %c, align 4
  %sub136 = sub i32 %c135, 97
  %add137 = add i32 %sub136, 10
  store i32 %add137, i32* %c, align 4
  br label %cond_end134

cond_jump_elif0:                                  ; preds = %cond_jump_end128
  %c139 = load i32, i32* %c, align 4
  %gteq_signed140 = icmp sge i32 %c139, 65
  store i1 %gteq_signed140, i1* %andand138, align 1
  br i1 %gteq_signed140, label %cond_jump_then141, label %cond_jump_end142

cond_jump_elif_then0:                             ; preds = %cond_jump_end142
  %c147 = load i32, i32* %c, align 4
  %sub148 = sub i32 %c147, 65
  %add149 = add i32 %sub148, 10
  store i32 %add149, i32* %c, align 4
  br label %cond_end134

cond_jump_elif1:                                  ; preds = %cond_jump_end142
  %c150 = load i32, i32* %c, align 4
  store i32 1526, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.52, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum

cond_jump_elif_then1:                             ; preds = %isnum_end
  %c165 = load i32, i32* %c, align 4
  %sub166 = sub i32 %c165, 48
  store i32 %sub166, i32* %c, align 4
  br label %cond_end134

cond_else_block:                                  ; preds = %isnum_end
  br label %cond_end_block120

cond_end134:                                      ; preds = %after_break167, %cond_jump_elif_then1, %cond_jump_elif_then0, %cond_jump_then133
  %n168 = load i32, i32* %n, align 4
  %mul169 = mul i32 %n168, 16
  %c170 = load i32, i32* %c, align 4
  %add171 = add i32 %mul169, %c170
  store i32 %add171, i32* %n, align 4
  %p172 = load i8*, i8** %p, align 8
  %ptrToIntC173 = ptrtoint i8* %p172 to i64
  %add174 = add i64 %ptrToIntC173, 1
  %intToPtrB175 = inttoptr i64 %add174 to i8*
  store i8* %intToPtrB175, i8** %p, align 8
  %p176 = load i8*, i8** %p, align 8
  %ptrToIntI177 = ptrtoint i8* %p176 to i64
  %sub178 = sub i64 %ptrToIntI177, 1
  %iintToPtrD179 = inttoptr i64 %sub178 to i8*
  br label %loop_continue_top_block117

cond_jump_then141:                                ; preds = %cond_jump_elif0
  %c143 = load i32, i32* %c, align 4
  %leeq144 = icmp sle i32 %c143, 70
  %andand145 = and i1 %gteq_signed140, %leeq144
  store i1 %andand145, i1* %andand138, align 1
  br label %cond_jump_end142

cond_jump_end142:                                 ; preds = %cond_jump_then141, %cond_jump_elif0
  %andand_result_value146 = load i1, i1* %andand138, align 1
  br i1 %andand_result_value146, label %cond_jump_elif_then0, label %cond_jump_elif1

isnum:                                            ; preds = %cond_jump_elif1
  %inline_result_variable151 = alloca i32, align 4
  %c152 = alloca i32, align 4
  store i32 %c150, i32* %c152, align 4
  %c154 = load i32, i32* %c152, align 4
  %gteq_signed155 = icmp sge i32 %c154, 48
  store i1 %gteq_signed155, i1* %andand153, align 1
  br i1 %gteq_signed155, label %cond_jump_then156, label %cond_jump_end157

isnum_end:                                        ; preds = %cond_jump_end157
  %inline_result_variable163 = load i32, i32* %inline_result_variable151, align 4
  %icmpA164 = icmp ne i32 %inline_result_variable163, 0
  br i1 %icmpA164, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_then156:                                ; preds = %isnum
  %c158 = load i32, i32* %c152, align 4
  %leeq159 = icmp sle i32 %c158, 57
  %andand160 = and i1 %gteq_signed155, %leeq159
  store i1 %andand160, i1* %andand153, align 1
  br label %cond_jump_end157

cond_jump_end157:                                 ; preds = %cond_jump_then156, %isnum
  %andand_result_value161 = load i1, i1* %andand153, align 1
  %icastKX162 = zext i1 %andand_result_value161 to i32
  store i32 %icastKX162, i32* %inline_result_variable151, align 4
  br label %isnum_end

after_break167:                                   ; No predecessors!
  br label %cond_end134

cond_then_block181:                               ; preds = %cond_else_blockX107, %cond_end_block120
  store i32 7, i32* %c, align 4
  br label %end_blockX

cond_else_blockX182:                              ; preds = %after_break184, %cond_else_blockX107
  %eqtmp187 = icmp eq i32 %c16, 98
  br i1 %eqtmp187, label %cond_then_block185, label %cond_else_blockX186

after_break184:                                   ; No predecessors!
  br label %cond_else_blockX182
  br label %cond_else_blockX186

cond_then_block185:                               ; preds = %cond_else_blockX182
  store i32 8, i32* %c, align 4
  br label %end_blockX

cond_else_blockX186:                              ; preds = %after_break188, %cond_else_blockX182, %after_break184
  %eqtmp191 = icmp eq i32 %c16, 102
  br i1 %eqtmp191, label %cond_then_block189, label %cond_else_blockX190

after_break188:                                   ; No predecessors!
  br label %cond_else_blockX186
  br label %cond_else_blockX190

cond_then_block189:                               ; preds = %cond_else_blockX186
  store i32 12, i32* %c, align 4
  br label %end_blockX

cond_else_blockX190:                              ; preds = %after_break192, %cond_else_blockX186, %after_break188
  %eqtmp195 = icmp eq i32 %c16, 110
  br i1 %eqtmp195, label %cond_then_block193, label %cond_else_blockX194

after_break192:                                   ; No predecessors!
  br label %cond_else_blockX190
  br label %cond_else_blockX194

cond_then_block193:                               ; preds = %cond_else_blockX190
  store i32 10, i32* %c, align 4
  br label %end_blockX

cond_else_blockX194:                              ; preds = %after_break196, %cond_else_blockX190, %after_break192
  %eqtmp199 = icmp eq i32 %c16, 114
  br i1 %eqtmp199, label %cond_then_block197, label %cond_else_blockX198

after_break196:                                   ; No predecessors!
  br label %cond_else_blockX194
  br label %cond_else_blockX198

cond_then_block197:                               ; preds = %cond_else_blockX194
  store i32 13, i32* %c, align 4
  br label %end_blockX

cond_else_blockX198:                              ; preds = %after_break200, %cond_else_blockX194, %after_break196
  %eqtmp203 = icmp eq i32 %c16, 116
  br i1 %eqtmp203, label %cond_then_block201, label %cond_else_blockX202

after_break200:                                   ; No predecessors!
  br label %cond_else_blockX198
  br label %cond_else_blockX202

cond_then_block201:                               ; preds = %cond_else_blockX198
  store i32 9, i32* %c, align 4
  br label %end_blockX

cond_else_blockX202:                              ; preds = %after_break204, %cond_else_blockX198, %after_break200
  %eqtmp207 = icmp eq i32 %c16, 118
  br i1 %eqtmp207, label %cond_then_block205, label %cond_else_blockX206

after_break204:                                   ; No predecessors!
  br label %cond_else_blockX202
  br label %cond_else_blockX206

cond_then_block205:                               ; preds = %cond_else_blockX202
  store i32 11, i32* %c, align 4
  br label %end_blockX

cond_else_blockX206:                              ; preds = %after_break208, %cond_else_blockX202, %after_break204
  %eqtmp211 = icmp eq i32 %c16, 101
  br i1 %eqtmp211, label %cond_then_block209, label %cond_else_blockX210

after_break208:                                   ; No predecessors!
  br label %cond_else_blockX206
  br label %cond_else_blockX210

cond_then_block209:                               ; preds = %cond_else_blockX206
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %logical_denial = icmp eq i32 %gnu_ext, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA212 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA212, label %cond_jump_then213, label %cond_end214

cond_else_blockX210:                              ; preds = %after_break215, %cond_else_blockX206, %after_break208
  %eqtmp218 = icmp eq i32 %c16, 39
  br i1 %eqtmp218, label %cond_then_block216, label %cond_else_blockX217
  br label %cond_else_blockX219

cond_jump_then213:                                ; preds = %cond_then_block209
  br label %parse_escape_string.invalid_escape
  br label %cond_end214

cond_end214:                                      ; preds = %cond_jump_then213, %cond_then_block209
  store i32 27, i32* %c, align 4
  br label %end_blockX

parse_escape_string.invalid_escape:               ; preds = %cond_then_block226, %cond_jump_then213
  %c229 = load i32, i32* %c, align 4
  %gteq_signed230 = icmp sge i32 %c229, 33
  store i1 %gteq_signed230, i1* %andand228, align 1
  br i1 %gteq_signed230, label %cond_jump_then231, label %cond_jump_end232

after_break215:                                   ; No predecessors!
  br label %cond_else_blockX210
  br label %cond_else_blockX217

cond_then_block216:                               ; preds = %cond_else_blockX221, %cond_else_blockX219, %cond_else_blockX217, %cond_else_blockX210
  br label %end_blockX

cond_else_blockX217:                              ; preds = %cond_else_blockX210, %after_break215
  %eqtmp220 = icmp eq i32 %c16, 34
  br i1 %eqtmp220, label %cond_then_block216, label %cond_else_blockX219
  br label %cond_else_blockX221

cond_else_blockX219:                              ; preds = %cond_else_blockX217, %cond_else_blockX210
  %eqtmp222 = icmp eq i32 %c16, 92
  br i1 %eqtmp222, label %cond_then_block216, label %cond_else_blockX221
  br label %cond_else_blockX223

cond_else_blockX221:                              ; preds = %cond_else_blockX219, %cond_else_blockX217
  %eqtmp224 = icmp eq i32 %c16, 63
  br i1 %eqtmp224, label %cond_then_block216, label %cond_else_blockX223

cond_else_blockX223:                              ; preds = %after_break225, %cond_else_blockX221, %cond_else_blockX219
  br label %cond_then_block226

after_break225:                                   ; No predecessors!
  br label %cond_else_blockX223
  br label %cond_else_blockX227

cond_then_block226:                               ; preds = %cond_else_blockX223
  br label %parse_escape_string.invalid_escape

cond_else_blockX227:                              ; preds = %after_break242, %after_break225
  br label %end_blockX

cond_jump_then231:                                ; preds = %parse_escape_string.invalid_escape
  %c233 = load i32, i32* %c, align 4
  %leeq234 = icmp sle i32 %c233, 126
  %andand235 = and i1 %gteq_signed230, %leeq234
  store i1 %andand235, i1* %andand228, align 1
  br label %cond_jump_end232

cond_jump_end232:                                 ; preds = %cond_jump_then231, %parse_escape_string.invalid_escape
  %andand_result_value236 = load i1, i1* %andand228, align 1
  br i1 %andand_result_value236, label %cond_jump_then237, label %cond_else_block238

cond_jump_then237:                                ; preds = %cond_jump_end232
  %c240 = load i32, i32* %c, align 4
  call void (i8*, ...) @warning(i8* bitcast ([31 x i8]* @65 to i8*), i32 %c240)
  br label %cond_end239

cond_else_block238:                               ; preds = %cond_jump_end232
  %c241 = load i32, i32* %c, align 4
  call void (i8*, ...) @warning(i8* bitcast ([32 x i8]* @66 to i8*), i32 %c241)
  br label %cond_end239

cond_end239:                                      ; preds = %cond_else_block238, %cond_jump_then237
  br label %end_blockX

after_break242:                                   ; No predecessors!
  br label %cond_else_blockX227

cond_jump_then255:                                ; preds = %parse_escape_string.add_char_nonext
  %outstr258 = load %CString*, %CString** %outstr, align 8
  %c259 = load i32, i32* %c, align 4
  store i32 1578, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.53, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

cond_else_block256:                               ; preds = %parse_escape_string.add_char_nonext
  %outstr277 = load %CString*, %CString** %outstr, align 8
  %c278 = load i32, i32* %c, align 4
  call void @cstr_wccat(%CString* %outstr277, i32 %c278)
  br label %cond_end257

cond_end257:                                      ; preds = %cond_else_block256, %cstr_ccat_end
  br label %loop_continue_top_block

cstr_ccat:                                        ; preds = %cond_jump_then255
  %cstr = alloca %CString*, align 8
  store %CString* %outstr258, %CString** %cstr, align 8
  %ch = alloca i32, align 4
  store i32 %c259, i32* %ch, align 4
  %cstr260 = load %CString*, %CString** %cstr, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr260, i32 0, i32 0
  %size261 = load i32, i32* %fieldLLL, align 4
  %add262 = add i32 %size261, 1
  store i32 %add262, i32* %size, align 4
  %size263 = load i32, i32* %size, align 4
  %cstr264 = load %CString*, %CString** %cstr, align 8
  %fieldLLL265 = getelementptr inbounds %CString, %CString* %cstr264, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL265, align 4
  %gt = icmp sgt i32 %size263, %size_allocated
  br i1 %gt, label %cond_jump_then266, label %cond_end267

cstr_ccat_end:                                    ; preds = %cond_end267
  br label %cond_end257

cond_jump_then266:                                ; preds = %cstr_ccat
  %cstr268 = load %CString*, %CString** %cstr, align 8
  %size269 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr268, i32 %size269)
  br label %cond_end267

cond_end267:                                      ; preds = %cond_jump_then266, %cstr_ccat
  %cstr270 = load %CString*, %CString** %cstr, align 8
  %fieldLLL271 = getelementptr inbounds %CString, %CString* %cstr270, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL271, align 8
  %size272 = load i32, i32* %size, align 4
  %sub273 = sub i32 %size272, 1
  %ch274 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch274 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub273
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr275 = load %CString*, %CString** %cstr, align 8
  %size276 = load i32, i32* %size, align 4
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr275, i32 0, i32 0
  store i32 %size276, i32* %fieldTU, align 4
  br label %cstr_ccat_end

cond_jump_then283:                                ; preds = %cond_end_block
  %outstr286 = load %CString*, %CString** %outstr, align 8
  store i32 1584, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.54, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat287

cond_else_block284:                               ; preds = %cond_end_block
  %outstr316 = load %CString*, %CString** %outstr, align 8
  call void @cstr_wccat(%CString* %outstr316, i32 0)
  br label %cond_end285

cond_end285:                                      ; preds = %cond_else_block284, %cstr_ccat_end290
  ret void

cstr_ccat287:                                     ; preds = %cond_jump_then283
  %cstr288 = alloca %CString*, align 8
  store %CString* %outstr286, %CString** %cstr288, align 8
  %ch289 = alloca i32, align 4
  store i32 0, i32* %ch289, align 4
  %cstr292 = load %CString*, %CString** %cstr288, align 8
  %fieldLLL293 = getelementptr inbounds %CString, %CString* %cstr292, i32 0, i32 0
  %size294 = load i32, i32* %fieldLLL293, align 4
  %add295 = add i32 %size294, 1
  store i32 %add295, i32* %size291, align 4
  %size296 = load i32, i32* %size291, align 4
  %cstr297 = load %CString*, %CString** %cstr288, align 8
  %fieldLLL298 = getelementptr inbounds %CString, %CString* %cstr297, i32 0, i32 2
  %size_allocated299 = load i32, i32* %fieldLLL298, align 4
  %gt300 = icmp sgt i32 %size296, %size_allocated299
  br i1 %gt300, label %cond_jump_then301, label %cond_end302

cstr_ccat_end290:                                 ; preds = %cond_end302
  br label %cond_end285

cond_jump_then301:                                ; preds = %cstr_ccat287
  %cstr303 = load %CString*, %CString** %cstr288, align 8
  %size304 = load i32, i32* %size291, align 4
  call void @cstr_realloc(%CString* %cstr303, i32 %size304)
  br label %cond_end302

cond_end302:                                      ; preds = %cond_jump_then301, %cstr_ccat287
  %cstr305 = load %CString*, %CString** %cstr288, align 8
  %fieldLLL306 = getelementptr inbounds %CString, %CString* %cstr305, i32 0, i32 1
  %data307 = load i8*, i8** %fieldLLL306, align 8
  %size308 = load i32, i32* %size291, align 4
  %sub309 = sub i32 %size308, 1
  %ch310 = load i32, i32* %ch289, align 4
  %icastJ311 = trunc i32 %ch310 to i8
  %element_addressXYXY312 = getelementptr i8, i8* %data307, i32 %sub309
  store i8 %icastJ311, i8* %element_addressXYXY312, align 1
  %cstr313 = load %CString*, %CString** %cstr288, align 8
  %size314 = load i32, i32* %size291, align 4
  %fieldTU315 = getelementptr inbounds %CString, %CString* %cstr313, i32 0, i32 0
  store i32 %size314, i32* %fieldTU315, align 4
  br label %cstr_ccat_end290
}

define void @bn_lshift(i32* %0, i32 %1, i32 %2) {
entry:
  %v = alloca i32, align 4
  %i = alloca i32, align 4
  %bn = alloca i32*, align 8
  %bn1 = alloca i32**, align 8
  store i32* %0, i32** %bn, align 8
  store i32** %bn, i32*** %bn1, align 8
  %shift = alloca i32, align 4
  %shift2 = alloca i32*, align 8
  store i32 %1, i32* %shift, align 4
  store i32* %shift, i32** %shift2, align 8
  %or_val = alloca i32, align 4
  %or_val3 = alloca i32*, align 8
  store i32 %2, i32* %or_val, align 4
  store i32* %or_val, i32** %or_val3, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i14 = load i32, i32* %i, align 4
  %add = add i32 %i14, 1
  store i32 %add, i32* %i, align 4
  %i15 = load i32, i32* %i, align 4
  %sub16 = sub i32 %i15, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i4 = load i32, i32* %i, align 4
  %le = icmp slt i32 %i4, 2
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %bn5 = load i32*, i32** %bn, align 8
  %i6 = load i32, i32* %i, align 4
  %element_addressAB = load i32*, i32** %bn, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 %i6
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  store i32 %load_element, i32* %v, align 4
  %bn7 = load i32*, i32** %bn, align 8
  %i8 = load i32, i32* %i, align 4
  %v9 = load i32, i32* %v, align 4
  %shift10 = load i32, i32* %shift, align 4
  %lshifttmp = shl i32 %v9, %shift10
  %or_val11 = load i32, i32* %or_val, align 4
  %ortmp = or i32 %lshifttmp, %or_val11
  %element_addressXYXY = getelementptr i32, i32* %bn7, i32 %i8
  store i32 %ortmp, i32* %element_addressXYXY, align 4
  %v12 = load i32, i32* %v, align 4
  %shift13 = load i32, i32* %shift, align 4
  %sub = sub i32 32, %shift13
  %rshifttmp = lshr i32 %v12, %sub
  store i32 %rshifttmp, i32* %or_val, align 4
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define void @bn_zero(i32* %0) {
entry:
  %i = alloca i32, align 4
  %bn = alloca i32*, align 8
  %bn1 = alloca i32**, align 8
  store i32* %0, i32** %bn, align 8
  store i32** %bn, i32*** %bn1, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i5 = load i32, i32* %i, align 4
  %add = add i32 %i5, 1
  store i32 %add, i32* %i, align 4
  %i6 = load i32, i32* %i, align 4
  %sub = sub i32 %i6, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i2 = load i32, i32* %i, align 4
  %le = icmp slt i32 %i2, 2
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %bn3 = load i32*, i32** %bn, align 8
  %i4 = load i32, i32* %i, align 4
  %element_addressXYXY = getelementptr i32, i32* %bn3, i32 %i4
  store i32 0, i32* %element_addressXYXY, align 4
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define void @parse_number(i8* %0) {
entry:
  %oror914 = alloca i1, align 1
  %andand832 = alloca i1, align 1
  %andand737 = alloca i1, align 1
  %ucount = alloca i32, align 4
  %lcount = alloca i32, align 4
  %n1 = alloca i64, align 8
  %n = alloca i64, align 8
  %andand681 = alloca i1, align 1
  %andand639 = alloca i1, align 1
  %oror627 = alloca i1, align 1
  %oror591 = alloca i1, align 1
  %oror555 = alloca i1, align 1
  %andand519 = alloca i1, align 1
  %andand437 = alloca i1, align 1
  %andand398 = alloca i1, align 1
  %oror388 = alloca i1, align 1
  %andand339 = alloca i1, align 1
  %andand304 = alloca i1, align 1
  %andand292 = alloca i1, align 1
  %andand273 = alloca i1, align 1
  %oror191 = alloca i1, align 1
  %oror180 = alloca i1, align 1
  %andand179 = alloca i1, align 1
  %oror160 = alloca i1, align 1
  %andand159 = alloca i1, align 1
  %oror154 = alloca i1, align 1
  %oror153 = alloca i1, align 1
  %andand110 = alloca i1, align 1
  %andand97 = alloca i1, align 1
  %andand83 = alloca i1, align 1
  %oror56 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %d = alloca double, align 8
  %bn = alloca [2 x i32], align 4
  %q = alloca i8*, align 8
  %ch = alloca i32, align 4
  %exp_val = alloca i32, align 4
  %s = alloca i32, align 4
  %frac_bits = alloca i32, align 4
  %shift = alloca i32, align 4
  %t = alloca i32, align 4
  %b = alloca i32, align 4
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  store i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @token_buf, i32 0, i32 0), i8** %q, align 8
  %p2 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p2 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p3 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p3 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  %derefference_valueB = load i8, i8* %iintToPtrD, align 1
  %icastL = sext i8 %derefference_valueB to i32
  store i32 %icastL, i32* %ch, align 4
  %ch4 = load i32, i32* %ch, align 4
  store i32 %ch4, i32* %t, align 4
  %p5 = load i8*, i8** %p, align 8
  %ptrToIntC6 = ptrtoint i8* %p5 to i64
  %add7 = add i64 %ptrToIntC6, 1
  %intToPtrB8 = inttoptr i64 %add7 to i8*
  store i8* %intToPtrB8, i8** %p, align 8
  %p9 = load i8*, i8** %p, align 8
  %ptrToIntI10 = ptrtoint i8* %p9 to i64
  %sub11 = sub i64 %ptrToIntI10, 1
  %iintToPtrD12 = inttoptr i64 %sub11 to i8*
  %derefference_valueB13 = load i8, i8* %iintToPtrD12, align 1
  %icastL14 = sext i8 %derefference_valueB13 to i32
  store i32 %icastL14, i32* %ch, align 4
  %q15 = load i8*, i8** %q, align 8
  %ptrToIntC16 = ptrtoint i8* %q15 to i64
  %add17 = add i64 %ptrToIntC16, 1
  %intToPtrB18 = inttoptr i64 %add17 to i8*
  store i8* %intToPtrB18, i8** %q, align 8
  %q19 = load i8*, i8** %q, align 8
  %ptrToIntI20 = ptrtoint i8* %q19 to i64
  %sub21 = sub i64 %ptrToIntI20, 1
  %iintToPtrD22 = inttoptr i64 %sub21 to i8*
  %t23 = load i32, i32* %t, align 4
  %icastJ = trunc i32 %t23 to i8
  store i8 %icastJ, i8* %iintToPtrD22, align 1
  store i32 10, i32* %b, align 4
  %t24 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t24, 46
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  br label %parse_number.float_frac_parse
  br label %cond_end

cond_jump_elif0:                                  ; preds = %entry
  %t25 = load i32, i32* %t, align 4
  %eq26 = icmp eq i32 %t25, 48
  br i1 %eq26, label %cond_jump_elif_then0, label %cond_end

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %ch27 = load i32, i32* %ch, align 4
  %eq28 = icmp eq i32 %ch27, 120
  store i1 %eq28, i1* %oror, align 1
  br i1 %eq28, label %cond_jump_end, label %cond_jump_then29

cond_end:                                         ; preds = %cond_end36, %cond_jump_elif0, %cond_jump_then
  br label %loop_top_block

parse_number.float_frac_parse:                    ; preds = %cond_end497, %cond_jump_then
  br label %loop_top_block518

cond_jump_then29:                                 ; preds = %cond_jump_elif_then0
  %ch30 = load i32, i32* %ch, align 4
  %eq31 = icmp eq i32 %ch30, 88
  %oror32 = or i1 %eq28, %eq31
  store i1 %oror32, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then29, %cond_jump_elif_then0
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then33, label %cond_jump_elif034

cond_jump_then33:                                 ; preds = %cond_jump_end
  %q37 = load i8*, i8** %q, align 8
  %ptrToIntI38 = ptrtoint i8* %q37 to i64
  %sub39 = sub i64 %ptrToIntI38, 1
  %iintToPtrD40 = inttoptr i64 %sub39 to i8*
  store i8* %iintToPtrD40, i8** %q, align 8
  %ptrToIntC41 = ptrtoint i8* %iintToPtrD40 to i64
  %add42 = add i64 %ptrToIntC41, 1
  %intToPtrB43 = inttoptr i64 %add42 to i8*
  %p44 = load i8*, i8** %p, align 8
  %ptrToIntC45 = ptrtoint i8* %p44 to i64
  %add46 = add i64 %ptrToIntC45, 1
  %intToPtrB47 = inttoptr i64 %add46 to i8*
  store i8* %intToPtrB47, i8** %p, align 8
  %p48 = load i8*, i8** %p, align 8
  %ptrToIntI49 = ptrtoint i8* %p48 to i64
  %sub50 = sub i64 %ptrToIntI49, 1
  %iintToPtrD51 = inttoptr i64 %sub50 to i8*
  %derefference_valueB52 = load i8, i8* %iintToPtrD51, align 1
  %icastL53 = sext i8 %derefference_valueB52 to i32
  store i32 %icastL53, i32* %ch, align 4
  store i32 16, i32* %b, align 4
  br label %cond_end36

cond_jump_elif034:                                ; preds = %cond_jump_end
  %tcc_ext = load i32, i32* @tcc_ext, align 4
  %icmpA = icmp ne i32 %tcc_ext, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then54, label %cond_jump_end55

cond_jump_elif_then035:                           ; preds = %cond_jump_end55
  %q66 = load i8*, i8** %q, align 8
  %ptrToIntI67 = ptrtoint i8* %q66 to i64
  %sub68 = sub i64 %ptrToIntI67, 1
  %iintToPtrD69 = inttoptr i64 %sub68 to i8*
  store i8* %iintToPtrD69, i8** %q, align 8
  %ptrToIntC70 = ptrtoint i8* %iintToPtrD69 to i64
  %add71 = add i64 %ptrToIntC70, 1
  %intToPtrB72 = inttoptr i64 %add71 to i8*
  %p73 = load i8*, i8** %p, align 8
  %ptrToIntC74 = ptrtoint i8* %p73 to i64
  %add75 = add i64 %ptrToIntC74, 1
  %intToPtrB76 = inttoptr i64 %add75 to i8*
  store i8* %intToPtrB76, i8** %p, align 8
  %p77 = load i8*, i8** %p, align 8
  %ptrToIntI78 = ptrtoint i8* %p77 to i64
  %sub79 = sub i64 %ptrToIntI78, 1
  %iintToPtrD80 = inttoptr i64 %sub79 to i8*
  %derefference_valueB81 = load i8, i8* %iintToPtrD80, align 1
  %icastL82 = sext i8 %derefference_valueB81 to i32
  store i32 %icastL82, i32* %ch, align 4
  store i32 2, i32* %b, align 4
  br label %cond_end36

cond_end36:                                       ; preds = %cond_jump_elif_then035, %cond_jump_end55, %cond_jump_then33
  br label %cond_end

cond_jump_then54:                                 ; preds = %cond_jump_elif034
  %ch57 = load i32, i32* %ch, align 4
  %eq58 = icmp eq i32 %ch57, 98
  store i1 %eq58, i1* %oror56, align 1
  br i1 %eq58, label %cond_jump_end60, label %cond_jump_then59

cond_jump_end55:                                  ; preds = %cond_jump_end60, %cond_jump_elif034
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_elif_then035, label %cond_end36

cond_jump_then59:                                 ; preds = %cond_jump_then54
  %ch61 = load i32, i32* %ch, align 4
  %eq62 = icmp eq i32 %ch61, 66
  %oror63 = or i1 %eq58, %eq62
  store i1 %oror63, i1* %oror56, align 1
  br label %cond_jump_end60

cond_jump_end60:                                  ; preds = %cond_jump_then59, %cond_jump_then54
  %oror_result_value64 = load i1, i1* %oror56, align 1
  %andand65 = and i1 %icmpA, %oror_result_value64
  store i1 %andand65, i1* %andand, align 1
  br label %cond_jump_end55

loop_top_block:                                   ; preds = %cond_end132, %cond_end
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %ch84 = load i32, i32* %ch, align 4
  %gteq_signed = icmp sge i32 %ch84, 97
  store i1 %gteq_signed, i1* %andand83, align 1
  br i1 %gteq_signed, label %cond_jump_then85, label %cond_jump_end86

cond_end_block:                                   ; preds = %cond_jump_then126, %cond_else_block, %loop_top_block
  %ch155 = load i32, i32* %ch, align 4
  %eq156 = icmp eq i32 %ch155, 46
  store i1 %eq156, i1* %oror154, align 1
  br i1 %eq156, label %cond_jump_end158, label %cond_jump_then157

cond_jump_then85:                                 ; preds = %cond_then_block
  %ch87 = load i32, i32* %ch, align 4
  %leeq = icmp sle i32 %ch87, 102
  %andand88 = and i1 %gteq_signed, %leeq
  store i1 %andand88, i1* %andand83, align 1
  br label %cond_jump_end86

cond_jump_end86:                                  ; preds = %cond_jump_then85, %cond_then_block
  %andand_result_value89 = load i1, i1* %andand83, align 1
  br i1 %andand_result_value89, label %cond_jump_then90, label %cond_jump_elif091

cond_jump_then90:                                 ; preds = %cond_jump_end86
  %ch94 = load i32, i32* %ch, align 4
  %sub95 = sub i32 %ch94, 97
  %add96 = add i32 %sub95, 10
  store i32 %add96, i32* %t, align 4
  br label %cond_end93

cond_jump_elif091:                                ; preds = %cond_jump_end86
  %ch98 = load i32, i32* %ch, align 4
  %gteq_signed99 = icmp sge i32 %ch98, 65
  store i1 %gteq_signed99, i1* %andand97, align 1
  br i1 %gteq_signed99, label %cond_jump_then100, label %cond_jump_end101

cond_jump_elif_then092:                           ; preds = %cond_jump_end101
  %ch106 = load i32, i32* %ch, align 4
  %sub107 = sub i32 %ch106, 65
  %add108 = add i32 %sub107, 10
  store i32 %add108, i32* %t, align 4
  br label %cond_end93

cond_jump_elif1:                                  ; preds = %cond_jump_end101
  %ch109 = load i32, i32* %ch, align 4
  store i32 1648, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.55, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum

cond_jump_elif_then1:                             ; preds = %isnum_end
  %ch121 = load i32, i32* %ch, align 4
  %sub122 = sub i32 %ch121, 48
  store i32 %sub122, i32* %t, align 4
  br label %cond_end93

cond_else_block:                                  ; preds = %isnum_end
  br label %cond_end_block

cond_end93:                                       ; preds = %after_break, %cond_jump_elif_then1, %cond_jump_elif_then092, %cond_jump_then90
  %t123 = load i32, i32* %t, align 4
  %b124 = load i32, i32* %b, align 4
  %gteq_signed125 = icmp sge i32 %t123, %b124
  br i1 %gteq_signed125, label %cond_jump_then126, label %cond_end127

cond_jump_then100:                                ; preds = %cond_jump_elif091
  %ch102 = load i32, i32* %ch, align 4
  %leeq103 = icmp sle i32 %ch102, 70
  %andand104 = and i1 %gteq_signed99, %leeq103
  store i1 %andand104, i1* %andand97, align 1
  br label %cond_jump_end101

cond_jump_end101:                                 ; preds = %cond_jump_then100, %cond_jump_elif091
  %andand_result_value105 = load i1, i1* %andand97, align 1
  br i1 %andand_result_value105, label %cond_jump_elif_then092, label %cond_jump_elif1

isnum:                                            ; preds = %cond_jump_elif1
  %inline_result_variable = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %ch109, i32* %c, align 4
  %c111 = load i32, i32* %c, align 4
  %gteq_signed112 = icmp sge i32 %c111, 48
  store i1 %gteq_signed112, i1* %andand110, align 1
  br i1 %gteq_signed112, label %cond_jump_then113, label %cond_jump_end114

isnum_end:                                        ; preds = %cond_jump_end114
  %inline_result_variable119 = load i32, i32* %inline_result_variable, align 4
  %icmpA120 = icmp ne i32 %inline_result_variable119, 0
  br i1 %icmpA120, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_then113:                                ; preds = %isnum
  %c115 = load i32, i32* %c, align 4
  %leeq116 = icmp sle i32 %c115, 57
  %andand117 = and i1 %gteq_signed112, %leeq116
  store i1 %andand117, i1* %andand110, align 1
  br label %cond_jump_end114

cond_jump_end114:                                 ; preds = %cond_jump_then113, %isnum
  %andand_result_value118 = load i1, i1* %andand110, align 1
  %icastKX = zext i1 %andand_result_value118 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %isnum_end

after_break:                                      ; No predecessors!
  br label %cond_end93

cond_jump_then126:                                ; preds = %cond_end93
  br label %cond_end_block

cond_end127:                                      ; preds = %after_break128, %cond_end93
  %q129 = load i8*, i8** %q, align 8
  %castAC = ptrtoint i8* %q129 to i32
  %gteq_signed130 = icmp sge i32 %castAC, ptrtoint (i8* inttoptr (i64 add (i64 ptrtoint ([1025 x i8]* @token_buf to i64), i64 1024) to i8*) to i32)
  br i1 %gteq_signed130, label %cond_jump_then131, label %cond_end132

after_break128:                                   ; No predecessors!
  br label %cond_end127

cond_jump_then131:                                ; preds = %cond_end127
  br label %parse_number.num_too_long

cond_end132:                                      ; preds = %parse_number.num_too_long, %cond_end127
  %q133 = load i8*, i8** %q, align 8
  %ptrToIntC134 = ptrtoint i8* %q133 to i64
  %add135 = add i64 %ptrToIntC134, 1
  %intToPtrB136 = inttoptr i64 %add135 to i8*
  store i8* %intToPtrB136, i8** %q, align 8
  %q137 = load i8*, i8** %q, align 8
  %ptrToIntI138 = ptrtoint i8* %q137 to i64
  %sub139 = sub i64 %ptrToIntI138, 1
  %iintToPtrD140 = inttoptr i64 %sub139 to i8*
  %ch141 = load i32, i32* %ch, align 4
  %icastJ142 = trunc i32 %ch141 to i8
  store i8 %icastJ142, i8* %iintToPtrD140, align 1
  %p143 = load i8*, i8** %p, align 8
  %ptrToIntC144 = ptrtoint i8* %p143 to i64
  %add145 = add i64 %ptrToIntC144, 1
  %intToPtrB146 = inttoptr i64 %add145 to i8*
  store i8* %intToPtrB146, i8** %p, align 8
  %p147 = load i8*, i8** %p, align 8
  %ptrToIntI148 = ptrtoint i8* %p147 to i64
  %sub149 = sub i64 %ptrToIntI148, 1
  %iintToPtrD150 = inttoptr i64 %sub149 to i8*
  %derefference_valueB151 = load i8, i8* %iintToPtrD150, align 1
  %icastL152 = sext i8 %derefference_valueB151 to i32
  store i32 %icastL152, i32* %ch, align 4
  br label %loop_top_block

parse_number.num_too_long:                        ; preds = %cond_jump_then653, %cond_jump_then605, %cond_jump_then569, %cond_jump_then533, %cond_jump_then496, %cond_jump_then131
  call void (i8*, ...) @error(i8* bitcast ([16 x i8]* @67 to i8*))
  br label %cond_end132

cond_jump_then157:                                ; preds = %cond_end_block
  %ch161 = load i32, i32* %ch, align 4
  %eq162 = icmp eq i32 %ch161, 101
  store i1 %eq162, i1* %oror160, align 1
  br i1 %eq162, label %cond_jump_end164, label %cond_jump_then163

cond_jump_end158:                                 ; preds = %cond_jump_end170, %cond_end_block
  %oror_result_value176 = load i1, i1* %oror154, align 1
  store i1 %oror_result_value176, i1* %oror153, align 1
  br i1 %oror_result_value176, label %cond_jump_end178, label %cond_jump_then177

cond_jump_then163:                                ; preds = %cond_jump_then157
  %ch165 = load i32, i32* %ch, align 4
  %eq166 = icmp eq i32 %ch165, 69
  %oror167 = or i1 %eq162, %eq166
  store i1 %oror167, i1* %oror160, align 1
  br label %cond_jump_end164

cond_jump_end164:                                 ; preds = %cond_jump_then163, %cond_jump_then157
  %oror_result_value168 = load i1, i1* %oror160, align 1
  store i1 %oror_result_value168, i1* %andand159, align 1
  br i1 %oror_result_value168, label %cond_jump_then169, label %cond_jump_end170

cond_jump_then169:                                ; preds = %cond_jump_end164
  %b171 = load i32, i32* %b, align 4
  %eq172 = icmp eq i32 %b171, 10
  %andand173 = and i1 %oror_result_value168, %eq172
  store i1 %andand173, i1* %andand159, align 1
  br label %cond_jump_end170

cond_jump_end170:                                 ; preds = %cond_jump_then169, %cond_jump_end164
  %andand_result_value174 = load i1, i1* %andand159, align 1
  %oror175 = or i1 %eq156, %andand_result_value174
  store i1 %oror175, i1* %oror154, align 1
  br label %cond_jump_end158

cond_jump_then177:                                ; preds = %cond_jump_end158
  %ch181 = load i32, i32* %ch, align 4
  %eq182 = icmp eq i32 %ch181, 112
  store i1 %eq182, i1* %oror180, align 1
  br i1 %eq182, label %cond_jump_end184, label %cond_jump_then183

cond_jump_end178:                                 ; preds = %cond_jump_end190, %cond_jump_end158
  %oror_result_value203 = load i1, i1* %oror153, align 1
  br i1 %oror_result_value203, label %cond_jump_then204, label %cond_else_block205

cond_jump_then183:                                ; preds = %cond_jump_then177
  %ch185 = load i32, i32* %ch, align 4
  %eq186 = icmp eq i32 %ch185, 80
  %oror187 = or i1 %eq182, %eq186
  store i1 %oror187, i1* %oror180, align 1
  br label %cond_jump_end184

cond_jump_end184:                                 ; preds = %cond_jump_then183, %cond_jump_then177
  %oror_result_value188 = load i1, i1* %oror180, align 1
  store i1 %oror_result_value188, i1* %andand179, align 1
  br i1 %oror_result_value188, label %cond_jump_then189, label %cond_jump_end190

cond_jump_then189:                                ; preds = %cond_jump_end184
  %b192 = load i32, i32* %b, align 4
  %eq193 = icmp eq i32 %b192, 16
  store i1 %eq193, i1* %oror191, align 1
  br i1 %eq193, label %cond_jump_end195, label %cond_jump_then194

cond_jump_end190:                                 ; preds = %cond_jump_end195, %cond_jump_end184
  %andand_result_value201 = load i1, i1* %andand179, align 1
  %oror202 = or i1 %oror_result_value176, %andand_result_value201
  store i1 %oror202, i1* %oror153, align 1
  br label %cond_jump_end178

cond_jump_then194:                                ; preds = %cond_jump_then189
  %b196 = load i32, i32* %b, align 4
  %eq197 = icmp eq i32 %b196, 2
  %oror198 = or i1 %eq193, %eq197
  store i1 %oror198, i1* %oror191, align 1
  br label %cond_jump_end195

cond_jump_end195:                                 ; preds = %cond_jump_then194, %cond_jump_then189
  %oror_result_value199 = load i1, i1* %oror191, align 1
  %andand200 = and i1 %oror_result_value188, %oror_result_value199
  store i1 %andand200, i1* %andand179, align 1
  br label %cond_jump_end190

cond_jump_then204:                                ; preds = %cond_jump_end178
  %b207 = load i32, i32* %b, align 4
  %not_eq = icmp ne i32 %b207, 10
  br i1 %not_eq, label %cond_jump_then208, label %cond_else_block209

cond_else_block205:                               ; preds = %cond_jump_end178
  %q736 = load i8*, i8** %q, align 8
  store i8 0, i8* %q736, align 1
  store i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @token_buf, i32 0, i32 0), i8** %q, align 8
  %b738 = load i32, i32* %b, align 4
  %eq739 = icmp eq i32 %b738, 10
  store i1 %eq739, i1* %andand737, align 1
  br i1 %eq739, label %cond_jump_then740, label %cond_jump_end741

cond_end206:                                      ; preds = %cond_end925, %cond_end210
  %ch930 = load i32, i32* %ch, align 4
  %icmpA931 = icmp ne i32 %ch930, 0
  br i1 %icmpA931, label %cond_jump_then932, label %cond_end933

cond_jump_then208:                                ; preds = %cond_jump_then204
  %q211 = load i8*, i8** %q, align 8
  store i8 0, i8* %q211, align 1
  %b212 = load i32, i32* %b, align 4
  %eq213 = icmp eq i32 %b212, 16
  br i1 %eq213, label %cond_jump_then214, label %cond_else_block215

cond_else_block209:                               ; preds = %cond_jump_then204
  %ch489 = load i32, i32* %ch, align 4
  %eq490 = icmp eq i32 %ch489, 46
  br i1 %eq490, label %cond_jump_then491, label %cond_end492

cond_end210:                                      ; preds = %cond_end707, %cond_end460
  br label %cond_end206

cond_jump_then214:                                ; preds = %cond_jump_then208
  store i32 4, i32* %shift, align 4
  br label %cond_end216

cond_else_block215:                               ; preds = %cond_jump_then208
  store i32 2, i32* %shift, align 4
  br label %cond_end216

cond_end216:                                      ; preds = %cond_else_block215, %cond_jump_then214
  %autocast = bitcast [2 x i32]* %bn to i32*
  call void @bn_zero(i32* %autocast)
  store i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @token_buf, i32 0, i32 0), i8** %q, align 8
  br label %loop_top_block217

loop_top_block217:                                ; preds = %cond_end238, %cond_end216
  br i1 true, label %cond_then_block218, label %cond_end_block219

cond_then_block218:                               ; preds = %loop_top_block217
  %q220 = load i8*, i8** %q, align 8
  %ptrToIntC221 = ptrtoint i8* %q220 to i64
  %add222 = add i64 %ptrToIntC221, 1
  %intToPtrB223 = inttoptr i64 %add222 to i8*
  store i8* %intToPtrB223, i8** %q, align 8
  %q224 = load i8*, i8** %q, align 8
  %ptrToIntI225 = ptrtoint i8* %q224 to i64
  %sub226 = sub i64 %ptrToIntI225, 1
  %iintToPtrD227 = inttoptr i64 %sub226 to i8*
  %derefference_valueB228 = load i8, i8* %iintToPtrD227, align 1
  %icastL229 = sext i8 %derefference_valueB228 to i32
  store i32 %icastL229, i32* %t, align 4
  %t230 = load i32, i32* %t, align 4
  %eq231 = icmp eq i32 %t230, 0
  br i1 %eq231, label %cond_jump_then232, label %cond_jump_elif0233

cond_end_block219:                                ; preds = %cond_jump_then232, %loop_top_block217
  store i32 0, i32* %frac_bits, align 4
  %ch255 = load i32, i32* %ch, align 4
  %eq256 = icmp eq i32 %ch255, 46
  br i1 %eq256, label %cond_jump_then257, label %cond_end258

cond_jump_then232:                                ; preds = %cond_then_block218
  br label %cond_end_block219

cond_jump_elif0233:                               ; preds = %cond_then_block218
  %t240 = load i32, i32* %t, align 4
  %gteq_signed241 = icmp sge i32 %t240, 97
  br i1 %gteq_signed241, label %cond_jump_elif_then0234, label %cond_jump_elif1235

cond_jump_elif_then0234:                          ; preds = %cond_jump_elif0233
  %t242 = load i32, i32* %t, align 4
  %sub243 = sub i32 %t242, 97
  %add244 = add i32 %sub243, 10
  store i32 %add244, i32* %t, align 4
  br label %cond_end238

cond_jump_elif1235:                               ; preds = %cond_jump_elif0233
  %t245 = load i32, i32* %t, align 4
  %gteq_signed246 = icmp sge i32 %t245, 65
  br i1 %gteq_signed246, label %cond_jump_elif_then1236, label %cond_else_block237

cond_jump_elif_then1236:                          ; preds = %cond_jump_elif1235
  %t247 = load i32, i32* %t, align 4
  %sub248 = sub i32 %t247, 65
  %add249 = add i32 %sub248, 10
  store i32 %add249, i32* %t, align 4
  br label %cond_end238

cond_else_block237:                               ; preds = %cond_jump_elif1235
  %t250 = load i32, i32* %t, align 4
  %sub251 = sub i32 %t250, 48
  store i32 %sub251, i32* %t, align 4
  br label %cond_end238

cond_end238:                                      ; preds = %cond_else_block237, %cond_jump_elif_then1236, %cond_jump_elif_then0234, %after_break239
  %autocast252 = bitcast [2 x i32]* %bn to i32*
  %shift253 = load i32, i32* %shift, align 4
  %t254 = load i32, i32* %t, align 4
  call void @bn_lshift(i32* %autocast252, i32 %shift253, i32 %t254)
  br label %loop_top_block217

after_break239:                                   ; No predecessors!
  br label %cond_end238

cond_jump_then257:                                ; preds = %cond_end_block219
  %p259 = load i8*, i8** %p, align 8
  %ptrToIntC260 = ptrtoint i8* %p259 to i64
  %add261 = add i64 %ptrToIntC260, 1
  %intToPtrB262 = inttoptr i64 %add261 to i8*
  store i8* %intToPtrB262, i8** %p, align 8
  %p263 = load i8*, i8** %p, align 8
  %ptrToIntI264 = ptrtoint i8* %p263 to i64
  %sub265 = sub i64 %ptrToIntI264, 1
  %iintToPtrD266 = inttoptr i64 %sub265 to i8*
  %derefference_valueB267 = load i8, i8* %iintToPtrD266, align 1
  %icastL268 = sext i8 %derefference_valueB267 to i32
  store i32 %icastL268, i32* %ch, align 4
  br label %loop_top_block269

cond_end258:                                      ; preds = %cond_end_block271, %cond_end_block219
  %ch340 = load i32, i32* %ch, align 4
  %not_eq341 = icmp ne i32 %ch340, 112
  store i1 %not_eq341, i1* %andand339, align 1
  br i1 %not_eq341, label %cond_jump_then342, label %cond_jump_end343

loop_top_block269:                                ; preds = %cond_end320, %cond_jump_then257
  br i1 true, label %cond_then_block270, label %cond_end_block271

cond_then_block270:                               ; preds = %loop_top_block269
  %ch272 = load i32, i32* %ch, align 4
  store i32 %ch272, i32* %t, align 4
  %t274 = load i32, i32* %t, align 4
  %gteq_signed275 = icmp sge i32 %t274, 97
  store i1 %gteq_signed275, i1* %andand273, align 1
  br i1 %gteq_signed275, label %cond_jump_then276, label %cond_jump_end277

cond_end_block271:                                ; preds = %cond_else_block287, %loop_top_block269
  br label %cond_end258

cond_jump_then276:                                ; preds = %cond_then_block270
  %t278 = load i32, i32* %t, align 4
  %leeq279 = icmp sle i32 %t278, 102
  %andand280 = and i1 %gteq_signed275, %leeq279
  store i1 %andand280, i1* %andand273, align 1
  br label %cond_jump_end277

cond_jump_end277:                                 ; preds = %cond_jump_then276, %cond_then_block270
  %andand_result_value281 = load i1, i1* %andand273, align 1
  br i1 %andand_result_value281, label %cond_jump_then282, label %cond_jump_elif0283

cond_jump_then282:                                ; preds = %cond_jump_end277
  %t289 = load i32, i32* %t, align 4
  %sub290 = sub i32 %t289, 97
  %add291 = add i32 %sub290, 10
  store i32 %add291, i32* %t, align 4
  br label %cond_end288

cond_jump_elif0283:                               ; preds = %cond_jump_end277
  %t293 = load i32, i32* %t, align 4
  %gteq_signed294 = icmp sge i32 %t293, 65
  store i1 %gteq_signed294, i1* %andand292, align 1
  br i1 %gteq_signed294, label %cond_jump_then295, label %cond_jump_end296

cond_jump_elif_then0284:                          ; preds = %cond_jump_end296
  %t301 = load i32, i32* %t, align 4
  %sub302 = sub i32 %t301, 65
  %add303 = add i32 %sub302, 10
  store i32 %add303, i32* %t, align 4
  br label %cond_end288

cond_jump_elif1285:                               ; preds = %cond_jump_end296
  %t305 = load i32, i32* %t, align 4
  %gteq_signed306 = icmp sge i32 %t305, 48
  store i1 %gteq_signed306, i1* %andand304, align 1
  br i1 %gteq_signed306, label %cond_jump_then307, label %cond_jump_end308

cond_jump_elif_then1286:                          ; preds = %cond_jump_end308
  %t313 = load i32, i32* %t, align 4
  %sub314 = sub i32 %t313, 48
  store i32 %sub314, i32* %t, align 4
  br label %cond_end288

cond_else_block287:                               ; preds = %cond_jump_end308
  br label %cond_end_block271

cond_end288:                                      ; preds = %after_break315, %cond_jump_elif_then1286, %cond_jump_elif_then0284, %cond_jump_then282
  %t316 = load i32, i32* %t, align 4
  %b317 = load i32, i32* %b, align 4
  %gteq_signed318 = icmp sge i32 %t316, %b317
  br i1 %gteq_signed318, label %cond_jump_then319, label %cond_end320

cond_jump_then295:                                ; preds = %cond_jump_elif0283
  %t297 = load i32, i32* %t, align 4
  %leeq298 = icmp sle i32 %t297, 70
  %andand299 = and i1 %gteq_signed294, %leeq298
  store i1 %andand299, i1* %andand292, align 1
  br label %cond_jump_end296

cond_jump_end296:                                 ; preds = %cond_jump_then295, %cond_jump_elif0283
  %andand_result_value300 = load i1, i1* %andand292, align 1
  br i1 %andand_result_value300, label %cond_jump_elif_then0284, label %cond_jump_elif1285

cond_jump_then307:                                ; preds = %cond_jump_elif1285
  %t309 = load i32, i32* %t, align 4
  %leeq310 = icmp sle i32 %t309, 57
  %andand311 = and i1 %gteq_signed306, %leeq310
  store i1 %andand311, i1* %andand304, align 1
  br label %cond_jump_end308

cond_jump_end308:                                 ; preds = %cond_jump_then307, %cond_jump_elif1285
  %andand_result_value312 = load i1, i1* %andand304, align 1
  br i1 %andand_result_value312, label %cond_jump_elif_then1286, label %cond_else_block287

after_break315:                                   ; No predecessors!
  br label %cond_end288

cond_jump_then319:                                ; preds = %cond_end288
  call void (i8*, ...) @error(i8* bitcast ([14 x i8]* @68 to i8*))
  br label %cond_end320

cond_end320:                                      ; preds = %cond_jump_then319, %cond_end288
  %autocast321 = bitcast [2 x i32]* %bn to i32*
  %shift322 = load i32, i32* %shift, align 4
  %t323 = load i32, i32* %t, align 4
  call void @bn_lshift(i32* %autocast321, i32 %shift322, i32 %t323)
  %frac_bits324 = load i32, i32* %frac_bits, align 4
  %shift325 = load i32, i32* %shift, align 4
  %add326 = add i32 %frac_bits324, %shift325
  store i32 %add326, i32* %frac_bits, align 4
  %shift327 = load i32, i32* %shift, align 4
  %sub328 = sub i32 %add326, %shift327
  %p329 = load i8*, i8** %p, align 8
  %ptrToIntC330 = ptrtoint i8* %p329 to i64
  %add331 = add i64 %ptrToIntC330, 1
  %intToPtrB332 = inttoptr i64 %add331 to i8*
  store i8* %intToPtrB332, i8** %p, align 8
  %p333 = load i8*, i8** %p, align 8
  %ptrToIntI334 = ptrtoint i8* %p333 to i64
  %sub335 = sub i64 %ptrToIntI334, 1
  %iintToPtrD336 = inttoptr i64 %sub335 to i8*
  %derefference_valueB337 = load i8, i8* %iintToPtrD336, align 1
  %icastL338 = sext i8 %derefference_valueB337 to i32
  store i32 %icastL338, i32* %ch, align 4
  br label %loop_top_block269

cond_jump_then342:                                ; preds = %cond_end258
  %ch344 = load i32, i32* %ch, align 4
  %not_eq345 = icmp ne i32 %ch344, 80
  %andand346 = and i1 %not_eq341, %not_eq345
  store i1 %andand346, i1* %andand339, align 1
  br label %cond_jump_end343

cond_jump_end343:                                 ; preds = %cond_jump_then342, %cond_end258
  %andand_result_value347 = load i1, i1* %andand339, align 1
  br i1 %andand_result_value347, label %cond_jump_then348, label %cond_end349

cond_jump_then348:                                ; preds = %cond_jump_end343
  call void @expect(i8* bitcast ([9 x i8]* @69 to i8*))
  br label %cond_end349

cond_end349:                                      ; preds = %cond_jump_then348, %cond_jump_end343
  %p350 = load i8*, i8** %p, align 8
  %ptrToIntC351 = ptrtoint i8* %p350 to i64
  %add352 = add i64 %ptrToIntC351, 1
  %intToPtrB353 = inttoptr i64 %add352 to i8*
  store i8* %intToPtrB353, i8** %p, align 8
  %p354 = load i8*, i8** %p, align 8
  %ptrToIntI355 = ptrtoint i8* %p354 to i64
  %sub356 = sub i64 %ptrToIntI355, 1
  %iintToPtrD357 = inttoptr i64 %sub356 to i8*
  %derefference_valueB358 = load i8, i8* %iintToPtrD357, align 1
  %icastL359 = sext i8 %derefference_valueB358 to i32
  store i32 %icastL359, i32* %ch, align 4
  store i32 1, i32* %s, align 4
  store i32 0, i32* %exp_val, align 4
  %ch360 = load i32, i32* %ch, align 4
  %eq361 = icmp eq i32 %ch360, 43
  br i1 %eq361, label %cond_jump_then362, label %cond_jump_elif0363

cond_jump_then362:                                ; preds = %cond_end349
  %p366 = load i8*, i8** %p, align 8
  %ptrToIntC367 = ptrtoint i8* %p366 to i64
  %add368 = add i64 %ptrToIntC367, 1
  %intToPtrB369 = inttoptr i64 %add368 to i8*
  store i8* %intToPtrB369, i8** %p, align 8
  %p370 = load i8*, i8** %p, align 8
  %ptrToIntI371 = ptrtoint i8* %p370 to i64
  %sub372 = sub i64 %ptrToIntI371, 1
  %iintToPtrD373 = inttoptr i64 %sub372 to i8*
  %derefference_valueB374 = load i8, i8* %iintToPtrD373, align 1
  %icastL375 = sext i8 %derefference_valueB374 to i32
  store i32 %icastL375, i32* %ch, align 4
  br label %cond_end365

cond_jump_elif0363:                               ; preds = %cond_end349
  %ch376 = load i32, i32* %ch, align 4
  %eq377 = icmp eq i32 %ch376, 45
  br i1 %eq377, label %cond_jump_elif_then0364, label %cond_end365

cond_jump_elif_then0364:                          ; preds = %cond_jump_elif0363
  store i32 -1, i32* %s, align 4
  %p378 = load i8*, i8** %p, align 8
  %ptrToIntC379 = ptrtoint i8* %p378 to i64
  %add380 = add i64 %ptrToIntC379, 1
  %intToPtrB381 = inttoptr i64 %add380 to i8*
  store i8* %intToPtrB381, i8** %p, align 8
  %p382 = load i8*, i8** %p, align 8
  %ptrToIntI383 = ptrtoint i8* %p382 to i64
  %sub384 = sub i64 %ptrToIntI383, 1
  %iintToPtrD385 = inttoptr i64 %sub384 to i8*
  %derefference_valueB386 = load i8, i8* %iintToPtrD385, align 1
  %icastL387 = sext i8 %derefference_valueB386 to i32
  store i32 %icastL387, i32* %ch, align 4
  br label %cond_end365

cond_end365:                                      ; preds = %cond_jump_elif_then0364, %cond_jump_elif0363, %cond_jump_then362
  %ch389 = load i32, i32* %ch, align 4
  %le = icmp slt i32 %ch389, 48
  store i1 %le, i1* %oror388, align 1
  br i1 %le, label %cond_jump_end391, label %cond_jump_then390

cond_jump_then390:                                ; preds = %cond_end365
  %ch392 = load i32, i32* %ch, align 4
  %gt = icmp sgt i32 %ch392, 57
  %oror393 = or i1 %le, %gt
  store i1 %oror393, i1* %oror388, align 1
  br label %cond_jump_end391

cond_jump_end391:                                 ; preds = %cond_jump_then390, %cond_end365
  %oror_result_value394 = load i1, i1* %oror388, align 1
  br i1 %oror_result_value394, label %cond_jump_then395, label %cond_end396

cond_jump_then395:                                ; preds = %cond_jump_end391
  call void @expect(i8* bitcast ([16 x i8]* @70 to i8*))
  br label %cond_end396

cond_end396:                                      ; preds = %cond_jump_then395, %cond_jump_end391
  br label %loop_top_block397

loop_top_block397:                                ; preds = %cond_then_block407, %cond_end396
  %ch399 = load i32, i32* %ch, align 4
  %gteq_signed400 = icmp sge i32 %ch399, 48
  store i1 %gteq_signed400, i1* %andand398, align 1
  br i1 %gteq_signed400, label %cond_jump_then401, label %cond_jump_end402

cond_jump_then401:                                ; preds = %loop_top_block397
  %ch403 = load i32, i32* %ch, align 4
  %leeq404 = icmp sle i32 %ch403, 57
  %andand405 = and i1 %gteq_signed400, %leeq404
  store i1 %andand405, i1* %andand398, align 1
  br label %cond_jump_end402

cond_jump_end402:                                 ; preds = %cond_jump_then401, %loop_top_block397
  %andand_result_value406 = load i1, i1* %andand398, align 1
  br i1 %andand_result_value406, label %cond_then_block407, label %cond_end_block408

cond_then_block407:                               ; preds = %cond_jump_end402
  %exp_val409 = load i32, i32* %exp_val, align 4
  %mul = mul i32 %exp_val409, 10
  %ch410 = load i32, i32* %ch, align 4
  %add411 = add i32 %mul, %ch410
  %sub412 = sub i32 %add411, 48
  store i32 %sub412, i32* %exp_val, align 4
  %p413 = load i8*, i8** %p, align 8
  %ptrToIntC414 = ptrtoint i8* %p413 to i64
  %add415 = add i64 %ptrToIntC414, 1
  %intToPtrB416 = inttoptr i64 %add415 to i8*
  store i8* %intToPtrB416, i8** %p, align 8
  %p417 = load i8*, i8** %p, align 8
  %ptrToIntI418 = ptrtoint i8* %p417 to i64
  %sub419 = sub i64 %ptrToIntI418, 1
  %iintToPtrD420 = inttoptr i64 %sub419 to i8*
  %derefference_valueB421 = load i8, i8* %iintToPtrD420, align 1
  %icastL422 = sext i8 %derefference_valueB421 to i32
  store i32 %icastL422, i32* %ch, align 4
  br label %loop_top_block397

cond_end_block408:                                ; preds = %cond_jump_end402
  %exp_val423 = load i32, i32* %exp_val, align 4
  %s424 = load i32, i32* %s, align 4
  %mul425 = mul i32 %exp_val423, %s424
  store i32 %mul425, i32* %exp_val, align 4
  %array_castG = bitcast [2 x i32]* %bn to i32*
  %gepLY = getelementptr i32, i32* %array_castG, i32 1
  %elementYYY = load i32, i32* %gepLY, align 4
  %icastKO = uitofp i32 %elementYYY to double
  %fmul = fmul double %icastKO, 0x41F0000000000000
  %array_castG426 = bitcast [2 x i32]* %bn to i32*
  %gepLY427 = getelementptr i32, i32* %array_castG426, i32 0
  %elementYYY428 = load i32, i32* %gepLY427, align 4
  %icastKO429 = uitofp i32 %elementYYY428 to double
  %fadd = fadd double %fmul, %icastKO429
  store double %fadd, double* %d, align 8
  %d430 = load double, double* %d, align 8
  %exp_val431 = load i32, i32* %exp_val, align 4
  %frac_bits432 = load i32, i32* %frac_bits, align 4
  %sub433 = sub i32 %exp_val431, %frac_bits432
  %fun_result = call double @ldexp(double %d430, i32 %sub433)
  store double %fun_result, double* %d, align 8
  %ch434 = load i32, i32* %ch, align 4
  store i32 1734, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.56, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %toup

toup:                                             ; preds = %cond_end_block408
  %inline_result_variable435 = alloca i32, align 4
  %c436 = alloca i32, align 4
  store i32 %ch434, i32* %c436, align 4
  %c438 = load i32, i32* %c436, align 4
  %gteq_signed439 = icmp sge i32 %c438, 97
  store i1 %gteq_signed439, i1* %andand437, align 1
  br i1 %gteq_signed439, label %cond_jump_then440, label %cond_jump_end441

toup_end:                                         ; preds = %cond_end448, %cond_else_block447, %cond_jump_then446
  %inline_result_variable453 = load i32, i32* %inline_result_variable435, align 4
  store i32 %inline_result_variable453, i32* %t, align 4
  %t454 = load i32, i32* %t, align 4
  %eq455 = icmp eq i32 %t454, 70
  br i1 %eq455, label %cond_jump_then456, label %cond_jump_elif0457

cond_jump_then440:                                ; preds = %toup
  %c442 = load i32, i32* %c436, align 4
  %leeq443 = icmp sle i32 %c442, 122
  %andand444 = and i1 %gteq_signed439, %leeq443
  store i1 %andand444, i1* %andand437, align 1
  br label %cond_jump_end441

cond_jump_end441:                                 ; preds = %cond_jump_then440, %toup
  %andand_result_value445 = load i1, i1* %andand437, align 1
  br i1 %andand_result_value445, label %cond_jump_then446, label %cond_else_block447

cond_jump_then446:                                ; preds = %cond_jump_end441
  %c449 = load i32, i32* %c436, align 4
  %sub450 = sub i32 %c449, 97
  %add451 = add i32 %sub450, 65
  store i32 %add451, i32* %inline_result_variable435, align 4
  br label %toup_end

cond_else_block447:                               ; preds = %cond_jump_end441
  %c452 = load i32, i32* %c436, align 4
  store i32 %c452, i32* %inline_result_variable435, align 4
  br label %toup_end

cond_end448:                                      ; No predecessors!
  br label %toup_end

cond_jump_then456:                                ; preds = %toup_end
  %p461 = load i8*, i8** %p, align 8
  %ptrToIntC462 = ptrtoint i8* %p461 to i64
  %add463 = add i64 %ptrToIntC462, 1
  %intToPtrB464 = inttoptr i64 %add463 to i8*
  store i8* %intToPtrB464, i8** %p, align 8
  %p465 = load i8*, i8** %p, align 8
  %ptrToIntI466 = ptrtoint i8* %p465 to i64
  %sub467 = sub i64 %ptrToIntI466, 1
  %iintToPtrD468 = inttoptr i64 %sub467 to i8*
  %derefference_valueB469 = load i8, i8* %iintToPtrD468, align 1
  %icastL470 = sext i8 %derefference_valueB469 to i32
  store i32 %icastL470, i32* %ch, align 4
  store i32 185, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  %d471 = load double, double* %d, align 8
  %icastKO472 = fptrunc double %d471 to float
  store float %icastKO472, float* bitcast (%CValue* @tokc to float*), align 4
  br label %cond_end460

cond_jump_elif0457:                               ; preds = %toup_end
  %t473 = load i32, i32* %t, align 4
  %eq474 = icmp eq i32 %t473, 76
  br i1 %eq474, label %cond_jump_elif_then0458, label %cond_else_block459

cond_jump_elif_then0458:                          ; preds = %cond_jump_elif0457
  %p475 = load i8*, i8** %p, align 8
  %ptrToIntC476 = ptrtoint i8* %p475 to i64
  %add477 = add i64 %ptrToIntC476, 1
  %intToPtrB478 = inttoptr i64 %add477 to i8*
  store i8* %intToPtrB478, i8** %p, align 8
  %p479 = load i8*, i8** %p, align 8
  %ptrToIntI480 = ptrtoint i8* %p479 to i64
  %sub481 = sub i64 %ptrToIntI480, 1
  %iintToPtrD482 = inttoptr i64 %sub481 to i8*
  %derefference_valueB483 = load i8, i8* %iintToPtrD482, align 1
  %icastL484 = sext i8 %derefference_valueB483 to i32
  store i32 %icastL484, i32* %ch, align 4
  store i32 193, i32* @tok, align 4
  %tokc485 = load %CValue, %CValue* @tokc, align 16
  %d486 = load double, double* %d, align 8
  %icastKLL = fpext double %d486 to fp128
  store fp128 %icastKLL, fp128* getelementptr inbounds (%CValue, %CValue* @tokc, i32 0, i32 0), align 16
  br label %cond_end460

cond_else_block459:                               ; preds = %cond_jump_elif0457
  store i32 192, i32* @tok, align 4
  %tokc487 = load %CValue, %CValue* @tokc, align 16
  %d488 = load double, double* %d, align 8
  store double %d488, double* bitcast (%CValue* @tokc to double*), align 8
  br label %cond_end460

cond_end460:                                      ; preds = %cond_else_block459, %cond_jump_elif_then0458, %cond_jump_then456
  br label %cond_end210

cond_jump_then491:                                ; preds = %cond_else_block209
  %q493 = load i8*, i8** %q, align 8
  %castAC494 = ptrtoint i8* %q493 to i32
  %gteq_signed495 = icmp sge i32 %castAC494, ptrtoint (i8* inttoptr (i64 add (i64 ptrtoint ([1025 x i8]* @token_buf to i64), i64 1024) to i8*) to i32)
  br i1 %gteq_signed495, label %cond_jump_then496, label %cond_end497

cond_end492:                                      ; preds = %cond_end_block529, %cond_else_block209
  %ch556 = load i32, i32* %ch, align 4
  %eq557 = icmp eq i32 %ch556, 101
  store i1 %eq557, i1* %oror555, align 1
  br i1 %eq557, label %cond_jump_end559, label %cond_jump_then558

cond_jump_then496:                                ; preds = %cond_jump_then491
  br label %parse_number.num_too_long
  br label %cond_end497

cond_end497:                                      ; preds = %cond_jump_then496, %cond_jump_then491
  %q498 = load i8*, i8** %q, align 8
  %ptrToIntC499 = ptrtoint i8* %q498 to i64
  %add500 = add i64 %ptrToIntC499, 1
  %intToPtrB501 = inttoptr i64 %add500 to i8*
  store i8* %intToPtrB501, i8** %q, align 8
  %q502 = load i8*, i8** %q, align 8
  %ptrToIntI503 = ptrtoint i8* %q502 to i64
  %sub504 = sub i64 %ptrToIntI503, 1
  %iintToPtrD505 = inttoptr i64 %sub504 to i8*
  %ch506 = load i32, i32* %ch, align 4
  %icastJ507 = trunc i32 %ch506 to i8
  store i8 %icastJ507, i8* %iintToPtrD505, align 1
  %p508 = load i8*, i8** %p, align 8
  %ptrToIntC509 = ptrtoint i8* %p508 to i64
  %add510 = add i64 %ptrToIntC509, 1
  %intToPtrB511 = inttoptr i64 %add510 to i8*
  store i8* %intToPtrB511, i8** %p, align 8
  %p512 = load i8*, i8** %p, align 8
  %ptrToIntI513 = ptrtoint i8* %p512 to i64
  %sub514 = sub i64 %ptrToIntI513, 1
  %iintToPtrD515 = inttoptr i64 %sub514 to i8*
  %derefference_valueB516 = load i8, i8* %iintToPtrD515, align 1
  %icastL517 = sext i8 %derefference_valueB516 to i32
  store i32 %icastL517, i32* %ch, align 4
  br label %parse_number.float_frac_parse

loop_top_block518:                                ; preds = %cond_end534, %parse_number.float_frac_parse
  %ch520 = load i32, i32* %ch, align 4
  %gteq_signed521 = icmp sge i32 %ch520, 48
  store i1 %gteq_signed521, i1* %andand519, align 1
  br i1 %gteq_signed521, label %cond_jump_then522, label %cond_jump_end523

cond_jump_then522:                                ; preds = %loop_top_block518
  %ch524 = load i32, i32* %ch, align 4
  %leeq525 = icmp sle i32 %ch524, 57
  %andand526 = and i1 %gteq_signed521, %leeq525
  store i1 %andand526, i1* %andand519, align 1
  br label %cond_jump_end523

cond_jump_end523:                                 ; preds = %cond_jump_then522, %loop_top_block518
  %andand_result_value527 = load i1, i1* %andand519, align 1
  br i1 %andand_result_value527, label %cond_then_block528, label %cond_end_block529

cond_then_block528:                               ; preds = %cond_jump_end523
  %q530 = load i8*, i8** %q, align 8
  %castAC531 = ptrtoint i8* %q530 to i32
  %gteq_signed532 = icmp sge i32 %castAC531, ptrtoint (i8* inttoptr (i64 add (i64 ptrtoint ([1025 x i8]* @token_buf to i64), i64 1024) to i8*) to i32)
  br i1 %gteq_signed532, label %cond_jump_then533, label %cond_end534

cond_end_block529:                                ; preds = %cond_jump_end523
  br label %cond_end492

cond_jump_then533:                                ; preds = %cond_then_block528
  br label %parse_number.num_too_long
  br label %cond_end534

cond_end534:                                      ; preds = %cond_jump_then533, %cond_then_block528
  %q535 = load i8*, i8** %q, align 8
  %ptrToIntC536 = ptrtoint i8* %q535 to i64
  %add537 = add i64 %ptrToIntC536, 1
  %intToPtrB538 = inttoptr i64 %add537 to i8*
  store i8* %intToPtrB538, i8** %q, align 8
  %q539 = load i8*, i8** %q, align 8
  %ptrToIntI540 = ptrtoint i8* %q539 to i64
  %sub541 = sub i64 %ptrToIntI540, 1
  %iintToPtrD542 = inttoptr i64 %sub541 to i8*
  %ch543 = load i32, i32* %ch, align 4
  %icastJ544 = trunc i32 %ch543 to i8
  store i8 %icastJ544, i8* %iintToPtrD542, align 1
  %p545 = load i8*, i8** %p, align 8
  %ptrToIntC546 = ptrtoint i8* %p545 to i64
  %add547 = add i64 %ptrToIntC546, 1
  %intToPtrB548 = inttoptr i64 %add547 to i8*
  store i8* %intToPtrB548, i8** %p, align 8
  %p549 = load i8*, i8** %p, align 8
  %ptrToIntI550 = ptrtoint i8* %p549 to i64
  %sub551 = sub i64 %ptrToIntI550, 1
  %iintToPtrD552 = inttoptr i64 %sub551 to i8*
  %derefference_valueB553 = load i8, i8* %iintToPtrD552, align 1
  %icastL554 = sext i8 %derefference_valueB553 to i32
  store i32 %icastL554, i32* %ch, align 4
  br label %loop_top_block518

cond_jump_then558:                                ; preds = %cond_end492
  %ch560 = load i32, i32* %ch, align 4
  %eq561 = icmp eq i32 %ch560, 69
  %oror562 = or i1 %eq557, %eq561
  store i1 %oror562, i1* %oror555, align 1
  br label %cond_jump_end559

cond_jump_end559:                                 ; preds = %cond_jump_then558, %cond_end492
  %oror_result_value563 = load i1, i1* %oror555, align 1
  br i1 %oror_result_value563, label %cond_jump_then564, label %cond_end565

cond_jump_then564:                                ; preds = %cond_jump_end559
  %q566 = load i8*, i8** %q, align 8
  %castAC567 = ptrtoint i8* %q566 to i32
  %gteq_signed568 = icmp sge i32 %castAC567, ptrtoint (i8* inttoptr (i64 add (i64 ptrtoint ([1025 x i8]* @token_buf to i64), i64 1024) to i8*) to i32)
  br i1 %gteq_signed568, label %cond_jump_then569, label %cond_end570

cond_end565:                                      ; preds = %cond_end_block649, %cond_jump_end559
  %q675 = load i8*, i8** %q, align 8
  store i8 0, i8* %q675, align 1
  %ch676 = load i32, i32* %ch, align 4
  store i32 1785, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.57, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %toup677

cond_jump_then569:                                ; preds = %cond_jump_then564
  br label %parse_number.num_too_long
  br label %cond_end570

cond_end570:                                      ; preds = %cond_jump_then569, %cond_jump_then564
  %q571 = load i8*, i8** %q, align 8
  %ptrToIntC572 = ptrtoint i8* %q571 to i64
  %add573 = add i64 %ptrToIntC572, 1
  %intToPtrB574 = inttoptr i64 %add573 to i8*
  store i8* %intToPtrB574, i8** %q, align 8
  %q575 = load i8*, i8** %q, align 8
  %ptrToIntI576 = ptrtoint i8* %q575 to i64
  %sub577 = sub i64 %ptrToIntI576, 1
  %iintToPtrD578 = inttoptr i64 %sub577 to i8*
  %ch579 = load i32, i32* %ch, align 4
  %icastJ580 = trunc i32 %ch579 to i8
  store i8 %icastJ580, i8* %iintToPtrD578, align 1
  %p581 = load i8*, i8** %p, align 8
  %ptrToIntC582 = ptrtoint i8* %p581 to i64
  %add583 = add i64 %ptrToIntC582, 1
  %intToPtrB584 = inttoptr i64 %add583 to i8*
  store i8* %intToPtrB584, i8** %p, align 8
  %p585 = load i8*, i8** %p, align 8
  %ptrToIntI586 = ptrtoint i8* %p585 to i64
  %sub587 = sub i64 %ptrToIntI586, 1
  %iintToPtrD588 = inttoptr i64 %sub587 to i8*
  %derefference_valueB589 = load i8, i8* %iintToPtrD588, align 1
  %icastL590 = sext i8 %derefference_valueB589 to i32
  store i32 %icastL590, i32* %ch, align 4
  %ch592 = load i32, i32* %ch, align 4
  %eq593 = icmp eq i32 %ch592, 45
  store i1 %eq593, i1* %oror591, align 1
  br i1 %eq593, label %cond_jump_end595, label %cond_jump_then594

cond_jump_then594:                                ; preds = %cond_end570
  %ch596 = load i32, i32* %ch, align 4
  %eq597 = icmp eq i32 %ch596, 43
  %oror598 = or i1 %eq593, %eq597
  store i1 %oror598, i1* %oror591, align 1
  br label %cond_jump_end595

cond_jump_end595:                                 ; preds = %cond_jump_then594, %cond_end570
  %oror_result_value599 = load i1, i1* %oror591, align 1
  br i1 %oror_result_value599, label %cond_jump_then600, label %cond_end601

cond_jump_then600:                                ; preds = %cond_jump_end595
  %q602 = load i8*, i8** %q, align 8
  %castAC603 = ptrtoint i8* %q602 to i32
  %gteq_signed604 = icmp sge i32 %castAC603, ptrtoint (i8* inttoptr (i64 add (i64 ptrtoint ([1025 x i8]* @token_buf to i64), i64 1024) to i8*) to i32)
  br i1 %gteq_signed604, label %cond_jump_then605, label %cond_end606

cond_end601:                                      ; preds = %cond_end606, %cond_jump_end595
  %ch628 = load i32, i32* %ch, align 4
  %le629 = icmp slt i32 %ch628, 48
  store i1 %le629, i1* %oror627, align 1
  br i1 %le629, label %cond_jump_end631, label %cond_jump_then630

cond_jump_then605:                                ; preds = %cond_jump_then600
  br label %parse_number.num_too_long
  br label %cond_end606

cond_end606:                                      ; preds = %cond_jump_then605, %cond_jump_then600
  %q607 = load i8*, i8** %q, align 8
  %ptrToIntC608 = ptrtoint i8* %q607 to i64
  %add609 = add i64 %ptrToIntC608, 1
  %intToPtrB610 = inttoptr i64 %add609 to i8*
  store i8* %intToPtrB610, i8** %q, align 8
  %q611 = load i8*, i8** %q, align 8
  %ptrToIntI612 = ptrtoint i8* %q611 to i64
  %sub613 = sub i64 %ptrToIntI612, 1
  %iintToPtrD614 = inttoptr i64 %sub613 to i8*
  %ch615 = load i32, i32* %ch, align 4
  %icastJ616 = trunc i32 %ch615 to i8
  store i8 %icastJ616, i8* %iintToPtrD614, align 1
  %p617 = load i8*, i8** %p, align 8
  %ptrToIntC618 = ptrtoint i8* %p617 to i64
  %add619 = add i64 %ptrToIntC618, 1
  %intToPtrB620 = inttoptr i64 %add619 to i8*
  store i8* %intToPtrB620, i8** %p, align 8
  %p621 = load i8*, i8** %p, align 8
  %ptrToIntI622 = ptrtoint i8* %p621 to i64
  %sub623 = sub i64 %ptrToIntI622, 1
  %iintToPtrD624 = inttoptr i64 %sub623 to i8*
  %derefference_valueB625 = load i8, i8* %iintToPtrD624, align 1
  %icastL626 = sext i8 %derefference_valueB625 to i32
  store i32 %icastL626, i32* %ch, align 4
  br label %cond_end601

cond_jump_then630:                                ; preds = %cond_end601
  %ch632 = load i32, i32* %ch, align 4
  %gt633 = icmp sgt i32 %ch632, 57
  %oror634 = or i1 %le629, %gt633
  store i1 %oror634, i1* %oror627, align 1
  br label %cond_jump_end631

cond_jump_end631:                                 ; preds = %cond_jump_then630, %cond_end601
  %oror_result_value635 = load i1, i1* %oror627, align 1
  br i1 %oror_result_value635, label %cond_jump_then636, label %cond_end637

cond_jump_then636:                                ; preds = %cond_jump_end631
  call void @expect(i8* bitcast ([16 x i8]* @71 to i8*))
  br label %cond_end637

cond_end637:                                      ; preds = %cond_jump_then636, %cond_jump_end631
  br label %loop_top_block638

loop_top_block638:                                ; preds = %cond_end654, %cond_end637
  %ch640 = load i32, i32* %ch, align 4
  %gteq_signed641 = icmp sge i32 %ch640, 48
  store i1 %gteq_signed641, i1* %andand639, align 1
  br i1 %gteq_signed641, label %cond_jump_then642, label %cond_jump_end643

cond_jump_then642:                                ; preds = %loop_top_block638
  %ch644 = load i32, i32* %ch, align 4
  %leeq645 = icmp sle i32 %ch644, 57
  %andand646 = and i1 %gteq_signed641, %leeq645
  store i1 %andand646, i1* %andand639, align 1
  br label %cond_jump_end643

cond_jump_end643:                                 ; preds = %cond_jump_then642, %loop_top_block638
  %andand_result_value647 = load i1, i1* %andand639, align 1
  br i1 %andand_result_value647, label %cond_then_block648, label %cond_end_block649

cond_then_block648:                               ; preds = %cond_jump_end643
  %q650 = load i8*, i8** %q, align 8
  %castAC651 = ptrtoint i8* %q650 to i32
  %gteq_signed652 = icmp sge i32 %castAC651, ptrtoint (i8* inttoptr (i64 add (i64 ptrtoint ([1025 x i8]* @token_buf to i64), i64 1024) to i8*) to i32)
  br i1 %gteq_signed652, label %cond_jump_then653, label %cond_end654

cond_end_block649:                                ; preds = %cond_jump_end643
  br label %cond_end565

cond_jump_then653:                                ; preds = %cond_then_block648
  br label %parse_number.num_too_long
  br label %cond_end654

cond_end654:                                      ; preds = %cond_jump_then653, %cond_then_block648
  %q655 = load i8*, i8** %q, align 8
  %ptrToIntC656 = ptrtoint i8* %q655 to i64
  %add657 = add i64 %ptrToIntC656, 1
  %intToPtrB658 = inttoptr i64 %add657 to i8*
  store i8* %intToPtrB658, i8** %q, align 8
  %q659 = load i8*, i8** %q, align 8
  %ptrToIntI660 = ptrtoint i8* %q659 to i64
  %sub661 = sub i64 %ptrToIntI660, 1
  %iintToPtrD662 = inttoptr i64 %sub661 to i8*
  %ch663 = load i32, i32* %ch, align 4
  %icastJ664 = trunc i32 %ch663 to i8
  store i8 %icastJ664, i8* %iintToPtrD662, align 1
  %p665 = load i8*, i8** %p, align 8
  %ptrToIntC666 = ptrtoint i8* %p665 to i64
  %add667 = add i64 %ptrToIntC666, 1
  %intToPtrB668 = inttoptr i64 %add667 to i8*
  store i8* %intToPtrB668, i8** %p, align 8
  %p669 = load i8*, i8** %p, align 8
  %ptrToIntI670 = ptrtoint i8* %p669 to i64
  %sub671 = sub i64 %ptrToIntI670, 1
  %iintToPtrD672 = inttoptr i64 %sub671 to i8*
  %derefference_valueB673 = load i8, i8* %iintToPtrD672, align 1
  %icastL674 = sext i8 %derefference_valueB673 to i32
  store i32 %icastL674, i32* %ch, align 4
  br label %loop_top_block638

toup677:                                          ; preds = %cond_end565
  %inline_result_variable678 = alloca i32, align 4
  %c679 = alloca i32, align 4
  store i32 %ch676, i32* %c679, align 4
  %c682 = load i32, i32* %c679, align 4
  %gteq_signed683 = icmp sge i32 %c682, 97
  store i1 %gteq_signed683, i1* %andand681, align 1
  br i1 %gteq_signed683, label %cond_jump_then684, label %cond_jump_end685

toup_end680:                                      ; preds = %cond_end692, %cond_else_block691, %cond_jump_then690
  %inline_result_variable697 = load i32, i32* %inline_result_variable678, align 4
  store i32 %inline_result_variable697, i32* %t, align 4
  %fun_result698 = call i32* @__errno_location()
  %derefference_valueB699 = load i32, i32* %fun_result698, align 4
  %fun_result700 = call i32* @__errno_location()
  store i32 0, i32* %fun_result700, align 4
  %t701 = load i32, i32* %t, align 4
  %eq702 = icmp eq i32 %t701, 70
  br i1 %eq702, label %cond_jump_then703, label %cond_jump_elif0704

cond_jump_then684:                                ; preds = %toup677
  %c686 = load i32, i32* %c679, align 4
  %leeq687 = icmp sle i32 %c686, 122
  %andand688 = and i1 %gteq_signed683, %leeq687
  store i1 %andand688, i1* %andand681, align 1
  br label %cond_jump_end685

cond_jump_end685:                                 ; preds = %cond_jump_then684, %toup677
  %andand_result_value689 = load i1, i1* %andand681, align 1
  br i1 %andand_result_value689, label %cond_jump_then690, label %cond_else_block691

cond_jump_then690:                                ; preds = %cond_jump_end685
  %c693 = load i32, i32* %c679, align 4
  %sub694 = sub i32 %c693, 97
  %add695 = add i32 %sub694, 65
  store i32 %add695, i32* %inline_result_variable678, align 4
  br label %toup_end680

cond_else_block691:                               ; preds = %cond_jump_end685
  %c696 = load i32, i32* %c679, align 4
  store i32 %c696, i32* %inline_result_variable678, align 4
  br label %toup_end680

cond_end692:                                      ; No predecessors!
  br label %toup_end680

cond_jump_then703:                                ; preds = %toup_end680
  %p708 = load i8*, i8** %p, align 8
  %ptrToIntC709 = ptrtoint i8* %p708 to i64
  %add710 = add i64 %ptrToIntC709, 1
  %intToPtrB711 = inttoptr i64 %add710 to i8*
  store i8* %intToPtrB711, i8** %p, align 8
  %p712 = load i8*, i8** %p, align 8
  %ptrToIntI713 = ptrtoint i8* %p712 to i64
  %sub714 = sub i64 %ptrToIntI713, 1
  %iintToPtrD715 = inttoptr i64 %sub714 to i8*
  %derefference_valueB716 = load i8, i8* %iintToPtrD715, align 1
  %icastL717 = sext i8 %derefference_valueB716 to i32
  store i32 %icastL717, i32* %ch, align 4
  store i32 185, i32* @tok, align 4
  %tokc718 = load %CValue, %CValue* @tokc, align 16
  %fun_result719 = call float @strtof(i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @token_buf, i32 0, i32 0), i8** null)
  store float %fun_result719, float* bitcast (%CValue* @tokc to float*), align 4
  br label %cond_end707

cond_jump_elif0704:                               ; preds = %toup_end680
  %t720 = load i32, i32* %t, align 4
  %eq721 = icmp eq i32 %t720, 76
  br i1 %eq721, label %cond_jump_elif_then0705, label %cond_else_block706

cond_jump_elif_then0705:                          ; preds = %cond_jump_elif0704
  %p722 = load i8*, i8** %p, align 8
  %ptrToIntC723 = ptrtoint i8* %p722 to i64
  %add724 = add i64 %ptrToIntC723, 1
  %intToPtrB725 = inttoptr i64 %add724 to i8*
  store i8* %intToPtrB725, i8** %p, align 8
  %p726 = load i8*, i8** %p, align 8
  %ptrToIntI727 = ptrtoint i8* %p726 to i64
  %sub728 = sub i64 %ptrToIntI727, 1
  %iintToPtrD729 = inttoptr i64 %sub728 to i8*
  %derefference_valueB730 = load i8, i8* %iintToPtrD729, align 1
  %icastL731 = sext i8 %derefference_valueB730 to i32
  store i32 %icastL731, i32* %ch, align 4
  store i32 193, i32* @tok, align 4
  %tokc732 = load %CValue, %CValue* @tokc, align 16
  %fun_result733 = call fp128 @strtold(i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @token_buf, i32 0, i32 0), i8** null)
  store fp128 %fun_result733, fp128* getelementptr inbounds (%CValue, %CValue* @tokc, i32 0, i32 0), align 16
  br label %cond_end707

cond_else_block706:                               ; preds = %cond_jump_elif0704
  store i32 192, i32* @tok, align 4
  %tokc734 = load %CValue, %CValue* @tokc, align 16
  %fun_result735 = call double @strtod(i8* getelementptr inbounds ([1025 x i8], [1025 x i8]* @token_buf, i32 0, i32 0), i8** null)
  store double %fun_result735, double* bitcast (%CValue* @tokc to double*), align 8
  br label %cond_end707

cond_end707:                                      ; preds = %cond_else_block706, %cond_jump_elif_then0705, %cond_jump_then703
  br label %cond_end210

cond_jump_then740:                                ; preds = %cond_else_block205
  %q742 = load i8*, i8** %q, align 8
  %derefference_valueB743 = load i8, i8* %q742, align 1
  %icastL744 = sext i8 %derefference_valueB743 to i32
  %eq745 = icmp eq i32 %icastL744, 48
  %andand746 = and i1 %eq739, %eq745
  store i1 %andand746, i1* %andand737, align 1
  br label %cond_jump_end741

cond_jump_end741:                                 ; preds = %cond_jump_then740, %cond_else_block205
  %andand_result_value747 = load i1, i1* %andand737, align 1
  br i1 %andand_result_value747, label %cond_jump_then748, label %cond_end749

cond_jump_then748:                                ; preds = %cond_jump_end741
  store i32 8, i32* %b, align 4
  %q750 = load i8*, i8** %q, align 8
  %ptrToIntC751 = ptrtoint i8* %q750 to i64
  %add752 = add i64 %ptrToIntC751, 1
  %intToPtrB753 = inttoptr i64 %add752 to i8*
  store i8* %intToPtrB753, i8** %q, align 8
  %q754 = load i8*, i8** %q, align 8
  %ptrToIntI755 = ptrtoint i8* %q754 to i64
  %sub756 = sub i64 %ptrToIntI755, 1
  %iintToPtrD757 = inttoptr i64 %sub756 to i8*
  br label %cond_end749

cond_end749:                                      ; preds = %cond_jump_then748, %cond_jump_end741
  store i64 0, i64* %n, align 4
  br label %loop_top_block758

loop_top_block758:                                ; preds = %cond_end809, %cond_end749
  br i1 true, label %cond_then_block759, label %cond_end_block760

cond_then_block759:                               ; preds = %loop_top_block758
  %q761 = load i8*, i8** %q, align 8
  %ptrToIntC762 = ptrtoint i8* %q761 to i64
  %add763 = add i64 %ptrToIntC762, 1
  %intToPtrB764 = inttoptr i64 %add763 to i8*
  store i8* %intToPtrB764, i8** %q, align 8
  %q765 = load i8*, i8** %q, align 8
  %ptrToIntI766 = ptrtoint i8* %q765 to i64
  %sub767 = sub i64 %ptrToIntI766, 1
  %iintToPtrD768 = inttoptr i64 %sub767 to i8*
  %derefference_valueB769 = load i8, i8* %iintToPtrD768, align 1
  %icastL770 = sext i8 %derefference_valueB769 to i32
  store i32 %icastL770, i32* %t, align 4
  %t771 = load i32, i32* %t, align 4
  %eq772 = icmp eq i32 %t771, 0
  br i1 %eq772, label %cond_jump_then773, label %cond_jump_elif0774

cond_end_block760:                                ; preds = %cond_jump_then773, %loop_top_block758
  %n810 = load i64, i64* %n, align 4
  %andtmp = and i64 %n810, -4294967296
  %not_eq811 = icmp ne i64 %andtmp, 0
  br i1 %not_eq811, label %cond_jump_then812, label %cond_jump_elif0813

cond_jump_then773:                                ; preds = %cond_then_block759
  br label %cond_end_block760

cond_jump_elif0774:                               ; preds = %cond_then_block759
  %t781 = load i32, i32* %t, align 4
  %gteq_signed782 = icmp sge i32 %t781, 97
  br i1 %gteq_signed782, label %cond_jump_elif_then0775, label %cond_jump_elif1776

cond_jump_elif_then0775:                          ; preds = %cond_jump_elif0774
  %t783 = load i32, i32* %t, align 4
  %sub784 = sub i32 %t783, 97
  %add785 = add i32 %sub784, 10
  store i32 %add785, i32* %t, align 4
  br label %cond_end779

cond_jump_elif1776:                               ; preds = %cond_jump_elif0774
  %t786 = load i32, i32* %t, align 4
  %gteq_signed787 = icmp sge i32 %t786, 65
  br i1 %gteq_signed787, label %cond_jump_elif_then1777, label %cond_else_block778

cond_jump_elif_then1777:                          ; preds = %cond_jump_elif1776
  %t788 = load i32, i32* %t, align 4
  %sub789 = sub i32 %t788, 65
  %add790 = add i32 %sub789, 10
  store i32 %add790, i32* %t, align 4
  br label %cond_end779

cond_else_block778:                               ; preds = %cond_jump_elif1776
  %t791 = load i32, i32* %t, align 4
  %sub792 = sub i32 %t791, 48
  store i32 %sub792, i32* %t, align 4
  %t793 = load i32, i32* %t, align 4
  %b794 = load i32, i32* %b, align 4
  %gteq_signed795 = icmp sge i32 %t793, %b794
  br i1 %gteq_signed795, label %cond_jump_then796, label %cond_end797

cond_end779:                                      ; preds = %cond_end797, %cond_jump_elif_then1777, %cond_jump_elif_then0775, %after_break780
  %n798 = load i64, i64* %n, align 4
  store i64 %n798, i64* %n1, align 4
  %n799 = load i64, i64* %n, align 4
  %b800 = load i32, i32* %b, align 4
  %icastD = sext i32 %b800 to i64
  %mul801 = mul i64 %n799, %icastD
  %t802 = load i32, i32* %t, align 4
  %icastD803 = sext i32 %t802 to i64
  %add804 = add i64 %mul801, %icastD803
  store i64 %add804, i64* %n, align 4
  %n805 = load i64, i64* %n, align 4
  %n1806 = load i64, i64* %n1, align 4
  %le807 = icmp ult i64 %n805, %n1806
  br i1 %le807, label %cond_jump_then808, label %cond_end809

after_break780:                                   ; No predecessors!
  br label %cond_end779

cond_jump_then796:                                ; preds = %cond_else_block778
  call void (i8*, ...) @error(i8* bitcast ([14 x i8]* @72 to i8*))
  br label %cond_end797

cond_end797:                                      ; preds = %cond_jump_then796, %cond_else_block778
  br label %cond_end779

cond_jump_then808:                                ; preds = %cond_end779
  call void (i8*, ...) @error(i8* bitcast ([26 x i8]* @73 to i8*))
  br label %cond_end809

cond_end809:                                      ; preds = %cond_jump_then808, %cond_end779
  br label %loop_top_block758

cond_jump_then812:                                ; preds = %cond_end_block760
  %n817 = load i64, i64* %n, align 4
  %rshifttmp = lshr i64 %n817, 63
  %not_eq818 = icmp ne i64 %rshifttmp, 0
  br i1 %not_eq818, label %cond_jump_then819, label %cond_else_block820

cond_jump_elif0813:                               ; preds = %cond_end_block760
  %n822 = load i64, i64* %n, align 4
  %gt823 = icmp ugt i64 %n822, 2147483647
  br i1 %gt823, label %cond_jump_elif_then0814, label %cond_else_block815

cond_jump_elif_then0814:                          ; preds = %cond_jump_elif0813
  store i32 200, i32* @tok, align 4
  br label %cond_end816

cond_else_block815:                               ; preds = %cond_jump_elif0813
  store i32 179, i32* @tok, align 4
  br label %cond_end816

cond_end816:                                      ; preds = %cond_else_block815, %cond_jump_elif_then0814, %cond_end821
  store i32 0, i32* %lcount, align 4
  store i32 0, i32* %ucount, align 4
  br label %loop_top_block824

cond_jump_then819:                                ; preds = %cond_jump_then812
  store i32 202, i32* @tok, align 4
  br label %cond_end821

cond_else_block820:                               ; preds = %cond_jump_then812
  store i32 201, i32* @tok, align 4
  br label %cond_end821

cond_end821:                                      ; preds = %cond_else_block820, %cond_jump_then819
  br label %cond_end816

loop_continue_top_block:                          ; preds = %cond_end855
  br label %loop_top_block824

loop_top_block824:                                ; preds = %loop_continue_top_block, %cond_end816
  br i1 true, label %cond_then_block825, label %cond_end_block826

cond_then_block825:                               ; preds = %loop_top_block824
  %ch827 = load i32, i32* %ch, align 4
  store i32 1848, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.58, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %toup828

cond_end_block826:                                ; preds = %cond_else_block854, %loop_top_block824
  %tok915 = load i32, i32* @tok, align 4
  %eq916 = icmp eq i32 %tok915, 179
  store i1 %eq916, i1* %oror914, align 1
  br i1 %eq916, label %cond_jump_end918, label %cond_jump_then917

toup828:                                          ; preds = %cond_then_block825
  %inline_result_variable829 = alloca i32, align 4
  %c830 = alloca i32, align 4
  store i32 %ch827, i32* %c830, align 4
  %c833 = load i32, i32* %c830, align 4
  %gteq_signed834 = icmp sge i32 %c833, 97
  store i1 %gteq_signed834, i1* %andand832, align 1
  br i1 %gteq_signed834, label %cond_jump_then835, label %cond_jump_end836

toup_end831:                                      ; preds = %cond_end843, %cond_else_block842, %cond_jump_then841
  %inline_result_variable848 = load i32, i32* %inline_result_variable829, align 4
  store i32 %inline_result_variable848, i32* %t, align 4
  %t849 = load i32, i32* %t, align 4
  %eq850 = icmp eq i32 %t849, 76
  br i1 %eq850, label %cond_jump_then851, label %cond_jump_elif0852

cond_jump_then835:                                ; preds = %toup828
  %c837 = load i32, i32* %c830, align 4
  %leeq838 = icmp sle i32 %c837, 122
  %andand839 = and i1 %gteq_signed834, %leeq838
  store i1 %andand839, i1* %andand832, align 1
  br label %cond_jump_end836

cond_jump_end836:                                 ; preds = %cond_jump_then835, %toup828
  %andand_result_value840 = load i1, i1* %andand832, align 1
  br i1 %andand_result_value840, label %cond_jump_then841, label %cond_else_block842

cond_jump_then841:                                ; preds = %cond_jump_end836
  %c844 = load i32, i32* %c830, align 4
  %sub845 = sub i32 %c844, 97
  %add846 = add i32 %sub845, 65
  store i32 %add846, i32* %inline_result_variable829, align 4
  br label %toup_end831

cond_else_block842:                               ; preds = %cond_jump_end836
  %c847 = load i32, i32* %c830, align 4
  store i32 %c847, i32* %inline_result_variable829, align 4
  br label %toup_end831

cond_end843:                                      ; No predecessors!
  br label %toup_end831

cond_jump_then851:                                ; preds = %toup_end831
  %lcount856 = load i32, i32* %lcount, align 4
  %gteq_signed857 = icmp sge i32 %lcount856, 2
  br i1 %gteq_signed857, label %cond_jump_then858, label %cond_end859

cond_jump_elif0852:                               ; preds = %toup_end831
  %t885 = load i32, i32* %t, align 4
  %eq886 = icmp eq i32 %t885, 85
  br i1 %eq886, label %cond_jump_elif_then0853, label %cond_else_block854

cond_jump_elif_then0853:                          ; preds = %cond_jump_elif0852
  %ucount887 = load i32, i32* %ucount, align 4
  %gteq_signed888 = icmp sge i32 %ucount887, 1
  br i1 %gteq_signed888, label %cond_jump_then889, label %cond_end890

cond_else_block854:                               ; preds = %cond_jump_elif0852
  br label %cond_end_block826

cond_end855:                                      ; preds = %after_break913, %cond_end900, %cond_end867
  br label %loop_continue_top_block

cond_jump_then858:                                ; preds = %cond_jump_then851
  call void (i8*, ...) @error(i8* bitcast ([31 x i8]* @74 to i8*))
  br label %cond_end859

cond_end859:                                      ; preds = %cond_jump_then858, %cond_jump_then851
  %lcount860 = load i32, i32* %lcount, align 4
  %add861 = add i32 %lcount860, 1
  store i32 %add861, i32* %lcount, align 4
  %lcount862 = load i32, i32* %lcount, align 4
  %sub863 = sub i32 %lcount862, 1
  %lcount864 = load i32, i32* %lcount, align 4
  %eq865 = icmp eq i32 %lcount864, 2
  br i1 %eq865, label %cond_jump_then866, label %cond_end867

cond_jump_then866:                                ; preds = %cond_end859
  %tok = load i32, i32* @tok, align 4
  %eq868 = icmp eq i32 %tok, 179
  br i1 %eq868, label %cond_jump_then869, label %cond_jump_elif0870

cond_end867:                                      ; preds = %cond_end872, %cond_end859
  %p875 = load i8*, i8** %p, align 8
  %ptrToIntC876 = ptrtoint i8* %p875 to i64
  %add877 = add i64 %ptrToIntC876, 1
  %intToPtrB878 = inttoptr i64 %add877 to i8*
  store i8* %intToPtrB878, i8** %p, align 8
  %p879 = load i8*, i8** %p, align 8
  %ptrToIntI880 = ptrtoint i8* %p879 to i64
  %sub881 = sub i64 %ptrToIntI880, 1
  %iintToPtrD882 = inttoptr i64 %sub881 to i8*
  %derefference_valueB883 = load i8, i8* %iintToPtrD882, align 1
  %icastL884 = sext i8 %derefference_valueB883 to i32
  store i32 %icastL884, i32* %ch, align 4
  br label %cond_end855

cond_jump_then869:                                ; preds = %cond_jump_then866
  store i32 201, i32* @tok, align 4
  br label %cond_end872

cond_jump_elif0870:                               ; preds = %cond_jump_then866
  %tok873 = load i32, i32* @tok, align 4
  %eq874 = icmp eq i32 %tok873, 200
  br i1 %eq874, label %cond_jump_elif_then0871, label %cond_end872

cond_jump_elif_then0871:                          ; preds = %cond_jump_elif0870
  store i32 202, i32* @tok, align 4
  br label %cond_end872

cond_end872:                                      ; preds = %cond_jump_elif_then0871, %cond_jump_elif0870, %cond_jump_then869
  br label %cond_end867

cond_jump_then889:                                ; preds = %cond_jump_elif_then0853
  call void (i8*, ...) @error(i8* bitcast ([29 x i8]* @75 to i8*))
  br label %cond_end890

cond_end890:                                      ; preds = %cond_jump_then889, %cond_jump_elif_then0853
  %ucount891 = load i32, i32* %ucount, align 4
  %add892 = add i32 %ucount891, 1
  store i32 %add892, i32* %ucount, align 4
  %ucount893 = load i32, i32* %ucount, align 4
  %sub894 = sub i32 %ucount893, 1
  %tok895 = load i32, i32* @tok, align 4
  %eq896 = icmp eq i32 %tok895, 179
  br i1 %eq896, label %cond_jump_then897, label %cond_jump_elif0898

cond_jump_then897:                                ; preds = %cond_end890
  store i32 200, i32* @tok, align 4
  br label %cond_end900

cond_jump_elif0898:                               ; preds = %cond_end890
  %tok901 = load i32, i32* @tok, align 4
  %eq902 = icmp eq i32 %tok901, 201
  br i1 %eq902, label %cond_jump_elif_then0899, label %cond_end900

cond_jump_elif_then0899:                          ; preds = %cond_jump_elif0898
  store i32 202, i32* @tok, align 4
  br label %cond_end900

cond_end900:                                      ; preds = %cond_jump_elif_then0899, %cond_jump_elif0898, %cond_jump_then897
  %p903 = load i8*, i8** %p, align 8
  %ptrToIntC904 = ptrtoint i8* %p903 to i64
  %add905 = add i64 %ptrToIntC904, 1
  %intToPtrB906 = inttoptr i64 %add905 to i8*
  store i8* %intToPtrB906, i8** %p, align 8
  %p907 = load i8*, i8** %p, align 8
  %ptrToIntI908 = ptrtoint i8* %p907 to i64
  %sub909 = sub i64 %ptrToIntI908, 1
  %iintToPtrD910 = inttoptr i64 %sub909 to i8*
  %derefference_valueB911 = load i8, i8* %iintToPtrD910, align 1
  %icastL912 = sext i8 %derefference_valueB911 to i32
  store i32 %icastL912, i32* %ch, align 4
  br label %cond_end855

after_break913:                                   ; No predecessors!
  br label %cond_end855

cond_jump_then917:                                ; preds = %cond_end_block826
  %tok919 = load i32, i32* @tok, align 4
  %eq920 = icmp eq i32 %tok919, 200
  %oror921 = or i1 %eq916, %eq920
  store i1 %oror921, i1* %oror914, align 1
  br label %cond_jump_end918

cond_jump_end918:                                 ; preds = %cond_jump_then917, %cond_end_block826
  %oror_result_value922 = load i1, i1* %oror914, align 1
  br i1 %oror_result_value922, label %cond_jump_then923, label %cond_else_block924

cond_jump_then923:                                ; preds = %cond_jump_end918
  %tokc926 = load %CValue, %CValue* @tokc, align 16
  %n927 = load i64, i64* %n, align 4
  %icastM = trunc i64 %n927 to i32
  store i32 %icastM, i32* bitcast (%CValue* @tokc to i32*), align 4
  br label %cond_end925

cond_else_block924:                               ; preds = %cond_jump_end918
  %tokc928 = load %CValue, %CValue* @tokc, align 16
  %n929 = load i64, i64* %n, align 4
  store i64 %n929, i64* bitcast (%CValue* @tokc to i64*), align 4
  br label %cond_end925

cond_end925:                                      ; preds = %cond_else_block924, %cond_jump_then923
  br label %cond_end206

cond_jump_then932:                                ; preds = %cond_end206
  call void (i8*, ...) @error(i8* bitcast ([16 x i8]* @76 to i8*))
  br label %cond_end933

cond_end933:                                      ; preds = %cond_jump_then932, %cond_end206
  ret void
}

define internal i32* @macro_arg_subst(%Sym** %0, i32* %1, %Sym* %2) {
entry:
  %t1 = alloca i32, align 4
  %andand649 = alloca i1, align 1
  %andand648 = alloca i1, align 1
  %andand647 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror634 = alloca i1, align 1
  %size591 = alloca i32, align 4
  %oror536 = alloca i1, align 1
  %oror535 = alloca i1, align 1
  %oror534 = alloca i1, align 1
  %oror = alloca i1, align 1
  %cstr = alloca %CString, align 8
  %castXXXX4 = bitcast %CString* %cstr to i8*
  %3 = call i8* @memset(i8* %castXXXX4, i32 0, i64 32)
  %str = alloca %TokenString, align 8
  %castXXXX = bitcast %TokenString* %str to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %cval = alloca %CValue, align 16
  %s = alloca %Sym*, align 8
  %spc = alloca i32, align 4
  %t = alloca i32, align 4
  %last_tok = alloca i32, align 4
  %st = alloca i32*, align 8
  %nested_list = alloca %Sym**, align 8
  %nested_list1 = alloca %Sym***, align 8
  store %Sym** %0, %Sym*** %nested_list, align 8
  store %Sym*** %nested_list, %Sym**** %nested_list1, align 8
  %macro_str = alloca i32*, align 8
  %macro_str2 = alloca i32**, align 8
  store i32* %1, i32** %macro_str, align 8
  store i32** %macro_str, i32*** %macro_str2, align 8
  %args = alloca %Sym*, align 8
  %args3 = alloca %Sym**, align 8
  store %Sym* %2, %Sym** %args, align 8
  store %Sym** %args, %Sym*** %args3, align 8
  %str5 = load %TokenString, %TokenString* %str, align 8
  store i32 2356, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.73, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

tok_str_new:                                      ; preds = %entry
  %s6 = alloca %TokenString*, align 8
  store %TokenString* %str, %TokenString** %s6, align 8
  %s7 = load %TokenString*, %TokenString** %s6, align 8
  %fieldTU = getelementptr inbounds %TokenString, %TokenString* %s7, i32 0, i32 0
  store i32* null, i32** %fieldTU, align 8
  %s8 = load %TokenString*, %TokenString** %s6, align 8
  %fieldTU9 = getelementptr inbounds %TokenString, %TokenString* %s8, i32 0, i32 1
  store i32 0, i32* %fieldTU9, align 4
  %s10 = load %TokenString*, %TokenString** %s6, align 8
  %fieldTU11 = getelementptr inbounds %TokenString, %TokenString* %s10, i32 0, i32 2
  store i32 0, i32* %fieldTU11, align 4
  %s12 = load %TokenString*, %TokenString** %s6, align 8
  %fieldTU13 = getelementptr inbounds %TokenString, %TokenString* %s12, i32 0, i32 3
  store i32 -1, i32* %fieldTU13, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  store i32 0, i32* %last_tok, align 4
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end163, %tok_str_new_end
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %macro_str14 = load i32*, i32** %macro_str, align 8
  %ptrToIntC = ptrtoint i32* %macro_str14 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i32*
  store i32* %intToPtrB, i32** %macro_str, align 8
  %macro_str15 = load i32*, i32** %macro_str, align 8
  %ptrToIntI = ptrtoint i32* %macro_str15 to i64
  %sub = sub i64 %ptrToIntI, 4
  %iintToPtrD = inttoptr i64 %sub to i32*
  %derefference_valueB = load i32, i32* %iintToPtrD, align 4
  store i32 %derefference_valueB, i32* %t, align 4
  %t16 = load i32, i32* %t, align 4
  %eqtmp = icmp eq i32 %t16, 179
  br i1 %eqtmp, label %cond_then_block17, label %cond_else_blockX
  br label %cond_else_blockX18

cond_end_block:                                   ; preds = %cond_jump_then339, %cond_jump_then, %loop_top_block
  %str905 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add(%TokenString* %str, i32 0)
  %str906 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV907 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str908 = load i32*, i32** %fieldVVV907, align 8
  ret i32* %str908

end_blockX:                                       ; preds = %cond_else_blockX157, %cond_then_block156, %cond_then_block109, %cond_then_block79, %cond_then_block38, %cond_then_block17
  %t159 = load i32, i32* %t, align 4
  %logical_denial = icmp eq i32 %t159, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_then_block17:                                ; preds = %cond_else_blockX24, %cond_else_blockX22, %cond_else_blockX20, %cond_else_blockX18, %cond_else_blockX, %cond_then_block
  %cval28 = load %CValue, %CValue* %cval, align 16
  %fieldPPP = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO = bitcast %CValue* %cval to [1 x i32]*
  %macro_str29 = load i32*, i32** %macro_str, align 8
  %ptrToIntC30 = ptrtoint i32* %macro_str29 to i64
  %add31 = add i64 %ptrToIntC30, 4
  %intToPtrB32 = inttoptr i64 %add31 to i32*
  store i32* %intToPtrB32, i32** %macro_str, align 8
  %macro_str33 = load i32*, i32** %macro_str, align 8
  %ptrToIntI34 = ptrtoint i32* %macro_str33 to i64
  %sub35 = sub i64 %ptrToIntI34, 4
  %iintToPtrD36 = inttoptr i64 %sub35 to i32*
  %derefference_valueB37 = load i32, i32* %iintToPtrD36, align 4
  %array_castA = bitcast [1 x i32]* %ICASTO to i32*
  %gepBX = getelementptr i32, i32* %array_castA, i32 0
  store i32 %derefference_valueB37, i32* %gepBX, align 4
  br label %end_blockX

cond_else_blockX:                                 ; preds = %cond_then_block
  %eqtmp19 = icmp eq i32 %t16, 200
  br i1 %eqtmp19, label %cond_then_block17, label %cond_else_blockX18
  br label %cond_else_blockX20

cond_else_blockX18:                               ; preds = %cond_else_blockX, %cond_then_block
  %eqtmp21 = icmp eq i32 %t16, 180
  br i1 %eqtmp21, label %cond_then_block17, label %cond_else_blockX20
  br label %cond_else_blockX22

cond_else_blockX20:                               ; preds = %cond_else_blockX18, %cond_else_blockX
  %eqtmp23 = icmp eq i32 %t16, 183
  br i1 %eqtmp23, label %cond_then_block17, label %cond_else_blockX22
  br label %cond_else_blockX24

cond_else_blockX22:                               ; preds = %cond_else_blockX20, %cond_else_blockX18
  %eqtmp25 = icmp eq i32 %t16, 185
  br i1 %eqtmp25, label %cond_then_block17, label %cond_else_blockX24
  br label %cond_else_blockX26

cond_else_blockX24:                               ; preds = %cond_else_blockX22, %cond_else_blockX20
  %eqtmp27 = icmp eq i32 %t16, 186
  br i1 %eqtmp27, label %cond_then_block17, label %cond_else_blockX26

cond_else_blockX26:                               ; preds = %after_break, %cond_else_blockX24, %cond_else_blockX22
  %eqtmp40 = icmp eq i32 %t16, 181
  br i1 %eqtmp40, label %cond_then_block38, label %cond_else_blockX39
  br label %cond_else_blockX41

after_break:                                      ; No predecessors!
  br label %cond_else_blockX26
  br label %cond_else_blockX39

cond_then_block38:                                ; preds = %cond_else_blockX41, %cond_else_blockX39, %cond_else_blockX26
  %cval45 = load %CValue, %CValue* %cval, align 16
  %macro_str46 = load i32*, i32** %macro_str, align 8
  %castAQ = bitcast i32* %macro_str46 to %CString*
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to %CString**
  store %CString* %castAQ, %CString** %icastN, align 8
  %cval47 = load %CValue, %CValue* %cval, align 16
  %ICASTO48 = bitcast %CValue* %cval to %CString**
  %cstr49 = load %CString*, %CString** %ICASTO48, align 8
  %macro_str50 = load i32*, i32** %macro_str, align 8
  %castAQ51 = bitcast i32* %macro_str50 to i8*
  %ptrToIntC52 = ptrtoint i8* %castAQ51 to i64
  %add53 = add i64 %ptrToIntC52, 32
  %intToPtrB54 = inttoptr i64 %add53 to i8*
  %fieldTU55 = getelementptr inbounds %CString, %CString* %cstr49, i32 0, i32 1
  store i8* %intToPtrB54, i8** %fieldTU55, align 8
  %macro_str56 = load i32*, i32** %macro_str, align 8
  %cval57 = load %CValue, %CValue* %cval, align 16
  %ICASTO58 = bitcast %CValue* %cval to %CString**
  %cstr59 = load %CString*, %CString** %ICASTO58, align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr59, i32 0, i32 0
  %size = load i32, i32* %fieldLLL, align 4
  %icastD = sext i32 %size to i64
  %add60 = add i64 32, %icastD
  %add61 = add i64 %add60, 3
  %rshifttmp = lshr i64 %add61, 2
  %ptrToIntC62 = ptrtoint i32* %macro_str56 to i64
  %mul = mul i64 %rshifttmp, 4
  %add63 = add i64 %ptrToIntC62, %mul
  %intToPtrB64 = inttoptr i64 %add63 to i32*
  store i32* %intToPtrB64, i32** %macro_str, align 8
  %cval65 = load %CValue, %CValue* %cval, align 16
  %ICASTO66 = bitcast %CValue* %cval to %CString**
  %cstr67 = load %CString*, %CString** %ICASTO66, align 8
  %fieldLLL68 = getelementptr inbounds %CString, %CString* %cstr67, i32 0, i32 0
  %size69 = load i32, i32* %fieldLLL68, align 4
  %icastD70 = sext i32 %size69 to i64
  %add71 = add i64 32, %icastD70
  %add72 = add i64 %add71, 3
  %rshifttmp73 = lshr i64 %add72, 2
  %ptrToIntI74 = ptrtoint i32* %intToPtrB64 to i64
  %mul75 = mul i64 %rshifttmp73, 4
  %sub76 = sub i64 %ptrToIntI74, %mul75
  %iintToPtrD77 = inttoptr i64 %sub76 to i32*
  br label %end_blockX

cond_else_blockX39:                               ; preds = %cond_else_blockX26, %after_break
  %eqtmp42 = icmp eq i32 %t16, 184
  br i1 %eqtmp42, label %cond_then_block38, label %cond_else_blockX41
  br label %cond_else_blockX43

cond_else_blockX41:                               ; preds = %cond_else_blockX39, %cond_else_blockX26
  %eqtmp44 = icmp eq i32 %t16, 206
  br i1 %eqtmp44, label %cond_then_block38, label %cond_else_blockX43

cond_else_blockX43:                               ; preds = %after_break78, %cond_else_blockX41, %cond_else_blockX39
  %eqtmp81 = icmp eq i32 %t16, 192
  br i1 %eqtmp81, label %cond_then_block79, label %cond_else_blockX80
  br label %cond_else_blockX82

after_break78:                                    ; No predecessors!
  br label %cond_else_blockX43
  br label %cond_else_blockX80

cond_then_block79:                                ; preds = %cond_else_blockX82, %cond_else_blockX80, %cond_else_blockX43
  %cval86 = load %CValue, %CValue* %cval, align 16
  %fieldPPP87 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO88 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str89 = load i32*, i32** %macro_str, align 8
  %element_addressAB = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 0
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  %array_castA90 = bitcast [1 x i32]* %ICASTO88 to i32*
  %gepBX91 = getelementptr i32, i32* %array_castA90, i32 0
  store i32 %load_element, i32* %gepBX91, align 4
  %cval92 = load %CValue, %CValue* %cval, align 16
  %fieldPPP93 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO94 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str95 = load i32*, i32** %macro_str, align 8
  %element_addressAB96 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY97 = getelementptr inbounds i32, i32* %element_addressAB96, i32 1
  %load_element98 = load i32, i32* %element_addressXYXZY97, align 4
  %array_castA99 = bitcast [1 x i32]* %ICASTO94 to i32*
  %gepBX100 = getelementptr i32, i32* %array_castA99, i32 1
  store i32 %load_element98, i32* %gepBX100, align 4
  %macro_str101 = load i32*, i32** %macro_str, align 8
  %ptrToIntC102 = ptrtoint i32* %macro_str101 to i64
  %add103 = add i64 %ptrToIntC102, 8
  %intToPtrB104 = inttoptr i64 %add103 to i32*
  store i32* %intToPtrB104, i32** %macro_str, align 8
  %ptrToIntI105 = ptrtoint i32* %intToPtrB104 to i64
  %sub106 = sub i64 %ptrToIntI105, 8
  %iintToPtrD107 = inttoptr i64 %sub106 to i32*
  br label %end_blockX

cond_else_blockX80:                               ; preds = %cond_else_blockX43, %after_break78
  %eqtmp83 = icmp eq i32 %t16, 201
  br i1 %eqtmp83, label %cond_then_block79, label %cond_else_blockX82
  br label %cond_else_blockX84

cond_else_blockX82:                               ; preds = %cond_else_blockX80, %cond_else_blockX43
  %eqtmp85 = icmp eq i32 %t16, 202
  br i1 %eqtmp85, label %cond_then_block79, label %cond_else_blockX84

cond_else_blockX84:                               ; preds = %after_break108, %cond_else_blockX82, %cond_else_blockX80
  %eqtmp111 = icmp eq i32 %t16, 193
  br i1 %eqtmp111, label %cond_then_block109, label %cond_else_blockX110

after_break108:                                   ; No predecessors!
  br label %cond_else_blockX84
  br label %cond_else_blockX110

cond_then_block109:                               ; preds = %cond_else_blockX84
  %cval112 = load %CValue, %CValue* %cval, align 16
  %fieldPPP113 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO114 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str115 = load i32*, i32** %macro_str, align 8
  %element_addressAB116 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY117 = getelementptr inbounds i32, i32* %element_addressAB116, i32 0
  %load_element118 = load i32, i32* %element_addressXYXZY117, align 4
  %array_castA119 = bitcast [1 x i32]* %ICASTO114 to i32*
  %gepBX120 = getelementptr i32, i32* %array_castA119, i32 0
  store i32 %load_element118, i32* %gepBX120, align 4
  %cval121 = load %CValue, %CValue* %cval, align 16
  %fieldPPP122 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO123 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str124 = load i32*, i32** %macro_str, align 8
  %element_addressAB125 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY126 = getelementptr inbounds i32, i32* %element_addressAB125, i32 1
  %load_element127 = load i32, i32* %element_addressXYXZY126, align 4
  %array_castA128 = bitcast [1 x i32]* %ICASTO123 to i32*
  %gepBX129 = getelementptr i32, i32* %array_castA128, i32 1
  store i32 %load_element127, i32* %gepBX129, align 4
  %cval130 = load %CValue, %CValue* %cval, align 16
  %fieldPPP131 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO132 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str133 = load i32*, i32** %macro_str, align 8
  %element_addressAB134 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY135 = getelementptr inbounds i32, i32* %element_addressAB134, i32 2
  %load_element136 = load i32, i32* %element_addressXYXZY135, align 4
  %array_castA137 = bitcast [1 x i32]* %ICASTO132 to i32*
  %gepBX138 = getelementptr i32, i32* %array_castA137, i32 2
  store i32 %load_element136, i32* %gepBX138, align 4
  %cval139 = load %CValue, %CValue* %cval, align 16
  %fieldPPP140 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO141 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str142 = load i32*, i32** %macro_str, align 8
  %element_addressAB143 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY144 = getelementptr inbounds i32, i32* %element_addressAB143, i32 3
  %load_element145 = load i32, i32* %element_addressXYXZY144, align 4
  %array_castA146 = bitcast [1 x i32]* %ICASTO141 to i32*
  %gepBX147 = getelementptr i32, i32* %array_castA146, i32 3
  store i32 %load_element145, i32* %gepBX147, align 4
  %macro_str148 = load i32*, i32** %macro_str, align 8
  %ptrToIntC149 = ptrtoint i32* %macro_str148 to i64
  %add150 = add i64 %ptrToIntC149, 16
  %intToPtrB151 = inttoptr i64 %add150 to i32*
  store i32* %intToPtrB151, i32** %macro_str, align 8
  %ptrToIntI152 = ptrtoint i32* %intToPtrB151 to i64
  %sub153 = sub i64 %ptrToIntI152, 16
  %iintToPtrD154 = inttoptr i64 %sub153 to i32*
  br label %end_blockX

cond_else_blockX110:                              ; preds = %after_break155, %cond_else_blockX84, %after_break108
  br label %cond_then_block156

after_break155:                                   ; No predecessors!
  br label %cond_else_blockX110
  br label %cond_else_blockX157

cond_then_block156:                               ; preds = %cond_else_blockX110
  br label %end_blockX

cond_else_blockX157:                              ; preds = %after_break158, %after_break155
  br label %end_blockX

after_break158:                                   ; No predecessors!
  br label %cond_else_blockX157

cond_jump_then:                                   ; preds = %end_blockX
  br label %cond_end_block

cond_end:                                         ; preds = %after_break160, %end_blockX
  %t161 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t161, 35
  br i1 %eq, label %cond_jump_then162, label %cond_jump_elif0

after_break160:                                   ; No predecessors!
  br label %cond_end

cond_jump_then162:                                ; preds = %cond_end
  %macro_str164 = load i32*, i32** %macro_str, align 8
  %ptrToIntC165 = ptrtoint i32* %macro_str164 to i64
  %add166 = add i64 %ptrToIntC165, 4
  %intToPtrB167 = inttoptr i64 %add166 to i32*
  store i32* %intToPtrB167, i32** %macro_str, align 8
  %macro_str168 = load i32*, i32** %macro_str, align 8
  %ptrToIntI169 = ptrtoint i32* %macro_str168 to i64
  %sub170 = sub i64 %ptrToIntI169, 4
  %iintToPtrD171 = inttoptr i64 %sub170 to i32*
  %derefference_valueB172 = load i32, i32* %iintToPtrD171, align 4
  store i32 %derefference_valueB172, i32* %t, align 4
  %t174 = load i32, i32* %t, align 4
  %eqtmp177 = icmp eq i32 %t174, 179
  br i1 %eqtmp177, label %cond_then_block175, label %cond_else_blockX176
  br label %cond_else_blockX178

cond_jump_elif0:                                  ; preds = %cond_end
  %t621 = load i32, i32* %t, align 4
  %gteq_signed = icmp sge i32 %t621, 256
  br i1 %gteq_signed, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %args622 = load %Sym*, %Sym** %args, align 8
  %t623 = load i32, i32* %t, align 4
  %fun_result624 = call %Sym* @sym_find2(%Sym* %args622, i32 %t623)
  store %Sym* %fun_result624, %Sym** %s, align 8
  %s625 = load %Sym*, %Sym** %s, align 8
  %icmpB626 = icmp ne %Sym* %s625, null
  br i1 %icmpB626, label %cond_jump_then627, label %cond_else_block628

cond_else_block:                                  ; preds = %cond_jump_elif0
  %str901 = load %TokenString, %TokenString* %str, align 8
  %t902 = load i32, i32* %t, align 4
  %cval903 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %str, i32 %t902, %CValue* %cval)
  br label %cond_end163

cond_end163:                                      ; preds = %cond_else_block, %cond_end629, %cond_end347
  %t904 = load i32, i32* %t, align 4
  store i32 %t904, i32* %last_tok, align 4
  br label %loop_top_block

end_blockX173:                                    ; preds = %cond_else_blockX333, %cond_then_block332, %cond_then_block285, %cond_then_block252, %cond_then_block203, %cond_then_block175
  %t335 = load i32, i32* %t, align 4
  %logical_denial336 = icmp eq i32 %t335, 0
  %castOOOO337 = zext i1 %logical_denial336 to i32
  %icmpA338 = icmp ne i32 %castOOOO337, 0
  br i1 %icmpA338, label %cond_jump_then339, label %cond_end340

cond_then_block175:                               ; preds = %cond_else_blockX184, %cond_else_blockX182, %cond_else_blockX180, %cond_else_blockX178, %cond_else_blockX176, %cond_jump_then162
  %cval188 = load %CValue, %CValue* %cval, align 16
  %fieldPPP189 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO190 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str191 = load i32*, i32** %macro_str, align 8
  %ptrToIntC192 = ptrtoint i32* %macro_str191 to i64
  %add193 = add i64 %ptrToIntC192, 4
  %intToPtrB194 = inttoptr i64 %add193 to i32*
  store i32* %intToPtrB194, i32** %macro_str, align 8
  %macro_str195 = load i32*, i32** %macro_str, align 8
  %ptrToIntI196 = ptrtoint i32* %macro_str195 to i64
  %sub197 = sub i64 %ptrToIntI196, 4
  %iintToPtrD198 = inttoptr i64 %sub197 to i32*
  %derefference_valueB199 = load i32, i32* %iintToPtrD198, align 4
  %array_castA200 = bitcast [1 x i32]* %ICASTO190 to i32*
  %gepBX201 = getelementptr i32, i32* %array_castA200, i32 0
  store i32 %derefference_valueB199, i32* %gepBX201, align 4
  br label %end_blockX173

cond_else_blockX176:                              ; preds = %cond_jump_then162
  %eqtmp179 = icmp eq i32 %t174, 200
  br i1 %eqtmp179, label %cond_then_block175, label %cond_else_blockX178
  br label %cond_else_blockX180

cond_else_blockX178:                              ; preds = %cond_else_blockX176, %cond_jump_then162
  %eqtmp181 = icmp eq i32 %t174, 180
  br i1 %eqtmp181, label %cond_then_block175, label %cond_else_blockX180
  br label %cond_else_blockX182

cond_else_blockX180:                              ; preds = %cond_else_blockX178, %cond_else_blockX176
  %eqtmp183 = icmp eq i32 %t174, 183
  br i1 %eqtmp183, label %cond_then_block175, label %cond_else_blockX182
  br label %cond_else_blockX184

cond_else_blockX182:                              ; preds = %cond_else_blockX180, %cond_else_blockX178
  %eqtmp185 = icmp eq i32 %t174, 185
  br i1 %eqtmp185, label %cond_then_block175, label %cond_else_blockX184
  br label %cond_else_blockX186

cond_else_blockX184:                              ; preds = %cond_else_blockX182, %cond_else_blockX180
  %eqtmp187 = icmp eq i32 %t174, 186
  br i1 %eqtmp187, label %cond_then_block175, label %cond_else_blockX186

cond_else_blockX186:                              ; preds = %after_break202, %cond_else_blockX184, %cond_else_blockX182
  %eqtmp205 = icmp eq i32 %t174, 181
  br i1 %eqtmp205, label %cond_then_block203, label %cond_else_blockX204
  br label %cond_else_blockX206

after_break202:                                   ; No predecessors!
  br label %cond_else_blockX186
  br label %cond_else_blockX204

cond_then_block203:                               ; preds = %cond_else_blockX206, %cond_else_blockX204, %cond_else_blockX186
  %cval210 = load %CValue, %CValue* %cval, align 16
  %macro_str211 = load i32*, i32** %macro_str, align 8
  %castAQ212 = bitcast i32* %macro_str211 to %CString*
  %fieldIII213 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN214 = bitcast fp128* %fieldIII213 to %CString**
  store %CString* %castAQ212, %CString** %icastN214, align 8
  %cval215 = load %CValue, %CValue* %cval, align 16
  %ICASTO216 = bitcast %CValue* %cval to %CString**
  %cstr217 = load %CString*, %CString** %ICASTO216, align 8
  %macro_str218 = load i32*, i32** %macro_str, align 8
  %castAQ219 = bitcast i32* %macro_str218 to i8*
  %ptrToIntC220 = ptrtoint i8* %castAQ219 to i64
  %add221 = add i64 %ptrToIntC220, 32
  %intToPtrB222 = inttoptr i64 %add221 to i8*
  %fieldTU223 = getelementptr inbounds %CString, %CString* %cstr217, i32 0, i32 1
  store i8* %intToPtrB222, i8** %fieldTU223, align 8
  %macro_str224 = load i32*, i32** %macro_str, align 8
  %cval225 = load %CValue, %CValue* %cval, align 16
  %ICASTO226 = bitcast %CValue* %cval to %CString**
  %cstr227 = load %CString*, %CString** %ICASTO226, align 8
  %fieldLLL228 = getelementptr inbounds %CString, %CString* %cstr227, i32 0, i32 0
  %size229 = load i32, i32* %fieldLLL228, align 4
  %icastD230 = sext i32 %size229 to i64
  %add231 = add i64 32, %icastD230
  %add232 = add i64 %add231, 3
  %rshifttmp233 = lshr i64 %add232, 2
  %ptrToIntC234 = ptrtoint i32* %macro_str224 to i64
  %mul235 = mul i64 %rshifttmp233, 4
  %add236 = add i64 %ptrToIntC234, %mul235
  %intToPtrB237 = inttoptr i64 %add236 to i32*
  store i32* %intToPtrB237, i32** %macro_str, align 8
  %cval238 = load %CValue, %CValue* %cval, align 16
  %ICASTO239 = bitcast %CValue* %cval to %CString**
  %cstr240 = load %CString*, %CString** %ICASTO239, align 8
  %fieldLLL241 = getelementptr inbounds %CString, %CString* %cstr240, i32 0, i32 0
  %size242 = load i32, i32* %fieldLLL241, align 4
  %icastD243 = sext i32 %size242 to i64
  %add244 = add i64 32, %icastD243
  %add245 = add i64 %add244, 3
  %rshifttmp246 = lshr i64 %add245, 2
  %ptrToIntI247 = ptrtoint i32* %intToPtrB237 to i64
  %mul248 = mul i64 %rshifttmp246, 4
  %sub249 = sub i64 %ptrToIntI247, %mul248
  %iintToPtrD250 = inttoptr i64 %sub249 to i32*
  br label %end_blockX173

cond_else_blockX204:                              ; preds = %cond_else_blockX186, %after_break202
  %eqtmp207 = icmp eq i32 %t174, 184
  br i1 %eqtmp207, label %cond_then_block203, label %cond_else_blockX206
  br label %cond_else_blockX208

cond_else_blockX206:                              ; preds = %cond_else_blockX204, %cond_else_blockX186
  %eqtmp209 = icmp eq i32 %t174, 206
  br i1 %eqtmp209, label %cond_then_block203, label %cond_else_blockX208

cond_else_blockX208:                              ; preds = %after_break251, %cond_else_blockX206, %cond_else_blockX204
  %eqtmp254 = icmp eq i32 %t174, 192
  br i1 %eqtmp254, label %cond_then_block252, label %cond_else_blockX253
  br label %cond_else_blockX255

after_break251:                                   ; No predecessors!
  br label %cond_else_blockX208
  br label %cond_else_blockX253

cond_then_block252:                               ; preds = %cond_else_blockX255, %cond_else_blockX253, %cond_else_blockX208
  %cval259 = load %CValue, %CValue* %cval, align 16
  %fieldPPP260 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO261 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str262 = load i32*, i32** %macro_str, align 8
  %element_addressAB263 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY264 = getelementptr inbounds i32, i32* %element_addressAB263, i32 0
  %load_element265 = load i32, i32* %element_addressXYXZY264, align 4
  %array_castA266 = bitcast [1 x i32]* %ICASTO261 to i32*
  %gepBX267 = getelementptr i32, i32* %array_castA266, i32 0
  store i32 %load_element265, i32* %gepBX267, align 4
  %cval268 = load %CValue, %CValue* %cval, align 16
  %fieldPPP269 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO270 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str271 = load i32*, i32** %macro_str, align 8
  %element_addressAB272 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY273 = getelementptr inbounds i32, i32* %element_addressAB272, i32 1
  %load_element274 = load i32, i32* %element_addressXYXZY273, align 4
  %array_castA275 = bitcast [1 x i32]* %ICASTO270 to i32*
  %gepBX276 = getelementptr i32, i32* %array_castA275, i32 1
  store i32 %load_element274, i32* %gepBX276, align 4
  %macro_str277 = load i32*, i32** %macro_str, align 8
  %ptrToIntC278 = ptrtoint i32* %macro_str277 to i64
  %add279 = add i64 %ptrToIntC278, 8
  %intToPtrB280 = inttoptr i64 %add279 to i32*
  store i32* %intToPtrB280, i32** %macro_str, align 8
  %ptrToIntI281 = ptrtoint i32* %intToPtrB280 to i64
  %sub282 = sub i64 %ptrToIntI281, 8
  %iintToPtrD283 = inttoptr i64 %sub282 to i32*
  br label %end_blockX173

cond_else_blockX253:                              ; preds = %cond_else_blockX208, %after_break251
  %eqtmp256 = icmp eq i32 %t174, 201
  br i1 %eqtmp256, label %cond_then_block252, label %cond_else_blockX255
  br label %cond_else_blockX257

cond_else_blockX255:                              ; preds = %cond_else_blockX253, %cond_else_blockX208
  %eqtmp258 = icmp eq i32 %t174, 202
  br i1 %eqtmp258, label %cond_then_block252, label %cond_else_blockX257

cond_else_blockX257:                              ; preds = %after_break284, %cond_else_blockX255, %cond_else_blockX253
  %eqtmp287 = icmp eq i32 %t174, 193
  br i1 %eqtmp287, label %cond_then_block285, label %cond_else_blockX286

after_break284:                                   ; No predecessors!
  br label %cond_else_blockX257
  br label %cond_else_blockX286

cond_then_block285:                               ; preds = %cond_else_blockX257
  %cval288 = load %CValue, %CValue* %cval, align 16
  %fieldPPP289 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO290 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str291 = load i32*, i32** %macro_str, align 8
  %element_addressAB292 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY293 = getelementptr inbounds i32, i32* %element_addressAB292, i32 0
  %load_element294 = load i32, i32* %element_addressXYXZY293, align 4
  %array_castA295 = bitcast [1 x i32]* %ICASTO290 to i32*
  %gepBX296 = getelementptr i32, i32* %array_castA295, i32 0
  store i32 %load_element294, i32* %gepBX296, align 4
  %cval297 = load %CValue, %CValue* %cval, align 16
  %fieldPPP298 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO299 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str300 = load i32*, i32** %macro_str, align 8
  %element_addressAB301 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY302 = getelementptr inbounds i32, i32* %element_addressAB301, i32 1
  %load_element303 = load i32, i32* %element_addressXYXZY302, align 4
  %array_castA304 = bitcast [1 x i32]* %ICASTO299 to i32*
  %gepBX305 = getelementptr i32, i32* %array_castA304, i32 1
  store i32 %load_element303, i32* %gepBX305, align 4
  %cval306 = load %CValue, %CValue* %cval, align 16
  %fieldPPP307 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO308 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str309 = load i32*, i32** %macro_str, align 8
  %element_addressAB310 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY311 = getelementptr inbounds i32, i32* %element_addressAB310, i32 2
  %load_element312 = load i32, i32* %element_addressXYXZY311, align 4
  %array_castA313 = bitcast [1 x i32]* %ICASTO308 to i32*
  %gepBX314 = getelementptr i32, i32* %array_castA313, i32 2
  store i32 %load_element312, i32* %gepBX314, align 4
  %cval315 = load %CValue, %CValue* %cval, align 16
  %fieldPPP316 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO317 = bitcast %CValue* %cval to [1 x i32]*
  %macro_str318 = load i32*, i32** %macro_str, align 8
  %element_addressAB319 = load i32*, i32** %macro_str, align 8
  %element_addressXYXZY320 = getelementptr inbounds i32, i32* %element_addressAB319, i32 3
  %load_element321 = load i32, i32* %element_addressXYXZY320, align 4
  %array_castA322 = bitcast [1 x i32]* %ICASTO317 to i32*
  %gepBX323 = getelementptr i32, i32* %array_castA322, i32 3
  store i32 %load_element321, i32* %gepBX323, align 4
  %macro_str324 = load i32*, i32** %macro_str, align 8
  %ptrToIntC325 = ptrtoint i32* %macro_str324 to i64
  %add326 = add i64 %ptrToIntC325, 16
  %intToPtrB327 = inttoptr i64 %add326 to i32*
  store i32* %intToPtrB327, i32** %macro_str, align 8
  %ptrToIntI328 = ptrtoint i32* %intToPtrB327 to i64
  %sub329 = sub i64 %ptrToIntI328, 16
  %iintToPtrD330 = inttoptr i64 %sub329 to i32*
  br label %end_blockX173

cond_else_blockX286:                              ; preds = %after_break331, %cond_else_blockX257, %after_break284
  br label %cond_then_block332

after_break331:                                   ; No predecessors!
  br label %cond_else_blockX286
  br label %cond_else_blockX333

cond_then_block332:                               ; preds = %cond_else_blockX286
  br label %end_blockX173

cond_else_blockX333:                              ; preds = %after_break334, %after_break331
  br label %end_blockX173

after_break334:                                   ; No predecessors!
  br label %cond_else_blockX333

cond_jump_then339:                                ; preds = %end_blockX173
  br label %cond_end_block

cond_end340:                                      ; preds = %after_break341, %end_blockX173
  %args342 = load %Sym*, %Sym** %args, align 8
  %t343 = load i32, i32* %t, align 4
  %fun_result = call %Sym* @sym_find2(%Sym* %args342, i32 %t343)
  store %Sym* %fun_result, %Sym** %s, align 8
  %s344 = load %Sym*, %Sym** %s, align 8
  %icmpB = icmp ne %Sym* %s344, null
  br i1 %icmpB, label %cond_jump_then345, label %cond_else_block346

after_break341:                                   ; No predecessors!
  br label %cond_end340

cond_jump_then345:                                ; preds = %cond_end340
  %cstr348 = load %CString, %CString* %cstr, align 8
  call void @cstr_new(%CString* %cstr)
  %s349 = load %Sym*, %Sym** %s, align 8
  %fieldLLL350 = getelementptr inbounds %Sym, %Sym* %s349, i32 0, i32 2
  %c = load i64, i64* %fieldLLL350, align 4
  %castBA = inttoptr i64 %c to i32*
  store i32* %castBA, i32** %st, align 8
  store i32 0, i32* %spc, align 4
  br label %loop_top_block351

cond_else_block346:                               ; preds = %cond_end340
  %str618 = load %TokenString, %TokenString* %str, align 8
  %t619 = load i32, i32* %t, align 4
  %cval620 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %str, i32 %t619, %CValue* %cval)
  br label %cond_end347

cond_end347:                                      ; preds = %cond_else_block346, %cstr_ccat_end
  br label %cond_end163

loop_top_block351:                                ; preds = %cond_end578, %cond_jump_then345
  %st352 = load i32*, i32** %st, align 8
  %derefference_valueB353 = load i32, i32* %st352, align 4
  %icmpA354 = icmp ne i32 %derefference_valueB353, 0
  br i1 %icmpA354, label %cond_then_block355, label %cond_end_block356

cond_then_block355:                               ; preds = %loop_top_block351
  %st357 = load i32*, i32** %st, align 8
  %ptrToIntC358 = ptrtoint i32* %st357 to i64
  %add359 = add i64 %ptrToIntC358, 4
  %intToPtrB360 = inttoptr i64 %add359 to i32*
  store i32* %intToPtrB360, i32** %st, align 8
  %st361 = load i32*, i32** %st, align 8
  %ptrToIntI362 = ptrtoint i32* %st361 to i64
  %sub363 = sub i64 %ptrToIntI362, 4
  %iintToPtrD364 = inttoptr i64 %sub363 to i32*
  %derefference_valueB365 = load i32, i32* %iintToPtrD364, align 4
  store i32 %derefference_valueB365, i32* %t, align 4
  %t367 = load i32, i32* %t, align 4
  %eqtmp370 = icmp eq i32 %t367, 179
  br i1 %eqtmp370, label %cond_then_block368, label %cond_else_blockX369
  br label %cond_else_blockX371

cond_end_block356:                                ; preds = %loop_top_block351
  %cstr583 = load %CString, %CString* %cstr, align 8
  %cstr584 = load %CString, %CString* %cstr, align 8
  %fieldVVV = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 0
  %size585 = load i32, i32* %fieldVVV, align 4
  %spc586 = load i32, i32* %spc, align 4
  %sub587 = sub i32 %size585, %spc586
  %fieldTTT = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 0
  store i32 %sub587, i32* %fieldTTT, align 4
  %cstr588 = load %CString, %CString* %cstr, align 8
  store i32 2378, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.76, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

end_blockX366:                                    ; preds = %cond_else_blockX526, %cond_then_block525, %cond_then_block478, %cond_then_block445, %cond_then_block396, %cond_then_block368
  %t528 = load i32, i32* %t, align 4
  %spc529 = load i32, i32* %spc, align 4
  store i32 2374, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.74, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %check_space

cond_then_block368:                               ; preds = %cond_else_blockX377, %cond_else_blockX375, %cond_else_blockX373, %cond_else_blockX371, %cond_else_blockX369, %cond_then_block355
  %cval381 = load %CValue, %CValue* %cval, align 16
  %fieldPPP382 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO383 = bitcast %CValue* %cval to [1 x i32]*
  %st384 = load i32*, i32** %st, align 8
  %ptrToIntC385 = ptrtoint i32* %st384 to i64
  %add386 = add i64 %ptrToIntC385, 4
  %intToPtrB387 = inttoptr i64 %add386 to i32*
  store i32* %intToPtrB387, i32** %st, align 8
  %st388 = load i32*, i32** %st, align 8
  %ptrToIntI389 = ptrtoint i32* %st388 to i64
  %sub390 = sub i64 %ptrToIntI389, 4
  %iintToPtrD391 = inttoptr i64 %sub390 to i32*
  %derefference_valueB392 = load i32, i32* %iintToPtrD391, align 4
  %array_castA393 = bitcast [1 x i32]* %ICASTO383 to i32*
  %gepBX394 = getelementptr i32, i32* %array_castA393, i32 0
  store i32 %derefference_valueB392, i32* %gepBX394, align 4
  br label %end_blockX366

cond_else_blockX369:                              ; preds = %cond_then_block355
  %eqtmp372 = icmp eq i32 %t367, 200
  br i1 %eqtmp372, label %cond_then_block368, label %cond_else_blockX371
  br label %cond_else_blockX373

cond_else_blockX371:                              ; preds = %cond_else_blockX369, %cond_then_block355
  %eqtmp374 = icmp eq i32 %t367, 180
  br i1 %eqtmp374, label %cond_then_block368, label %cond_else_blockX373
  br label %cond_else_blockX375

cond_else_blockX373:                              ; preds = %cond_else_blockX371, %cond_else_blockX369
  %eqtmp376 = icmp eq i32 %t367, 183
  br i1 %eqtmp376, label %cond_then_block368, label %cond_else_blockX375
  br label %cond_else_blockX377

cond_else_blockX375:                              ; preds = %cond_else_blockX373, %cond_else_blockX371
  %eqtmp378 = icmp eq i32 %t367, 185
  br i1 %eqtmp378, label %cond_then_block368, label %cond_else_blockX377
  br label %cond_else_blockX379

cond_else_blockX377:                              ; preds = %cond_else_blockX375, %cond_else_blockX373
  %eqtmp380 = icmp eq i32 %t367, 186
  br i1 %eqtmp380, label %cond_then_block368, label %cond_else_blockX379

cond_else_blockX379:                              ; preds = %after_break395, %cond_else_blockX377, %cond_else_blockX375
  %eqtmp398 = icmp eq i32 %t367, 181
  br i1 %eqtmp398, label %cond_then_block396, label %cond_else_blockX397
  br label %cond_else_blockX399

after_break395:                                   ; No predecessors!
  br label %cond_else_blockX379
  br label %cond_else_blockX397

cond_then_block396:                               ; preds = %cond_else_blockX399, %cond_else_blockX397, %cond_else_blockX379
  %cval403 = load %CValue, %CValue* %cval, align 16
  %st404 = load i32*, i32** %st, align 8
  %castAQ405 = bitcast i32* %st404 to %CString*
  %fieldIII406 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN407 = bitcast fp128* %fieldIII406 to %CString**
  store %CString* %castAQ405, %CString** %icastN407, align 8
  %cval408 = load %CValue, %CValue* %cval, align 16
  %ICASTO409 = bitcast %CValue* %cval to %CString**
  %cstr410 = load %CString*, %CString** %ICASTO409, align 8
  %st411 = load i32*, i32** %st, align 8
  %castAQ412 = bitcast i32* %st411 to i8*
  %ptrToIntC413 = ptrtoint i8* %castAQ412 to i64
  %add414 = add i64 %ptrToIntC413, 32
  %intToPtrB415 = inttoptr i64 %add414 to i8*
  %fieldTU416 = getelementptr inbounds %CString, %CString* %cstr410, i32 0, i32 1
  store i8* %intToPtrB415, i8** %fieldTU416, align 8
  %st417 = load i32*, i32** %st, align 8
  %cval418 = load %CValue, %CValue* %cval, align 16
  %ICASTO419 = bitcast %CValue* %cval to %CString**
  %cstr420 = load %CString*, %CString** %ICASTO419, align 8
  %fieldLLL421 = getelementptr inbounds %CString, %CString* %cstr420, i32 0, i32 0
  %size422 = load i32, i32* %fieldLLL421, align 4
  %icastD423 = sext i32 %size422 to i64
  %add424 = add i64 32, %icastD423
  %add425 = add i64 %add424, 3
  %rshifttmp426 = lshr i64 %add425, 2
  %ptrToIntC427 = ptrtoint i32* %st417 to i64
  %mul428 = mul i64 %rshifttmp426, 4
  %add429 = add i64 %ptrToIntC427, %mul428
  %intToPtrB430 = inttoptr i64 %add429 to i32*
  store i32* %intToPtrB430, i32** %st, align 8
  %cval431 = load %CValue, %CValue* %cval, align 16
  %ICASTO432 = bitcast %CValue* %cval to %CString**
  %cstr433 = load %CString*, %CString** %ICASTO432, align 8
  %fieldLLL434 = getelementptr inbounds %CString, %CString* %cstr433, i32 0, i32 0
  %size435 = load i32, i32* %fieldLLL434, align 4
  %icastD436 = sext i32 %size435 to i64
  %add437 = add i64 32, %icastD436
  %add438 = add i64 %add437, 3
  %rshifttmp439 = lshr i64 %add438, 2
  %ptrToIntI440 = ptrtoint i32* %intToPtrB430 to i64
  %mul441 = mul i64 %rshifttmp439, 4
  %sub442 = sub i64 %ptrToIntI440, %mul441
  %iintToPtrD443 = inttoptr i64 %sub442 to i32*
  br label %end_blockX366

cond_else_blockX397:                              ; preds = %cond_else_blockX379, %after_break395
  %eqtmp400 = icmp eq i32 %t367, 184
  br i1 %eqtmp400, label %cond_then_block396, label %cond_else_blockX399
  br label %cond_else_blockX401

cond_else_blockX399:                              ; preds = %cond_else_blockX397, %cond_else_blockX379
  %eqtmp402 = icmp eq i32 %t367, 206
  br i1 %eqtmp402, label %cond_then_block396, label %cond_else_blockX401

cond_else_blockX401:                              ; preds = %after_break444, %cond_else_blockX399, %cond_else_blockX397
  %eqtmp447 = icmp eq i32 %t367, 192
  br i1 %eqtmp447, label %cond_then_block445, label %cond_else_blockX446
  br label %cond_else_blockX448

after_break444:                                   ; No predecessors!
  br label %cond_else_blockX401
  br label %cond_else_blockX446

cond_then_block445:                               ; preds = %cond_else_blockX448, %cond_else_blockX446, %cond_else_blockX401
  %cval452 = load %CValue, %CValue* %cval, align 16
  %fieldPPP453 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO454 = bitcast %CValue* %cval to [1 x i32]*
  %st455 = load i32*, i32** %st, align 8
  %element_addressAB456 = load i32*, i32** %st, align 8
  %element_addressXYXZY457 = getelementptr inbounds i32, i32* %element_addressAB456, i32 0
  %load_element458 = load i32, i32* %element_addressXYXZY457, align 4
  %array_castA459 = bitcast [1 x i32]* %ICASTO454 to i32*
  %gepBX460 = getelementptr i32, i32* %array_castA459, i32 0
  store i32 %load_element458, i32* %gepBX460, align 4
  %cval461 = load %CValue, %CValue* %cval, align 16
  %fieldPPP462 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO463 = bitcast %CValue* %cval to [1 x i32]*
  %st464 = load i32*, i32** %st, align 8
  %element_addressAB465 = load i32*, i32** %st, align 8
  %element_addressXYXZY466 = getelementptr inbounds i32, i32* %element_addressAB465, i32 1
  %load_element467 = load i32, i32* %element_addressXYXZY466, align 4
  %array_castA468 = bitcast [1 x i32]* %ICASTO463 to i32*
  %gepBX469 = getelementptr i32, i32* %array_castA468, i32 1
  store i32 %load_element467, i32* %gepBX469, align 4
  %st470 = load i32*, i32** %st, align 8
  %ptrToIntC471 = ptrtoint i32* %st470 to i64
  %add472 = add i64 %ptrToIntC471, 8
  %intToPtrB473 = inttoptr i64 %add472 to i32*
  store i32* %intToPtrB473, i32** %st, align 8
  %ptrToIntI474 = ptrtoint i32* %intToPtrB473 to i64
  %sub475 = sub i64 %ptrToIntI474, 8
  %iintToPtrD476 = inttoptr i64 %sub475 to i32*
  br label %end_blockX366

cond_else_blockX446:                              ; preds = %cond_else_blockX401, %after_break444
  %eqtmp449 = icmp eq i32 %t367, 201
  br i1 %eqtmp449, label %cond_then_block445, label %cond_else_blockX448
  br label %cond_else_blockX450

cond_else_blockX448:                              ; preds = %cond_else_blockX446, %cond_else_blockX401
  %eqtmp451 = icmp eq i32 %t367, 202
  br i1 %eqtmp451, label %cond_then_block445, label %cond_else_blockX450

cond_else_blockX450:                              ; preds = %after_break477, %cond_else_blockX448, %cond_else_blockX446
  %eqtmp480 = icmp eq i32 %t367, 193
  br i1 %eqtmp480, label %cond_then_block478, label %cond_else_blockX479

after_break477:                                   ; No predecessors!
  br label %cond_else_blockX450
  br label %cond_else_blockX479

cond_then_block478:                               ; preds = %cond_else_blockX450
  %cval481 = load %CValue, %CValue* %cval, align 16
  %fieldPPP482 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO483 = bitcast %CValue* %cval to [1 x i32]*
  %st484 = load i32*, i32** %st, align 8
  %element_addressAB485 = load i32*, i32** %st, align 8
  %element_addressXYXZY486 = getelementptr inbounds i32, i32* %element_addressAB485, i32 0
  %load_element487 = load i32, i32* %element_addressXYXZY486, align 4
  %array_castA488 = bitcast [1 x i32]* %ICASTO483 to i32*
  %gepBX489 = getelementptr i32, i32* %array_castA488, i32 0
  store i32 %load_element487, i32* %gepBX489, align 4
  %cval490 = load %CValue, %CValue* %cval, align 16
  %fieldPPP491 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO492 = bitcast %CValue* %cval to [1 x i32]*
  %st493 = load i32*, i32** %st, align 8
  %element_addressAB494 = load i32*, i32** %st, align 8
  %element_addressXYXZY495 = getelementptr inbounds i32, i32* %element_addressAB494, i32 1
  %load_element496 = load i32, i32* %element_addressXYXZY495, align 4
  %array_castA497 = bitcast [1 x i32]* %ICASTO492 to i32*
  %gepBX498 = getelementptr i32, i32* %array_castA497, i32 1
  store i32 %load_element496, i32* %gepBX498, align 4
  %cval499 = load %CValue, %CValue* %cval, align 16
  %fieldPPP500 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO501 = bitcast %CValue* %cval to [1 x i32]*
  %st502 = load i32*, i32** %st, align 8
  %element_addressAB503 = load i32*, i32** %st, align 8
  %element_addressXYXZY504 = getelementptr inbounds i32, i32* %element_addressAB503, i32 2
  %load_element505 = load i32, i32* %element_addressXYXZY504, align 4
  %array_castA506 = bitcast [1 x i32]* %ICASTO501 to i32*
  %gepBX507 = getelementptr i32, i32* %array_castA506, i32 2
  store i32 %load_element505, i32* %gepBX507, align 4
  %cval508 = load %CValue, %CValue* %cval, align 16
  %fieldPPP509 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO510 = bitcast %CValue* %cval to [1 x i32]*
  %st511 = load i32*, i32** %st, align 8
  %element_addressAB512 = load i32*, i32** %st, align 8
  %element_addressXYXZY513 = getelementptr inbounds i32, i32* %element_addressAB512, i32 3
  %load_element514 = load i32, i32* %element_addressXYXZY513, align 4
  %array_castA515 = bitcast [1 x i32]* %ICASTO510 to i32*
  %gepBX516 = getelementptr i32, i32* %array_castA515, i32 3
  store i32 %load_element514, i32* %gepBX516, align 4
  %st517 = load i32*, i32** %st, align 8
  %ptrToIntC518 = ptrtoint i32* %st517 to i64
  %add519 = add i64 %ptrToIntC518, 16
  %intToPtrB520 = inttoptr i64 %add519 to i32*
  store i32* %intToPtrB520, i32** %st, align 8
  %ptrToIntI521 = ptrtoint i32* %intToPtrB520 to i64
  %sub522 = sub i64 %ptrToIntI521, 16
  %iintToPtrD523 = inttoptr i64 %sub522 to i32*
  br label %end_blockX366

cond_else_blockX479:                              ; preds = %after_break524, %cond_else_blockX450, %after_break477
  br label %cond_then_block525

after_break524:                                   ; No predecessors!
  br label %cond_else_blockX479
  br label %cond_else_blockX526

cond_then_block525:                               ; preds = %cond_else_blockX479
  br label %end_blockX366

cond_else_blockX526:                              ; preds = %after_break527, %after_break524
  br label %end_blockX366

after_break527:                                   ; No predecessors!
  br label %cond_else_blockX526

check_space:                                      ; preds = %end_blockX366
  %inline_result_variable = alloca i32, align 4
  %t530 = alloca i32, align 4
  store i32 %t528, i32* %t530, align 4
  %spc531 = alloca i32*, align 8
  store i32* %spc, i32** %spc531, align 8
  %t532 = load i32, i32* %t530, align 4
  store i32 2374, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.75, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

check_space_end:                                  ; preds = %cond_end565, %cond_jump_then569
  %inline_result_variable573 = load i32, i32* %inline_result_variable, align 4
  %logical_denial574 = icmp eq i32 %inline_result_variable573, 0
  %castOOOO575 = zext i1 %logical_denial574 to i32
  %icmpA576 = icmp ne i32 %castOOOO575, 0
  br i1 %icmpA576, label %cond_jump_then577, label %cond_end578

is_space:                                         ; preds = %check_space
  %inline_result_variable533 = alloca i32, align 4
  %ch = alloca i32, align 4
  store i32 %t532, i32* %ch, align 4
  %ch537 = load i32, i32* %ch, align 4
  %eq538 = icmp eq i32 %ch537, 32
  store i1 %eq538, i1* %oror536, align 1
  br i1 %eq538, label %cond_jump_end, label %cond_jump_then539

is_space_end:                                     ; preds = %cond_jump_end556
  %inline_result_variable561 = load i32, i32* %inline_result_variable533, align 4
  %icmpA562 = icmp ne i32 %inline_result_variable561, 0
  br i1 %icmpA562, label %cond_jump_then563, label %cond_else_block564

cond_jump_then539:                                ; preds = %is_space
  %ch540 = load i32, i32* %ch, align 4
  %eq541 = icmp eq i32 %ch540, 9
  %oror542 = or i1 %eq538, %eq541
  store i1 %oror542, i1* %oror536, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then539, %is_space
  %oror_result_value = load i1, i1* %oror536, align 1
  store i1 %oror_result_value, i1* %oror535, align 1
  br i1 %oror_result_value, label %cond_jump_end544, label %cond_jump_then543

cond_jump_then543:                                ; preds = %cond_jump_end
  %ch545 = load i32, i32* %ch, align 4
  %eq546 = icmp eq i32 %ch545, 11
  %oror547 = or i1 %oror_result_value, %eq546
  store i1 %oror547, i1* %oror535, align 1
  br label %cond_jump_end544

cond_jump_end544:                                 ; preds = %cond_jump_then543, %cond_jump_end
  %oror_result_value548 = load i1, i1* %oror535, align 1
  store i1 %oror_result_value548, i1* %oror534, align 1
  br i1 %oror_result_value548, label %cond_jump_end550, label %cond_jump_then549

cond_jump_then549:                                ; preds = %cond_jump_end544
  %ch551 = load i32, i32* %ch, align 4
  %eq552 = icmp eq i32 %ch551, 12
  %oror553 = or i1 %oror_result_value548, %eq552
  store i1 %oror553, i1* %oror534, align 1
  br label %cond_jump_end550

cond_jump_end550:                                 ; preds = %cond_jump_then549, %cond_jump_end544
  %oror_result_value554 = load i1, i1* %oror534, align 1
  store i1 %oror_result_value554, i1* %oror, align 1
  br i1 %oror_result_value554, label %cond_jump_end556, label %cond_jump_then555

cond_jump_then555:                                ; preds = %cond_jump_end550
  %ch557 = load i32, i32* %ch, align 4
  %eq558 = icmp eq i32 %ch557, 13
  %oror559 = or i1 %oror_result_value554, %eq558
  store i1 %oror559, i1* %oror, align 1
  br label %cond_jump_end556

cond_jump_end556:                                 ; preds = %cond_jump_then555, %cond_jump_end550
  %oror_result_value560 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value560 to i32
  store i32 %icastKX, i32* %inline_result_variable533, align 4
  br label %is_space_end

cond_jump_then563:                                ; preds = %is_space_end
  %spc566 = load i32*, i32** %spc531, align 8
  %derefference_valueB567 = load i32, i32* %spc566, align 4
  %icmpA568 = icmp ne i32 %derefference_valueB567, 0
  br i1 %icmpA568, label %cond_jump_then569, label %cond_end570

cond_else_block564:                               ; preds = %is_space_end
  %spc572 = load i32*, i32** %spc531, align 8
  store i32 0, i32* %spc572, align 4
  br label %cond_end565

cond_end565:                                      ; preds = %cond_else_block564, %cond_end570
  store i32 0, i32* %inline_result_variable, align 4
  br label %check_space_end

cond_jump_then569:                                ; preds = %cond_jump_then563
  store i32 1, i32* %inline_result_variable, align 4
  br label %check_space_end

cond_end570:                                      ; preds = %cond_jump_then563
  %spc571 = load i32*, i32** %spc531, align 8
  store i32 1, i32* %spc571, align 4
  br label %cond_end565

cond_jump_then577:                                ; preds = %check_space_end
  %cstr579 = load %CString, %CString* %cstr, align 8
  %t580 = load i32, i32* %t, align 4
  %cval581 = load %CValue, %CValue* %cval, align 16
  %fun_result582 = call i8* @get_tok_str(i32 %t580, %CValue* %cval)
  call void @cstr_cat(%CString* %cstr, i8* %fun_result582)
  br label %cond_end578

cond_end578:                                      ; preds = %cond_jump_then577, %check_space_end
  br label %loop_top_block351

cstr_ccat:                                        ; preds = %cond_end_block356
  %cstr589 = alloca %CString*, align 8
  store %CString* %cstr, %CString** %cstr589, align 8
  %ch590 = alloca i32, align 4
  store i32 0, i32* %ch590, align 4
  %cstr592 = load %CString*, %CString** %cstr589, align 8
  %fieldLLL593 = getelementptr inbounds %CString, %CString* %cstr592, i32 0, i32 0
  %size594 = load i32, i32* %fieldLLL593, align 4
  %add595 = add i32 %size594, 1
  store i32 %add595, i32* %size591, align 4
  %size596 = load i32, i32* %size591, align 4
  %cstr597 = load %CString*, %CString** %cstr589, align 8
  %fieldLLL598 = getelementptr inbounds %CString, %CString* %cstr597, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL598, align 4
  %gt = icmp sgt i32 %size596, %size_allocated
  br i1 %gt, label %cond_jump_then599, label %cond_end600

cstr_ccat_end:                                    ; preds = %cond_end600
  %cval611 = load %CValue, %CValue* %cval, align 16
  %cstr612 = load %CString, %CString* %cstr, align 8
  %fieldIII613 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN614 = bitcast fp128* %fieldIII613 to %CString**
  store %CString* %cstr, %CString** %icastN614, align 8
  %str615 = load %TokenString, %TokenString* %str, align 8
  %cval616 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %str, i32 181, %CValue* %cval)
  %cstr617 = load %CString, %CString* %cstr, align 8
  call void @cstr_free(%CString* %cstr)
  br label %cond_end347

cond_jump_then599:                                ; preds = %cstr_ccat
  %cstr601 = load %CString*, %CString** %cstr589, align 8
  %size602 = load i32, i32* %size591, align 4
  call void @cstr_realloc(%CString* %cstr601, i32 %size602)
  br label %cond_end600

cond_end600:                                      ; preds = %cond_jump_then599, %cstr_ccat
  %cstr603 = load %CString*, %CString** %cstr589, align 8
  %fieldLLL604 = getelementptr inbounds %CString, %CString* %cstr603, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL604, align 8
  %size605 = load i32, i32* %size591, align 4
  %sub606 = sub i32 %size605, 1
  %ch607 = load i32, i32* %ch590, align 4
  %icastJ = trunc i32 %ch607 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub606
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr608 = load %CString*, %CString** %cstr589, align 8
  %size609 = load i32, i32* %size591, align 4
  %fieldTU610 = getelementptr inbounds %CString, %CString* %cstr608, i32 0, i32 0
  store i32 %size609, i32* %fieldTU610, align 4
  br label %cstr_ccat_end

cond_jump_then627:                                ; preds = %cond_jump_elif_then0
  %s630 = load %Sym*, %Sym** %s, align 8
  %fieldLLL631 = getelementptr inbounds %Sym, %Sym* %s630, i32 0, i32 2
  %c632 = load i64, i64* %fieldLLL631, align 4
  %castBA633 = inttoptr i64 %c632 to i32*
  store i32* %castBA633, i32** %st, align 8
  %macro_str635 = load i32*, i32** %macro_str, align 8
  %derefference_valueB636 = load i32, i32* %macro_str635, align 4
  %eq637 = icmp eq i32 %derefference_valueB636, 182
  store i1 %eq637, i1* %oror634, align 1
  br i1 %eq637, label %cond_jump_end639, label %cond_jump_then638

cond_else_block628:                               ; preds = %cond_jump_elif_then0
  %str899 = load %TokenString, %TokenString* %str, align 8
  %t900 = load i32, i32* %t, align 4
  call void @tok_str_add(%TokenString* %str, i32 %t900)
  br label %cond_end629

cond_end629:                                      ; preds = %cond_else_block628, %cond_end646
  br label %cond_end163

cond_jump_then638:                                ; preds = %cond_jump_then627
  %last_tok640 = load i32, i32* %last_tok, align 4
  %eq641 = icmp eq i32 %last_tok640, 182
  %oror642 = or i1 %eq637, %eq641
  store i1 %oror642, i1* %oror634, align 1
  br label %cond_jump_end639

cond_jump_end639:                                 ; preds = %cond_jump_then638, %cond_jump_then627
  %oror_result_value643 = load i1, i1* %oror634, align 1
  br i1 %oror_result_value643, label %cond_jump_then644, label %cond_else_block645

cond_jump_then644:                                ; preds = %cond_jump_end639
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %icmpA650 = icmp ne i32 %gnu_ext, 0
  store i1 %icmpA650, i1* %andand649, align 1
  br i1 %icmpA650, label %cond_jump_then651, label %cond_jump_end652

cond_else_block645:                               ; preds = %cond_jump_end639
  %str896 = load %TokenString, %TokenString* %str, align 8
  %nested_list897 = load %Sym**, %Sym*** %nested_list, align 8
  %st898 = load i32*, i32** %st, align 8
  call void @macro_subst(%TokenString* %str, %Sym** %nested_list897, i32* %st898, %macro_level** null)
  br label %cond_end646

cond_end646:                                      ; preds = %cond_else_block645, %cond_end689
  br label %cond_end629

cond_jump_then651:                                ; preds = %cond_jump_then644
  %s653 = load %Sym*, %Sym** %s, align 8
  %fieldLLL654 = getelementptr inbounds %Sym, %Sym* %s653, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL654, align 8
  %fieldVVV655 = getelementptr inbounds %CType, %CType* %fieldLLL654, i32 0, i32 0
  %t656 = load i32, i32* %fieldVVV655, align 4
  %icmpA657 = icmp ne i32 %t656, 0
  %andand658 = and i1 %icmpA650, %icmpA657
  store i1 %andand658, i1* %andand649, align 1
  br label %cond_jump_end652

cond_jump_end652:                                 ; preds = %cond_jump_then651, %cond_jump_then644
  %andand_result_value = load i1, i1* %andand649, align 1
  store i1 %andand_result_value, i1* %andand648, align 1
  br i1 %andand_result_value, label %cond_jump_then659, label %cond_jump_end660

cond_jump_then659:                                ; preds = %cond_jump_end652
  %last_tok661 = load i32, i32* %last_tok, align 4
  %eq662 = icmp eq i32 %last_tok661, 182
  %andand663 = and i1 %andand_result_value, %eq662
  store i1 %andand663, i1* %andand648, align 1
  br label %cond_jump_end660

cond_jump_end660:                                 ; preds = %cond_jump_then659, %cond_jump_end652
  %andand_result_value664 = load i1, i1* %andand648, align 1
  store i1 %andand_result_value664, i1* %andand647, align 1
  br i1 %andand_result_value664, label %cond_jump_then665, label %cond_jump_end666

cond_jump_then665:                                ; preds = %cond_jump_end660
  %str667 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV668 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len = load i32, i32* %fieldVVV668, align 4
  %gteq_signed669 = icmp sge i32 %len, 2
  %andand670 = and i1 %andand_result_value664, %gteq_signed669
  store i1 %andand670, i1* %andand647, align 1
  br label %cond_jump_end666

cond_jump_end666:                                 ; preds = %cond_jump_then665, %cond_jump_end660
  %andand_result_value671 = load i1, i1* %andand647, align 1
  store i1 %andand_result_value671, i1* %andand, align 1
  br i1 %andand_result_value671, label %cond_jump_then672, label %cond_jump_end673

cond_jump_then672:                                ; preds = %cond_jump_end666
  %str674 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV675 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str676 = load i32*, i32** %fieldVVV675, align 8
  %str677 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV678 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len679 = load i32, i32* %fieldVVV678, align 4
  %sub680 = sub i32 %len679, 2
  %element_addressAB681 = load i32*, i32** %fieldVVV675, align 8
  %element_addressXYXZY682 = getelementptr inbounds i32, i32* %element_addressAB681, i32 %sub680
  %load_element683 = load i32, i32* %element_addressXYXZY682, align 4
  %eq684 = icmp eq i32 %load_element683, 44
  %andand685 = and i1 %andand_result_value671, %eq684
  store i1 %andand685, i1* %andand, align 1
  br label %cond_jump_end673

cond_jump_end673:                                 ; preds = %cond_jump_then672, %cond_jump_end666
  %andand_result_value686 = load i1, i1* %andand, align 1
  br i1 %andand_result_value686, label %cond_jump_then687, label %cond_else_block688

cond_jump_then687:                                ; preds = %cond_jump_end673
  %st690 = load i32*, i32** %st, align 8
  %derefference_valueB691 = load i32, i32* %st690, align 4
  %eq692 = icmp eq i32 %derefference_valueB691, 0
  br i1 %eq692, label %cond_jump_then693, label %cond_else_block694

cond_else_block688:                               ; preds = %cond_jump_end673
  br label %macro_arg_subst.add_var

cond_end689:                                      ; preds = %cond_end_block714, %cond_end695
  br label %cond_end646

cond_jump_then693:                                ; preds = %cond_jump_then687
  %str696 = load %TokenString, %TokenString* %str, align 8
  %str697 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV698 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len699 = load i32, i32* %fieldVVV698, align 4
  %sub700 = sub i32 %len699, 2
  %fieldTTT701 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  store i32 %sub700, i32* %fieldTTT701, align 4
  br label %cond_end695

cond_else_block694:                               ; preds = %cond_jump_then687
  %str702 = load %TokenString, %TokenString* %str, align 8
  %str703 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV704 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len705 = load i32, i32* %fieldVVV704, align 4
  %sub706 = sub i32 %len705, 1
  %fieldTTT707 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  store i32 %sub706, i32* %fieldTTT707, align 4
  %str708 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV709 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len710 = load i32, i32* %fieldVVV709, align 4
  %add711 = add i32 %len710, 1
  br label %macro_arg_subst.add_var
  br label %cond_end695

cond_end695:                                      ; preds = %cond_else_block694, %cond_jump_then693
  br label %cond_end689

macro_arg_subst.add_var:                          ; preds = %cond_else_block688, %cond_else_block694
  br label %loop_top_block712

loop_continue_top_block:                          ; preds = %cond_end891
  br label %loop_top_block712

loop_top_block712:                                ; preds = %loop_continue_top_block, %macro_arg_subst.add_var
  br i1 true, label %cond_then_block713, label %cond_end_block714

cond_then_block713:                               ; preds = %loop_top_block712
  %st715 = load i32*, i32** %st, align 8
  %ptrToIntC716 = ptrtoint i32* %st715 to i64
  %add717 = add i64 %ptrToIntC716, 4
  %intToPtrB718 = inttoptr i64 %add717 to i32*
  store i32* %intToPtrB718, i32** %st, align 8
  %st719 = load i32*, i32** %st, align 8
  %ptrToIntI720 = ptrtoint i32* %st719 to i64
  %sub721 = sub i64 %ptrToIntI720, 4
  %iintToPtrD722 = inttoptr i64 %sub721 to i32*
  %derefference_valueB723 = load i32, i32* %iintToPtrD722, align 4
  store i32 %derefference_valueB723, i32* %t1, align 4
  %t1725 = load i32, i32* %t1, align 4
  %eqtmp728 = icmp eq i32 %t1725, 179
  br i1 %eqtmp728, label %cond_then_block726, label %cond_else_blockX727
  br label %cond_else_blockX729

cond_end_block714:                                ; preds = %cond_jump_then890, %loop_top_block712
  br label %cond_end689

end_blockX724:                                    ; preds = %cond_else_blockX884, %cond_then_block883, %cond_then_block836, %cond_then_block803, %cond_then_block754, %cond_then_block726
  %t1886 = load i32, i32* %t1, align 4
  %logical_denial887 = icmp eq i32 %t1886, 0
  %castOOOO888 = zext i1 %logical_denial887 to i32
  %icmpA889 = icmp ne i32 %castOOOO888, 0
  br i1 %icmpA889, label %cond_jump_then890, label %cond_end891

cond_then_block726:                               ; preds = %cond_else_blockX735, %cond_else_blockX733, %cond_else_blockX731, %cond_else_blockX729, %cond_else_blockX727, %cond_then_block713
  %cval739 = load %CValue, %CValue* %cval, align 16
  %fieldPPP740 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO741 = bitcast %CValue* %cval to [1 x i32]*
  %st742 = load i32*, i32** %st, align 8
  %ptrToIntC743 = ptrtoint i32* %st742 to i64
  %add744 = add i64 %ptrToIntC743, 4
  %intToPtrB745 = inttoptr i64 %add744 to i32*
  store i32* %intToPtrB745, i32** %st, align 8
  %st746 = load i32*, i32** %st, align 8
  %ptrToIntI747 = ptrtoint i32* %st746 to i64
  %sub748 = sub i64 %ptrToIntI747, 4
  %iintToPtrD749 = inttoptr i64 %sub748 to i32*
  %derefference_valueB750 = load i32, i32* %iintToPtrD749, align 4
  %array_castA751 = bitcast [1 x i32]* %ICASTO741 to i32*
  %gepBX752 = getelementptr i32, i32* %array_castA751, i32 0
  store i32 %derefference_valueB750, i32* %gepBX752, align 4
  br label %end_blockX724

cond_else_blockX727:                              ; preds = %cond_then_block713
  %eqtmp730 = icmp eq i32 %t1725, 200
  br i1 %eqtmp730, label %cond_then_block726, label %cond_else_blockX729
  br label %cond_else_blockX731

cond_else_blockX729:                              ; preds = %cond_else_blockX727, %cond_then_block713
  %eqtmp732 = icmp eq i32 %t1725, 180
  br i1 %eqtmp732, label %cond_then_block726, label %cond_else_blockX731
  br label %cond_else_blockX733

cond_else_blockX731:                              ; preds = %cond_else_blockX729, %cond_else_blockX727
  %eqtmp734 = icmp eq i32 %t1725, 183
  br i1 %eqtmp734, label %cond_then_block726, label %cond_else_blockX733
  br label %cond_else_blockX735

cond_else_blockX733:                              ; preds = %cond_else_blockX731, %cond_else_blockX729
  %eqtmp736 = icmp eq i32 %t1725, 185
  br i1 %eqtmp736, label %cond_then_block726, label %cond_else_blockX735
  br label %cond_else_blockX737

cond_else_blockX735:                              ; preds = %cond_else_blockX733, %cond_else_blockX731
  %eqtmp738 = icmp eq i32 %t1725, 186
  br i1 %eqtmp738, label %cond_then_block726, label %cond_else_blockX737

cond_else_blockX737:                              ; preds = %after_break753, %cond_else_blockX735, %cond_else_blockX733
  %eqtmp756 = icmp eq i32 %t1725, 181
  br i1 %eqtmp756, label %cond_then_block754, label %cond_else_blockX755
  br label %cond_else_blockX757

after_break753:                                   ; No predecessors!
  br label %cond_else_blockX737
  br label %cond_else_blockX755

cond_then_block754:                               ; preds = %cond_else_blockX757, %cond_else_blockX755, %cond_else_blockX737
  %cval761 = load %CValue, %CValue* %cval, align 16
  %st762 = load i32*, i32** %st, align 8
  %castAQ763 = bitcast i32* %st762 to %CString*
  %fieldIII764 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN765 = bitcast fp128* %fieldIII764 to %CString**
  store %CString* %castAQ763, %CString** %icastN765, align 8
  %cval766 = load %CValue, %CValue* %cval, align 16
  %ICASTO767 = bitcast %CValue* %cval to %CString**
  %cstr768 = load %CString*, %CString** %ICASTO767, align 8
  %st769 = load i32*, i32** %st, align 8
  %castAQ770 = bitcast i32* %st769 to i8*
  %ptrToIntC771 = ptrtoint i8* %castAQ770 to i64
  %add772 = add i64 %ptrToIntC771, 32
  %intToPtrB773 = inttoptr i64 %add772 to i8*
  %fieldTU774 = getelementptr inbounds %CString, %CString* %cstr768, i32 0, i32 1
  store i8* %intToPtrB773, i8** %fieldTU774, align 8
  %st775 = load i32*, i32** %st, align 8
  %cval776 = load %CValue, %CValue* %cval, align 16
  %ICASTO777 = bitcast %CValue* %cval to %CString**
  %cstr778 = load %CString*, %CString** %ICASTO777, align 8
  %fieldLLL779 = getelementptr inbounds %CString, %CString* %cstr778, i32 0, i32 0
  %size780 = load i32, i32* %fieldLLL779, align 4
  %icastD781 = sext i32 %size780 to i64
  %add782 = add i64 32, %icastD781
  %add783 = add i64 %add782, 3
  %rshifttmp784 = lshr i64 %add783, 2
  %ptrToIntC785 = ptrtoint i32* %st775 to i64
  %mul786 = mul i64 %rshifttmp784, 4
  %add787 = add i64 %ptrToIntC785, %mul786
  %intToPtrB788 = inttoptr i64 %add787 to i32*
  store i32* %intToPtrB788, i32** %st, align 8
  %cval789 = load %CValue, %CValue* %cval, align 16
  %ICASTO790 = bitcast %CValue* %cval to %CString**
  %cstr791 = load %CString*, %CString** %ICASTO790, align 8
  %fieldLLL792 = getelementptr inbounds %CString, %CString* %cstr791, i32 0, i32 0
  %size793 = load i32, i32* %fieldLLL792, align 4
  %icastD794 = sext i32 %size793 to i64
  %add795 = add i64 32, %icastD794
  %add796 = add i64 %add795, 3
  %rshifttmp797 = lshr i64 %add796, 2
  %ptrToIntI798 = ptrtoint i32* %intToPtrB788 to i64
  %mul799 = mul i64 %rshifttmp797, 4
  %sub800 = sub i64 %ptrToIntI798, %mul799
  %iintToPtrD801 = inttoptr i64 %sub800 to i32*
  br label %end_blockX724

cond_else_blockX755:                              ; preds = %cond_else_blockX737, %after_break753
  %eqtmp758 = icmp eq i32 %t1725, 184
  br i1 %eqtmp758, label %cond_then_block754, label %cond_else_blockX757
  br label %cond_else_blockX759

cond_else_blockX757:                              ; preds = %cond_else_blockX755, %cond_else_blockX737
  %eqtmp760 = icmp eq i32 %t1725, 206
  br i1 %eqtmp760, label %cond_then_block754, label %cond_else_blockX759

cond_else_blockX759:                              ; preds = %after_break802, %cond_else_blockX757, %cond_else_blockX755
  %eqtmp805 = icmp eq i32 %t1725, 192
  br i1 %eqtmp805, label %cond_then_block803, label %cond_else_blockX804
  br label %cond_else_blockX806

after_break802:                                   ; No predecessors!
  br label %cond_else_blockX759
  br label %cond_else_blockX804

cond_then_block803:                               ; preds = %cond_else_blockX806, %cond_else_blockX804, %cond_else_blockX759
  %cval810 = load %CValue, %CValue* %cval, align 16
  %fieldPPP811 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO812 = bitcast %CValue* %cval to [1 x i32]*
  %st813 = load i32*, i32** %st, align 8
  %element_addressAB814 = load i32*, i32** %st, align 8
  %element_addressXYXZY815 = getelementptr inbounds i32, i32* %element_addressAB814, i32 0
  %load_element816 = load i32, i32* %element_addressXYXZY815, align 4
  %array_castA817 = bitcast [1 x i32]* %ICASTO812 to i32*
  %gepBX818 = getelementptr i32, i32* %array_castA817, i32 0
  store i32 %load_element816, i32* %gepBX818, align 4
  %cval819 = load %CValue, %CValue* %cval, align 16
  %fieldPPP820 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO821 = bitcast %CValue* %cval to [1 x i32]*
  %st822 = load i32*, i32** %st, align 8
  %element_addressAB823 = load i32*, i32** %st, align 8
  %element_addressXYXZY824 = getelementptr inbounds i32, i32* %element_addressAB823, i32 1
  %load_element825 = load i32, i32* %element_addressXYXZY824, align 4
  %array_castA826 = bitcast [1 x i32]* %ICASTO821 to i32*
  %gepBX827 = getelementptr i32, i32* %array_castA826, i32 1
  store i32 %load_element825, i32* %gepBX827, align 4
  %st828 = load i32*, i32** %st, align 8
  %ptrToIntC829 = ptrtoint i32* %st828 to i64
  %add830 = add i64 %ptrToIntC829, 8
  %intToPtrB831 = inttoptr i64 %add830 to i32*
  store i32* %intToPtrB831, i32** %st, align 8
  %ptrToIntI832 = ptrtoint i32* %intToPtrB831 to i64
  %sub833 = sub i64 %ptrToIntI832, 8
  %iintToPtrD834 = inttoptr i64 %sub833 to i32*
  br label %end_blockX724

cond_else_blockX804:                              ; preds = %cond_else_blockX759, %after_break802
  %eqtmp807 = icmp eq i32 %t1725, 201
  br i1 %eqtmp807, label %cond_then_block803, label %cond_else_blockX806
  br label %cond_else_blockX808

cond_else_blockX806:                              ; preds = %cond_else_blockX804, %cond_else_blockX759
  %eqtmp809 = icmp eq i32 %t1725, 202
  br i1 %eqtmp809, label %cond_then_block803, label %cond_else_blockX808

cond_else_blockX808:                              ; preds = %after_break835, %cond_else_blockX806, %cond_else_blockX804
  %eqtmp838 = icmp eq i32 %t1725, 193
  br i1 %eqtmp838, label %cond_then_block836, label %cond_else_blockX837

after_break835:                                   ; No predecessors!
  br label %cond_else_blockX808
  br label %cond_else_blockX837

cond_then_block836:                               ; preds = %cond_else_blockX808
  %cval839 = load %CValue, %CValue* %cval, align 16
  %fieldPPP840 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO841 = bitcast %CValue* %cval to [1 x i32]*
  %st842 = load i32*, i32** %st, align 8
  %element_addressAB843 = load i32*, i32** %st, align 8
  %element_addressXYXZY844 = getelementptr inbounds i32, i32* %element_addressAB843, i32 0
  %load_element845 = load i32, i32* %element_addressXYXZY844, align 4
  %array_castA846 = bitcast [1 x i32]* %ICASTO841 to i32*
  %gepBX847 = getelementptr i32, i32* %array_castA846, i32 0
  store i32 %load_element845, i32* %gepBX847, align 4
  %cval848 = load %CValue, %CValue* %cval, align 16
  %fieldPPP849 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO850 = bitcast %CValue* %cval to [1 x i32]*
  %st851 = load i32*, i32** %st, align 8
  %element_addressAB852 = load i32*, i32** %st, align 8
  %element_addressXYXZY853 = getelementptr inbounds i32, i32* %element_addressAB852, i32 1
  %load_element854 = load i32, i32* %element_addressXYXZY853, align 4
  %array_castA855 = bitcast [1 x i32]* %ICASTO850 to i32*
  %gepBX856 = getelementptr i32, i32* %array_castA855, i32 1
  store i32 %load_element854, i32* %gepBX856, align 4
  %cval857 = load %CValue, %CValue* %cval, align 16
  %fieldPPP858 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO859 = bitcast %CValue* %cval to [1 x i32]*
  %st860 = load i32*, i32** %st, align 8
  %element_addressAB861 = load i32*, i32** %st, align 8
  %element_addressXYXZY862 = getelementptr inbounds i32, i32* %element_addressAB861, i32 2
  %load_element863 = load i32, i32* %element_addressXYXZY862, align 4
  %array_castA864 = bitcast [1 x i32]* %ICASTO859 to i32*
  %gepBX865 = getelementptr i32, i32* %array_castA864, i32 2
  store i32 %load_element863, i32* %gepBX865, align 4
  %cval866 = load %CValue, %CValue* %cval, align 16
  %fieldPPP867 = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %ICASTO868 = bitcast %CValue* %cval to [1 x i32]*
  %st869 = load i32*, i32** %st, align 8
  %element_addressAB870 = load i32*, i32** %st, align 8
  %element_addressXYXZY871 = getelementptr inbounds i32, i32* %element_addressAB870, i32 3
  %load_element872 = load i32, i32* %element_addressXYXZY871, align 4
  %array_castA873 = bitcast [1 x i32]* %ICASTO868 to i32*
  %gepBX874 = getelementptr i32, i32* %array_castA873, i32 3
  store i32 %load_element872, i32* %gepBX874, align 4
  %st875 = load i32*, i32** %st, align 8
  %ptrToIntC876 = ptrtoint i32* %st875 to i64
  %add877 = add i64 %ptrToIntC876, 16
  %intToPtrB878 = inttoptr i64 %add877 to i32*
  store i32* %intToPtrB878, i32** %st, align 8
  %ptrToIntI879 = ptrtoint i32* %intToPtrB878 to i64
  %sub880 = sub i64 %ptrToIntI879, 16
  %iintToPtrD881 = inttoptr i64 %sub880 to i32*
  br label %end_blockX724

cond_else_blockX837:                              ; preds = %after_break882, %cond_else_blockX808, %after_break835
  br label %cond_then_block883

after_break882:                                   ; No predecessors!
  br label %cond_else_blockX837
  br label %cond_else_blockX884

cond_then_block883:                               ; preds = %cond_else_blockX837
  br label %end_blockX724

cond_else_blockX884:                              ; preds = %after_break885, %after_break882
  br label %end_blockX724

after_break885:                                   ; No predecessors!
  br label %cond_else_blockX884

cond_jump_then890:                                ; preds = %end_blockX724
  br label %cond_end_block714

cond_end891:                                      ; preds = %after_break892, %end_blockX724
  %str893 = load %TokenString, %TokenString* %str, align 8
  %t1894 = load i32, i32* %t1, align 4
  %cval895 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %str, i32 %t1894, %CValue* %cval)
  br label %loop_continue_top_block

after_break892:                                   ; No predecessors!
  br label %cond_end891
}

define internal i32 @macro_subst_tok(%TokenString* %0, %Sym** %1, %Sym* %2, %macro_level** %3) {
entry:
  %andand390 = alloca i1, align 1
  %andand389 = alloca i1, align 1
  %oror315 = alloca i1, align 1
  %oror314 = alloca i1, align 1
  %oror313 = alloca i1, align 1
  %oror312 = alloca i1, align 1
  %oror258 = alloca i1, align 1
  %andand253 = alloca i1, align 1
  %oror248 = alloca i1, align 1
  %andand247 = alloca i1, align 1
  %andand208 = alloca i1, align 1
  %andand207 = alloca i1, align 1
  %oror160 = alloca i1, align 1
  %oror159 = alloca i1, align 1
  %oror158 = alloca i1, align 1
  %oror157 = alloca i1, align 1
  %oror151 = alloca i1, align 1
  %ml = alloca %macro_level*, align 8
  %andand = alloca i1, align 1
  %oror89 = alloca i1, align 1
  %oror88 = alloca i1, align 1
  %oror87 = alloca i1, align 1
  %oror86 = alloca i1, align 1
  %oror83 = alloca i1, align 1
  %size = alloca i32, align 4
  %tm = alloca %tm*, align 8
  %ti = alloca i64, align 8
  %oror = alloca i1, align 1
  %buf = alloca [32 x i8], align 1
  %cstr = alloca %CString, align 8
  %castXXXX5 = bitcast %CString* %cstr to i8*
  %4 = call i8* @memset(i8* %castXXXX5, i32 0, i64 32)
  %cval = alloca %CValue, align 16
  %cstrval = alloca i8*, align 8
  %str = alloca %TokenString, align 8
  %castXXXX = bitcast %TokenString* %str to i8*
  %5 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %spc = alloca i32, align 4
  %p = alloca i32*, align 8
  %t1 = alloca i32, align 4
  %t = alloca i32, align 4
  %mstr = alloca i32*, align 8
  %parlevel = alloca i32, align 4
  %mstr_allocated = alloca i32, align 4
  %sa1 = alloca %Sym*, align 8
  %sa = alloca %Sym*, align 8
  %args = alloca %Sym*, align 8
  %tok_str = alloca %TokenString*, align 8
  %tok_str1 = alloca %TokenString**, align 8
  store %TokenString* %0, %TokenString** %tok_str, align 8
  store %TokenString** %tok_str, %TokenString*** %tok_str1, align 8
  %nested_list = alloca %Sym**, align 8
  %nested_list2 = alloca %Sym***, align 8
  store %Sym** %1, %Sym*** %nested_list, align 8
  store %Sym*** %nested_list, %Sym**** %nested_list2, align 8
  %s = alloca %Sym*, align 8
  %s3 = alloca %Sym**, align 8
  store %Sym* %2, %Sym** %s, align 8
  store %Sym** %s, %Sym*** %s3, align 8
  %can_read_stream = alloca %macro_level**, align 8
  %can_read_stream4 = alloca %macro_level***, align 8
  store %macro_level** %3, %macro_level*** %can_read_stream, align 8
  store %macro_level*** %can_read_stream, %macro_level**** %can_read_stream4, align 8
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 326
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  %autocast = bitcast [32 x i8]* %buf to i8*
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL, align 4
  %fun_result = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 32, i8* bitcast ([3 x i8]* @81 to i8*), i32 %line_num)
  %autocast6 = bitcast [32 x i8]* %buf to i8*
  store i8* %autocast6, i8** %cstrval, align 8
  store i32 206, i32* %t1, align 4
  br label %macro_subst_tok.add_cstr1
  br label %cond_end

cond_jump_elif0:                                  ; preds = %entry
  %tok7 = load i32, i32* @tok, align 4
  %eq8 = icmp eq i32 %tok7, 327
  br i1 %eq8, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %file9 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU = getelementptr inbounds %BufferedFile, %BufferedFile* %file9, i32 0, i32 9
  %autocast10 = bitcast [1024 x i8]* %fieldRRRROOU to i8*
  store i8* %autocast10, i8** %cstrval, align 8
  br label %macro_subst_tok.add_cstr
  br label %cond_end

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %tok11 = load i32, i32* @tok, align 4
  %eq12 = icmp eq i32 %tok11, 328
  store i1 %eq12, i1* %oror, align 1
  br i1 %eq12, label %cond_jump_end, label %cond_jump_then13

cond_jump_elif_then1:                             ; preds = %cond_jump_end
  %ti17 = load i64, i64* %ti, align 4
  %fun_result18 = call i64 @time(i64* %ti)
  %ti19 = load i64, i64* %ti, align 4
  %fun_result20 = call %tm* @localtime(i64* %ti)
  store %tm* %fun_result20, %tm** %tm, align 8
  %tok21 = load i32, i32* @tok, align 4
  %eq22 = icmp eq i32 %tok21, 328
  br i1 %eq22, label %cond_jump_then23, label %cond_else_block24

cond_else_block:                                  ; preds = %cond_jump_end
  %s71 = load %Sym*, %Sym** %s, align 8
  %fieldLLL72 = getelementptr inbounds %Sym, %Sym* %s71, i32 0, i32 2
  %c = load i64, i64* %fieldLLL72, align 4
  %castBA = inttoptr i64 %c to i32*
  store i32* %castBA, i32** %mstr, align 8
  store i32 0, i32* %mstr_allocated, align 4
  %s73 = load %Sym*, %Sym** %s, align 8
  %fieldLLL74 = getelementptr inbounds %Sym, %Sym* %s73, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL74, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL74, i32 0, i32 0
  %t75 = load i32, i32* %fieldVVV, align 4
  %eq76 = icmp eq i32 %t75, 1
  br i1 %eq76, label %cond_jump_then77, label %cond_end78

cond_end:                                         ; preds = %cond_end472, %cstr_ccat_end, %cond_jump_elif_then0, %cond_jump_then
  ret i32 0

macro_subst_tok.add_cstr1:                        ; preds = %macro_subst_tok.add_cstr, %cond_jump_then
  %cstr43 = load %CString, %CString* %cstr, align 8
  call void @cstr_new(%CString* %cstr)
  %cstr44 = load %CString, %CString* %cstr, align 8
  %cstrval45 = load i8*, i8** %cstrval, align 8
  call void @cstr_cat(%CString* %cstr, i8* %cstrval45)
  %cstr46 = load %CString, %CString* %cstr, align 8
  store i32 2488, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.77, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %cstr_ccat

macro_subst_tok.add_cstr:                         ; preds = %cond_end25, %cond_jump_elif_then0
  store i32 181, i32* %t1, align 4
  br label %macro_subst_tok.add_cstr1

cond_jump_then13:                                 ; preds = %cond_jump_elif1
  %tok14 = load i32, i32* @tok, align 4
  %eq15 = icmp eq i32 %tok14, 329
  %oror16 = or i1 %eq12, %eq15
  store i1 %oror16, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then13, %cond_jump_elif1
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_elif_then1, label %cond_else_block

cond_jump_then23:                                 ; preds = %cond_jump_elif_then1
  %autocast26 = bitcast [32 x i8]* %buf to i8*
  %tm27 = load %tm*, %tm** %tm, align 8
  %fieldLLL28 = getelementptr inbounds %tm, %tm* %tm27, i32 0, i32 4
  %tm_mon = load i32, i32* %fieldLLL28, align 4
  %GEPX = getelementptr [12 x [4 x i8]], [12 x [4 x i8]]* @ab_month_name, i64 0, i32 %tm_mon
  %array_castH = bitcast [4 x i8]* %GEPX to i8*
  %tm29 = load %tm*, %tm** %tm, align 8
  %fieldLLL30 = getelementptr inbounds %tm, %tm* %tm29, i32 0, i32 3
  %tm_mday = load i32, i32* %fieldLLL30, align 4
  %tm31 = load %tm*, %tm** %tm, align 8
  %fieldLLL32 = getelementptr inbounds %tm, %tm* %tm31, i32 0, i32 5
  %tm_year = load i32, i32* %fieldLLL32, align 4
  %add = add i32 %tm_year, 1900
  %fun_result33 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast26, i64 32, i8* bitcast ([10 x i8]* @82 to i8*), i8* %array_castH, i32 %tm_mday, i32 %add)
  br label %cond_end25

cond_else_block24:                                ; preds = %cond_jump_elif_then1
  %autocast34 = bitcast [32 x i8]* %buf to i8*
  %tm35 = load %tm*, %tm** %tm, align 8
  %fieldLLL36 = getelementptr inbounds %tm, %tm* %tm35, i32 0, i32 2
  %tm_hour = load i32, i32* %fieldLLL36, align 4
  %tm37 = load %tm*, %tm** %tm, align 8
  %fieldLLL38 = getelementptr inbounds %tm, %tm* %tm37, i32 0, i32 1
  %tm_min = load i32, i32* %fieldLLL38, align 4
  %tm39 = load %tm*, %tm** %tm, align 8
  %fieldLLL40 = getelementptr inbounds %tm, %tm* %tm39, i32 0, i32 0
  %tm_sec = load i32, i32* %fieldLLL40, align 4
  %fun_result41 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast34, i64 32, i8* bitcast ([15 x i8]* @83 to i8*), i32 %tm_hour, i32 %tm_min, i32 %tm_sec)
  br label %cond_end25

cond_end25:                                       ; preds = %cond_else_block24, %cond_jump_then23
  %autocast42 = bitcast [32 x i8]* %buf to i8*
  store i8* %autocast42, i8** %cstrval, align 8
  br label %macro_subst_tok.add_cstr

cstr_ccat:                                        ; preds = %macro_subst_tok.add_cstr1
  %cstr47 = alloca %CString*, align 8
  store %CString* %cstr, %CString** %cstr47, align 8
  %ch = alloca i32, align 4
  store i32 0, i32* %ch, align 4
  %cstr48 = load %CString*, %CString** %cstr47, align 8
  %fieldLLL49 = getelementptr inbounds %CString, %CString* %cstr48, i32 0, i32 0
  %size50 = load i32, i32* %fieldLLL49, align 4
  %add51 = add i32 %size50, 1
  store i32 %add51, i32* %size, align 4
  %size52 = load i32, i32* %size, align 4
  %cstr53 = load %CString*, %CString** %cstr47, align 8
  %fieldLLL54 = getelementptr inbounds %CString, %CString* %cstr53, i32 0, i32 2
  %size_allocated = load i32, i32* %fieldLLL54, align 4
  %gt = icmp sgt i32 %size52, %size_allocated
  br i1 %gt, label %cond_jump_then55, label %cond_end56

cstr_ccat_end:                                    ; preds = %cond_end56
  %cval65 = load %CValue, %CValue* %cval, align 16
  %cstr66 = load %CString, %CString* %cstr, align 8
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to %CString**
  store %CString* %cstr, %CString** %icastN, align 8
  %tok_str67 = load %TokenString*, %TokenString** %tok_str, align 8
  %t168 = load i32, i32* %t1, align 4
  %cval69 = load %CValue, %CValue* %cval, align 16
  call void @tok_str_add2(%TokenString* %tok_str67, i32 %t168, %CValue* %cval)
  %cstr70 = load %CString, %CString* %cstr, align 8
  call void @cstr_free(%CString* %cstr)
  br label %cond_end

cond_jump_then55:                                 ; preds = %cstr_ccat
  %cstr57 = load %CString*, %CString** %cstr47, align 8
  %size58 = load i32, i32* %size, align 4
  call void @cstr_realloc(%CString* %cstr57, i32 %size58)
  br label %cond_end56

cond_end56:                                       ; preds = %cond_jump_then55, %cstr_ccat
  %cstr59 = load %CString*, %CString** %cstr47, align 8
  %fieldLLL60 = getelementptr inbounds %CString, %CString* %cstr59, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL60, align 8
  %size61 = load i32, i32* %size, align 4
  %sub = sub i32 %size61, 1
  %ch62 = load i32, i32* %ch, align 4
  %icastJ = trunc i32 %ch62 to i8
  %element_addressXYXY = getelementptr i8, i8* %data, i32 %sub
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %cstr63 = load %CString*, %CString** %cstr47, align 8
  %size64 = load i32, i32* %size, align 4
  %fieldTU = getelementptr inbounds %CString, %CString* %cstr63, i32 0, i32 0
  store i32 %size64, i32* %fieldTU, align 4
  br label %cstr_ccat_end

cond_jump_then77:                                 ; preds = %cond_else_block
  br label %macro_subst_tok.redo

cond_end78:                                       ; preds = %cond_end_block433, %cond_else_block
  %nested_list446 = load %Sym**, %Sym*** %nested_list, align 8
  %s447 = load %Sym*, %Sym** %s, align 8
  %fieldLLL448 = getelementptr inbounds %Sym, %Sym* %s447, i32 0, i32 0
  %v449 = load i32, i32* %fieldLLL448, align 4
  %fun_result450 = call %Sym* @sym_push2(%Sym** %nested_list446, i32 %v449, i32 0, i64 0)
  %tok_str451 = load %TokenString*, %TokenString** %tok_str, align 8
  %nested_list452 = load %Sym**, %Sym*** %nested_list, align 8
  %mstr453 = load i32*, i32** %mstr, align 8
  %can_read_stream454 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  call void @macro_subst(%TokenString* %tok_str451, %Sym** %nested_list452, i32* %mstr453, %macro_level** %can_read_stream454)
  %nested_list455 = load %Sym**, %Sym*** %nested_list, align 8
  %derefference_valueB456 = load %Sym*, %Sym** %nested_list455, align 8
  store %Sym* %derefference_valueB456, %Sym** %sa1, align 8
  %nested_list457 = load %Sym**, %Sym*** %nested_list, align 8
  %sa1458 = load %Sym*, %Sym** %sa1, align 8
  %fieldLLL459 = getelementptr inbounds %Sym, %Sym* %sa1458, i32 0, i32 5
  %prev460 = load %Sym*, %Sym** %fieldLLL459, align 8
  store %Sym* %prev460, %Sym** %nested_list457, align 8
  %sa1461 = load %Sym*, %Sym** %sa1, align 8
  store i32 2594, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.84, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_free462

macro_subst_tok.redo:                             ; preds = %cond_end139, %cond_jump_then77
  %macro_ptr = load i32*, i32** @macro_ptr, align 8
  %icmpB = icmp ne i32* %macro_ptr, null
  br i1 %icmpB, label %cond_jump_then79, label %cond_else_block80

cond_jump_then79:                                 ; preds = %macro_subst_tok.redo
  %macro_ptr82 = load i32*, i32** @macro_ptr, align 8
  store i32* %macro_ptr82, i32** %p, align 8
  br label %loop_top_block

cond_else_block80:                                ; preds = %macro_subst_tok.redo
  %file148 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL149 = getelementptr inbounds %BufferedFile, %BufferedFile* %file148, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL149, align 8
  %element_addressAB = load i8*, i8** %fieldLLL149, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  store i32 %icastKY, i32* @ch, align 4
  br label %loop_top_block150

cond_end81:                                       ; preds = %cond_end_block197, %cond_end133
  %t199 = load i32, i32* %t, align 4
  %not_eq = icmp ne i32 %t199, 40
  br i1 %not_eq, label %cond_jump_then200, label %cond_end201

loop_top_block:                                   ; preds = %cond_then_block, %cond_jump_then79
  %p84 = load i32*, i32** %p, align 8
  %derefference_valueB = load i32, i32* %p84, align 4
  store i32 %derefference_valueB, i32* %t, align 4
  store i32 2501, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.78, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

is_space:                                         ; preds = %loop_top_block
  %inline_result_variable = alloca i32, align 4
  %ch85 = alloca i32, align 4
  store i32 %derefference_valueB, i32* %ch85, align 4
  %ch90 = load i32, i32* %ch85, align 4
  %eq91 = icmp eq i32 %ch90, 32
  store i1 %eq91, i1* %oror89, align 1
  br i1 %eq91, label %cond_jump_end93, label %cond_jump_then92

is_space_end:                                     ; preds = %cond_jump_end111
  %inline_result_variable116 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable116, 0
  store i1 %icmpA, i1* %oror83, align 1
  br i1 %icmpA, label %cond_jump_end118, label %cond_jump_then117

cond_jump_then92:                                 ; preds = %is_space
  %ch94 = load i32, i32* %ch85, align 4
  %eq95 = icmp eq i32 %ch94, 9
  %oror96 = or i1 %eq91, %eq95
  store i1 %oror96, i1* %oror89, align 1
  br label %cond_jump_end93

cond_jump_end93:                                  ; preds = %cond_jump_then92, %is_space
  %oror_result_value97 = load i1, i1* %oror89, align 1
  store i1 %oror_result_value97, i1* %oror88, align 1
  br i1 %oror_result_value97, label %cond_jump_end99, label %cond_jump_then98

cond_jump_then98:                                 ; preds = %cond_jump_end93
  %ch100 = load i32, i32* %ch85, align 4
  %eq101 = icmp eq i32 %ch100, 11
  %oror102 = or i1 %oror_result_value97, %eq101
  store i1 %oror102, i1* %oror88, align 1
  br label %cond_jump_end99

cond_jump_end99:                                  ; preds = %cond_jump_then98, %cond_jump_end93
  %oror_result_value103 = load i1, i1* %oror88, align 1
  store i1 %oror_result_value103, i1* %oror87, align 1
  br i1 %oror_result_value103, label %cond_jump_end105, label %cond_jump_then104

cond_jump_then104:                                ; preds = %cond_jump_end99
  %ch106 = load i32, i32* %ch85, align 4
  %eq107 = icmp eq i32 %ch106, 12
  %oror108 = or i1 %oror_result_value103, %eq107
  store i1 %oror108, i1* %oror87, align 1
  br label %cond_jump_end105

cond_jump_end105:                                 ; preds = %cond_jump_then104, %cond_jump_end99
  %oror_result_value109 = load i1, i1* %oror87, align 1
  store i1 %oror_result_value109, i1* %oror86, align 1
  br i1 %oror_result_value109, label %cond_jump_end111, label %cond_jump_then110

cond_jump_then110:                                ; preds = %cond_jump_end105
  %ch112 = load i32, i32* %ch85, align 4
  %eq113 = icmp eq i32 %ch112, 13
  %oror114 = or i1 %oror_result_value109, %eq113
  store i1 %oror114, i1* %oror86, align 1
  br label %cond_jump_end111

cond_jump_end111:                                 ; preds = %cond_jump_then110, %cond_jump_end105
  %oror_result_value115 = load i1, i1* %oror86, align 1
  %icastKX = zext i1 %oror_result_value115 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_space_end

cond_jump_then117:                                ; preds = %is_space_end
  %t119 = load i32, i32* %t, align 4
  %eq120 = icmp eq i32 10, %t119
  %oror121 = or i1 %icmpA, %eq120
  store i1 %oror121, i1* %oror83, align 1
  br label %cond_jump_end118

cond_jump_end118:                                 ; preds = %cond_jump_then117, %is_space_end
  %oror_result_value122 = load i1, i1* %oror83, align 1
  br i1 %oror_result_value122, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end118
  %p123 = load i32*, i32** %p, align 8
  %ptrToIntC = ptrtoint i32* %p123 to i64
  %add124 = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add124 to i32*
  store i32* %intToPtrB, i32** %p, align 8
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end118
  %t125 = load i32, i32* %t, align 4
  %eq126 = icmp eq i32 %t125, 0
  store i1 %eq126, i1* %andand, align 1
  br i1 %eq126, label %cond_jump_then127, label %cond_jump_end128

cond_jump_then127:                                ; preds = %cond_end_block
  %can_read_stream129 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %icmpB130 = icmp ne %macro_level** %can_read_stream129, null
  %andand131 = and i1 %eq126, %icmpB130
  store i1 %andand131, i1* %andand, align 1
  br label %cond_jump_end128

cond_jump_end128:                                 ; preds = %cond_jump_then127, %cond_end_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then132, label %cond_end133

cond_jump_then132:                                ; preds = %cond_jump_end128
  %can_read_stream134 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %derefference_valueB135 = load %macro_level*, %macro_level** %can_read_stream134, align 8
  store %macro_level* %derefference_valueB135, %macro_level** %ml, align 8
  store i32* null, i32** @macro_ptr, align 8
  %ml136 = load %macro_level*, %macro_level** %ml, align 8
  %icmpB137 = icmp ne %macro_level* %ml136, null
  br i1 %icmpB137, label %cond_jump_then138, label %cond_end139

cond_end133:                                      ; preds = %cond_end139, %cond_jump_end128
  br label %cond_end81

cond_jump_then138:                                ; preds = %cond_jump_then132
  %ml140 = load %macro_level*, %macro_level** %ml, align 8
  %fieldLLL141 = getelementptr inbounds %macro_level, %macro_level* %ml140, i32 0, i32 1
  %p142 = load i32*, i32** %fieldLLL141, align 8
  store i32* %p142, i32** @macro_ptr, align 8
  %ml143 = load %macro_level*, %macro_level** %ml, align 8
  %fieldTU144 = getelementptr inbounds %macro_level, %macro_level* %ml143, i32 0, i32 1
  store i32* null, i32** %fieldTU144, align 8
  %can_read_stream145 = load %macro_level**, %macro_level*** %can_read_stream, align 8
  %ml146 = load %macro_level*, %macro_level** %ml, align 8
  %fieldLLL147 = getelementptr inbounds %macro_level, %macro_level* %ml146, i32 0, i32 0
  %prev = load %macro_level*, %macro_level** %fieldLLL147, align 8
  store %macro_level* %prev, %macro_level** %can_read_stream145, align 8
  br label %cond_end139

cond_end139:                                      ; preds = %cond_jump_then138, %cond_jump_then132
  br label %macro_subst_tok.redo
  br label %cond_end133

loop_top_block150:                                ; preds = %cond_then_block196, %cond_else_block80
  %ch152 = load i32, i32* @ch, align 4
  store i32 2519, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.79, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space153

is_space153:                                      ; preds = %loop_top_block150
  %inline_result_variable154 = alloca i32, align 4
  %ch155 = alloca i32, align 4
  store i32 %ch152, i32* %ch155, align 4
  %ch161 = load i32, i32* %ch155, align 4
  %eq162 = icmp eq i32 %ch161, 32
  store i1 %eq162, i1* %oror160, align 1
  br i1 %eq162, label %cond_jump_end164, label %cond_jump_then163

is_space_end156:                                  ; preds = %cond_jump_end182
  %inline_result_variable188 = load i32, i32* %inline_result_variable154, align 4
  %icmpA189 = icmp ne i32 %inline_result_variable188, 0
  store i1 %icmpA189, i1* %oror151, align 1
  br i1 %icmpA189, label %cond_jump_end191, label %cond_jump_then190

cond_jump_then163:                                ; preds = %is_space153
  %ch165 = load i32, i32* %ch155, align 4
  %eq166 = icmp eq i32 %ch165, 9
  %oror167 = or i1 %eq162, %eq166
  store i1 %oror167, i1* %oror160, align 1
  br label %cond_jump_end164

cond_jump_end164:                                 ; preds = %cond_jump_then163, %is_space153
  %oror_result_value168 = load i1, i1* %oror160, align 1
  store i1 %oror_result_value168, i1* %oror159, align 1
  br i1 %oror_result_value168, label %cond_jump_end170, label %cond_jump_then169

cond_jump_then169:                                ; preds = %cond_jump_end164
  %ch171 = load i32, i32* %ch155, align 4
  %eq172 = icmp eq i32 %ch171, 11
  %oror173 = or i1 %oror_result_value168, %eq172
  store i1 %oror173, i1* %oror159, align 1
  br label %cond_jump_end170

cond_jump_end170:                                 ; preds = %cond_jump_then169, %cond_jump_end164
  %oror_result_value174 = load i1, i1* %oror159, align 1
  store i1 %oror_result_value174, i1* %oror158, align 1
  br i1 %oror_result_value174, label %cond_jump_end176, label %cond_jump_then175

cond_jump_then175:                                ; preds = %cond_jump_end170
  %ch177 = load i32, i32* %ch155, align 4
  %eq178 = icmp eq i32 %ch177, 12
  %oror179 = or i1 %oror_result_value174, %eq178
  store i1 %oror179, i1* %oror158, align 1
  br label %cond_jump_end176

cond_jump_end176:                                 ; preds = %cond_jump_then175, %cond_jump_end170
  %oror_result_value180 = load i1, i1* %oror158, align 1
  store i1 %oror_result_value180, i1* %oror157, align 1
  br i1 %oror_result_value180, label %cond_jump_end182, label %cond_jump_then181

cond_jump_then181:                                ; preds = %cond_jump_end176
  %ch183 = load i32, i32* %ch155, align 4
  %eq184 = icmp eq i32 %ch183, 13
  %oror185 = or i1 %oror_result_value180, %eq184
  store i1 %oror185, i1* %oror157, align 1
  br label %cond_jump_end182

cond_jump_end182:                                 ; preds = %cond_jump_then181, %cond_jump_end176
  %oror_result_value186 = load i1, i1* %oror157, align 1
  %icastKX187 = zext i1 %oror_result_value186 to i32
  store i32 %icastKX187, i32* %inline_result_variable154, align 4
  br label %is_space_end156

cond_jump_then190:                                ; preds = %is_space_end156
  %ch192 = load i32, i32* @ch, align 4
  %eq193 = icmp eq i32 %ch192, 10
  %oror194 = or i1 %icmpA189, %eq193
  store i1 %oror194, i1* %oror151, align 1
  br label %cond_jump_end191

cond_jump_end191:                                 ; preds = %cond_jump_then190, %is_space_end156
  %oror_result_value195 = load i1, i1* %oror151, align 1
  br i1 %oror_result_value195, label %cond_then_block196, label %cond_end_block197

cond_then_block196:                               ; preds = %cond_jump_end191
  call void @minp()
  br label %loop_top_block150

cond_end_block197:                                ; preds = %cond_jump_end191
  %ch198 = load i32, i32* @ch, align 4
  store i32 %ch198, i32* %t, align 4
  br label %cond_end81

cond_jump_then200:                                ; preds = %cond_end81
  ret i32 -1

cond_end201:                                      ; preds = %cond_end81
  call void @next_nomacro()
  call void @next_nomacro()
  store %Sym* null, %Sym** %args, align 8
  %s202 = load %Sym*, %Sym** %s, align 8
  %fieldLLL203 = getelementptr inbounds %Sym, %Sym* %s202, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL203, align 8
  store %Sym* %next, %Sym** %sa, align 8
  br label %loop_top_block204

loop_continue_top_block:                          ; preds = %cond_end415, %cond_jump_then408
  br label %loop_top_block204

loop_top_block204:                                ; preds = %loop_continue_top_block, %cond_end201
  br i1 true, label %cond_then_block205, label %cond_end_block206

cond_then_block205:                               ; preds = %loop_top_block204
  %args209 = load %Sym*, %Sym** %args, align 8
  %logical_denial = icmp eq %Sym* %args209, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA210 = icmp ne i32 %castOOOO, 0
  store i1 %icmpA210, i1* %andand208, align 1
  br i1 %icmpA210, label %cond_jump_then211, label %cond_jump_end212

cond_end_block206:                                ; preds = %cond_else_block409, %cond_jump_then225, %loop_top_block204
  %sa416 = load %Sym*, %Sym** %sa, align 8
  %icmpB417 = icmp ne %Sym* %sa416, null
  br i1 %icmpB417, label %cond_jump_then418, label %cond_end419

cond_jump_then211:                                ; preds = %cond_then_block205
  %sa213 = load %Sym*, %Sym** %sa, align 8
  %logical_denial214 = icmp eq %Sym* %sa213, null
  %castOOOO215 = zext i1 %logical_denial214 to i32
  %icmpA216 = icmp ne i32 %castOOOO215, 0
  %andand217 = and i1 %icmpA210, %icmpA216
  store i1 %andand217, i1* %andand208, align 1
  br label %cond_jump_end212

cond_jump_end212:                                 ; preds = %cond_jump_then211, %cond_then_block205
  %andand_result_value218 = load i1, i1* %andand208, align 1
  store i1 %andand_result_value218, i1* %andand207, align 1
  br i1 %andand_result_value218, label %cond_jump_then219, label %cond_jump_end220

cond_jump_then219:                                ; preds = %cond_jump_end212
  %tok221 = load i32, i32* @tok, align 4
  %eq222 = icmp eq i32 %tok221, 41
  %andand223 = and i1 %andand_result_value218, %eq222
  store i1 %andand223, i1* %andand207, align 1
  br label %cond_jump_end220

cond_jump_end220:                                 ; preds = %cond_jump_then219, %cond_jump_end212
  %andand_result_value224 = load i1, i1* %andand207, align 1
  br i1 %andand_result_value224, label %cond_jump_then225, label %cond_end226

cond_jump_then225:                                ; preds = %cond_jump_end220
  br label %cond_end_block206

cond_end226:                                      ; preds = %after_break, %cond_jump_end220
  %sa227 = load %Sym*, %Sym** %sa, align 8
  %logical_denial228 = icmp eq %Sym* %sa227, null
  %castOOOO229 = zext i1 %logical_denial228 to i32
  %icmpA230 = icmp ne i32 %castOOOO229, 0
  br i1 %icmpA230, label %cond_jump_then231, label %cond_end232

after_break:                                      ; No predecessors!
  br label %cond_end226

cond_jump_then231:                                ; preds = %cond_end226
  %s233 = load %Sym*, %Sym** %s, align 8
  %fieldLLL234 = getelementptr inbounds %Sym, %Sym* %s233, i32 0, i32 0
  %v = load i32, i32* %fieldLLL234, align 4
  %fun_result235 = call i8* @get_tok_str(i32 %v, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([35 x i8]* @84 to i8*), i8* %fun_result235)
  br label %cond_end232

cond_end232:                                      ; preds = %cond_jump_then231, %cond_end226
  %str236 = load %TokenString, %TokenString* %str, align 8
  store i32 2539, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.80, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_str_new

tok_str_new:                                      ; preds = %cond_end232
  %s237 = alloca %TokenString*, align 8
  store %TokenString* %str, %TokenString** %s237, align 8
  %s238 = load %TokenString*, %TokenString** %s237, align 8
  %fieldTU239 = getelementptr inbounds %TokenString, %TokenString* %s238, i32 0, i32 0
  store i32* null, i32** %fieldTU239, align 8
  %s240 = load %TokenString*, %TokenString** %s237, align 8
  %fieldTU241 = getelementptr inbounds %TokenString, %TokenString* %s240, i32 0, i32 1
  store i32 0, i32* %fieldTU241, align 4
  %s242 = load %TokenString*, %TokenString** %s237, align 8
  %fieldTU243 = getelementptr inbounds %TokenString, %TokenString* %s242, i32 0, i32 2
  store i32 0, i32* %fieldTU243, align 4
  %s244 = load %TokenString*, %TokenString** %s237, align 8
  %fieldTU245 = getelementptr inbounds %TokenString, %TokenString* %s244, i32 0, i32 3
  store i32 -1, i32* %fieldTU245, align 4
  br label %tok_str_new_end

tok_str_new_end:                                  ; preds = %tok_str_new
  store i32 0, i32* %spc, align 4
  store i32 0, i32* %parlevel, align 4
  br label %loop_top_block246

loop_top_block246:                                ; preds = %cond_end360, %tok_str_new_end
  %parlevel249 = load i32, i32* %parlevel, align 4
  %gt250 = icmp sgt i32 %parlevel249, 0
  store i1 %gt250, i1* %oror248, align 1
  br i1 %gt250, label %cond_jump_end252, label %cond_jump_then251

cond_jump_then251:                                ; preds = %loop_top_block246
  %tok254 = load i32, i32* @tok, align 4
  %not_eq255 = icmp ne i32 %tok254, 41
  store i1 %not_eq255, i1* %andand253, align 1
  br i1 %not_eq255, label %cond_jump_then256, label %cond_jump_end257

cond_jump_end252:                                 ; preds = %cond_jump_end257, %loop_top_block246
  %oror_result_value274 = load i1, i1* %oror248, align 1
  store i1 %oror_result_value274, i1* %andand247, align 1
  br i1 %oror_result_value274, label %cond_jump_then275, label %cond_jump_end276

cond_jump_then256:                                ; preds = %cond_jump_then251
  %tok259 = load i32, i32* @tok, align 4
  %not_eq260 = icmp ne i32 %tok259, 44
  store i1 %not_eq260, i1* %oror258, align 1
  br i1 %not_eq260, label %cond_jump_end262, label %cond_jump_then261

cond_jump_end257:                                 ; preds = %cond_jump_end262, %cond_jump_then251
  %andand_result_value272 = load i1, i1* %andand253, align 1
  %oror273 = or i1 %gt250, %andand_result_value272
  store i1 %oror273, i1* %oror248, align 1
  br label %cond_jump_end252

cond_jump_then261:                                ; preds = %cond_jump_then256
  %sa263 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL264 = getelementptr inbounds %Sym, %Sym* %sa263, i32 0, i32 3
  %type265 = load %CType, %CType* %fieldLLL264, align 8
  %fieldVVV266 = getelementptr inbounds %CType, %CType* %fieldLLL264, i32 0, i32 0
  %t267 = load i32, i32* %fieldVVV266, align 4
  %icmpA268 = icmp ne i32 %t267, 0
  %oror269 = or i1 %not_eq260, %icmpA268
  store i1 %oror269, i1* %oror258, align 1
  br label %cond_jump_end262

cond_jump_end262:                                 ; preds = %cond_jump_then261, %cond_jump_then256
  %oror_result_value270 = load i1, i1* %oror258, align 1
  %andand271 = and i1 %not_eq255, %oror_result_value270
  store i1 %andand271, i1* %andand253, align 1
  br label %cond_jump_end257

cond_jump_then275:                                ; preds = %cond_jump_end252
  %tok277 = load i32, i32* @tok, align 4
  %not_eq278 = icmp ne i32 %tok277, -1
  %andand279 = and i1 %oror_result_value274, %not_eq278
  store i1 %andand279, i1* %andand247, align 1
  br label %cond_jump_end276

cond_jump_end276:                                 ; preds = %cond_jump_then275, %cond_jump_end252
  %andand_result_value280 = load i1, i1* %andand247, align 1
  br i1 %andand_result_value280, label %cond_then_block281, label %cond_end_block282

cond_then_block281:                               ; preds = %cond_jump_end276
  %tok283 = load i32, i32* @tok, align 4
  %eq284 = icmp eq i32 %tok283, 40
  br i1 %eq284, label %cond_jump_then285, label %cond_jump_elif0286

cond_end_block282:                                ; preds = %cond_jump_end276
  %str363 = load %TokenString, %TokenString* %str, align 8
  %str364 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV365 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  %len = load i32, i32* %fieldVVV365, align 4
  %spc366 = load i32, i32* %spc, align 4
  %sub367 = sub i32 %len, %spc366
  %fieldTTT = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 1
  store i32 %sub367, i32* %fieldTTT, align 4
  %str368 = load %TokenString, %TokenString* %str, align 8
  call void @tok_str_add(%TokenString* %str, i32 0)
  %args369 = load %Sym*, %Sym** %args, align 8
  %sa370 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL371 = getelementptr inbounds %Sym, %Sym* %sa370, i32 0, i32 0
  %v372 = load i32, i32* %fieldLLL371, align 4
  %andtmp = and i32 %v372, -536870913
  %sa373 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL374 = getelementptr inbounds %Sym, %Sym* %sa373, i32 0, i32 3
  %type375 = load %CType, %CType* %fieldLLL374, align 8
  %fieldVVV376 = getelementptr inbounds %CType, %CType* %fieldLLL374, i32 0, i32 0
  %t377 = load i32, i32* %fieldVVV376, align 4
  %str378 = load %TokenString, %TokenString* %str, align 8
  %fieldVVV379 = getelementptr inbounds %TokenString, %TokenString* %str, i32 0, i32 0
  %str380 = load i32*, i32** %fieldVVV379, align 8
  %icatXXXXXX = ptrtoint i32* %str380 to i64
  %fun_result381 = call %Sym* @sym_push2(%Sym** %args, i32 %andtmp, i32 %t377, i64 %icatXXXXXX)
  %sa382 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL383 = getelementptr inbounds %Sym, %Sym* %sa382, i32 0, i32 4
  %next384 = load %Sym*, %Sym** %fieldLLL383, align 8
  store %Sym* %next384, %Sym** %sa, align 8
  %tok385 = load i32, i32* @tok, align 4
  %eq386 = icmp eq i32 %tok385, 41
  br i1 %eq386, label %cond_jump_then387, label %cond_end388

cond_jump_then285:                                ; preds = %cond_then_block281
  %parlevel289 = load i32, i32* %parlevel, align 4
  %add290 = add i32 %parlevel289, 1
  store i32 %add290, i32* %parlevel, align 4
  %parlevel291 = load i32, i32* %parlevel, align 4
  %sub292 = sub i32 %parlevel291, 1
  br label %cond_end288

cond_jump_elif0286:                               ; preds = %cond_then_block281
  %tok293 = load i32, i32* @tok, align 4
  %eq294 = icmp eq i32 %tok293, 41
  br i1 %eq294, label %cond_jump_elif_then0287, label %cond_end288

cond_jump_elif_then0287:                          ; preds = %cond_jump_elif0286
  %parlevel295 = load i32, i32* %parlevel, align 4
  %sub296 = sub i32 %parlevel295, 1
  store i32 %sub296, i32* %parlevel, align 4
  %add297 = add i32 %sub296, 1
  br label %cond_end288

cond_end288:                                      ; preds = %cond_jump_elif_then0287, %cond_jump_elif0286, %cond_jump_then285
  %tok298 = load i32, i32* @tok, align 4
  %eq299 = icmp eq i32 %tok298, 10
  br i1 %eq299, label %cond_jump_then300, label %cond_end301

cond_jump_then300:                                ; preds = %cond_end288
  store i32 32, i32* @tok, align 4
  br label %cond_end301

cond_end301:                                      ; preds = %cond_jump_then300, %cond_end288
  %tok302 = load i32, i32* @tok, align 4
  %spc303 = load i32, i32* %spc, align 4
  store i32 2552, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.81, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %check_space

check_space:                                      ; preds = %cond_end301
  %inline_result_variable304 = alloca i32, align 4
  %t305 = alloca i32, align 4
  store i32 %tok302, i32* %t305, align 4
  %spc306 = alloca i32*, align 8
  store i32* %spc, i32** %spc306, align 8
  %t307 = load i32, i32* %t305, align 4
  store i32 2552, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.82, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space308

check_space_end:                                  ; preds = %cond_end347, %cond_jump_then351
  %inline_result_variable355 = load i32, i32* %inline_result_variable304, align 4
  %logical_denial356 = icmp eq i32 %inline_result_variable355, 0
  %castOOOO357 = zext i1 %logical_denial356 to i32
  %icmpA358 = icmp ne i32 %castOOOO357, 0
  br i1 %icmpA358, label %cond_jump_then359, label %cond_end360

is_space308:                                      ; preds = %check_space
  %inline_result_variable309 = alloca i32, align 4
  %ch310 = alloca i32, align 4
  store i32 %t307, i32* %ch310, align 4
  %ch316 = load i32, i32* %ch310, align 4
  %eq317 = icmp eq i32 %ch316, 32
  store i1 %eq317, i1* %oror315, align 1
  br i1 %eq317, label %cond_jump_end319, label %cond_jump_then318

is_space_end311:                                  ; preds = %cond_jump_end337
  %inline_result_variable343 = load i32, i32* %inline_result_variable309, align 4
  %icmpA344 = icmp ne i32 %inline_result_variable343, 0
  br i1 %icmpA344, label %cond_jump_then345, label %cond_else_block346

cond_jump_then318:                                ; preds = %is_space308
  %ch320 = load i32, i32* %ch310, align 4
  %eq321 = icmp eq i32 %ch320, 9
  %oror322 = or i1 %eq317, %eq321
  store i1 %oror322, i1* %oror315, align 1
  br label %cond_jump_end319

cond_jump_end319:                                 ; preds = %cond_jump_then318, %is_space308
  %oror_result_value323 = load i1, i1* %oror315, align 1
  store i1 %oror_result_value323, i1* %oror314, align 1
  br i1 %oror_result_value323, label %cond_jump_end325, label %cond_jump_then324

cond_jump_then324:                                ; preds = %cond_jump_end319
  %ch326 = load i32, i32* %ch310, align 4
  %eq327 = icmp eq i32 %ch326, 11
  %oror328 = or i1 %oror_result_value323, %eq327
  store i1 %oror328, i1* %oror314, align 1
  br label %cond_jump_end325

cond_jump_end325:                                 ; preds = %cond_jump_then324, %cond_jump_end319
  %oror_result_value329 = load i1, i1* %oror314, align 1
  store i1 %oror_result_value329, i1* %oror313, align 1
  br i1 %oror_result_value329, label %cond_jump_end331, label %cond_jump_then330

cond_jump_then330:                                ; preds = %cond_jump_end325
  %ch332 = load i32, i32* %ch310, align 4
  %eq333 = icmp eq i32 %ch332, 12
  %oror334 = or i1 %oror_result_value329, %eq333
  store i1 %oror334, i1* %oror313, align 1
  br label %cond_jump_end331

cond_jump_end331:                                 ; preds = %cond_jump_then330, %cond_jump_end325
  %oror_result_value335 = load i1, i1* %oror313, align 1
  store i1 %oror_result_value335, i1* %oror312, align 1
  br i1 %oror_result_value335, label %cond_jump_end337, label %cond_jump_then336

cond_jump_then336:                                ; preds = %cond_jump_end331
  %ch338 = load i32, i32* %ch310, align 4
  %eq339 = icmp eq i32 %ch338, 13
  %oror340 = or i1 %oror_result_value335, %eq339
  store i1 %oror340, i1* %oror312, align 1
  br label %cond_jump_end337

cond_jump_end337:                                 ; preds = %cond_jump_then336, %cond_jump_end331
  %oror_result_value341 = load i1, i1* %oror312, align 1
  %icastKX342 = zext i1 %oror_result_value341 to i32
  store i32 %icastKX342, i32* %inline_result_variable309, align 4
  br label %is_space_end311

cond_jump_then345:                                ; preds = %is_space_end311
  %spc348 = load i32*, i32** %spc306, align 8
  %derefference_valueB349 = load i32, i32* %spc348, align 4
  %icmpA350 = icmp ne i32 %derefference_valueB349, 0
  br i1 %icmpA350, label %cond_jump_then351, label %cond_end352

cond_else_block346:                               ; preds = %is_space_end311
  %spc354 = load i32*, i32** %spc306, align 8
  store i32 0, i32* %spc354, align 4
  br label %cond_end347

cond_end347:                                      ; preds = %cond_else_block346, %cond_end352
  store i32 0, i32* %inline_result_variable304, align 4
  br label %check_space_end

cond_jump_then351:                                ; preds = %cond_jump_then345
  store i32 1, i32* %inline_result_variable304, align 4
  br label %check_space_end

cond_end352:                                      ; preds = %cond_jump_then345
  %spc353 = load i32*, i32** %spc306, align 8
  store i32 1, i32* %spc353, align 4
  br label %cond_end347

cond_jump_then359:                                ; preds = %check_space_end
  %str361 = load %TokenString, %TokenString* %str, align 8
  %tok362 = load i32, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  call void @tok_str_add2(%TokenString* %str, i32 %tok362, %CValue* @tokc)
  br label %cond_end360

cond_end360:                                      ; preds = %cond_jump_then359, %check_space_end
  call void @next_nomacro_spc()
  br label %loop_top_block246

cond_jump_then387:                                ; preds = %cond_end_block282
  %sa391 = load %Sym*, %Sym** %sa, align 8
  %icmpB392 = icmp ne %Sym* %sa391, null
  store i1 %icmpB392, i1* %andand390, align 1
  br i1 %icmpB392, label %cond_jump_then393, label %cond_jump_end394

cond_end388:                                      ; preds = %cond_end410, %cond_end_block282
  %tok412 = load i32, i32* @tok, align 4
  %not_eq413 = icmp ne i32 %tok412, 44
  br i1 %not_eq413, label %cond_jump_then414, label %cond_end415

cond_jump_then393:                                ; preds = %cond_jump_then387
  %sa395 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL396 = getelementptr inbounds %Sym, %Sym* %sa395, i32 0, i32 3
  %type397 = load %CType, %CType* %fieldLLL396, align 8
  %fieldVVV398 = getelementptr inbounds %CType, %CType* %fieldLLL396, i32 0, i32 0
  %t399 = load i32, i32* %fieldVVV398, align 4
  %icmpA400 = icmp ne i32 %t399, 0
  %andand401 = and i1 %icmpB392, %icmpA400
  store i1 %andand401, i1* %andand390, align 1
  br label %cond_jump_end394

cond_jump_end394:                                 ; preds = %cond_jump_then393, %cond_jump_then387
  %andand_result_value402 = load i1, i1* %andand390, align 1
  store i1 %andand_result_value402, i1* %andand389, align 1
  br i1 %andand_result_value402, label %cond_jump_then403, label %cond_jump_end404

cond_jump_then403:                                ; preds = %cond_jump_end394
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %icmpA405 = icmp ne i32 %gnu_ext, 0
  %andand406 = and i1 %andand_result_value402, %icmpA405
  store i1 %andand406, i1* %andand389, align 1
  br label %cond_jump_end404

cond_jump_end404:                                 ; preds = %cond_jump_then403, %cond_jump_end394
  %andand_result_value407 = load i1, i1* %andand389, align 1
  br i1 %andand_result_value407, label %cond_jump_then408, label %cond_else_block409

cond_jump_then408:                                ; preds = %cond_jump_end404
  br label %loop_continue_top_block

cond_else_block409:                               ; preds = %cond_jump_end404
  br label %cond_end_block206

cond_end410:                                      ; preds = %after_break411, %after_continue
  br label %cond_end388

after_continue:                                   ; No predecessors!
  br label %cond_end410

after_break411:                                   ; No predecessors!
  br label %cond_end410

cond_jump_then414:                                ; preds = %cond_end388
  call void @expect(i8* bitcast ([2 x i8]* @85 to i8*))
  br label %cond_end415

cond_end415:                                      ; preds = %cond_jump_then414, %cond_end388
  call void @next_nomacro()
  br label %loop_continue_top_block

cond_jump_then418:                                ; preds = %cond_end_block206
  %s420 = load %Sym*, %Sym** %s, align 8
  %fieldLLL421 = getelementptr inbounds %Sym, %Sym* %s420, i32 0, i32 0
  %v422 = load i32, i32* %fieldLLL421, align 4
  %fun_result423 = call i8* @get_tok_str(i32 %v422, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([34 x i8]* @86 to i8*), i8* %fun_result423)
  br label %cond_end419

cond_end419:                                      ; preds = %cond_jump_then418, %cond_end_block206
  %nested_list424 = load %Sym**, %Sym*** %nested_list, align 8
  %mstr425 = load i32*, i32** %mstr, align 8
  %args426 = load %Sym*, %Sym** %args, align 8
  %fun_result427 = call i32* @macro_arg_subst(%Sym** %nested_list424, i32* %mstr425, %Sym* %args426)
  store i32* %fun_result427, i32** %mstr, align 8
  %args428 = load %Sym*, %Sym** %args, align 8
  store %Sym* %args428, %Sym** %sa, align 8
  br label %loop_top_block429

loop_top_block429:                                ; preds = %sym_free_end, %cond_end419
  %sa430 = load %Sym*, %Sym** %sa, align 8
  %icmpB431 = icmp ne %Sym* %sa430, null
  br i1 %icmpB431, label %cond_then_block432, label %cond_end_block433

cond_then_block432:                               ; preds = %loop_top_block429
  %sa434 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL435 = getelementptr inbounds %Sym, %Sym* %sa434, i32 0, i32 5
  %prev436 = load %Sym*, %Sym** %fieldLLL435, align 8
  store %Sym* %prev436, %Sym** %sa1, align 8
  %sa437 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL438 = getelementptr inbounds %Sym, %Sym* %sa437, i32 0, i32 2
  %c439 = load i64, i64* %fieldLLL438, align 4
  %castBA440 = inttoptr i64 %c439 to i32*
  call void @tok_str_free(i32* %castBA440)
  %sa441 = load %Sym*, %Sym** %sa, align 8
  store i32 2584, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.83, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_free

cond_end_block433:                                ; preds = %loop_top_block429
  store i32 1, i32* %mstr_allocated, align 4
  br label %cond_end78

sym_free:                                         ; preds = %cond_then_block432
  %sym = alloca %Sym*, align 8
  store %Sym* %sa441, %Sym** %sym, align 8
  %sym442 = load %Sym*, %Sym** %sym, align 8
  %sym_free_first = load %Sym*, %Sym** @sym_free_first, align 8
  %fieldTU443 = getelementptr inbounds %Sym, %Sym* %sym442, i32 0, i32 4
  store %Sym* %sym_free_first, %Sym** %fieldTU443, align 8
  %sym444 = load %Sym*, %Sym** %sym, align 8
  store %Sym* %sym444, %Sym** @sym_free_first, align 8
  br label %sym_free_end

sym_free_end:                                     ; preds = %sym_free
  %sa1445 = load %Sym*, %Sym** %sa1, align 8
  store %Sym* %sa1445, %Sym** %sa, align 8
  br label %loop_top_block429

sym_free462:                                      ; preds = %cond_end78
  %sym463 = alloca %Sym*, align 8
  store %Sym* %sa1461, %Sym** %sym463, align 8
  %sym465 = load %Sym*, %Sym** %sym463, align 8
  %sym_free_first466 = load %Sym*, %Sym** @sym_free_first, align 8
  %fieldTU467 = getelementptr inbounds %Sym, %Sym* %sym465, i32 0, i32 4
  store %Sym* %sym_free_first466, %Sym** %fieldTU467, align 8
  %sym468 = load %Sym*, %Sym** %sym463, align 8
  store %Sym* %sym468, %Sym** @sym_free_first, align 8
  br label %sym_free_end464

sym_free_end464:                                  ; preds = %sym_free462
  %mstr_allocated469 = load i32, i32* %mstr_allocated, align 4
  %icmpA470 = icmp ne i32 %mstr_allocated469, 0
  br i1 %icmpA470, label %cond_jump_then471, label %cond_end472

cond_jump_then471:                                ; preds = %sym_free_end464
  %mstr473 = load i32*, i32** %mstr, align 8
  call void @tok_str_free(i32* %mstr473)
  br label %cond_end472

cond_end472:                                      ; preds = %cond_jump_then471, %sym_free_end464
  br label %cond_end
}

define internal void @preprocess_init(%TCCState* %0) {
entry:
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 51
  %autocast = bitcast [32 x %BufferedFile*]* %fieldRRRROOU to %BufferedFile**
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s12, i32 0, i32 1
  store %BufferedFile** %autocast, %BufferedFile*** %fieldTU, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU6 = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 52
  %autocast7 = bitcast [64 x i32]* %fieldRRRROOU6 to i32*
  %fieldTU8 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 2
  store i32* %autocast7, i32** %fieldTU8, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %s19 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s19, i32 0, i32 2
  %ifdef_stack_ptr = load i32*, i32** %fieldLLL, align 8
  %fieldTU10 = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 6
  store i32* %ifdef_stack_ptr, i32** %fieldTU10, align 8
  store %SValue* inttoptr (i64 sub (i64 ptrtoint ([256 x %SValue]* @vstack to i64), i64 64) to %SValue*), %SValue** @vtop, align 8
  %s111 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU12 = getelementptr inbounds %TCCState, %TCCState* %s111, i32 0, i32 54
  %array_castA = bitcast [8 x i32]* %fieldRRRROOU12 to i32*
  %gepBX = getelementptr i32, i32* %array_castA, i32 0
  store i32 0, i32* %gepBX, align 4
  %s113 = load %TCCState*, %TCCState** %s1, align 8
  %s114 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU15 = getelementptr inbounds %TCCState, %TCCState* %s114, i32 0, i32 54
  %autocast16 = bitcast [8 x i32]* %fieldRRRROOU15 to i32*
  %fieldTU17 = getelementptr inbounds %TCCState, %TCCState* %s113, i32 0, i32 55
  store i32* %autocast16, i32** %fieldTU17, align 8
  ret void
}

define void @preprocess_new() {
entry:
  %andand33 = alloca i1, align 1
  %andand12 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror6 = alloca i1, align 1
  %oror5 = alloca i1, align 1
  %oror = alloca i1, align 1
  %ts = alloca %TokenSym*, align 8
  %r = alloca i8*, align 8
  %p = alloca i8*, align 8
  %c = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 -1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_jump_end29
  %i47 = load i32, i32* %i, align 4
  %add = add i32 %i47, 1
  store i32 %add, i32* %i, align 4
  %i48 = load i32, i32* %i, align 4
  %sub49 = sub i32 %i48, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i1 = load i32, i32* %i, align 4
  %le = icmp slt i32 %i1, 256
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %i2 = load i32, i32* %i, align 4
  %sub = sub i32 %i2, -1
  %i3 = load i32, i32* %i, align 4
  store i32 2878, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.96, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isid

cond_end_block:                                   ; preds = %loop_top_block
  store %TokenSym** null, %TokenSym*** @table_ident, align 8
  %fun_result = call i8* @memset(i8* bitcast ([8192 x %TokenSym*]* @hash_ident to i8*), i32 0, i64 65536)
  store i32 256, i32* @tok_ident, align 4
  br label %loop_top_block50

isid:                                             ; preds = %cond_then_block
  %inline_result_variable = alloca i32, align 4
  %c4 = alloca i32, align 4
  store i32 %i3, i32* %c4, align 4
  %c7 = load i32, i32* %c4, align 4
  %gteq_signed = icmp sge i32 %c7, 97
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then, label %cond_jump_end

isid_end:                                         ; preds = %cond_jump_end23
  %inline_result_variable27 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable27, 0
  store i1 %icmpA, i1* %oror, align 1
  br i1 %icmpA, label %cond_jump_end29, label %cond_jump_then28

cond_jump_then:                                   ; preds = %isid
  %c8 = load i32, i32* %c4, align 4
  %leeq = icmp sle i32 %c8, 122
  %andand9 = and i1 %gteq_signed, %leeq
  store i1 %andand9, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %isid
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror6, align 1
  br i1 %andand_result_value, label %cond_jump_end11, label %cond_jump_then10

cond_jump_then10:                                 ; preds = %cond_jump_end
  %c13 = load i32, i32* %c4, align 4
  %gteq_signed14 = icmp sge i32 %c13, 65
  store i1 %gteq_signed14, i1* %andand12, align 1
  br i1 %gteq_signed14, label %cond_jump_then15, label %cond_jump_end16

cond_jump_end11:                                  ; preds = %cond_jump_end16, %cond_jump_end
  %oror_result_value = load i1, i1* %oror6, align 1
  store i1 %oror_result_value, i1* %oror5, align 1
  br i1 %oror_result_value, label %cond_jump_end23, label %cond_jump_then22

cond_jump_then15:                                 ; preds = %cond_jump_then10
  %c17 = load i32, i32* %c4, align 4
  %leeq18 = icmp sle i32 %c17, 90
  %andand19 = and i1 %gteq_signed14, %leeq18
  store i1 %andand19, i1* %andand12, align 1
  br label %cond_jump_end16

cond_jump_end16:                                  ; preds = %cond_jump_then15, %cond_jump_then10
  %andand_result_value20 = load i1, i1* %andand12, align 1
  %oror21 = or i1 %andand_result_value, %andand_result_value20
  store i1 %oror21, i1* %oror6, align 1
  br label %cond_jump_end11

cond_jump_then22:                                 ; preds = %cond_jump_end11
  %c24 = load i32, i32* %c4, align 4
  %eq = icmp eq i32 %c24, 95
  %oror25 = or i1 %oror_result_value, %eq
  store i1 %oror25, i1* %oror5, align 1
  br label %cond_jump_end23

cond_jump_end23:                                  ; preds = %cond_jump_then22, %cond_jump_end11
  %oror_result_value26 = load i1, i1* %oror5, align 1
  %icastKX = zext i1 %oror_result_value26 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %isid_end

cond_jump_then28:                                 ; preds = %isid_end
  %i30 = load i32, i32* %i, align 4
  store i32 2878, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @tccpp.c.97, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum

cond_jump_end29:                                  ; preds = %isnum_end, %isid_end
  %oror_result_value46 = load i1, i1* %oror, align 1
  %icastI = sext i1 %oror_result_value46 to i8
  %gepBX = getelementptr i8, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @isidnum_table, i32 0, i32 0), i32 %sub
  store i8 %icastI, i8* %gepBX, align 1
  br label %loop_continue_top_block

isnum:                                            ; preds = %cond_jump_then28
  %inline_result_variable31 = alloca i32, align 4
  %c32 = alloca i32, align 4
  store i32 %i30, i32* %c32, align 4
  %c34 = load i32, i32* %c32, align 4
  %gteq_signed35 = icmp sge i32 %c34, 48
  store i1 %gteq_signed35, i1* %andand33, align 1
  br i1 %gteq_signed35, label %cond_jump_then36, label %cond_jump_end37

isnum_end:                                        ; preds = %cond_jump_end37
  %inline_result_variable43 = load i32, i32* %inline_result_variable31, align 4
  %icmpA44 = icmp ne i32 %inline_result_variable43, 0
  %oror45 = or i1 %icmpA, %icmpA44
  store i1 %oror45, i1* %oror, align 1
  br label %cond_jump_end29

cond_jump_then36:                                 ; preds = %isnum
  %c38 = load i32, i32* %c32, align 4
  %leeq39 = icmp sle i32 %c38, 57
  %andand40 = and i1 %gteq_signed35, %leeq39
  store i1 %andand40, i1* %andand33, align 1
  br label %cond_jump_end37

cond_jump_end37:                                  ; preds = %cond_jump_then36, %isnum
  %andand_result_value41 = load i1, i1* %andand33, align 1
  %icastKX42 = zext i1 %andand_result_value41 to i32
  store i32 %icastKX42, i32* %inline_result_variable31, align 4
  br label %isnum_end

loop_top_block50:                                 ; preds = %cond_end_block57, %cond_end_block
  %derefference_valueB = load i8, i8* getelementptr inbounds ([1207 x i8], [1207 x i8]* @tcc_keywords, i32 0, i32 0), align 1
  %icmpA51 = icmp ne i8 %derefference_valueB, 0
  br i1 %icmpA51, label %cond_then_block52, label %cond_end_block53

cond_then_block52:                                ; preds = %loop_top_block50
  br label %loop_top_block55

cond_end_block53:                                 ; preds = %loop_top_block50
  ret void

loop_continue_top_block54:                        ; preds = %cond_end
  br label %loop_top_block55

loop_top_block55:                                 ; preds = %loop_continue_top_block54, %cond_then_block52
  br i1 true, label %cond_then_block56, label %cond_end_block57

cond_then_block56:                                ; preds = %loop_top_block55
  %derefference_valueB58 = load i8, i8* inttoptr (i64 sub (i64 add (i64 ptrtoint ([1207 x i8]* @tcc_keywords to i64), i64 1), i64 1) to i8*), align 1
  %icastL = sext i8 %derefference_valueB58 to i32
  store i32 %icastL, i32* %c, align 4
  %c59 = load i32, i32* %c, align 4
  %eq60 = icmp eq i32 %c59, 0
  br i1 %eq60, label %cond_jump_then61, label %cond_end

cond_end_block57:                                 ; preds = %cond_jump_then61, %loop_top_block55
  %fun_result62 = call %TokenSym* @tok_alloc(i8* getelementptr inbounds ([1207 x i8], [1207 x i8]* @tcc_keywords, i32 0, i32 0), i32 trunc (i64 sub (i64 sub (i64 add (i64 ptrtoint ([1207 x i8]* @tcc_keywords to i64), i64 1), i64 ptrtoint ([1207 x i8]* @tcc_keywords to i64)), i64 1) to i32))
  store %TokenSym* %fun_result62, %TokenSym** %ts, align 8
  br label %loop_top_block50

cond_jump_then61:                                 ; preds = %cond_then_block56
  br label %cond_end_block57

cond_end:                                         ; preds = %after_break, %cond_then_block56
  br label %loop_continue_top_block54

after_break:                                      ; No predecessors!
  br label %cond_end
}

define internal i32 @tcc_preprocess(%TCCState* %0) {
entry:
  %oror16 = alloca i1, align 1
  %oror = alloca i1, align 1
  %d = alloca i32, align 4
  %line_ref = alloca i32, align 4
  %token_seen = alloca i32, align 4
  %file_ref = alloca %BufferedFile*, align 8
  %define_start = alloca %Sym*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  call void @preprocess_init(%TCCState* %s12)
  %define_stack = load %Sym*, %Sym** @define_stack, align 8
  store %Sym* %define_stack, %Sym** %define_start, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  %element_addressAB = load i8*, i8** %fieldLLL, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  store i32 %icastKY, i32* @ch, align 4
  store i32 3, i32* @tok_flags, align 4
  store i32 29, i32* @parse_flags, align 4
  store i32 0, i32* %token_seen, align 4
  store i32 0, i32* %line_ref, align 4
  store %BufferedFile* null, %BufferedFile** %file_ref, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end, %cond_jump_then6
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @next()
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, -1
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  %define_start55 = load %Sym*, %Sym** %define_start, align 8
  call void @free_defines(%Sym* %define_start55)
  ret i32 0

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_jump_elif0:                                  ; preds = %cond_then_block
  %tok3 = load i32, i32* @tok, align 4
  %eq4 = icmp eq i32 %tok3, 10
  br i1 %eq4, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %token_seen5 = load i32, i32* %token_seen, align 4
  %logical_denial = icmp eq i32 %token_seen5, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then6, label %cond_end7

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %token_seen9 = load i32, i32* %token_seen, align 4
  %logical_denial10 = icmp eq i32 %token_seen9, 0
  %castOOOO11 = zext i1 %logical_denial10 to i32
  %icmpA12 = icmp ne i32 %castOOOO11, 0
  br i1 %icmpA12, label %cond_jump_elif_then1, label %cond_end

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %file13 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL14 = getelementptr inbounds %BufferedFile, %BufferedFile* %file13, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL14, align 4
  %line_ref15 = load i32, i32* %line_ref, align 4
  %sub = sub i32 %line_num, %line_ref15
  store i32 %sub, i32* %d, align 4
  %file17 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file_ref18 = load %BufferedFile*, %BufferedFile** %file_ref, align 8
  %not_eq = icmp ne %BufferedFile* %file17, %file_ref18
  store i1 %not_eq, i1* %oror16, align 1
  br i1 %not_eq, label %cond_jump_end, label %cond_jump_then19

cond_end:                                         ; preds = %cond_end28, %cond_jump_elif1, %cond_end7, %after_break
  %tok49 = load i32, i32* @tok, align 4
  %tokc = load %CValue, %CValue* @tokc, align 16
  %fun_result50 = call i8* @get_tok_str(i32 %tok49, %CValue* @tokc)
  %s151 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL52 = getelementptr inbounds %TCCState, %TCCState* %s151, i32 0, i32 56
  %outfile53 = load %_IO_FILE*, %_IO_FILE** %fieldLLL52, align 8
  %fun_result54 = call i32 @fputs(i8* %fun_result50, %_IO_FILE* %outfile53)
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then6:                                  ; preds = %cond_jump_elif_then0
  br label %loop_continue_top_block

cond_end7:                                        ; preds = %after_continue, %cond_jump_elif_then0
  %line_ref8 = load i32, i32* %line_ref, align 4
  %add = add i32 %line_ref8, 1
  store i32 %add, i32* %line_ref, align 4
  store i32 0, i32* %token_seen, align 4
  br label %cond_end

after_continue:                                   ; No predecessors!
  br label %cond_end7

cond_jump_then19:                                 ; preds = %cond_jump_elif_then1
  %d20 = load i32, i32* %d, align 4
  %le = icmp slt i32 %d20, 0
  %oror21 = or i1 %not_eq, %le
  store i1 %oror21, i1* %oror16, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then19, %cond_jump_elif_then1
  %oror_result_value = load i1, i1* %oror16, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end23, label %cond_jump_then22

cond_jump_then22:                                 ; preds = %cond_jump_end
  %d24 = load i32, i32* %d, align 4
  %gteq_signed = icmp sge i32 %d24, 8
  %oror25 = or i1 %oror_result_value, %gteq_signed
  store i1 %oror25, i1* %oror, align 1
  br label %cond_jump_end23

cond_jump_end23:                                  ; preds = %cond_jump_then22, %cond_jump_end
  %oror_result_value26 = load i1, i1* %oror, align 1
  br i1 %oror_result_value26, label %cond_jump_then27, label %cond_else_block

cond_jump_then27:                                 ; preds = %cond_jump_end23
  %s129 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL30 = getelementptr inbounds %TCCState, %TCCState* %s129, i32 0, i32 56
  %outfile = load %_IO_FILE*, %_IO_FILE** %fieldLLL30, align 8
  %file31 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL32 = getelementptr inbounds %BufferedFile, %BufferedFile* %file31, i32 0, i32 3
  %line_num33 = load i32, i32* %fieldLLL32, align 4
  %file34 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU = getelementptr inbounds %BufferedFile, %BufferedFile* %file34, i32 0, i32 9
  %autocast = bitcast [1024 x i8]* %fieldRRRROOU to i8*
  %fun_result = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %outfile, i8* bitcast ([11 x i8]* @90 to i8*), i32 %line_num33, i8* %autocast)
  br label %cond_end28

cond_else_block:                                  ; preds = %cond_jump_end23
  br label %loop_top_block35

cond_end28:                                       ; preds = %cond_end_block39, %cond_jump_then27
  %file46 = load %BufferedFile*, %BufferedFile** @file, align 8
  store %BufferedFile* %file46, %BufferedFile** %file_ref, align 8
  %fieldLLL47 = getelementptr inbounds %BufferedFile, %BufferedFile* %file46, i32 0, i32 3
  %line_num48 = load i32, i32* %fieldLLL47, align 4
  store i32 %line_num48, i32* %line_ref, align 4
  store i32 1, i32* %token_seen, align 4
  br label %cond_end

loop_top_block35:                                 ; preds = %cond_then_block38, %cond_else_block
  %d36 = load i32, i32* %d, align 4
  %icmpA37 = icmp ne i32 %d36, 0
  br i1 %icmpA37, label %cond_then_block38, label %cond_end_block39

cond_then_block38:                                ; preds = %loop_top_block35
  %s140 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL41 = getelementptr inbounds %TCCState, %TCCState* %s140, i32 0, i32 56
  %outfile42 = load %_IO_FILE*, %_IO_FILE** %fieldLLL41, align 8
  %fun_result43 = call i32 @fputs(i8* bitcast ([2 x i8]* @91 to i8*), %_IO_FILE* %outfile42)
  %d44 = load i32, i32* %d, align 4
  %sub45 = sub i32 %d44, 1
  store i32 %sub45, i32* %d, align 4
  br label %loop_top_block35

cond_end_block39:                                 ; preds = %loop_top_block35
  br label %cond_end28
}

define void @swap(i32* %0, i32* %1) {
entry:
  %t = alloca i32, align 4
  %p = alloca i32*, align 8
  %p1 = alloca i32**, align 8
  store i32* %0, i32** %p, align 8
  store i32** %p, i32*** %p1, align 8
  %q = alloca i32*, align 8
  %q2 = alloca i32**, align 8
  store i32* %1, i32** %q, align 8
  store i32** %q, i32*** %q2, align 8
  %p3 = load i32*, i32** %p, align 8
  %derefference_valueB = load i32, i32* %p3, align 4
  store i32 %derefference_valueB, i32* %t, align 4
  %p4 = load i32*, i32** %p, align 8
  %q5 = load i32*, i32** %q, align 8
  %derefference_valueB6 = load i32, i32* %q5, align 4
  store i32 %derefference_valueB6, i32* %p4, align 4
  %q7 = load i32*, i32** %q, align 8
  %t8 = load i32, i32* %t, align 4
  store i32 %t8, i32* %q7, align 4
  ret void
}

define void @vsetc(%CType* %0, i32 %1, %CValue* %2) {
entry:
  %oror = alloca i1, align 1
  %v = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %r = alloca i32, align 4
  %r2 = alloca i32*, align 8
  store i32 %1, i32* %r, align 4
  store i32* %r, i32** %r2, align 8
  %vc = alloca %CValue*, align 8
  %vc3 = alloca %CValue**, align 8
  store %CValue* %2, %CValue** %vc, align 8
  store %CValue** %vc, %CValue*** %vc3, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %gteq_signed = icmp sge %SValue* %vtop, inttoptr (i64 add (i64 ptrtoint ([256 x %SValue]* @vstack to i64), i64 16320) to %SValue*)
  br i1 %gteq_signed, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @92 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %vtop4 = load %SValue*, %SValue** @vtop, align 8
  %gteq_signed5 = icmp sge %SValue* %vtop4, getelementptr inbounds ([256 x %SValue], [256 x %SValue]* @vstack, i32 0, i32 0)
  br i1 %gteq_signed5, label %cond_jump_then6, label %cond_end7

cond_jump_then6:                                  ; preds = %cond_end
  %vtop8 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop8, i32 0, i32 1
  %r9 = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r9 to i32
  %andtmp = and i32 %icastKY, 255
  store i32 %andtmp, i32* %v, align 4
  %v10 = load i32, i32* %v, align 4
  %eq = icmp eq i32 %v10, 243
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then11

cond_end7:                                        ; preds = %cond_end17, %cond_end
  %vtop18 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %vtop18 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  store %SValue* %intToPtrB, %SValue** @vtop, align 8
  %vtop19 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop19 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  %vtop20 = load %SValue*, %SValue** @vtop, align 8
  %type21 = load %CType*, %CType** %type, align 8
  %derefference_valueB = load %CType, %CType* %type21, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop20, i32 0, i32 0
  store %CType %derefference_valueB, %CType* %fieldTU, align 8
  %vtop22 = load %SValue*, %SValue** @vtop, align 8
  %r23 = load i32, i32* %r, align 4
  %icastG = trunc i32 %r23 to i16
  %fieldTU24 = getelementptr inbounds %SValue, %SValue* %vtop22, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU24, align 2
  %vtop25 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU26 = getelementptr inbounds %SValue, %SValue* %vtop25, i32 0, i32 2
  store i16 240, i16* %fieldTU26, align 2
  %vtop27 = load %SValue*, %SValue** @vtop, align 8
  %vc28 = load %CValue*, %CValue** %vc, align 8
  %derefference_valueB29 = load %CValue, %CValue* %vc28, align 16
  %fieldTU30 = getelementptr inbounds %SValue, %SValue* %vtop27, i32 0, i32 3
  store %CValue %derefference_valueB29, %CValue* %fieldTU30, align 16
  ret void

cond_jump_then11:                                 ; preds = %cond_jump_then6
  %v12 = load i32, i32* %v, align 4
  %andtmp13 = and i32 %v12, -2
  %eq14 = icmp eq i32 %andtmp13, 244
  %oror15 = or i1 %eq, %eq14
  store i1 %oror15, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then11, %cond_jump_then6
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then16, label %cond_end17

cond_jump_then16:                                 ; preds = %cond_jump_end
  %fun_result = call i32 @gv(i32 1)
  br label %cond_end17

cond_end17:                                       ; preds = %cond_jump_then16, %cond_jump_end
  br label %cond_end7
}

define internal void @vpush_ref(%CType* %0, %Section* %1, i64 %2, i64 %3) {
entry:
  %cval = alloca %CValue, align 16
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %sec = alloca %Section*, align 8
  %sec2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec2, align 8
  %offset = alloca i64, align 8
  %offset3 = alloca i64*, align 8
  store i64 %2, i64* %offset, align 4
  store i64* %offset, i64** %offset3, align 8
  %size = alloca i64, align 8
  %size4 = alloca i64*, align 8
  store i64 %3, i64* %size, align 4
  store i64* %size, i64** %size4, align 8
  %cval5 = load %CValue, %CValue* %cval, align 16
  %fieldIII = getelementptr inbounds %CValue, %CValue* %cval, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 0, i32* %icastN, align 4
  %type6 = load %CType*, %CType** %type, align 8
  %cval7 = load %CValue, %CValue* %cval, align 16
  call void @vsetc(%CType* %type6, i32 752, %CValue* %cval)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %type8 = load %CType*, %CType** %type, align 8
  %sec9 = load %Section*, %Section** %sec, align 8
  %offset10 = load i64, i64* %offset, align 4
  %size11 = load i64, i64* %size, align 4
  %fun_result = call %Sym* @get_sym_ref(%CType* %type8, %Section* %sec9, i64 %offset10, i64 %size11)
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 4
  store %Sym* %fun_result, %Sym** %fieldTU, align 8
  ret void
}

define internal %Sym* @external_sym(i32 %0, %CType* %1, i32 %2) {
entry:
  %s = alloca %Sym*, align 8
  %v = alloca i32, align 4
  %v1 = alloca i32*, align 8
  store i32 %0, i32* %v, align 4
  store i32* %v, i32** %v1, align 8
  %type = alloca %CType*, align 8
  %type2 = alloca %CType**, align 8
  store %CType* %1, %CType** %type, align 8
  store %CType** %type, %CType*** %type2, align 8
  %r = alloca i32, align 4
  %r3 = alloca i32*, align 8
  store i32 %2, i32* %r, align 4
  store i32* %r, i32** %r3, align 8
  %v4 = load i32, i32* %v, align 4
  store i32 113, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.98, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_find

sym_find:                                         ; preds = %entry
  %inline_result_variable = alloca %Sym*, align 8
  %v5 = alloca i32, align 4
  store i32 %v4, i32* %v5, align 4
  %v6 = load i32, i32* %v5, align 4
  %sub = sub i32 %v6, 256
  store i32 %sub, i32* %v5, align 4
  %add = add i32 %sub, 256
  %v7 = load i32, i32* %v5, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub8 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v7, %sub8
  br i1 %gteq_unsinged, label %cond_jump_then, label %cond_end

sym_find_end:                                     ; preds = %cond_end, %cond_jump_then
  %inline_result_variable10 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable10, %Sym** %s, align 8
  %s11 = load %Sym*, %Sym** %s, align 8
  %logical_denial = icmp eq %Sym* %s11, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then12, label %cond_else_block

cond_jump_then:                                   ; preds = %sym_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_end:                                         ; preds = %sym_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v9 = load i32, i32* %v5, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v9
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_identifier, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_jump_then12:                                 ; preds = %sym_find_end
  %v14 = load i32, i32* %v, align 4
  %type15 = load %CType*, %CType** %type, align 8
  %r16 = load i32, i32* %r, align 4
  %ortmp = or i32 %r16, 240
  %ortmp17 = or i32 %ortmp, 512
  %fun_result = call %Sym* @sym_push(i32 %v14, %CType* %type15, i32 %ortmp17, i32 0)
  store %Sym* %fun_result, %Sym** %s, align 8
  %s18 = load %Sym*, %Sym** %s, align 8
  %fieldLLL19 = getelementptr inbounds %Sym, %Sym* %s18, i32 0, i32 3
  %type20 = load %CType, %CType* %fieldLLL19, align 8
  %s21 = load %Sym*, %Sym** %s, align 8
  %fieldLLL22 = getelementptr inbounds %Sym, %Sym* %s21, i32 0, i32 3
  %type23 = load %CType, %CType* %fieldLLL22, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL22, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %ortmp24 = or i32 %t, 128
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldLLL19, i32 0, i32 0
  store i32 %ortmp24, i32* %fieldTTT, align 4
  br label %cond_end13

cond_else_block:                                  ; preds = %sym_find_end
  %s25 = load %Sym*, %Sym** %s, align 8
  %fieldLLL26 = getelementptr inbounds %Sym, %Sym* %s25, i32 0, i32 3
  %type27 = load %CType, %CType* %fieldLLL26, align 8
  %type28 = load %CType*, %CType** %type, align 8
  %fun_result29 = call i32 @is_compatible_types(%CType* %fieldLLL26, %CType* %type28)
  %logical_denial30 = icmp eq i32 %fun_result29, 0
  %castOOOO31 = zext i1 %logical_denial30 to i32
  %icmpA32 = icmp ne i32 %castOOOO31, 0
  br i1 %icmpA32, label %cond_jump_then33, label %cond_end34

cond_end13:                                       ; preds = %cond_end34, %cond_jump_then12
  %s37 = load %Sym*, %Sym** %s, align 8
  ret %Sym* %s37

cond_jump_then33:                                 ; preds = %cond_else_block
  %v35 = load i32, i32* %v, align 4
  %fun_result36 = call i8* @get_tok_str(i32 %v35, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([44 x i8]* @93 to i8*), i8* %fun_result36)
  br label %cond_end34

cond_end34:                                       ; preds = %cond_jump_then33, %cond_else_block
  br label %cond_end13
}

define void @vseti(i32 %0, i32 %1) {
entry:
  %type = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %r = alloca i32, align 4
  %r1 = alloca i32*, align 8
  store i32 %0, i32* %r, align 4
  store i32* %r, i32** %r1, align 8
  %v = alloca i32, align 4
  %v2 = alloca i32*, align 8
  store i32 %1, i32* %v, align 4
  store i32* %v, i32** %v2, align 8
  %type3 = load %CType, %CType* %type, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  %type4 = load %CType, %CType* %type, align 8
  %r5 = load i32, i32* %r, align 4
  %v6 = load i32, i32* %v, align 4
  call void @vset(%CType* %type, i32 %r5, i32 %v6)
  ret void
}

define void @vpushv(%SValue* %0) {
entry:
  %v = alloca %SValue*, align 8
  %v1 = alloca %SValue**, align 8
  store %SValue* %0, %SValue** %v, align 8
  store %SValue** %v, %SValue*** %v1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %gteq_signed = icmp sge %SValue* %vtop, inttoptr (i64 add (i64 ptrtoint ([256 x %SValue]* @vstack to i64), i64 16320) to %SValue*)
  br i1 %gteq_signed, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @94 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %vtop2 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  store %SValue* %intToPtrB, %SValue** @vtop, align 8
  %vtop3 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop3 to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  %vtop4 = load %SValue*, %SValue** @vtop, align 8
  %v5 = load %SValue*, %SValue** %v, align 8
  %derefference_valueB = load %SValue, %SValue* %v5, align 16
  store %SValue %derefference_valueB, %SValue* %vtop4, align 16
  ret void
}

define void @gaddrof() {
entry:
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %vtop1 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop1, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, -257
  %icastG = trunc i32 %andtmp to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU, align 2
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL3 = getelementptr inbounds %SValue, %SValue* %vtop2, i32 0, i32 1
  %r4 = load i16, i16* %fieldLLL3, align 2
  %icastKY5 = zext i16 %r4 to i32
  %andtmp6 = and i32 %icastKY5, 255
  %eq = icmp eq i32 %andtmp6, 241
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %vtop7 = load %SValue*, %SValue** @vtop, align 8
  %vtop8 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL9 = getelementptr inbounds %SValue, %SValue* %vtop8, i32 0, i32 1
  %r10 = load i16, i16* %fieldLLL9, align 2
  %icastKY11 = zext i16 %r10 to i32
  %andtmp12 = and i32 %icastKY11, -28928
  %ortmp = or i32 %andtmp12, 242
  %ortmp13 = or i32 %ortmp, 256
  %icastG14 = trunc i32 %ortmp13 to i16
  %fieldTU15 = getelementptr inbounds %SValue, %SValue* %vtop7, i32 0, i32 1
  store i16 %icastG14, i16* %fieldTU15, align 2
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  ret void
}

define i32 @rc_fret(i32 %0) {
entry:
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t2, 10
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 64

cond_end:                                         ; preds = %entry
  ret i32 32
}

define i32 @reg_fret(i32 %0) {
entry:
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t2, 10
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 4

cond_end:                                         ; preds = %entry
  ret i32 3
}

define void @lexpand() {
entry:
  %u = alloca i32, align 4
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 16
  store i32 %andtmp, i32* %u, align 4
  %fun_result = call i32 @gv(i32 1)
  call void @vdup()
  %vtop1 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 0
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB3 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY4 = getelementptr inbounds %SValue, %SValue* %element_addressAB3, i32 -1
  %load_element5 = load %SValue, %SValue* %element_addressXYXZY4, align 16
  %fieldVVV6 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY4, i32 0, i32 2
  %r2 = load i16, i16* %fieldVVV6, align 2
  %fieldTTT = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 1
  store i16 %r2, i16* %fieldTTT, align 2
  %vtop7 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB8 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY9 = getelementptr inbounds %SValue, %SValue* %element_addressAB8, i32 0
  %load_element10 = load %SValue, %SValue* %element_addressXYXZY9, align 16
  %fieldTTT11 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY9, i32 0, i32 2
  store i16 240, i16* %fieldTTT11, align 2
  %vtop12 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB13 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY14 = getelementptr inbounds %SValue, %SValue* %element_addressAB13, i32 -1
  %load_element15 = load %SValue, %SValue* %element_addressXYXZY14, align 16
  %fieldTTT16 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY14, i32 0, i32 2
  store i16 240, i16* %fieldTTT16, align 2
  %vtop17 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB18 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY19 = getelementptr inbounds %SValue, %SValue* %element_addressAB18, i32 0
  %load_element20 = load %SValue, %SValue* %element_addressXYXZY19, align 16
  %fieldVVV21 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY19, i32 0, i32 0
  %type22 = load %CType, %CType* %fieldVVV21, align 8
  %u23 = load i32, i32* %u, align 4
  %ortmp = or i32 0, %u23
  %fieldTTT24 = getelementptr inbounds %CType, %CType* %fieldVVV21, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTTT24, align 4
  %vtop25 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB26 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY27 = getelementptr inbounds %SValue, %SValue* %element_addressAB26, i32 -1
  %load_element28 = load %SValue, %SValue* %element_addressXYXZY27, align 16
  %fieldVVV29 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY27, i32 0, i32 0
  %type30 = load %CType, %CType* %fieldVVV29, align 8
  %u31 = load i32, i32* %u, align 4
  %ortmp32 = or i32 0, %u31
  %fieldTTT33 = getelementptr inbounds %CType, %CType* %fieldVVV29, i32 0, i32 0
  store i32 %ortmp32, i32* %fieldTTT33, align 4
  ret void
}

define void @lbuild(i32 %0) {
entry:
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  call void @gv2(i32 1, i32 1)
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 -1
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB3 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY4 = getelementptr inbounds %SValue, %SValue* %element_addressAB3, i32 0
  %load_element5 = load %SValue, %SValue* %element_addressXYXZY4, align 16
  %fieldVVV = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY4, i32 0, i32 1
  %r = load i16, i16* %fieldVVV, align 2
  %fieldTTT = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 2
  store i16 %r, i16* %fieldTTT, align 2
  %vtop6 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB7 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY8 = getelementptr inbounds %SValue, %SValue* %element_addressAB7, i32 -1
  %load_element9 = load %SValue, %SValue* %element_addressXYXZY8, align 16
  %fieldVVV10 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY8, i32 0, i32 0
  %type = load %CType, %CType* %fieldVVV10, align 8
  %t11 = load i32, i32* %t, align 4
  %fieldTTT12 = getelementptr inbounds %CType, %CType* %fieldVVV10, i32 0, i32 0
  store i32 %t11, i32* %fieldTTT12, align 4
  call void @vpop()
  ret void
}

define void @vrotb(i32 %0) {
entry:
  %tmp = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %tmp to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %n1 = alloca i32*, align 8
  store i32 %0, i32* %n, align 4
  store i32* %n, i32** %n1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %n2 = load i32, i32* %n, align 4
  %sub = sub i32 0, %n2
  %add = add i32 %sub, 1
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 %add
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  store %SValue %load_element, %SValue* %tmp, align 16
  %n3 = load i32, i32* %n, align 4
  %sub4 = sub i32 0, %n3
  %add5 = add i32 %sub4, 1
  store i32 %add5, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i15 = load i32, i32* %i, align 4
  %add16 = add i32 %i15, 1
  store i32 %add16, i32* %i, align 4
  %i17 = load i32, i32* %i, align 4
  %sub18 = sub i32 %i17, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i6 = load i32, i32* %i, align 4
  %not_eq = icmp ne i32 %i6, 0
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %vtop7 = load %SValue*, %SValue** @vtop, align 8
  %i8 = load i32, i32* %i, align 4
  %vtop9 = load %SValue*, %SValue** @vtop, align 8
  %i10 = load i32, i32* %i, align 4
  %add11 = add i32 %i10, 1
  %element_addressAB12 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY13 = getelementptr inbounds %SValue, %SValue* %element_addressAB12, i32 %add11
  %load_element14 = load %SValue, %SValue* %element_addressXYXZY13, align 16
  %element_addressXYXY = getelementptr %SValue, %SValue* %vtop7, i32 %i8
  store %SValue %load_element14, %SValue* %element_addressXYXY, align 16
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %vtop19 = load %SValue*, %SValue** @vtop, align 8
  %tmp20 = load %SValue, %SValue* %tmp, align 16
  %element_addressXYXY21 = getelementptr %SValue, %SValue* %vtop19, i32 0
  store %SValue %tmp20, %SValue* %element_addressXYXY21, align 16
  ret void
}

define void @gv_dup() {
entry:
  %oror12 = alloca i1, align 1
  %oror = alloca i1, align 1
  %bt = alloca i32, align 4
  %sv = alloca %SValue, align 16
  %castXXXX = bitcast %SValue* %sv to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %r1 = alloca i32, align 4
  %r = alloca i32, align 4
  %t = alloca i32, align 4
  %rc = alloca i32, align 4
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t1 = load i32, i32* %fieldVVV, align 4
  store i32 %t1, i32* %t, align 4
  %t2 = load i32, i32* %t, align 4
  %andtmp = and i32 %t2, 15
  %eq = icmp eq i32 %andtmp, 12
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  call void @lexpand()
  call void @gv_dup()
  call void @vswap()
  call void @vrotb(i32 3)
  call void @gv_dup()
  call void @vrotb(i32 4)
  %t3 = load i32, i32* %t, align 4
  call void @lbuild(i32 %t3)
  call void @vrotb(i32 3)
  call void @vrotb(i32 3)
  call void @vswap()
  %t4 = load i32, i32* %t, align 4
  call void @lbuild(i32 %t4)
  call void @vswap()
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  store i32 1, i32* %rc, align 4
  %sv5 = load %SValue, %SValue* %sv, align 16
  %fieldVVV6 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 0
  %type7 = load %CType, %CType* %fieldVVV6, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %fieldVVV6, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  %t8 = load i32, i32* %t, align 4
  store i32 725, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.102, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end:                                         ; preds = %cond_end27, %cond_jump_then
  ret void

is_float:                                         ; preds = %cond_else_block
  %inline_result_variable = alloca i32, align 4
  %t9 = alloca i32, align 4
  store i32 %t8, i32* %t9, align 4
  %t10 = load i32, i32* %t9, align 4
  %andtmp11 = and i32 %t10, 15
  store i32 %andtmp11, i32* %bt, align 4
  %bt13 = load i32, i32* %bt, align 4
  %eq14 = icmp eq i32 %bt13, 10
  store i1 %eq14, i1* %oror12, align 1
  br i1 %eq14, label %cond_jump_end, label %cond_jump_then15

is_float_end:                                     ; preds = %cond_jump_end20
  %inline_result_variable25 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable25, 0
  br i1 %icmpA, label %cond_jump_then26, label %cond_end27

cond_jump_then15:                                 ; preds = %is_float
  %bt16 = load i32, i32* %bt, align 4
  %eq17 = icmp eq i32 %bt16, 9
  %oror18 = or i1 %eq14, %eq17
  store i1 %oror18, i1* %oror12, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then15, %is_float
  %oror_result_value = load i1, i1* %oror12, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end20, label %cond_jump_then19

cond_jump_then19:                                 ; preds = %cond_jump_end
  %bt21 = load i32, i32* %bt, align 4
  %eq22 = icmp eq i32 %bt21, 8
  %oror23 = or i1 %oror_result_value, %eq22
  store i1 %oror23, i1* %oror, align 1
  br label %cond_jump_end20

cond_jump_end20:                                  ; preds = %cond_jump_then19, %cond_jump_end
  %oror_result_value24 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value24 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_float_end

cond_jump_then26:                                 ; preds = %is_float_end
  store i32 2, i32* %rc, align 4
  %t28 = load i32, i32* %t, align 4
  %andtmp29 = and i32 %t28, 15
  %eq30 = icmp eq i32 %andtmp29, 10
  br i1 %eq30, label %cond_jump_then31, label %cond_end32

cond_end27:                                       ; preds = %cond_end32, %is_float_end
  %rc38 = load i32, i32* %rc, align 4
  %fun_result = call i32 @gv(i32 %rc38)
  store i32 %fun_result, i32* %r, align 4
  %rc39 = load i32, i32* %rc, align 4
  %fun_result40 = call i32 @get_reg(i32 %rc39)
  store i32 %fun_result40, i32* %r1, align 4
  %sv41 = load %SValue, %SValue* %sv, align 16
  %r42 = load i32, i32* %r, align 4
  %icastG = trunc i32 %r42 to i16
  %fieldTTT43 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 1
  store i16 %icastG, i16* %fieldTTT43, align 2
  %sv44 = load %SValue, %SValue* %sv, align 16
  %fieldVVV45 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldVVV45, align 16
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldVVV45, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 0, i32* %icastN, align 4
  %r146 = load i32, i32* %r1, align 4
  %sv47 = load %SValue, %SValue* %sv, align 16
  call void @load(i32 %r146, %SValue* %sv)
  call void @vdup()
  %vtop48 = load %SValue*, %SValue** @vtop, align 8
  %r149 = load i32, i32* %r1, align 4
  %icastG50 = trunc i32 %r149 to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop48, i32 0, i32 1
  store i16 %icastG50, i16* %fieldTU, align 2
  br label %cond_end

cond_jump_then31:                                 ; preds = %cond_jump_then26
  store i32 64, i32* %rc, align 4
  br label %cond_end32

cond_end32:                                       ; preds = %cond_jump_then31, %cond_jump_then26
  %sv33 = load %SValue, %SValue* %sv, align 16
  %fieldVVV34 = getelementptr inbounds %SValue, %SValue* %sv, i32 0, i32 0
  %type35 = load %CType, %CType* %fieldVVV34, align 8
  %t36 = load i32, i32* %t, align 4
  %fieldTTT37 = getelementptr inbounds %CType, %CType* %fieldVVV34, i32 0, i32 0
  store i32 %t36, i32* %fieldTTT37, align 4
  br label %cond_end27
}

define void @gen_opic(i32 %0) {
entry:
  %oror584 = alloca i1, align 1
  %oror533 = alloca i1, align 1
  %oror520 = alloca i1, align 1
  %andand515 = alloca i1, align 1
  %andand514 = alloca i1, align 1
  %andand475 = alloca i1, align 1
  %oror458 = alloca i1, align 1
  %oror457 = alloca i1, align 1
  %andand452 = alloca i1, align 1
  %andand427 = alloca i1, align 1
  %oror378 = alloca i1, align 1
  %oror377 = alloca i1, align 1
  %oror376 = alloca i1, align 1
  %oror375 = alloca i1, align 1
  %oror374 = alloca i1, align 1
  %oror373 = alloca i1, align 1
  %andand372 = alloca i1, align 1
  %oror343 = alloca i1, align 1
  %oror342 = alloca i1, align 1
  %oror341 = alloca i1, align 1
  %andand340 = alloca i1, align 1
  %oror339 = alloca i1, align 1
  %oror338 = alloca i1, align 1
  %andand333 = alloca i1, align 1
  %oror300 = alloca i1, align 1
  %oror299 = alloca i1, align 1
  %oror298 = alloca i1, align 1
  %oror297 = alloca i1, align 1
  %andand292 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand258 = alloca i1, align 1
  %andand = alloca i1, align 1
  %l2 = alloca i64, align 8
  %l1 = alloca i64, align 8
  %v2 = alloca %SValue*, align 8
  %v1 = alloca %SValue*, align 8
  %n = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t1 = alloca i32, align 4
  %c2 = alloca i32, align 4
  %c1 = alloca i32, align 4
  %op = alloca i32, align 4
  %op1 = alloca i32*, align 8
  store i32 %0, i32* %op, align 4
  store i32* %op, i32** %op1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** %v1, align 8
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  store %SValue* %vtop2, %SValue** %v2, align 8
  %v13 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %v13, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  store i32 %andtmp, i32* %t1, align 4
  %v24 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL5 = getelementptr inbounds %SValue, %SValue* %v24, i32 0, i32 0
  %type6 = load %CType, %CType* %fieldLLL5, align 8
  %fieldVVV7 = getelementptr inbounds %CType, %CType* %fieldLLL5, i32 0, i32 0
  %t8 = load i32, i32* %fieldVVV7, align 4
  %andtmp9 = and i32 %t8, 15
  store i32 %andtmp9, i32* %t2, align 4
  %t110 = load i32, i32* %t1, align 4
  %eq = icmp eq i32 %t110, 12
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  %v111 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL12 = getelementptr inbounds %SValue, %SValue* %v111, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL12, align 16
  %ICASTO = bitcast %CValue* %fieldLLL12 to i64*
  %ll = load i64, i64* %ICASTO, align 4
  store i64 %ll, i64* %l1, align 4
  br label %cond_end

cond_jump_elif0:                                  ; preds = %entry
  %v113 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL14 = getelementptr inbounds %SValue, %SValue* %v113, i32 0, i32 0
  %type15 = load %CType, %CType* %fieldLLL14, align 8
  %fieldVVV16 = getelementptr inbounds %CType, %CType* %fieldLLL14, i32 0, i32 0
  %t17 = load i32, i32* %fieldVVV16, align 4
  %andtmp18 = and i32 %t17, 16
  %icmpA = icmp ne i32 %andtmp18, 0
  br i1 %icmpA, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %v119 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL20 = getelementptr inbounds %SValue, %SValue* %v119, i32 0, i32 3
  %c21 = load %CValue, %CValue* %fieldLLL20, align 16
  %ICASTO22 = bitcast %CValue* %fieldLLL20 to i32*
  %ui = load i32, i32* %ICASTO22, align 4
  %icastC = zext i32 %ui to i64
  store i64 %icastC, i64* %l1, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %cond_jump_elif0
  %v123 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL24 = getelementptr inbounds %SValue, %SValue* %v123, i32 0, i32 3
  %c25 = load %CValue, %CValue* %fieldLLL24, align 16
  %ICASTO26 = bitcast %CValue* %fieldLLL24 to i32*
  %i = load i32, i32* %ICASTO26, align 4
  %icastD = sext i32 %i to i64
  store i64 %icastD, i64* %l1, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_elif_then0, %cond_jump_then
  %t227 = load i32, i32* %t2, align 4
  %eq28 = icmp eq i32 %t227, 12
  br i1 %eq28, label %cond_jump_then29, label %cond_jump_elif030

cond_jump_then29:                                 ; preds = %cond_end
  %v234 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL35 = getelementptr inbounds %SValue, %SValue* %v234, i32 0, i32 3
  %c36 = load %CValue, %CValue* %fieldLLL35, align 16
  %ICASTO37 = bitcast %CValue* %fieldLLL35 to i64*
  %ll38 = load i64, i64* %ICASTO37, align 4
  store i64 %ll38, i64* %l2, align 4
  br label %cond_end33

cond_jump_elif030:                                ; preds = %cond_end
  %v239 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL40 = getelementptr inbounds %SValue, %SValue* %v239, i32 0, i32 0
  %type41 = load %CType, %CType* %fieldLLL40, align 8
  %fieldVVV42 = getelementptr inbounds %CType, %CType* %fieldLLL40, i32 0, i32 0
  %t43 = load i32, i32* %fieldVVV42, align 4
  %andtmp44 = and i32 %t43, 16
  %icmpA45 = icmp ne i32 %andtmp44, 0
  br i1 %icmpA45, label %cond_jump_elif_then031, label %cond_else_block32

cond_jump_elif_then031:                           ; preds = %cond_jump_elif030
  %v246 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL47 = getelementptr inbounds %SValue, %SValue* %v246, i32 0, i32 3
  %c48 = load %CValue, %CValue* %fieldLLL47, align 16
  %ICASTO49 = bitcast %CValue* %fieldLLL47 to i32*
  %ui50 = load i32, i32* %ICASTO49, align 4
  %icastC51 = zext i32 %ui50 to i64
  store i64 %icastC51, i64* %l2, align 4
  br label %cond_end33

cond_else_block32:                                ; preds = %cond_jump_elif030
  %v252 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL53 = getelementptr inbounds %SValue, %SValue* %v252, i32 0, i32 3
  %c54 = load %CValue, %CValue* %fieldLLL53, align 16
  %ICASTO55 = bitcast %CValue* %fieldLLL53 to i32*
  %i56 = load i32, i32* %ICASTO55, align 4
  %icastD57 = sext i32 %i56 to i64
  store i64 %icastD57, i64* %l2, align 4
  br label %cond_end33

cond_end33:                                       ; preds = %cond_else_block32, %cond_jump_elif_then031, %cond_jump_then29
  %v158 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL59 = getelementptr inbounds %SValue, %SValue* %v158, i32 0, i32 1
  %r = load i16, i16* %fieldLLL59, align 2
  %icastKY = zext i16 %r to i32
  %andtmp60 = and i32 %icastKY, 1023
  %eq61 = icmp eq i32 %andtmp60, 240
  %icastKX = zext i1 %eq61 to i32
  store i32 %icastKX, i32* %c1, align 4
  %v262 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL63 = getelementptr inbounds %SValue, %SValue* %v262, i32 0, i32 1
  %r64 = load i16, i16* %fieldLLL63, align 2
  %icastKY65 = zext i16 %r64 to i32
  %andtmp66 = and i32 %icastKY65, 1023
  %eq67 = icmp eq i32 %andtmp66, 240
  %icastKX68 = zext i1 %eq67 to i32
  store i32 %icastKX68, i32* %c2, align 4
  %c169 = load i32, i32* %c1, align 4
  %icmpA70 = icmp ne i32 %c169, 0
  store i1 %icmpA70, i1* %andand, align 1
  br i1 %icmpA70, label %cond_jump_then71, label %cond_jump_end

cond_jump_then71:                                 ; preds = %cond_end33
  %c272 = load i32, i32* %c2, align 4
  %icmpA73 = icmp ne i32 %c272, 0
  %andand74 = and i1 %icmpA70, %icmpA73
  store i1 %andand74, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then71, %cond_end33
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then75, label %cond_else_block76

cond_jump_then75:                                 ; preds = %cond_jump_end
  %op78 = load i32, i32* %op, align 4
  %eqtmp = icmp eq i32 %op78, 43
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

cond_else_block76:                                ; preds = %cond_jump_end
  %c1293 = load i32, i32* %c1, align 4
  %icmpA294 = icmp ne i32 %c1293, 0
  store i1 %icmpA294, i1* %andand292, align 1
  br i1 %icmpA294, label %cond_jump_then295, label %cond_jump_end296

cond_end77:                                       ; preds = %cond_end444, %end_blockX
  ret void

end_blockX:                                       ; preds = %cond_else_blockX282, %cond_jump_end275, %cond_jump_end262, %cond_then_block247, %cond_then_block239, %cond_then_block232, %cond_then_block224, %cond_then_block217, %cond_then_block210, %cond_then_block203, %cond_then_block195, %cond_then_block188, %cond_then_block181, %cond_then_block174, %cond_then_block168, %cond_then_block162, %end_blockX135, %cond_then_block111, %cond_then_block105, %cond_then_block99, %cond_then_block92, %cond_then_block83, %cond_then_block
  %v1283 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL284 = getelementptr inbounds %SValue, %SValue* %v1283, i32 0, i32 3
  %c285 = load %CValue, %CValue* %fieldLLL284, align 16
  %l1286 = load i64, i64* %l1, align 4
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL284, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i64*
  store i64 %l1286, i64* %icastN, align 4
  %vtop287 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI288 = ptrtoint %SValue* %vtop287 to i64
  %sub289 = sub i64 %ptrToIntI288, 64
  %iintToPtrD290 = inttoptr i64 %sub289 to %SValue*
  store %SValue* %iintToPtrD290, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD290 to i64
  %add291 = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add291 to %SValue*
  br label %cond_end77

cond_then_block:                                  ; preds = %cond_jump_then75
  %l179 = load i64, i64* %l1, align 4
  %l280 = load i64, i64* %l2, align 4
  %add = add i64 %l179, %l280
  store i64 %add, i64* %l1, align 4
  %l281 = load i64, i64* %l2, align 4
  %sub82 = sub i64 %add, %l281
  br label %end_blockX

cond_else_blockX:                                 ; preds = %after_break, %cond_jump_then75
  %eqtmp85 = icmp eq i32 %op78, 45
  br i1 %eqtmp85, label %cond_then_block83, label %cond_else_blockX84

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX84

cond_then_block83:                                ; preds = %cond_else_blockX
  %l186 = load i64, i64* %l1, align 4
  %l287 = load i64, i64* %l2, align 4
  %sub88 = sub i64 %l186, %l287
  store i64 %sub88, i64* %l1, align 4
  %l289 = load i64, i64* %l2, align 4
  %add90 = add i64 %sub88, %l289
  br label %end_blockX

cond_else_blockX84:                               ; preds = %after_break91, %cond_else_blockX, %after_break
  %eqtmp94 = icmp eq i32 %op78, 38
  br i1 %eqtmp94, label %cond_then_block92, label %cond_else_blockX93

after_break91:                                    ; No predecessors!
  br label %cond_else_blockX84
  br label %cond_else_blockX93

cond_then_block92:                                ; preds = %cond_else_blockX84
  %l195 = load i64, i64* %l1, align 4
  %l296 = load i64, i64* %l2, align 4
  %andtmp97 = and i64 %l195, %l296
  store i64 %andtmp97, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX93:                               ; preds = %after_break98, %cond_else_blockX84, %after_break91
  %eqtmp101 = icmp eq i32 %op78, 94
  br i1 %eqtmp101, label %cond_then_block99, label %cond_else_blockX100

after_break98:                                    ; No predecessors!
  br label %cond_else_blockX93
  br label %cond_else_blockX100

cond_then_block99:                                ; preds = %cond_else_blockX93
  %l1102 = load i64, i64* %l1, align 4
  %l2103 = load i64, i64* %l2, align 4
  %xortmp = xor i64 %l1102, %l2103
  store i64 %xortmp, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX100:                              ; preds = %after_break104, %cond_else_blockX93, %after_break98
  %eqtmp107 = icmp eq i32 %op78, 124
  br i1 %eqtmp107, label %cond_then_block105, label %cond_else_blockX106

after_break104:                                   ; No predecessors!
  br label %cond_else_blockX100
  br label %cond_else_blockX106

cond_then_block105:                               ; preds = %cond_else_blockX100
  %l1108 = load i64, i64* %l1, align 4
  %l2109 = load i64, i64* %l2, align 4
  %ortmp = or i64 %l1108, %l2109
  store i64 %ortmp, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX106:                              ; preds = %after_break110, %cond_else_blockX100, %after_break104
  %eqtmp113 = icmp eq i32 %op78, 42
  br i1 %eqtmp113, label %cond_then_block111, label %cond_else_blockX112

after_break110:                                   ; No predecessors!
  br label %cond_else_blockX106
  br label %cond_else_blockX112

cond_then_block111:                               ; preds = %cond_else_blockX106
  %l1114 = load i64, i64* %l1, align 4
  %l2115 = load i64, i64* %l2, align 4
  %mul = mul i64 %l1114, %l2115
  store i64 %mul, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX112:                              ; preds = %after_break116, %cond_else_blockX106, %after_break110
  %eqtmp119 = icmp eq i32 %op78, 178
  br i1 %eqtmp119, label %cond_then_block117, label %cond_else_blockX118
  br label %cond_else_blockX120

after_break116:                                   ; No predecessors!
  br label %cond_else_blockX112
  br label %cond_else_blockX118

cond_then_block117:                               ; preds = %cond_else_blockX124, %cond_else_blockX122, %cond_else_blockX120, %cond_else_blockX118, %cond_else_blockX112
  %l2128 = load i64, i64* %l2, align 4
  %eq129 = icmp eq i64 %l2128, 0
  br i1 %eq129, label %cond_jump_then130, label %cond_end131

cond_else_blockX118:                              ; preds = %cond_else_blockX112, %after_break116
  %eqtmp121 = icmp eq i32 %op78, 47
  br i1 %eqtmp121, label %cond_then_block117, label %cond_else_blockX120
  br label %cond_else_blockX122

cond_else_blockX120:                              ; preds = %cond_else_blockX118, %cond_else_blockX112
  %eqtmp123 = icmp eq i32 %op78, 37
  br i1 %eqtmp123, label %cond_then_block117, label %cond_else_blockX122
  br label %cond_else_blockX124

cond_else_blockX122:                              ; preds = %cond_else_blockX120, %cond_else_blockX118
  %eqtmp125 = icmp eq i32 %op78, 176
  br i1 %eqtmp125, label %cond_then_block117, label %cond_else_blockX124
  br label %cond_else_blockX126

cond_else_blockX124:                              ; preds = %cond_else_blockX122, %cond_else_blockX120
  %eqtmp127 = icmp eq i32 %op78, 177
  br i1 %eqtmp127, label %cond_then_block117, label %cond_else_blockX126

cond_else_blockX126:                              ; preds = %after_break161, %cond_else_blockX124, %cond_else_blockX122
  %eqtmp164 = icmp eq i32 %op78, 1
  br i1 %eqtmp164, label %cond_then_block162, label %cond_else_blockX163

cond_jump_then130:                                ; preds = %cond_then_block117
  %const_wanted = load i32, i32* @const_wanted, align 4
  %icmpA132 = icmp ne i32 %const_wanted, 0
  br i1 %icmpA132, label %cond_jump_then133, label %cond_end134

cond_end131:                                      ; preds = %cond_end134, %cond_then_block117
  %op136 = load i32, i32* %op, align 4
  br label %cond_then_block137

cond_jump_then133:                                ; preds = %cond_jump_then130
  call void (i8*, ...) @error(i8* bitcast ([29 x i8]* @95 to i8*))
  br label %cond_end134

cond_end134:                                      ; preds = %cond_jump_then133, %cond_jump_then130
  br label %gen_opic.general_case
  br label %cond_end131

gen_opic.general_case:                            ; preds = %cond_else_block443, %cond_end488, %cond_then_block281, %cond_end134
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  %logical_denial = icmp eq i32 %nocode_wanted, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA580 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA580, label %cond_jump_then581, label %cond_else_block582

end_blockX135:                                    ; preds = %cond_else_blockX156, %cond_then_block155, %cond_then_block148, %cond_then_block142, %cond_then_block137
  br label %end_blockX

cond_then_block137:                               ; preds = %cond_end131
  %l1139 = load i64, i64* %l1, align 4
  %l2140 = load i64, i64* %l2, align 4
  %div = sdiv i64 %l1139, %l2140
  store i64 %div, i64* %l1, align 4
  br label %end_blockX135

cond_else_blockX138:                              ; preds = %after_break141
  %eqtmp144 = icmp eq i32 %op136, 37
  br i1 %eqtmp144, label %cond_then_block142, label %cond_else_blockX143

after_break141:                                   ; No predecessors!
  br label %cond_else_blockX138
  br label %cond_else_blockX143

cond_then_block142:                               ; preds = %cond_else_blockX138
  %l1145 = load i64, i64* %l1, align 4
  %l2146 = load i64, i64* %l2, align 4
  %srem = srem i64 %l1145, %l2146
  store i64 %srem, i64* %l1, align 4
  br label %end_blockX135

cond_else_blockX143:                              ; preds = %after_break147, %cond_else_blockX138, %after_break141
  %eqtmp150 = icmp eq i32 %op136, 176
  br i1 %eqtmp150, label %cond_then_block148, label %cond_else_blockX149

after_break147:                                   ; No predecessors!
  br label %cond_else_blockX143
  br label %cond_else_blockX149

cond_then_block148:                               ; preds = %cond_else_blockX143
  %l1151 = load i64, i64* %l1, align 4
  %l2152 = load i64, i64* %l2, align 4
  %div153 = sdiv i64 %l1151, %l2152
  store i64 %div153, i64* %l1, align 4
  br label %end_blockX135

cond_else_blockX149:                              ; preds = %after_break154, %cond_else_blockX143, %after_break147
  %eqtmp157 = icmp eq i32 %op136, 177
  br i1 %eqtmp157, label %cond_then_block155, label %cond_else_blockX156

after_break154:                                   ; No predecessors!
  br label %cond_else_blockX149
  br label %cond_else_blockX156

cond_then_block155:                               ; preds = %cond_else_blockX149
  %l1158 = load i64, i64* %l1, align 4
  %l2159 = load i64, i64* %l2, align 4
  %urem = urem i64 %l1158, %l2159
  store i64 %urem, i64* %l1, align 4
  br label %end_blockX135

cond_else_blockX156:                              ; preds = %after_break160, %cond_else_blockX149, %after_break154
  br label %end_blockX135

after_break160:                                   ; No predecessors!
  br label %cond_else_blockX156

after_break161:                                   ; No predecessors!
  br label %cond_else_blockX126
  br label %cond_else_blockX163

cond_then_block162:                               ; preds = %cond_else_blockX126
  %l1165 = load i64, i64* %l1, align 4
  %l2166 = load i64, i64* %l2, align 4
  %lshifttmp = shl i64 %l1165, %l2166
  store i64 %lshifttmp, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX163:                              ; preds = %after_break167, %cond_else_blockX126, %after_break161
  %eqtmp170 = icmp eq i32 %op78, 205
  br i1 %eqtmp170, label %cond_then_block168, label %cond_else_blockX169

after_break167:                                   ; No predecessors!
  br label %cond_else_blockX163
  br label %cond_else_blockX169

cond_then_block168:                               ; preds = %cond_else_blockX163
  %l1171 = load i64, i64* %l1, align 4
  %l2172 = load i64, i64* %l2, align 4
  %rshifttmp = lshr i64 %l1171, %l2172
  store i64 %rshifttmp, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX169:                              ; preds = %after_break173, %cond_else_blockX163, %after_break167
  %eqtmp176 = icmp eq i32 %op78, 2
  br i1 %eqtmp176, label %cond_then_block174, label %cond_else_blockX175

after_break173:                                   ; No predecessors!
  br label %cond_else_blockX169
  br label %cond_else_blockX175

cond_then_block174:                               ; preds = %cond_else_blockX169
  %l1177 = load i64, i64* %l1, align 4
  %l2178 = load i64, i64* %l2, align 4
  %rshifttmp179 = lshr i64 %l1177, %l2178
  store i64 %rshifttmp179, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX175:                              ; preds = %after_break180, %cond_else_blockX169, %after_break173
  %eqtmp183 = icmp eq i32 %op78, 146
  br i1 %eqtmp183, label %cond_then_block181, label %cond_else_blockX182

after_break180:                                   ; No predecessors!
  br label %cond_else_blockX175
  br label %cond_else_blockX182

cond_then_block181:                               ; preds = %cond_else_blockX175
  %l1184 = load i64, i64* %l1, align 4
  %l2185 = load i64, i64* %l2, align 4
  %le = icmp ult i64 %l1184, %l2185
  %icastD186 = sext i1 %le to i64
  store i64 %icastD186, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX182:                              ; preds = %after_break187, %cond_else_blockX175, %after_break180
  %eqtmp190 = icmp eq i32 %op78, 147
  br i1 %eqtmp190, label %cond_then_block188, label %cond_else_blockX189

after_break187:                                   ; No predecessors!
  br label %cond_else_blockX182
  br label %cond_else_blockX189

cond_then_block188:                               ; preds = %cond_else_blockX182
  %l1191 = load i64, i64* %l1, align 4
  %l2192 = load i64, i64* %l2, align 4
  %gteq_unsinged = icmp uge i64 %l1191, %l2192
  %icastD193 = sext i1 %gteq_unsinged to i64
  store i64 %icastD193, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX189:                              ; preds = %after_break194, %cond_else_blockX182, %after_break187
  %eqtmp197 = icmp eq i32 %op78, 148
  br i1 %eqtmp197, label %cond_then_block195, label %cond_else_blockX196

after_break194:                                   ; No predecessors!
  br label %cond_else_blockX189
  br label %cond_else_blockX196

cond_then_block195:                               ; preds = %cond_else_blockX189
  %l1198 = load i64, i64* %l1, align 4
  %l2199 = load i64, i64* %l2, align 4
  %eq200 = icmp eq i64 %l1198, %l2199
  %icastD201 = sext i1 %eq200 to i64
  store i64 %icastD201, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX196:                              ; preds = %after_break202, %cond_else_blockX189, %after_break194
  %eqtmp205 = icmp eq i32 %op78, 149
  br i1 %eqtmp205, label %cond_then_block203, label %cond_else_blockX204

after_break202:                                   ; No predecessors!
  br label %cond_else_blockX196
  br label %cond_else_blockX204

cond_then_block203:                               ; preds = %cond_else_blockX196
  %l1206 = load i64, i64* %l1, align 4
  %l2207 = load i64, i64* %l2, align 4
  %not_eq = icmp ne i64 %l1206, %l2207
  %icastD208 = sext i1 %not_eq to i64
  store i64 %icastD208, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX204:                              ; preds = %after_break209, %cond_else_blockX196, %after_break202
  %eqtmp212 = icmp eq i32 %op78, 150
  br i1 %eqtmp212, label %cond_then_block210, label %cond_else_blockX211

after_break209:                                   ; No predecessors!
  br label %cond_else_blockX204
  br label %cond_else_blockX211

cond_then_block210:                               ; preds = %cond_else_blockX204
  %l1213 = load i64, i64* %l1, align 4
  %l2214 = load i64, i64* %l2, align 4
  %leeq = icmp ule i64 %l1213, %l2214
  %icastD215 = sext i1 %leeq to i64
  store i64 %icastD215, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX211:                              ; preds = %after_break216, %cond_else_blockX204, %after_break209
  %eqtmp219 = icmp eq i32 %op78, 151
  br i1 %eqtmp219, label %cond_then_block217, label %cond_else_blockX218

after_break216:                                   ; No predecessors!
  br label %cond_else_blockX211
  br label %cond_else_blockX218

cond_then_block217:                               ; preds = %cond_else_blockX211
  %l1220 = load i64, i64* %l1, align 4
  %l2221 = load i64, i64* %l2, align 4
  %gt = icmp ugt i64 %l1220, %l2221
  %icastD222 = sext i1 %gt to i64
  store i64 %icastD222, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX218:                              ; preds = %after_break223, %cond_else_blockX211, %after_break216
  %eqtmp226 = icmp eq i32 %op78, 156
  br i1 %eqtmp226, label %cond_then_block224, label %cond_else_blockX225

after_break223:                                   ; No predecessors!
  br label %cond_else_blockX218
  br label %cond_else_blockX225

cond_then_block224:                               ; preds = %cond_else_blockX218
  %l1227 = load i64, i64* %l1, align 4
  %l2228 = load i64, i64* %l2, align 4
  %le229 = icmp slt i64 %l1227, %l2228
  %icastD230 = sext i1 %le229 to i64
  store i64 %icastD230, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX225:                              ; preds = %after_break231, %cond_else_blockX218, %after_break223
  %eqtmp234 = icmp eq i32 %op78, 157
  br i1 %eqtmp234, label %cond_then_block232, label %cond_else_blockX233

after_break231:                                   ; No predecessors!
  br label %cond_else_blockX225
  br label %cond_else_blockX233

cond_then_block232:                               ; preds = %cond_else_blockX225
  %l1235 = load i64, i64* %l1, align 4
  %l2236 = load i64, i64* %l2, align 4
  %gteq_signed = icmp sge i64 %l1235, %l2236
  %icastD237 = sext i1 %gteq_signed to i64
  store i64 %icastD237, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX233:                              ; preds = %after_break238, %cond_else_blockX225, %after_break231
  %eqtmp241 = icmp eq i32 %op78, 158
  br i1 %eqtmp241, label %cond_then_block239, label %cond_else_blockX240

after_break238:                                   ; No predecessors!
  br label %cond_else_blockX233
  br label %cond_else_blockX240

cond_then_block239:                               ; preds = %cond_else_blockX233
  %l1242 = load i64, i64* %l1, align 4
  %l2243 = load i64, i64* %l2, align 4
  %leeq244 = icmp sle i64 %l1242, %l2243
  %icastD245 = sext i1 %leeq244 to i64
  store i64 %icastD245, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX240:                              ; preds = %after_break246, %cond_else_blockX233, %after_break238
  %eqtmp249 = icmp eq i32 %op78, 159
  br i1 %eqtmp249, label %cond_then_block247, label %cond_else_blockX248

after_break246:                                   ; No predecessors!
  br label %cond_else_blockX240
  br label %cond_else_blockX248

cond_then_block247:                               ; preds = %cond_else_blockX240
  %l1250 = load i64, i64* %l1, align 4
  %l2251 = load i64, i64* %l2, align 4
  %gt252 = icmp sgt i64 %l1250, %l2251
  %icastD253 = sext i1 %gt252 to i64
  store i64 %icastD253, i64* %l1, align 4
  br label %end_blockX

cond_else_blockX248:                              ; preds = %after_break254, %cond_else_blockX240, %after_break246
  %eqtmp257 = icmp eq i32 %op78, 160
  br i1 %eqtmp257, label %cond_then_block255, label %cond_else_blockX256

after_break254:                                   ; No predecessors!
  br label %cond_else_blockX248
  br label %cond_else_blockX256

cond_then_block255:                               ; preds = %cond_else_blockX248
  %l1259 = load i64, i64* %l1, align 4
  %icmpA260 = icmp ne i64 %l1259, 0
  store i1 %icmpA260, i1* %andand258, align 1
  br i1 %icmpA260, label %cond_jump_then261, label %cond_jump_end262

cond_else_blockX256:                              ; preds = %after_break268, %cond_else_blockX248, %after_break254
  %eqtmp271 = icmp eq i32 %op78, 161
  br i1 %eqtmp271, label %cond_then_block269, label %cond_else_blockX270

cond_jump_then261:                                ; preds = %cond_then_block255
  %l2263 = load i64, i64* %l2, align 4
  %icmpA264 = icmp ne i64 %l2263, 0
  %andand265 = and i1 %icmpA260, %icmpA264
  store i1 %andand265, i1* %andand258, align 1
  br label %cond_jump_end262

cond_jump_end262:                                 ; preds = %cond_jump_then261, %cond_then_block255
  %andand_result_value266 = load i1, i1* %andand258, align 1
  %icastD267 = sext i1 %andand_result_value266 to i64
  store i64 %icastD267, i64* %l1, align 4
  br label %end_blockX

after_break268:                                   ; No predecessors!
  br label %cond_else_blockX256
  br label %cond_else_blockX270

cond_then_block269:                               ; preds = %cond_else_blockX256
  %l1272 = load i64, i64* %l1, align 4
  %icmpA273 = icmp ne i64 %l1272, 0
  store i1 %icmpA273, i1* %oror, align 1
  br i1 %icmpA273, label %cond_jump_end275, label %cond_jump_then274

cond_else_blockX270:                              ; preds = %after_break280, %cond_else_blockX256, %after_break268
  br label %cond_then_block281

cond_jump_then274:                                ; preds = %cond_then_block269
  %l2276 = load i64, i64* %l2, align 4
  %icmpA277 = icmp ne i64 %l2276, 0
  %oror278 = or i1 %icmpA273, %icmpA277
  store i1 %oror278, i1* %oror, align 1
  br label %cond_jump_end275

cond_jump_end275:                                 ; preds = %cond_jump_then274, %cond_then_block269
  %oror_result_value = load i1, i1* %oror, align 1
  %icastD279 = sext i1 %oror_result_value to i64
  store i64 %icastD279, i64* %l1, align 4
  br label %end_blockX

after_break280:                                   ; No predecessors!
  br label %cond_else_blockX270
  br label %cond_else_blockX282

cond_then_block281:                               ; preds = %cond_else_blockX270
  br label %gen_opic.general_case
  br label %cond_else_blockX282

cond_else_blockX282:                              ; preds = %cond_then_block281, %after_break280
  br label %end_blockX

cond_jump_then295:                                ; preds = %cond_else_block76
  %op301 = load i32, i32* %op, align 4
  %eq302 = icmp eq i32 %op301, 43
  store i1 %eq302, i1* %oror300, align 1
  br i1 %eq302, label %cond_jump_end304, label %cond_jump_then303

cond_jump_end296:                                 ; preds = %cond_jump_end322, %cond_else_block76
  %andand_result_value328 = load i1, i1* %andand292, align 1
  br i1 %andand_result_value328, label %cond_jump_then329, label %cond_end330

cond_jump_then303:                                ; preds = %cond_jump_then295
  %op305 = load i32, i32* %op, align 4
  %eq306 = icmp eq i32 %op305, 38
  %oror307 = or i1 %eq302, %eq306
  store i1 %oror307, i1* %oror300, align 1
  br label %cond_jump_end304

cond_jump_end304:                                 ; preds = %cond_jump_then303, %cond_jump_then295
  %oror_result_value308 = load i1, i1* %oror300, align 1
  store i1 %oror_result_value308, i1* %oror299, align 1
  br i1 %oror_result_value308, label %cond_jump_end310, label %cond_jump_then309

cond_jump_then309:                                ; preds = %cond_jump_end304
  %op311 = load i32, i32* %op, align 4
  %eq312 = icmp eq i32 %op311, 94
  %oror313 = or i1 %oror_result_value308, %eq312
  store i1 %oror313, i1* %oror299, align 1
  br label %cond_jump_end310

cond_jump_end310:                                 ; preds = %cond_jump_then309, %cond_jump_end304
  %oror_result_value314 = load i1, i1* %oror299, align 1
  store i1 %oror_result_value314, i1* %oror298, align 1
  br i1 %oror_result_value314, label %cond_jump_end316, label %cond_jump_then315

cond_jump_then315:                                ; preds = %cond_jump_end310
  %op317 = load i32, i32* %op, align 4
  %eq318 = icmp eq i32 %op317, 124
  %oror319 = or i1 %oror_result_value314, %eq318
  store i1 %oror319, i1* %oror298, align 1
  br label %cond_jump_end316

cond_jump_end316:                                 ; preds = %cond_jump_then315, %cond_jump_end310
  %oror_result_value320 = load i1, i1* %oror298, align 1
  store i1 %oror_result_value320, i1* %oror297, align 1
  br i1 %oror_result_value320, label %cond_jump_end322, label %cond_jump_then321

cond_jump_then321:                                ; preds = %cond_jump_end316
  %op323 = load i32, i32* %op, align 4
  %eq324 = icmp eq i32 %op323, 42
  %oror325 = or i1 %oror_result_value320, %eq324
  store i1 %oror325, i1* %oror297, align 1
  br label %cond_jump_end322

cond_jump_end322:                                 ; preds = %cond_jump_then321, %cond_jump_end316
  %oror_result_value326 = load i1, i1* %oror297, align 1
  %andand327 = and i1 %icmpA294, %oror_result_value326
  store i1 %andand327, i1* %andand292, align 1
  br label %cond_jump_end296

cond_jump_then329:                                ; preds = %cond_jump_end296
  call void @vswap()
  %c1331 = load i32, i32* %c1, align 4
  store i32 %c1331, i32* %c2, align 4
  %l1332 = load i64, i64* %l1, align 4
  store i64 %l1332, i64* %l2, align 4
  br label %cond_end330

cond_end330:                                      ; preds = %cond_jump_then329, %cond_jump_end296
  %c2334 = load i32, i32* %c2, align 4
  %icmpA335 = icmp ne i32 %c2334, 0
  store i1 %icmpA335, i1* %andand333, align 1
  br i1 %icmpA335, label %cond_jump_then336, label %cond_jump_end337

cond_jump_then336:                                ; preds = %cond_end330
  %op344 = load i32, i32* %op, align 4
  %eq345 = icmp eq i32 %op344, 42
  store i1 %eq345, i1* %oror343, align 1
  br i1 %eq345, label %cond_jump_end347, label %cond_jump_then346

cond_jump_end337:                                 ; preds = %cond_jump_end426, %cond_end330
  %andand_result_value439 = load i1, i1* %andand333, align 1
  br i1 %andand_result_value439, label %cond_jump_then440, label %cond_jump_elif0441

cond_jump_then346:                                ; preds = %cond_jump_then336
  %op348 = load i32, i32* %op, align 4
  %eq349 = icmp eq i32 %op348, 47
  %oror350 = or i1 %eq345, %eq349
  store i1 %oror350, i1* %oror343, align 1
  br label %cond_jump_end347

cond_jump_end347:                                 ; preds = %cond_jump_then346, %cond_jump_then336
  %oror_result_value351 = load i1, i1* %oror343, align 1
  store i1 %oror_result_value351, i1* %oror342, align 1
  br i1 %oror_result_value351, label %cond_jump_end353, label %cond_jump_then352

cond_jump_then352:                                ; preds = %cond_jump_end347
  %op354 = load i32, i32* %op, align 4
  %eq355 = icmp eq i32 %op354, 176
  %oror356 = or i1 %oror_result_value351, %eq355
  store i1 %oror356, i1* %oror342, align 1
  br label %cond_jump_end353

cond_jump_end353:                                 ; preds = %cond_jump_then352, %cond_jump_end347
  %oror_result_value357 = load i1, i1* %oror342, align 1
  store i1 %oror_result_value357, i1* %oror341, align 1
  br i1 %oror_result_value357, label %cond_jump_end359, label %cond_jump_then358

cond_jump_then358:                                ; preds = %cond_jump_end353
  %op360 = load i32, i32* %op, align 4
  %eq361 = icmp eq i32 %op360, 178
  %oror362 = or i1 %oror_result_value357, %eq361
  store i1 %oror362, i1* %oror341, align 1
  br label %cond_jump_end359

cond_jump_end359:                                 ; preds = %cond_jump_then358, %cond_jump_end353
  %oror_result_value363 = load i1, i1* %oror341, align 1
  store i1 %oror_result_value363, i1* %andand340, align 1
  br i1 %oror_result_value363, label %cond_jump_then364, label %cond_jump_end365

cond_jump_then364:                                ; preds = %cond_jump_end359
  %l2366 = load i64, i64* %l2, align 4
  %eq367 = icmp eq i64 %l2366, 1
  %andand368 = and i1 %oror_result_value363, %eq367
  store i1 %andand368, i1* %andand340, align 1
  br label %cond_jump_end365

cond_jump_end365:                                 ; preds = %cond_jump_then364, %cond_jump_end359
  %andand_result_value369 = load i1, i1* %andand340, align 1
  store i1 %andand_result_value369, i1* %oror339, align 1
  br i1 %andand_result_value369, label %cond_jump_end371, label %cond_jump_then370

cond_jump_then370:                                ; preds = %cond_jump_end365
  %op379 = load i32, i32* %op, align 4
  %eq380 = icmp eq i32 %op379, 43
  store i1 %eq380, i1* %oror378, align 1
  br i1 %eq380, label %cond_jump_end382, label %cond_jump_then381

cond_jump_end371:                                 ; preds = %cond_jump_end418, %cond_jump_end365
  %oror_result_value424 = load i1, i1* %oror339, align 1
  store i1 %oror_result_value424, i1* %oror338, align 1
  br i1 %oror_result_value424, label %cond_jump_end426, label %cond_jump_then425

cond_jump_then381:                                ; preds = %cond_jump_then370
  %op383 = load i32, i32* %op, align 4
  %eq384 = icmp eq i32 %op383, 45
  %oror385 = or i1 %eq380, %eq384
  store i1 %oror385, i1* %oror378, align 1
  br label %cond_jump_end382

cond_jump_end382:                                 ; preds = %cond_jump_then381, %cond_jump_then370
  %oror_result_value386 = load i1, i1* %oror378, align 1
  store i1 %oror_result_value386, i1* %oror377, align 1
  br i1 %oror_result_value386, label %cond_jump_end388, label %cond_jump_then387

cond_jump_then387:                                ; preds = %cond_jump_end382
  %op389 = load i32, i32* %op, align 4
  %eq390 = icmp eq i32 %op389, 124
  %oror391 = or i1 %oror_result_value386, %eq390
  store i1 %oror391, i1* %oror377, align 1
  br label %cond_jump_end388

cond_jump_end388:                                 ; preds = %cond_jump_then387, %cond_jump_end382
  %oror_result_value392 = load i1, i1* %oror377, align 1
  store i1 %oror_result_value392, i1* %oror376, align 1
  br i1 %oror_result_value392, label %cond_jump_end394, label %cond_jump_then393

cond_jump_then393:                                ; preds = %cond_jump_end388
  %op395 = load i32, i32* %op, align 4
  %eq396 = icmp eq i32 %op395, 94
  %oror397 = or i1 %oror_result_value392, %eq396
  store i1 %oror397, i1* %oror376, align 1
  br label %cond_jump_end394

cond_jump_end394:                                 ; preds = %cond_jump_then393, %cond_jump_end388
  %oror_result_value398 = load i1, i1* %oror376, align 1
  store i1 %oror_result_value398, i1* %oror375, align 1
  br i1 %oror_result_value398, label %cond_jump_end400, label %cond_jump_then399

cond_jump_then399:                                ; preds = %cond_jump_end394
  %op401 = load i32, i32* %op, align 4
  %eq402 = icmp eq i32 %op401, 1
  %oror403 = or i1 %oror_result_value398, %eq402
  store i1 %oror403, i1* %oror375, align 1
  br label %cond_jump_end400

cond_jump_end400:                                 ; preds = %cond_jump_then399, %cond_jump_end394
  %oror_result_value404 = load i1, i1* %oror375, align 1
  store i1 %oror_result_value404, i1* %oror374, align 1
  br i1 %oror_result_value404, label %cond_jump_end406, label %cond_jump_then405

cond_jump_then405:                                ; preds = %cond_jump_end400
  %op407 = load i32, i32* %op, align 4
  %eq408 = icmp eq i32 %op407, 205
  %oror409 = or i1 %oror_result_value404, %eq408
  store i1 %oror409, i1* %oror374, align 1
  br label %cond_jump_end406

cond_jump_end406:                                 ; preds = %cond_jump_then405, %cond_jump_end400
  %oror_result_value410 = load i1, i1* %oror374, align 1
  store i1 %oror_result_value410, i1* %oror373, align 1
  br i1 %oror_result_value410, label %cond_jump_end412, label %cond_jump_then411

cond_jump_then411:                                ; preds = %cond_jump_end406
  %op413 = load i32, i32* %op, align 4
  %eq414 = icmp eq i32 %op413, 2
  %oror415 = or i1 %oror_result_value410, %eq414
  store i1 %oror415, i1* %oror373, align 1
  br label %cond_jump_end412

cond_jump_end412:                                 ; preds = %cond_jump_then411, %cond_jump_end406
  %oror_result_value416 = load i1, i1* %oror373, align 1
  store i1 %oror_result_value416, i1* %andand372, align 1
  br i1 %oror_result_value416, label %cond_jump_then417, label %cond_jump_end418

cond_jump_then417:                                ; preds = %cond_jump_end412
  %l2419 = load i64, i64* %l2, align 4
  %eq420 = icmp eq i64 %l2419, 0
  %andand421 = and i1 %oror_result_value416, %eq420
  store i1 %andand421, i1* %andand372, align 1
  br label %cond_jump_end418

cond_jump_end418:                                 ; preds = %cond_jump_then417, %cond_jump_end412
  %andand_result_value422 = load i1, i1* %andand372, align 1
  %oror423 = or i1 %andand_result_value369, %andand_result_value422
  store i1 %oror423, i1* %oror339, align 1
  br label %cond_jump_end371

cond_jump_then425:                                ; preds = %cond_jump_end371
  %op428 = load i32, i32* %op, align 4
  %eq429 = icmp eq i32 %op428, 38
  store i1 %eq429, i1* %andand427, align 1
  br i1 %eq429, label %cond_jump_then430, label %cond_jump_end431

cond_jump_end426:                                 ; preds = %cond_jump_end431, %cond_jump_end371
  %oror_result_value437 = load i1, i1* %oror338, align 1
  %andand438 = and i1 %icmpA335, %oror_result_value437
  store i1 %andand438, i1* %andand333, align 1
  br label %cond_jump_end337

cond_jump_then430:                                ; preds = %cond_jump_then425
  %l2432 = load i64, i64* %l2, align 4
  %eq433 = icmp eq i64 %l2432, -1
  %andand434 = and i1 %eq429, %eq433
  store i1 %andand434, i1* %andand427, align 1
  br label %cond_jump_end431

cond_jump_end431:                                 ; preds = %cond_jump_then430, %cond_jump_then425
  %andand_result_value435 = load i1, i1* %andand427, align 1
  %oror436 = or i1 %oror_result_value424, %andand_result_value435
  store i1 %oror436, i1* %oror338, align 1
  br label %cond_jump_end426

cond_jump_then440:                                ; preds = %cond_jump_end337
  %vtop445 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI446 = ptrtoint %SValue* %vtop445 to i64
  %sub447 = sub i64 %ptrToIntI446, 64
  %iintToPtrD448 = inttoptr i64 %sub447 to %SValue*
  store %SValue* %iintToPtrD448, %SValue** @vtop, align 8
  %ptrToIntC449 = ptrtoint %SValue* %iintToPtrD448 to i64
  %add450 = add i64 %ptrToIntC449, 64
  %intToPtrB451 = inttoptr i64 %add450 to %SValue*
  br label %cond_end444

cond_jump_elif0441:                               ; preds = %cond_jump_end337
  %c2453 = load i32, i32* %c2, align 4
  %icmpA454 = icmp ne i32 %c2453, 0
  store i1 %icmpA454, i1* %andand452, align 1
  br i1 %icmpA454, label %cond_jump_then455, label %cond_jump_end456

cond_jump_elif_then0442:                          ; preds = %cond_jump_end456
  %l2476 = load i64, i64* %l2, align 4
  %gt477 = icmp sgt i64 %l2476, 0
  store i1 %gt477, i1* %andand475, align 1
  br i1 %gt477, label %cond_jump_then478, label %cond_jump_end479

cond_jump_elif1:                                  ; preds = %cond_jump_end456
  %c2516 = load i32, i32* %c2, align 4
  %icmpA517 = icmp ne i32 %c2516, 0
  store i1 %icmpA517, i1* %andand515, align 1
  br i1 %icmpA517, label %cond_jump_then518, label %cond_jump_end519

cond_jump_elif_then1:                             ; preds = %cond_jump_end532
  %op555 = load i32, i32* %op, align 4
  %eq556 = icmp eq i32 %op555, 45
  br i1 %eq556, label %cond_jump_then557, label %cond_end558

cond_else_block443:                               ; preds = %cond_jump_end532
  br label %gen_opic.general_case

cond_end444:                                      ; preds = %cond_end583, %cond_end558, %cond_end488, %cond_jump_then440
  br label %cond_end77

cond_jump_then455:                                ; preds = %cond_jump_elif0441
  %op459 = load i32, i32* %op, align 4
  %eq460 = icmp eq i32 %op459, 42
  store i1 %eq460, i1* %oror458, align 1
  br i1 %eq460, label %cond_jump_end462, label %cond_jump_then461

cond_jump_end456:                                 ; preds = %cond_jump_end468, %cond_jump_elif0441
  %andand_result_value474 = load i1, i1* %andand452, align 1
  br i1 %andand_result_value474, label %cond_jump_elif_then0442, label %cond_jump_elif1

cond_jump_then461:                                ; preds = %cond_jump_then455
  %op463 = load i32, i32* %op, align 4
  %eq464 = icmp eq i32 %op463, 178
  %oror465 = or i1 %eq460, %eq464
  store i1 %oror465, i1* %oror458, align 1
  br label %cond_jump_end462

cond_jump_end462:                                 ; preds = %cond_jump_then461, %cond_jump_then455
  %oror_result_value466 = load i1, i1* %oror458, align 1
  store i1 %oror_result_value466, i1* %oror457, align 1
  br i1 %oror_result_value466, label %cond_jump_end468, label %cond_jump_then467

cond_jump_then467:                                ; preds = %cond_jump_end462
  %op469 = load i32, i32* %op, align 4
  %eq470 = icmp eq i32 %op469, 176
  %oror471 = or i1 %oror_result_value466, %eq470
  store i1 %oror471, i1* %oror457, align 1
  br label %cond_jump_end468

cond_jump_end468:                                 ; preds = %cond_jump_then467, %cond_jump_end462
  %oror_result_value472 = load i1, i1* %oror457, align 1
  %andand473 = and i1 %icmpA454, %oror_result_value472
  store i1 %andand473, i1* %andand452, align 1
  br label %cond_jump_end456

cond_jump_then478:                                ; preds = %cond_jump_elif_then0442
  %l2480 = load i64, i64* %l2, align 4
  %l2481 = load i64, i64* %l2, align 4
  %sub482 = sub i64 %l2481, 1
  %andtmp483 = and i64 %l2480, %sub482
  %eq484 = icmp eq i64 %andtmp483, 0
  %andand485 = and i1 %gt477, %eq484
  store i1 %andand485, i1* %andand475, align 1
  br label %cond_jump_end479

cond_jump_end479:                                 ; preds = %cond_jump_then478, %cond_jump_elif_then0442
  %andand_result_value486 = load i1, i1* %andand475, align 1
  br i1 %andand_result_value486, label %cond_jump_then487, label %cond_end488

cond_jump_then487:                                ; preds = %cond_jump_end479
  store i32 -1, i32* %n, align 4
  br label %loop_top_block

cond_end488:                                      ; preds = %cond_end511, %cond_jump_end479
  br label %gen_opic.general_case
  br label %cond_end444

loop_top_block:                                   ; preds = %cond_then_block491, %cond_jump_then487
  %l2489 = load i64, i64* %l2, align 4
  %icmpA490 = icmp ne i64 %l2489, 0
  br i1 %icmpA490, label %cond_then_block491, label %cond_end_block

cond_then_block491:                               ; preds = %loop_top_block
  %l2492 = load i64, i64* %l2, align 4
  %rshifttmp493 = lshr i64 %l2492, 1
  store i64 %rshifttmp493, i64* %l2, align 4
  %n494 = load i32, i32* %n, align 4
  %add495 = add i32 %n494, 1
  store i32 %add495, i32* %n, align 4
  %n496 = load i32, i32* %n, align 4
  %sub497 = sub i32 %n496, 1
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %vtop498 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL499 = getelementptr inbounds %SValue, %SValue* %vtop498, i32 0, i32 3
  %c500 = load %CValue, %CValue* %fieldLLL499, align 16
  %n501 = load i32, i32* %n, align 4
  %icastD502 = sext i32 %n501 to i64
  %fieldIII503 = getelementptr inbounds %CValue, %CValue* %fieldLLL499, i32 0, i32 0
  %icastN504 = bitcast fp128* %fieldIII503 to i64*
  store i64 %icastD502, i64* %icastN504, align 4
  %op505 = load i32, i32* %op, align 4
  %eq506 = icmp eq i32 %op505, 42
  br i1 %eq506, label %cond_jump_then507, label %cond_jump_elif0508

cond_jump_then507:                                ; preds = %cond_end_block
  store i32 1, i32* %op, align 4
  br label %cond_end511

cond_jump_elif0508:                               ; preds = %cond_end_block
  %op512 = load i32, i32* %op, align 4
  %eq513 = icmp eq i32 %op512, 178
  br i1 %eq513, label %cond_jump_elif_then0509, label %cond_else_block510

cond_jump_elif_then0509:                          ; preds = %cond_jump_elif0508
  store i32 2, i32* %op, align 4
  br label %cond_end511

cond_else_block510:                               ; preds = %cond_jump_elif0508
  store i32 205, i32* %op, align 4
  br label %cond_end511

cond_end511:                                      ; preds = %cond_else_block510, %cond_jump_elif_then0509, %cond_jump_then507
  br label %cond_end488

cond_jump_then518:                                ; preds = %cond_jump_elif1
  %op521 = load i32, i32* %op, align 4
  %eq522 = icmp eq i32 %op521, 43
  store i1 %eq522, i1* %oror520, align 1
  br i1 %eq522, label %cond_jump_end524, label %cond_jump_then523

cond_jump_end519:                                 ; preds = %cond_jump_end524, %cond_jump_elif1
  %andand_result_value530 = load i1, i1* %andand515, align 1
  store i1 %andand_result_value530, i1* %andand514, align 1
  br i1 %andand_result_value530, label %cond_jump_then531, label %cond_jump_end532

cond_jump_then523:                                ; preds = %cond_jump_then518
  %op525 = load i32, i32* %op, align 4
  %eq526 = icmp eq i32 %op525, 45
  %oror527 = or i1 %eq522, %eq526
  store i1 %oror527, i1* %oror520, align 1
  br label %cond_jump_end524

cond_jump_end524:                                 ; preds = %cond_jump_then523, %cond_jump_then518
  %oror_result_value528 = load i1, i1* %oror520, align 1
  %andand529 = and i1 %icmpA517, %oror_result_value528
  store i1 %andand529, i1* %andand515, align 1
  br label %cond_jump_end519

cond_jump_then531:                                ; preds = %cond_jump_end519
  %vtop534 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY = getelementptr inbounds %SValue, %SValue* %element_addressAB, i32 -1
  %load_element = load %SValue, %SValue* %element_addressXYXZY, align 16
  %fieldVVV535 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY, i32 0, i32 1
  %r536 = load i16, i16* %fieldVVV535, align 2
  %icastKY537 = zext i16 %r536 to i32
  %andtmp538 = and i32 %icastKY537, 1023
  %eq539 = icmp eq i32 %andtmp538, 752
  store i1 %eq539, i1* %oror533, align 1
  br i1 %eq539, label %cond_jump_end541, label %cond_jump_then540

cond_jump_end532:                                 ; preds = %cond_jump_end541, %cond_jump_end519
  %andand_result_value554 = load i1, i1* %andand514, align 1
  br i1 %andand_result_value554, label %cond_jump_elif_then1, label %cond_else_block443

cond_jump_then540:                                ; preds = %cond_jump_then531
  %vtop542 = load %SValue*, %SValue** @vtop, align 8
  %element_addressAB543 = load %SValue*, %SValue** @vtop, align 8
  %element_addressXYXZY544 = getelementptr inbounds %SValue, %SValue* %element_addressAB543, i32 -1
  %load_element545 = load %SValue, %SValue* %element_addressXYXZY544, align 16
  %fieldVVV546 = getelementptr inbounds %SValue, %SValue* %element_addressXYXZY544, i32 0, i32 1
  %r547 = load i16, i16* %fieldVVV546, align 2
  %icastKY548 = zext i16 %r547 to i32
  %andtmp549 = and i32 %icastKY548, 511
  %eq550 = icmp eq i32 %andtmp549, 242
  %oror551 = or i1 %eq539, %eq550
  store i1 %oror551, i1* %oror533, align 1
  br label %cond_jump_end541

cond_jump_end541:                                 ; preds = %cond_jump_then540, %cond_jump_then531
  %oror_result_value552 = load i1, i1* %oror533, align 1
  %andand553 = and i1 %andand_result_value530, %oror_result_value552
  store i1 %andand553, i1* %andand514, align 1
  br label %cond_jump_end532

cond_jump_then557:                                ; preds = %cond_jump_elif_then1
  %l2559 = load i64, i64* %l2, align 4
  %sub560 = sub i64 0, %l2559
  store i64 %sub560, i64* %l2, align 4
  br label %cond_end558

cond_end558:                                      ; preds = %cond_jump_then557, %cond_jump_elif_then1
  %vtop561 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI562 = ptrtoint %SValue* %vtop561 to i64
  %sub563 = sub i64 %ptrToIntI562, 64
  %iintToPtrD564 = inttoptr i64 %sub563 to %SValue*
  store %SValue* %iintToPtrD564, %SValue** @vtop, align 8
  %ptrToIntC565 = ptrtoint %SValue* %iintToPtrD564 to i64
  %add566 = add i64 %ptrToIntC565, 64
  %intToPtrB567 = inttoptr i64 %add566 to %SValue*
  %vtop568 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL569 = getelementptr inbounds %SValue, %SValue* %vtop568, i32 0, i32 3
  %c570 = load %CValue, %CValue* %fieldLLL569, align 16
  %vtop571 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL572 = getelementptr inbounds %SValue, %SValue* %vtop571, i32 0, i32 3
  %c573 = load %CValue, %CValue* %fieldLLL572, align 16
  %ICASTO574 = bitcast %CValue* %fieldLLL572 to i64*
  %ll575 = load i64, i64* %ICASTO574, align 4
  %l2576 = load i64, i64* %l2, align 4
  %add577 = add i64 %ll575, %l2576
  %fieldIII578 = getelementptr inbounds %CValue, %CValue* %fieldLLL569, i32 0, i32 0
  %icastN579 = bitcast fp128* %fieldIII578 to i64*
  store i64 %add577, i64* %icastN579, align 4
  br label %cond_end444

cond_jump_then581:                                ; preds = %gen_opic.general_case
  %t1585 = load i32, i32* %t1, align 4
  %eq586 = icmp eq i32 %t1585, 12
  store i1 %eq586, i1* %oror584, align 1
  br i1 %eq586, label %cond_jump_end588, label %cond_jump_then587

cond_else_block582:                               ; preds = %gen_opic.general_case
  %vtop598 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI599 = ptrtoint %SValue* %vtop598 to i64
  %sub600 = sub i64 %ptrToIntI599, 64
  %iintToPtrD601 = inttoptr i64 %sub600 to %SValue*
  store %SValue* %iintToPtrD601, %SValue** @vtop, align 8
  %ptrToIntC602 = ptrtoint %SValue* %iintToPtrD601 to i64
  %add603 = add i64 %ptrToIntC602, 64
  %intToPtrB604 = inttoptr i64 %add603 to %SValue*
  br label %cond_end583

cond_end583:                                      ; preds = %cond_else_block582, %cond_end595
  br label %cond_end444

cond_jump_then587:                                ; preds = %cond_jump_then581
  %t2589 = load i32, i32* %t2, align 4
  %eq590 = icmp eq i32 %t2589, 12
  %oror591 = or i1 %eq586, %eq590
  store i1 %oror591, i1* %oror584, align 1
  br label %cond_jump_end588

cond_jump_end588:                                 ; preds = %cond_jump_then587, %cond_jump_then581
  %oror_result_value592 = load i1, i1* %oror584, align 1
  br i1 %oror_result_value592, label %cond_jump_then593, label %cond_else_block594

cond_jump_then593:                                ; preds = %cond_jump_end588
  %op596 = load i32, i32* %op, align 4
  call void @gen_opl(i32 %op596)
  br label %cond_end595

cond_else_block594:                               ; preds = %cond_jump_end588
  %op597 = load i32, i32* %op, align 4
  call void @gen_opi(i32 %op597)
  br label %cond_end595

cond_end595:                                      ; preds = %cond_else_block594, %cond_jump_then593
  br label %cond_end583
}

define void @gen_opif(i32 %0) {
entry:
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %f2 = alloca fp128, align 16
  %f1 = alloca fp128, align 16
  %v2 = alloca %SValue*, align 8
  %v1 = alloca %SValue*, align 8
  %c2 = alloca i32, align 4
  %c1 = alloca i32, align 4
  %op = alloca i32, align 4
  %op1 = alloca i32*, align 8
  store i32 %0, i32* %op, align 4
  store i32* %op, i32** %op1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop to i64
  %sub = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub to %SValue*
  store %SValue* %iintToPtrD, %SValue** %v1, align 8
  %vtop2 = load %SValue*, %SValue** @vtop, align 8
  store %SValue* %vtop2, %SValue** %v2, align 8
  %v13 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %v13, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 1023
  %eq = icmp eq i32 %andtmp, 240
  %icastKX = zext i1 %eq to i32
  store i32 %icastKX, i32* %c1, align 4
  %v24 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL5 = getelementptr inbounds %SValue, %SValue* %v24, i32 0, i32 1
  %r6 = load i16, i16* %fieldLLL5, align 2
  %icastKY7 = zext i16 %r6 to i32
  %andtmp8 = and i32 %icastKY7, 1023
  %eq9 = icmp eq i32 %andtmp8, 240
  %icastKX10 = zext i1 %eq9 to i32
  store i32 %icastKX10, i32* %c2, align 4
  %c111 = load i32, i32* %c1, align 4
  %icmpA = icmp ne i32 %c111, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %c212 = load i32, i32* %c2, align 4
  %icmpA13 = icmp ne i32 %c212, 0
  %andand14 = and i1 %icmpA, %icmpA13
  store i1 %andand14, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then15, label %cond_else_block

cond_jump_then15:                                 ; preds = %cond_jump_end
  %v116 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL17 = getelementptr inbounds %SValue, %SValue* %v116, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL17, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL17, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %eq18 = icmp eq i32 %t, 8
  br i1 %eq18, label %cond_jump_then19, label %cond_jump_elif0

cond_else_block:                                  ; preds = %cond_jump_end
  br label %gen_opif.general_case

cond_end:                                         ; preds = %cond_end146, %cond_end114
  ret void

cond_jump_then19:                                 ; preds = %cond_jump_then15
  %v122 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL23 = getelementptr inbounds %SValue, %SValue* %v122, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL23, align 16
  %ICASTO = bitcast %CValue* %fieldLLL23 to float*
  %f = load float, float* %ICASTO, align 4
  %icastKLL = fpext float %f to fp128
  store fp128 %icastKLL, fp128* %f1, align 16
  %v224 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL25 = getelementptr inbounds %SValue, %SValue* %v224, i32 0, i32 3
  %c26 = load %CValue, %CValue* %fieldLLL25, align 16
  %ICASTO27 = bitcast %CValue* %fieldLLL25 to float*
  %f28 = load float, float* %ICASTO27, align 4
  %icastKLL29 = fpext float %f28 to fp128
  store fp128 %icastKLL29, fp128* %f2, align 16
  br label %cond_end21

cond_jump_elif0:                                  ; preds = %cond_jump_then15
  %v130 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL31 = getelementptr inbounds %SValue, %SValue* %v130, i32 0, i32 0
  %type32 = load %CType, %CType* %fieldLLL31, align 8
  %fieldVVV33 = getelementptr inbounds %CType, %CType* %fieldLLL31, i32 0, i32 0
  %t34 = load i32, i32* %fieldVVV33, align 4
  %eq35 = icmp eq i32 %t34, 9
  br i1 %eq35, label %cond_jump_elif_then0, label %cond_else_block20

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %v136 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL37 = getelementptr inbounds %SValue, %SValue* %v136, i32 0, i32 3
  %c38 = load %CValue, %CValue* %fieldLLL37, align 16
  %ICASTO39 = bitcast %CValue* %fieldLLL37 to double*
  %d = load double, double* %ICASTO39, align 8
  %icastKLL40 = fpext double %d to fp128
  store fp128 %icastKLL40, fp128* %f1, align 16
  %v241 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL42 = getelementptr inbounds %SValue, %SValue* %v241, i32 0, i32 3
  %c43 = load %CValue, %CValue* %fieldLLL42, align 16
  %ICASTO44 = bitcast %CValue* %fieldLLL42 to double*
  %d45 = load double, double* %ICASTO44, align 8
  %icastKLL46 = fpext double %d45 to fp128
  store fp128 %icastKLL46, fp128* %f2, align 16
  br label %cond_end21

cond_else_block20:                                ; preds = %cond_jump_elif0
  %v147 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL48 = getelementptr inbounds %SValue, %SValue* %v147, i32 0, i32 3
  %c49 = load %CValue, %CValue* %fieldLLL48, align 16
  %ICASTO50 = bitcast %CValue* %fieldLLL48 to fp128*
  %ld = load fp128, fp128* %ICASTO50, align 16
  store fp128 %ld, fp128* %f1, align 16
  %v251 = load %SValue*, %SValue** %v2, align 8
  %fieldLLL52 = getelementptr inbounds %SValue, %SValue* %v251, i32 0, i32 3
  %c53 = load %CValue, %CValue* %fieldLLL52, align 16
  %ICASTO54 = bitcast %CValue* %fieldLLL52 to fp128*
  %ld55 = load fp128, fp128* %ICASTO54, align 16
  store fp128 %ld55, fp128* %f2, align 16
  br label %cond_end21

cond_end21:                                       ; preds = %cond_else_block20, %cond_jump_elif_then0, %cond_jump_then19
  %f156 = load fp128, fp128* %f1, align 16
  %icastKLL57 = fptrunc fp128 %f156 to double
  %fun_result = call i32 @ieee_finite(double %icastKLL57)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA58 = icmp ne i32 %castOOOO, 0
  store i1 %icmpA58, i1* %oror, align 1
  br i1 %icmpA58, label %cond_jump_end60, label %cond_jump_then59

cond_jump_then59:                                 ; preds = %cond_end21
  %f261 = load fp128, fp128* %f2, align 16
  %icastKLL62 = fptrunc fp128 %f261 to double
  %fun_result63 = call i32 @ieee_finite(double %icastKLL62)
  %logical_denial64 = icmp eq i32 %fun_result63, 0
  %castOOOO65 = zext i1 %logical_denial64 to i32
  %icmpA66 = icmp ne i32 %castOOOO65, 0
  %oror67 = or i1 %icmpA58, %icmpA66
  store i1 %oror67, i1* %oror, align 1
  br label %cond_jump_end60

cond_jump_end60:                                  ; preds = %cond_jump_then59, %cond_end21
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then68, label %cond_end69

cond_jump_then68:                                 ; preds = %cond_jump_end60
  br label %gen_opif.general_case
  br label %cond_end69

cond_end69:                                       ; preds = %cond_jump_then68, %cond_jump_end60
  %op70 = load i32, i32* %op, align 4
  %eqtmp = icmp eq i32 %op70, 43
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

gen_opif.general_case:                            ; preds = %cond_else_block, %cond_then_block102, %cond_end98, %cond_jump_then68
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  %logical_denial141 = icmp eq i32 %nocode_wanted, 0
  %castOOOO142 = zext i1 %logical_denial141 to i32
  %icmpA143 = icmp ne i32 %castOOOO142, 0
  br i1 %icmpA143, label %cond_jump_then144, label %cond_else_block145

end_blockX:                                       ; preds = %cond_else_blockX103, %cond_end95, %cond_then_block83, %cond_then_block74, %cond_then_block
  %v1104 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL105 = getelementptr inbounds %SValue, %SValue* %v1104, i32 0, i32 0
  %type106 = load %CType, %CType* %fieldLLL105, align 8
  %fieldVVV107 = getelementptr inbounds %CType, %CType* %fieldLLL105, i32 0, i32 0
  %t108 = load i32, i32* %fieldVVV107, align 4
  %eq109 = icmp eq i32 %t108, 8
  br i1 %eq109, label %cond_jump_then110, label %cond_jump_elif0111

cond_then_block:                                  ; preds = %cond_end69
  %f171 = load fp128, fp128* %f1, align 16
  %f272 = load fp128, fp128* %f2, align 16
  %fadd = fadd fp128 %f171, %f272
  store fp128 %fadd, fp128* %f1, align 16
  %f273 = load fp128, fp128* %f2, align 16
  %fsub = fsub fp128 %fadd, %f273
  br label %end_blockX

cond_else_blockX:                                 ; preds = %after_break, %cond_end69
  %eqtmp76 = icmp eq i32 %op70, 45
  br i1 %eqtmp76, label %cond_then_block74, label %cond_else_blockX75

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX75

cond_then_block74:                                ; preds = %cond_else_blockX
  %f177 = load fp128, fp128* %f1, align 16
  %f278 = load fp128, fp128* %f2, align 16
  %fsub79 = fsub fp128 %f177, %f278
  store fp128 %fsub79, fp128* %f1, align 16
  %f280 = load fp128, fp128* %f2, align 16
  %fadd81 = fadd fp128 %fsub79, %f280
  br label %end_blockX

cond_else_blockX75:                               ; preds = %after_break82, %cond_else_blockX, %after_break
  %eqtmp85 = icmp eq i32 %op70, 42
  br i1 %eqtmp85, label %cond_then_block83, label %cond_else_blockX84

after_break82:                                    ; No predecessors!
  br label %cond_else_blockX75
  br label %cond_else_blockX84

cond_then_block83:                                ; preds = %cond_else_blockX75
  %f186 = load fp128, fp128* %f1, align 16
  %f287 = load fp128, fp128* %f2, align 16
  %fmul = fmul fp128 %f186, %f287
  store fp128 %fmul, fp128* %f1, align 16
  br label %end_blockX

cond_else_blockX84:                               ; preds = %after_break88, %cond_else_blockX75, %after_break82
  %eqtmp91 = icmp eq i32 %op70, 47
  br i1 %eqtmp91, label %cond_then_block89, label %cond_else_blockX90

after_break88:                                    ; No predecessors!
  br label %cond_else_blockX84
  br label %cond_else_blockX90

cond_then_block89:                                ; preds = %cond_else_blockX84
  %f292 = load fp128, fp128* %f2, align 16
  %eq93 = fcmp oeq fp128 %f292, 0xL00000000000000000000000000000000
  br i1 %eq93, label %cond_jump_then94, label %cond_end95

cond_else_blockX90:                               ; preds = %after_break101, %cond_else_blockX84, %after_break88
  br label %cond_then_block102

cond_jump_then94:                                 ; preds = %cond_then_block89
  %const_wanted = load i32, i32* @const_wanted, align 4
  %icmpA96 = icmp ne i32 %const_wanted, 0
  br i1 %icmpA96, label %cond_jump_then97, label %cond_end98

cond_end95:                                       ; preds = %cond_end98, %cond_then_block89
  %f199 = load fp128, fp128* %f1, align 16
  %f2100 = load fp128, fp128* %f2, align 16
  %fdiv = fdiv fp128 %f199, %f2100
  store fp128 %fdiv, fp128* %f1, align 16
  br label %end_blockX

cond_jump_then97:                                 ; preds = %cond_jump_then94
  call void (i8*, ...) @error(i8* bitcast ([29 x i8]* @96 to i8*))
  br label %cond_end98

cond_end98:                                       ; preds = %cond_jump_then97, %cond_jump_then94
  br label %gen_opif.general_case
  br label %cond_end95

after_break101:                                   ; No predecessors!
  br label %cond_else_blockX90
  br label %cond_else_blockX103

cond_then_block102:                               ; preds = %cond_else_blockX90
  br label %gen_opif.general_case
  br label %cond_else_blockX103

cond_else_blockX103:                              ; preds = %cond_then_block102, %after_break101
  br label %end_blockX

cond_jump_then110:                                ; preds = %end_blockX
  %v1115 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL116 = getelementptr inbounds %SValue, %SValue* %v1115, i32 0, i32 3
  %c117 = load %CValue, %CValue* %fieldLLL116, align 16
  %f1118 = load fp128, fp128* %f1, align 16
  %icastKO = fptrunc fp128 %f1118 to float
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL116, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to float*
  store float %icastKO, float* %icastN, align 4
  br label %cond_end114

cond_jump_elif0111:                               ; preds = %end_blockX
  %v1119 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL120 = getelementptr inbounds %SValue, %SValue* %v1119, i32 0, i32 0
  %type121 = load %CType, %CType* %fieldLLL120, align 8
  %fieldVVV122 = getelementptr inbounds %CType, %CType* %fieldLLL120, i32 0, i32 0
  %t123 = load i32, i32* %fieldVVV122, align 4
  %eq124 = icmp eq i32 %t123, 9
  br i1 %eq124, label %cond_jump_elif_then0112, label %cond_else_block113

cond_jump_elif_then0112:                          ; preds = %cond_jump_elif0111
  %v1125 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL126 = getelementptr inbounds %SValue, %SValue* %v1125, i32 0, i32 3
  %c127 = load %CValue, %CValue* %fieldLLL126, align 16
  %f1128 = load fp128, fp128* %f1, align 16
  %icastKLL129 = fptrunc fp128 %f1128 to double
  %fieldIII130 = getelementptr inbounds %CValue, %CValue* %fieldLLL126, i32 0, i32 0
  %icastN131 = bitcast fp128* %fieldIII130 to double*
  store double %icastKLL129, double* %icastN131, align 8
  br label %cond_end114

cond_else_block113:                               ; preds = %cond_jump_elif0111
  %v1132 = load %SValue*, %SValue** %v1, align 8
  %fieldLLL133 = getelementptr inbounds %SValue, %SValue* %v1132, i32 0, i32 3
  %c134 = load %CValue, %CValue* %fieldLLL133, align 16
  %f1135 = load fp128, fp128* %f1, align 16
  %fieldIII136 = getelementptr inbounds %CValue, %CValue* %fieldLLL133, i32 0, i32 0
  store fp128 %f1135, fp128* %fieldIII136, align 16
  br label %cond_end114

cond_end114:                                      ; preds = %cond_else_block113, %cond_jump_elif_then0112, %cond_jump_then110
  %vtop137 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI138 = ptrtoint %SValue* %vtop137 to i64
  %sub139 = sub i64 %ptrToIntI138, 64
  %iintToPtrD140 = inttoptr i64 %sub139 to %SValue*
  store %SValue* %iintToPtrD140, %SValue** @vtop, align 8
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD140 to i64
  %add = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add to %SValue*
  br label %cond_end

cond_jump_then144:                                ; preds = %gen_opif.general_case
  %op147 = load i32, i32* %op, align 4
  call void @gen_opf(i32 %op147)
  br label %cond_end146

cond_else_block145:                               ; preds = %gen_opif.general_case
  %vtop148 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI149 = ptrtoint %SValue* %vtop148 to i64
  %sub150 = sub i64 %ptrToIntI149, 64
  %iintToPtrD151 = inttoptr i64 %sub150 to %SValue*
  store %SValue* %iintToPtrD151, %SValue** @vtop, align 8
  %ptrToIntC152 = ptrtoint %SValue* %iintToPtrD151 to i64
  %add153 = add i64 %ptrToIntC152, 64
  %intToPtrB154 = inttoptr i64 %add153 to %SValue*
  br label %cond_end146

cond_end146:                                      ; preds = %cond_else_block145, %cond_jump_then144
  br label %cond_end
}

define internal void @check_comparison_pointer_types(%SValue* %0, %SValue* %1, i32 %2) {
entry:
  %oror232 = alloca i1, align 1
  %andand187 = alloca i1, align 1
  %oror153 = alloca i1, align 1
  %oror152 = alloca i1, align 1
  %oror151 = alloca i1, align 1
  %oror120 = alloca i1, align 1
  %oror119 = alloca i1, align 1
  %oror118 = alloca i1, align 1
  %oror115 = alloca i1, align 1
  %andand114 = alloca i1, align 1
  %andand73 = alloca i1, align 1
  %andand53 = alloca i1, align 1
  %oror52 = alloca i1, align 1
  %andand18 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror7 = alloca i1, align 1
  %oror = alloca i1, align 1
  %bt2 = alloca i32, align 4
  %bt1 = alloca i32, align 4
  %tmp_type2 = alloca %CType, align 8
  %castXXXX4 = bitcast %CType* %tmp_type2 to i8*
  %3 = call i8* @memset(i8* %castXXXX4, i32 0, i64 16)
  %tmp_type1 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %tmp_type1 to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %type2 = alloca %CType*, align 8
  %type1 = alloca %CType*, align 8
  %p1 = alloca %SValue*, align 8
  %p11 = alloca %SValue**, align 8
  store %SValue* %0, %SValue** %p1, align 8
  store %SValue** %p1, %SValue*** %p11, align 8
  %p2 = alloca %SValue*, align 8
  %p22 = alloca %SValue**, align 8
  store %SValue* %1, %SValue** %p2, align 8
  store %SValue** %p2, %SValue*** %p22, align 8
  %op = alloca i32, align 4
  %op3 = alloca i32*, align 8
  store i32 %2, i32* %op, align 4
  store i32* %op, i32** %op3, align 8
  %p15 = load %SValue*, %SValue** %p1, align 8
  store i32 1219, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.104, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_null_pointer

is_null_pointer:                                  ; preds = %entry
  %inline_result_variable = alloca i32, align 4
  %p = alloca %SValue*, align 8
  store %SValue* %p15, %SValue** %p, align 8
  %p6 = load %SValue*, %SValue** %p, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %p6, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 1023
  %not_eq = icmp ne i32 %andtmp, 240
  br i1 %not_eq, label %cond_jump_then, label %cond_end

is_null_pointer_end:                              ; preds = %cond_jump_end17, %cond_jump_then
  %inline_result_variable36 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable36, 0
  store i1 %icmpA, i1* %oror, align 1
  br i1 %icmpA, label %cond_jump_end38, label %cond_jump_then37

cond_jump_then:                                   ; preds = %is_null_pointer
  store i32 0, i32* %inline_result_variable, align 4
  br label %is_null_pointer_end

cond_end:                                         ; preds = %is_null_pointer
  %p8 = load %SValue*, %SValue** %p, align 8
  %fieldLLL9 = getelementptr inbounds %SValue, %SValue* %p8, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL9, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL9, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp10 = and i32 %t, 15
  %eq = icmp eq i32 %andtmp10, 0
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then11, label %cond_jump_end

cond_jump_then11:                                 ; preds = %cond_end
  %p12 = load %SValue*, %SValue** %p, align 8
  %fieldLLL13 = getelementptr inbounds %SValue, %SValue* %p12, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL13, align 16
  %ICASTO = bitcast %CValue* %fieldLLL13 to i32*
  %i = load i32, i32* %ICASTO, align 4
  %eq14 = icmp eq i32 %i, 0
  %andand15 = and i1 %eq, %eq14
  store i1 %andand15, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then11, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror7, align 1
  br i1 %andand_result_value, label %cond_jump_end17, label %cond_jump_then16

cond_jump_then16:                                 ; preds = %cond_jump_end
  %p19 = load %SValue*, %SValue** %p, align 8
  %fieldLLL20 = getelementptr inbounds %SValue, %SValue* %p19, i32 0, i32 0
  %type21 = load %CType, %CType* %fieldLLL20, align 8
  %fieldVVV22 = getelementptr inbounds %CType, %CType* %fieldLLL20, i32 0, i32 0
  %t23 = load i32, i32* %fieldVVV22, align 4
  %andtmp24 = and i32 %t23, 15
  %eq25 = icmp eq i32 %andtmp24, 12
  store i1 %eq25, i1* %andand18, align 1
  br i1 %eq25, label %cond_jump_then26, label %cond_jump_end27

cond_jump_end17:                                  ; preds = %cond_jump_end27, %cond_jump_end
  %oror_result_value = load i1, i1* %oror7, align 1
  %icastKX = zext i1 %oror_result_value to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_null_pointer_end

cond_jump_then26:                                 ; preds = %cond_jump_then16
  %p28 = load %SValue*, %SValue** %p, align 8
  %fieldLLL29 = getelementptr inbounds %SValue, %SValue* %p28, i32 0, i32 3
  %c30 = load %CValue, %CValue* %fieldLLL29, align 16
  %ICASTO31 = bitcast %CValue* %fieldLLL29 to i64*
  %ll = load i64, i64* %ICASTO31, align 4
  %eq32 = icmp eq i64 %ll, 0
  %andand33 = and i1 %eq25, %eq32
  store i1 %andand33, i1* %andand18, align 1
  br label %cond_jump_end27

cond_jump_end27:                                  ; preds = %cond_jump_then26, %cond_jump_then16
  %andand_result_value34 = load i1, i1* %andand18, align 1
  %oror35 = or i1 %andand_result_value, %andand_result_value34
  store i1 %oror35, i1* %oror7, align 1
  br label %cond_jump_end17

cond_jump_then37:                                 ; preds = %is_null_pointer_end
  %p239 = load %SValue*, %SValue** %p2, align 8
  store i32 1219, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.105, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_null_pointer40

cond_jump_end38:                                  ; preds = %is_null_pointer_end43, %is_null_pointer_end
  %oror_result_value97 = load i1, i1* %oror, align 1
  br i1 %oror_result_value97, label %cond_jump_then98, label %cond_end99

is_null_pointer40:                                ; preds = %cond_jump_then37
  %inline_result_variable41 = alloca i32, align 4
  %p42 = alloca %SValue*, align 8
  store %SValue* %p239, %SValue** %p42, align 8
  %p44 = load %SValue*, %SValue** %p42, align 8
  %fieldLLL45 = getelementptr inbounds %SValue, %SValue* %p44, i32 0, i32 1
  %r46 = load i16, i16* %fieldLLL45, align 2
  %icastKY47 = zext i16 %r46 to i32
  %andtmp48 = and i32 %icastKY47, 1023
  %not_eq49 = icmp ne i32 %andtmp48, 240
  br i1 %not_eq49, label %cond_jump_then50, label %cond_end51

is_null_pointer_end43:                            ; preds = %cond_jump_end72, %cond_jump_then50
  %inline_result_variable94 = load i32, i32* %inline_result_variable41, align 4
  %icmpA95 = icmp ne i32 %inline_result_variable94, 0
  %oror96 = or i1 %icmpA, %icmpA95
  store i1 %oror96, i1* %oror, align 1
  br label %cond_jump_end38

cond_jump_then50:                                 ; preds = %is_null_pointer40
  store i32 0, i32* %inline_result_variable41, align 4
  br label %is_null_pointer_end43

cond_end51:                                       ; preds = %is_null_pointer40
  %p54 = load %SValue*, %SValue** %p42, align 8
  %fieldLLL55 = getelementptr inbounds %SValue, %SValue* %p54, i32 0, i32 0
  %type56 = load %CType, %CType* %fieldLLL55, align 8
  %fieldVVV57 = getelementptr inbounds %CType, %CType* %fieldLLL55, i32 0, i32 0
  %t58 = load i32, i32* %fieldVVV57, align 4
  %andtmp59 = and i32 %t58, 15
  %eq60 = icmp eq i32 %andtmp59, 0
  store i1 %eq60, i1* %andand53, align 1
  br i1 %eq60, label %cond_jump_then61, label %cond_jump_end62

cond_jump_then61:                                 ; preds = %cond_end51
  %p63 = load %SValue*, %SValue** %p42, align 8
  %fieldLLL64 = getelementptr inbounds %SValue, %SValue* %p63, i32 0, i32 3
  %c65 = load %CValue, %CValue* %fieldLLL64, align 16
  %ICASTO66 = bitcast %CValue* %fieldLLL64 to i32*
  %i67 = load i32, i32* %ICASTO66, align 4
  %eq68 = icmp eq i32 %i67, 0
  %andand69 = and i1 %eq60, %eq68
  store i1 %andand69, i1* %andand53, align 1
  br label %cond_jump_end62

cond_jump_end62:                                  ; preds = %cond_jump_then61, %cond_end51
  %andand_result_value70 = load i1, i1* %andand53, align 1
  store i1 %andand_result_value70, i1* %oror52, align 1
  br i1 %andand_result_value70, label %cond_jump_end72, label %cond_jump_then71

cond_jump_then71:                                 ; preds = %cond_jump_end62
  %p74 = load %SValue*, %SValue** %p42, align 8
  %fieldLLL75 = getelementptr inbounds %SValue, %SValue* %p74, i32 0, i32 0
  %type76 = load %CType, %CType* %fieldLLL75, align 8
  %fieldVVV77 = getelementptr inbounds %CType, %CType* %fieldLLL75, i32 0, i32 0
  %t78 = load i32, i32* %fieldVVV77, align 4
  %andtmp79 = and i32 %t78, 15
  %eq80 = icmp eq i32 %andtmp79, 12
  store i1 %eq80, i1* %andand73, align 1
  br i1 %eq80, label %cond_jump_then81, label %cond_jump_end82

cond_jump_end72:                                  ; preds = %cond_jump_end82, %cond_jump_end62
  %oror_result_value92 = load i1, i1* %oror52, align 1
  %icastKX93 = zext i1 %oror_result_value92 to i32
  store i32 %icastKX93, i32* %inline_result_variable41, align 4
  br label %is_null_pointer_end43

cond_jump_then81:                                 ; preds = %cond_jump_then71
  %p83 = load %SValue*, %SValue** %p42, align 8
  %fieldLLL84 = getelementptr inbounds %SValue, %SValue* %p83, i32 0, i32 3
  %c85 = load %CValue, %CValue* %fieldLLL84, align 16
  %ICASTO86 = bitcast %CValue* %fieldLLL84 to i64*
  %ll87 = load i64, i64* %ICASTO86, align 4
  %eq88 = icmp eq i64 %ll87, 0
  %andand89 = and i1 %eq80, %eq88
  store i1 %andand89, i1* %andand73, align 1
  br label %cond_jump_end82

cond_jump_end82:                                  ; preds = %cond_jump_then81, %cond_jump_then71
  %andand_result_value90 = load i1, i1* %andand73, align 1
  %oror91 = or i1 %andand_result_value70, %andand_result_value90
  store i1 %oror91, i1* %oror52, align 1
  br label %cond_jump_end72

cond_jump_then98:                                 ; preds = %cond_jump_end38
  ret void

cond_end99:                                       ; preds = %cond_jump_end38
  %p1100 = load %SValue*, %SValue** %p1, align 8
  %fieldLLL101 = getelementptr inbounds %SValue, %SValue* %p1100, i32 0, i32 0
  %type102 = load %CType, %CType* %fieldLLL101, align 8
  store %CType* %fieldLLL101, %CType** %type1, align 8
  %p2103 = load %SValue*, %SValue** %p2, align 8
  %fieldLLL104 = getelementptr inbounds %SValue, %SValue* %p2103, i32 0, i32 0
  %type105 = load %CType, %CType* %fieldLLL104, align 8
  store %CType* %fieldLLL104, %CType** %type2, align 8
  %type1106 = load %CType*, %CType** %type1, align 8
  %fieldLLL107 = getelementptr inbounds %CType, %CType* %type1106, i32 0, i32 0
  %t108 = load i32, i32* %fieldLLL107, align 4
  %andtmp109 = and i32 %t108, 15
  store i32 %andtmp109, i32* %bt1, align 4
  %type2110 = load %CType*, %CType** %type2, align 8
  %fieldLLL111 = getelementptr inbounds %CType, %CType* %type2110, i32 0, i32 0
  %t112 = load i32, i32* %fieldLLL111, align 4
  %andtmp113 = and i32 %t112, 15
  store i32 %andtmp113, i32* %bt2, align 4
  %bt1116 = load i32, i32* %bt1, align 4
  store i32 1226, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.106, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_integer_btype

is_integer_btype:                                 ; preds = %cond_end99
  %inline_result_variable117 = alloca i32, align 4
  %bt = alloca i32, align 4
  store i32 %bt1116, i32* %bt, align 4
  %bt121 = load i32, i32* %bt, align 4
  %eq122 = icmp eq i32 %bt121, 1
  store i1 %eq122, i1* %oror120, align 1
  br i1 %eq122, label %cond_jump_end124, label %cond_jump_then123

is_integer_btype_end:                             ; preds = %cond_jump_end136
  %inline_result_variable142 = load i32, i32* %inline_result_variable117, align 4
  %icmpA143 = icmp ne i32 %inline_result_variable142, 0
  store i1 %icmpA143, i1* %oror115, align 1
  br i1 %icmpA143, label %cond_jump_end145, label %cond_jump_then144

cond_jump_then123:                                ; preds = %is_integer_btype
  %bt125 = load i32, i32* %bt, align 4
  %eq126 = icmp eq i32 %bt125, 2
  %oror127 = or i1 %eq122, %eq126
  store i1 %oror127, i1* %oror120, align 1
  br label %cond_jump_end124

cond_jump_end124:                                 ; preds = %cond_jump_then123, %is_integer_btype
  %oror_result_value128 = load i1, i1* %oror120, align 1
  store i1 %oror_result_value128, i1* %oror119, align 1
  br i1 %oror_result_value128, label %cond_jump_end130, label %cond_jump_then129

cond_jump_then129:                                ; preds = %cond_jump_end124
  %bt131 = load i32, i32* %bt, align 4
  %eq132 = icmp eq i32 %bt131, 0
  %oror133 = or i1 %oror_result_value128, %eq132
  store i1 %oror133, i1* %oror119, align 1
  br label %cond_jump_end130

cond_jump_end130:                                 ; preds = %cond_jump_then129, %cond_jump_end124
  %oror_result_value134 = load i1, i1* %oror119, align 1
  store i1 %oror_result_value134, i1* %oror118, align 1
  br i1 %oror_result_value134, label %cond_jump_end136, label %cond_jump_then135

cond_jump_then135:                                ; preds = %cond_jump_end130
  %bt137 = load i32, i32* %bt, align 4
  %eq138 = icmp eq i32 %bt137, 12
  %oror139 = or i1 %oror_result_value134, %eq138
  store i1 %oror139, i1* %oror118, align 1
  br label %cond_jump_end136

cond_jump_end136:                                 ; preds = %cond_jump_then135, %cond_jump_end130
  %oror_result_value140 = load i1, i1* %oror118, align 1
  %icastKX141 = zext i1 %oror_result_value140 to i32
  store i32 %icastKX141, i32* %inline_result_variable117, align 4
  br label %is_integer_btype_end

cond_jump_then144:                                ; preds = %is_integer_btype_end
  %bt2146 = load i32, i32* %bt2, align 4
  store i32 1226, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.107, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_integer_btype147

cond_jump_end145:                                 ; preds = %is_integer_btype_end150, %is_integer_btype_end
  %oror_result_value178 = load i1, i1* %oror115, align 1
  store i1 %oror_result_value178, i1* %andand114, align 1
  br i1 %oror_result_value178, label %cond_jump_then179, label %cond_jump_end180

is_integer_btype147:                              ; preds = %cond_jump_then144
  %inline_result_variable148 = alloca i32, align 4
  %bt149 = alloca i32, align 4
  store i32 %bt2146, i32* %bt149, align 4
  %bt154 = load i32, i32* %bt149, align 4
  %eq155 = icmp eq i32 %bt154, 1
  store i1 %eq155, i1* %oror153, align 1
  br i1 %eq155, label %cond_jump_end157, label %cond_jump_then156

is_integer_btype_end150:                          ; preds = %cond_jump_end169
  %inline_result_variable175 = load i32, i32* %inline_result_variable148, align 4
  %icmpA176 = icmp ne i32 %inline_result_variable175, 0
  %oror177 = or i1 %icmpA143, %icmpA176
  store i1 %oror177, i1* %oror115, align 1
  br label %cond_jump_end145

cond_jump_then156:                                ; preds = %is_integer_btype147
  %bt158 = load i32, i32* %bt149, align 4
  %eq159 = icmp eq i32 %bt158, 2
  %oror160 = or i1 %eq155, %eq159
  store i1 %oror160, i1* %oror153, align 1
  br label %cond_jump_end157

cond_jump_end157:                                 ; preds = %cond_jump_then156, %is_integer_btype147
  %oror_result_value161 = load i1, i1* %oror153, align 1
  store i1 %oror_result_value161, i1* %oror152, align 1
  br i1 %oror_result_value161, label %cond_jump_end163, label %cond_jump_then162

cond_jump_then162:                                ; preds = %cond_jump_end157
  %bt164 = load i32, i32* %bt149, align 4
  %eq165 = icmp eq i32 %bt164, 0
  %oror166 = or i1 %oror_result_value161, %eq165
  store i1 %oror166, i1* %oror152, align 1
  br label %cond_jump_end163

cond_jump_end163:                                 ; preds = %cond_jump_then162, %cond_jump_end157
  %oror_result_value167 = load i1, i1* %oror152, align 1
  store i1 %oror_result_value167, i1* %oror151, align 1
  br i1 %oror_result_value167, label %cond_jump_end169, label %cond_jump_then168

cond_jump_then168:                                ; preds = %cond_jump_end163
  %bt170 = load i32, i32* %bt149, align 4
  %eq171 = icmp eq i32 %bt170, 12
  %oror172 = or i1 %oror_result_value167, %eq171
  store i1 %oror172, i1* %oror151, align 1
  br label %cond_jump_end169

cond_jump_end169:                                 ; preds = %cond_jump_then168, %cond_jump_end163
  %oror_result_value173 = load i1, i1* %oror151, align 1
  %icastKX174 = zext i1 %oror_result_value173 to i32
  store i32 %icastKX174, i32* %inline_result_variable148, align 4
  br label %is_integer_btype_end150

cond_jump_then179:                                ; preds = %cond_jump_end145
  %op181 = load i32, i32* %op, align 4
  %not_eq182 = icmp ne i32 %op181, 45
  %andand183 = and i1 %oror_result_value178, %not_eq182
  store i1 %andand183, i1* %andand114, align 1
  br label %cond_jump_end180

cond_jump_end180:                                 ; preds = %cond_jump_then179, %cond_jump_end145
  %andand_result_value184 = load i1, i1* %andand114, align 1
  br i1 %andand_result_value184, label %cond_jump_then185, label %cond_end186

cond_jump_then185:                                ; preds = %cond_jump_end180
  %op188 = load i32, i32* %op, align 4
  %not_eq189 = icmp ne i32 %op188, 161
  store i1 %not_eq189, i1* %andand187, align 1
  br i1 %not_eq189, label %cond_jump_then190, label %cond_jump_end191

cond_end186:                                      ; preds = %cond_jump_end180
  %bt1198 = load i32, i32* %bt1, align 4
  %eq199 = icmp eq i32 %bt1198, 4
  br i1 %eq199, label %cond_jump_then200, label %cond_jump_elif0

cond_jump_then190:                                ; preds = %cond_jump_then185
  %op192 = load i32, i32* %op, align 4
  %not_eq193 = icmp ne i32 %op192, 160
  %andand194 = and i1 %not_eq189, %not_eq193
  store i1 %andand194, i1* %andand187, align 1
  br label %cond_jump_end191

cond_jump_end191:                                 ; preds = %cond_jump_then190, %cond_jump_then185
  %andand_result_value195 = load i1, i1* %andand187, align 1
  br i1 %andand_result_value195, label %cond_jump_then196, label %cond_end197

cond_jump_then196:                                ; preds = %cond_jump_end191
  call void (i8*, ...) @warning(i8* bitcast ([39 x i8]* @97 to i8*))
  br label %cond_end197

cond_end197:                                      ; preds = %cond_jump_then196, %cond_jump_end191
  ret void

cond_jump_then200:                                ; preds = %cond_end186
  %type1202 = load %CType*, %CType** %type1, align 8
  store i32 1234, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.108, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

cond_jump_elif0:                                  ; preds = %cond_end186
  %bt1210 = load i32, i32* %bt1, align 4
  %not_eq211 = icmp ne i32 %bt1210, 6
  br i1 %not_eq211, label %cond_jump_elif_then0, label %cond_end201

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  br label %check_comparison_pointer_types.invalid_operands
  br label %cond_end201

cond_end201:                                      ; preds = %cond_jump_elif_then0, %cond_jump_elif0, %pointed_type_end
  %bt2212 = load i32, i32* %bt2, align 4
  %eq213 = icmp eq i32 %bt2212, 4
  br i1 %eq213, label %cond_jump_then214, label %cond_jump_elif0215

pointed_type:                                     ; preds = %cond_jump_then200
  %inline_result_variable203 = alloca %CType*, align 8
  %type204 = alloca %CType*, align 8
  store %CType* %type1202, %CType** %type204, align 8
  %type205 = load %CType*, %CType** %type204, align 8
  %fieldLLL206 = getelementptr inbounds %CType, %CType* %type205, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL206, align 8
  %fieldLLL207 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 3
  %type208 = load %CType, %CType* %fieldLLL207, align 8
  store %CType* %fieldLLL207, %CType** %inline_result_variable203, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable209 = load %CType*, %CType** %inline_result_variable203, align 8
  store %CType* %inline_result_variable209, %CType** %type1, align 8
  br label %cond_end201

check_comparison_pointer_types.invalid_operands:  ; preds = %cond_jump_then271, %cond_jump_elif_then0216, %cond_jump_elif_then0
  %op231 = load i32, i32* %op, align 4
  %fun_result = call i8* @get_tok_str(i32 %op231, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([30 x i8]* @98 to i8*), i8* %fun_result)
  br label %cond_end217

cond_jump_then214:                                ; preds = %cond_end201
  %type2218 = load %CType*, %CType** %type2, align 8
  store i32 1239, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.109, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type219

cond_jump_elif0215:                               ; preds = %cond_end201
  %bt2229 = load i32, i32* %bt2, align 4
  %not_eq230 = icmp ne i32 %bt2229, 6
  br i1 %not_eq230, label %cond_jump_elif_then0216, label %cond_end217

cond_jump_elif_then0216:                          ; preds = %cond_jump_elif0215
  br label %check_comparison_pointer_types.invalid_operands

cond_end217:                                      ; preds = %check_comparison_pointer_types.invalid_operands, %cond_jump_elif0215, %pointed_type_end222
  %type1233 = load %CType*, %CType** %type1, align 8
  %fieldLLL234 = getelementptr inbounds %CType, %CType* %type1233, i32 0, i32 0
  %t235 = load i32, i32* %fieldLLL234, align 4
  %andtmp236 = and i32 %t235, 15
  %eq237 = icmp eq i32 %andtmp236, 3
  store i1 %eq237, i1* %oror232, align 1
  br i1 %eq237, label %cond_jump_end239, label %cond_jump_then238

pointed_type219:                                  ; preds = %cond_jump_then214
  %inline_result_variable220 = alloca %CType*, align 8
  %type221 = alloca %CType*, align 8
  store %CType* %type2218, %CType** %type221, align 8
  %type223 = load %CType*, %CType** %type221, align 8
  %fieldLLL224 = getelementptr inbounds %CType, %CType* %type223, i32 0, i32 1
  %ref225 = load %Sym*, %Sym** %fieldLLL224, align 8
  %fieldLLL226 = getelementptr inbounds %Sym, %Sym* %ref225, i32 0, i32 3
  %type227 = load %CType, %CType* %fieldLLL226, align 8
  store %CType* %fieldLLL226, %CType** %inline_result_variable220, align 8
  br label %pointed_type_end222

pointed_type_end222:                              ; preds = %pointed_type219
  %inline_result_variable228 = load %CType*, %CType** %inline_result_variable220, align 8
  store %CType* %inline_result_variable228, %CType** %type2, align 8
  br label %cond_end217

cond_jump_then238:                                ; preds = %cond_end217
  %type2240 = load %CType*, %CType** %type2, align 8
  %fieldLLL241 = getelementptr inbounds %CType, %CType* %type2240, i32 0, i32 0
  %t242 = load i32, i32* %fieldLLL241, align 4
  %andtmp243 = and i32 %t242, 15
  %eq244 = icmp eq i32 %andtmp243, 3
  %oror245 = or i1 %eq237, %eq244
  store i1 %oror245, i1* %oror232, align 1
  br label %cond_jump_end239

cond_jump_end239:                                 ; preds = %cond_jump_then238, %cond_end217
  %oror_result_value246 = load i1, i1* %oror232, align 1
  br i1 %oror_result_value246, label %cond_jump_then247, label %cond_end248

cond_jump_then247:                                ; preds = %cond_jump_end239
  ret void

cond_end248:                                      ; preds = %cond_jump_end239
  %type1249 = load %CType*, %CType** %type1, align 8
  %derefference_valueB = load %CType, %CType* %type1249, align 8
  store %CType %derefference_valueB, %CType* %tmp_type1, align 8
  %type2250 = load %CType*, %CType** %type2, align 8
  %derefference_valueB251 = load %CType, %CType* %type2250, align 8
  store %CType %derefference_valueB251, %CType* %tmp_type2, align 8
  %tmp_type1252 = load %CType, %CType* %tmp_type1, align 8
  %tmp_type1253 = load %CType, %CType* %tmp_type1, align 8
  %fieldVVV254 = getelementptr inbounds %CType, %CType* %tmp_type1, i32 0, i32 0
  %t255 = load i32, i32* %fieldVVV254, align 4
  %andtmp256 = and i32 %t255, -6161
  %fieldTTT = getelementptr inbounds %CType, %CType* %tmp_type1, i32 0, i32 0
  store i32 %andtmp256, i32* %fieldTTT, align 4
  %tmp_type2257 = load %CType, %CType* %tmp_type2, align 8
  %tmp_type2258 = load %CType, %CType* %tmp_type2, align 8
  %fieldVVV259 = getelementptr inbounds %CType, %CType* %tmp_type2, i32 0, i32 0
  %t260 = load i32, i32* %fieldVVV259, align 4
  %andtmp261 = and i32 %t260, -6161
  %fieldTTT262 = getelementptr inbounds %CType, %CType* %tmp_type2, i32 0, i32 0
  store i32 %andtmp261, i32* %fieldTTT262, align 4
  %tmp_type1263 = load %CType, %CType* %tmp_type1, align 8
  %tmp_type2264 = load %CType, %CType* %tmp_type2, align 8
  %fun_result265 = call i32 @is_compatible_types(%CType* %tmp_type1, %CType* %tmp_type2)
  %logical_denial = icmp eq i32 %fun_result265, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA266 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA266, label %cond_jump_then267, label %cond_end268

cond_jump_then267:                                ; preds = %cond_end248
  %op269 = load i32, i32* %op, align 4
  %eq270 = icmp eq i32 %op269, 45
  br i1 %eq270, label %cond_jump_then271, label %cond_else_block

cond_end268:                                      ; preds = %cond_end272, %cond_end248
  ret void

cond_jump_then271:                                ; preds = %cond_jump_then267
  br label %check_comparison_pointer_types.invalid_operands
  br label %cond_end272

cond_else_block:                                  ; preds = %cond_jump_then267
  call void (i8*, ...) @warning(i8* bitcast ([50 x i8]* @99 to i8*))
  br label %cond_end272

cond_end272:                                      ; preds = %cond_else_block, %cond_jump_then271
  br label %cond_end268
}

define void @gen_cvt_itof1(i32 %0) {
entry:
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t2 = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t2, 31
  %eq = icmp eq i32 %andtmp, 28
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %t3 = load i32, i32* %t, align 4
  %eq4 = icmp eq i32 %t3, 8
  br i1 %eq4, label %cond_jump_then5, label %cond_jump_elif0

cond_else_block:                                  ; preds = %entry
  %t14 = load i32, i32* %t, align 4
  call void @gen_cvt_itof(i32 %t14)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end7
  ret void

cond_jump_then5:                                  ; preds = %cond_jump_then
  %func_old_type = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 374)
  br label %cond_end7

cond_jump_elif0:                                  ; preds = %cond_jump_then
  %t8 = load i32, i32* %t, align 4
  %eq9 = icmp eq i32 %t8, 10
  br i1 %eq9, label %cond_jump_elif_then0, label %cond_else_block6

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %func_old_type10 = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 376)
  br label %cond_end7

cond_else_block6:                                 ; preds = %cond_jump_elif0
  %func_old_type11 = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 375)
  br label %cond_end7

cond_end7:                                        ; preds = %cond_else_block6, %cond_jump_elif_then0, %cond_jump_then5
  call void @vrott(i32 2)
  call void @gfunc_call(i32 1)
  call void @vpushi(i32 0)
  %vtop12 = load %SValue*, %SValue** @vtop, align 8
  %t13 = load i32, i32* %t, align 4
  %fun_result = call i32 @reg_fret(i32 %t13)
  %icastG = trunc i32 %fun_result to i16
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop12, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU, align 2
  br label %cond_end
}

define void @gen_cvt_ftoi1(i32 %0) {
entry:
  %st = alloca i32, align 4
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %t2 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t2, 28
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t3 = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t3, 15
  store i32 %andtmp, i32* %st, align 4
  %st4 = load i32, i32* %st, align 4
  %eq5 = icmp eq i32 %st4, 8
  br i1 %eq5, label %cond_jump_then6, label %cond_jump_elif0

cond_else_block:                                  ; preds = %entry
  %t16 = load i32, i32* %t, align 4
  call void @gen_cvt_ftoi(i32 %t16)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end8
  ret void

cond_jump_then6:                                  ; preds = %cond_jump_then
  %func_old_type = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 378)
  br label %cond_end8

cond_jump_elif0:                                  ; preds = %cond_jump_then
  %st9 = load i32, i32* %st, align 4
  %eq10 = icmp eq i32 %st9, 10
  br i1 %eq10, label %cond_jump_elif_then0, label %cond_else_block7

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %func_old_type11 = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 377)
  br label %cond_end8

cond_else_block7:                                 ; preds = %cond_jump_elif0
  %func_old_type12 = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 379)
  br label %cond_end8

cond_end8:                                        ; preds = %cond_else_block7, %cond_jump_elif_then0, %cond_jump_then6
  call void @vrott(i32 2)
  call void @gfunc_call(i32 1)
  call void @vpushi(i32 0)
  %vtop13 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop13, i32 0, i32 1
  store i16 0, i16* %fieldTU, align 2
  %vtop14 = load %SValue*, %SValue** @vtop, align 8
  %fieldTU15 = getelementptr inbounds %SValue, %SValue* %vtop14, i32 0, i32 2
  store i16 2, i16* %fieldTU15, align 2
  br label %cond_end
}

define internal void @mk_pointer(%CType* %0) {
entry:
  %s = alloca %Sym*, align 8
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %type2 = load %CType*, %CType** %type, align 8
  %fun_result = call %Sym* @sym_push(i32 536870912, %CType* %type2, i32 0, i32 -1)
  store %Sym* %fun_result, %Sym** %s, align 8
  %type3 = load %CType*, %CType** %type, align 8
  %type4 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type4, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %andtmp = and i32 %t, 1920
  %ortmp = or i32 4, %andtmp
  %fieldTU = getelementptr inbounds %CType, %CType* %type3, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTU, align 4
  %type5 = load %CType*, %CType** %type, align 8
  %s6 = load %Sym*, %Sym** %s, align 8
  %fieldTU7 = getelementptr inbounds %CType, %CType* %type5, i32 0, i32 1
  store %Sym* %s6, %Sym** %fieldTU7, align 8
  ret void
}

define internal i32 @is_compatible_func(%CType* %0, %CType* %1) {
entry:
  %oror = alloca i1, align 1
  %s2 = alloca %Sym*, align 8
  %s1 = alloca %Sym*, align 8
  %type1 = alloca %CType*, align 8
  %type11 = alloca %CType**, align 8
  store %CType* %0, %CType** %type1, align 8
  store %CType** %type1, %CType*** %type11, align 8
  %type2 = alloca %CType*, align 8
  %type22 = alloca %CType**, align 8
  store %CType* %1, %CType** %type2, align 8
  store %CType** %type2, %CType*** %type22, align 8
  %type13 = load %CType*, %CType** %type1, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %ref, %Sym** %s1, align 8
  %type24 = load %CType*, %CType** %type2, align 8
  %fieldLLL5 = getelementptr inbounds %CType, %CType* %type24, i32 0, i32 1
  %ref6 = load %Sym*, %Sym** %fieldLLL5, align 8
  store %Sym* %ref6, %Sym** %s2, align 8
  %s17 = load %Sym*, %Sym** %s1, align 8
  %fieldLLL8 = getelementptr inbounds %Sym, %Sym* %s17, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL8, align 8
  %s29 = load %Sym*, %Sym** %s2, align 8
  %fieldLLL10 = getelementptr inbounds %Sym, %Sym* %s29, i32 0, i32 3
  %type12 = load %CType, %CType* %fieldLLL10, align 8
  %fun_result = call i32 @is_compatible_types(%CType* %fieldLLL8, %CType* %fieldLLL10)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 0

cond_end:                                         ; preds = %entry
  %s113 = load %Sym*, %Sym** %s1, align 8
  %fieldLLL14 = getelementptr inbounds %Sym, %Sym* %s113, i32 0, i32 1
  %r = load i64, i64* %fieldLLL14, align 4
  %castAQ = bitcast i64* %fieldLLL14 to %come_anon123*
  %fieldLLL15 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ, i32 0, i32 0
  %func_call = load i8, i8* %fieldLLL15, align 1
  %s216 = load %Sym*, %Sym** %s2, align 8
  %fieldLLL17 = getelementptr inbounds %Sym, %Sym* %s216, i32 0, i32 1
  %r18 = load i64, i64* %fieldLLL17, align 4
  %castAQ19 = bitcast i64* %fieldLLL17 to %come_anon123*
  %fieldLLL20 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ19, i32 0, i32 0
  %func_call21 = load i8, i8* %fieldLLL20, align 1
  %not_eq = icmp ne i8 %func_call, %func_call21
  br i1 %not_eq, label %cond_jump_then22, label %cond_end23

cond_jump_then22:                                 ; preds = %cond_end
  ret i32 0

cond_end23:                                       ; preds = %cond_end
  %s124 = load %Sym*, %Sym** %s1, align 8
  %fieldLLL25 = getelementptr inbounds %Sym, %Sym* %s124, i32 0, i32 2
  %c = load i64, i64* %fieldLLL25, align 4
  %eq = icmp eq i64 %c, 2
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then26

cond_jump_then26:                                 ; preds = %cond_end23
  %s227 = load %Sym*, %Sym** %s2, align 8
  %fieldLLL28 = getelementptr inbounds %Sym, %Sym* %s227, i32 0, i32 2
  %c29 = load i64, i64* %fieldLLL28, align 4
  %eq30 = icmp eq i64 %c29, 2
  %oror31 = or i1 %eq, %eq30
  store i1 %oror31, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then26, %cond_end23
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then32, label %cond_end33

cond_jump_then32:                                 ; preds = %cond_jump_end
  ret i32 1

cond_end33:                                       ; preds = %cond_jump_end
  %s134 = load %Sym*, %Sym** %s1, align 8
  %fieldLLL35 = getelementptr inbounds %Sym, %Sym* %s134, i32 0, i32 2
  %c36 = load i64, i64* %fieldLLL35, align 4
  %s237 = load %Sym*, %Sym** %s2, align 8
  %fieldLLL38 = getelementptr inbounds %Sym, %Sym* %s237, i32 0, i32 2
  %c39 = load i64, i64* %fieldLLL38, align 4
  %not_eq40 = icmp ne i64 %c36, %c39
  br i1 %not_eq40, label %cond_jump_then41, label %cond_end42

cond_jump_then41:                                 ; preds = %cond_end33
  ret i32 0

cond_end42:                                       ; preds = %cond_end33
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end60, %cond_end42
  %s143 = load %Sym*, %Sym** %s1, align 8
  %not_eq44 = icmp ne %Sym* %s143, null
  br i1 %not_eq44, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s245 = load %Sym*, %Sym** %s2, align 8
  %eq46 = icmp eq %Sym* %s245, null
  br i1 %eq46, label %cond_jump_then47, label %cond_end48

cond_end_block:                                   ; preds = %loop_top_block
  %s266 = load %Sym*, %Sym** %s2, align 8
  %icmpB = icmp ne %Sym* %s266, null
  br i1 %icmpB, label %cond_jump_then67, label %cond_end68

cond_jump_then47:                                 ; preds = %cond_then_block
  ret i32 0

cond_end48:                                       ; preds = %cond_then_block
  %s149 = load %Sym*, %Sym** %s1, align 8
  %fieldLLL50 = getelementptr inbounds %Sym, %Sym* %s149, i32 0, i32 3
  %type51 = load %CType, %CType* %fieldLLL50, align 8
  %s252 = load %Sym*, %Sym** %s2, align 8
  %fieldLLL53 = getelementptr inbounds %Sym, %Sym* %s252, i32 0, i32 3
  %type54 = load %CType, %CType* %fieldLLL53, align 8
  %fun_result55 = call i32 @is_compatible_parameter_types(%CType* %fieldLLL50, %CType* %fieldLLL53)
  %logical_denial56 = icmp eq i32 %fun_result55, 0
  %castOOOO57 = zext i1 %logical_denial56 to i32
  %icmpA58 = icmp ne i32 %castOOOO57, 0
  br i1 %icmpA58, label %cond_jump_then59, label %cond_end60

cond_jump_then59:                                 ; preds = %cond_end48
  ret i32 0

cond_end60:                                       ; preds = %cond_end48
  %s161 = load %Sym*, %Sym** %s1, align 8
  %fieldLLL62 = getelementptr inbounds %Sym, %Sym* %s161, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL62, align 8
  store %Sym* %next, %Sym** %s1, align 8
  %s263 = load %Sym*, %Sym** %s2, align 8
  %fieldLLL64 = getelementptr inbounds %Sym, %Sym* %s263, i32 0, i32 4
  %next65 = load %Sym*, %Sym** %fieldLLL64, align 8
  store %Sym* %next65, %Sym** %s2, align 8
  br label %loop_top_block

cond_jump_then67:                                 ; preds = %cond_end_block
  ret i32 0

cond_end68:                                       ; preds = %cond_end_block
  ret i32 1
}

define internal void @gen_assign_cast(%CType* %0) {
entry:
  %oror226 = alloca i1, align 1
  %andand196 = alloca i1, align 1
  %andand177 = alloca i1, align 1
  %oror176 = alloca i1, align 1
  %oror136 = alloca i1, align 1
  %andand96 = alloca i1, align 1
  %oror58 = alloca i1, align 1
  %oror57 = alloca i1, align 1
  %oror56 = alloca i1, align 1
  %andand32 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %sbt = alloca i32, align 4
  %dbt = alloca i32, align 4
  %buf2 = alloca [256 x i8], align 1
  %buf1 = alloca [256 x i8], align 1
  %tmp_type2 = alloca %CType, align 8
  %castXXXX2 = bitcast %CType* %tmp_type2 to i8*
  %1 = call i8* @memset(i8* %castXXXX2, i32 0, i64 16)
  %tmp_type1 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %tmp_type1 to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %type2 = alloca %CType*, align 8
  %type1 = alloca %CType*, align 8
  %st = alloca %CType*, align 8
  %dt = alloca %CType*, align 8
  %dt1 = alloca %CType**, align 8
  store %CType* %0, %CType** %dt, align 8
  store %CType** %dt, %CType*** %dt1, align 8
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  store %CType* %fieldLLL, %CType** %st, align 8
  %dt3 = load %CType*, %CType** %dt, align 8
  %fieldLLL4 = getelementptr inbounds %CType, %CType* %dt3, i32 0, i32 0
  %t = load i32, i32* %fieldLLL4, align 4
  %andtmp = and i32 %t, 15
  store i32 %andtmp, i32* %dbt, align 4
  %st5 = load %CType*, %CType** %st, align 8
  %fieldLLL6 = getelementptr inbounds %CType, %CType* %st5, i32 0, i32 0
  %t7 = load i32, i32* %fieldLLL6, align 4
  %andtmp8 = and i32 %t7, 15
  store i32 %andtmp8, i32* %sbt, align 4
  %dt9 = load %CType*, %CType** %dt, align 8
  %fieldLLL10 = getelementptr inbounds %CType, %CType* %dt9, i32 0, i32 0
  %t11 = load i32, i32* %fieldLLL10, align 4
  %andtmp12 = and i32 %t11, 2048
  %icmpA = icmp ne i32 %andtmp12, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void (i8*, ...) @warning(i8* bitcast ([33 x i8]* @125 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %dbt13 = load i32, i32* %dbt, align 4
  %eqtmp = icmp eq i32 %dbt13, 4
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

end_blockX:                                       ; preds = %cond_else_blockX239, %cond_end264, %cond_end236, %cond_end216
  br label %gen_assign_cast.type_ok

cond_then_block:                                  ; preds = %cond_end
  %vtop14 = load %SValue*, %SValue** @vtop, align 8
  store i32 1926, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.117, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_null_pointer

cond_else_blockX:                                 ; preds = %after_break, %cond_end
  %eqtmp219 = icmp eq i32 %dbt13, 1
  br i1 %eqtmp219, label %cond_then_block217, label %cond_else_blockX218
  br label %cond_else_blockX220

is_null_pointer:                                  ; preds = %cond_then_block
  %inline_result_variable = alloca i32, align 4
  %p = alloca %SValue*, align 8
  store %SValue* %vtop14, %SValue** %p, align 8
  %p15 = load %SValue*, %SValue** %p, align 8
  %fieldLLL16 = getelementptr inbounds %SValue, %SValue* %p15, i32 0, i32 1
  %r = load i16, i16* %fieldLLL16, align 2
  %icastKY = zext i16 %r to i32
  %andtmp17 = and i32 %icastKY, 1023
  %not_eq = icmp ne i32 %andtmp17, 240
  br i1 %not_eq, label %cond_jump_then18, label %cond_end19

is_null_pointer_end:                              ; preds = %cond_jump_end31, %cond_jump_then18
  %inline_result_variable50 = load i32, i32* %inline_result_variable, align 4
  %icmpA51 = icmp ne i32 %inline_result_variable50, 0
  br i1 %icmpA51, label %cond_jump_then52, label %cond_end53

cond_jump_then18:                                 ; preds = %is_null_pointer
  store i32 0, i32* %inline_result_variable, align 4
  br label %is_null_pointer_end

cond_end19:                                       ; preds = %is_null_pointer
  %p20 = load %SValue*, %SValue** %p, align 8
  %fieldLLL21 = getelementptr inbounds %SValue, %SValue* %p20, i32 0, i32 0
  %type22 = load %CType, %CType* %fieldLLL21, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL21, i32 0, i32 0
  %t23 = load i32, i32* %fieldVVV, align 4
  %andtmp24 = and i32 %t23, 15
  %eq = icmp eq i32 %andtmp24, 0
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then25, label %cond_jump_end

cond_jump_then25:                                 ; preds = %cond_end19
  %p26 = load %SValue*, %SValue** %p, align 8
  %fieldLLL27 = getelementptr inbounds %SValue, %SValue* %p26, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL27, align 16
  %ICASTO = bitcast %CValue* %fieldLLL27 to i32*
  %i = load i32, i32* %ICASTO, align 4
  %eq28 = icmp eq i32 %i, 0
  %andand29 = and i1 %eq, %eq28
  store i1 %andand29, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then25, %cond_end19
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror, align 1
  br i1 %andand_result_value, label %cond_jump_end31, label %cond_jump_then30

cond_jump_then30:                                 ; preds = %cond_jump_end
  %p33 = load %SValue*, %SValue** %p, align 8
  %fieldLLL34 = getelementptr inbounds %SValue, %SValue* %p33, i32 0, i32 0
  %type35 = load %CType, %CType* %fieldLLL34, align 8
  %fieldVVV36 = getelementptr inbounds %CType, %CType* %fieldLLL34, i32 0, i32 0
  %t37 = load i32, i32* %fieldVVV36, align 4
  %andtmp38 = and i32 %t37, 15
  %eq39 = icmp eq i32 %andtmp38, 12
  store i1 %eq39, i1* %andand32, align 1
  br i1 %eq39, label %cond_jump_then40, label %cond_jump_end41

cond_jump_end31:                                  ; preds = %cond_jump_end41, %cond_jump_end
  %oror_result_value = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_null_pointer_end

cond_jump_then40:                                 ; preds = %cond_jump_then30
  %p42 = load %SValue*, %SValue** %p, align 8
  %fieldLLL43 = getelementptr inbounds %SValue, %SValue* %p42, i32 0, i32 3
  %c44 = load %CValue, %CValue* %fieldLLL43, align 16
  %ICASTO45 = bitcast %CValue* %fieldLLL43 to i64*
  %ll = load i64, i64* %ICASTO45, align 4
  %eq46 = icmp eq i64 %ll, 0
  %andand47 = and i1 %eq39, %eq46
  store i1 %andand47, i1* %andand32, align 1
  br label %cond_jump_end41

cond_jump_end41:                                  ; preds = %cond_jump_then40, %cond_jump_then30
  %andand_result_value48 = load i1, i1* %andand32, align 1
  %oror49 = or i1 %andand_result_value, %andand_result_value48
  store i1 %oror49, i1* %oror, align 1
  br label %cond_jump_end31

cond_jump_then52:                                 ; preds = %is_null_pointer_end
  br label %gen_assign_cast.type_ok
  br label %cond_end53

cond_end53:                                       ; preds = %cond_jump_then52, %is_null_pointer_end
  %sbt54 = load i32, i32* %sbt, align 4
  store i32 1929, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.118, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_integer_btype

gen_assign_cast.type_ok:                          ; preds = %end_blockX, %cond_else_block, %cond_jump_then82, %cond_jump_then52
  %dt271 = load %CType*, %CType** %dt, align 8
  call void @gen_cast(%CType* %dt271)
  ret void

is_integer_btype:                                 ; preds = %cond_end53
  %inline_result_variable55 = alloca i32, align 4
  %bt = alloca i32, align 4
  store i32 %sbt54, i32* %bt, align 4
  %bt59 = load i32, i32* %bt, align 4
  %eq60 = icmp eq i32 %bt59, 1
  store i1 %eq60, i1* %oror58, align 1
  br i1 %eq60, label %cond_jump_end62, label %cond_jump_then61

is_integer_btype_end:                             ; preds = %cond_jump_end74
  %inline_result_variable80 = load i32, i32* %inline_result_variable55, align 4
  %icmpA81 = icmp ne i32 %inline_result_variable80, 0
  br i1 %icmpA81, label %cond_jump_then82, label %cond_end83

cond_jump_then61:                                 ; preds = %is_integer_btype
  %bt63 = load i32, i32* %bt, align 4
  %eq64 = icmp eq i32 %bt63, 2
  %oror65 = or i1 %eq60, %eq64
  store i1 %oror65, i1* %oror58, align 1
  br label %cond_jump_end62

cond_jump_end62:                                  ; preds = %cond_jump_then61, %is_integer_btype
  %oror_result_value66 = load i1, i1* %oror58, align 1
  store i1 %oror_result_value66, i1* %oror57, align 1
  br i1 %oror_result_value66, label %cond_jump_end68, label %cond_jump_then67

cond_jump_then67:                                 ; preds = %cond_jump_end62
  %bt69 = load i32, i32* %bt, align 4
  %eq70 = icmp eq i32 %bt69, 0
  %oror71 = or i1 %oror_result_value66, %eq70
  store i1 %oror71, i1* %oror57, align 1
  br label %cond_jump_end68

cond_jump_end68:                                  ; preds = %cond_jump_then67, %cond_jump_end62
  %oror_result_value72 = load i1, i1* %oror57, align 1
  store i1 %oror_result_value72, i1* %oror56, align 1
  br i1 %oror_result_value72, label %cond_jump_end74, label %cond_jump_then73

cond_jump_then73:                                 ; preds = %cond_jump_end68
  %bt75 = load i32, i32* %bt, align 4
  %eq76 = icmp eq i32 %bt75, 12
  %oror77 = or i1 %oror_result_value72, %eq76
  store i1 %oror77, i1* %oror56, align 1
  br label %cond_jump_end74

cond_jump_end74:                                  ; preds = %cond_jump_then73, %cond_jump_end68
  %oror_result_value78 = load i1, i1* %oror56, align 1
  %icastKX79 = zext i1 %oror_result_value78 to i32
  store i32 %icastKX79, i32* %inline_result_variable55, align 4
  br label %is_integer_btype_end

cond_jump_then82:                                 ; preds = %is_integer_btype_end
  call void (i8*, ...) @warning(i8* bitcast ([53 x i8]* @126 to i8*))
  br label %gen_assign_cast.type_ok
  br label %cond_end83

cond_end83:                                       ; preds = %cond_jump_then82, %is_integer_btype_end
  %dt84 = load %CType*, %CType** %dt, align 8
  store i32 1933, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.119, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

pointed_type:                                     ; preds = %cond_end83
  %inline_result_variable85 = alloca %CType*, align 8
  %type86 = alloca %CType*, align 8
  store %CType* %dt84, %CType** %type86, align 8
  %type87 = load %CType*, %CType** %type86, align 8
  %fieldLLL88 = getelementptr inbounds %CType, %CType* %type87, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL88, align 8
  %fieldLLL89 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 3
  %type90 = load %CType, %CType* %fieldLLL89, align 8
  store %CType* %fieldLLL89, %CType** %inline_result_variable85, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable91 = load %CType*, %CType** %inline_result_variable85, align 8
  store %CType* %inline_result_variable91, %CType** %type1, align 8
  %sbt92 = load i32, i32* %sbt, align 4
  %eq93 = icmp eq i32 %sbt92, 6
  br i1 %eq93, label %cond_jump_then94, label %cond_end95

cond_jump_then94:                                 ; preds = %pointed_type_end
  %type197 = load %CType*, %CType** %type1, align 8
  %fieldLLL98 = getelementptr inbounds %CType, %CType* %type197, i32 0, i32 0
  %t99 = load i32, i32* %fieldLLL98, align 4
  %andtmp100 = and i32 %t99, 15
  %not_eq101 = icmp ne i32 %andtmp100, 3
  store i1 %not_eq101, i1* %andand96, align 1
  br i1 %not_eq101, label %cond_jump_then102, label %cond_jump_end103

cond_end95:                                       ; preds = %cond_end120, %pointed_type_end
  %sbt121 = load i32, i32* %sbt, align 4
  %not_eq122 = icmp ne i32 %sbt121, 4
  br i1 %not_eq122, label %cond_jump_then123, label %cond_end124

cond_jump_then102:                                ; preds = %cond_jump_then94
  %dt104 = load %CType*, %CType** %dt, align 8
  store i32 1937, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.120, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type105

cond_jump_end103:                                 ; preds = %pointed_type_end108, %cond_jump_then94
  %andand_result_value118 = load i1, i1* %andand96, align 1
  br i1 %andand_result_value118, label %cond_jump_then119, label %cond_else_block

pointed_type105:                                  ; preds = %cond_jump_then102
  %inline_result_variable106 = alloca %CType*, align 8
  %type107 = alloca %CType*, align 8
  store %CType* %dt104, %CType** %type107, align 8
  %type109 = load %CType*, %CType** %type107, align 8
  %fieldLLL110 = getelementptr inbounds %CType, %CType* %type109, i32 0, i32 1
  %ref111 = load %Sym*, %Sym** %fieldLLL110, align 8
  %fieldLLL112 = getelementptr inbounds %Sym, %Sym* %ref111, i32 0, i32 3
  %type113 = load %CType, %CType* %fieldLLL112, align 8
  store %CType* %fieldLLL112, %CType** %inline_result_variable106, align 8
  br label %pointed_type_end108

pointed_type_end108:                              ; preds = %pointed_type105
  %inline_result_variable114 = load %CType*, %CType** %inline_result_variable106, align 8
  %st115 = load %CType*, %CType** %st, align 8
  %fun_result = call i32 @is_compatible_types(%CType* %inline_result_variable114, %CType* %st115)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA116 = icmp ne i32 %castOOOO, 0
  %andand117 = and i1 %not_eq101, %icmpA116
  store i1 %andand117, i1* %andand96, align 1
  br label %cond_jump_end103

cond_jump_then119:                                ; preds = %cond_jump_end103
  br label %gen_assign_cast.error
  br label %cond_end120

cond_else_block:                                  ; preds = %cond_jump_end103
  br label %gen_assign_cast.type_ok
  br label %cond_end120

cond_end120:                                      ; preds = %cond_else_block, %cond_jump_then119
  br label %cond_end95

gen_assign_cast.error:                            ; preds = %cond_jump_then263, %cond_jump_then123, %cond_jump_then119
  %autocast = bitcast [256 x i8]* %buf1 to i8*
  %st265 = load %CType*, %CType** %st, align 8
  call void @type_to_str(i8* %autocast, i32 256, %CType* %st265, i8* null)
  %autocast266 = bitcast [256 x i8]* %buf2 to i8*
  %dt267 = load %CType*, %CType** %dt, align 8
  call void @type_to_str(i8* %autocast266, i32 256, %CType* %dt267, i8* null)
  %autocast268 = bitcast [256 x i8]* %buf1 to i8*
  %autocast269 = bitcast [256 x i8]* %buf2 to i8*
  call void (i8*, ...) @error(i8* bitcast ([25 x i8]* @130 to i8*), i8* %autocast268, i8* %autocast269)
  br label %cond_end264

cond_jump_then123:                                ; preds = %cond_end95
  br label %gen_assign_cast.error
  br label %cond_end124

cond_end124:                                      ; preds = %cond_jump_then123, %cond_end95
  %st125 = load %CType*, %CType** %st, align 8
  store i32 1944, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.121, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type126

pointed_type126:                                  ; preds = %cond_end124
  %inline_result_variable127 = alloca %CType*, align 8
  %type128 = alloca %CType*, align 8
  store %CType* %st125, %CType** %type128, align 8
  %type130 = load %CType*, %CType** %type128, align 8
  %fieldLLL131 = getelementptr inbounds %CType, %CType* %type130, i32 0, i32 1
  %ref132 = load %Sym*, %Sym** %fieldLLL131, align 8
  %fieldLLL133 = getelementptr inbounds %Sym, %Sym* %ref132, i32 0, i32 3
  %type134 = load %CType, %CType* %fieldLLL133, align 8
  store %CType* %fieldLLL133, %CType** %inline_result_variable127, align 8
  br label %pointed_type_end129

pointed_type_end129:                              ; preds = %pointed_type126
  %inline_result_variable135 = load %CType*, %CType** %inline_result_variable127, align 8
  store %CType* %inline_result_variable135, %CType** %type2, align 8
  %type1137 = load %CType*, %CType** %type1, align 8
  %fieldLLL138 = getelementptr inbounds %CType, %CType* %type1137, i32 0, i32 0
  %t139 = load i32, i32* %fieldLLL138, align 4
  %andtmp140 = and i32 %t139, 15
  %eq141 = icmp eq i32 %andtmp140, 3
  store i1 %eq141, i1* %oror136, align 1
  br i1 %eq141, label %cond_jump_end143, label %cond_jump_then142

cond_jump_then142:                                ; preds = %pointed_type_end129
  %type2144 = load %CType*, %CType** %type2, align 8
  %fieldLLL145 = getelementptr inbounds %CType, %CType* %type2144, i32 0, i32 0
  %t146 = load i32, i32* %fieldLLL145, align 4
  %andtmp147 = and i32 %t146, 15
  %eq148 = icmp eq i32 %andtmp147, 3
  %oror149 = or i1 %eq141, %eq148
  store i1 %oror149, i1* %oror136, align 1
  br label %cond_jump_end143

cond_jump_end143:                                 ; preds = %cond_jump_then142, %pointed_type_end129
  %oror_result_value150 = load i1, i1* %oror136, align 1
  br i1 %oror_result_value150, label %cond_jump_then151, label %cond_else_block152

cond_jump_then151:                                ; preds = %cond_jump_end143
  br label %cond_end153

cond_else_block152:                               ; preds = %cond_jump_end143
  %type1154 = load %CType*, %CType** %type1, align 8
  %derefference_valueB = load %CType, %CType* %type1154, align 8
  store %CType %derefference_valueB, %CType* %tmp_type1, align 8
  %type2155 = load %CType*, %CType** %type2, align 8
  %derefference_valueB156 = load %CType, %CType* %type2155, align 8
  store %CType %derefference_valueB156, %CType* %tmp_type2, align 8
  %tmp_type1157 = load %CType, %CType* %tmp_type1, align 8
  %tmp_type1158 = load %CType, %CType* %tmp_type1, align 8
  %fieldVVV159 = getelementptr inbounds %CType, %CType* %tmp_type1, i32 0, i32 0
  %t160 = load i32, i32* %fieldVVV159, align 4
  %andtmp161 = and i32 %t160, -6161
  %fieldTTT = getelementptr inbounds %CType, %CType* %tmp_type1, i32 0, i32 0
  store i32 %andtmp161, i32* %fieldTTT, align 4
  %tmp_type2162 = load %CType, %CType* %tmp_type2, align 8
  %tmp_type2163 = load %CType, %CType* %tmp_type2, align 8
  %fieldVVV164 = getelementptr inbounds %CType, %CType* %tmp_type2, i32 0, i32 0
  %t165 = load i32, i32* %fieldVVV164, align 4
  %andtmp166 = and i32 %t165, -6161
  %fieldTTT167 = getelementptr inbounds %CType, %CType* %tmp_type2, i32 0, i32 0
  store i32 %andtmp166, i32* %fieldTTT167, align 4
  %tmp_type1168 = load %CType, %CType* %tmp_type1, align 8
  %tmp_type2169 = load %CType, %CType* %tmp_type2, align 8
  %fun_result170 = call i32 @is_compatible_types(%CType* %tmp_type1, %CType* %tmp_type2)
  %logical_denial171 = icmp eq i32 %fun_result170, 0
  %castOOOO172 = zext i1 %logical_denial171 to i32
  %icmpA173 = icmp ne i32 %castOOOO172, 0
  br i1 %icmpA173, label %cond_jump_then174, label %cond_end175

cond_end153:                                      ; preds = %cond_end175, %cond_jump_then151
  %type1178 = load %CType*, %CType** %type1, align 8
  %fieldLLL179 = getelementptr inbounds %CType, %CType* %type1178, i32 0, i32 0
  %t180 = load i32, i32* %fieldLLL179, align 4
  %andtmp181 = and i32 %t180, 2048
  %logical_denial182 = icmp eq i32 %andtmp181, 0
  %castOOOO183 = zext i1 %logical_denial182 to i32
  %icmpA184 = icmp ne i32 %castOOOO183, 0
  store i1 %icmpA184, i1* %andand177, align 1
  br i1 %icmpA184, label %cond_jump_then185, label %cond_jump_end186

cond_jump_then174:                                ; preds = %cond_else_block152
  call void (i8*, ...) @warning(i8* bitcast ([42 x i8]* @127 to i8*))
  br label %cond_end175

cond_end175:                                      ; preds = %cond_jump_then174, %cond_else_block152
  br label %cond_end153

cond_jump_then185:                                ; preds = %cond_end153
  %type2187 = load %CType*, %CType** %type2, align 8
  %fieldLLL188 = getelementptr inbounds %CType, %CType* %type2187, i32 0, i32 0
  %t189 = load i32, i32* %fieldLLL188, align 4
  %andtmp190 = and i32 %t189, 2048
  %icmpA191 = icmp ne i32 %andtmp190, 0
  %andand192 = and i1 %icmpA184, %icmpA191
  store i1 %andand192, i1* %andand177, align 1
  br label %cond_jump_end186

cond_jump_end186:                                 ; preds = %cond_jump_then185, %cond_end153
  %andand_result_value193 = load i1, i1* %andand177, align 1
  store i1 %andand_result_value193, i1* %oror176, align 1
  br i1 %andand_result_value193, label %cond_jump_end195, label %cond_jump_then194

cond_jump_then194:                                ; preds = %cond_jump_end186
  %type1197 = load %CType*, %CType** %type1, align 8
  %fieldLLL198 = getelementptr inbounds %CType, %CType* %type1197, i32 0, i32 0
  %t199 = load i32, i32* %fieldLLL198, align 4
  %andtmp200 = and i32 %t199, 4096
  %logical_denial201 = icmp eq i32 %andtmp200, 0
  %castOOOO202 = zext i1 %logical_denial201 to i32
  %icmpA203 = icmp ne i32 %castOOOO202, 0
  store i1 %icmpA203, i1* %andand196, align 1
  br i1 %icmpA203, label %cond_jump_then204, label %cond_jump_end205

cond_jump_end195:                                 ; preds = %cond_jump_end205, %cond_jump_end186
  %oror_result_value214 = load i1, i1* %oror176, align 1
  br i1 %oror_result_value214, label %cond_jump_then215, label %cond_end216

cond_jump_then204:                                ; preds = %cond_jump_then194
  %type2206 = load %CType*, %CType** %type2, align 8
  %fieldLLL207 = getelementptr inbounds %CType, %CType* %type2206, i32 0, i32 0
  %t208 = load i32, i32* %fieldLLL207, align 4
  %andtmp209 = and i32 %t208, 4096
  %icmpA210 = icmp ne i32 %andtmp209, 0
  %andand211 = and i1 %icmpA203, %icmpA210
  store i1 %andand211, i1* %andand196, align 1
  br label %cond_jump_end205

cond_jump_end205:                                 ; preds = %cond_jump_then204, %cond_jump_then194
  %andand_result_value212 = load i1, i1* %andand196, align 1
  %oror213 = or i1 %andand_result_value193, %andand_result_value212
  store i1 %oror213, i1* %oror176, align 1
  br label %cond_jump_end195

cond_jump_then215:                                ; preds = %cond_jump_end195
  call void (i8*, ...) @warning(i8* bitcast ([56 x i8]* @128 to i8*))
  br label %cond_end216

cond_end216:                                      ; preds = %cond_jump_then215, %cond_jump_end195
  br label %end_blockX

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX218

cond_then_block217:                               ; preds = %cond_else_blockX222, %cond_else_blockX220, %cond_else_blockX218, %cond_else_blockX
  %sbt227 = load i32, i32* %sbt, align 4
  %eq228 = icmp eq i32 %sbt227, 4
  store i1 %eq228, i1* %oror226, align 1
  br i1 %eq228, label %cond_jump_end230, label %cond_jump_then229

cond_else_blockX218:                              ; preds = %cond_else_blockX, %after_break
  %eqtmp221 = icmp eq i32 %dbt13, 2
  br i1 %eqtmp221, label %cond_then_block217, label %cond_else_blockX220
  br label %cond_else_blockX222

cond_else_blockX220:                              ; preds = %cond_else_blockX218, %cond_else_blockX
  %eqtmp223 = icmp eq i32 %dbt13, 0
  br i1 %eqtmp223, label %cond_then_block217, label %cond_else_blockX222
  br label %cond_else_blockX224

cond_else_blockX222:                              ; preds = %cond_else_blockX220, %cond_else_blockX218
  %eqtmp225 = icmp eq i32 %dbt13, 12
  br i1 %eqtmp225, label %cond_then_block217, label %cond_else_blockX224

cond_else_blockX224:                              ; preds = %after_break237, %cond_else_blockX222, %cond_else_blockX220
  %eqtmp240 = icmp eq i32 %dbt13, 7
  br i1 %eqtmp240, label %cond_then_block238, label %cond_else_blockX239

cond_jump_then229:                                ; preds = %cond_then_block217
  %sbt231 = load i32, i32* %sbt, align 4
  %eq232 = icmp eq i32 %sbt231, 6
  %oror233 = or i1 %eq228, %eq232
  store i1 %oror233, i1* %oror226, align 1
  br label %cond_jump_end230

cond_jump_end230:                                 ; preds = %cond_jump_then229, %cond_then_block217
  %oror_result_value234 = load i1, i1* %oror226, align 1
  br i1 %oror_result_value234, label %cond_jump_then235, label %cond_end236

cond_jump_then235:                                ; preds = %cond_jump_end230
  call void (i8*, ...) @warning(i8* bitcast ([53 x i8]* @129 to i8*))
  br label %cond_end236

cond_end236:                                      ; preds = %cond_jump_then235, %cond_jump_end230
  br label %end_blockX

after_break237:                                   ; No predecessors!
  br label %cond_else_blockX224
  br label %cond_else_blockX239

cond_then_block238:                               ; preds = %cond_else_blockX224
  %dt241 = load %CType*, %CType** %dt, align 8
  %derefference_valueB242 = load %CType, %CType* %dt241, align 8
  store %CType %derefference_valueB242, %CType* %tmp_type1, align 8
  %st243 = load %CType*, %CType** %st, align 8
  %derefference_valueB244 = load %CType, %CType* %st243, align 8
  store %CType %derefference_valueB244, %CType* %tmp_type2, align 8
  %tmp_type1245 = load %CType, %CType* %tmp_type1, align 8
  %tmp_type1246 = load %CType, %CType* %tmp_type1, align 8
  %fieldVVV247 = getelementptr inbounds %CType, %CType* %tmp_type1, i32 0, i32 0
  %t248 = load i32, i32* %fieldVVV247, align 4
  %andtmp249 = and i32 %t248, -6145
  %fieldTTT250 = getelementptr inbounds %CType, %CType* %tmp_type1, i32 0, i32 0
  store i32 %andtmp249, i32* %fieldTTT250, align 4
  %tmp_type2251 = load %CType, %CType* %tmp_type2, align 8
  %tmp_type2252 = load %CType, %CType* %tmp_type2, align 8
  %fieldVVV253 = getelementptr inbounds %CType, %CType* %tmp_type2, i32 0, i32 0
  %t254 = load i32, i32* %fieldVVV253, align 4
  %andtmp255 = and i32 %t254, -6145
  %fieldTTT256 = getelementptr inbounds %CType, %CType* %tmp_type2, i32 0, i32 0
  store i32 %andtmp255, i32* %fieldTTT256, align 4
  %tmp_type1257 = load %CType, %CType* %tmp_type1, align 8
  %tmp_type2258 = load %CType, %CType* %tmp_type2, align 8
  %fun_result259 = call i32 @is_compatible_types(%CType* %tmp_type1, %CType* %tmp_type2)
  %logical_denial260 = icmp eq i32 %fun_result259, 0
  %castOOOO261 = zext i1 %logical_denial260 to i32
  %icmpA262 = icmp ne i32 %castOOOO261, 0
  br i1 %icmpA262, label %cond_jump_then263, label %cond_end264

cond_else_blockX239:                              ; preds = %after_break270, %cond_else_blockX224, %after_break237
  br label %end_blockX

cond_jump_then263:                                ; preds = %cond_then_block238
  br label %gen_assign_cast.error

cond_end264:                                      ; preds = %gen_assign_cast.error, %cond_then_block238
  br label %end_blockX

after_break270:                                   ; No predecessors!
  br label %cond_else_blockX239
}

define void @inc(i32 %0, i32 %1) {
entry:
  %post = alloca i32, align 4
  %post1 = alloca i32*, align 8
  store i32 %0, i32* %post, align 4
  store i32* %post, i32** %post1, align 8
  %c = alloca i32, align 4
  %c2 = alloca i32*, align 8
  store i32 %1, i32* %c, align 4
  store i32* %c, i32** %c2, align 8
  call void @test_lvalue()
  call void @vdup()
  %post3 = load i32, i32* %post, align 4
  %icmpA = icmp ne i32 %post3, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @gv_dup()
  call void @vrotb(i32 3)
  call void @vrotb(i32 3)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %c4 = load i32, i32* %c, align 4
  %sub = sub i32 %c4, 163
  call void @vpushi(i32 %sub)
  call void @gen_op(i32 43)
  call void @vstore()
  %post5 = load i32, i32* %post, align 4
  %icmpA6 = icmp ne i32 %post5, 0
  br i1 %icmpA6, label %cond_jump_then7, label %cond_end8

cond_jump_then7:                                  ; preds = %cond_end
  call void @vpop()
  br label %cond_end8

cond_end8:                                        ; preds = %cond_jump_then7, %cond_end
  ret void
}

define internal void @parse_attribute(%AttributeDef* %0) {
entry:
  %andand = alloca i1, align 1
  %parenthesis = alloca i32, align 4
  %oror31 = alloca i1, align 1
  %oror = alloca i1, align 1
  %n = alloca i32, align 4
  %t = alloca i32, align 4
  %ad = alloca %AttributeDef*, align 8
  %ad1 = alloca %AttributeDef**, align 8
  store %AttributeDef* %0, %AttributeDef** %ad, align 8
  store %AttributeDef** %ad, %AttributeDef*** %ad1, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end_block8, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 302
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %loop_top_block
  %tok2 = load i32, i32* @tok, align 4
  %eq3 = icmp eq i32 %tok2, 303
  %oror4 = or i1 %eq, %eq3
  store i1 %oror4, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  call void @next()
  call void @skip(i32 40)
  call void @skip(i32 40)
  br label %loop_top_block5

cond_end_block:                                   ; preds = %cond_jump_end
  ret void

loop_top_block5:                                  ; preds = %cond_end137, %cond_then_block
  %tok6 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok6, 41
  br i1 %not_eq, label %cond_then_block7, label %cond_end_block8

cond_then_block7:                                 ; preds = %loop_top_block5
  %tok9 = load i32, i32* @tok, align 4
  %le = icmp slt i32 %tok9, 256
  br i1 %le, label %cond_jump_then10, label %cond_end

cond_end_block8:                                  ; preds = %cond_jump_then136, %loop_top_block5
  call void @skip(i32 41)
  call void @skip(i32 41)
  br label %loop_top_block

cond_jump_then10:                                 ; preds = %cond_then_block7
  call void @expect(i8* bitcast ([15 x i8]* @132 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then10, %cond_then_block7
  %tok11 = load i32, i32* @tok, align 4
  store i32 %tok11, i32* %t, align 4
  call void @next()
  %t12 = load i32, i32* %t, align 4
  %eqtmp = icmp eq i32 %t12, 333
  br i1 %eqtmp, label %cond_then_block13, label %cond_else_blockX
  br label %cond_else_blockX14

end_blockX:                                       ; preds = %cond_else_blockX101, %cond_end111, %cond_then_block91, %cond_then_block77, %cond_then_block66, %cond_then_block60, %cond_then_block54, %cond_then_block46, %cond_end29, %cond_end19
  %tok134 = load i32, i32* @tok, align 4
  %not_eq135 = icmp ne i32 %tok134, 44
  br i1 %not_eq135, label %cond_jump_then136, label %cond_end137

cond_then_block13:                                ; preds = %cond_else_blockX, %cond_end
  call void @skip(i32 40)
  %tok16 = load i32, i32* @tok, align 4
  %not_eq17 = icmp ne i32 %tok16, 181
  br i1 %not_eq17, label %cond_jump_then18, label %cond_end19

cond_else_blockX:                                 ; preds = %cond_end
  %eqtmp15 = icmp eq i32 %t12, 334
  br i1 %eqtmp15, label %cond_then_block13, label %cond_else_blockX14

cond_else_blockX14:                               ; preds = %after_break, %cond_else_blockX, %cond_end
  %eqtmp23 = icmp eq i32 %t12, 335
  br i1 %eqtmp23, label %cond_then_block21, label %cond_else_blockX22
  br label %cond_else_blockX24

cond_jump_then18:                                 ; preds = %cond_then_block13
  call void @expect(i8* bitcast ([13 x i8]* @133 to i8*))
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_then_block13
  %ad20 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %tokc = load %CValue, %CValue* @tokc, align 16
  %cstr = load %CString*, %CString** bitcast (%CValue* @tokc to %CString**), align 8
  %fieldLLL = getelementptr inbounds %CString, %CString* %cstr, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %fun_result = call %Section* @find_section(%TCCState* %tcc_state, i8* %data)
  %fieldTU = getelementptr inbounds %AttributeDef, %AttributeDef* %ad20, i32 0, i32 2
  store %Section* %fun_result, %Section** %fieldTU, align 8
  call void @next()
  call void @skip(i32 41)
  br label %end_blockX

after_break:                                      ; No predecessors!
  br label %cond_else_blockX14
  br label %cond_else_blockX22

cond_then_block21:                                ; preds = %cond_else_blockX22, %cond_else_blockX14
  %tok26 = load i32, i32* @tok, align 4
  %eq27 = icmp eq i32 %tok26, 40
  br i1 %eq27, label %cond_jump_then28, label %cond_else_block

cond_else_blockX22:                               ; preds = %cond_else_blockX14, %after_break
  %eqtmp25 = icmp eq i32 %t12, 336
  br i1 %eqtmp25, label %cond_then_block21, label %cond_else_blockX24

cond_else_blockX24:                               ; preds = %after_break45, %cond_else_blockX22, %cond_else_blockX14
  %eqtmp48 = icmp eq i32 %t12, 337
  br i1 %eqtmp48, label %cond_then_block46, label %cond_else_blockX47
  br label %cond_else_blockX49

cond_jump_then28:                                 ; preds = %cond_then_block21
  call void @next()
  %fun_result30 = call i32 @expr_const()
  store i32 %fun_result30, i32* %n, align 4
  %n32 = load i32, i32* %n, align 4
  %leeq = icmp sle i32 %n32, 0
  store i1 %leeq, i1* %oror31, align 1
  br i1 %leeq, label %cond_jump_end34, label %cond_jump_then33

cond_else_block:                                  ; preds = %cond_then_block21
  store i32 8, i32* %n, align 4
  br label %cond_end29

cond_end29:                                       ; preds = %cond_else_block, %cond_end41
  %ad42 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %n43 = load i32, i32* %n, align 4
  %fieldTU44 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad42, i32 0, i32 0
  store i32 %n43, i32* %fieldTU44, align 4
  br label %end_blockX

cond_jump_then33:                                 ; preds = %cond_jump_then28
  %n35 = load i32, i32* %n, align 4
  %n36 = load i32, i32* %n, align 4
  %sub = sub i32 %n36, 1
  %andtmp = and i32 %n35, %sub
  %not_eq37 = icmp ne i32 %andtmp, 0
  %oror38 = or i1 %leeq, %not_eq37
  store i1 %oror38, i1* %oror31, align 1
  br label %cond_jump_end34

cond_jump_end34:                                  ; preds = %cond_jump_then33, %cond_jump_then28
  %oror_result_value39 = load i1, i1* %oror31, align 1
  br i1 %oror_result_value39, label %cond_jump_then40, label %cond_end41

cond_jump_then40:                                 ; preds = %cond_jump_end34
  call void (i8*, ...) @error(i8* bitcast ([42 x i8]* @134 to i8*))
  br label %cond_end41

cond_end41:                                       ; preds = %cond_jump_then40, %cond_jump_end34
  call void @skip(i32 41)
  br label %cond_end29

after_break45:                                    ; No predecessors!
  br label %cond_else_blockX24
  br label %cond_else_blockX47

cond_then_block46:                                ; preds = %cond_else_blockX47, %cond_else_blockX24
  %ad51 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldTU52 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad51, i32 0, i32 1
  store i32 1, i32* %fieldTU52, align 4
  br label %end_blockX

cond_else_blockX47:                               ; preds = %cond_else_blockX24, %after_break45
  %eqtmp50 = icmp eq i32 %t12, 338
  br i1 %eqtmp50, label %cond_then_block46, label %cond_else_blockX49

cond_else_blockX49:                               ; preds = %after_break53, %cond_else_blockX47, %cond_else_blockX24
  %eqtmp56 = icmp eq i32 %t12, 339
  br i1 %eqtmp56, label %cond_then_block54, label %cond_else_blockX55
  br label %cond_else_blockX57

after_break53:                                    ; No predecessors!
  br label %cond_else_blockX49
  br label %cond_else_blockX55

cond_then_block54:                                ; preds = %cond_else_blockX55, %cond_else_blockX49
  br label %end_blockX

cond_else_blockX55:                               ; preds = %cond_else_blockX49, %after_break53
  %eqtmp58 = icmp eq i32 %t12, 340
  br i1 %eqtmp58, label %cond_then_block54, label %cond_else_blockX57

cond_else_blockX57:                               ; preds = %after_break59, %cond_else_blockX55, %cond_else_blockX49
  %eqtmp62 = icmp eq i32 %t12, 351
  br i1 %eqtmp62, label %cond_then_block60, label %cond_else_blockX61
  br label %cond_else_blockX63

after_break59:                                    ; No predecessors!
  br label %cond_else_blockX57
  br label %cond_else_blockX61

cond_then_block60:                                ; preds = %cond_else_blockX61, %cond_else_blockX57
  br label %end_blockX

cond_else_blockX61:                               ; preds = %cond_else_blockX57, %after_break59
  %eqtmp64 = icmp eq i32 %t12, 352
  br i1 %eqtmp64, label %cond_then_block60, label %cond_else_blockX63

cond_else_blockX63:                               ; preds = %after_break65, %cond_else_blockX61, %cond_else_blockX57
  %eqtmp68 = icmp eq i32 %t12, 341
  br i1 %eqtmp68, label %cond_then_block66, label %cond_else_blockX67
  br label %cond_else_blockX69

after_break65:                                    ; No predecessors!
  br label %cond_else_blockX63
  br label %cond_else_blockX67

cond_then_block66:                                ; preds = %cond_else_blockX69, %cond_else_blockX67, %cond_else_blockX63
  %ad73 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL74 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad73, i32 0, i32 3
  %func_attr = load i32, i32* %fieldLLL74, align 4
  %castAQ = bitcast i32* %fieldLLL74 to %come_anon123*
  %fieldLLL75 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ, i32 0, i32 0
  %func_call = load i8, i8* %fieldLLL75, align 1
  store i8 0, i8* %fieldLLL75, align 1
  br label %end_blockX

cond_else_blockX67:                               ; preds = %cond_else_blockX63, %after_break65
  %eqtmp70 = icmp eq i32 %t12, 342
  br i1 %eqtmp70, label %cond_then_block66, label %cond_else_blockX69
  br label %cond_else_blockX71

cond_else_blockX69:                               ; preds = %cond_else_blockX67, %cond_else_blockX63
  %eqtmp72 = icmp eq i32 %t12, 343
  br i1 %eqtmp72, label %cond_then_block66, label %cond_else_blockX71

cond_else_blockX71:                               ; preds = %after_break76, %cond_else_blockX69, %cond_else_blockX67
  %eqtmp79 = icmp eq i32 %t12, 344
  br i1 %eqtmp79, label %cond_then_block77, label %cond_else_blockX78
  br label %cond_else_blockX80

after_break76:                                    ; No predecessors!
  br label %cond_else_blockX71
  br label %cond_else_blockX78

cond_then_block77:                                ; preds = %cond_else_blockX80, %cond_else_blockX78, %cond_else_blockX71
  %ad84 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL85 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad84, i32 0, i32 3
  %func_attr86 = load i32, i32* %fieldLLL85, align 4
  %castAQ87 = bitcast i32* %fieldLLL85 to %come_anon123*
  %fieldLLL88 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ87, i32 0, i32 0
  %func_call89 = load i8, i8* %fieldLLL88, align 1
  store i8 1, i8* %fieldLLL88, align 1
  br label %end_blockX

cond_else_blockX78:                               ; preds = %cond_else_blockX71, %after_break76
  %eqtmp81 = icmp eq i32 %t12, 345
  br i1 %eqtmp81, label %cond_then_block77, label %cond_else_blockX80
  br label %cond_else_blockX82

cond_else_blockX80:                               ; preds = %cond_else_blockX78, %cond_else_blockX71
  %eqtmp83 = icmp eq i32 %t12, 346
  br i1 %eqtmp83, label %cond_then_block77, label %cond_else_blockX82

cond_else_blockX82:                               ; preds = %after_break90, %cond_else_blockX80, %cond_else_blockX78
  %eqtmp93 = icmp eq i32 %t12, 350
  br i1 %eqtmp93, label %cond_then_block91, label %cond_else_blockX92

after_break90:                                    ; No predecessors!
  br label %cond_else_blockX82
  br label %cond_else_blockX92

cond_then_block91:                                ; preds = %cond_else_blockX82
  %ad94 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL95 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad94, i32 0, i32 3
  %func_attr96 = load i32, i32* %fieldLLL95, align 4
  %castAQ97 = bitcast i32* %fieldLLL95 to %come_anon123*
  %fieldLLL98 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ97, i32 0, i32 2
  %func_export = load i1, i1* %fieldLLL98, align 1
  store i1 true, i1* %fieldLLL98, align 1
  br label %end_blockX

cond_else_blockX92:                               ; preds = %after_break99, %cond_else_blockX82, %after_break90
  br label %cond_then_block100

after_break99:                                    ; No predecessors!
  br label %cond_else_blockX92
  br label %cond_else_blockX101

cond_then_block100:                               ; preds = %cond_else_blockX92
  %tcc_state102 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL103 = getelementptr inbounds %TCCState, %TCCState* %tcc_state102, i32 0, i32 37
  %warn_unsupported = load i32, i32* %fieldLLL103, align 4
  %icmpA = icmp ne i32 %warn_unsupported, 0
  br i1 %icmpA, label %cond_jump_then104, label %cond_end105

cond_else_blockX101:                              ; preds = %after_break133, %after_break99
  br label %end_blockX

cond_jump_then104:                                ; preds = %cond_then_block100
  %t106 = load i32, i32* %t, align 4
  %fun_result107 = call i8* @get_tok_str(i32 %t106, %CValue* null)
  call void (i8*, ...) @warning(i8* bitcast ([23 x i8]* @135 to i8*), i8* %fun_result107)
  br label %cond_end105

cond_end105:                                      ; preds = %cond_jump_then104, %cond_then_block100
  %tok108 = load i32, i32* @tok, align 4
  %eq109 = icmp eq i32 %tok108, 40
  br i1 %eq109, label %cond_jump_then110, label %cond_end111

cond_jump_then110:                                ; preds = %cond_end105
  store i32 0, i32* %parenthesis, align 4
  br label %loop_top_block112

cond_end111:                                      ; preds = %cond_end_block113, %cond_end105
  br label %end_blockX

loop_top_block112:                                ; preds = %cond_jump_end129, %cond_jump_then110
  %tok114 = load i32, i32* @tok, align 4
  %eq115 = icmp eq i32 %tok114, 40
  br i1 %eq115, label %cond_jump_then116, label %cond_jump_elif0

loop_continue_top_block:                          ; preds = %cond_end117
  %parenthesis126 = load i32, i32* %parenthesis, align 4
  %icmpA127 = icmp ne i32 %parenthesis126, 0
  store i1 %icmpA127, i1* %andand, align 1
  br i1 %icmpA127, label %cond_jump_then128, label %cond_jump_end129

cond_end_block113:                                ; preds = %cond_jump_end129
  br label %cond_end111

cond_jump_then116:                                ; preds = %loop_top_block112
  %parenthesis118 = load i32, i32* %parenthesis, align 4
  %add = add i32 %parenthesis118, 1
  store i32 %add, i32* %parenthesis, align 4
  %parenthesis119 = load i32, i32* %parenthesis, align 4
  %sub120 = sub i32 %parenthesis119, 1
  br label %cond_end117

cond_jump_elif0:                                  ; preds = %loop_top_block112
  %tok121 = load i32, i32* @tok, align 4
  %eq122 = icmp eq i32 %tok121, 41
  br i1 %eq122, label %cond_jump_elif_then0, label %cond_end117

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %parenthesis123 = load i32, i32* %parenthesis, align 4
  %sub124 = sub i32 %parenthesis123, 1
  store i32 %sub124, i32* %parenthesis, align 4
  %add125 = add i32 %sub124, 1
  br label %cond_end117

cond_end117:                                      ; preds = %cond_jump_elif_then0, %cond_jump_elif0, %cond_jump_then116
  call void @next()
  br label %loop_continue_top_block

cond_jump_then128:                                ; preds = %loop_continue_top_block
  %tok130 = load i32, i32* @tok, align 4
  %not_eq131 = icmp ne i32 %tok130, -1
  %andand132 = and i1 %icmpA127, %not_eq131
  store i1 %andand132, i1* %andand, align 1
  br label %cond_jump_end129

cond_jump_end129:                                 ; preds = %cond_jump_then128, %loop_continue_top_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %loop_top_block112, label %cond_end_block113

after_break133:                                   ; No predecessors!
  br label %cond_else_blockX101

cond_jump_then136:                                ; preds = %end_blockX
  br label %cond_end_block8

cond_end137:                                      ; preds = %after_break138, %end_blockX
  call void @next()
  br label %loop_top_block5

after_break138:                                   ; No predecessors!
  br label %cond_end137
}

define internal void @struct_decl(%CType* %0, i32 %1) {
entry:
  %oror410 = alloca i1, align 1
  %andand356 = alloca i1, align 1
  %oror304 = alloca i1, align 1
  %oror265 = alloca i1, align 1
  %oror264 = alloca i1, align 1
  %andand211 = alloca i1, align 1
  %andand210 = alloca i1, align 1
  %andand209 = alloca i1, align 1
  %andand208 = alloca i1, align 1
  %andand207 = alloca i1, align 1
  %andand152 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %btype = alloca %CType, align 8
  %castXXXX5 = bitcast %CType* %btype to i8*
  %2 = call i8* @memset(i8* %castXXXX5, i32 0, i64 16)
  %type13 = alloca %CType, align 8
  %castXXXX4 = bitcast %CType* %type13 to i8*
  %3 = call i8* @memset(i8* %castXXXX4, i32 0, i64 16)
  %ad = alloca %AttributeDef, align 8
  %castXXXX = bitcast %AttributeDef* %ad to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %ps = alloca %Sym**, align 8
  %ass = alloca %Sym*, align 8
  %ss = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %prevbt = alloca i32, align 4
  %lbit_pos = alloca i32, align 4
  %bt = alloca i32, align 4
  %bsize = alloca i32, align 4
  %bit_pos = alloca i32, align 4
  %bit_size = alloca i32, align 4
  %offset = alloca i32, align 4
  %c = alloca i32, align 4
  %maxalign = alloca i32, align 4
  %align = alloca i32, align 4
  %size = alloca i32, align 4
  %v = alloca i32, align 4
  %a = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %u = alloca i32, align 4
  %u2 = alloca i32*, align 8
  store i32 %1, i32* %u, align 4
  store i32* %u, i32** %u2, align 8
  %tok = load i32, i32* @tok, align 4
  store i32 %tok, i32* %a, align 4
  call void @next()
  %tok6 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok6, 123
  br i1 %not_eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %tok7 = load i32, i32* @tok, align 4
  store i32 %tok7, i32* %v, align 4
  call void @next()
  %v8 = load i32, i32* %v, align 4
  %le = icmp slt i32 %v8, 256
  br i1 %le, label %cond_jump_then9, label %cond_end10

cond_else_block:                                  ; preds = %entry
  %anon_sym = load i32, i32* @anon_sym, align 4
  %add30 = add i32 %anon_sym, 1
  store i32 %add30, i32* @anon_sym, align 4
  %anon_sym31 = load i32, i32* @anon_sym, align 4
  %sub32 = sub i32 %anon_sym31, 1
  store i32 %sub32, i32* %v, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_end22
  %type133 = load %CType, %CType* %type13, align 8
  %a34 = load i32, i32* %a, align 4
  %fieldTTT = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  store i32 %a34, i32* %fieldTTT, align 4
  %v35 = load i32, i32* %v, align 4
  %ortmp = or i32 %v35, 1073741824
  %type136 = load %CType, %CType* %type13, align 8
  %fun_result = call %Sym* @sym_push(i32 %ortmp, %CType* %type13, i32 0, i32 -1)
  store %Sym* %fun_result, %Sym** %s, align 8
  %s37 = load %Sym*, %Sym** %s, align 8
  %fieldTU = getelementptr inbounds %Sym, %Sym* %s37, i32 0, i32 1
  store i64 0, i64* %fieldTU, align 4
  br label %struct_decl.do_decl

cond_jump_then9:                                  ; preds = %cond_jump_then
  call void @expect(i8* bitcast ([23 x i8]* @136 to i8*))
  br label %cond_end10

cond_end10:                                       ; preds = %cond_jump_then9, %cond_jump_then
  %v11 = load i32, i32* %v, align 4
  store i32 2299, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.123, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %struct_find

struct_find:                                      ; preds = %cond_end10
  %inline_result_variable = alloca %Sym*, align 8
  %v12 = alloca i32, align 4
  store i32 %v11, i32* %v12, align 4
  %v13 = load i32, i32* %v12, align 4
  %sub = sub i32 %v13, 256
  store i32 %sub, i32* %v12, align 4
  %add = add i32 %sub, 256
  %v14 = load i32, i32* %v12, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub15 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v14, %sub15
  br i1 %gteq_unsinged, label %cond_jump_then16, label %cond_end17

struct_find_end:                                  ; preds = %cond_end17, %cond_jump_then16
  %inline_result_variable19 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable19, %Sym** %s, align 8
  %s20 = load %Sym*, %Sym** %s, align 8
  %icmpB = icmp ne %Sym* %s20, null
  br i1 %icmpB, label %cond_jump_then21, label %cond_end22

cond_jump_then16:                                 ; preds = %struct_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %struct_find_end

cond_end17:                                       ; preds = %struct_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v18 = load i32, i32* %v12, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v18
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 3
  %sym_struct = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %sym_struct, %Sym** %inline_result_variable, align 8
  br label %struct_find_end

cond_jump_then21:                                 ; preds = %struct_find_end
  %s23 = load %Sym*, %Sym** %s, align 8
  %fieldLLL24 = getelementptr inbounds %Sym, %Sym* %s23, i32 0, i32 3
  %type25 = load %CType, %CType* %fieldLLL24, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL24, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %a26 = load i32, i32* %a, align 4
  %not_eq27 = icmp ne i32 %t, %a26
  br i1 %not_eq27, label %cond_jump_then28, label %cond_end29

cond_end22:                                       ; preds = %cond_end29, %struct_find_end
  br label %cond_end

cond_jump_then28:                                 ; preds = %cond_jump_then21
  call void (i8*, ...) @error(i8* bitcast ([13 x i8]* @137 to i8*))
  br label %cond_end29

cond_end29:                                       ; preds = %cond_jump_then28, %cond_jump_then21
  br label %struct_decl.do_decl
  br label %cond_end22

struct_decl.do_decl:                              ; preds = %cond_end, %cond_end29
  %type38 = load %CType*, %CType** %type, align 8
  %u39 = load i32, i32* %u, align 4
  %fieldTU40 = getelementptr inbounds %CType, %CType* %type38, i32 0, i32 0
  store i32 %u39, i32* %fieldTU40, align 4
  %type41 = load %CType*, %CType** %type, align 8
  %s42 = load %Sym*, %Sym** %s, align 8
  %fieldTU43 = getelementptr inbounds %CType, %CType* %type41, i32 0, i32 1
  store %Sym* %s42, %Sym** %fieldTU43, align 8
  %tok44 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok44, 123
  br i1 %eq, label %cond_jump_then45, label %cond_end46

cond_jump_then45:                                 ; preds = %struct_decl.do_decl
  call void @next()
  %s47 = load %Sym*, %Sym** %s, align 8
  %fieldLLL48 = getelementptr inbounds %Sym, %Sym* %s47, i32 0, i32 2
  %c49 = load i64, i64* %fieldLLL48, align 4
  %not_eq50 = icmp ne i64 %c49, -1
  br i1 %not_eq50, label %cond_jump_then51, label %cond_end52

cond_end46:                                       ; preds = %cond_end57, %struct_decl.do_decl
  ret void

cond_jump_then51:                                 ; preds = %cond_jump_then45
  call void (i8*, ...) @error(i8* bitcast ([34 x i8]* @138 to i8*))
  br label %cond_end52

cond_end52:                                       ; preds = %cond_jump_then51, %cond_jump_then45
  store i32 0, i32* %c, align 4
  %a53 = load i32, i32* %a, align 4
  %eq54 = icmp eq i32 %a53, 300
  br i1 %eq54, label %cond_jump_then55, label %cond_else_block56

cond_jump_then55:                                 ; preds = %cond_end52
  br label %loop_top_block

cond_else_block56:                                ; preds = %cond_end52
  store i32 1, i32* %maxalign, align 4
  %s94 = load %Sym*, %Sym** %s, align 8
  %fieldLLL95 = getelementptr inbounds %Sym, %Sym* %s94, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL95, align 8
  store %Sym** %fieldLLL95, %Sym*** %ps, align 8
  store i32 0, i32* %prevbt, align 4
  store i32 0, i32* %bit_pos, align 4
  store i32 0, i32* %offset, align 4
  br label %loop_top_block96

cond_end57:                                       ; preds = %cond_end_block100, %cond_end_block
  br label %cond_end46

loop_continue_top_block:                          ; preds = %cond_end92
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then55
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %tok58 = load i32, i32* @tok, align 4
  store i32 %tok58, i32* %v, align 4
  %v59 = load i32, i32* %v, align 4
  %le60 = icmp slt i32 %v59, 313
  br i1 %le60, label %cond_jump_then61, label %cond_end62

cond_end_block:                                   ; preds = %cond_jump_then91, %cond_jump_then83, %loop_top_block
  call void @skip(i32 125)
  br label %cond_end57

cond_jump_then61:                                 ; preds = %cond_then_block
  call void @expect(i8* bitcast ([11 x i8]* @139 to i8*))
  br label %cond_end62

cond_end62:                                       ; preds = %cond_jump_then61, %cond_then_block
  call void @next()
  %tok63 = load i32, i32* @tok, align 4
  %eq64 = icmp eq i32 %tok63, 61
  br i1 %eq64, label %cond_jump_then65, label %cond_end66

cond_jump_then65:                                 ; preds = %cond_end62
  call void @next()
  %fun_result67 = call i32 @expr_const()
  store i32 %fun_result67, i32* %c, align 4
  br label %cond_end66

cond_end66:                                       ; preds = %cond_jump_then65, %cond_end62
  %v68 = load i32, i32* %v, align 4
  %int_type = load %CType, %CType* @int_type, align 8
  %c69 = load i32, i32* %c, align 4
  %fun_result70 = call %Sym* @sym_push(i32 %v68, %CType* @int_type, i32 240, i32 %c69)
  store %Sym* %fun_result70, %Sym** %ss, align 8
  %ss71 = load %Sym*, %Sym** %ss, align 8
  %fieldLLL72 = getelementptr inbounds %Sym, %Sym* %ss71, i32 0, i32 3
  %type73 = load %CType, %CType* %fieldLLL72, align 8
  %ss74 = load %Sym*, %Sym** %ss, align 8
  %fieldLLL75 = getelementptr inbounds %Sym, %Sym* %ss74, i32 0, i32 3
  %type76 = load %CType, %CType* %fieldLLL75, align 8
  %fieldVVV77 = getelementptr inbounds %CType, %CType* %fieldLLL75, i32 0, i32 0
  %t78 = load i32, i32* %fieldVVV77, align 4
  %ortmp79 = or i32 %t78, 256
  %fieldTTT80 = getelementptr inbounds %CType, %CType* %fieldLLL72, i32 0, i32 0
  store i32 %ortmp79, i32* %fieldTTT80, align 4
  %tok81 = load i32, i32* @tok, align 4
  %not_eq82 = icmp ne i32 %tok81, 44
  br i1 %not_eq82, label %cond_jump_then83, label %cond_end84

cond_jump_then83:                                 ; preds = %cond_end66
  br label %cond_end_block

cond_end84:                                       ; preds = %after_break, %cond_end66
  call void @next()
  %c85 = load i32, i32* %c, align 4
  %add86 = add i32 %c85, 1
  store i32 %add86, i32* %c, align 4
  %c87 = load i32, i32* %c, align 4
  %sub88 = sub i32 %c87, 1
  %tok89 = load i32, i32* @tok, align 4
  %eq90 = icmp eq i32 %tok89, 125
  br i1 %eq90, label %cond_jump_then91, label %cond_end92

after_break:                                      ; No predecessors!
  br label %cond_end84

cond_jump_then91:                                 ; preds = %cond_end84
  br label %cond_end_block

cond_end92:                                       ; preds = %after_break93, %cond_end84
  br label %loop_continue_top_block

after_break93:                                    ; No predecessors!
  br label %cond_end92

loop_top_block96:                                 ; preds = %cond_end_block106, %cond_else_block56
  %tok97 = load i32, i32* @tok, align 4
  %not_eq98 = icmp ne i32 %tok97, 125
  br i1 %not_eq98, label %cond_then_block99, label %cond_end_block100

cond_then_block99:                                ; preds = %loop_top_block96
  %btype101 = load %CType, %CType* %btype, align 8
  %ad102 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fun_result103 = call i32 @parse_btype(%CType* %btype, %AttributeDef* %ad)
  br label %loop_top_block104

cond_end_block100:                                ; preds = %loop_top_block96
  call void @skip(i32 125)
  %s422 = load %Sym*, %Sym** %s, align 8
  %c423 = load i32, i32* %c, align 4
  %maxalign424 = load i32, i32* %maxalign, align 4
  %add425 = add i32 %c423, %maxalign424
  %sub426 = sub i32 %add425, 1
  %maxalign427 = load i32, i32* %maxalign, align 4
  %sub428 = sub i32 0, %maxalign427
  %andtmp429 = and i32 %sub426, %sub428
  %icastD430 = sext i32 %andtmp429 to i64
  %fieldTU431 = getelementptr inbounds %Sym, %Sym* %s422, i32 0, i32 2
  store i64 %icastD430, i64* %fieldTU431, align 4
  %s432 = load %Sym*, %Sym** %s, align 8
  %maxalign433 = load i32, i32* %maxalign, align 4
  %icastD434 = sext i32 %maxalign433 to i64
  %fieldTU435 = getelementptr inbounds %Sym, %Sym* %s432, i32 0, i32 1
  store i64 %icastD434, i64* %fieldTU435, align 4
  br label %cond_end57

loop_top_block104:                                ; preds = %cond_end420, %cond_then_block99
  br i1 true, label %cond_then_block105, label %cond_end_block106

cond_then_block105:                               ; preds = %loop_top_block104
  store i32 -1, i32* %bit_size, align 4
  store i32 0, i32* %v, align 4
  %btype107 = load %CType, %CType* %btype, align 8
  store %CType %btype107, %CType* %type13, align 8
  %tok108 = load i32, i32* @tok, align 4
  %not_eq109 = icmp ne i32 %tok108, 58
  br i1 %not_eq109, label %cond_jump_then110, label %cond_end111

cond_end_block106:                                ; preds = %cond_jump_then419, %loop_top_block104
  call void @skip(i32 59)
  br label %loop_top_block96

cond_jump_then110:                                ; preds = %cond_then_block105
  %type1112 = load %CType, %CType* %type13, align 8
  %ad113 = load %AttributeDef, %AttributeDef* %ad, align 8
  %v114 = load i32, i32* %v, align 4
  call void @type_decl(%CType* %type13, %AttributeDef* %ad, i32* %v, i32 3)
  %v115 = load i32, i32* %v, align 4
  %eq116 = icmp eq i32 %v115, 0
  store i1 %eq116, i1* %andand, align 1
  br i1 %eq116, label %cond_jump_then117, label %cond_jump_end

cond_end111:                                      ; preds = %cond_end138, %cond_then_block105
  %tok141 = load i32, i32* @tok, align 4
  %eq142 = icmp eq i32 %tok141, 58
  br i1 %eq142, label %cond_jump_then143, label %cond_end144

cond_jump_then117:                                ; preds = %cond_jump_then110
  %type1118 = load %CType, %CType* %type13, align 8
  %fieldVVV119 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t120 = load i32, i32* %fieldVVV119, align 4
  %andtmp = and i32 %t120, 15
  %not_eq121 = icmp ne i32 %andtmp, 7
  %andand122 = and i1 %eq116, %not_eq121
  store i1 %andand122, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then117, %cond_jump_then110
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then123, label %cond_end124

cond_jump_then123:                                ; preds = %cond_jump_end
  call void @expect(i8* bitcast ([11 x i8]* @140 to i8*))
  br label %cond_end124

cond_end124:                                      ; preds = %cond_jump_then123, %cond_jump_end
  %type1125 = load %CType, %CType* %type13, align 8
  %fieldVVV126 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t127 = load i32, i32* %fieldVVV126, align 4
  %andtmp128 = and i32 %t127, 15
  %eq129 = icmp eq i32 %andtmp128, 6
  store i1 %eq129, i1* %oror, align 1
  br i1 %eq129, label %cond_jump_end131, label %cond_jump_then130

cond_jump_then130:                                ; preds = %cond_end124
  %type1132 = load %CType, %CType* %type13, align 8
  %fieldVVV133 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t134 = load i32, i32* %fieldVVV133, align 4
  %andtmp135 = and i32 %t134, 1920
  %icmpA = icmp ne i32 %andtmp135, 0
  %oror136 = or i1 %eq129, %icmpA
  store i1 %oror136, i1* %oror, align 1
  br label %cond_jump_end131

cond_jump_end131:                                 ; preds = %cond_jump_then130, %cond_end124
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then137, label %cond_end138

cond_jump_then137:                                ; preds = %cond_jump_end131
  %v139 = load i32, i32* %v, align 4
  %fun_result140 = call i8* @get_tok_str(i32 %v139, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([22 x i8]* @141 to i8*), i8* %fun_result140)
  br label %cond_end138

cond_end138:                                      ; preds = %cond_jump_then137, %cond_jump_end131
  br label %cond_end111

cond_jump_then143:                                ; preds = %cond_end111
  call void @next()
  %fun_result145 = call i32 @expr_const()
  store i32 %fun_result145, i32* %bit_size, align 4
  %bit_size146 = load i32, i32* %bit_size, align 4
  %le147 = icmp slt i32 %bit_size146, 0
  br i1 %le147, label %cond_jump_then148, label %cond_end149

cond_end144:                                      ; preds = %cond_end162, %cond_end111
  %type1165 = load %CType, %CType* %type13, align 8
  %align166 = load i32, i32* %align, align 4
  %fun_result167 = call i32 @type_size(%CType* %type13, i32* %align)
  store i32 %fun_result167, i32* %size, align 4
  %ad168 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV169 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 0
  %aligned = load i32, i32* %fieldVVV169, align 4
  %icmpA170 = icmp ne i32 %aligned, 0
  br i1 %icmpA170, label %cond_jump_then171, label %cond_jump_elif0

cond_jump_then148:                                ; preds = %cond_jump_then143
  %v150 = load i32, i32* %v, align 4
  %fun_result151 = call i8* @get_tok_str(i32 %v150, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([33 x i8]* @142 to i8*), i8* %fun_result151)
  br label %cond_end149

cond_end149:                                      ; preds = %cond_jump_then148, %cond_jump_then143
  %v153 = load i32, i32* %v, align 4
  %icmpA154 = icmp ne i32 %v153, 0
  store i1 %icmpA154, i1* %andand152, align 1
  br i1 %icmpA154, label %cond_jump_then155, label %cond_jump_end156

cond_jump_then155:                                ; preds = %cond_end149
  %bit_size157 = load i32, i32* %bit_size, align 4
  %eq158 = icmp eq i32 %bit_size157, 0
  %andand159 = and i1 %icmpA154, %eq158
  store i1 %andand159, i1* %andand152, align 1
  br label %cond_jump_end156

cond_jump_end156:                                 ; preds = %cond_jump_then155, %cond_end149
  %andand_result_value160 = load i1, i1* %andand152, align 1
  br i1 %andand_result_value160, label %cond_jump_then161, label %cond_end162

cond_jump_then161:                                ; preds = %cond_jump_end156
  %v163 = load i32, i32* %v, align 4
  %fun_result164 = call i8* @get_tok_str(i32 %v163, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([30 x i8]* @143 to i8*), i8* %fun_result164)
  br label %cond_end162

cond_end162:                                      ; preds = %cond_jump_then161, %cond_jump_end156
  br label %cond_end144

cond_jump_then171:                                ; preds = %cond_end144
  %align173 = load i32, i32* %align, align 4
  %ad174 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV175 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 0
  %aligned176 = load i32, i32* %fieldVVV175, align 4
  %le177 = icmp slt i32 %align173, %aligned176
  br i1 %le177, label %cond_jump_then178, label %cond_end179

cond_jump_elif0:                                  ; preds = %cond_end144
  %ad183 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV184 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 1
  %packed = load i32, i32* %fieldVVV184, align 4
  %icmpA185 = icmp ne i32 %packed, 0
  br i1 %icmpA185, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  store i32 1, i32* %align, align 4
  br label %cond_end172

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL186 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 55
  %pack_stack_ptr = load i32*, i32** %fieldLLL186, align 8
  %derefference_valueB = load i32, i32* %pack_stack_ptr, align 4
  %icmpA187 = icmp ne i32 %derefference_valueB, 0
  br i1 %icmpA187, label %cond_jump_elif_then1, label %cond_end172

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %align188 = load i32, i32* %align, align 4
  %tcc_state189 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL190 = getelementptr inbounds %TCCState, %TCCState* %tcc_state189, i32 0, i32 55
  %pack_stack_ptr191 = load i32*, i32** %fieldLLL190, align 8
  %derefference_valueB192 = load i32, i32* %pack_stack_ptr191, align 4
  %gt = icmp sgt i32 %align188, %derefference_valueB192
  br i1 %gt, label %cond_jump_then193, label %cond_end194

cond_end172:                                      ; preds = %cond_end194, %cond_jump_elif1, %cond_jump_elif_then0, %cond_end179
  store i32 0, i32* %lbit_pos, align 4
  %bit_size199 = load i32, i32* %bit_size, align 4
  %gteq_signed = icmp sge i32 %bit_size199, 0
  br i1 %gteq_signed, label %cond_jump_then200, label %cond_else_block201

cond_jump_then178:                                ; preds = %cond_jump_then171
  %ad180 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fieldVVV181 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad, i32 0, i32 0
  %aligned182 = load i32, i32* %fieldVVV181, align 4
  store i32 %aligned182, i32* %align, align 4
  br label %cond_end179

cond_end179:                                      ; preds = %cond_jump_then178, %cond_jump_then171
  br label %cond_end172

cond_jump_then193:                                ; preds = %cond_jump_elif_then1
  %tcc_state195 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL196 = getelementptr inbounds %TCCState, %TCCState* %tcc_state195, i32 0, i32 55
  %pack_stack_ptr197 = load i32*, i32** %fieldLLL196, align 8
  %derefference_valueB198 = load i32, i32* %pack_stack_ptr197, align 4
  store i32 %derefference_valueB198, i32* %align, align 4
  br label %cond_end194

cond_end194:                                      ; preds = %cond_jump_then193, %cond_jump_elif_then1
  br label %cond_end172

cond_jump_then200:                                ; preds = %cond_end172
  %type1203 = load %CType, %CType* %type13, align 8
  %fieldVVV204 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t205 = load i32, i32* %fieldVVV204, align 4
  %andtmp206 = and i32 %t205, 15
  store i32 %andtmp206, i32* %bt, align 4
  %bt212 = load i32, i32* %bt, align 4
  %not_eq213 = icmp ne i32 %bt212, 0
  store i1 %not_eq213, i1* %andand211, align 1
  br i1 %not_eq213, label %cond_jump_then214, label %cond_jump_end215

cond_else_block201:                               ; preds = %cond_end172
  store i32 0, i32* %bit_pos, align 4
  br label %cond_end202

cond_end202:                                      ; preds = %cond_else_block201, %cond_end256
  %v305 = load i32, i32* %v, align 4
  %not_eq306 = icmp ne i32 %v305, 0
  store i1 %not_eq306, i1* %oror304, align 1
  br i1 %not_eq306, label %cond_jump_end308, label %cond_jump_then307

cond_jump_then214:                                ; preds = %cond_jump_then200
  %bt216 = load i32, i32* %bt, align 4
  %not_eq217 = icmp ne i32 %bt216, 1
  %andand218 = and i1 %not_eq213, %not_eq217
  store i1 %andand218, i1* %andand211, align 1
  br label %cond_jump_end215

cond_jump_end215:                                 ; preds = %cond_jump_then214, %cond_jump_then200
  %andand_result_value219 = load i1, i1* %andand211, align 1
  store i1 %andand_result_value219, i1* %andand210, align 1
  br i1 %andand_result_value219, label %cond_jump_then220, label %cond_jump_end221

cond_jump_then220:                                ; preds = %cond_jump_end215
  %bt222 = load i32, i32* %bt, align 4
  %not_eq223 = icmp ne i32 %bt222, 2
  %andand224 = and i1 %andand_result_value219, %not_eq223
  store i1 %andand224, i1* %andand210, align 1
  br label %cond_jump_end221

cond_jump_end221:                                 ; preds = %cond_jump_then220, %cond_jump_end215
  %andand_result_value225 = load i1, i1* %andand210, align 1
  store i1 %andand_result_value225, i1* %andand209, align 1
  br i1 %andand_result_value225, label %cond_jump_then226, label %cond_jump_end227

cond_jump_then226:                                ; preds = %cond_jump_end221
  %bt228 = load i32, i32* %bt, align 4
  %not_eq229 = icmp ne i32 %bt228, 11
  %andand230 = and i1 %andand_result_value225, %not_eq229
  store i1 %andand230, i1* %andand209, align 1
  br label %cond_jump_end227

cond_jump_end227:                                 ; preds = %cond_jump_then226, %cond_jump_end221
  %andand_result_value231 = load i1, i1* %andand209, align 1
  store i1 %andand_result_value231, i1* %andand208, align 1
  br i1 %andand_result_value231, label %cond_jump_then232, label %cond_jump_end233

cond_jump_then232:                                ; preds = %cond_jump_end227
  %bt234 = load i32, i32* %bt, align 4
  %not_eq235 = icmp ne i32 %bt234, 5
  %andand236 = and i1 %andand_result_value231, %not_eq235
  store i1 %andand236, i1* %andand208, align 1
  br label %cond_jump_end233

cond_jump_end233:                                 ; preds = %cond_jump_then232, %cond_jump_end227
  %andand_result_value237 = load i1, i1* %andand208, align 1
  store i1 %andand_result_value237, i1* %andand207, align 1
  br i1 %andand_result_value237, label %cond_jump_then238, label %cond_jump_end239

cond_jump_then238:                                ; preds = %cond_jump_end233
  %bt240 = load i32, i32* %bt, align 4
  %not_eq241 = icmp ne i32 %bt240, 12
  %andand242 = and i1 %andand_result_value237, %not_eq241
  store i1 %andand242, i1* %andand207, align 1
  br label %cond_jump_end239

cond_jump_end239:                                 ; preds = %cond_jump_then238, %cond_jump_end233
  %andand_result_value243 = load i1, i1* %andand207, align 1
  br i1 %andand_result_value243, label %cond_jump_then244, label %cond_end245

cond_jump_then244:                                ; preds = %cond_jump_end239
  call void (i8*, ...) @error(i8* bitcast ([32 x i8]* @144 to i8*))
  br label %cond_end245

cond_end245:                                      ; preds = %cond_jump_then244, %cond_jump_end239
  %size246 = load i32, i32* %size, align 4
  %mul = mul i32 %size246, 8
  store i32 %mul, i32* %bsize, align 4
  %bit_size247 = load i32, i32* %bit_size, align 4
  %bsize248 = load i32, i32* %bsize, align 4
  %gt249 = icmp sgt i32 %bit_size247, %bsize248
  br i1 %gt249, label %cond_jump_then250, label %cond_jump_elif0251

cond_jump_then250:                                ; preds = %cond_end245
  %v257 = load i32, i32* %v, align 4
  %fun_result258 = call i8* @get_tok_str(i32 %v257, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([31 x i8]* @145 to i8*), i8* %fun_result258)
  br label %cond_end256

cond_jump_elif0251:                               ; preds = %cond_end245
  %bit_size259 = load i32, i32* %bit_size, align 4
  %bsize260 = load i32, i32* %bsize, align 4
  %eq261 = icmp eq i32 %bit_size259, %bsize260
  br i1 %eq261, label %cond_jump_elif_then0252, label %cond_jump_elif1253

cond_jump_elif_then0252:                          ; preds = %cond_jump_elif0251
  store i32 0, i32* %bit_pos, align 4
  br label %cond_end256

cond_jump_elif1253:                               ; preds = %cond_jump_elif0251
  %bit_size262 = load i32, i32* %bit_size, align 4
  %eq263 = icmp eq i32 %bit_size262, 0
  br i1 %eq263, label %cond_jump_elif_then1254, label %cond_else_block255

cond_jump_elif_then1254:                          ; preds = %cond_jump_elif1253
  store i32 0, i32* %bit_pos, align 4
  br label %cond_end256

cond_else_block255:                               ; preds = %cond_jump_elif1253
  %bit_pos266 = load i32, i32* %bit_pos, align 4
  %bit_size267 = load i32, i32* %bit_size, align 4
  %add268 = add i32 %bit_pos266, %bit_size267
  %bsize269 = load i32, i32* %bsize, align 4
  %gt270 = icmp sgt i32 %add268, %bsize269
  store i1 %gt270, i1* %oror265, align 1
  br i1 %gt270, label %cond_jump_end272, label %cond_jump_then271

cond_end256:                                      ; preds = %cond_end285, %cond_jump_elif_then1254, %cond_jump_elif_then0252, %cond_jump_then250
  %bt303 = load i32, i32* %bt, align 4
  store i32 %bt303, i32* %prevbt, align 4
  br label %cond_end202

cond_jump_then271:                                ; preds = %cond_else_block255
  %bt273 = load i32, i32* %bt, align 4
  %prevbt274 = load i32, i32* %prevbt, align 4
  %not_eq275 = icmp ne i32 %bt273, %prevbt274
  %oror276 = or i1 %gt270, %not_eq275
  store i1 %oror276, i1* %oror265, align 1
  br label %cond_jump_end272

cond_jump_end272:                                 ; preds = %cond_jump_then271, %cond_else_block255
  %oror_result_value277 = load i1, i1* %oror265, align 1
  store i1 %oror_result_value277, i1* %oror264, align 1
  br i1 %oror_result_value277, label %cond_jump_end279, label %cond_jump_then278

cond_jump_then278:                                ; preds = %cond_jump_end272
  %a280 = load i32, i32* %a, align 4
  %eq281 = icmp eq i32 %a280, 297
  %oror282 = or i1 %oror_result_value277, %eq281
  store i1 %oror282, i1* %oror264, align 1
  br label %cond_jump_end279

cond_jump_end279:                                 ; preds = %cond_jump_then278, %cond_jump_end272
  %oror_result_value283 = load i1, i1* %oror264, align 1
  br i1 %oror_result_value283, label %cond_jump_then284, label %cond_end285

cond_jump_then284:                                ; preds = %cond_jump_end279
  store i32 0, i32* %bit_pos, align 4
  br label %cond_end285

cond_end285:                                      ; preds = %cond_jump_then284, %cond_jump_end279
  %bit_pos286 = load i32, i32* %bit_pos, align 4
  store i32 %bit_pos286, i32* %lbit_pos, align 4
  %type1287 = load %CType, %CType* %type13, align 8
  %type1288 = load %CType, %CType* %type13, align 8
  %fieldVVV289 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t290 = load i32, i32* %fieldVVV289, align 4
  %bit_pos291 = load i32, i32* %bit_pos, align 4
  %lshifttmp = shl i32 %bit_pos291, 16
  %ortmp292 = or i32 64, %lshifttmp
  %bit_size293 = load i32, i32* %bit_size, align 4
  %lshifttmp294 = shl i32 %bit_size293, 22
  %ortmp295 = or i32 %ortmp292, %lshifttmp294
  %ortmp296 = or i32 %t290, %ortmp295
  %fieldTTT297 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  store i32 %ortmp296, i32* %fieldTTT297, align 4
  %bit_pos298 = load i32, i32* %bit_pos, align 4
  %bit_size299 = load i32, i32* %bit_size, align 4
  %add300 = add i32 %bit_pos298, %bit_size299
  store i32 %add300, i32* %bit_pos, align 4
  %bit_size301 = load i32, i32* %bit_size, align 4
  %sub302 = sub i32 %add300, %bit_size301
  br label %cond_end256

cond_jump_then307:                                ; preds = %cond_end202
  %type1309 = load %CType, %CType* %type13, align 8
  %fieldVVV310 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t311 = load i32, i32* %fieldVVV310, align 4
  %andtmp312 = and i32 %t311, 15
  %eq313 = icmp eq i32 %andtmp312, 7
  %oror314 = or i1 %not_eq306, %eq313
  store i1 %oror314, i1* %oror304, align 1
  br label %cond_jump_end308

cond_jump_end308:                                 ; preds = %cond_jump_then307, %cond_end202
  %oror_result_value315 = load i1, i1* %oror304, align 1
  br i1 %oror_result_value315, label %cond_jump_then316, label %cond_end317

cond_jump_then316:                                ; preds = %cond_jump_end308
  %lbit_pos318 = load i32, i32* %lbit_pos, align 4
  %eq319 = icmp eq i32 %lbit_pos318, 0
  br i1 %eq319, label %cond_jump_then320, label %cond_end321

cond_end317:                                      ; preds = %cond_end321, %cond_jump_end308
  %v357 = load i32, i32* %v, align 4
  %eq358 = icmp eq i32 %v357, 0
  store i1 %eq358, i1* %andand356, align 1
  br i1 %eq358, label %cond_jump_then359, label %cond_jump_end360

cond_jump_then320:                                ; preds = %cond_jump_then316
  %a322 = load i32, i32* %a, align 4
  %eq323 = icmp eq i32 %a322, 296
  br i1 %eq323, label %cond_jump_then324, label %cond_else_block325

cond_end321:                                      ; preds = %cond_end354, %cond_jump_then316
  br label %cond_end317

cond_jump_then324:                                ; preds = %cond_jump_then320
  %c327 = load i32, i32* %c, align 4
  %align328 = load i32, i32* %align, align 4
  %add329 = add i32 %c327, %align328
  %sub330 = sub i32 %add329, 1
  %align331 = load i32, i32* %align, align 4
  %sub332 = sub i32 0, %align331
  %andtmp333 = and i32 %sub330, %sub332
  store i32 %andtmp333, i32* %c, align 4
  %c334 = load i32, i32* %c, align 4
  store i32 %c334, i32* %offset, align 4
  %size335 = load i32, i32* %size, align 4
  %gt336 = icmp sgt i32 %size335, 0
  br i1 %gt336, label %cond_jump_then337, label %cond_end338

cond_else_block325:                               ; preds = %cond_jump_then320
  store i32 0, i32* %offset, align 4
  %size344 = load i32, i32* %size, align 4
  %c345 = load i32, i32* %c, align 4
  %gt346 = icmp sgt i32 %size344, %c345
  br i1 %gt346, label %cond_jump_then347, label %cond_end348

cond_end326:                                      ; preds = %cond_end348, %cond_end338
  %align350 = load i32, i32* %align, align 4
  %maxalign351 = load i32, i32* %maxalign, align 4
  %gt352 = icmp sgt i32 %align350, %maxalign351
  br i1 %gt352, label %cond_jump_then353, label %cond_end354

cond_jump_then337:                                ; preds = %cond_jump_then324
  %c339 = load i32, i32* %c, align 4
  %size340 = load i32, i32* %size, align 4
  %add341 = add i32 %c339, %size340
  store i32 %add341, i32* %c, align 4
  %size342 = load i32, i32* %size, align 4
  %sub343 = sub i32 %add341, %size342
  br label %cond_end338

cond_end338:                                      ; preds = %cond_jump_then337, %cond_jump_then324
  br label %cond_end326

cond_jump_then347:                                ; preds = %cond_else_block325
  %size349 = load i32, i32* %size, align 4
  store i32 %size349, i32* %c, align 4
  br label %cond_end348

cond_end348:                                      ; preds = %cond_jump_then347, %cond_else_block325
  br label %cond_end326

cond_jump_then353:                                ; preds = %cond_end326
  %align355 = load i32, i32* %align, align 4
  store i32 %align355, i32* %maxalign, align 4
  br label %cond_end354

cond_end354:                                      ; preds = %cond_jump_then353, %cond_end326
  br label %cond_end321

cond_jump_then359:                                ; preds = %cond_end317
  %type1361 = load %CType, %CType* %type13, align 8
  %fieldVVV362 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 0
  %t363 = load i32, i32* %fieldVVV362, align 4
  %andtmp364 = and i32 %t363, 15
  %eq365 = icmp eq i32 %andtmp364, 7
  %andand366 = and i1 %eq358, %eq365
  store i1 %andand366, i1* %andand356, align 1
  br label %cond_jump_end360

cond_jump_end360:                                 ; preds = %cond_jump_then359, %cond_end317
  %andand_result_value367 = load i1, i1* %andand356, align 1
  br i1 %andand_result_value367, label %cond_jump_then368, label %cond_jump_elif0369

cond_jump_then368:                                ; preds = %cond_jump_end360
  %type1372 = load %CType, %CType* %type13, align 8
  %fieldVVV373 = getelementptr inbounds %CType, %CType* %type13, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV373, align 8
  store %Sym* %ref, %Sym** %ass, align 8
  br label %loop_top_block374

cond_jump_elif0369:                               ; preds = %cond_jump_end360
  %v398 = load i32, i32* %v, align 4
  %icmpA399 = icmp ne i32 %v398, 0
  br i1 %icmpA399, label %cond_jump_elif_then0370, label %cond_end371

cond_jump_elif_then0370:                          ; preds = %cond_jump_elif0369
  %v400 = load i32, i32* %v, align 4
  %ortmp401 = or i32 %v400, 536870912
  %type1402 = load %CType, %CType* %type13, align 8
  %offset403 = load i32, i32* %offset, align 4
  %fun_result404 = call %Sym* @sym_push(i32 %ortmp401, %CType* %type13, i32 0, i32 %offset403)
  store %Sym* %fun_result404, %Sym** %ss, align 8
  %ps405 = load %Sym**, %Sym*** %ps, align 8
  %ss406 = load %Sym*, %Sym** %ss, align 8
  store %Sym* %ss406, %Sym** %ps405, align 8
  %ss407 = load %Sym*, %Sym** %ss, align 8
  %fieldLLL408 = getelementptr inbounds %Sym, %Sym* %ss407, i32 0, i32 4
  %next409 = load %Sym*, %Sym** %fieldLLL408, align 8
  store %Sym** %fieldLLL408, %Sym*** %ps, align 8
  br label %cond_end371

cond_end371:                                      ; preds = %cond_jump_elif_then0370, %cond_jump_elif0369, %cond_end_block380
  %tok411 = load i32, i32* @tok, align 4
  %eq412 = icmp eq i32 %tok411, 59
  store i1 %eq412, i1* %oror410, align 1
  br i1 %eq412, label %cond_jump_end414, label %cond_jump_then413

loop_top_block374:                                ; preds = %cond_then_block379, %cond_jump_then368
  %ass375 = load %Sym*, %Sym** %ass, align 8
  %fieldLLL376 = getelementptr inbounds %Sym, %Sym* %ass375, i32 0, i32 4
  %next377 = load %Sym*, %Sym** %fieldLLL376, align 8
  store %Sym* %next377, %Sym** %ass, align 8
  %not_eq378 = icmp ne %Sym* %next377, null
  br i1 %not_eq378, label %cond_then_block379, label %cond_end_block380

cond_then_block379:                               ; preds = %loop_top_block374
  %ass381 = load %Sym*, %Sym** %ass, align 8
  %fieldLLL382 = getelementptr inbounds %Sym, %Sym* %ass381, i32 0, i32 0
  %v383 = load i32, i32* %fieldLLL382, align 4
  %ass384 = load %Sym*, %Sym** %ass, align 8
  %fieldLLL385 = getelementptr inbounds %Sym, %Sym* %ass384, i32 0, i32 3
  %type386 = load %CType, %CType* %fieldLLL385, align 8
  %offset387 = load i32, i32* %offset, align 4
  %ass388 = load %Sym*, %Sym** %ass, align 8
  %fieldLLL389 = getelementptr inbounds %Sym, %Sym* %ass388, i32 0, i32 2
  %c390 = load i64, i64* %fieldLLL389, align 4
  %icastD = sext i32 %offset387 to i64
  %add391 = add i64 %icastD, %c390
  %icastM = trunc i64 %add391 to i32
  %fun_result392 = call %Sym* @sym_push(i32 %v383, %CType* %fieldLLL385, i32 0, i32 %icastM)
  store %Sym* %fun_result392, %Sym** %ss, align 8
  %ps393 = load %Sym**, %Sym*** %ps, align 8
  %ss394 = load %Sym*, %Sym** %ss, align 8
  store %Sym* %ss394, %Sym** %ps393, align 8
  %ss395 = load %Sym*, %Sym** %ss, align 8
  %fieldLLL396 = getelementptr inbounds %Sym, %Sym* %ss395, i32 0, i32 4
  %next397 = load %Sym*, %Sym** %fieldLLL396, align 8
  store %Sym** %fieldLLL396, %Sym*** %ps, align 8
  br label %loop_top_block374

cond_end_block380:                                ; preds = %loop_top_block374
  br label %cond_end371

cond_jump_then413:                                ; preds = %cond_end371
  %tok415 = load i32, i32* @tok, align 4
  %eq416 = icmp eq i32 %tok415, -1
  %oror417 = or i1 %eq412, %eq416
  store i1 %oror417, i1* %oror410, align 1
  br label %cond_jump_end414

cond_jump_end414:                                 ; preds = %cond_jump_then413, %cond_end371
  %oror_result_value418 = load i1, i1* %oror410, align 1
  br i1 %oror_result_value418, label %cond_jump_then419, label %cond_end420

cond_jump_then419:                                ; preds = %cond_jump_end414
  br label %cond_end_block106

cond_end420:                                      ; preds = %after_break421, %cond_jump_end414
  call void @skip(i32 44)
  br label %loop_top_block104

after_break421:                                   ; No predecessors!
  br label %cond_end420
}

define internal void @post_type(%CType* %0, %AttributeDef* %1) {
entry:
  %andand87 = alloca i1, align 1
  %andand = alloca i1, align 1
  %pt = alloca %CType, align 8
  %castXXXX3 = bitcast %CType* %pt to i8*
  %2 = call i8* @memset(i8* %castXXXX3, i32 0, i64 16)
  %ad1 = alloca %AttributeDef, align 8
  %castXXXX = bitcast %AttributeDef* %ad1 to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %first = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %plast = alloca %Sym**, align 8
  %align = alloca i32, align 4
  %arg_size = alloca i32, align 4
  %t1 = alloca i32, align 4
  %l = alloca i32, align 4
  %n = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %ad = alloca %AttributeDef*, align 8
  %ad2 = alloca %AttributeDef**, align 8
  store %AttributeDef* %1, %AttributeDef** %ad, align 8
  store %AttributeDef** %ad, %AttributeDef*** %ad2, align 8
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 40
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_jump_then:                                   ; preds = %entry
  call void @next()
  store i32 0, i32* %l, align 4
  store %Sym* null, %Sym** %first, align 8
  %first4 = load %Sym*, %Sym** %first, align 8
  store %Sym** %first, %Sym*** %plast, align 8
  store i32 0, i32* %arg_size, align 4
  %tok5 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok5, 41
  br i1 %not_eq, label %cond_jump_then6, label %cond_end7

cond_jump_elif0:                                  ; preds = %entry
  %tok135 = load i32, i32* @tok, align 4
  %eq136 = icmp eq i32 %tok135, 91
  br i1 %eq136, label %cond_jump_elif_then0, label %cond_end

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @next()
  %tok137 = load i32, i32* @tok, align 4
  %eq138 = icmp eq i32 %tok137, 288
  br i1 %eq138, label %cond_jump_then139, label %cond_end140

cond_end:                                         ; preds = %cond_end144, %cond_jump_elif0, %cond_end102
  ret void

cond_jump_then6:                                  ; preds = %cond_jump_then
  br label %loop_top_block

cond_end7:                                        ; preds = %cond_end_block, %cond_jump_then
  %l99 = load i32, i32* %l, align 4
  %eq100 = icmp eq i32 %l99, 0
  br i1 %eq100, label %cond_jump_then101, label %cond_end102

loop_continue_top_block:                          ; preds = %cond_end97
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then6
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %l8 = load i32, i32* %l, align 4
  %not_eq9 = icmp ne i32 %l8, 2
  br i1 %not_eq9, label %cond_jump_then10, label %cond_else_block

cond_end_block:                                   ; preds = %cond_jump_then96, %cond_jump_then84, %cond_jump_then27, %loop_top_block
  br label %cond_end7

cond_jump_then10:                                 ; preds = %cond_then_block
  %pt12 = load %CType, %CType* %pt, align 8
  %ad113 = load %AttributeDef, %AttributeDef* %ad1, align 8
  %fun_result = call i32 @parse_btype(%CType* %pt, %AttributeDef* %ad1)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then14, label %cond_end15

cond_else_block:                                  ; preds = %cond_then_block
  br label %post_type.old_proto

cond_end11:                                       ; preds = %cond_end53, %cond_end38
  %pt55 = load %CType, %CType* %pt, align 8
  store i32 2716, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.125, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %convert_parameter_type

cond_jump_then14:                                 ; preds = %cond_jump_then10
  %l16 = load i32, i32* %l, align 4
  %icmpA17 = icmp ne i32 %l16, 0
  br i1 %icmpA17, label %cond_jump_then18, label %cond_else_block19

cond_end15:                                       ; preds = %cond_end20, %cond_jump_then10
  store i32 1, i32* %l, align 4
  %pt21 = load %CType, %CType* %pt, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %pt, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eq22 = icmp eq i32 %andtmp, 3
  store i1 %eq22, i1* %andand, align 1
  br i1 %eq22, label %cond_jump_then23, label %cond_jump_end

cond_jump_then18:                                 ; preds = %cond_jump_then14
  call void (i8*, ...) @error(i8* bitcast ([13 x i8]* @148 to i8*))
  br label %cond_end20

cond_else_block19:                                ; preds = %cond_jump_then14
  store i32 2, i32* %l, align 4
  br label %post_type.old_proto
  br label %cond_end20

cond_end20:                                       ; preds = %cond_else_block19, %cond_jump_then18
  br label %cond_end15

post_type.old_proto:                              ; preds = %cond_else_block, %cond_else_block19
  %tok50 = load i32, i32* @tok, align 4
  store i32 %tok50, i32* %n, align 4
  %n51 = load i32, i32* %n, align 4
  %le = icmp slt i32 %n51, 313
  br i1 %le, label %cond_jump_then52, label %cond_end53

cond_jump_then23:                                 ; preds = %cond_end15
  %tok24 = load i32, i32* @tok, align 4
  %eq25 = icmp eq i32 %tok24, 41
  %andand26 = and i1 %eq22, %eq25
  store i1 %andand26, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then23, %cond_end15
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then27, label %cond_end28

cond_jump_then27:                                 ; preds = %cond_jump_end
  br label %cond_end_block

cond_end28:                                       ; preds = %after_break, %cond_jump_end
  %pt29 = load %CType, %CType* %pt, align 8
  %ad130 = load %AttributeDef, %AttributeDef* %ad1, align 8
  %n31 = load i32, i32* %n, align 4
  call void @type_decl(%CType* %pt, %AttributeDef* %ad1, i32* %n, i32 3)
  %pt32 = load %CType, %CType* %pt, align 8
  %fieldVVV33 = getelementptr inbounds %CType, %CType* %pt, i32 0, i32 0
  %t34 = load i32, i32* %fieldVVV33, align 4
  %andtmp35 = and i32 %t34, 15
  %eq36 = icmp eq i32 %andtmp35, 3
  br i1 %eq36, label %cond_jump_then37, label %cond_end38

after_break:                                      ; No predecessors!
  br label %cond_end28

cond_jump_then37:                                 ; preds = %cond_end28
  call void (i8*, ...) @error(i8* bitcast ([27 x i8]* @149 to i8*))
  br label %cond_end38

cond_end38:                                       ; preds = %cond_jump_then37, %cond_end28
  %arg_size39 = load i32, i32* %arg_size, align 4
  %pt40 = load %CType, %CType* %pt, align 8
  %align41 = load i32, i32* %align, align 4
  %fun_result42 = call i32 @type_size(%CType* %pt, i32* %align)
  %add = add i32 %fun_result42, 3
  %andtmp43 = and i32 %add, -4
  %add44 = add i32 %arg_size39, %andtmp43
  store i32 %add44, i32* %arg_size, align 4
  %pt45 = load %CType, %CType* %pt, align 8
  %align46 = load i32, i32* %align, align 4
  %fun_result47 = call i32 @type_size(%CType* %pt, i32* %align)
  %add48 = add i32 %fun_result47, 3
  %andtmp49 = and i32 %add48, -4
  %sub = sub i32 %add44, %andtmp49
  br label %cond_end11

cond_jump_then52:                                 ; preds = %post_type.old_proto
  call void @expect(i8* bitcast ([11 x i8]* @150 to i8*))
  br label %cond_end53

cond_end53:                                       ; preds = %cond_jump_then52, %post_type.old_proto
  %pt54 = load %CType, %CType* %pt, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %pt, i32 0, i32 0
  store i32 0, i32* %fieldTTT, align 4
  call void @next()
  br label %cond_end11

convert_parameter_type:                           ; preds = %cond_end11
  %pt56 = alloca %CType*, align 8
  store %CType* %pt, %CType** %pt56, align 8
  %pt57 = load %CType*, %CType** %pt56, align 8
  %pt58 = load %CType*, %CType** %pt56, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %pt58, i32 0, i32 0
  %t59 = load i32, i32* %fieldLLL, align 4
  %andtmp60 = and i32 %t59, -6145
  %fieldTU = getelementptr inbounds %CType, %CType* %pt57, i32 0, i32 0
  store i32 %andtmp60, i32* %fieldTU, align 4
  %pt61 = load %CType*, %CType** %pt56, align 8
  %pt62 = load %CType*, %CType** %pt56, align 8
  %fieldLLL63 = getelementptr inbounds %CType, %CType* %pt62, i32 0, i32 0
  %t64 = load i32, i32* %fieldLLL63, align 4
  %andtmp65 = and i32 %t64, -33
  %fieldTU66 = getelementptr inbounds %CType, %CType* %pt61, i32 0, i32 0
  store i32 %andtmp65, i32* %fieldTU66, align 4
  %pt67 = load %CType*, %CType** %pt56, align 8
  %fieldLLL68 = getelementptr inbounds %CType, %CType* %pt67, i32 0, i32 0
  %t69 = load i32, i32* %fieldLLL68, align 4
  %andtmp70 = and i32 %t69, 15
  %eq71 = icmp eq i32 %andtmp70, 6
  br i1 %eq71, label %cond_jump_then72, label %cond_end73

convert_parameter_type_end:                       ; preds = %cond_end73
  %n75 = load i32, i32* %n, align 4
  %ortmp = or i32 %n75, 536870912
  %pt76 = load %CType, %CType* %pt, align 8
  %fun_result77 = call %Sym* @sym_push(i32 %ortmp, %CType* %pt, i32 0, i32 0)
  store %Sym* %fun_result77, %Sym** %s, align 8
  %plast78 = load %Sym**, %Sym*** %plast, align 8
  %s79 = load %Sym*, %Sym** %s, align 8
  store %Sym* %s79, %Sym** %plast78, align 8
  %s80 = load %Sym*, %Sym** %s, align 8
  %fieldLLL81 = getelementptr inbounds %Sym, %Sym* %s80, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL81, align 8
  store %Sym** %fieldLLL81, %Sym*** %plast, align 8
  %tok82 = load i32, i32* @tok, align 4
  %eq83 = icmp eq i32 %tok82, 41
  br i1 %eq83, label %cond_jump_then84, label %cond_end85

cond_jump_then72:                                 ; preds = %convert_parameter_type
  %pt74 = load %CType*, %CType** %pt56, align 8
  call void @mk_pointer(%CType* %pt74)
  br label %cond_end73

cond_end73:                                       ; preds = %cond_jump_then72, %convert_parameter_type
  br label %convert_parameter_type_end

cond_jump_then84:                                 ; preds = %convert_parameter_type_end
  br label %cond_end_block

cond_end85:                                       ; preds = %after_break86, %convert_parameter_type_end
  call void @skip(i32 44)
  %l88 = load i32, i32* %l, align 4
  %eq89 = icmp eq i32 %l88, 1
  store i1 %eq89, i1* %andand87, align 1
  br i1 %eq89, label %cond_jump_then90, label %cond_jump_end91

after_break86:                                    ; No predecessors!
  br label %cond_end85

cond_jump_then90:                                 ; preds = %cond_end85
  %tok92 = load i32, i32* @tok, align 4
  %eq93 = icmp eq i32 %tok92, 204
  %andand94 = and i1 %eq89, %eq93
  store i1 %andand94, i1* %andand87, align 1
  br label %cond_jump_end91

cond_jump_end91:                                  ; preds = %cond_jump_then90, %cond_end85
  %andand_result_value95 = load i1, i1* %andand87, align 1
  br i1 %andand_result_value95, label %cond_jump_then96, label %cond_end97

cond_jump_then96:                                 ; preds = %cond_jump_end91
  store i32 3, i32* %l, align 4
  call void @next()
  br label %cond_end_block

cond_end97:                                       ; preds = %after_break98, %cond_jump_end91
  br label %loop_continue_top_block

after_break98:                                    ; No predecessors!
  br label %cond_end97

cond_jump_then101:                                ; preds = %cond_end7
  store i32 2, i32* %l, align 4
  br label %cond_end102

cond_end102:                                      ; preds = %cond_jump_then101, %cond_end7
  call void @skip(i32 41)
  %type103 = load %CType*, %CType** %type, align 8
  %fieldLLL104 = getelementptr inbounds %CType, %CType* %type103, i32 0, i32 0
  %t105 = load i32, i32* %fieldLLL104, align 4
  %andtmp106 = and i32 %t105, 1920
  store i32 %andtmp106, i32* %t1, align 4
  %type107 = load %CType*, %CType** %type, align 8
  %type108 = load %CType*, %CType** %type, align 8
  %fieldLLL109 = getelementptr inbounds %CType, %CType* %type108, i32 0, i32 0
  %t110 = load i32, i32* %fieldLLL109, align 4
  %andtmp111 = and i32 %t110, -3969
  %fieldTU112 = getelementptr inbounds %CType, %CType* %type107, i32 0, i32 0
  store i32 %andtmp111, i32* %fieldTU112, align 4
  %type113 = load %CType*, %CType** %type, align 8
  %ad114 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @post_type(%CType* %type113, %AttributeDef* %ad114)
  %ad115 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL116 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad115, i32 0, i32 3
  %func_attr = load i32, i32* %fieldLLL116, align 4
  %castAQ = bitcast i32* %fieldLLL116 to %come_anon123*
  %fieldLLL117 = getelementptr inbounds %come_anon123, %come_anon123* %castAQ, i32 0, i32 1
  %func_args = load i8, i8* %fieldLLL117, align 1
  %arg_size118 = load i32, i32* %arg_size, align 4
  %icastCX = trunc i32 %arg_size118 to i8
  store i8 %icastCX, i8* %fieldLLL117, align 1
  %type119 = load %CType*, %CType** %type, align 8
  %ad120 = load %AttributeDef*, %AttributeDef** %ad, align 8
  %fieldLLL121 = getelementptr inbounds %AttributeDef, %AttributeDef* %ad120, i32 0, i32 3
  %func_attr122 = load i32, i32* %fieldLLL121, align 4
  %l123 = load i32, i32* %l, align 4
  %fun_result124 = call %Sym* @sym_push(i32 536870912, %CType* %type119, i32 %func_attr122, i32 %l123)
  store %Sym* %fun_result124, %Sym** %s, align 8
  %s125 = load %Sym*, %Sym** %s, align 8
  %first126 = load %Sym*, %Sym** %first, align 8
  %fieldTU127 = getelementptr inbounds %Sym, %Sym* %s125, i32 0, i32 4
  store %Sym* %first126, %Sym** %fieldTU127, align 8
  %type128 = load %CType*, %CType** %type, align 8
  %t1129 = load i32, i32* %t1, align 4
  %ortmp130 = or i32 %t1129, 6
  %fieldTU131 = getelementptr inbounds %CType, %CType* %type128, i32 0, i32 0
  store i32 %ortmp130, i32* %fieldTU131, align 4
  %type132 = load %CType*, %CType** %type, align 8
  %s133 = load %Sym*, %Sym** %s, align 8
  %fieldTU134 = getelementptr inbounds %CType, %CType* %type132, i32 0, i32 1
  store %Sym* %s133, %Sym** %fieldTU134, align 8
  br label %cond_end

cond_jump_then139:                                ; preds = %cond_jump_elif_then0
  call void @next()
  br label %cond_end140

cond_end140:                                      ; preds = %cond_jump_then139, %cond_jump_elif_then0
  store i32 -1, i32* %n, align 4
  %tok141 = load i32, i32* @tok, align 4
  %not_eq142 = icmp ne i32 %tok141, 93
  br i1 %not_eq142, label %cond_jump_then143, label %cond_end144

cond_jump_then143:                                ; preds = %cond_end140
  %fun_result145 = call i32 @expr_const()
  store i32 %fun_result145, i32* %n, align 4
  %n146 = load i32, i32* %n, align 4
  %le147 = icmp slt i32 %n146, 0
  br i1 %le147, label %cond_jump_then148, label %cond_end149

cond_end144:                                      ; preds = %cond_end149, %cond_end140
  call void @skip(i32 93)
  %type150 = load %CType*, %CType** %type, align 8
  %fieldLLL151 = getelementptr inbounds %CType, %CType* %type150, i32 0, i32 0
  %t152 = load i32, i32* %fieldLLL151, align 4
  %andtmp153 = and i32 %t152, 1920
  store i32 %andtmp153, i32* %t1, align 4
  %type154 = load %CType*, %CType** %type, align 8
  %type155 = load %CType*, %CType** %type, align 8
  %fieldLLL156 = getelementptr inbounds %CType, %CType* %type155, i32 0, i32 0
  %t157 = load i32, i32* %fieldLLL156, align 4
  %andtmp158 = and i32 %t157, -1921
  %fieldTU159 = getelementptr inbounds %CType, %CType* %type154, i32 0, i32 0
  store i32 %andtmp158, i32* %fieldTU159, align 4
  %type160 = load %CType*, %CType** %type, align 8
  %ad161 = load %AttributeDef*, %AttributeDef** %ad, align 8
  call void @post_type(%CType* %type160, %AttributeDef* %ad161)
  %type162 = load %CType*, %CType** %type, align 8
  %n163 = load i32, i32* %n, align 4
  %fun_result164 = call %Sym* @sym_push(i32 536870912, %CType* %type162, i32 0, i32 %n163)
  store %Sym* %fun_result164, %Sym** %s, align 8
  %type165 = load %CType*, %CType** %type, align 8
  %t1166 = load i32, i32* %t1, align 4
  %ortmp167 = or i32 %t1166, 32
  %ortmp168 = or i32 %ortmp167, 4
  %fieldTU169 = getelementptr inbounds %CType, %CType* %type165, i32 0, i32 0
  store i32 %ortmp168, i32* %fieldTU169, align 4
  %type170 = load %CType*, %CType** %type, align 8
  %s171 = load %Sym*, %Sym** %s, align 8
  %fieldTU172 = getelementptr inbounds %CType, %CType* %type170, i32 0, i32 1
  store %Sym* %s171, %Sym** %fieldTU172, align 8
  br label %cond_end

cond_jump_then148:                                ; preds = %cond_jump_then143
  call void (i8*, ...) @error(i8* bitcast ([19 x i8]* @151 to i8*))
  br label %cond_end149

cond_end149:                                      ; preds = %cond_jump_then148, %cond_jump_then143
  br label %cond_end144
}

define internal void @indir() {
entry:
  %andand27 = alloca i1, align 1
  %andand = alloca i1, align 1
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %not_eq = icmp ne i32 %andtmp, 4
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %vtop1 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL2 = getelementptr inbounds %SValue, %SValue* %vtop1, i32 0, i32 0
  %type3 = load %CType, %CType* %fieldLLL2, align 8
  %fieldVVV4 = getelementptr inbounds %CType, %CType* %fieldLLL2, i32 0, i32 0
  %t5 = load i32, i32* %fieldVVV4, align 4
  %andtmp6 = and i32 %t5, 15
  %eq = icmp eq i32 %andtmp6, 6
  br i1 %eq, label %cond_jump_then7, label %cond_end8

cond_end:                                         ; preds = %cond_end8, %entry
  %vtop9 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL10 = getelementptr inbounds %SValue, %SValue* %vtop9, i32 0, i32 1
  %r = load i16, i16* %fieldLLL10, align 2
  %icastKY = zext i16 %r to i32
  %andtmp11 = and i32 %icastKY, 256
  %icmpA = icmp ne i32 %andtmp11, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then12, label %cond_jump_end

cond_jump_then7:                                  ; preds = %cond_jump_then
  ret void

cond_end8:                                        ; preds = %cond_jump_then
  call void @expect(i8* bitcast ([8 x i8]* @153 to i8*))
  br label %cond_end

cond_jump_then12:                                 ; preds = %cond_end
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  %logical_denial = icmp eq i32 %nocode_wanted, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA13 = icmp ne i32 %castOOOO, 0
  %andand14 = and i1 %icmpA, %icmpA13
  store i1 %andand14, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then12, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then15, label %cond_end16

cond_jump_then15:                                 ; preds = %cond_jump_end
  %fun_result = call i32 @gv(i32 1)
  br label %cond_end16

cond_end16:                                       ; preds = %cond_jump_then15, %cond_jump_end
  %vtop17 = load %SValue*, %SValue** @vtop, align 8
  %vtop18 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL19 = getelementptr inbounds %SValue, %SValue* %vtop18, i32 0, i32 0
  %type20 = load %CType, %CType* %fieldLLL19, align 8
  store i32 2877, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.126, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

pointed_type:                                     ; preds = %cond_end16
  %inline_result_variable = alloca %CType*, align 8
  %type21 = alloca %CType*, align 8
  store %CType* %fieldLLL19, %CType** %type21, align 8
  %type22 = load %CType*, %CType** %type21, align 8
  %fieldLLL23 = getelementptr inbounds %CType, %CType* %type22, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL23, align 8
  %fieldLLL24 = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 3
  %type25 = load %CType, %CType* %fieldLLL24, align 8
  store %CType* %fieldLLL24, %CType** %inline_result_variable, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable26 = load %CType*, %CType** %inline_result_variable, align 8
  %derefference_valueB = load %CType, %CType* %inline_result_variable26, align 8
  %fieldTU = getelementptr inbounds %SValue, %SValue* %vtop17, i32 0, i32 0
  store %CType %derefference_valueB, %CType* %fieldTU, align 8
  %vtop28 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL29 = getelementptr inbounds %SValue, %SValue* %vtop28, i32 0, i32 0
  %type30 = load %CType, %CType* %fieldLLL29, align 8
  %fieldVVV31 = getelementptr inbounds %CType, %CType* %fieldLLL29, i32 0, i32 0
  %t32 = load i32, i32* %fieldVVV31, align 4
  %andtmp33 = and i32 %t32, 32
  %logical_denial34 = icmp eq i32 %andtmp33, 0
  %castOOOO35 = zext i1 %logical_denial34 to i32
  %icmpA36 = icmp ne i32 %castOOOO35, 0
  store i1 %icmpA36, i1* %andand27, align 1
  br i1 %icmpA36, label %cond_jump_then37, label %cond_jump_end38

cond_jump_then37:                                 ; preds = %pointed_type_end
  %vtop39 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL40 = getelementptr inbounds %SValue, %SValue* %vtop39, i32 0, i32 0
  %type41 = load %CType, %CType* %fieldLLL40, align 8
  %fieldVVV42 = getelementptr inbounds %CType, %CType* %fieldLLL40, i32 0, i32 0
  %t43 = load i32, i32* %fieldVVV42, align 4
  %andtmp44 = and i32 %t43, 15
  %not_eq45 = icmp ne i32 %andtmp44, 6
  %andand46 = and i1 %icmpA36, %not_eq45
  store i1 %andand46, i1* %andand27, align 1
  br label %cond_jump_end38

cond_jump_end38:                                  ; preds = %cond_jump_then37, %pointed_type_end
  %andand_result_value47 = load i1, i1* %andand27, align 1
  br i1 %andand_result_value47, label %cond_jump_then48, label %cond_end49

cond_jump_then48:                                 ; preds = %cond_jump_end38
  %vtop50 = load %SValue*, %SValue** @vtop, align 8
  %vtop51 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL52 = getelementptr inbounds %SValue, %SValue* %vtop51, i32 0, i32 1
  %r53 = load i16, i16* %fieldLLL52, align 2
  %vtop54 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL55 = getelementptr inbounds %SValue, %SValue* %vtop54, i32 0, i32 0
  %type56 = load %CType, %CType* %fieldLLL55, align 8
  %fieldVVV57 = getelementptr inbounds %CType, %CType* %fieldLLL55, i32 0, i32 0
  %t58 = load i32, i32* %fieldVVV57, align 4
  %fun_result59 = call i32 @lvalue_type(i32 %t58)
  %icastKY60 = zext i16 %r53 to i32
  %ortmp = or i32 %icastKY60, %fun_result59
  %icastG = trunc i32 %ortmp to i16
  %fieldTU61 = getelementptr inbounds %SValue, %SValue* %vtop50, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU61, align 2
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL62 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 43
  %do_bounds_check = load i32, i32* %fieldLLL62, align 4
  %icmpA63 = icmp ne i32 %do_bounds_check, 0
  br i1 %icmpA63, label %cond_jump_then64, label %cond_end65

cond_end49:                                       ; preds = %cond_end65, %cond_jump_end38
  ret void

cond_jump_then64:                                 ; preds = %cond_jump_then48
  %vtop66 = load %SValue*, %SValue** @vtop, align 8
  %vtop67 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL68 = getelementptr inbounds %SValue, %SValue* %vtop67, i32 0, i32 1
  %r69 = load i16, i16* %fieldLLL68, align 2
  %icastKY70 = zext i16 %r69 to i32
  %ortmp71 = or i32 %icastKY70, 2048
  %icastG72 = trunc i32 %ortmp71 to i16
  %fieldTU73 = getelementptr inbounds %SValue, %SValue* %vtop66, i32 0, i32 1
  store i16 %icastG72, i16* %fieldTU73, align 2
  br label %cond_end65

cond_end65:                                       ; preds = %cond_jump_then64, %cond_jump_then48
  br label %cond_end49
}

define internal void @gfunc_param_typed(%Sym* %0, %Sym* %1) {
entry:
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %type = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %func_type = alloca i32, align 4
  %func = alloca %Sym*, align 8
  %func1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %func, align 8
  store %Sym** %func, %Sym*** %func1, align 8
  %arg = alloca %Sym*, align 8
  %arg2 = alloca %Sym**, align 8
  store %Sym* %1, %Sym** %arg, align 8
  store %Sym** %arg, %Sym*** %arg2, align 8
  %func3 = load %Sym*, %Sym** %func, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %func3, i32 0, i32 2
  %c = load i64, i64* %fieldLLL, align 4
  %icastM = trunc i64 %c to i32
  store i32 %icastM, i32* %func_type, align 4
  %func_type4 = load i32, i32* %func_type, align 4
  %eq = icmp eq i32 %func_type4, 2
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %func_type5 = load i32, i32* %func_type, align 4
  %eq6 = icmp eq i32 %func_type5, 3
  store i1 %eq6, i1* %andand, align 1
  br i1 %eq6, label %cond_jump_then7, label %cond_jump_end8

cond_jump_end:                                    ; preds = %cond_jump_end8, %entry
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then13, label %cond_jump_elif0

cond_jump_then7:                                  ; preds = %cond_jump_then
  %arg9 = load %Sym*, %Sym** %arg, align 8
  %eq10 = icmp eq %Sym* %arg9, null
  %andand11 = and i1 %eq6, %eq10
  store i1 %andand11, i1* %andand, align 1
  br label %cond_jump_end8

cond_jump_end8:                                   ; preds = %cond_jump_then7, %cond_jump_then
  %andand_result_value = load i1, i1* %andand, align 1
  %oror12 = or i1 %eq, %andand_result_value
  store i1 %oror12, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_then13:                                 ; preds = %cond_jump_end
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL14 = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type15 = load %CType, %CType* %fieldLLL14, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL14, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eq16 = icmp eq i32 %andtmp, 8
  br i1 %eq16, label %cond_jump_then17, label %cond_end18

cond_jump_elif0:                                  ; preds = %cond_jump_end
  %arg21 = load %Sym*, %Sym** %arg, align 8
  %eq22 = icmp eq %Sym* %arg21, null
  br i1 %eq22, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void (i8*, ...) @error(i8* bitcast ([31 x i8]* @154 to i8*))
  br label %cond_end

cond_else_block:                                  ; preds = %cond_jump_elif0
  %arg23 = load %Sym*, %Sym** %arg, align 8
  %fieldLLL24 = getelementptr inbounds %Sym, %Sym* %arg23, i32 0, i32 3
  %type25 = load %CType, %CType* %fieldLLL24, align 8
  store %CType %type25, %CType* %type, align 8
  %type26 = load %CType, %CType* %type, align 8
  %type27 = load %CType, %CType* %type, align 8
  %fieldVVV28 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t29 = load i32, i32* %fieldVVV28, align 4
  %andtmp30 = and i32 %t29, -2049
  %fieldTTT31 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %andtmp30, i32* %fieldTTT31, align 4
  %type32 = load %CType, %CType* %type, align 8
  call void @gen_assign_cast(%CType* %type)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_elif_then0, %cond_end18
  ret void

cond_jump_then17:                                 ; preds = %cond_jump_then13
  %type19 = load %CType, %CType* %type, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 9, i32* %fieldTTT, align 4
  %type20 = load %CType, %CType* %type, align 8
  call void @gen_cast(%CType* %type)
  br label %cond_end18

cond_end18:                                       ; preds = %cond_jump_then17, %cond_jump_then13
  br label %cond_end
}

define internal void @parse_type(%CType* %0) {
entry:
  %n = alloca i32, align 4
  %ad = alloca %AttributeDef, align 8
  %castXXXX = bitcast %AttributeDef* %ad to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %type2 = load %CType*, %CType** %type, align 8
  %ad3 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fun_result = call i32 @parse_btype(%CType* %type2, %AttributeDef* %ad)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @expect(i8* bitcast ([5 x i8]* @155 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %type4 = load %CType*, %CType** %type, align 8
  %ad5 = load %AttributeDef, %AttributeDef* %ad, align 8
  %n6 = load i32, i32* %n, align 4
  call void @type_decl(%CType* %type4, %AttributeDef* %ad, i32* %n, i32 1)
  ret void
}

define internal void @vpush_tokc(i32 %0) {
entry:
  %type = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type to i8*
  %1 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %t = alloca i32, align 4
  %t1 = alloca i32*, align 8
  store i32 %0, i32* %t, align 4
  store i32* %t, i32** %t1, align 8
  %type2 = load %CType, %CType* %type, align 8
  %t3 = load i32, i32* %t, align 4
  %fieldTTT = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %t3, i32* %fieldTTT, align 4
  %type4 = load %CType, %CType* %type, align 8
  %tokc = load %CValue, %CValue* @tokc, align 16
  call void @vsetc(%CType* %type, i32 240, %CValue* @tokc)
  ret void
}

define internal void @unary() {
entry:
  %oror730 = alloca i1, align 1
  %oror729 = alloca i1, align 1
  %bt = alloca i32, align 4
  %nb_args = alloca i32, align 4
  %sa = alloca %Sym*, align 8
  %ret = alloca %SValue, align 16
  %castXXXX617 = bitcast %SValue* %ret to i8*
  %0 = call i8* @memset(i8* %castXXXX617, i32 0, i64 64)
  %oror513 = alloca i1, align 1
  %oror = alloca i1, align 1
  %type313 = alloca %CType, align 8
  %castXXXX314 = bitcast %CType* %type313 to i8*
  %1 = call i8* @memset(i8* %castXXXX314, i32 0, i64 16)
  %res = alloca i32, align 4
  %saved_nocode_wanted = alloca i32, align 4
  %type2 = alloca %CType, align 8
  %castXXXX279 = bitcast %CType* %type2 to i8*
  %2 = call i8* @memset(i8* %castXXXX279, i32 0, i64 16)
  %type1 = alloca %CType, align 8
  %castXXXX278 = bitcast %CType* %type1 to i8*
  %3 = call i8* @memset(i8* %castXXXX278, i32 0, i64 16)
  %boolean = alloca %CType, align 8
  %castXXXX189 = bitcast %CType* %boolean to i8*
  %4 = call i8* @memset(i8* %castXXXX189, i32 0, i64 16)
  %andand140 = alloca i1, align 1
  %andand = alloca i1, align 1
  %len = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %ad = alloca %AttributeDef, align 8
  %castXXXX1 = bitcast %AttributeDef* %ad to i8*
  %5 = call i8* @memset(i8* %castXXXX1, i32 0, i64 24)
  %s = alloca %Sym*, align 8
  %type = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type to i8*
  %6 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %r = alloca i32, align 4
  %size = alloca i32, align 4
  %align = alloca i32, align 4
  %t = alloca i32, align 4
  %n = alloca i32, align 4
  br label %unary.tok_next

unary.tok_next:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eqtmp = icmp eq i32 %tok, 291
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

end_blockX:                                       ; preds = %cond_else_blockX414, %cond_end489, %cond_end388, %cond_then_block343, %cond_then_block335, %cond_end323, %cond_then_block298, %cond_then_block275, %cond_end258, %cond_end234, %cond_then_block219, %cond_end188, %cond_end171, %cond_then_block133, %cond_end97, %cond_end71, %cond_then_block36, %cond_then_block29, %cond_then_block25, %cond_then_block21, %cond_then_block17, %cond_then_block13, %cond_then_block9, %cond_then_block2
  br label %loop_top_block

cond_then_block:                                  ; preds = %unary.tok_next
  call void @next()
  br label %unary.tok_next
  br label %cond_then_block2

cond_else_blockX:                                 ; preds = %unary.tok_next
  %eqtmp4 = icmp eq i32 %tok, 179
  br i1 %eqtmp4, label %cond_then_block2, label %cond_else_blockX3
  br label %cond_then_block2

cond_then_block2:                                 ; preds = %cond_else_blockX5, %cond_else_blockX3, %cond_else_blockX3, %cond_else_blockX, %cond_else_blockX, %cond_then_block
  %tokc = load %CValue, %CValue* @tokc, align 16
  %i = load i32, i32* bitcast (%CValue* @tokc to i32*), align 4
  call void @vpushi(i32 %i)
  call void @next()
  br label %end_blockX

cond_else_blockX3:                                ; preds = %cond_else_blockX
  %eqtmp6 = icmp eq i32 %tok, 180
  br i1 %eqtmp6, label %cond_then_block2, label %cond_else_blockX5
  br label %cond_then_block2

cond_else_blockX5:                                ; preds = %cond_else_blockX3
  %eqtmp8 = icmp eq i32 %tok, 183
  br i1 %eqtmp8, label %cond_then_block2, label %cond_else_blockX7

cond_else_blockX7:                                ; preds = %after_break, %cond_else_blockX5
  %eqtmp11 = icmp eq i32 %tok, 200
  br i1 %eqtmp11, label %cond_then_block9, label %cond_else_blockX10

after_break:                                      ; No predecessors!
  br label %cond_else_blockX7
  br label %cond_else_blockX10

cond_then_block9:                                 ; preds = %cond_else_blockX7
  call void @vpush_tokc(i32 16)
  call void @next()
  br label %end_blockX

cond_else_blockX10:                               ; preds = %after_break12, %cond_else_blockX7, %after_break
  %eqtmp15 = icmp eq i32 %tok, 201
  br i1 %eqtmp15, label %cond_then_block13, label %cond_else_blockX14

after_break12:                                    ; No predecessors!
  br label %cond_else_blockX10
  br label %cond_else_blockX14

cond_then_block13:                                ; preds = %cond_else_blockX10
  call void @vpush_tokc(i32 12)
  call void @next()
  br label %end_blockX

cond_else_blockX14:                               ; preds = %after_break16, %cond_else_blockX10, %after_break12
  %eqtmp19 = icmp eq i32 %tok, 202
  br i1 %eqtmp19, label %cond_then_block17, label %cond_else_blockX18

after_break16:                                    ; No predecessors!
  br label %cond_else_blockX14
  br label %cond_else_blockX18

cond_then_block17:                                ; preds = %cond_else_blockX14
  call void @vpush_tokc(i32 28)
  call void @next()
  br label %end_blockX

cond_else_blockX18:                               ; preds = %after_break20, %cond_else_blockX14, %after_break16
  %eqtmp23 = icmp eq i32 %tok, 185
  br i1 %eqtmp23, label %cond_then_block21, label %cond_else_blockX22

after_break20:                                    ; No predecessors!
  br label %cond_else_blockX18
  br label %cond_else_blockX22

cond_then_block21:                                ; preds = %cond_else_blockX18
  call void @vpush_tokc(i32 8)
  call void @next()
  br label %end_blockX

cond_else_blockX22:                               ; preds = %after_break24, %cond_else_blockX18, %after_break20
  %eqtmp27 = icmp eq i32 %tok, 192
  br i1 %eqtmp27, label %cond_then_block25, label %cond_else_blockX26

after_break24:                                    ; No predecessors!
  br label %cond_else_blockX22
  br label %cond_else_blockX26

cond_then_block25:                                ; preds = %cond_else_blockX22
  call void @vpush_tokc(i32 9)
  call void @next()
  br label %end_blockX

cond_else_blockX26:                               ; preds = %after_break28, %cond_else_blockX22, %after_break24
  %eqtmp31 = icmp eq i32 %tok, 193
  br i1 %eqtmp31, label %cond_then_block29, label %cond_else_blockX30

after_break28:                                    ; No predecessors!
  br label %cond_else_blockX26
  br label %cond_else_blockX30

cond_then_block29:                                ; preds = %cond_else_blockX26
  call void @vpush_tokc(i32 10)
  call void @next()
  br label %end_blockX

cond_else_blockX30:                               ; preds = %after_break32, %cond_else_blockX26, %after_break28
  %eqtmp35 = icmp eq i32 %tok, 330
  br i1 %eqtmp35, label %cond_then_block33, label %cond_else_blockX34

after_break32:                                    ; No predecessors!
  br label %cond_else_blockX30
  br label %cond_else_blockX34

cond_then_block33:                                ; preds = %cond_else_blockX30
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %logical_denial = icmp eq i32 %gnu_ext, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_else_blockX34:                               ; preds = %cond_else_blockX30, %after_break32
  %eqtmp38 = icmp eq i32 %tok, 332
  br i1 %eqtmp38, label %cond_then_block36, label %cond_else_blockX37

cond_jump_then:                                   ; preds = %cond_then_block33
  br label %unary.tok_identifier
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block33
  br label %cond_then_block36

unary.tok_identifier:                             ; preds = %cond_then_block413, %cond_jump_then354, %cond_then_block332, %cond_then_block329, %cond_jump_then
  %tok415 = load i32, i32* @tok, align 4
  store i32 %tok415, i32* %t, align 4
  call void @next()
  %t416 = load i32, i32* %t, align 4
  %le417 = icmp slt i32 %t416, 313
  br i1 %le417, label %cond_jump_then418, label %cond_end419

cond_then_block36:                                ; preds = %cond_else_blockX34, %cond_end
  %funcname = load i8*, i8** @funcname, align 8
  %fun_result = call i64 @strlen(i8* %funcname)
  %add = add i64 %fun_result, 1
  %icastM = trunc i64 %add to i32
  store i32 %icastM, i32* %len, align 4
  %type39 = load %CType, %CType* %type, align 8
  %fieldTTT = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 1, i32* %fieldTTT, align 4
  %type40 = load %CType, %CType* %type, align 8
  call void @mk_pointer(%CType* %type)
  %type41 = load %CType, %CType* %type, align 8
  %type42 = load %CType, %CType* %type, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t43 = load i32, i32* %fieldVVV, align 4
  %ortmp = or i32 %t43, 32
  %fieldTTT44 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %ortmp, i32* %fieldTTT44, align 4
  %type45 = load %CType, %CType* %type, align 8
  %fieldVVV46 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldVVV46, align 8
  %len47 = load i32, i32* %len, align 4
  %icastD = sext i32 %len47 to i64
  %fieldTU = getelementptr inbounds %Sym, %Sym* %ref, i32 0, i32 2
  store i64 %icastD, i64* %fieldTU, align 4
  %type48 = load %CType, %CType* %type, align 8
  %data_section = load %Section*, %Section** @data_section, align 8
  %data_section49 = load %Section*, %Section** @data_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %data_section49, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  %len50 = load i32, i32* %len, align 4
  %icastD51 = sext i32 %len50 to i64
  call void @vpush_ref(%CType* %type, %Section* %data_section, i64 %data_offset, i64 %icastD51)
  %data_section52 = load %Section*, %Section** @data_section, align 8
  %len53 = load i32, i32* %len, align 4
  %icastD54 = sext i32 %len53 to i64
  %fun_result55 = call i8* @section_ptr_add(%Section* %data_section52, i64 %icastD54)
  store i8* %fun_result55, i8** %ptr, align 8
  %ptr56 = load i8*, i8** %ptr, align 8
  %funcname57 = load i8*, i8** @funcname, align 8
  %len58 = load i32, i32* %len, align 4
  %icastD59 = sext i32 %len58 to i64
  %fun_result60 = call i8* @memcpy(i8* %ptr56, i8* %funcname57, i64 %icastD59)
  call void @next()
  br label %end_blockX

cond_else_blockX37:                               ; preds = %after_break61, %cond_else_blockX34
  %eqtmp64 = icmp eq i32 %tok, 184
  br i1 %eqtmp64, label %cond_then_block62, label %cond_else_blockX63

after_break61:                                    ; No predecessors!
  br label %cond_else_blockX37
  br label %cond_else_blockX63

cond_then_block62:                                ; preds = %cond_else_blockX37
  store i32 0, i32* %t, align 4
  br label %unary.str_init
  br label %cond_then_block65

cond_else_blockX63:                               ; preds = %cond_else_blockX37, %after_break61
  %eqtmp67 = icmp eq i32 %tok, 181
  br i1 %eqtmp67, label %cond_then_block65, label %cond_else_blockX66

unary.str_init:                                   ; preds = %cond_then_block65, %cond_then_block62
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL68 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 36
  %warn_write_strings = load i32, i32* %fieldLLL68, align 4
  %icmpA69 = icmp ne i32 %warn_write_strings, 0
  br i1 %icmpA69, label %cond_jump_then70, label %cond_end71

cond_then_block65:                                ; preds = %cond_else_blockX63, %cond_then_block62
  store i32 1, i32* %t, align 4
  br label %unary.str_init

cond_else_blockX66:                               ; preds = %after_break88, %cond_else_blockX63
  %eqtmp91 = icmp eq i32 %tok, 40
  br i1 %eqtmp91, label %cond_then_block89, label %cond_else_blockX90

cond_jump_then70:                                 ; preds = %unary.str_init
  %t72 = load i32, i32* %t, align 4
  %ortmp73 = or i32 %t72, 2048
  store i32 %ortmp73, i32* %t, align 4
  br label %cond_end71

cond_end71:                                       ; preds = %cond_jump_then70, %unary.str_init
  %type74 = load %CType, %CType* %type, align 8
  %t75 = load i32, i32* %t, align 4
  %fieldTTT76 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %t75, i32* %fieldTTT76, align 4
  %type77 = load %CType, %CType* %type, align 8
  call void @mk_pointer(%CType* %type)
  %type78 = load %CType, %CType* %type, align 8
  %type79 = load %CType, %CType* %type, align 8
  %fieldVVV80 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t81 = load i32, i32* %fieldVVV80, align 4
  %ortmp82 = or i32 %t81, 32
  %fieldTTT83 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  store i32 %ortmp82, i32* %fieldTTT83, align 4
  %ad84 = load %AttributeDef, %AttributeDef* %ad, align 8
  %castAQ = bitcast %AttributeDef* %ad to i8*
  %fun_result85 = call i8* @memset(i8* %castAQ, i32 0, i64 24)
  %type86 = load %CType, %CType* %type, align 8
  %ad87 = load %AttributeDef, %AttributeDef* %ad, align 8
  call void @decl_initializer_alloc(%CType* %type, %AttributeDef* %ad, i32 240, i32 2, i32 0, i32 0)
  br label %end_blockX

after_break88:                                    ; No predecessors!
  br label %cond_else_blockX66
  br label %cond_else_blockX90

cond_then_block89:                                ; preds = %cond_else_blockX66
  call void @next()
  %type92 = load %CType, %CType* %type, align 8
  %ad93 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fun_result94 = call i32 @parse_btype(%CType* %type, %AttributeDef* %ad)
  %icmpA95 = icmp ne i32 %fun_result94, 0
  br i1 %icmpA95, label %cond_jump_then96, label %cond_jump_elif0

cond_else_blockX90:                               ; preds = %after_break132, %cond_else_blockX66, %after_break88
  %eqtmp135 = icmp eq i32 %tok, 42
  br i1 %eqtmp135, label %cond_then_block133, label %cond_else_blockX134

cond_jump_then96:                                 ; preds = %cond_then_block89
  %type98 = load %CType, %CType* %type, align 8
  %ad99 = load %AttributeDef, %AttributeDef* %ad, align 8
  %n100 = load i32, i32* %n, align 4
  call void @type_decl(%CType* %type, %AttributeDef* %ad, i32* %n, i32 1)
  call void @skip(i32 41)
  %tok101 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok101, 123
  br i1 %eq, label %cond_jump_then102, label %cond_else_block103

cond_jump_elif0:                                  ; preds = %cond_then_block89
  %tok130 = load i32, i32* @tok, align 4
  %eq131 = icmp eq i32 %tok130, 123
  br i1 %eq131, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  call void @save_regs(i32 0)
  call void @block(i32* null, i32* null, i32* null, i32* null, i32 0, i32 1)
  call void @skip(i32 41)
  br label %cond_end97

cond_else_block:                                  ; preds = %cond_jump_elif0
  call void @gexpr()
  call void @skip(i32 41)
  br label %cond_end97

cond_end97:                                       ; preds = %cond_else_block, %cond_jump_elif_then0, %cond_end104
  br label %end_blockX

cond_jump_then102:                                ; preds = %cond_jump_then96
  %global_expr = load i32, i32* @global_expr, align 4
  %icmpA105 = icmp ne i32 %global_expr, 0
  br i1 %icmpA105, label %cond_jump_then106, label %cond_else_block107

cond_else_block103:                               ; preds = %cond_jump_then96
  call void @unary()
  %type129 = load %CType, %CType* %type, align 8
  call void @gen_cast(%CType* %type)
  br label %cond_end104

cond_end104:                                      ; preds = %cond_else_block103, %cond_end116
  br label %cond_end97

cond_jump_then106:                                ; preds = %cond_jump_then102
  store i32 240, i32* %r, align 4
  br label %cond_end108

cond_else_block107:                               ; preds = %cond_jump_then102
  store i32 242, i32* %r, align 4
  br label %cond_end108

cond_end108:                                      ; preds = %cond_else_block107, %cond_jump_then106
  %type109 = load %CType, %CType* %type, align 8
  %fieldVVV110 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t111 = load i32, i32* %fieldVVV110, align 4
  %andtmp = and i32 %t111, 32
  %logical_denial112 = icmp eq i32 %andtmp, 0
  %castOOOO113 = zext i1 %logical_denial112 to i32
  %icmpA114 = icmp ne i32 %castOOOO113, 0
  br i1 %icmpA114, label %cond_jump_then115, label %cond_end116

cond_jump_then115:                                ; preds = %cond_end108
  %r117 = load i32, i32* %r, align 4
  %type118 = load %CType, %CType* %type, align 8
  %fieldVVV119 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t120 = load i32, i32* %fieldVVV119, align 4
  %fun_result121 = call i32 @lvalue_type(i32 %t120)
  %ortmp122 = or i32 %r117, %fun_result121
  store i32 %ortmp122, i32* %r, align 4
  br label %cond_end116

cond_end116:                                      ; preds = %cond_jump_then115, %cond_end108
  %ad123 = load %AttributeDef, %AttributeDef* %ad, align 8
  %castAQ124 = bitcast %AttributeDef* %ad to i8*
  %fun_result125 = call i8* @memset(i8* %castAQ124, i32 0, i64 24)
  %type126 = load %CType, %CType* %type, align 8
  %ad127 = load %AttributeDef, %AttributeDef* %ad, align 8
  %r128 = load i32, i32* %r, align 4
  call void @decl_initializer_alloc(%CType* %type, %AttributeDef* %ad, i32 %r128, i32 1, i32 0, i32 0)
  br label %cond_end104

after_break132:                                   ; No predecessors!
  br label %cond_else_blockX90
  br label %cond_else_blockX134

cond_then_block133:                               ; preds = %cond_else_blockX90
  call void @next()
  call void @unary()
  call void @indir()
  br label %end_blockX

cond_else_blockX134:                              ; preds = %after_break136, %cond_else_blockX90, %after_break132
  %eqtmp139 = icmp eq i32 %tok, 38
  br i1 %eqtmp139, label %cond_then_block137, label %cond_else_blockX138

after_break136:                                   ; No predecessors!
  br label %cond_else_blockX134
  br label %cond_else_blockX138

cond_then_block137:                               ; preds = %cond_else_blockX134
  call void @next()
  call void @unary()
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL141 = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 0
  %type142 = load %CType, %CType* %fieldLLL141, align 8
  %fieldVVV143 = getelementptr inbounds %CType, %CType* %fieldLLL141, i32 0, i32 0
  %t144 = load i32, i32* %fieldVVV143, align 4
  %andtmp145 = and i32 %t144, 15
  %not_eq = icmp ne i32 %andtmp145, 6
  store i1 %not_eq, i1* %andand140, align 1
  br i1 %not_eq, label %cond_jump_then146, label %cond_jump_end

cond_else_blockX138:                              ; preds = %after_break175, %cond_else_blockX134, %after_break136
  %eqtmp178 = icmp eq i32 %tok, 33
  br i1 %eqtmp178, label %cond_then_block176, label %cond_else_blockX177

cond_jump_then146:                                ; preds = %cond_then_block137
  %vtop147 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL148 = getelementptr inbounds %SValue, %SValue* %vtop147, i32 0, i32 0
  %type149 = load %CType, %CType* %fieldLLL148, align 8
  %fieldVVV150 = getelementptr inbounds %CType, %CType* %fieldLLL148, i32 0, i32 0
  %t151 = load i32, i32* %fieldVVV150, align 4
  %andtmp152 = and i32 %t151, 32
  %logical_denial153 = icmp eq i32 %andtmp152, 0
  %castOOOO154 = zext i1 %logical_denial153 to i32
  %icmpA155 = icmp ne i32 %castOOOO154, 0
  %andand156 = and i1 %not_eq, %icmpA155
  store i1 %andand156, i1* %andand140, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then146, %cond_then_block137
  %andand_result_value = load i1, i1* %andand140, align 1
  store i1 %andand_result_value, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then157, label %cond_jump_end158

cond_jump_then157:                                ; preds = %cond_jump_end
  %vtop159 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL160 = getelementptr inbounds %SValue, %SValue* %vtop159, i32 0, i32 0
  %type161 = load %CType, %CType* %fieldLLL160, align 8
  %fieldVVV162 = getelementptr inbounds %CType, %CType* %fieldLLL160, i32 0, i32 0
  %t163 = load i32, i32* %fieldVVV162, align 4
  %andtmp164 = and i32 %t163, 241
  %logical_denial165 = icmp eq i32 %andtmp164, 0
  %castOOOO166 = zext i1 %logical_denial165 to i32
  %icmpA167 = icmp ne i32 %castOOOO166, 0
  %andand168 = and i1 %andand_result_value, %icmpA167
  store i1 %andand168, i1* %andand, align 1
  br label %cond_jump_end158

cond_jump_end158:                                 ; preds = %cond_jump_then157, %cond_jump_end
  %andand_result_value169 = load i1, i1* %andand, align 1
  br i1 %andand_result_value169, label %cond_jump_then170, label %cond_end171

cond_jump_then170:                                ; preds = %cond_jump_end158
  call void @test_lvalue()
  br label %cond_end171

cond_end171:                                      ; preds = %cond_jump_then170, %cond_jump_end158
  %vtop172 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL173 = getelementptr inbounds %SValue, %SValue* %vtop172, i32 0, i32 0
  %type174 = load %CType, %CType* %fieldLLL173, align 8
  call void @mk_pointer(%CType* %fieldLLL173)
  call void @gaddrof()
  br label %end_blockX

after_break175:                                   ; No predecessors!
  br label %cond_else_blockX138
  br label %cond_else_blockX177

cond_then_block176:                               ; preds = %cond_else_blockX138
  call void @next()
  call void @unary()
  %vtop179 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL180 = getelementptr inbounds %SValue, %SValue* %vtop179, i32 0, i32 1
  %r181 = load i16, i16* %fieldLLL180, align 2
  %icastKY = zext i16 %r181 to i32
  %andtmp182 = and i32 %icastKY, 1023
  %eq183 = icmp eq i32 %andtmp182, 240
  br i1 %eq183, label %cond_jump_then184, label %cond_jump_elif0185

cond_else_blockX177:                              ; preds = %after_break218, %cond_else_blockX138, %after_break175
  %eqtmp221 = icmp eq i32 %tok, 126
  br i1 %eqtmp221, label %cond_then_block219, label %cond_else_blockX220

cond_jump_then184:                                ; preds = %cond_then_block176
  %boolean190 = load %CType, %CType* %boolean, align 8
  %fieldTTT191 = getelementptr inbounds %CType, %CType* %boolean, i32 0, i32 0
  store i32 11, i32* %fieldTTT191, align 4
  %boolean192 = load %CType, %CType* %boolean, align 8
  call void @gen_cast(%CType* %boolean)
  %vtop193 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL194 = getelementptr inbounds %SValue, %SValue* %vtop193, i32 0, i32 3
  %c = load %CValue, %CValue* %fieldLLL194, align 16
  %vtop195 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL196 = getelementptr inbounds %SValue, %SValue* %vtop195, i32 0, i32 3
  %c197 = load %CValue, %CValue* %fieldLLL196, align 16
  %ICASTO = bitcast %CValue* %fieldLLL196 to i32*
  %i198 = load i32, i32* %ICASTO, align 4
  %logical_denial199 = icmp eq i32 %i198, 0
  %castOOOO200 = zext i1 %logical_denial199 to i32
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL194, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %castOOOO200, i32* %icastN, align 4
  br label %cond_end188

cond_jump_elif0185:                               ; preds = %cond_then_block176
  %vtop201 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL202 = getelementptr inbounds %SValue, %SValue* %vtop201, i32 0, i32 1
  %r203 = load i16, i16* %fieldLLL202, align 2
  %icastKY204 = zext i16 %r203 to i32
  %andtmp205 = and i32 %icastKY204, 255
  %eq206 = icmp eq i32 %andtmp205, 243
  br i1 %eq206, label %cond_jump_elif_then0186, label %cond_else_block187

cond_jump_elif_then0186:                          ; preds = %cond_jump_elif0185
  %vtop207 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL208 = getelementptr inbounds %SValue, %SValue* %vtop207, i32 0, i32 3
  %c209 = load %CValue, %CValue* %fieldLLL208, align 16
  %vtop210 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL211 = getelementptr inbounds %SValue, %SValue* %vtop210, i32 0, i32 3
  %c212 = load %CValue, %CValue* %fieldLLL211, align 16
  %ICASTO213 = bitcast %CValue* %fieldLLL211 to i32*
  %i214 = load i32, i32* %ICASTO213, align 4
  %xortmp = xor i32 %i214, 1
  %fieldIII215 = getelementptr inbounds %CValue, %CValue* %fieldLLL208, i32 0, i32 0
  %icastN216 = bitcast fp128* %fieldIII215 to i32*
  store i32 %xortmp, i32* %icastN216, align 4
  br label %cond_end188

cond_else_block187:                               ; preds = %cond_jump_elif0185
  call void @save_regs(i32 1)
  %fun_result217 = call i32 @gtst(i32 1, i32 0)
  call void @vseti(i32 244, i32 %fun_result217)
  br label %cond_end188

cond_end188:                                      ; preds = %cond_else_block187, %cond_jump_elif_then0186, %cond_jump_then184
  br label %end_blockX

after_break218:                                   ; No predecessors!
  br label %cond_else_blockX177
  br label %cond_else_blockX220

cond_then_block219:                               ; preds = %cond_else_blockX177
  call void @next()
  call void @unary()
  call void @vpushi(i32 -1)
  call void @gen_op(i32 94)
  br label %end_blockX

cond_else_blockX220:                              ; preds = %after_break222, %cond_else_blockX177, %after_break218
  %eqtmp225 = icmp eq i32 %tok, 43
  br i1 %eqtmp225, label %cond_then_block223, label %cond_else_blockX224

after_break222:                                   ; No predecessors!
  br label %cond_else_blockX220
  br label %cond_else_blockX224

cond_then_block223:                               ; preds = %cond_else_blockX220
  call void @next()
  call void @unary()
  %vtop226 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL227 = getelementptr inbounds %SValue, %SValue* %vtop226, i32 0, i32 0
  %type228 = load %CType, %CType* %fieldLLL227, align 8
  %fieldVVV229 = getelementptr inbounds %CType, %CType* %fieldLLL227, i32 0, i32 0
  %t230 = load i32, i32* %fieldVVV229, align 4
  %andtmp231 = and i32 %t230, 15
  %eq232 = icmp eq i32 %andtmp231, 4
  br i1 %eq232, label %cond_jump_then233, label %cond_end234

cond_else_blockX224:                              ; preds = %after_break235, %cond_else_blockX220, %after_break222
  %eqtmp238 = icmp eq i32 %tok, 301
  br i1 %eqtmp238, label %cond_then_block236, label %cond_else_blockX237
  br label %cond_else_blockX239

cond_jump_then233:                                ; preds = %cond_then_block223
  call void (i8*, ...) @error(i8* bitcast ([36 x i8]* @156 to i8*))
  br label %cond_end234

cond_end234:                                      ; preds = %cond_jump_then233, %cond_then_block223
  call void @vpushi(i32 0)
  call void @gen_op(i32 43)
  br label %end_blockX

after_break235:                                   ; No predecessors!
  br label %cond_else_blockX224
  br label %cond_else_blockX237

cond_then_block236:                               ; preds = %cond_else_blockX239, %cond_else_blockX237, %cond_else_blockX224
  %tok243 = load i32, i32* @tok, align 4
  store i32 %tok243, i32* %t, align 4
  call void @next()
  %tok244 = load i32, i32* @tok, align 4
  %eq245 = icmp eq i32 %tok244, 40
  br i1 %eq245, label %cond_jump_then246, label %cond_else_block247

cond_else_blockX237:                              ; preds = %cond_else_blockX224, %after_break235
  %eqtmp240 = icmp eq i32 %tok, 304
  br i1 %eqtmp240, label %cond_then_block236, label %cond_else_blockX239
  br label %cond_else_blockX241

cond_else_blockX239:                              ; preds = %cond_else_blockX237, %cond_else_blockX224
  %eqtmp242 = icmp eq i32 %tok, 305
  br i1 %eqtmp242, label %cond_then_block236, label %cond_else_blockX241

cond_else_blockX241:                              ; preds = %after_break274, %cond_else_blockX239, %cond_else_blockX237
  %eqtmp277 = icmp eq i32 %tok, 353
  br i1 %eqtmp277, label %cond_then_block275, label %cond_else_blockX276

cond_jump_then246:                                ; preds = %cond_then_block236
  %type249 = load %CType, %CType* %type, align 8
  call void @parse_expr_type(%CType* %type)
  br label %cond_end248

cond_else_block247:                               ; preds = %cond_then_block236
  %type250 = load %CType, %CType* %type, align 8
  call void @unary_type(%CType* %type)
  br label %cond_end248

cond_end248:                                      ; preds = %cond_else_block247, %cond_jump_then246
  %type251 = load %CType, %CType* %type, align 8
  %align252 = load i32, i32* %align, align 4
  %fun_result253 = call i32 @type_size(%CType* %type, i32* %align)
  store i32 %fun_result253, i32* %size, align 4
  %t254 = load i32, i32* %t, align 4
  %eq255 = icmp eq i32 %t254, 301
  br i1 %eq255, label %cond_jump_then256, label %cond_else_block257

cond_jump_then256:                                ; preds = %cond_end248
  %size259 = load i32, i32* %size, align 4
  %le = icmp slt i32 %size259, 0
  br i1 %le, label %cond_jump_then260, label %cond_end261

cond_else_block257:                               ; preds = %cond_end248
  %align263 = load i32, i32* %align, align 4
  call void @vpushi(i32 %align263)
  br label %cond_end258

cond_end258:                                      ; preds = %cond_else_block257, %cond_end261
  %vtop264 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL265 = getelementptr inbounds %SValue, %SValue* %vtop264, i32 0, i32 0
  %type266 = load %CType, %CType* %fieldLLL265, align 8
  %vtop267 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL268 = getelementptr inbounds %SValue, %SValue* %vtop267, i32 0, i32 0
  %type269 = load %CType, %CType* %fieldLLL268, align 8
  %fieldVVV270 = getelementptr inbounds %CType, %CType* %fieldLLL268, i32 0, i32 0
  %t271 = load i32, i32* %fieldVVV270, align 4
  %ortmp272 = or i32 %t271, 16
  %fieldTTT273 = getelementptr inbounds %CType, %CType* %fieldLLL265, i32 0, i32 0
  store i32 %ortmp272, i32* %fieldTTT273, align 4
  br label %end_blockX

cond_jump_then260:                                ; preds = %cond_jump_then256
  call void (i8*, ...) @error(i8* bitcast ([37 x i8]* @157 to i8*))
  br label %cond_end261

cond_end261:                                      ; preds = %cond_jump_then260, %cond_jump_then256
  %size262 = load i32, i32* %size, align 4
  call void @vpushi(i32 %size262)
  br label %cond_end258

after_break274:                                   ; No predecessors!
  br label %cond_else_blockX241
  br label %cond_else_blockX276

cond_then_block275:                               ; preds = %cond_else_blockX241
  call void @next()
  call void @skip(i32 40)
  %type1280 = load %CType, %CType* %type1, align 8
  call void @parse_type(%CType* %type1)
  call void @skip(i32 44)
  %type2281 = load %CType, %CType* %type2, align 8
  call void @parse_type(%CType* %type2)
  call void @skip(i32 41)
  %type1282 = load %CType, %CType* %type1, align 8
  %type1283 = load %CType, %CType* %type1, align 8
  %fieldVVV284 = getelementptr inbounds %CType, %CType* %type1, i32 0, i32 0
  %t285 = load i32, i32* %fieldVVV284, align 4
  %andtmp286 = and i32 %t285, -6145
  %fieldTTT287 = getelementptr inbounds %CType, %CType* %type1, i32 0, i32 0
  store i32 %andtmp286, i32* %fieldTTT287, align 4
  %type2288 = load %CType, %CType* %type2, align 8
  %type2289 = load %CType, %CType* %type2, align 8
  %fieldVVV290 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  %t291 = load i32, i32* %fieldVVV290, align 4
  %andtmp292 = and i32 %t291, -6145
  %fieldTTT293 = getelementptr inbounds %CType, %CType* %type2, i32 0, i32 0
  store i32 %andtmp292, i32* %fieldTTT293, align 4
  %type1294 = load %CType, %CType* %type1, align 8
  %type2295 = load %CType, %CType* %type2, align 8
  %fun_result296 = call i32 @is_compatible_types(%CType* %type1, %CType* %type2)
  call void @vpushi(i32 %fun_result296)
  br label %end_blockX

cond_else_blockX276:                              ; preds = %after_break297, %cond_else_blockX241, %after_break274
  %eqtmp300 = icmp eq i32 %tok, 354
  br i1 %eqtmp300, label %cond_then_block298, label %cond_else_blockX299

after_break297:                                   ; No predecessors!
  br label %cond_else_blockX276
  br label %cond_else_blockX299

cond_then_block298:                               ; preds = %cond_else_blockX276
  call void @next()
  call void @skip(i32 40)
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  store i32 %nocode_wanted, i32* %saved_nocode_wanted, align 4
  store i32 1, i32* @nocode_wanted, align 4
  call void @gexpr()
  %vtop301 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL302 = getelementptr inbounds %SValue, %SValue* %vtop301, i32 0, i32 1
  %r303 = load i16, i16* %fieldLLL302, align 2
  %icastKY304 = zext i16 %r303 to i32
  %andtmp305 = and i32 %icastKY304, 1023
  %eq306 = icmp eq i32 %andtmp305, 240
  %icastKX = zext i1 %eq306 to i32
  store i32 %icastKX, i32* %res, align 4
  call void @vpop()
  %saved_nocode_wanted307 = load i32, i32* %saved_nocode_wanted, align 4
  store i32 %saved_nocode_wanted307, i32* @nocode_wanted, align 4
  call void @skip(i32 41)
  %res308 = load i32, i32* %res, align 4
  call void @vpushi(i32 %res308)
  br label %end_blockX

cond_else_blockX299:                              ; preds = %after_break309, %cond_else_blockX276, %after_break297
  %eqtmp312 = icmp eq i32 %tok, 355
  br i1 %eqtmp312, label %cond_then_block310, label %cond_else_blockX311

after_break309:                                   ; No predecessors!
  br label %cond_else_blockX299
  br label %cond_else_blockX311

cond_then_block310:                               ; preds = %cond_else_blockX299
  call void @next()
  call void @skip(i32 40)
  %tok315 = load i32, i32* @tok, align 4
  %not_eq316 = icmp ne i32 %tok315, 179
  br i1 %not_eq316, label %cond_jump_then317, label %cond_end318

cond_else_blockX311:                              ; preds = %after_break328, %cond_else_blockX299, %after_break309
  %eqtmp331 = icmp eq i32 %tok, 356
  br i1 %eqtmp331, label %cond_then_block329, label %cond_else_blockX330

cond_jump_then317:                                ; preds = %cond_then_block310
  call void (i8*, ...) @error(i8* bitcast ([44 x i8]* @158 to i8*))
  br label %cond_end318

cond_end318:                                      ; preds = %cond_jump_then317, %cond_then_block310
  %tokc319 = load %CValue, %CValue* @tokc, align 16
  %i320 = load i32, i32* bitcast (%CValue* @tokc to i32*), align 4
  %not_eq321 = icmp ne i32 %i320, 0
  br i1 %not_eq321, label %cond_jump_then322, label %cond_end323

cond_jump_then322:                                ; preds = %cond_end318
  call void (i8*, ...) @error(i8* bitcast ([45 x i8]* @159 to i8*))
  br label %cond_end323

cond_end323:                                      ; preds = %cond_jump_then322, %cond_end318
  call void @next()
  call void @skip(i32 41)
  %type324 = load %CType, %CType* %type313, align 8
  %fieldTTT325 = getelementptr inbounds %CType, %CType* %type313, i32 0, i32 0
  store i32 3, i32* %fieldTTT325, align 4
  %type326 = load %CType, %CType* %type313, align 8
  call void @mk_pointer(%CType* %type313)
  %type327 = load %CType, %CType* %type313, align 8
  call void @vset(%CType* %type313, i32 242, i32 0)
  br label %end_blockX

after_break328:                                   ; No predecessors!
  br label %cond_else_blockX311
  br label %cond_else_blockX330

cond_then_block329:                               ; preds = %cond_else_blockX311
  store i32 358, i32* @tok, align 4
  br label %unary.tok_identifier
  br label %cond_then_block332

cond_else_blockX330:                              ; preds = %cond_else_blockX311, %after_break328
  %eqtmp334 = icmp eq i32 %tok, 357
  br i1 %eqtmp334, label %cond_then_block332, label %cond_else_blockX333

cond_then_block332:                               ; preds = %cond_else_blockX330, %cond_then_block329
  store i32 359, i32* @tok, align 4
  br label %unary.tok_identifier
  br label %cond_then_block335

cond_else_blockX333:                              ; preds = %cond_else_blockX330
  %eqtmp337 = icmp eq i32 %tok, 164
  br i1 %eqtmp337, label %cond_then_block335, label %cond_else_blockX336
  br label %cond_then_block335

cond_then_block335:                               ; preds = %cond_else_blockX336, %cond_else_blockX333, %cond_else_blockX333, %cond_then_block332
  %tok340 = load i32, i32* @tok, align 4
  store i32 %tok340, i32* %t, align 4
  call void @next()
  call void @unary()
  %t341 = load i32, i32* %t, align 4
  call void @inc(i32 0, i32 %t341)
  br label %end_blockX

cond_else_blockX336:                              ; preds = %cond_else_blockX333
  %eqtmp339 = icmp eq i32 %tok, 162
  br i1 %eqtmp339, label %cond_then_block335, label %cond_else_blockX338

cond_else_blockX338:                              ; preds = %after_break342, %cond_else_blockX336
  %eqtmp345 = icmp eq i32 %tok, 45
  br i1 %eqtmp345, label %cond_then_block343, label %cond_else_blockX344

after_break342:                                   ; No predecessors!
  br label %cond_else_blockX338
  br label %cond_else_blockX344

cond_then_block343:                               ; preds = %cond_else_blockX338
  call void @next()
  call void @vpushi(i32 0)
  call void @unary()
  call void @gen_op(i32 45)
  br label %end_blockX

cond_else_blockX344:                              ; preds = %after_break346, %cond_else_blockX338, %after_break342
  %eqtmp349 = icmp eq i32 %tok, 160
  br i1 %eqtmp349, label %cond_then_block347, label %cond_else_blockX348

after_break346:                                   ; No predecessors!
  br label %cond_else_blockX344
  br label %cond_else_blockX348

cond_then_block347:                               ; preds = %cond_else_blockX344
  %gnu_ext350 = load i32, i32* @gnu_ext, align 4
  %logical_denial351 = icmp eq i32 %gnu_ext350, 0
  %castOOOO352 = zext i1 %logical_denial351 to i32
  %icmpA353 = icmp ne i32 %castOOOO352, 0
  br i1 %icmpA353, label %cond_jump_then354, label %cond_end355

cond_else_blockX348:                              ; preds = %after_break412, %cond_else_blockX344, %after_break346
  br label %cond_then_block413

cond_jump_then354:                                ; preds = %cond_then_block347
  br label %unary.tok_identifier
  br label %cond_end355

cond_end355:                                      ; preds = %cond_jump_then354, %cond_then_block347
  call void @next()
  %tok356 = load i32, i32* @tok, align 4
  %le357 = icmp slt i32 %tok356, 313
  br i1 %le357, label %cond_jump_then358, label %cond_end359

cond_jump_then358:                                ; preds = %cond_end355
  call void @expect(i8* bitcast ([17 x i8]* @160 to i8*))
  br label %cond_end359

cond_end359:                                      ; preds = %cond_jump_then358, %cond_end355
  %tok360 = load i32, i32* @tok, align 4
  %fun_result361 = call %Sym* @label_find(i32 %tok360)
  store %Sym* %fun_result361, %Sym** %s, align 8
  %s362 = load %Sym*, %Sym** %s, align 8
  %logical_denial363 = icmp eq %Sym* %s362, null
  %castOOOO364 = zext i1 %logical_denial363 to i32
  %icmpA365 = icmp ne i32 %castOOOO364, 0
  br i1 %icmpA365, label %cond_jump_then366, label %cond_else_block367

cond_jump_then366:                                ; preds = %cond_end359
  %global_label_stack = load %Sym*, %Sym** @global_label_stack, align 8
  %tok369 = load i32, i32* @tok, align 4
  %fun_result370 = call %Sym* @label_push(%Sym** @global_label_stack, i32 %tok369, i32 1)
  store %Sym* %fun_result370, %Sym** %s, align 8
  br label %cond_end368

cond_else_block367:                               ; preds = %cond_end359
  %s371 = load %Sym*, %Sym** %s, align 8
  %fieldLLL372 = getelementptr inbounds %Sym, %Sym* %s371, i32 0, i32 1
  %r373 = load i64, i64* %fieldLLL372, align 4
  %eq374 = icmp eq i64 %r373, 2
  br i1 %eq374, label %cond_jump_then375, label %cond_end376

cond_end368:                                      ; preds = %cond_end376, %cond_jump_then366
  %s379 = load %Sym*, %Sym** %s, align 8
  %fieldLLL380 = getelementptr inbounds %Sym, %Sym* %s379, i32 0, i32 3
  %type381 = load %CType, %CType* %fieldLLL380, align 8
  %fieldVVV382 = getelementptr inbounds %CType, %CType* %fieldLLL380, i32 0, i32 0
  %t383 = load i32, i32* %fieldVVV382, align 4
  %logical_denial384 = icmp eq i32 %t383, 0
  %castOOOO385 = zext i1 %logical_denial384 to i32
  %icmpA386 = icmp ne i32 %castOOOO385, 0
  br i1 %icmpA386, label %cond_jump_then387, label %cond_end388

cond_jump_then375:                                ; preds = %cond_else_block367
  %s377 = load %Sym*, %Sym** %s, align 8
  %fieldTU378 = getelementptr inbounds %Sym, %Sym* %s377, i32 0, i32 1
  store i64 1, i64* %fieldTU378, align 4
  br label %cond_end376

cond_end376:                                      ; preds = %cond_jump_then375, %cond_else_block367
  br label %cond_end368

cond_jump_then387:                                ; preds = %cond_end368
  %s389 = load %Sym*, %Sym** %s, align 8
  %fieldLLL390 = getelementptr inbounds %Sym, %Sym* %s389, i32 0, i32 3
  %type391 = load %CType, %CType* %fieldLLL390, align 8
  %fieldTTT392 = getelementptr inbounds %CType, %CType* %fieldLLL390, i32 0, i32 0
  store i32 3, i32* %fieldTTT392, align 4
  %s393 = load %Sym*, %Sym** %s, align 8
  %fieldLLL394 = getelementptr inbounds %Sym, %Sym* %s393, i32 0, i32 3
  %type395 = load %CType, %CType* %fieldLLL394, align 8
  call void @mk_pointer(%CType* %fieldLLL394)
  %s396 = load %Sym*, %Sym** %s, align 8
  %fieldLLL397 = getelementptr inbounds %Sym, %Sym* %s396, i32 0, i32 3
  %type398 = load %CType, %CType* %fieldLLL397, align 8
  %s399 = load %Sym*, %Sym** %s, align 8
  %fieldLLL400 = getelementptr inbounds %Sym, %Sym* %s399, i32 0, i32 3
  %type401 = load %CType, %CType* %fieldLLL400, align 8
  %fieldVVV402 = getelementptr inbounds %CType, %CType* %fieldLLL400, i32 0, i32 0
  %t403 = load i32, i32* %fieldVVV402, align 4
  %ortmp404 = or i32 %t403, 256
  %fieldTTT405 = getelementptr inbounds %CType, %CType* %fieldLLL397, i32 0, i32 0
  store i32 %ortmp404, i32* %fieldTTT405, align 4
  br label %cond_end388

cond_end388:                                      ; preds = %cond_jump_then387, %cond_end368
  %s406 = load %Sym*, %Sym** %s, align 8
  %fieldLLL407 = getelementptr inbounds %Sym, %Sym* %s406, i32 0, i32 3
  %type408 = load %CType, %CType* %fieldLLL407, align 8
  call void @vset(%CType* %fieldLLL407, i32 752, i32 0)
  %vtop409 = load %SValue*, %SValue** @vtop, align 8
  %s410 = load %Sym*, %Sym** %s, align 8
  %fieldTU411 = getelementptr inbounds %SValue, %SValue* %vtop409, i32 0, i32 4
  store %Sym* %s410, %Sym** %fieldTU411, align 8
  call void @next()
  br label %end_blockX

after_break412:                                   ; No predecessors!
  br label %cond_else_blockX348
  br label %cond_else_blockX414

cond_then_block413:                               ; preds = %cond_else_blockX348
  br label %unary.tok_identifier

cond_else_blockX414:                              ; preds = %after_break498, %after_break412
  br label %end_blockX

cond_jump_then418:                                ; preds = %unary.tok_identifier
  call void @expect(i8* bitcast ([11 x i8]* @161 to i8*))
  br label %cond_end419

cond_end419:                                      ; preds = %cond_jump_then418, %unary.tok_identifier
  %t420 = load i32, i32* %t, align 4
  store i32 3230, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.127, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %sym_find

sym_find:                                         ; preds = %cond_end419
  %inline_result_variable = alloca %Sym*, align 8
  %v = alloca i32, align 4
  store i32 %t420, i32* %v, align 4
  %v421 = load i32, i32* %v, align 4
  %sub = sub i32 %v421, 256
  store i32 %sub, i32* %v, align 4
  %add422 = add i32 %sub, 256
  %v423 = load i32, i32* %v, align 4
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub424 = sub i32 %tok_ident, 256
  %gteq_unsinged = icmp uge i32 %v423, %sub424
  br i1 %gteq_unsinged, label %cond_jump_then425, label %cond_end426

sym_find_end:                                     ; preds = %cond_end426, %cond_jump_then425
  %inline_result_variable429 = load %Sym*, %Sym** %inline_result_variable, align 8
  store %Sym* %inline_result_variable429, %Sym** %s, align 8
  %s430 = load %Sym*, %Sym** %s, align 8
  %logical_denial431 = icmp eq %Sym* %s430, null
  %castOOOO432 = zext i1 %logical_denial431 to i32
  %icmpA433 = icmp ne i32 %castOOOO432, 0
  br i1 %icmpA433, label %cond_jump_then434, label %cond_end435

cond_jump_then425:                                ; preds = %sym_find
  store %Sym* null, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_end426:                                      ; preds = %sym_find
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %v427 = load i32, i32* %v, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %v427
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %fieldLLL428 = getelementptr inbounds %TokenSym, %TokenSym* %load_element, i32 0, i32 4
  %sym_identifier = load %Sym*, %Sym** %fieldLLL428, align 8
  store %Sym* %sym_identifier, %Sym** %inline_result_variable, align 8
  br label %sym_find_end

cond_jump_then434:                                ; preds = %sym_find_end
  %tok436 = load i32, i32* @tok, align 4
  %not_eq437 = icmp ne i32 %tok436, 40
  br i1 %not_eq437, label %cond_jump_then438, label %cond_end439

cond_end435:                                      ; preds = %cond_end446, %sym_find_end
  %s451 = load %Sym*, %Sym** %s, align 8
  %fieldLLL452 = getelementptr inbounds %Sym, %Sym* %s451, i32 0, i32 3
  %type453 = load %CType, %CType* %fieldLLL452, align 8
  %fieldVVV454 = getelementptr inbounds %CType, %CType* %fieldLLL452, i32 0, i32 0
  %t455 = load i32, i32* %fieldVVV454, align 4
  %andtmp456 = and i32 %t455, 1295
  %eq457 = icmp eq i32 %andtmp456, 1286
  br i1 %eq457, label %cond_jump_then458, label %cond_else_block459

cond_jump_then438:                                ; preds = %cond_jump_then434
  %t440 = load i32, i32* %t, align 4
  %fun_result441 = call i8* @get_tok_str(i32 %t440, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([16 x i8]* @162 to i8*), i8* %fun_result441)
  br label %cond_end439

cond_end439:                                      ; preds = %cond_jump_then438, %cond_jump_then434
  %tcc_state442 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL443 = getelementptr inbounds %TCCState, %TCCState* %tcc_state442, i32 0, i32 40
  %warn_implicit_function_declaration = load i32, i32* %fieldLLL443, align 4
  %icmpA444 = icmp ne i32 %warn_implicit_function_declaration, 0
  br i1 %icmpA444, label %cond_jump_then445, label %cond_end446

cond_jump_then445:                                ; preds = %cond_end439
  %t447 = load i32, i32* %t, align 4
  %fun_result448 = call i8* @get_tok_str(i32 %t447, %CValue* null)
  call void (i8*, ...) @warning(i8* bitcast ([38 x i8]* @163 to i8*), i8* %fun_result448)
  br label %cond_end446

cond_end446:                                      ; preds = %cond_jump_then445, %cond_end439
  %t449 = load i32, i32* %t, align 4
  %func_old_type = load %CType, %CType* @func_old_type, align 8
  %fun_result450 = call %Sym* @external_global_sym(i32 %t449, %CType* @func_old_type, i32 0)
  store %Sym* %fun_result450, %Sym** %s, align 8
  br label %cond_end435

cond_jump_then458:                                ; preds = %cond_end435
  %s461 = load %Sym*, %Sym** %s, align 8
  %fieldLLL462 = getelementptr inbounds %Sym, %Sym* %s461, i32 0, i32 2
  %c463 = load i64, i64* %fieldLLL462, align 4
  %logical_denial464 = icmp eq i64 %c463, 0
  %castOOOO465 = zext i1 %logical_denial464 to i32
  %icmpA466 = icmp ne i32 %castOOOO465, 0
  br i1 %icmpA466, label %cond_jump_then467, label %cond_end468

cond_else_block459:                               ; preds = %cond_end435
  %s470 = load %Sym*, %Sym** %s, align 8
  %fieldLLL471 = getelementptr inbounds %Sym, %Sym* %s470, i32 0, i32 1
  %r472 = load i64, i64* %fieldLLL471, align 4
  %icastM473 = trunc i64 %r472 to i32
  store i32 %icastM473, i32* %r, align 4
  br label %cond_end460

cond_end460:                                      ; preds = %cond_else_block459, %cond_end468
  %s474 = load %Sym*, %Sym** %s, align 8
  %fieldLLL475 = getelementptr inbounds %Sym, %Sym* %s474, i32 0, i32 3
  %type476 = load %CType, %CType* %fieldLLL475, align 8
  %r477 = load i32, i32* %r, align 4
  %s478 = load %Sym*, %Sym** %s, align 8
  %fieldLLL479 = getelementptr inbounds %Sym, %Sym* %s478, i32 0, i32 2
  %c480 = load i64, i64* %fieldLLL479, align 4
  %icastM481 = trunc i64 %c480 to i32
  call void @vset(%CType* %fieldLLL475, i32 %r477, i32 %icastM481)
  %vtop482 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL483 = getelementptr inbounds %SValue, %SValue* %vtop482, i32 0, i32 1
  %r484 = load i16, i16* %fieldLLL483, align 2
  %icastKY485 = zext i16 %r484 to i32
  %andtmp486 = and i32 %icastKY485, 512
  %icmpA487 = icmp ne i32 %andtmp486, 0
  br i1 %icmpA487, label %cond_jump_then488, label %cond_end489

cond_jump_then467:                                ; preds = %cond_jump_then458
  %s469 = load %Sym*, %Sym** %s, align 8
  %text_section = load %Section*, %Section** @text_section, align 8
  call void @put_extern_sym(%Sym* %s469, %Section* %text_section, i64 0, i64 0)
  br label %cond_end468

cond_end468:                                      ; preds = %cond_jump_then467, %cond_jump_then458
  store i32 752, i32* %r, align 4
  br label %cond_end460

cond_jump_then488:                                ; preds = %cond_end460
  %vtop490 = load %SValue*, %SValue** @vtop, align 8
  %s491 = load %Sym*, %Sym** %s, align 8
  %fieldTU492 = getelementptr inbounds %SValue, %SValue* %vtop490, i32 0, i32 4
  store %Sym* %s491, %Sym** %fieldTU492, align 8
  %vtop493 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL494 = getelementptr inbounds %SValue, %SValue* %vtop493, i32 0, i32 3
  %c495 = load %CValue, %CValue* %fieldLLL494, align 16
  %fieldIII496 = getelementptr inbounds %CValue, %CValue* %fieldLLL494, i32 0, i32 0
  %icastN497 = bitcast fp128* %fieldIII496 to i32*
  store i32 0, i32* %icastN497, align 4
  br label %cond_end489

cond_end489:                                      ; preds = %cond_jump_then488, %cond_end460
  br label %end_blockX

after_break498:                                   ; No predecessors!
  br label %cond_else_blockX414

loop_top_block:                                   ; preds = %cond_end511, %end_blockX
  br i1 true, label %cond_then_block499, label %cond_end_block

cond_then_block499:                               ; preds = %loop_top_block
  %tok500 = load i32, i32* @tok, align 4
  %eq501 = icmp eq i32 %tok500, 164
  store i1 %eq501, i1* %oror, align 1
  br i1 %eq501, label %cond_jump_end503, label %cond_jump_then502

cond_end_block:                                   ; preds = %cond_else_block510, %loop_top_block
  ret void

cond_jump_then502:                                ; preds = %cond_then_block499
  %tok504 = load i32, i32* @tok, align 4
  %eq505 = icmp eq i32 %tok504, 162
  %oror506 = or i1 %eq501, %eq505
  store i1 %oror506, i1* %oror, align 1
  br label %cond_jump_end503

cond_jump_end503:                                 ; preds = %cond_jump_then502, %cond_then_block499
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then507, label %cond_jump_elif0508

cond_jump_then507:                                ; preds = %cond_jump_end503
  %tok512 = load i32, i32* @tok, align 4
  call void @inc(i32 1, i32 %tok512)
  call void @next()
  br label %cond_end511

cond_jump_elif0508:                               ; preds = %cond_jump_end503
  %tok514 = load i32, i32* @tok, align 4
  %eq515 = icmp eq i32 %tok514, 46
  store i1 %eq515, i1* %oror513, align 1
  br i1 %eq515, label %cond_jump_end517, label %cond_jump_then516

cond_jump_elif_then0509:                          ; preds = %cond_jump_end517
  %tok522 = load i32, i32* @tok, align 4
  %eq523 = icmp eq i32 %tok522, 203
  br i1 %eq523, label %cond_jump_then524, label %cond_end525

cond_jump_elif1:                                  ; preds = %cond_jump_end517
  %tok613 = load i32, i32* @tok, align 4
  %eq614 = icmp eq i32 %tok613, 91
  br i1 %eq614, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  call void @next()
  call void @gexpr()
  call void @gen_op(i32 43)
  call void @indir()
  call void @skip(i32 93)
  br label %cond_end511

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %tok615 = load i32, i32* @tok, align 4
  %eq616 = icmp eq i32 %tok615, 40
  br i1 %eq616, label %cond_jump_elif_then2, label %cond_else_block510

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  %vtop618 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL619 = getelementptr inbounds %SValue, %SValue* %vtop618, i32 0, i32 0
  %type620 = load %CType, %CType* %fieldLLL619, align 8
  %fieldVVV621 = getelementptr inbounds %CType, %CType* %fieldLLL619, i32 0, i32 0
  %t622 = load i32, i32* %fieldVVV621, align 4
  %andtmp623 = and i32 %t622, 15
  %not_eq624 = icmp ne i32 %andtmp623, 6
  br i1 %not_eq624, label %cond_jump_then625, label %cond_else_block626

cond_else_block510:                               ; preds = %cond_jump_elif2
  br label %cond_end_block

cond_end511:                                      ; preds = %after_break837, %cond_end812, %cond_jump_elif_then1, %cond_end586, %cond_jump_then507
  br label %loop_top_block

cond_jump_then516:                                ; preds = %cond_jump_elif0508
  %tok518 = load i32, i32* @tok, align 4
  %eq519 = icmp eq i32 %tok518, 203
  %oror520 = or i1 %eq515, %eq519
  store i1 %oror520, i1* %oror513, align 1
  br label %cond_jump_end517

cond_jump_end517:                                 ; preds = %cond_jump_then516, %cond_jump_elif0508
  %oror_result_value521 = load i1, i1* %oror513, align 1
  br i1 %oror_result_value521, label %cond_jump_elif_then0509, label %cond_jump_elif1

cond_jump_then524:                                ; preds = %cond_jump_elif_then0509
  call void @indir()
  br label %cond_end525

cond_end525:                                      ; preds = %cond_jump_then524, %cond_jump_elif_then0509
  call void @test_lvalue()
  call void @gaddrof()
  call void @next()
  %vtop526 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL527 = getelementptr inbounds %SValue, %SValue* %vtop526, i32 0, i32 0
  %type528 = load %CType, %CType* %fieldLLL527, align 8
  %fieldVVV529 = getelementptr inbounds %CType, %CType* %fieldLLL527, i32 0, i32 0
  %t530 = load i32, i32* %fieldVVV529, align 4
  %andtmp531 = and i32 %t530, 15
  %not_eq532 = icmp ne i32 %andtmp531, 7
  br i1 %not_eq532, label %cond_jump_then533, label %cond_end534

cond_jump_then533:                                ; preds = %cond_end525
  call void @expect(i8* bitcast ([16 x i8]* @164 to i8*))
  br label %cond_end534

cond_end534:                                      ; preds = %cond_jump_then533, %cond_end525
  %vtop535 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL536 = getelementptr inbounds %SValue, %SValue* %vtop535, i32 0, i32 0
  %type537 = load %CType, %CType* %fieldLLL536, align 8
  %fieldVVV538 = getelementptr inbounds %CType, %CType* %fieldLLL536, i32 0, i32 1
  %ref539 = load %Sym*, %Sym** %fieldVVV538, align 8
  store %Sym* %ref539, %Sym** %s, align 8
  %tok540 = load i32, i32* @tok, align 4
  %ortmp541 = or i32 %tok540, 536870912
  store i32 %ortmp541, i32* @tok, align 4
  br label %loop_top_block542

loop_top_block542:                                ; preds = %cond_end554, %cond_end534
  %s543 = load %Sym*, %Sym** %s, align 8
  %fieldLLL544 = getelementptr inbounds %Sym, %Sym* %s543, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL544, align 8
  store %Sym* %next, %Sym** %s, align 8
  %not_eq545 = icmp ne %Sym* %next, null
  br i1 %not_eq545, label %cond_then_block546, label %cond_end_block547

cond_then_block546:                               ; preds = %loop_top_block542
  %s548 = load %Sym*, %Sym** %s, align 8
  %fieldLLL549 = getelementptr inbounds %Sym, %Sym* %s548, i32 0, i32 0
  %v550 = load i32, i32* %fieldLLL549, align 4
  %tok551 = load i32, i32* @tok, align 4
  %eq552 = icmp eq i32 %v550, %tok551
  br i1 %eq552, label %cond_jump_then553, label %cond_end554

cond_end_block547:                                ; preds = %cond_jump_then553, %loop_top_block542
  %s556 = load %Sym*, %Sym** %s, align 8
  %logical_denial557 = icmp eq %Sym* %s556, null
  %castOOOO558 = zext i1 %logical_denial557 to i32
  %icmpA559 = icmp ne i32 %castOOOO558, 0
  br i1 %icmpA559, label %cond_jump_then560, label %cond_end561

cond_jump_then553:                                ; preds = %cond_then_block546
  br label %cond_end_block547

cond_end554:                                      ; preds = %after_break555, %cond_then_block546
  br label %loop_top_block542

after_break555:                                   ; No predecessors!
  br label %cond_end554

cond_jump_then560:                                ; preds = %cond_end_block547
  %tok562 = load i32, i32* @tok, align 4
  %andtmp563 = and i32 %tok562, -536870913
  %fun_result564 = call i8* @get_tok_str(i32 %andtmp563, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([20 x i8]* @165 to i8*), i8* %fun_result564)
  br label %cond_end561

cond_end561:                                      ; preds = %cond_jump_then560, %cond_end_block547
  %vtop565 = load %SValue*, %SValue** @vtop, align 8
  %char_pointer_type = load %CType, %CType* @char_pointer_type, align 8
  %fieldTU566 = getelementptr inbounds %SValue, %SValue* %vtop565, i32 0, i32 0
  store %CType %char_pointer_type, %CType* %fieldTU566, align 8
  %s567 = load %Sym*, %Sym** %s, align 8
  %fieldLLL568 = getelementptr inbounds %Sym, %Sym* %s567, i32 0, i32 2
  %c569 = load i64, i64* %fieldLLL568, align 4
  %icastM570 = trunc i64 %c569 to i32
  call void @vpushi(i32 %icastM570)
  call void @gen_op(i32 43)
  %vtop571 = load %SValue*, %SValue** @vtop, align 8
  %s572 = load %Sym*, %Sym** %s, align 8
  %fieldLLL573 = getelementptr inbounds %Sym, %Sym* %s572, i32 0, i32 3
  %type574 = load %CType, %CType* %fieldLLL573, align 8
  %fieldTU575 = getelementptr inbounds %SValue, %SValue* %vtop571, i32 0, i32 0
  store %CType %type574, %CType* %fieldTU575, align 8
  %vtop576 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL577 = getelementptr inbounds %SValue, %SValue* %vtop576, i32 0, i32 0
  %type578 = load %CType, %CType* %fieldLLL577, align 8
  %fieldVVV579 = getelementptr inbounds %CType, %CType* %fieldLLL577, i32 0, i32 0
  %t580 = load i32, i32* %fieldVVV579, align 4
  %andtmp581 = and i32 %t580, 32
  %logical_denial582 = icmp eq i32 %andtmp581, 0
  %castOOOO583 = zext i1 %logical_denial582 to i32
  %icmpA584 = icmp ne i32 %castOOOO583, 0
  br i1 %icmpA584, label %cond_jump_then585, label %cond_end586

cond_jump_then585:                                ; preds = %cond_end561
  %vtop587 = load %SValue*, %SValue** @vtop, align 8
  %vtop588 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL589 = getelementptr inbounds %SValue, %SValue* %vtop588, i32 0, i32 1
  %r590 = load i16, i16* %fieldLLL589, align 2
  %vtop591 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL592 = getelementptr inbounds %SValue, %SValue* %vtop591, i32 0, i32 0
  %type593 = load %CType, %CType* %fieldLLL592, align 8
  %fieldVVV594 = getelementptr inbounds %CType, %CType* %fieldLLL592, i32 0, i32 0
  %t595 = load i32, i32* %fieldVVV594, align 4
  %fun_result596 = call i32 @lvalue_type(i32 %t595)
  %icastKY597 = zext i16 %r590 to i32
  %ortmp598 = or i32 %icastKY597, %fun_result596
  %icastG = trunc i32 %ortmp598 to i16
  %fieldTU599 = getelementptr inbounds %SValue, %SValue* %vtop587, i32 0, i32 1
  store i16 %icastG, i16* %fieldTU599, align 2
  %tcc_state600 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL601 = getelementptr inbounds %TCCState, %TCCState* %tcc_state600, i32 0, i32 43
  %do_bounds_check = load i32, i32* %fieldLLL601, align 4
  %icmpA602 = icmp ne i32 %do_bounds_check, 0
  br i1 %icmpA602, label %cond_jump_then603, label %cond_end604

cond_end586:                                      ; preds = %cond_end604, %cond_end561
  call void @next()
  br label %cond_end511

cond_jump_then603:                                ; preds = %cond_jump_then585
  %vtop605 = load %SValue*, %SValue** @vtop, align 8
  %vtop606 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL607 = getelementptr inbounds %SValue, %SValue* %vtop606, i32 0, i32 1
  %r608 = load i16, i16* %fieldLLL607, align 2
  %icastKY609 = zext i16 %r608 to i32
  %ortmp610 = or i32 %icastKY609, 2048
  %icastG611 = trunc i32 %ortmp610 to i16
  %fieldTU612 = getelementptr inbounds %SValue, %SValue* %vtop605, i32 0, i32 1
  store i16 %icastG611, i16* %fieldTU612, align 2
  br label %cond_end604

cond_end604:                                      ; preds = %cond_jump_then603, %cond_jump_then585
  br label %cond_end586

cond_jump_then625:                                ; preds = %cond_jump_elif_then2
  %vtop628 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL629 = getelementptr inbounds %SValue, %SValue* %vtop628, i32 0, i32 0
  %type630 = load %CType, %CType* %fieldLLL629, align 8
  %fieldVVV631 = getelementptr inbounds %CType, %CType* %fieldLLL629, i32 0, i32 0
  %t632 = load i32, i32* %fieldVVV631, align 4
  %andtmp633 = and i32 %t632, 47
  %eq634 = icmp eq i32 %andtmp633, 4
  br i1 %eq634, label %cond_jump_then635, label %cond_else_block636

cond_else_block626:                               ; preds = %cond_jump_elif_then2
  %vtop660 = load %SValue*, %SValue** @vtop, align 8
  %vtop661 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL662 = getelementptr inbounds %SValue, %SValue* %vtop661, i32 0, i32 1
  %r663 = load i16, i16* %fieldLLL662, align 2
  %icastKY664 = zext i16 %r663 to i32
  %andtmp665 = and i32 %icastKY664, -257
  %icastG666 = trunc i32 %andtmp665 to i16
  %fieldTU667 = getelementptr inbounds %SValue, %SValue* %vtop660, i32 0, i32 1
  store i16 %icastG666, i16* %fieldTU667, align 2
  br label %cond_end627

cond_end627:                                      ; preds = %cond_else_block626, %cond_end637
  %vtop668 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL669 = getelementptr inbounds %SValue, %SValue* %vtop668, i32 0, i32 0
  %type670 = load %CType, %CType* %fieldLLL669, align 8
  %fieldVVV671 = getelementptr inbounds %CType, %CType* %fieldLLL669, i32 0, i32 1
  %ref672 = load %Sym*, %Sym** %fieldVVV671, align 8
  store %Sym* %ref672, %Sym** %s, align 8
  call void @next()
  %s673 = load %Sym*, %Sym** %s, align 8
  %fieldLLL674 = getelementptr inbounds %Sym, %Sym* %s673, i32 0, i32 4
  %next675 = load %Sym*, %Sym** %fieldLLL674, align 8
  store %Sym* %next675, %Sym** %sa, align 8
  store i32 0, i32* %nb_args, align 4
  %ret676 = load %SValue, %SValue* %ret, align 16
  %fieldTTT677 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 2
  store i16 240, i16* %fieldTTT677, align 2
  %s678 = load %Sym*, %Sym** %s, align 8
  %fieldLLL679 = getelementptr inbounds %Sym, %Sym* %s678, i32 0, i32 3
  %type680 = load %CType, %CType* %fieldLLL679, align 8
  %fieldVVV681 = getelementptr inbounds %CType, %CType* %fieldLLL679, i32 0, i32 0
  %t682 = load i32, i32* %fieldVVV681, align 4
  %andtmp683 = and i32 %t682, 15
  %eq684 = icmp eq i32 %andtmp683, 7
  br i1 %eq684, label %cond_jump_then685, label %cond_else_block686

cond_jump_then635:                                ; preds = %cond_jump_then625
  %vtop638 = load %SValue*, %SValue** @vtop, align 8
  %vtop639 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL640 = getelementptr inbounds %SValue, %SValue* %vtop639, i32 0, i32 0
  %type641 = load %CType, %CType* %fieldLLL640, align 8
  store i32 3316, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.128, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

cond_else_block636:                               ; preds = %cond_jump_then625
  br label %unary.error_func

cond_end637:                                      ; preds = %unary.error_func, %cond_end659
  br label %cond_end627

pointed_type:                                     ; preds = %cond_jump_then635
  %inline_result_variable642 = alloca %CType*, align 8
  %type643 = alloca %CType*, align 8
  store %CType* %fieldLLL640, %CType** %type643, align 8
  %type644 = load %CType*, %CType** %type643, align 8
  %fieldLLL645 = getelementptr inbounds %CType, %CType* %type644, i32 0, i32 1
  %ref646 = load %Sym*, %Sym** %fieldLLL645, align 8
  %fieldLLL647 = getelementptr inbounds %Sym, %Sym* %ref646, i32 0, i32 3
  %type648 = load %CType, %CType* %fieldLLL647, align 8
  store %CType* %fieldLLL647, %CType** %inline_result_variable642, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable649 = load %CType*, %CType** %inline_result_variable642, align 8
  %derefference_valueB = load %CType, %CType* %inline_result_variable649, align 8
  %fieldTU650 = getelementptr inbounds %SValue, %SValue* %vtop638, i32 0, i32 0
  store %CType %derefference_valueB, %CType* %fieldTU650, align 8
  %vtop651 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL652 = getelementptr inbounds %SValue, %SValue* %vtop651, i32 0, i32 0
  %type653 = load %CType, %CType* %fieldLLL652, align 8
  %fieldVVV654 = getelementptr inbounds %CType, %CType* %fieldLLL652, i32 0, i32 0
  %t655 = load i32, i32* %fieldVVV654, align 4
  %andtmp656 = and i32 %t655, 15
  %not_eq657 = icmp ne i32 %andtmp656, 6
  br i1 %not_eq657, label %cond_jump_then658, label %cond_end659

cond_jump_then658:                                ; preds = %pointed_type_end
  br label %unary.error_func
  br label %cond_end659

cond_end659:                                      ; preds = %cond_jump_then658, %pointed_type_end
  br label %cond_end637

unary.error_func:                                 ; preds = %cond_else_block636, %cond_jump_then658
  call void @expect(i8* bitcast ([17 x i8]* @166 to i8*))
  br label %cond_end637

cond_jump_then685:                                ; preds = %cond_end627
  %s688 = load %Sym*, %Sym** %s, align 8
  %fieldLLL689 = getelementptr inbounds %Sym, %Sym* %s688, i32 0, i32 3
  %type690 = load %CType, %CType* %fieldLLL689, align 8
  %align691 = load i32, i32* %align, align 4
  %fun_result692 = call i32 @type_size(%CType* %fieldLLL689, i32* %align)
  store i32 %fun_result692, i32* %size, align 4
  %loc = load i32, i32* @loc, align 4
  %size693 = load i32, i32* %size, align 4
  %sub694 = sub i32 %loc, %size693
  %align695 = load i32, i32* %align, align 4
  %sub696 = sub i32 0, %align695
  %andtmp697 = and i32 %sub694, %sub696
  store i32 %andtmp697, i32* @loc, align 4
  %ret698 = load %SValue, %SValue* %ret, align 16
  %s699 = load %Sym*, %Sym** %s, align 8
  %fieldLLL700 = getelementptr inbounds %Sym, %Sym* %s699, i32 0, i32 3
  %type701 = load %CType, %CType* %fieldLLL700, align 8
  %fieldTTT702 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 0
  store %CType %type701, %CType* %fieldTTT702, align 8
  %ret703 = load %SValue, %SValue* %ret, align 16
  %fieldTTT704 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 1
  store i16 498, i16* %fieldTTT704, align 2
  %loc705 = load i32, i32* @loc, align 4
  call void @vseti(i32 242, i32 %loc705)
  %ret706 = load %SValue, %SValue* %ret, align 16
  %vtop707 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL708 = getelementptr inbounds %SValue, %SValue* %vtop707, i32 0, i32 3
  %c709 = load %CValue, %CValue* %fieldLLL708, align 16
  %fieldTTT710 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 3
  store %CValue %c709, %CValue* %fieldTTT710, align 16
  %nb_args711 = load i32, i32* %nb_args, align 4
  %add712 = add i32 %nb_args711, 1
  store i32 %add712, i32* %nb_args, align 4
  %nb_args713 = load i32, i32* %nb_args, align 4
  %sub714 = sub i32 %nb_args713, 1
  br label %cond_end687

cond_else_block686:                               ; preds = %cond_end627
  %ret715 = load %SValue, %SValue* %ret, align 16
  %s716 = load %Sym*, %Sym** %s, align 8
  %fieldLLL717 = getelementptr inbounds %Sym, %Sym* %s716, i32 0, i32 3
  %type718 = load %CType, %CType* %fieldLLL717, align 8
  %fieldTTT719 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 0
  store %CType %type718, %CType* %fieldTTT719, align 8
  %ret720 = load %SValue, %SValue* %ret, align 16
  %fieldVVV721 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 0
  %type722 = load %CType, %CType* %fieldVVV721, align 8
  %fieldVVV723 = getelementptr inbounds %CType, %CType* %fieldVVV721, i32 0, i32 0
  %t724 = load i32, i32* %fieldVVV723, align 4
  store i32 3347, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.129, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_float

cond_end687:                                      ; preds = %cond_end750, %cond_jump_then685
  %tok778 = load i32, i32* @tok, align 4
  %not_eq779 = icmp ne i32 %tok778, 41
  br i1 %not_eq779, label %cond_jump_then780, label %cond_end781

is_float:                                         ; preds = %cond_else_block686
  %inline_result_variable725 = alloca i32, align 4
  %t726 = alloca i32, align 4
  store i32 %t724, i32* %t726, align 4
  %t727 = load i32, i32* %t726, align 4
  %andtmp728 = and i32 %t727, 15
  store i32 %andtmp728, i32* %bt, align 4
  %bt731 = load i32, i32* %bt, align 4
  %eq732 = icmp eq i32 %bt731, 10
  store i1 %eq732, i1* %oror730, align 1
  br i1 %eq732, label %cond_jump_end734, label %cond_jump_then733

is_float_end:                                     ; preds = %cond_jump_end740
  %inline_result_variable746 = load i32, i32* %inline_result_variable725, align 4
  %icmpA747 = icmp ne i32 %inline_result_variable746, 0
  br i1 %icmpA747, label %cond_jump_then748, label %cond_else_block749

cond_jump_then733:                                ; preds = %is_float
  %bt735 = load i32, i32* %bt, align 4
  %eq736 = icmp eq i32 %bt735, 9
  %oror737 = or i1 %eq732, %eq736
  store i1 %oror737, i1* %oror730, align 1
  br label %cond_jump_end734

cond_jump_end734:                                 ; preds = %cond_jump_then733, %is_float
  %oror_result_value738 = load i1, i1* %oror730, align 1
  store i1 %oror_result_value738, i1* %oror729, align 1
  br i1 %oror_result_value738, label %cond_jump_end740, label %cond_jump_then739

cond_jump_then739:                                ; preds = %cond_jump_end734
  %bt741 = load i32, i32* %bt, align 4
  %eq742 = icmp eq i32 %bt741, 8
  %oror743 = or i1 %oror_result_value738, %eq742
  store i1 %oror743, i1* %oror729, align 1
  br label %cond_jump_end740

cond_jump_end740:                                 ; preds = %cond_jump_then739, %cond_jump_end734
  %oror_result_value744 = load i1, i1* %oror729, align 1
  %icastKX745 = zext i1 %oror_result_value744 to i32
  store i32 %icastKX745, i32* %inline_result_variable725, align 4
  br label %is_float_end

cond_jump_then748:                                ; preds = %is_float_end
  %ret751 = load %SValue, %SValue* %ret, align 16
  %ret752 = load %SValue, %SValue* %ret, align 16
  %fieldVVV753 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 0
  %type754 = load %CType, %CType* %fieldVVV753, align 8
  %fieldVVV755 = getelementptr inbounds %CType, %CType* %fieldVVV753, i32 0, i32 0
  %t756 = load i32, i32* %fieldVVV755, align 4
  %fun_result757 = call i32 @reg_fret(i32 %t756)
  %icastG758 = trunc i32 %fun_result757 to i16
  %fieldTTT759 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 1
  store i16 %icastG758, i16* %fieldTTT759, align 2
  br label %cond_end750

cond_else_block749:                               ; preds = %is_float_end
  %ret760 = load %SValue, %SValue* %ret, align 16
  %fieldVVV761 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 0
  %type762 = load %CType, %CType* %fieldVVV761, align 8
  %fieldVVV763 = getelementptr inbounds %CType, %CType* %fieldVVV761, i32 0, i32 0
  %t764 = load i32, i32* %fieldVVV763, align 4
  %andtmp765 = and i32 %t764, 15
  %eq766 = icmp eq i32 %andtmp765, 12
  br i1 %eq766, label %cond_jump_then767, label %cond_end768

cond_end750:                                      ; preds = %cond_end768, %cond_jump_then748
  %ret773 = load %SValue, %SValue* %ret, align 16
  %fieldVVV774 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 3
  %c775 = load %CValue, %CValue* %fieldVVV774, align 16
  %fieldIII776 = getelementptr inbounds %CValue, %CValue* %fieldVVV774, i32 0, i32 0
  %icastN777 = bitcast fp128* %fieldIII776 to i32*
  store i32 0, i32* %icastN777, align 4
  br label %cond_end687

cond_jump_then767:                                ; preds = %cond_else_block749
  %ret769 = load %SValue, %SValue* %ret, align 16
  %fieldTTT770 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 2
  store i16 2, i16* %fieldTTT770, align 2
  br label %cond_end768

cond_end768:                                      ; preds = %cond_jump_then767, %cond_else_block749
  %ret771 = load %SValue, %SValue* %ret, align 16
  %fieldTTT772 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 1
  store i16 0, i16* %fieldTTT772, align 2
  br label %cond_end750

cond_jump_then780:                                ; preds = %cond_end687
  br label %loop_top_block782

cond_end781:                                      ; preds = %cond_end_block784, %cond_end687
  %sa802 = load %Sym*, %Sym** %sa, align 8
  %icmpB803 = icmp ne %Sym* %sa802, null
  br i1 %icmpB803, label %cond_jump_then804, label %cond_end805

loop_continue_top_block:                          ; preds = %cond_end800
  br label %loop_top_block782

loop_top_block782:                                ; preds = %loop_continue_top_block, %cond_jump_then780
  br i1 true, label %cond_then_block783, label %cond_end_block784

cond_then_block783:                               ; preds = %loop_top_block782
  call void @expr_eq()
  %s785 = load %Sym*, %Sym** %s, align 8
  %sa786 = load %Sym*, %Sym** %sa, align 8
  call void @gfunc_param_typed(%Sym* %s785, %Sym* %sa786)
  %nb_args787 = load i32, i32* %nb_args, align 4
  %add788 = add i32 %nb_args787, 1
  store i32 %add788, i32* %nb_args, align 4
  %nb_args789 = load i32, i32* %nb_args, align 4
  %sub790 = sub i32 %nb_args789, 1
  %sa791 = load %Sym*, %Sym** %sa, align 8
  %icmpB = icmp ne %Sym* %sa791, null
  br i1 %icmpB, label %cond_jump_then792, label %cond_end793

cond_end_block784:                                ; preds = %cond_jump_then799, %loop_top_block782
  br label %cond_end781

cond_jump_then792:                                ; preds = %cond_then_block783
  %sa794 = load %Sym*, %Sym** %sa, align 8
  %fieldLLL795 = getelementptr inbounds %Sym, %Sym* %sa794, i32 0, i32 4
  %next796 = load %Sym*, %Sym** %fieldLLL795, align 8
  store %Sym* %next796, %Sym** %sa, align 8
  br label %cond_end793

cond_end793:                                      ; preds = %cond_jump_then792, %cond_then_block783
  %tok797 = load i32, i32* @tok, align 4
  %eq798 = icmp eq i32 %tok797, 41
  br i1 %eq798, label %cond_jump_then799, label %cond_end800

cond_jump_then799:                                ; preds = %cond_end793
  br label %cond_end_block784

cond_end800:                                      ; preds = %after_break801, %cond_end793
  call void @skip(i32 44)
  br label %loop_continue_top_block

after_break801:                                   ; No predecessors!
  br label %cond_end800

cond_jump_then804:                                ; preds = %cond_end781
  call void (i8*, ...) @error(i8* bitcast ([30 x i8]* @167 to i8*))
  br label %cond_end805

cond_end805:                                      ; preds = %cond_jump_then804, %cond_end781
  call void @skip(i32 41)
  %nocode_wanted806 = load i32, i32* @nocode_wanted, align 4
  %logical_denial807 = icmp eq i32 %nocode_wanted806, 0
  %castOOOO808 = zext i1 %logical_denial807 to i32
  %icmpA809 = icmp ne i32 %castOOOO808, 0
  br i1 %icmpA809, label %cond_jump_then810, label %cond_else_block811

cond_jump_then810:                                ; preds = %cond_end805
  %nb_args813 = load i32, i32* %nb_args, align 4
  call void @gfunc_call(i32 %nb_args813)
  br label %cond_end812

cond_else_block811:                               ; preds = %cond_end805
  %vtop814 = load %SValue*, %SValue** @vtop, align 8
  %nb_args815 = load i32, i32* %nb_args, align 4
  %add816 = add i32 %nb_args815, 1
  %ptrToIntI = ptrtoint %SValue* %vtop814 to i64
  %sext = sext i32 %add816 to i64
  %mul = mul i64 %sext, 64
  %sub817 = sub i64 %ptrToIntI, %mul
  %iintToPtrD = inttoptr i64 %sub817 to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %nb_args818 = load i32, i32* %nb_args, align 4
  %add819 = add i32 %nb_args818, 1
  %ptrToIntC = ptrtoint %SValue* %iintToPtrD to i64
  %sext820 = sext i32 %add819 to i64
  %mul821 = mul i64 %sext820, 64
  %add822 = add i64 %ptrToIntC, %mul821
  %intToPtrB = inttoptr i64 %add822 to %SValue*
  br label %cond_end812

cond_end812:                                      ; preds = %cond_else_block811, %cond_jump_then810
  %ret823 = load %SValue, %SValue* %ret, align 16
  %fieldVVV824 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 0
  %type825 = load %CType, %CType* %fieldVVV824, align 8
  %ret826 = load %SValue, %SValue* %ret, align 16
  %fieldVVV827 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 1
  %r828 = load i16, i16* %fieldVVV827, align 2
  %icastKY829 = zext i16 %r828 to i32
  %ret830 = load %SValue, %SValue* %ret, align 16
  %fieldVVV831 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 3
  %c832 = load %CValue, %CValue* %fieldVVV831, align 16
  call void @vsetc(%CType* %fieldVVV824, i32 %icastKY829, %CValue* %fieldVVV831)
  %vtop833 = load %SValue*, %SValue** @vtop, align 8
  %ret834 = load %SValue, %SValue* %ret, align 16
  %fieldVVV835 = getelementptr inbounds %SValue, %SValue* %ret, i32 0, i32 2
  %r2 = load i16, i16* %fieldVVV835, align 2
  %fieldTU836 = getelementptr inbounds %SValue, %SValue* %vtop833, i32 0, i32 2
  store i16 %r2, i16* %fieldTU836, align 2
  br label %cond_end511

after_break837:                                   ; No predecessors!
  br label %cond_end511
}

define internal void @uneq() {
entry:
  %andand = alloca i1, align 1
  %oror4 = alloca i1, align 1
  %oror3 = alloca i1, align 1
  %oror2 = alloca i1, align 1
  %oror1 = alloca i1, align 1
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  call void @unary()
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 61
  store i1 %eq, i1* %oror4, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %tok5 = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok5, 165
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then6, label %cond_jump_end7

cond_jump_end:                                    ; preds = %cond_jump_end7, %entry
  %oror_result_value = load i1, i1* %oror4, align 1
  store i1 %oror_result_value, i1* %oror3, align 1
  br i1 %oror_result_value, label %cond_jump_end12, label %cond_jump_then11

cond_jump_then6:                                  ; preds = %cond_jump_then
  %tok8 = load i32, i32* @tok, align 4
  %leeq = icmp sle i32 %tok8, 175
  %andand9 = and i1 %gteq_signed, %leeq
  store i1 %andand9, i1* %andand, align 1
  br label %cond_jump_end7

cond_jump_end7:                                   ; preds = %cond_jump_then6, %cond_jump_then
  %andand_result_value = load i1, i1* %andand, align 1
  %oror10 = or i1 %eq, %andand_result_value
  store i1 %oror10, i1* %oror4, align 1
  br label %cond_jump_end

cond_jump_then11:                                 ; preds = %cond_jump_end
  %tok13 = load i32, i32* @tok, align 4
  %eq14 = icmp eq i32 %tok13, 222
  %oror15 = or i1 %oror_result_value, %eq14
  store i1 %oror15, i1* %oror3, align 1
  br label %cond_jump_end12

cond_jump_end12:                                  ; preds = %cond_jump_then11, %cond_jump_end
  %oror_result_value16 = load i1, i1* %oror3, align 1
  store i1 %oror_result_value16, i1* %oror2, align 1
  br i1 %oror_result_value16, label %cond_jump_end18, label %cond_jump_then17

cond_jump_then17:                                 ; preds = %cond_jump_end12
  %tok19 = load i32, i32* @tok, align 4
  %eq20 = icmp eq i32 %tok19, 252
  %oror21 = or i1 %oror_result_value16, %eq20
  store i1 %oror21, i1* %oror2, align 1
  br label %cond_jump_end18

cond_jump_end18:                                  ; preds = %cond_jump_then17, %cond_jump_end12
  %oror_result_value22 = load i1, i1* %oror2, align 1
  store i1 %oror_result_value22, i1* %oror1, align 1
  br i1 %oror_result_value22, label %cond_jump_end24, label %cond_jump_then23

cond_jump_then23:                                 ; preds = %cond_jump_end18
  %tok25 = load i32, i32* @tok, align 4
  %eq26 = icmp eq i32 %tok25, 129
  %oror27 = or i1 %oror_result_value22, %eq26
  store i1 %oror27, i1* %oror1, align 1
  br label %cond_jump_end24

cond_jump_end24:                                  ; preds = %cond_jump_then23, %cond_jump_end18
  %oror_result_value28 = load i1, i1* %oror1, align 1
  store i1 %oror_result_value28, i1* %oror, align 1
  br i1 %oror_result_value28, label %cond_jump_end30, label %cond_jump_then29

cond_jump_then29:                                 ; preds = %cond_jump_end24
  %tok31 = load i32, i32* @tok, align 4
  %eq32 = icmp eq i32 %tok31, 130
  %oror33 = or i1 %oror_result_value28, %eq32
  store i1 %oror33, i1* %oror, align 1
  br label %cond_jump_end30

cond_jump_end30:                                  ; preds = %cond_jump_then29, %cond_jump_end24
  %oror_result_value34 = load i1, i1* %oror, align 1
  br i1 %oror_result_value34, label %cond_jump_then35, label %cond_end

cond_jump_then35:                                 ; preds = %cond_jump_end30
  call void @test_lvalue()
  %tok36 = load i32, i32* @tok, align 4
  store i32 %tok36, i32* %t, align 4
  call void @next()
  %t37 = load i32, i32* %t, align 4
  %eq38 = icmp eq i32 %t37, 61
  br i1 %eq38, label %cond_jump_then39, label %cond_else_block

cond_end:                                         ; preds = %cond_end40, %cond_jump_end30
  ret void

cond_jump_then39:                                 ; preds = %cond_jump_then35
  call void @expr_eq()
  br label %cond_end40

cond_else_block:                                  ; preds = %cond_jump_then35
  call void @vdup()
  call void @expr_eq()
  %t41 = load i32, i32* %t, align 4
  %andtmp = and i32 %t41, 127
  call void @gen_op(i32 %andtmp)
  br label %cond_end40

cond_end40:                                       ; preds = %cond_else_block, %cond_jump_then39
  call void @vstore()
  br label %cond_end
}

define internal void @expr_prod() {
entry:
  %oror1 = alloca i1, align 1
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  call void @uneq()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 42
  store i1 %eq, i1* %oror1, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %loop_top_block
  %tok2 = load i32, i32* @tok, align 4
  %eq3 = icmp eq i32 %tok2, 47
  %oror4 = or i1 %eq, %eq3
  store i1 %oror4, i1* %oror1, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %oror_result_value = load i1, i1* %oror1, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end6, label %cond_jump_then5

cond_jump_then5:                                  ; preds = %cond_jump_end
  %tok7 = load i32, i32* @tok, align 4
  %eq8 = icmp eq i32 %tok7, 37
  %oror9 = or i1 %oror_result_value, %eq8
  store i1 %oror9, i1* %oror, align 1
  br label %cond_jump_end6

cond_jump_end6:                                   ; preds = %cond_jump_then5, %cond_jump_end
  %oror_result_value10 = load i1, i1* %oror, align 1
  br i1 %oror_result_value10, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end6
  %tok11 = load i32, i32* @tok, align 4
  store i32 %tok11, i32* %t, align 4
  call void @next()
  call void @uneq()
  %t12 = load i32, i32* %t, align 4
  call void @gen_op(i32 %t12)
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end6
  ret void
}

define internal void @expr_sum() {
entry:
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  call void @expr_prod()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 43
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %loop_top_block
  %tok1 = load i32, i32* @tok, align 4
  %eq2 = icmp eq i32 %tok1, 45
  %oror3 = or i1 %eq, %eq2
  store i1 %oror3, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  %tok4 = load i32, i32* @tok, align 4
  store i32 %tok4, i32* %t, align 4
  call void @next()
  call void @expr_prod()
  %t5 = load i32, i32* %t, align 4
  call void @gen_op(i32 %t5)
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end
  ret void
}

define internal void @expr_shift() {
entry:
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  call void @expr_sum()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 1
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %loop_top_block
  %tok1 = load i32, i32* @tok, align 4
  %eq2 = icmp eq i32 %tok1, 2
  %oror3 = or i1 %eq, %eq2
  store i1 %oror3, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  %tok4 = load i32, i32* @tok, align 4
  store i32 %tok4, i32* %t, align 4
  call void @next()
  call void @expr_sum()
  %t5 = load i32, i32* %t, align 4
  call void @gen_op(i32 %t5)
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end
  ret void
}

define internal void @expr_cmp() {
entry:
  %andand = alloca i1, align 1
  %oror1 = alloca i1, align 1
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  call void @expr_shift()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %gteq_signed = icmp sge i32 %tok, 150
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %loop_top_block
  %tok2 = load i32, i32* @tok, align 4
  %leeq = icmp sle i32 %tok2, 159
  %andand3 = and i1 %gteq_signed, %leeq
  store i1 %andand3, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror1, align 1
  br i1 %andand_result_value, label %cond_jump_end5, label %cond_jump_then4

cond_jump_then4:                                  ; preds = %cond_jump_end
  %tok6 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok6, 146
  %oror7 = or i1 %andand_result_value, %eq
  store i1 %oror7, i1* %oror1, align 1
  br label %cond_jump_end5

cond_jump_end5:                                   ; preds = %cond_jump_then4, %cond_jump_end
  %oror_result_value = load i1, i1* %oror1, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end9, label %cond_jump_then8

cond_jump_then8:                                  ; preds = %cond_jump_end5
  %tok10 = load i32, i32* @tok, align 4
  %eq11 = icmp eq i32 %tok10, 147
  %oror12 = or i1 %oror_result_value, %eq11
  store i1 %oror12, i1* %oror, align 1
  br label %cond_jump_end9

cond_jump_end9:                                   ; preds = %cond_jump_then8, %cond_jump_end5
  %oror_result_value13 = load i1, i1* %oror, align 1
  br i1 %oror_result_value13, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end9
  %tok14 = load i32, i32* @tok, align 4
  store i32 %tok14, i32* %t, align 4
  call void @next()
  call void @expr_shift()
  %t15 = load i32, i32* %t, align 4
  call void @gen_op(i32 %t15)
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end9
  ret void
}

define internal void @expr_cmpeq() {
entry:
  %oror = alloca i1, align 1
  %t = alloca i32, align 4
  call void @expr_cmp()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 148
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %loop_top_block
  %tok1 = load i32, i32* @tok, align 4
  %eq2 = icmp eq i32 %tok1, 149
  %oror3 = or i1 %eq, %eq2
  store i1 %oror3, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end
  %tok4 = load i32, i32* @tok, align 4
  store i32 %tok4, i32* %t, align 4
  call void @next()
  call void @expr_cmp()
  %t5 = load i32, i32* %t, align 4
  call void @gen_op(i32 %t5)
  br label %loop_top_block

cond_end_block:                                   ; preds = %cond_jump_end
  ret void
}

define internal void @expr_and() {
entry:
  call void @expr_cmpeq()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 38
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @next()
  call void @expr_cmpeq()
  call void @gen_op(i32 38)
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define internal void @expr_xor() {
entry:
  call void @expr_and()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 94
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @next()
  call void @expr_and()
  call void @gen_op(i32 94)
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define internal void @expr_or() {
entry:
  call void @expr_xor()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 124
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @next()
  call void @expr_xor()
  call void @gen_op(i32 124)
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define internal void @expr_land_const() {
entry:
  call void @expr_or()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 160
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @next()
  call void @expr_or()
  call void @gen_op(i32 160)
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define internal void @expr_lor_const() {
entry:
  call void @expr_land_const()
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_then_block, %entry
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 161
  br i1 %eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  call void @next()
  call void @expr_land_const()
  call void @gen_op(i32 161)
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define internal void @expr_land() {
entry:
  %t = alloca i32, align 4
  call void @expr_or()
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 160
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store i32 0, i32* %t, align 4
  call void @save_regs(i32 1)
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end_block, %entry
  ret void

loop_continue_top_block:                          ; preds = %cond_end4
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %t1 = load i32, i32* %t, align 4
  %fun_result = call i32 @gtst(i32 1, i32 %t1)
  store i32 %fun_result, i32* %t, align 4
  %tok2 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok2, 160
  br i1 %not_eq, label %cond_jump_then3, label %cond_end4

cond_end_block:                                   ; preds = %cond_jump_then3, %loop_top_block
  br label %cond_end

cond_jump_then3:                                  ; preds = %cond_then_block
  %t5 = load i32, i32* %t, align 4
  call void @vseti(i32 245, i32 %t5)
  br label %cond_end_block

cond_end4:                                        ; preds = %after_break, %cond_then_block
  call void @next()
  call void @expr_or()
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end4
}

define internal void @expr_lor() {
entry:
  %t = alloca i32, align 4
  call void @expr_land()
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 161
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store i32 0, i32* %t, align 4
  call void @save_regs(i32 1)
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end_block, %entry
  ret void

loop_continue_top_block:                          ; preds = %cond_end4
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %t1 = load i32, i32* %t, align 4
  %fun_result = call i32 @gtst(i32 0, i32 %t1)
  store i32 %fun_result, i32* %t, align 4
  %tok2 = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok2, 161
  br i1 %not_eq, label %cond_jump_then3, label %cond_end4

cond_end_block:                                   ; preds = %cond_jump_then3, %loop_top_block
  br label %cond_end

cond_jump_then3:                                  ; preds = %cond_then_block
  %t5 = load i32, i32* %t, align 4
  call void @vseti(i32 244, i32 %t5)
  br label %cond_end_block

cond_end4:                                        ; preds = %after_break, %cond_then_block
  call void @next()
  call void @expr_land()
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end4
}

define internal void @expr_const1() {
entry:
  %a = alloca i32, align 4
  %const_wanted = load i32, i32* @const_wanted, align 4
  store i32 %const_wanted, i32* %a, align 4
  store i32 1, i32* @const_wanted, align 4
  call void @expr_eq()
  %a1 = load i32, i32* %a, align 4
  store i32 %a1, i32* @const_wanted, align 4
  ret void
}

define internal i32 @is_label() {
entry:
  %q = alloca i32*, align 8
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %last_tok = alloca i32, align 4
  %tok = load i32, i32* @tok, align 4
  %le = icmp slt i32 %tok, 313
  br i1 %le, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 0

cond_end:                                         ; preds = %entry
  %tok1 = load i32, i32* @tok, align 4
  store i32 %tok1, i32* %last_tok, align 4
  call void @next()
  %tok2 = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok2, 58
  br i1 %eq, label %cond_jump_then3, label %cond_else_block

cond_jump_then3:                                  ; preds = %cond_end
  call void @next()
  %last_tok5 = load i32, i32* %last_tok, align 4
  ret i32 %last_tok5

cond_else_block:                                  ; preds = %cond_end
  %last_tok6 = load i32, i32* %last_tok, align 4
  store i32 3785, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.134, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %unget_tok

cond_end4:                                        ; No predecessors!
  ret i32 0

unget_tok:                                        ; preds = %cond_else_block
  %last_tok7 = alloca i32, align 4
  store i32 %last_tok6, i32* %last_tok7, align 4
  %macro_ptr = load i32*, i32** @macro_ptr, align 8
  store i32* %macro_ptr, i32** @unget_saved_macro_ptr, align 8
  store i32 1, i32* @unget_buffer_enabled, align 4
  store i32* getelementptr inbounds ([5 x i32], [5 x i32]* @unget_saved_buffer, i32 0, i32 0), i32** %q, align 8
  %q8 = load i32*, i32** %q, align 8
  store i32* %q8, i32** @macro_ptr, align 8
  %q9 = load i32*, i32** %q, align 8
  %ptrToIntC = ptrtoint i32* %q9 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i32*
  store i32* %intToPtrB, i32** %q, align 8
  %q10 = load i32*, i32** %q, align 8
  %ptrToIntI = ptrtoint i32* %q10 to i64
  %sub = sub i64 %ptrToIntI, 4
  %iintToPtrD = inttoptr i64 %sub to i32*
  %tok11 = load i32, i32* @tok, align 4
  store i32 %tok11, i32* %iintToPtrD, align 4
  %tok12 = load i32, i32* @tok, align 4
  store i32 3792, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.135, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %tok_ext_size

unget_tok_end:                                    ; preds = %cond_end_block
  ret i32 0

tok_ext_size:                                     ; preds = %unget_tok
  %inline_result_variable = alloca i32, align 4
  %t = alloca i32, align 4
  store i32 %tok12, i32* %t, align 4
  %t13 = load i32, i32* %t, align 4
  %eqtmp = icmp eq i32 %t13, 179
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX14

tok_ext_size_end:                                 ; preds = %end_blockX, %cond_then_block41, %cond_then_block38, %cond_then_block31, %cond_then_block24, %cond_then_block
  %inline_result_variable43 = load i32, i32* %inline_result_variable, align 4
  %sub44 = sub i32 %inline_result_variable43, 1
  store i32 %sub44, i32* %n, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block

end_blockX:                                       ; preds = %cond_else_blockX42
  br label %tok_ext_size_end

cond_then_block:                                  ; preds = %cond_else_blockX20, %cond_else_blockX18, %cond_else_blockX16, %cond_else_blockX14, %cond_else_blockX, %tok_ext_size
  store i32 1, i32* %inline_result_variable, align 4
  br label %tok_ext_size_end
  br label %cond_else_blockX25

cond_else_blockX:                                 ; preds = %tok_ext_size
  %eqtmp15 = icmp eq i32 %t13, 200
  br i1 %eqtmp15, label %cond_then_block, label %cond_else_blockX14
  br label %cond_else_blockX16

cond_else_blockX14:                               ; preds = %cond_else_blockX, %tok_ext_size
  %eqtmp17 = icmp eq i32 %t13, 180
  br i1 %eqtmp17, label %cond_then_block, label %cond_else_blockX16
  br label %cond_else_blockX18

cond_else_blockX16:                               ; preds = %cond_else_blockX14, %cond_else_blockX
  %eqtmp19 = icmp eq i32 %t13, 183
  br i1 %eqtmp19, label %cond_then_block, label %cond_else_blockX18
  br label %cond_else_blockX20

cond_else_blockX18:                               ; preds = %cond_else_blockX16, %cond_else_blockX14
  %eqtmp21 = icmp eq i32 %t13, 185
  br i1 %eqtmp21, label %cond_then_block, label %cond_else_blockX20
  br label %cond_else_blockX22

cond_else_blockX20:                               ; preds = %cond_else_blockX18, %cond_else_blockX16
  %eqtmp23 = icmp eq i32 %t13, 186
  br i1 %eqtmp23, label %cond_then_block, label %cond_else_blockX22

cond_else_blockX22:                               ; preds = %cond_else_blockX20, %cond_else_blockX18
  %eqtmp26 = icmp eq i32 %t13, 181
  br i1 %eqtmp26, label %cond_then_block24, label %cond_else_blockX25
  br label %cond_else_blockX27

cond_then_block24:                                ; preds = %cond_else_blockX27, %cond_else_blockX25, %cond_else_blockX22
  call void (i8*, ...) @error(i8* bitcast ([18 x i8]* @169 to i8*))
  store i32 1, i32* %inline_result_variable, align 4
  br label %tok_ext_size_end
  br label %cond_then_block31

cond_else_blockX25:                               ; preds = %cond_else_blockX22, %cond_then_block
  %eqtmp28 = icmp eq i32 %t13, 184
  br i1 %eqtmp28, label %cond_then_block24, label %cond_else_blockX27
  br label %cond_else_blockX29

cond_else_blockX27:                               ; preds = %cond_else_blockX25, %cond_else_blockX22
  %eqtmp30 = icmp eq i32 %t13, 206
  br i1 %eqtmp30, label %cond_then_block24, label %cond_else_blockX29

cond_else_blockX29:                               ; preds = %cond_else_blockX27, %cond_else_blockX25
  %eqtmp33 = icmp eq i32 %t13, 192
  br i1 %eqtmp33, label %cond_then_block31, label %cond_else_blockX32
  br label %cond_then_block31

cond_then_block31:                                ; preds = %cond_else_blockX34, %cond_else_blockX32, %cond_else_blockX32, %cond_else_blockX29, %cond_else_blockX29, %cond_then_block24
  store i32 2, i32* %inline_result_variable, align 4
  br label %tok_ext_size_end
  br label %cond_then_block38

cond_else_blockX32:                               ; preds = %cond_else_blockX29
  %eqtmp35 = icmp eq i32 %t13, 201
  br i1 %eqtmp35, label %cond_then_block31, label %cond_else_blockX34
  br label %cond_then_block31

cond_else_blockX34:                               ; preds = %cond_else_blockX32
  %eqtmp37 = icmp eq i32 %t13, 202
  br i1 %eqtmp37, label %cond_then_block31, label %cond_else_blockX36

cond_else_blockX36:                               ; preds = %cond_else_blockX34
  %eqtmp40 = icmp eq i32 %t13, 193
  br i1 %eqtmp40, label %cond_then_block38, label %cond_else_blockX39

cond_then_block38:                                ; preds = %cond_else_blockX36, %cond_then_block31
  store i32 4, i32* %inline_result_variable, align 4
  br label %tok_ext_size_end
  br label %cond_then_block41

cond_else_blockX39:                               ; preds = %cond_else_blockX36
  br label %cond_then_block41

cond_then_block41:                                ; preds = %cond_else_blockX39, %cond_then_block38
  store i32 0, i32* %inline_result_variable, align 4
  br label %tok_ext_size_end
  br label %cond_else_blockX42

cond_else_blockX42:                               ; preds = %cond_then_block41
  br label %end_blockX

loop_continue_top_block:                          ; preds = %cond_then_block48
  %i58 = load i32, i32* %i, align 4
  %add59 = add i32 %i58, 1
  store i32 %add59, i32* %i, align 4
  %i60 = load i32, i32* %i, align 4
  %sub61 = sub i32 %i60, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %tok_ext_size_end
  %i45 = load i32, i32* %i, align 4
  %n46 = load i32, i32* %n, align 4
  %le47 = icmp slt i32 %i45, %n46
  br i1 %le47, label %cond_then_block48, label %cond_end_block

cond_then_block48:                                ; preds = %loop_top_block
  %q49 = load i32*, i32** %q, align 8
  %ptrToIntC50 = ptrtoint i32* %q49 to i64
  %add51 = add i64 %ptrToIntC50, 4
  %intToPtrB52 = inttoptr i64 %add51 to i32*
  store i32* %intToPtrB52, i32** %q, align 8
  %q53 = load i32*, i32** %q, align 8
  %ptrToIntI54 = ptrtoint i32* %q53 to i64
  %sub55 = sub i64 %ptrToIntI54, 4
  %iintToPtrD56 = inttoptr i64 %sub55 to i32*
  %tokc = load %CValue, %CValue* @tokc, align 16
  %i57 = load i32, i32* %i, align 4
  %gepOL = getelementptr [1 x i32], [1 x i32]* bitcast (%CValue* @tokc to [1 x i32]*), i32 0, i32 %i57
  %elementXXX = load i32, i32* %gepOL, align 4
  store i32 %elementXXX, i32* %iintToPtrD56, align 4
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %q62 = load i32*, i32** %q, align 8
  store i32 0, i32* %q62, align 4
  %last_tok63 = load i32, i32* %last_tok7, align 4
  store i32 %last_tok63, i32* @tok, align 4
  br label %unget_tok_end
}

define internal void @decl_designator(%CType* %0, %Section* %1, i64 %2, i32* %3, %Sym** %4, i32 %5) {
entry:
  %i = alloca i32, align 4
  %dst = alloca i8*, align 8
  %src = alloca i8*, align 8
  %c_end = alloca i64, align 8
  %andand276 = alloca i1, align 1
  %andand66 = alloca i1, align 1
  %oror61 = alloca i1, align 1
  %oror60 = alloca i1, align 1
  %andand47 = alloca i1, align 1
  %andand30 = alloca i1, align 1
  %oror26 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %type17 = alloca %CType, align 8
  %castXXXX = bitcast %CType* %type17 to i8*
  %6 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %elem_size = alloca i32, align 4
  %nb_elems = alloca i32, align 4
  %l = alloca i32, align 4
  %align = alloca i32, align 4
  %index_last = alloca i32, align 4
  %index = alloca i32, align 4
  %notfirst = alloca i32, align 4
  %f = alloca %Sym*, align 8
  %s = alloca %Sym*, align 8
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %sec = alloca %Section*, align 8
  %sec2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec2, align 8
  %c = alloca i64, align 8
  %c3 = alloca i64*, align 8
  store i64 %2, i64* %c, align 4
  store i64* %c, i64** %c3, align 8
  %cur_index = alloca i32*, align 8
  %cur_index4 = alloca i32**, align 8
  store i32* %3, i32** %cur_index, align 8
  store i32** %cur_index, i32*** %cur_index4, align 8
  %cur_field = alloca %Sym**, align 8
  %cur_field5 = alloca %Sym***, align 8
  store %Sym** %4, %Sym*** %cur_field, align 8
  store %Sym*** %cur_field, %Sym**** %cur_field5, align 8
  %size_only = alloca i32, align 4
  %size_only6 = alloca i32*, align 8
  store i32 %5, i32* %size_only, align 4
  store i32* %size_only, i32** %size_only6, align 8
  store i32 0, i32* %notfirst, align 4
  store i32 0, i32* %elem_size, align 4
  store i32 1, i32* %nb_elems, align 4
  %gnu_ext = load i32, i32* @gnu_ext, align 4
  %icmpA = icmp ne i32 %gnu_ext, 0
  store i1 %icmpA, i1* %andand, align 1
  br i1 %icmpA, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %fun_result = call i32 @is_label()
  store i32 %fun_result, i32* %l, align 4
  %not_eq = icmp ne i32 %fun_result, 0
  %andand8 = and i1 %icmpA, %not_eq
  store i1 %andand8, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then9, label %cond_end

cond_jump_then9:                                  ; preds = %cond_jump_end
  br label %decl_designator.struct_field
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then9, %cond_jump_end
  br label %loop_top_block

decl_designator.struct_field:                     ; preds = %cond_else_block, %cond_jump_then9
  %type128 = load %CType*, %CType** %type, align 8
  %fieldLLL129 = getelementptr inbounds %CType, %CType* %type128, i32 0, i32 0
  %t130 = load i32, i32* %fieldLLL129, align 4
  %andtmp131 = and i32 %t130, 15
  %not_eq132 = icmp ne i32 %andtmp131, 7
  br i1 %not_eq132, label %cond_jump_then133, label %cond_end134

loop_top_block:                                   ; preds = %cond_end18, %cond_end
  %tok = load i32, i32* @tok, align 4
  %eq = icmp eq i32 %tok, 91
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end11, label %cond_jump_then10

cond_jump_then10:                                 ; preds = %loop_top_block
  %tok12 = load i32, i32* @tok, align 4
  %eq13 = icmp eq i32 %tok12, 46
  %oror14 = or i1 %eq, %eq13
  store i1 %oror14, i1* %oror, align 1
  br label %cond_jump_end11

cond_jump_end11:                                  ; preds = %cond_jump_then10, %loop_top_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end11
  %tok15 = load i32, i32* @tok, align 4
  %eq16 = icmp eq i32 %tok15, 91
  br i1 %eq16, label %cond_jump_then17, label %cond_else_block

cond_end_block:                                   ; preds = %cond_jump_then125, %cond_jump_end11
  %notfirst190 = load i32, i32* %notfirst, align 4
  %icmpA191 = icmp ne i32 %notfirst190, 0
  br i1 %icmpA191, label %cond_jump_then192, label %cond_else_block193

cond_jump_then17:                                 ; preds = %cond_then_block
  %type19 = load %CType*, %CType** %type, align 8
  %fieldLLL = getelementptr inbounds %CType, %CType* %type19, i32 0, i32 0
  %t = load i32, i32* %fieldLLL, align 4
  %andtmp = and i32 %t, 32
  %logical_denial = icmp eq i32 %andtmp, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA20 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA20, label %cond_jump_then21, label %cond_end22

cond_else_block:                                  ; preds = %cond_then_block
  call void @next()
  %tok127 = load i32, i32* @tok, align 4
  store i32 %tok127, i32* %l, align 4
  call void @next()
  br label %decl_designator.struct_field

cond_end18:                                       ; preds = %cond_end166, %cond_end126
  store i32 1, i32* %notfirst, align 4
  br label %loop_top_block

cond_jump_then21:                                 ; preds = %cond_jump_then17
  call void @expect(i8* bitcast ([11 x i8]* @182 to i8*))
  br label %cond_end22

cond_end22:                                       ; preds = %cond_jump_then21, %cond_jump_then17
  %type23 = load %CType*, %CType** %type, align 8
  %fieldLLL24 = getelementptr inbounds %CType, %CType* %type23, i32 0, i32 1
  %ref = load %Sym*, %Sym** %fieldLLL24, align 8
  store %Sym* %ref, %Sym** %s, align 8
  call void @next()
  %fun_result25 = call i32 @expr_const()
  store i32 %fun_result25, i32* %index, align 4
  %index27 = load i32, i32* %index, align 4
  %le = icmp slt i32 %index27, 0
  store i1 %le, i1* %oror26, align 1
  br i1 %le, label %cond_jump_end29, label %cond_jump_then28

cond_jump_then28:                                 ; preds = %cond_end22
  %s31 = load %Sym*, %Sym** %s, align 8
  %fieldLLL32 = getelementptr inbounds %Sym, %Sym* %s31, i32 0, i32 2
  %c33 = load i64, i64* %fieldLLL32, align 4
  %gteq_signed = icmp sge i64 %c33, 0
  store i1 %gteq_signed, i1* %andand30, align 1
  br i1 %gteq_signed, label %cond_jump_then34, label %cond_jump_end35

cond_jump_end29:                                  ; preds = %cond_jump_end35, %cond_end22
  %oror_result_value44 = load i1, i1* %oror26, align 1
  br i1 %oror_result_value44, label %cond_jump_then45, label %cond_end46

cond_jump_then34:                                 ; preds = %cond_jump_then28
  %index36 = load i32, i32* %index, align 4
  %s37 = load %Sym*, %Sym** %s, align 8
  %fieldLLL38 = getelementptr inbounds %Sym, %Sym* %s37, i32 0, i32 2
  %c39 = load i64, i64* %fieldLLL38, align 4
  %icastM = trunc i64 %c39 to i32
  %gteq_signed40 = icmp sge i32 %index36, %icastM
  %andand41 = and i1 %gteq_signed, %gteq_signed40
  store i1 %andand41, i1* %andand30, align 1
  br label %cond_jump_end35

cond_jump_end35:                                  ; preds = %cond_jump_then34, %cond_jump_then28
  %andand_result_value42 = load i1, i1* %andand30, align 1
  %oror43 = or i1 %le, %andand_result_value42
  store i1 %oror43, i1* %oror26, align 1
  br label %cond_jump_end29

cond_jump_then45:                                 ; preds = %cond_jump_end29
  call void @expect(i8* bitcast ([14 x i8]* @183 to i8*))
  br label %cond_end46

cond_end46:                                       ; preds = %cond_jump_then45, %cond_jump_end29
  %tok48 = load i32, i32* @tok, align 4
  %eq49 = icmp eq i32 %tok48, 204
  store i1 %eq49, i1* %andand47, align 1
  br i1 %eq49, label %cond_jump_then50, label %cond_jump_end51

cond_jump_then50:                                 ; preds = %cond_end46
  %gnu_ext52 = load i32, i32* @gnu_ext, align 4
  %icmpA53 = icmp ne i32 %gnu_ext52, 0
  %andand54 = and i1 %eq49, %icmpA53
  store i1 %andand54, i1* %andand47, align 1
  br label %cond_jump_end51

cond_jump_end51:                                  ; preds = %cond_jump_then50, %cond_end46
  %andand_result_value55 = load i1, i1* %andand47, align 1
  br i1 %andand_result_value55, label %cond_jump_then56, label %cond_else_block57

cond_jump_then56:                                 ; preds = %cond_jump_end51
  call void @next()
  %fun_result59 = call i32 @expr_const()
  store i32 %fun_result59, i32* %index_last, align 4
  %index_last62 = load i32, i32* %index_last, align 4
  %le63 = icmp slt i32 %index_last62, 0
  store i1 %le63, i1* %oror61, align 1
  br i1 %le63, label %cond_jump_end65, label %cond_jump_then64

cond_else_block57:                                ; preds = %cond_jump_end51
  %index92 = load i32, i32* %index, align 4
  store i32 %index92, i32* %index_last, align 4
  br label %cond_end58

cond_end58:                                       ; preds = %cond_else_block57, %cond_end91
  call void @skip(i32 93)
  %notfirst93 = load i32, i32* %notfirst, align 4
  %logical_denial94 = icmp eq i32 %notfirst93, 0
  %castOOOO95 = zext i1 %logical_denial94 to i32
  %icmpA96 = icmp ne i32 %castOOOO95, 0
  br i1 %icmpA96, label %cond_jump_then97, label %cond_end98

cond_jump_then64:                                 ; preds = %cond_jump_then56
  %s67 = load %Sym*, %Sym** %s, align 8
  %fieldLLL68 = getelementptr inbounds %Sym, %Sym* %s67, i32 0, i32 2
  %c69 = load i64, i64* %fieldLLL68, align 4
  %gteq_signed70 = icmp sge i64 %c69, 0
  store i1 %gteq_signed70, i1* %andand66, align 1
  br i1 %gteq_signed70, label %cond_jump_then71, label %cond_jump_end72

cond_jump_end65:                                  ; preds = %cond_jump_end72, %cond_jump_then56
  %oror_result_value82 = load i1, i1* %oror61, align 1
  store i1 %oror_result_value82, i1* %oror60, align 1
  br i1 %oror_result_value82, label %cond_jump_end84, label %cond_jump_then83

cond_jump_then71:                                 ; preds = %cond_jump_then64
  %index_last73 = load i32, i32* %index_last, align 4
  %s74 = load %Sym*, %Sym** %s, align 8
  %fieldLLL75 = getelementptr inbounds %Sym, %Sym* %s74, i32 0, i32 2
  %c76 = load i64, i64* %fieldLLL75, align 4
  %icastM77 = trunc i64 %c76 to i32
  %gteq_signed78 = icmp sge i32 %index_last73, %icastM77
  %andand79 = and i1 %gteq_signed70, %gteq_signed78
  store i1 %andand79, i1* %andand66, align 1
  br label %cond_jump_end72

cond_jump_end72:                                  ; preds = %cond_jump_then71, %cond_jump_then64
  %andand_result_value80 = load i1, i1* %andand66, align 1
  %oror81 = or i1 %le63, %andand_result_value80
  store i1 %oror81, i1* %oror61, align 1
  br label %cond_jump_end65

cond_jump_then83:                                 ; preds = %cond_jump_end65
  %index_last85 = load i32, i32* %index_last, align 4
  %index86 = load i32, i32* %index, align 4
  %le87 = icmp slt i32 %index_last85, %index86
  %oror88 = or i1 %oror_result_value82, %le87
  store i1 %oror88, i1* %oror60, align 1
  br label %cond_jump_end84

cond_jump_end84:                                  ; preds = %cond_jump_then83, %cond_jump_end65
  %oror_result_value89 = load i1, i1* %oror60, align 1
  br i1 %oror_result_value89, label %cond_jump_then90, label %cond_end91

cond_jump_then90:                                 ; preds = %cond_jump_end84
  call void @expect(i8* bitcast ([14 x i8]* @184 to i8*))
  br label %cond_end91

cond_end91:                                       ; preds = %cond_jump_then90, %cond_jump_end84
  br label %cond_end58

cond_jump_then97:                                 ; preds = %cond_end58
  %cur_index99 = load i32*, i32** %cur_index, align 8
  %index_last100 = load i32, i32* %index_last, align 4
  store i32 %index_last100, i32* %cur_index99, align 4
  br label %cond_end98

cond_end98:                                       ; preds = %cond_jump_then97, %cond_end58
  %type101 = load %CType*, %CType** %type, align 8
  store i32 4173, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.137, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type

pointed_type:                                     ; preds = %cond_end98
  %inline_result_variable = alloca %CType*, align 8
  %type102 = alloca %CType*, align 8
  store %CType* %type101, %CType** %type102, align 8
  %type103 = load %CType*, %CType** %type102, align 8
  %fieldLLL104 = getelementptr inbounds %CType, %CType* %type103, i32 0, i32 1
  %ref105 = load %Sym*, %Sym** %fieldLLL104, align 8
  %fieldLLL106 = getelementptr inbounds %Sym, %Sym* %ref105, i32 0, i32 3
  %type107 = load %CType, %CType* %fieldLLL106, align 8
  store %CType* %fieldLLL106, %CType** %inline_result_variable, align 8
  br label %pointed_type_end

pointed_type_end:                                 ; preds = %pointed_type
  %inline_result_variable108 = load %CType*, %CType** %inline_result_variable, align 8
  store %CType* %inline_result_variable108, %CType** %type, align 8
  %type109 = load %CType*, %CType** %type, align 8
  %align110 = load i32, i32* %align, align 4
  %fun_result111 = call i32 @type_size(%CType* %type109, i32* %align)
  store i32 %fun_result111, i32* %elem_size, align 4
  %c112 = load i64, i64* %c, align 4
  %index113 = load i32, i32* %index, align 4
  %elem_size114 = load i32, i32* %elem_size, align 4
  %mul = mul i32 %index113, %elem_size114
  %icastD = sext i32 %mul to i64
  %add = add i64 %c112, %icastD
  store i64 %add, i64* %c, align 4
  %index115 = load i32, i32* %index, align 4
  %elem_size116 = load i32, i32* %elem_size, align 4
  %mul117 = mul i32 %index115, %elem_size116
  %icastD118 = sext i32 %mul117 to i64
  %sub = sub i64 %add, %icastD118
  %index_last119 = load i32, i32* %index_last, align 4
  %index120 = load i32, i32* %index, align 4
  %sub121 = sub i32 %index_last119, %index120
  %add122 = add i32 %sub121, 1
  store i32 %add122, i32* %nb_elems, align 4
  %nb_elems123 = load i32, i32* %nb_elems, align 4
  %not_eq124 = icmp ne i32 %nb_elems123, 1
  br i1 %not_eq124, label %cond_jump_then125, label %cond_end126

cond_jump_then125:                                ; preds = %pointed_type_end
  store i32 1, i32* %notfirst, align 4
  br label %cond_end_block

cond_end126:                                      ; preds = %after_break, %pointed_type_end
  br label %cond_end18

after_break:                                      ; No predecessors!
  br label %cond_end126

cond_jump_then133:                                ; preds = %decl_designator.struct_field
  call void @expect(i8* bitcast ([18 x i8]* @185 to i8*))
  br label %cond_end134

cond_end134:                                      ; preds = %cond_jump_then133, %decl_designator.struct_field
  %type135 = load %CType*, %CType** %type, align 8
  %fieldLLL136 = getelementptr inbounds %CType, %CType* %type135, i32 0, i32 1
  %ref137 = load %Sym*, %Sym** %fieldLLL136, align 8
  store %Sym* %ref137, %Sym** %s, align 8
  %l138 = load i32, i32* %l, align 4
  %ortmp = or i32 %l138, 536870912
  store i32 %ortmp, i32* %l, align 4
  %s139 = load %Sym*, %Sym** %s, align 8
  %fieldLLL140 = getelementptr inbounds %Sym, %Sym* %s139, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL140, align 8
  store %Sym* %next, %Sym** %f, align 8
  br label %loop_top_block141

loop_top_block141:                                ; preds = %cond_end150, %cond_end134
  %f142 = load %Sym*, %Sym** %f, align 8
  %icmpB = icmp ne %Sym* %f142, null
  br i1 %icmpB, label %cond_then_block143, label %cond_end_block144

cond_then_block143:                               ; preds = %loop_top_block141
  %f145 = load %Sym*, %Sym** %f, align 8
  %fieldLLL146 = getelementptr inbounds %Sym, %Sym* %f145, i32 0, i32 0
  %v = load i32, i32* %fieldLLL146, align 4
  %l147 = load i32, i32* %l, align 4
  %eq148 = icmp eq i32 %v, %l147
  br i1 %eq148, label %cond_jump_then149, label %cond_end150

cond_end_block144:                                ; preds = %cond_jump_then149, %loop_top_block141
  %f155 = load %Sym*, %Sym** %f, align 8
  %logical_denial156 = icmp eq %Sym* %f155, null
  %castOOOO157 = zext i1 %logical_denial156 to i32
  %icmpA158 = icmp ne i32 %castOOOO157, 0
  br i1 %icmpA158, label %cond_jump_then159, label %cond_end160

cond_jump_then149:                                ; preds = %cond_then_block143
  br label %cond_end_block144

cond_end150:                                      ; preds = %after_break151, %cond_then_block143
  %f152 = load %Sym*, %Sym** %f, align 8
  %fieldLLL153 = getelementptr inbounds %Sym, %Sym* %f152, i32 0, i32 4
  %next154 = load %Sym*, %Sym** %fieldLLL153, align 8
  store %Sym* %next154, %Sym** %f, align 8
  br label %loop_top_block141

after_break151:                                   ; No predecessors!
  br label %cond_end150

cond_jump_then159:                                ; preds = %cond_end_block144
  call void @expect(i8* bitcast ([6 x i8]* @186 to i8*))
  br label %cond_end160

cond_end160:                                      ; preds = %cond_jump_then159, %cond_end_block144
  %notfirst161 = load i32, i32* %notfirst, align 4
  %logical_denial162 = icmp eq i32 %notfirst161, 0
  %castOOOO163 = zext i1 %logical_denial162 to i32
  %icmpA164 = icmp ne i32 %castOOOO163, 0
  br i1 %icmpA164, label %cond_jump_then165, label %cond_end166

cond_jump_then165:                                ; preds = %cond_end160
  %cur_field167 = load %Sym**, %Sym*** %cur_field, align 8
  %f168 = load %Sym*, %Sym** %f, align 8
  store %Sym* %f168, %Sym** %cur_field167, align 8
  br label %cond_end166

cond_end166:                                      ; preds = %cond_jump_then165, %cond_end160
  %f169 = load %Sym*, %Sym** %f, align 8
  %fieldLLL170 = getelementptr inbounds %Sym, %Sym* %f169, i32 0, i32 3
  %type171 = load %CType, %CType* %fieldLLL170, align 8
  store %CType %type171, %CType* %type17, align 8
  %type1172 = load %CType, %CType* %type17, align 8
  %type1173 = load %CType, %CType* %type17, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %type17, i32 0, i32 0
  %t174 = load i32, i32* %fieldVVV, align 4
  %type175 = load %CType*, %CType** %type, align 8
  %fieldLLL176 = getelementptr inbounds %CType, %CType* %type175, i32 0, i32 0
  %t177 = load i32, i32* %fieldLLL176, align 4
  %andtmp178 = and i32 %t177, 1920
  %ortmp179 = or i32 %t174, %andtmp178
  %fieldTTT = getelementptr inbounds %CType, %CType* %type17, i32 0, i32 0
  store i32 %ortmp179, i32* %fieldTTT, align 4
  %type1180 = load %CType, %CType* %type17, align 8
  store %CType* %type17, %CType** %type, align 8
  %c181 = load i64, i64* %c, align 4
  %f182 = load %Sym*, %Sym** %f, align 8
  %fieldLLL183 = getelementptr inbounds %Sym, %Sym* %f182, i32 0, i32 2
  %c184 = load i64, i64* %fieldLLL183, align 4
  %add185 = add i64 %c181, %c184
  store i64 %add185, i64* %c, align 4
  %f186 = load %Sym*, %Sym** %f, align 8
  %fieldLLL187 = getelementptr inbounds %Sym, %Sym* %f186, i32 0, i32 2
  %c188 = load i64, i64* %fieldLLL187, align 4
  %sub189 = sub i64 %add185, %c188
  br label %cond_end18

cond_jump_then192:                                ; preds = %cond_end_block
  %tok195 = load i32, i32* @tok, align 4
  %eq196 = icmp eq i32 %tok195, 61
  br i1 %eq196, label %cond_jump_then197, label %cond_else_block198

cond_else_block193:                               ; preds = %cond_end_block
  %type206 = load %CType*, %CType** %type, align 8
  %fieldLLL207 = getelementptr inbounds %CType, %CType* %type206, i32 0, i32 0
  %t208 = load i32, i32* %fieldLLL207, align 4
  %andtmp209 = and i32 %t208, 32
  %icmpA210 = icmp ne i32 %andtmp209, 0
  br i1 %icmpA210, label %cond_jump_then211, label %cond_else_block212

cond_end194:                                      ; preds = %cond_end213, %cond_end199
  %type272 = load %CType*, %CType** %type, align 8
  %sec273 = load %Section*, %Section** %sec, align 8
  %c274 = load i64, i64* %c, align 4
  %size_only275 = load i32, i32* %size_only, align 4
  call void @decl_initializer(%CType* %type272, %Section* %sec273, i64 %c274, i32 0, i32 %size_only275)
  %size_only277 = load i32, i32* %size_only, align 4
  %logical_denial278 = icmp eq i32 %size_only277, 0
  %castOOOO279 = zext i1 %logical_denial278 to i32
  %icmpA280 = icmp ne i32 %castOOOO279, 0
  store i1 %icmpA280, i1* %andand276, align 1
  br i1 %icmpA280, label %cond_jump_then281, label %cond_jump_end282

cond_jump_then197:                                ; preds = %cond_jump_then192
  call void @next()
  br label %cond_end199

cond_else_block198:                               ; preds = %cond_jump_then192
  %gnu_ext200 = load i32, i32* @gnu_ext, align 4
  %logical_denial201 = icmp eq i32 %gnu_ext200, 0
  %castOOOO202 = zext i1 %logical_denial201 to i32
  %icmpA203 = icmp ne i32 %castOOOO202, 0
  br i1 %icmpA203, label %cond_jump_then204, label %cond_end205

cond_end199:                                      ; preds = %cond_end205, %cond_jump_then197
  br label %cond_end194

cond_jump_then204:                                ; preds = %cond_else_block198
  call void @expect(i8* bitcast ([2 x i8]* @187 to i8*))
  br label %cond_end205

cond_end205:                                      ; preds = %cond_jump_then204, %cond_else_block198
  br label %cond_end199

cond_jump_then211:                                ; preds = %cond_else_block193
  %cur_index214 = load i32*, i32** %cur_index, align 8
  %derefference_valueB = load i32, i32* %cur_index214, align 4
  store i32 %derefference_valueB, i32* %index, align 4
  %type215 = load %CType*, %CType** %type, align 8
  store i32 4219, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.138, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %pointed_type216

cond_else_block212:                               ; preds = %cond_else_block193
  %cur_field241 = load %Sym**, %Sym*** %cur_field, align 8
  %derefference_valueB242 = load %Sym*, %Sym** %cur_field241, align 8
  store %Sym* %derefference_valueB242, %Sym** %f, align 8
  %f243 = load %Sym*, %Sym** %f, align 8
  %logical_denial244 = icmp eq %Sym* %f243, null
  %castOOOO245 = zext i1 %logical_denial244 to i32
  %icmpA246 = icmp ne i32 %castOOOO245, 0
  br i1 %icmpA246, label %cond_jump_then247, label %cond_end248

cond_end213:                                      ; preds = %cond_end248, %pointed_type_end219
  br label %cond_end194

pointed_type216:                                  ; preds = %cond_jump_then211
  %inline_result_variable217 = alloca %CType*, align 8
  %type218 = alloca %CType*, align 8
  store %CType* %type215, %CType** %type218, align 8
  %type220 = load %CType*, %CType** %type218, align 8
  %fieldLLL221 = getelementptr inbounds %CType, %CType* %type220, i32 0, i32 1
  %ref222 = load %Sym*, %Sym** %fieldLLL221, align 8
  %fieldLLL223 = getelementptr inbounds %Sym, %Sym* %ref222, i32 0, i32 3
  %type224 = load %CType, %CType* %fieldLLL223, align 8
  store %CType* %fieldLLL223, %CType** %inline_result_variable217, align 8
  br label %pointed_type_end219

pointed_type_end219:                              ; preds = %pointed_type216
  %inline_result_variable225 = load %CType*, %CType** %inline_result_variable217, align 8
  store %CType* %inline_result_variable225, %CType** %type, align 8
  %c226 = load i64, i64* %c, align 4
  %index227 = load i32, i32* %index, align 4
  %type228 = load %CType*, %CType** %type, align 8
  %align229 = load i32, i32* %align, align 4
  %fun_result230 = call i32 @type_size(%CType* %type228, i32* %align)
  %mul231 = mul i32 %index227, %fun_result230
  %icastD232 = sext i32 %mul231 to i64
  %add233 = add i64 %c226, %icastD232
  store i64 %add233, i64* %c, align 4
  %index234 = load i32, i32* %index, align 4
  %type235 = load %CType*, %CType** %type, align 8
  %align236 = load i32, i32* %align, align 4
  %fun_result237 = call i32 @type_size(%CType* %type235, i32* %align)
  %mul238 = mul i32 %index234, %fun_result237
  %icastD239 = sext i32 %mul238 to i64
  %sub240 = sub i64 %add233, %icastD239
  br label %cond_end213

cond_jump_then247:                                ; preds = %cond_else_block212
  call void (i8*, ...) @error(i8* bitcast ([20 x i8]* @188 to i8*))
  br label %cond_end248

cond_end248:                                      ; preds = %cond_jump_then247, %cond_else_block212
  %f249 = load %Sym*, %Sym** %f, align 8
  %fieldLLL250 = getelementptr inbounds %Sym, %Sym* %f249, i32 0, i32 3
  %type251 = load %CType, %CType* %fieldLLL250, align 8
  store %CType %type251, %CType* %type17, align 8
  %type1252 = load %CType, %CType* %type17, align 8
  %type1253 = load %CType, %CType* %type17, align 8
  %fieldVVV254 = getelementptr inbounds %CType, %CType* %type17, i32 0, i32 0
  %t255 = load i32, i32* %fieldVVV254, align 4
  %type256 = load %CType*, %CType** %type, align 8
  %fieldLLL257 = getelementptr inbounds %CType, %CType* %type256, i32 0, i32 0
  %t258 = load i32, i32* %fieldLLL257, align 4
  %andtmp259 = and i32 %t258, 1920
  %ortmp260 = or i32 %t255, %andtmp259
  %fieldTTT261 = getelementptr inbounds %CType, %CType* %type17, i32 0, i32 0
  store i32 %ortmp260, i32* %fieldTTT261, align 4
  %type1262 = load %CType, %CType* %type17, align 8
  store %CType* %type17, %CType** %type, align 8
  %c263 = load i64, i64* %c, align 4
  %f264 = load %Sym*, %Sym** %f, align 8
  %fieldLLL265 = getelementptr inbounds %Sym, %Sym* %f264, i32 0, i32 2
  %c266 = load i64, i64* %fieldLLL265, align 4
  %add267 = add i64 %c263, %c266
  store i64 %add267, i64* %c, align 4
  %f268 = load %Sym*, %Sym** %f, align 8
  %fieldLLL269 = getelementptr inbounds %Sym, %Sym* %f268, i32 0, i32 2
  %c270 = load i64, i64* %fieldLLL269, align 4
  %sub271 = sub i64 %add267, %c270
  br label %cond_end213

cond_jump_then281:                                ; preds = %cond_end194
  %nb_elems283 = load i32, i32* %nb_elems, align 4
  %gt = icmp sgt i32 %nb_elems283, 1
  %andand284 = and i1 %icmpA280, %gt
  store i1 %andand284, i1* %andand276, align 1
  br label %cond_jump_end282

cond_jump_end282:                                 ; preds = %cond_jump_then281, %cond_end194
  %andand_result_value285 = load i1, i1* %andand276, align 1
  br i1 %andand_result_value285, label %cond_jump_then286, label %cond_end287

cond_jump_then286:                                ; preds = %cond_jump_end282
  %sec288 = load %Section*, %Section** %sec, align 8
  %logical_denial289 = icmp eq %Section* %sec288, null
  %castOOOO290 = zext i1 %logical_denial289 to i32
  %icmpA291 = icmp ne i32 %castOOOO290, 0
  br i1 %icmpA291, label %cond_jump_then292, label %cond_end293

cond_end287:                                      ; preds = %cond_end_block319, %cond_jump_end282
  ret void

cond_jump_then292:                                ; preds = %cond_jump_then286
  call void (i8*, ...) @error(i8* bitcast ([49 x i8]* @189 to i8*))
  br label %cond_end293

cond_end293:                                      ; preds = %cond_jump_then292, %cond_jump_then286
  %c294 = load i64, i64* %c, align 4
  %nb_elems295 = load i32, i32* %nb_elems, align 4
  %elem_size296 = load i32, i32* %elem_size, align 4
  %mul297 = mul i32 %nb_elems295, %elem_size296
  %icastD298 = sext i32 %mul297 to i64
  %add299 = add i64 %c294, %icastD298
  store i64 %add299, i64* %c_end, align 4
  %c_end300 = load i64, i64* %c_end, align 4
  %sec301 = load %Section*, %Section** %sec, align 8
  %fieldLLL302 = getelementptr inbounds %Section, %Section* %sec301, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL302, align 4
  %gt303 = icmp ugt i64 %c_end300, %data_allocated
  br i1 %gt303, label %cond_jump_then304, label %cond_end305

cond_jump_then304:                                ; preds = %cond_end293
  %sec306 = load %Section*, %Section** %sec, align 8
  %c_end307 = load i64, i64* %c_end, align 4
  call void @section_realloc(%Section* %sec306, i64 %c_end307)
  br label %cond_end305

cond_end305:                                      ; preds = %cond_jump_then304, %cond_end293
  %sec308 = load %Section*, %Section** %sec, align 8
  %fieldLLL309 = getelementptr inbounds %Section, %Section* %sec308, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL309, align 8
  %c310 = load i64, i64* %c, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul311 = mul i64 %c310, 1
  %add312 = add i64 %ptrToIntC, %mul311
  %intToPtrB = inttoptr i64 %add312 to i8*
  store i8* %intToPtrB, i8** %src, align 8
  %src313 = load i8*, i8** %src, align 8
  store i8* %src313, i8** %dst, align 8
  store i32 1, i32* %i, align 4
  br label %loop_top_block314

loop_continue_top_block:                          ; preds = %cond_then_block318
  %i335 = load i32, i32* %i, align 4
  %add336 = add i32 %i335, 1
  store i32 %add336, i32* %i, align 4
  %i337 = load i32, i32* %i, align 4
  %sub338 = sub i32 %i337, 1
  br label %loop_top_block314

loop_top_block314:                                ; preds = %loop_continue_top_block, %cond_end305
  %i315 = load i32, i32* %i, align 4
  %nb_elems316 = load i32, i32* %nb_elems, align 4
  %le317 = icmp slt i32 %i315, %nb_elems316
  br i1 %le317, label %cond_then_block318, label %cond_end_block319

cond_then_block318:                               ; preds = %loop_top_block314
  %dst320 = load i8*, i8** %dst, align 8
  %elem_size321 = load i32, i32* %elem_size, align 4
  %ptrToIntC322 = ptrtoint i8* %dst320 to i64
  %sext = sext i32 %elem_size321 to i64
  %mul323 = mul i64 %sext, 1
  %add324 = add i64 %ptrToIntC322, %mul323
  %intToPtrB325 = inttoptr i64 %add324 to i8*
  store i8* %intToPtrB325, i8** %dst, align 8
  %elem_size326 = load i32, i32* %elem_size, align 4
  %ptrToIntI = ptrtoint i8* %intToPtrB325 to i64
  %sext327 = sext i32 %elem_size326 to i64
  %mul328 = mul i64 %sext327, 1
  %sub329 = sub i64 %ptrToIntI, %mul328
  %iintToPtrD = inttoptr i64 %sub329 to i8*
  %dst330 = load i8*, i8** %dst, align 8
  %src331 = load i8*, i8** %src, align 8
  %elem_size332 = load i32, i32* %elem_size, align 4
  %icastD333 = sext i32 %elem_size332 to i64
  %fun_result334 = call i8* @memcpy(i8* %dst330, i8* %src331, i64 %icastD333)
  br label %loop_continue_top_block

cond_end_block319:                                ; preds = %loop_top_block314
  br label %cond_end287
}

define internal void @init_putv(%CType* %0, %Section* %1, i64 %2, i32 %3, i32 %4) {
entry:
  %andand99 = alloca i1, align 1
  %oror72 = alloca i1, align 1
  %oror71 = alloca i1, align 1
  %oror70 = alloca i1, align 1
  %oror69 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand = alloca i1, align 1
  %dtype = alloca %CType, align 8
  %castXXXX = bitcast %CType* %dtype to i8*
  %5 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %bit_mask = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %bit_size = alloca i32, align 4
  %bit_pos = alloca i32, align 4
  %bt = alloca i32, align 4
  %saved_global_expr = alloca i32, align 4
  %type = alloca %CType*, align 8
  %type1 = alloca %CType**, align 8
  store %CType* %0, %CType** %type, align 8
  store %CType** %type, %CType*** %type1, align 8
  %sec = alloca %Section*, align 8
  %sec2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec2, align 8
  %c = alloca i64, align 8
  %c3 = alloca i64*, align 8
  store i64 %2, i64* %c, align 4
  store i64* %c, i64** %c3, align 8
  %v = alloca i32, align 4
  %v4 = alloca i32*, align 8
  store i32 %3, i32* %v, align 4
  store i32* %v, i32** %v4, align 8
  %expr_type = alloca i32, align 4
  %expr_type5 = alloca i32*, align 8
  store i32 %4, i32* %expr_type, align 4
  store i32* %expr_type, i32** %expr_type5, align 8
  %expr_type6 = load i32, i32* %expr_type, align 4
  %eqtmp = icmp eq i32 %expr_type6, 0
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

end_blockX:                                       ; preds = %cond_else_blockX14, %cond_then_block13, %cond_end, %cond_then_block
  %type17 = load %CType*, %CType** %type, align 8
  %derefference_valueB = load %CType, %CType* %type17, align 8
  store %CType %derefference_valueB, %CType* %dtype, align 8
  %dtype18 = load %CType, %CType* %dtype, align 8
  %dtype19 = load %CType, %CType* %dtype, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %dtype, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp20 = and i32 %t, -2049
  %fieldTTT = getelementptr inbounds %CType, %CType* %dtype, i32 0, i32 0
  store i32 %andtmp20, i32* %fieldTTT, align 4
  %sec21 = load %Section*, %Section** %sec, align 8
  %icmpB = icmp ne %Section* %sec21, null
  br i1 %icmpB, label %cond_jump_then22, label %cond_else_block

cond_then_block:                                  ; preds = %entry
  %v7 = load i32, i32* %v, align 4
  call void @vpushi(i32 %v7)
  br label %end_blockX

cond_else_blockX:                                 ; preds = %after_break, %entry
  %eqtmp10 = icmp eq i32 %expr_type6, 1
  br i1 %eqtmp10, label %cond_then_block8, label %cond_else_blockX9

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX9

cond_then_block8:                                 ; preds = %cond_else_blockX
  %global_expr = load i32, i32* @global_expr, align 4
  store i32 %global_expr, i32* %saved_global_expr, align 4
  store i32 1, i32* @global_expr, align 4
  call void @expr_const1()
  %saved_global_expr11 = load i32, i32* %saved_global_expr, align 4
  store i32 %saved_global_expr11, i32* @global_expr, align 4
  %vtop = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL = getelementptr inbounds %SValue, %SValue* %vtop, i32 0, i32 1
  %r = load i16, i16* %fieldLLL, align 2
  %icastKY = zext i16 %r to i32
  %andtmp = and i32 %icastKY, 511
  %not_eq = icmp ne i32 %andtmp, 240
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_else_blockX9:                                ; preds = %after_break12, %cond_else_blockX, %after_break
  %eqtmp15 = icmp eq i32 %expr_type6, 2
  br i1 %eqtmp15, label %cond_then_block13, label %cond_else_blockX14

cond_jump_then:                                   ; preds = %cond_then_block8
  call void (i8*, ...) @error(i8* bitcast ([36 x i8]* @190 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block8
  br label %end_blockX

after_break12:                                    ; No predecessors!
  br label %cond_else_blockX9
  br label %cond_else_blockX14

cond_then_block13:                                ; preds = %cond_else_blockX9
  call void @expr_eq()
  br label %end_blockX

cond_else_blockX14:                               ; preds = %after_break16, %cond_else_blockX9, %after_break12
  br label %end_blockX

after_break16:                                    ; No predecessors!
  br label %cond_else_blockX14

cond_jump_then22:                                 ; preds = %end_blockX
  %dtype24 = load %CType, %CType* %dtype, align 8
  call void @gen_assign_cast(%CType* %dtype)
  %type25 = load %CType*, %CType** %type, align 8
  %fieldLLL26 = getelementptr inbounds %CType, %CType* %type25, i32 0, i32 0
  %t27 = load i32, i32* %fieldLLL26, align 4
  %andtmp28 = and i32 %t27, 15
  store i32 %andtmp28, i32* %bt, align 4
  %c29 = load i64, i64* %c, align 4
  %add = add i64 %c29, 12
  %sec30 = load %Section*, %Section** %sec, align 8
  %fieldLLL31 = getelementptr inbounds %Section, %Section* %sec30, i32 0, i32 2
  %data_allocated = load i64, i64* %fieldLLL31, align 4
  %gt = icmp ugt i64 %add, %data_allocated
  br i1 %gt, label %cond_jump_then32, label %cond_end33

cond_else_block:                                  ; preds = %end_blockX
  %dtype240 = load %CType, %CType* %dtype, align 8
  %c241 = load i64, i64* %c, align 4
  %icastM242 = trunc i64 %c241 to i32
  call void @vset(%CType* %dtype, i32 498, i32 %icastM242)
  call void @vswap()
  call void @vstore()
  call void @vpop()
  br label %cond_end23

cond_end23:                                       ; preds = %cond_else_block, %end_blockX113
  ret void

cond_jump_then32:                                 ; preds = %cond_jump_then22
  %sec34 = load %Section*, %Section** %sec, align 8
  %c35 = load i64, i64* %c, align 4
  %add36 = add i64 %c35, 12
  call void @section_realloc(%Section* %sec34, i64 %add36)
  br label %cond_end33

cond_end33:                                       ; preds = %cond_jump_then32, %cond_jump_then22
  %sec37 = load %Section*, %Section** %sec, align 8
  %fieldLLL38 = getelementptr inbounds %Section, %Section* %sec37, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL38, align 8
  %c39 = load i64, i64* %c, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %c39, 1
  %add40 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add40 to i8*
  store i8* %intToPtrB, i8** %ptr, align 8
  %type41 = load %CType*, %CType** %type, align 8
  %fieldLLL42 = getelementptr inbounds %CType, %CType* %type41, i32 0, i32 0
  %t43 = load i32, i32* %fieldLLL42, align 4
  %andtmp44 = and i32 %t43, 64
  %logical_denial = icmp eq i32 %andtmp44, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then45, label %cond_else_block46

cond_jump_then45:                                 ; preds = %cond_end33
  store i32 0, i32* %bit_pos, align 4
  store i32 32, i32* %bit_size, align 4
  store i64 -1, i64* %bit_mask, align 4
  br label %cond_end47

cond_else_block46:                                ; preds = %cond_end33
  %vtop48 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL49 = getelementptr inbounds %SValue, %SValue* %vtop48, i32 0, i32 0
  %type50 = load %CType, %CType* %fieldLLL49, align 8
  %fieldVVV51 = getelementptr inbounds %CType, %CType* %fieldLLL49, i32 0, i32 0
  %t52 = load i32, i32* %fieldVVV51, align 4
  %rshifttmp = lshr i32 %t52, 16
  %andtmp53 = and i32 %rshifttmp, 63
  store i32 %andtmp53, i32* %bit_pos, align 4
  %vtop54 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL55 = getelementptr inbounds %SValue, %SValue* %vtop54, i32 0, i32 0
  %type56 = load %CType, %CType* %fieldLLL55, align 8
  %fieldVVV57 = getelementptr inbounds %CType, %CType* %fieldLLL55, i32 0, i32 0
  %t58 = load i32, i32* %fieldVVV57, align 4
  %rshifttmp59 = lshr i32 %t58, 22
  %andtmp60 = and i32 %rshifttmp59, 63
  store i32 %andtmp60, i32* %bit_size, align 4
  %bit_size61 = load i32, i32* %bit_size, align 4
  %icastD = sext i32 %bit_size61 to i64
  %lshifttmp = shl i64 1, %icastD
  %sub = sub i64 %lshifttmp, 1
  store i64 %sub, i64* %bit_mask, align 4
  br label %cond_end47

cond_end47:                                       ; preds = %cond_else_block46, %cond_jump_then45
  %vtop62 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL63 = getelementptr inbounds %SValue, %SValue* %vtop62, i32 0, i32 1
  %r64 = load i16, i16* %fieldLLL63, align 2
  %icastKY65 = zext i16 %r64 to i32
  %andtmp66 = and i32 %icastKY65, 512
  %icmpA67 = icmp ne i32 %andtmp66, 0
  store i1 %icmpA67, i1* %andand, align 1
  br i1 %icmpA67, label %cond_jump_then68, label %cond_jump_end

cond_jump_then68:                                 ; preds = %cond_end47
  %bt73 = load i32, i32* %bt, align 4
  %eq = icmp eq i32 %bt73, 1
  store i1 %eq, i1* %oror72, align 1
  br i1 %eq, label %cond_jump_end75, label %cond_jump_then74

cond_jump_end:                                    ; preds = %cond_jump_end98, %cond_end47
  %andand_result_value110 = load i1, i1* %andand, align 1
  br i1 %andand_result_value110, label %cond_jump_then111, label %cond_end112

cond_jump_then74:                                 ; preds = %cond_jump_then68
  %bt76 = load i32, i32* %bt, align 4
  %eq77 = icmp eq i32 %bt76, 2
  %oror78 = or i1 %eq, %eq77
  store i1 %oror78, i1* %oror72, align 1
  br label %cond_jump_end75

cond_jump_end75:                                  ; preds = %cond_jump_then74, %cond_jump_then68
  %oror_result_value = load i1, i1* %oror72, align 1
  store i1 %oror_result_value, i1* %oror71, align 1
  br i1 %oror_result_value, label %cond_jump_end80, label %cond_jump_then79

cond_jump_then79:                                 ; preds = %cond_jump_end75
  %bt81 = load i32, i32* %bt, align 4
  %eq82 = icmp eq i32 %bt81, 9
  %oror83 = or i1 %oror_result_value, %eq82
  store i1 %oror83, i1* %oror71, align 1
  br label %cond_jump_end80

cond_jump_end80:                                  ; preds = %cond_jump_then79, %cond_jump_end75
  %oror_result_value84 = load i1, i1* %oror71, align 1
  store i1 %oror_result_value84, i1* %oror70, align 1
  br i1 %oror_result_value84, label %cond_jump_end86, label %cond_jump_then85

cond_jump_then85:                                 ; preds = %cond_jump_end80
  %bt87 = load i32, i32* %bt, align 4
  %eq88 = icmp eq i32 %bt87, 10
  %oror89 = or i1 %oror_result_value84, %eq88
  store i1 %oror89, i1* %oror70, align 1
  br label %cond_jump_end86

cond_jump_end86:                                  ; preds = %cond_jump_then85, %cond_jump_end80
  %oror_result_value90 = load i1, i1* %oror70, align 1
  store i1 %oror_result_value90, i1* %oror69, align 1
  br i1 %oror_result_value90, label %cond_jump_end92, label %cond_jump_then91

cond_jump_then91:                                 ; preds = %cond_jump_end86
  %bt93 = load i32, i32* %bt, align 4
  %eq94 = icmp eq i32 %bt93, 12
  %oror95 = or i1 %oror_result_value90, %eq94
  store i1 %oror95, i1* %oror69, align 1
  br label %cond_jump_end92

cond_jump_end92:                                  ; preds = %cond_jump_then91, %cond_jump_end86
  %oror_result_value96 = load i1, i1* %oror69, align 1
  store i1 %oror_result_value96, i1* %oror, align 1
  br i1 %oror_result_value96, label %cond_jump_end98, label %cond_jump_then97

cond_jump_then97:                                 ; preds = %cond_jump_end92
  %bt100 = load i32, i32* %bt, align 4
  %eq101 = icmp eq i32 %bt100, 0
  store i1 %eq101, i1* %andand99, align 1
  br i1 %eq101, label %cond_jump_then102, label %cond_jump_end103

cond_jump_end98:                                  ; preds = %cond_jump_end103, %cond_jump_end92
  %oror_result_value108 = load i1, i1* %oror, align 1
  %andand109 = and i1 %icmpA67, %oror_result_value108
  store i1 %andand109, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_then102:                                ; preds = %cond_jump_then97
  %bit_size104 = load i32, i32* %bit_size, align 4
  %not_eq105 = icmp ne i32 %bit_size104, 32
  %andand106 = and i1 %eq101, %not_eq105
  store i1 %andand106, i1* %andand99, align 1
  br label %cond_jump_end103

cond_jump_end103:                                 ; preds = %cond_jump_then102, %cond_jump_then97
  %andand_result_value = load i1, i1* %andand99, align 1
  %oror107 = or i1 %oror_result_value96, %andand_result_value
  store i1 %oror107, i1* %oror, align 1
  br label %cond_jump_end98

cond_jump_then111:                                ; preds = %cond_jump_end
  call void (i8*, ...) @error(i8* bitcast ([51 x i8]* @191 to i8*))
  br label %cond_end112

cond_end112:                                      ; preds = %cond_jump_then111, %cond_jump_end
  %bt114 = load i32, i32* %bt, align 4
  %eqtmp117 = icmp eq i32 %bt114, 11
  br i1 %eqtmp117, label %cond_then_block115, label %cond_else_blockX116

end_blockX113:                                    ; preds = %cond_else_blockX203, %cond_end211, %cond_then_block183, %cond_then_block173, %cond_then_block163, %cond_then_block143, %cond_then_block125
  %vtop235 = load %SValue*, %SValue** @vtop, align 8
  %ptrToIntI = ptrtoint %SValue* %vtop235 to i64
  %sub236 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub236 to %SValue*
  store %SValue* %iintToPtrD, %SValue** @vtop, align 8
  %ptrToIntC237 = ptrtoint %SValue* %iintToPtrD to i64
  %add238 = add i64 %ptrToIntC237, 64
  %intToPtrB239 = inttoptr i64 %add238 to %SValue*
  br label %cond_end23

cond_then_block115:                               ; preds = %cond_end112
  %vtop118 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL119 = getelementptr inbounds %SValue, %SValue* %vtop118, i32 0, i32 3
  %c120 = load %CValue, %CValue* %fieldLLL119, align 16
  %vtop121 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL122 = getelementptr inbounds %SValue, %SValue* %vtop121, i32 0, i32 3
  %c123 = load %CValue, %CValue* %fieldLLL122, align 16
  %ICASTO = bitcast %CValue* %fieldLLL122 to i32*
  %i = load i32, i32* %ICASTO, align 4
  %not_eq124 = icmp ne i32 %i, 0
  %icastKX = zext i1 %not_eq124 to i32
  %fieldIII = getelementptr inbounds %CValue, %CValue* %fieldLLL119, i32 0, i32 0
  %icastN = bitcast fp128* %fieldIII to i32*
  store i32 %icastKX, i32* %icastN, align 4
  br label %cond_then_block125

cond_else_blockX116:                              ; preds = %cond_end112
  %eqtmp127 = icmp eq i32 %bt114, 1
  br i1 %eqtmp127, label %cond_then_block125, label %cond_else_blockX126

cond_then_block125:                               ; preds = %cond_else_blockX116, %cond_then_block115
  %ptr128 = load i8*, i8** %ptr, align 8
  %ptr129 = load i8*, i8** %ptr, align 8
  %derefference_valueA = load i8, i8* %ptr129, align 1
  %vtop130 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL131 = getelementptr inbounds %SValue, %SValue* %vtop130, i32 0, i32 3
  %c132 = load %CValue, %CValue* %fieldLLL131, align 16
  %ICASTO133 = bitcast %CValue* %fieldLLL131 to i32*
  %i134 = load i32, i32* %ICASTO133, align 4
  %bit_mask135 = load i64, i64* %bit_mask, align 4
  %icastD136 = sext i32 %i134 to i64
  %andtmp137 = and i64 %icastD136, %bit_mask135
  %bit_pos138 = load i32, i32* %bit_pos, align 4
  %icastD139 = sext i32 %bit_pos138 to i64
  %lshifttmp140 = shl i64 %andtmp137, %icastD139
  %icastD141 = sext i8 %derefference_valueA to i64
  %ortmp = or i64 %icastD141, %lshifttmp140
  %icastJ = trunc i64 %ortmp to i8
  store i8 %icastJ, i8* %ptr128, align 1
  br label %end_blockX113

cond_else_blockX126:                              ; preds = %after_break142, %cond_else_blockX116
  %eqtmp145 = icmp eq i32 %bt114, 2
  br i1 %eqtmp145, label %cond_then_block143, label %cond_else_blockX144

after_break142:                                   ; No predecessors!
  br label %cond_else_blockX126
  br label %cond_else_blockX144

cond_then_block143:                               ; preds = %cond_else_blockX126
  %ptr146 = load i8*, i8** %ptr, align 8
  %castAQ = bitcast i8* %ptr146 to i16*
  %ptr147 = load i8*, i8** %ptr, align 8
  %pointer_cast = bitcast i8* %ptr147 to i16*
  %derefference_valueA148 = load i16, i16* %pointer_cast, align 2
  %vtop149 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL150 = getelementptr inbounds %SValue, %SValue* %vtop149, i32 0, i32 3
  %c151 = load %CValue, %CValue* %fieldLLL150, align 16
  %ICASTO152 = bitcast %CValue* %fieldLLL150 to i32*
  %i153 = load i32, i32* %ICASTO152, align 4
  %bit_mask154 = load i64, i64* %bit_mask, align 4
  %icastD155 = sext i32 %i153 to i64
  %andtmp156 = and i64 %icastD155, %bit_mask154
  %bit_pos157 = load i32, i32* %bit_pos, align 4
  %icastD158 = sext i32 %bit_pos157 to i64
  %lshifttmp159 = shl i64 %andtmp156, %icastD158
  %icastD160 = sext i16 %derefference_valueA148 to i64
  %ortmp161 = or i64 %icastD160, %lshifttmp159
  %icastG = trunc i64 %ortmp161 to i16
  store i16 %icastG, i16* %castAQ, align 2
  br label %end_blockX113

cond_else_blockX144:                              ; preds = %after_break162, %cond_else_blockX126, %after_break142
  %eqtmp165 = icmp eq i32 %bt114, 9
  br i1 %eqtmp165, label %cond_then_block163, label %cond_else_blockX164

after_break162:                                   ; No predecessors!
  br label %cond_else_blockX144
  br label %cond_else_blockX164

cond_then_block163:                               ; preds = %cond_else_blockX144
  %ptr166 = load i8*, i8** %ptr, align 8
  %castAQ167 = bitcast i8* %ptr166 to double*
  %vtop168 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL169 = getelementptr inbounds %SValue, %SValue* %vtop168, i32 0, i32 3
  %c170 = load %CValue, %CValue* %fieldLLL169, align 16
  %ICASTO171 = bitcast %CValue* %fieldLLL169 to double*
  %d = load double, double* %ICASTO171, align 8
  store double %d, double* %castAQ167, align 8
  br label %end_blockX113

cond_else_blockX164:                              ; preds = %after_break172, %cond_else_blockX144, %after_break162
  %eqtmp175 = icmp eq i32 %bt114, 10
  br i1 %eqtmp175, label %cond_then_block173, label %cond_else_blockX174

after_break172:                                   ; No predecessors!
  br label %cond_else_blockX164
  br label %cond_else_blockX174

cond_then_block173:                               ; preds = %cond_else_blockX164
  %ptr176 = load i8*, i8** %ptr, align 8
  %castAQ177 = bitcast i8* %ptr176 to fp128*
  %vtop178 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL179 = getelementptr inbounds %SValue, %SValue* %vtop178, i32 0, i32 3
  %c180 = load %CValue, %CValue* %fieldLLL179, align 16
  %ICASTO181 = bitcast %CValue* %fieldLLL179 to fp128*
  %ld = load fp128, fp128* %ICASTO181, align 16
  store fp128 %ld, fp128* %castAQ177, align 16
  br label %end_blockX113

cond_else_blockX174:                              ; preds = %after_break182, %cond_else_blockX164, %after_break172
  %eqtmp185 = icmp eq i32 %bt114, 12
  br i1 %eqtmp185, label %cond_then_block183, label %cond_else_blockX184

after_break182:                                   ; No predecessors!
  br label %cond_else_blockX174
  br label %cond_else_blockX184

cond_then_block183:                               ; preds = %cond_else_blockX174
  %ptr186 = load i8*, i8** %ptr, align 8
  %castAQ187 = bitcast i8* %ptr186 to i64*
  %ptr188 = load i8*, i8** %ptr, align 8
  %pointer_cast189 = bitcast i8* %ptr188 to i64*
  %derefference_valueA190 = load i64, i64* %pointer_cast189, align 4
  %vtop191 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL192 = getelementptr inbounds %SValue, %SValue* %vtop191, i32 0, i32 3
  %c193 = load %CValue, %CValue* %fieldLLL192, align 16
  %ICASTO194 = bitcast %CValue* %fieldLLL192 to i64*
  %ll = load i64, i64* %ICASTO194, align 4
  %bit_mask195 = load i64, i64* %bit_mask, align 4
  %andtmp196 = and i64 %ll, %bit_mask195
  %bit_pos197 = load i32, i32* %bit_pos, align 4
  %icastD198 = sext i32 %bit_pos197 to i64
  %lshifttmp199 = shl i64 %andtmp196, %icastD198
  %ortmp200 = or i64 %derefference_valueA190, %lshifttmp199
  store i64 %ortmp200, i64* %castAQ187, align 4
  br label %end_blockX113

cond_else_blockX184:                              ; preds = %after_break201, %cond_else_blockX174, %after_break182
  br label %cond_then_block202

after_break201:                                   ; No predecessors!
  br label %cond_else_blockX184
  br label %cond_else_blockX203

cond_then_block202:                               ; preds = %cond_else_blockX184
  %vtop204 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL205 = getelementptr inbounds %SValue, %SValue* %vtop204, i32 0, i32 1
  %r206 = load i16, i16* %fieldLLL205, align 2
  %icastKY207 = zext i16 %r206 to i32
  %andtmp208 = and i32 %icastKY207, 512
  %icmpA209 = icmp ne i32 %andtmp208, 0
  br i1 %icmpA209, label %cond_jump_then210, label %cond_end211

cond_else_blockX203:                              ; preds = %after_break234, %after_break201
  br label %end_blockX113

cond_jump_then210:                                ; preds = %cond_then_block202
  %sec212 = load %Section*, %Section** %sec, align 8
  %vtop213 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL214 = getelementptr inbounds %SValue, %SValue* %vtop213, i32 0, i32 4
  %sym = load %Sym*, %Sym** %fieldLLL214, align 8
  %c215 = load i64, i64* %c, align 4
  call void @greloc(%Section* %sec212, %Sym* %sym, i64 %c215, i32 1)
  br label %cond_end211

cond_end211:                                      ; preds = %cond_jump_then210, %cond_then_block202
  %ptr216 = load i8*, i8** %ptr, align 8
  %castAQ217 = bitcast i8* %ptr216 to i32*
  %ptr218 = load i8*, i8** %ptr, align 8
  %pointer_cast219 = bitcast i8* %ptr218 to i32*
  %derefference_valueA220 = load i32, i32* %pointer_cast219, align 4
  %vtop221 = load %SValue*, %SValue** @vtop, align 8
  %fieldLLL222 = getelementptr inbounds %SValue, %SValue* %vtop221, i32 0, i32 3
  %c223 = load %CValue, %CValue* %fieldLLL222, align 16
  %ICASTO224 = bitcast %CValue* %fieldLLL222 to i32*
  %i225 = load i32, i32* %ICASTO224, align 4
  %bit_mask226 = load i64, i64* %bit_mask, align 4
  %icastD227 = sext i32 %i225 to i64
  %andtmp228 = and i64 %icastD227, %bit_mask226
  %bit_pos229 = load i32, i32* %bit_pos, align 4
  %icastD230 = sext i32 %bit_pos229 to i64
  %lshifttmp231 = shl i64 %andtmp228, %icastD230
  %icastD232 = sext i32 %derefference_valueA220 to i64
  %ortmp233 = or i64 %icastD232, %lshifttmp231
  %icastM = trunc i64 %ortmp233 to i32
  store i32 %icastM, i32* %castAQ217, align 4
  br label %end_blockX113

after_break234:                                   ; No predecessors!
  br label %cond_else_blockX203
}

define internal void @init_putz(%CType* %0, %Section* %1, i64 %2, i32 %3) {
entry:
  %t = alloca %CType*, align 8
  %t1 = alloca %CType**, align 8
  store %CType* %0, %CType** %t, align 8
  store %CType** %t, %CType*** %t1, align 8
  %sec = alloca %Section*, align 8
  %sec2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sec, align 8
  store %Section** %sec, %Section*** %sec2, align 8
  %c = alloca i64, align 8
  %c3 = alloca i64*, align 8
  store i64 %2, i64* %c, align 4
  store i64* %c, i64** %c3, align 8
  %size = alloca i32, align 4
  %size4 = alloca i32*, align 8
  store i32 %3, i32* %size, align 4
  store i32* %size, i32** %size4, align 8
  %sec5 = load %Section*, %Section** %sec, align 8
  %icmpB = icmp ne %Section* %sec5, null
  br i1 %icmpB, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %func_old_type = load %CType, %CType* @func_old_type, align 8
  call void @vpush_global_sym(%CType* @func_old_type, i32 366)
  %c6 = load i64, i64* %c, align 4
  %icastM = trunc i64 %c6 to i32
  call void @vseti(i32 242, i32 %icastM)
  call void @vpushi(i32 0)
  %size7 = load i32, i32* %size, align 4
  call void @vpushi(i32 %size7)
  call void @gfunc_call(i32 3)
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  ret void
}

define void @put_func_debug(%Sym* %0) {
entry:
  %condtional_result_value = alloca i8, align 1
  %buf = alloca [512 x i8], align 1
  %sym = alloca %Sym*, align 8
  %sym1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym1, align 8
  %autocast = bitcast [512 x i8]* %buf to i8*
  %funcname = load i8*, i8** @funcname, align 8
  %sym2 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %sym2, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %fieldLLL, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 256
  %icmpA = icmp ne i32 %andtmp, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i8 102, i8* %condtional_result_value, align 1
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  store i8 70, i8* %condtional_result_value, align 1
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %conditional_result_value = load i8, i8* %condtional_result_value, align 1
  %icastL = sext i8 %conditional_result_value to i32
  %fun_result = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 512, i8* bitcast ([7 x i8]* @199 to i8*), i8* %funcname, i32 %icastL)
  %autocast3 = bitcast [512 x i8]* %buf to i8*
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL4 = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 3
  %line_num = load i32, i32* %fieldLLL4, align 4
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %sym5 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL6 = getelementptr inbounds %Sym, %Sym* %sym5, i32 0, i32 2
  %c = load i64, i64* %fieldLLL6, align 4
  %icastM = trunc i64 %c to i32
  call void @put_stabs_r(i8* %autocast3, i32 36, i32 0, i32 %line_num, i64 0, %Section* %cur_text_section, i32 %icastM)
  %file7 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL8 = getelementptr inbounds %BufferedFile, %BufferedFile* %file7, i32 0, i32 3
  %line_num9 = load i32, i32* %fieldLLL8, align 4
  call void @put_stabn(i32 68, i32 0, i32 %line_num9, i32 0)
  store i32 0, i32* @last_ind, align 4
  store i32 0, i32* @last_line_num, align 4
  ret void
}

define internal void @func_decl_list(%Sym* %0) {
entry:
  %oror = alloca i1, align 1
  %andand24 = alloca i1, align 1
  %andand5 = alloca i1, align 1
  %andand4 = alloca i1, align 1
  %andand = alloca i1, align 1
  %type = alloca %CType, align 8
  %castXXXX3 = bitcast %CType* %type to i8*
  %1 = call i8* @memset(i8* %castXXXX3, i32 0, i64 16)
  %btype = alloca %CType, align 8
  %castXXXX2 = bitcast %CType* %btype to i8*
  %2 = call i8* @memset(i8* %castXXXX2, i32 0, i64 16)
  %s = alloca %Sym*, align 8
  %v = alloca i32, align 4
  %ad = alloca %AttributeDef, align 8
  %castXXXX = bitcast %AttributeDef* %ad to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 24)
  %func_sym = alloca %Sym*, align 8
  %func_sym1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %func_sym, align 8
  store %Sym** %func_sym, %Sym*** %func_sym1, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end41, %entry
  %tok = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok, 123
  store i1 %not_eq, i1* %andand5, align 1
  br i1 %not_eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %loop_top_block
  %tok6 = load i32, i32* @tok, align 4
  %not_eq7 = icmp ne i32 %tok6, 59
  %andand8 = and i1 %not_eq, %not_eq7
  store i1 %andand8, i1* %andand5, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %loop_top_block
  %andand_result_value = load i1, i1* %andand5, align 1
  store i1 %andand_result_value, i1* %andand4, align 1
  br i1 %andand_result_value, label %cond_jump_then9, label %cond_jump_end10

cond_jump_then9:                                  ; preds = %cond_jump_end
  %tok11 = load i32, i32* @tok, align 4
  %not_eq12 = icmp ne i32 %tok11, 44
  %andand13 = and i1 %andand_result_value, %not_eq12
  store i1 %andand13, i1* %andand4, align 1
  br label %cond_jump_end10

cond_jump_end10:                                  ; preds = %cond_jump_then9, %cond_jump_end
  %andand_result_value14 = load i1, i1* %andand4, align 1
  store i1 %andand_result_value14, i1* %andand, align 1
  br i1 %andand_result_value14, label %cond_jump_then15, label %cond_jump_end16

cond_jump_then15:                                 ; preds = %cond_jump_end10
  %tok17 = load i32, i32* @tok, align 4
  %not_eq18 = icmp ne i32 %tok17, -1
  %andand19 = and i1 %andand_result_value14, %not_eq18
  store i1 %andand19, i1* %andand, align 1
  br label %cond_jump_end16

cond_jump_end16:                                  ; preds = %cond_jump_then15, %cond_jump_end10
  %andand_result_value20 = load i1, i1* %andand, align 1
  br i1 %andand_result_value20, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end16
  %btype21 = load %CType, %CType* %btype, align 8
  %ad22 = load %AttributeDef, %AttributeDef* %ad, align 8
  %fun_result = call i32 @parse_btype(%CType* %btype, %AttributeDef* %ad)
  %logical_denial = icmp eq i32 %fun_result, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then23, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_end16
  ret void

cond_jump_then23:                                 ; preds = %cond_then_block
  call void @expect(i8* bitcast ([17 x i8]* @200 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then23, %cond_then_block
  %btype25 = load %CType, %CType* %btype, align 8
  %fieldVVV = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t = load i32, i32* %fieldVVV, align 4
  %andtmp = and i32 %t, 15
  %eq = icmp eq i32 %andtmp, 5
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end27, label %cond_jump_then26

cond_jump_then26:                                 ; preds = %cond_end
  %btype28 = load %CType, %CType* %btype, align 8
  %fieldVVV29 = getelementptr inbounds %CType, %CType* %btype, i32 0, i32 0
  %t30 = load i32, i32* %fieldVVV29, align 4
  %andtmp31 = and i32 %t30, 15
  %eq32 = icmp eq i32 %andtmp31, 7
  %oror33 = or i1 %eq, %eq32
  store i1 %oror33, i1* %oror, align 1
  br label %cond_jump_end27

cond_jump_end27:                                  ; preds = %cond_jump_then26, %cond_end
  %oror_result_value = load i1, i1* %oror, align 1
  store i1 %oror_result_value, i1* %andand24, align 1
  br i1 %oror_result_value, label %cond_jump_then34, label %cond_jump_end35

cond_jump_then34:                                 ; preds = %cond_jump_end27
  %tok36 = load i32, i32* @tok, align 4
  %eq37 = icmp eq i32 %tok36, 59
  %andand38 = and i1 %oror_result_value, %eq37
  store i1 %andand38, i1* %andand24, align 1
  br label %cond_jump_end35

cond_jump_end35:                                  ; preds = %cond_jump_then34, %cond_jump_end27
  %andand_result_value39 = load i1, i1* %andand24, align 1
  br i1 %andand_result_value39, label %cond_jump_then40, label %cond_else_block

cond_jump_then40:                                 ; preds = %cond_jump_end35
  br label %cond_end41

cond_else_block:                                  ; preds = %cond_jump_end35
  br label %loop_top_block42

cond_end41:                                       ; preds = %cond_end_block44, %cond_jump_then40
  call void @skip(i32 59)
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end104
  br label %loop_top_block42

loop_top_block42:                                 ; preds = %loop_continue_top_block, %cond_else_block
  br i1 true, label %cond_then_block43, label %cond_end_block44

cond_then_block43:                                ; preds = %loop_top_block42
  %btype45 = load %CType, %CType* %btype, align 8
  store %CType %btype45, %CType* %type, align 8
  %type46 = load %CType, %CType* %type, align 8
  %ad47 = load %AttributeDef, %AttributeDef* %ad, align 8
  %v48 = load i32, i32* %v, align 4
  call void @type_decl(%CType* %type, %AttributeDef* %ad, i32* %v, i32 2)
  %func_sym49 = load %Sym*, %Sym** %func_sym, align 8
  %fieldLLL = getelementptr inbounds %Sym, %Sym* %func_sym49, i32 0, i32 4
  %next = load %Sym*, %Sym** %fieldLLL, align 8
  store %Sym* %next, %Sym** %s, align 8
  br label %loop_top_block50

cond_end_block44:                                 ; preds = %cond_else_block103, %loop_top_block42
  br label %cond_end41

loop_top_block50:                                 ; preds = %cond_end62, %cond_then_block43
  %s51 = load %Sym*, %Sym** %s, align 8
  %not_eq52 = icmp ne %Sym* %s51, null
  br i1 %not_eq52, label %cond_then_block53, label %cond_end_block54

cond_then_block53:                                ; preds = %loop_top_block50
  %s55 = load %Sym*, %Sym** %s, align 8
  %fieldLLL56 = getelementptr inbounds %Sym, %Sym* %s55, i32 0, i32 0
  %v57 = load i32, i32* %fieldLLL56, align 4
  %andtmp58 = and i32 %v57, -536870913
  %v59 = load i32, i32* %v, align 4
  %eq60 = icmp eq i32 %andtmp58, %v59
  br i1 %eq60, label %cond_jump_then61, label %cond_end62

cond_end_block54:                                 ; preds = %loop_top_block50
  %v66 = load i32, i32* %v, align 4
  %fun_result67 = call i8* @get_tok_str(i32 %v66, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([53 x i8]* @201 to i8*), i8* %fun_result67)
  br label %func_decl_list.found

cond_jump_then61:                                 ; preds = %cond_then_block53
  br label %func_decl_list.found
  br label %cond_end62

cond_end62:                                       ; preds = %cond_jump_then61, %cond_then_block53
  %s63 = load %Sym*, %Sym** %s, align 8
  %fieldLLL64 = getelementptr inbounds %Sym, %Sym* %s63, i32 0, i32 4
  %next65 = load %Sym*, %Sym** %fieldLLL64, align 8
  store %Sym* %next65, %Sym** %s, align 8
  br label %loop_top_block50

func_decl_list.found:                             ; preds = %cond_end_block54, %cond_jump_then61
  %type68 = load %CType, %CType* %type, align 8
  %fieldVVV69 = getelementptr inbounds %CType, %CType* %type, i32 0, i32 0
  %t70 = load i32, i32* %fieldVVV69, align 4
  %andtmp71 = and i32 %t70, 1920
  %icmpA72 = icmp ne i32 %andtmp71, 0
  br i1 %icmpA72, label %cond_jump_then73, label %cond_end74

cond_jump_then73:                                 ; preds = %func_decl_list.found
  %v75 = load i32, i32* %v, align 4
  %fun_result76 = call i8* @get_tok_str(i32 %v75, %CValue* null)
  call void (i8*, ...) @error(i8* bitcast ([33 x i8]* @202 to i8*), i8* %fun_result76)
  br label %cond_end74

cond_end74:                                       ; preds = %cond_jump_then73, %func_decl_list.found
  %type77 = load %CType, %CType* %type, align 8
  store i32 4837, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccgen.c.142, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %convert_parameter_type

convert_parameter_type:                           ; preds = %cond_end74
  %pt = alloca %CType*, align 8
  store %CType* %type, %CType** %pt, align 8
  %pt78 = load %CType*, %CType** %pt, align 8
  %pt79 = load %CType*, %CType** %pt, align 8
  %fieldLLL80 = getelementptr inbounds %CType, %CType* %pt79, i32 0, i32 0
  %t81 = load i32, i32* %fieldLLL80, align 4
  %andtmp82 = and i32 %t81, -6145
  %fieldTU = getelementptr inbounds %CType, %CType* %pt78, i32 0, i32 0
  store i32 %andtmp82, i32* %fieldTU, align 4
  %pt83 = load %CType*, %CType** %pt, align 8
  %pt84 = load %CType*, %CType** %pt, align 8
  %fieldLLL85 = getelementptr inbounds %CType, %CType* %pt84, i32 0, i32 0
  %t86 = load i32, i32* %fieldLLL85, align 4
  %andtmp87 = and i32 %t86, -33
  %fieldTU88 = getelementptr inbounds %CType, %CType* %pt83, i32 0, i32 0
  store i32 %andtmp87, i32* %fieldTU88, align 4
  %pt89 = load %CType*, %CType** %pt, align 8
  %fieldLLL90 = getelementptr inbounds %CType, %CType* %pt89, i32 0, i32 0
  %t91 = load i32, i32* %fieldLLL90, align 4
  %andtmp92 = and i32 %t91, 15
  %eq93 = icmp eq i32 %andtmp92, 6
  br i1 %eq93, label %cond_jump_then94, label %cond_end95

convert_parameter_type_end:                       ; preds = %cond_end95
  %s97 = load %Sym*, %Sym** %s, align 8
  %type98 = load %CType, %CType* %type, align 8
  %fieldTU99 = getelementptr inbounds %Sym, %Sym* %s97, i32 0, i32 3
  store %CType %type98, %CType* %fieldTU99, align 8
  %tok100 = load i32, i32* @tok, align 4
  %eq101 = icmp eq i32 %tok100, 44
  br i1 %eq101, label %cond_jump_then102, label %cond_else_block103

cond_jump_then94:                                 ; preds = %convert_parameter_type
  %pt96 = load %CType*, %CType** %pt, align 8
  call void @mk_pointer(%CType* %pt96)
  br label %cond_end95

cond_end95:                                       ; preds = %cond_jump_then94, %convert_parameter_type
  br label %convert_parameter_type_end

cond_jump_then102:                                ; preds = %convert_parameter_type_end
  call void @next()
  br label %cond_end104

cond_else_block103:                               ; preds = %convert_parameter_type_end
  br label %cond_end_block44

cond_end104:                                      ; preds = %after_break, %cond_jump_then102
  br label %loop_continue_top_block

after_break:                                      ; No predecessors!
  br label %cond_end104
}

define internal void @gen_function(%Sym* %0) {
entry:
  %saved_nocode_wanted = alloca i32, align 4
  %sym = alloca %Sym*, align 8
  %sym1 = alloca %Sym**, align 8
  store %Sym* %0, %Sym** %sym, align 8
  store %Sym** %sym, %Sym*** %sym1, align 8
  %nocode_wanted = load i32, i32* @nocode_wanted, align 4
  store i32 %nocode_wanted, i32* %saved_nocode_wanted, align 4
  store i32 0, i32* @nocode_wanted, align 4
  %cur_text_section = load %Section*, %Section** @cur_text_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %cur_text_section, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  %icastM = trunc i64 %data_offset to i32
  store i32 %icastM, i32* @ind, align 4
  %sym2 = load %Sym*, %Sym** %sym, align 8
  %cur_text_section3 = load %Section*, %Section** @cur_text_section, align 8
  %ind = load i32, i32* @ind, align 4
  %icastD = sext i32 %ind to i64
  call void @put_extern_sym(%Sym* %sym2, %Section* %cur_text_section3, i64 %icastD, i64 0)
  %sym4 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL5 = getelementptr inbounds %Sym, %Sym* %sym4, i32 0, i32 0
  %v = load i32, i32* %fieldLLL5, align 4
  %fun_result = call i8* @get_tok_str(i32 %v, %CValue* null)
  store i8* %fun_result, i8** @funcname, align 8
  %ind6 = load i32, i32* @ind, align 4
  store i32 %ind6, i32* @func_ind, align 4
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL7 = getelementptr inbounds %TCCState, %TCCState* %tcc_state, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL7, align 4
  %icmpA = icmp ne i32 %do_debug, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %sym8 = load %Sym*, %Sym** %sym, align 8
  call void @put_func_debug(%Sym* %sym8)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %local_stack = load %Sym*, %Sym** @local_stack, align 8
  %fun_result9 = call %Sym* @sym_push2(%Sym** @local_stack, i32 536870912, i32 0, i64 0)
  %sym10 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL11 = getelementptr inbounds %Sym, %Sym* %sym10, i32 0, i32 3
  %type = load %CType, %CType* %fieldLLL11, align 8
  call void @gfunc_prolog(%CType* %fieldLLL11)
  store i32 0, i32* @rsym, align 4
  call void @block(i32* null, i32* null, i32* null, i32* null, i32 0, i32 0)
  %rsym = load i32, i32* @rsym, align 4
  call void @gsym(i32 %rsym)
  call void @gfunc_epilog()
  %cur_text_section12 = load %Section*, %Section** @cur_text_section, align 8
  %ind13 = load i32, i32* @ind, align 4
  %icastD14 = sext i32 %ind13 to i64
  %fieldTU = getelementptr inbounds %Section, %Section* %cur_text_section12, i32 0, i32 0
  store i64 %icastD14, i64* %fieldTU, align 4
  %global_label_stack = load %Sym*, %Sym** @global_label_stack, align 8
  call void @label_pop(%Sym** @global_label_stack, %Sym* null)
  %local_stack15 = load %Sym*, %Sym** @local_stack, align 8
  call void @sym_pop(%Sym** @local_stack, %Sym* null)
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL16 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL16, align 8
  %castAQ = bitcast i8* %data to %come_anon88*
  %sym17 = load %Sym*, %Sym** %sym, align 8
  %fieldLLL18 = getelementptr inbounds %Sym, %Sym* %sym17, i32 0, i32 2
  %c = load i64, i64* %fieldLLL18, align 4
  %icastM19 = trunc i64 %c to i32
  %castXYXXYXYXY = bitcast i8** %fieldLLL16 to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %icastM19
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  %ind20 = load i32, i32* @ind, align 4
  %func_ind = load i32, i32* @func_ind, align 4
  %sub = sub i32 %ind20, %func_ind
  %icastD21 = sext i32 %sub to i64
  %fieldTTT = getelementptr inbounds %come_anon88, %come_anon88* %element_addressXYXZY, i32 0, i32 5
  store i64 %icastD21, i64* %fieldTTT, align 4
  %tcc_state22 = load %TCCState*, %TCCState** @tcc_state, align 8
  %fieldLLL23 = getelementptr inbounds %TCCState, %TCCState* %tcc_state22, i32 0, i32 42
  %do_debug24 = load i32, i32* %fieldLLL23, align 4
  %icmpA25 = icmp ne i32 %do_debug24, 0
  br i1 %icmpA25, label %cond_jump_then26, label %cond_end27

cond_jump_then26:                                 ; preds = %cond_end
  %ind28 = load i32, i32* @ind, align 4
  %func_ind29 = load i32, i32* @func_ind, align 4
  %sub30 = sub i32 %ind28, %func_ind29
  call void @put_stabn(i32 36, i32 0, i32 0, i32 %sub30)
  br label %cond_end27

cond_end27:                                       ; preds = %cond_jump_then26, %cond_end
  store %Section* null, %Section** @cur_text_section, align 8
  store i8* bitcast ([1 x i8]* @203 to i8*), i8** @funcname, align 8
  %func_vt = load %CType, %CType* @func_vt, align 8
  store i32 3, i32* getelementptr inbounds (%CType, %CType* @func_vt, i32 0, i32 0), align 4
  store i32 0, i32* @ind, align 4
  %saved_nocode_wanted31 = load i32, i32* %saved_nocode_wanted, align 4
  store i32 %saved_nocode_wanted31, i32* @nocode_wanted, align 4
  ret void
}

define internal i32 @tcc_compile(%TCCState* %0) {
entry:
  %condtional_result_value = alloca i32, align 4
  %section_sym = alloca i32, align 4
  %buf = alloca [512 x i8], align 1
  %define_start = alloca %Sym*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  call void @preprocess_init(%TCCState* %s12)
  store %Section* null, %Section** @cur_text_section, align 8
  store i8* bitcast ([1 x i8]* @209 to i8*), i8** @funcname, align 8
  store i32 268435456, i32* @anon_sym, align 4
  store i32 0, i32* %section_sym, align 4
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL, align 4
  %icmpA = icmp ne i32 %do_debug, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %text_section = load %Section*, %Section** @text_section, align 8
  %fieldLLL4 = getelementptr inbounds %Section, %Section* %text_section, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL4, align 4
  %fun_result = call i32 @put_elf_sym(%Section* %symtab_section, i64 0, i64 0, i32 3, i32 0, i32 %sh_num, i8* null)
  store i32 %fun_result, i32* %section_sym, align 4
  %autocast = bitcast [512 x i8]* %buf to i8*
  %fun_result5 = call i8* @getcwd(i8* %autocast, i64 512)
  %autocast6 = bitcast [512 x i8]* %buf to i8*
  %fun_result7 = call i8* @pstrcat(i8* %autocast6, i32 512, i8* bitcast ([2 x i8]* @210 to i8*))
  %autocast8 = bitcast [512 x i8]* %buf to i8*
  %text_section9 = load %Section*, %Section** @text_section, align 8
  %fieldLLL10 = getelementptr inbounds %Section, %Section* %text_section9, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL10, align 4
  %text_section11 = load %Section*, %Section** @text_section, align 8
  %section_sym12 = load i32, i32* %section_sym, align 4
  call void @put_stabs_r(i8* %autocast8, i32 100, i32 0, i32 0, i64 %data_offset, %Section* %text_section11, i32 %section_sym12)
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 9
  %autocast13 = bitcast [1024 x i8]* %fieldRRRROOU to i8*
  %text_section14 = load %Section*, %Section** @text_section, align 8
  %fieldLLL15 = getelementptr inbounds %Section, %Section* %text_section14, i32 0, i32 0
  %data_offset16 = load i64, i64* %fieldLLL15, align 4
  %text_section17 = load %Section*, %Section** @text_section, align 8
  %section_sym18 = load i32, i32* %section_sym, align 4
  call void @put_stabs_r(i8* %autocast13, i32 100, i32 0, i32 0, i64 %data_offset16, %Section* %text_section17, i32 %section_sym18)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %symtab_section19 = load %Section*, %Section** @symtab_section, align 8
  %file20 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldRRRROOU21 = getelementptr inbounds %BufferedFile, %BufferedFile* %file20, i32 0, i32 9
  %autocast22 = bitcast [1024 x i8]* %fieldRRRROOU21 to i8*
  %fun_result23 = call i32 @put_elf_sym(%Section* %symtab_section19, i64 0, i64 0, i32 4, i32 0, i32 65521, i8* %autocast22)
  %int_type = load %CType, %CType* @int_type, align 8
  store i32 0, i32* getelementptr inbounds (%CType, %CType* @int_type, i32 0, i32 0), align 4
  %char_pointer_type = load %CType, %CType* @char_pointer_type, align 8
  store i32 1, i32* getelementptr inbounds (%CType, %CType* @char_pointer_type, i32 0, i32 0), align 4
  %char_pointer_type24 = load %CType, %CType* @char_pointer_type, align 8
  call void @mk_pointer(%CType* @char_pointer_type)
  %func_old_type = load %CType, %CType* @func_old_type, align 8
  store i32 6, i32* getelementptr inbounds (%CType, %CType* @func_old_type, i32 0, i32 0), align 4
  %func_old_type25 = load %CType, %CType* @func_old_type, align 8
  %int_type26 = load %CType, %CType* @int_type, align 8
  %fun_result27 = call %Sym* @sym_push(i32 536870912, %CType* @int_type, i32 0, i32 2)
  store %Sym* %fun_result27, %Sym** getelementptr inbounds (%CType, %CType* @func_old_type, i32 0, i32 1), align 8
  %define_stack = load %Sym*, %Sym** @define_stack, align 8
  store %Sym* %define_stack, %Sym** %define_start, align 8
  store i32 1, i32* @nocode_wanted, align 4
  %s128 = load %TCCState*, %TCCState** %s1, align 8
  %fieldRRRROOU29 = getelementptr inbounds %TCCState, %TCCState* %s128, i32 0, i32 48
  %fieldQUOCARD = getelementptr inbounds [1 x %__jmp_buf_tag], [1 x %__jmp_buf_tag]* %fieldRRRROOU29, i32 0, i32 0
  %fun_result30 = call i32 @_setjmp(%__jmp_buf_tag* %fieldQUOCARD)
  %eq = icmp eq i32 %fun_result30, 0
  br i1 %eq, label %cond_jump_then31, label %cond_end32

cond_jump_then31:                                 ; preds = %cond_end
  %s133 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s133, i32 0, i32 49
  store i32 0, i32* %fieldTU, align 4
  %s134 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU35 = getelementptr inbounds %TCCState, %TCCState* %s134, i32 0, i32 47
  store i32 1, i32* %fieldTU35, align 4
  %file36 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL37 = getelementptr inbounds %BufferedFile, %BufferedFile* %file36, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL37, align 8
  %element_addressAB = load i8*, i8** %fieldLLL37, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  store i32 %icastKY, i32* @ch, align 4
  store i32 3, i32* @tok_flags, align 4
  store i32 3, i32* @parse_flags, align 4
  call void @next()
  call void @decl(i32 240)
  %tok = load i32, i32* @tok, align 4
  %not_eq = icmp ne i32 %tok, -1
  br i1 %not_eq, label %cond_jump_then38, label %cond_end39

cond_end32:                                       ; preds = %cond_end45, %cond_end
  %s151 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU52 = getelementptr inbounds %TCCState, %TCCState* %s151, i32 0, i32 47
  store i32 0, i32* %fieldTU52, align 4
  %define_start53 = load %Sym*, %Sym** %define_start, align 8
  call void @free_defines(%Sym* %define_start53)
  call void @gen_inline_functions()
  %global_stack = load %Sym*, %Sym** @global_stack, align 8
  call void @sym_pop(%Sym** @global_stack, %Sym* null)
  %local_stack = load %Sym*, %Sym** @local_stack, align 8
  call void @sym_pop(%Sym** @local_stack, %Sym* null)
  %s154 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL55 = getelementptr inbounds %TCCState, %TCCState* %s154, i32 0, i32 49
  %nb_errors = load i32, i32* %fieldLLL55, align 4
  %not_eq56 = icmp ne i32 %nb_errors, 0
  br i1 %not_eq56, label %cond_jump_then57, label %cond_else_block

cond_jump_then38:                                 ; preds = %cond_jump_then31
  call void @expect(i8* bitcast ([12 x i8]* @211 to i8*))
  br label %cond_end39

cond_end39:                                       ; preds = %cond_jump_then38, %cond_jump_then31
  %s140 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL41 = getelementptr inbounds %TCCState, %TCCState* %s140, i32 0, i32 42
  %do_debug42 = load i32, i32* %fieldLLL41, align 4
  %icmpA43 = icmp ne i32 %do_debug42, 0
  br i1 %icmpA43, label %cond_jump_then44, label %cond_end45

cond_jump_then44:                                 ; preds = %cond_end39
  %text_section46 = load %Section*, %Section** @text_section, align 8
  %fieldLLL47 = getelementptr inbounds %Section, %Section* %text_section46, i32 0, i32 0
  %data_offset48 = load i64, i64* %fieldLLL47, align 4
  %text_section49 = load %Section*, %Section** @text_section, align 8
  %section_sym50 = load i32, i32* %section_sym, align 4
  call void @put_stabs_r(i8* null, i32 100, i32 0, i32 0, i64 %data_offset48, %Section* %text_section49, i32 %section_sym50)
  br label %cond_end45

cond_end45:                                       ; preds = %cond_jump_then44, %cond_end39
  br label %cond_end32

cond_jump_then57:                                 ; preds = %cond_end32
  store i32 -1, i32* %condtional_result_value, align 4
  br label %cond_end58

cond_else_block:                                  ; preds = %cond_end32
  store i32 0, i32* %condtional_result_value, align 4
  br label %cond_end58

cond_end58:                                       ; preds = %cond_else_block, %cond_jump_then57
  %conditional_result_value = load i32, i32* %condtional_result_value, align 4
  ret i32 %conditional_result_value
}

define internal i64 @elf_hash(i8* %0) {
entry:
  %g = alloca i64, align 8
  %h = alloca i64, align 8
  %name = alloca i8*, align 8
  %name1 = alloca i8**, align 8
  store i8* %0, i8** %name, align 8
  store i8** %name, i8*** %name1, align 8
  store i64 0, i64* %h, align 4
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end, %entry
  %name2 = load i8*, i8** %name, align 8
  %derefference_valueB = load i8, i8* %name2, align 1
  %icmpA = icmp ne i8 %derefference_valueB, 0
  br i1 %icmpA, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %h3 = load i64, i64* %h, align 4
  %lshifttmp = shl i64 %h3, 4
  %name4 = load i8*, i8** %name, align 8
  %ptrToIntC = ptrtoint i8* %name4 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %name, align 8
  %name5 = load i8*, i8** %name, align 8
  %ptrToIntI = ptrtoint i8* %name5 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  %derefference_valueB6 = load i8, i8* %iintToPtrD, align 1
  %icastC = zext i8 %derefference_valueB6 to i64
  %add7 = add i64 %lshifttmp, %icastC
  store i64 %add7, i64* %h, align 4
  %h8 = load i64, i64* %h, align 4
  %andtmp = and i64 %h8, -268435456
  store i64 %andtmp, i64* %g, align 4
  %g9 = load i64, i64* %g, align 4
  %icmpA10 = icmp ne i64 %g9, 0
  br i1 %icmpA10, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %h17 = load i64, i64* %h, align 4
  ret i64 %h17

cond_jump_then:                                   ; preds = %cond_then_block
  %h11 = load i64, i64* %h, align 4
  %g12 = load i64, i64* %g, align 4
  %rshifttmp = lshr i64 %g12, 24
  %xortmp = xor i64 %h11, %rshifttmp
  store i64 %xortmp, i64* %h, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block
  %h13 = load i64, i64* %h, align 4
  %g14 = load i64, i64* %g, align 4
  %xortmp15 = xor i64 %g14, -1
  %andtmp16 = and i64 %h13, %xortmp15
  store i64 %andtmp16, i64* %h, align 4
  br label %loop_top_block
}

define internal void @rebuild_hash(%Section* %0, i32 %1) {
entry:
  %strtab = alloca i8*, align 8
  %h = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %nb_syms = alloca i32, align 4
  %hash = alloca i32*, align 8
  %ptr = alloca i32*, align 8
  %sym = alloca %come_anon88*, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %nb_buckets = alloca i32, align 4
  %nb_buckets2 = alloca i32*, align 8
  store i32 %1, i32* %nb_buckets, align 4
  store i32* %nb_buckets, i32** %nb_buckets2, align 8
  %s3 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s3, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL, align 8
  %fieldLLL4 = getelementptr inbounds %Section, %Section* %link, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL4, align 8
  store i8* %data, i8** %strtab, align 8
  %s5 = load %Section*, %Section** %s, align 8
  %fieldLLL6 = getelementptr inbounds %Section, %Section* %s5, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL6, align 4
  %div = sdiv i64 %data_offset, 24
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %nb_syms, align 4
  %s7 = load %Section*, %Section** %s, align 8
  %fieldLLL8 = getelementptr inbounds %Section, %Section* %s7, i32 0, i32 16
  %hash9 = load %Section*, %Section** %fieldLLL8, align 8
  %fieldTU = getelementptr inbounds %Section, %Section* %hash9, i32 0, i32 0
  store i64 0, i64* %fieldTU, align 4
  %s10 = load %Section*, %Section** %s, align 8
  %fieldLLL11 = getelementptr inbounds %Section, %Section* %s10, i32 0, i32 16
  %hash12 = load %Section*, %Section** %fieldLLL11, align 8
  %nb_buckets13 = load i32, i32* %nb_buckets, align 4
  %add = add i32 2, %nb_buckets13
  %nb_syms14 = load i32, i32* %nb_syms, align 4
  %add15 = add i32 %add, %nb_syms14
  %icastD = sext i32 %add15 to i64
  %mul = mul i64 %icastD, 4
  %fun_result = call i8* @section_ptr_add(%Section* %hash12, i64 %mul)
  %castAQ = bitcast i8* %fun_result to i32*
  store i32* %castAQ, i32** %ptr, align 8
  %ptr16 = load i32*, i32** %ptr, align 8
  %nb_buckets17 = load i32, i32* %nb_buckets, align 4
  %element_addressXYXY = getelementptr i32, i32* %ptr16, i32 0
  store i32 %nb_buckets17, i32* %element_addressXYXY, align 4
  %ptr18 = load i32*, i32** %ptr, align 8
  %nb_syms19 = load i32, i32* %nb_syms, align 4
  %element_addressXYXY20 = getelementptr i32, i32* %ptr18, i32 1
  store i32 %nb_syms19, i32* %element_addressXYXY20, align 4
  %ptr21 = load i32*, i32** %ptr, align 8
  %ptrToIntC = ptrtoint i32* %ptr21 to i64
  %add22 = add i64 %ptrToIntC, 8
  %intToPtrB = inttoptr i64 %add22 to i32*
  store i32* %intToPtrB, i32** %ptr, align 8
  %ptrToIntI = ptrtoint i32* %intToPtrB to i64
  %sub = sub i64 %ptrToIntI, 8
  %iintToPtrD = inttoptr i64 %sub to i32*
  %ptr23 = load i32*, i32** %ptr, align 8
  store i32* %ptr23, i32** %hash, align 8
  %hash24 = load i32*, i32** %hash, align 8
  %castAQ25 = bitcast i32* %hash24 to i8*
  %nb_buckets26 = load i32, i32* %nb_buckets, align 4
  %add27 = add i32 %nb_buckets26, 1
  %icastD28 = sext i32 %add27 to i64
  %mul29 = mul i64 %icastD28, 4
  %fun_result30 = call i8* @memset(i8* %castAQ25, i32 0, i64 %mul29)
  %ptr31 = load i32*, i32** %ptr, align 8
  %nb_buckets32 = load i32, i32* %nb_buckets, align 4
  %add33 = add i32 %nb_buckets32, 1
  %ptrToIntC34 = ptrtoint i32* %ptr31 to i64
  %sext = sext i32 %add33 to i64
  %mul35 = mul i64 %sext, 4
  %add36 = add i64 %ptrToIntC34, %mul35
  %intToPtrB37 = inttoptr i64 %add36 to i32*
  store i32* %intToPtrB37, i32** %ptr, align 8
  %nb_buckets38 = load i32, i32* %nb_buckets, align 4
  %add39 = add i32 %nb_buckets38, 1
  %ptrToIntI40 = ptrtoint i32* %intToPtrB37 to i64
  %sext41 = sext i32 %add39 to i64
  %mul42 = mul i64 %sext41, 4
  %sub43 = sub i64 %ptrToIntI40, %mul42
  %iintToPtrD44 = inttoptr i64 %sub43 to i32*
  %s45 = load %Section*, %Section** %s, align 8
  %fieldLLL46 = getelementptr inbounds %Section, %Section* %s45, i32 0, i32 1
  %data47 = load i8*, i8** %fieldLLL46, align 8
  %castAQ48 = bitcast i8* %data47 to %come_anon88*
  %ptrToIntC49 = ptrtoint %come_anon88* %castAQ48 to i64
  %add50 = add i64 %ptrToIntC49, 24
  %intToPtrB51 = inttoptr i64 %add50 to %come_anon88*
  store %come_anon88* %intToPtrB51, %come_anon88** %sym, align 8
  store i32 1, i32* %sym_index, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %sym_index91 = load i32, i32* %sym_index, align 4
  %add92 = add i32 %sym_index91, 1
  store i32 %add92, i32* %sym_index, align 4
  %sym_index93 = load i32, i32* %sym_index, align 4
  %sub94 = sub i32 %sym_index93, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %sym_index52 = load i32, i32* %sym_index, align 4
  %nb_syms53 = load i32, i32* %nb_syms, align 4
  %le = icmp slt i32 %sym_index52, %nb_syms53
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym54 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL55 = getelementptr inbounds %come_anon88, %come_anon88* %sym54, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL55, align 1
  %icastKY = zext i8 %st_info to i32
  %rshifttmp = lshr i32 %icastKY, 4
  %not_eq = icmp ne i32 %rshifttmp, 0
  br i1 %not_eq, label %cond_jump_then, label %cond_else_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %strtab56 = load i8*, i8** %strtab, align 8
  %sym57 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL58 = getelementptr inbounds %come_anon88, %come_anon88* %sym57, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL58, align 4
  %ptrToIntC59 = ptrtoint i8* %strtab56 to i64
  %sext60 = sext i32 %st_name to i64
  %mul61 = mul i64 %sext60, 1
  %add62 = add i64 %ptrToIntC59, %mul61
  %intToPtrB63 = inttoptr i64 %add62 to i8*
  %fun_result64 = call i64 @elf_hash(i8* %intToPtrB63)
  %nb_buckets65 = load i32, i32* %nb_buckets, align 4
  %icastC = zext i32 %nb_buckets65 to i64
  %urem = urem i64 %fun_result64, %icastC
  %icastM66 = trunc i64 %urem to i32
  store i32 %icastM66, i32* %h, align 4
  %ptr67 = load i32*, i32** %ptr, align 8
  %hash68 = load i32*, i32** %hash, align 8
  %h69 = load i32, i32* %h, align 4
  %element_addressAB = load i32*, i32** %hash, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 %h69
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  store i32 %load_element, i32* %ptr67, align 4
  %hash70 = load i32*, i32** %hash, align 8
  %h71 = load i32, i32* %h, align 4
  %sym_index72 = load i32, i32* %sym_index, align 4
  %element_addressXYXY73 = getelementptr i32, i32* %hash70, i32 %h71
  store i32 %sym_index72, i32* %element_addressXYXY73, align 4
  br label %cond_end

cond_else_block:                                  ; preds = %cond_then_block
  %ptr74 = load i32*, i32** %ptr, align 8
  store i32 0, i32* %ptr74, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %ptr75 = load i32*, i32** %ptr, align 8
  %ptrToIntC76 = ptrtoint i32* %ptr75 to i64
  %add77 = add i64 %ptrToIntC76, 4
  %intToPtrB78 = inttoptr i64 %add77 to i32*
  store i32* %intToPtrB78, i32** %ptr, align 8
  %ptr79 = load i32*, i32** %ptr, align 8
  %ptrToIntI80 = ptrtoint i32* %ptr79 to i64
  %sub81 = sub i64 %ptrToIntI80, 4
  %iintToPtrD82 = inttoptr i64 %sub81 to i32*
  %sym83 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC84 = ptrtoint %come_anon88* %sym83 to i64
  %add85 = add i64 %ptrToIntC84, 24
  %intToPtrB86 = inttoptr i64 %add85 to %come_anon88*
  store %come_anon88* %intToPtrB86, %come_anon88** %sym, align 8
  %sym87 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI88 = ptrtoint %come_anon88* %sym87 to i64
  %sub89 = sub i64 %ptrToIntI88, 24
  %iintToPtrD90 = inttoptr i64 %sub89 to %come_anon88*
  br label %loop_continue_top_block
}

define internal i32 @find_elf_sym(%Section* %0, i8* %1) {
entry:
  %name1 = alloca i8*, align 8
  %h = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %nbuckets = alloca i32, align 4
  %hs = alloca %Section*, align 8
  %sym = alloca %come_anon88*, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %Section**, align 8
  store %Section* %0, %Section** %s, align 8
  store %Section** %s, %Section*** %s1, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  %s3 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s3, i32 0, i32 16
  %hash = load %Section*, %Section** %fieldLLL, align 8
  store %Section* %hash, %Section** %hs, align 8
  %hs4 = load %Section*, %Section** %hs, align 8
  %logical_denial = icmp eq %Section* %hs4, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret i32 0

cond_end:                                         ; preds = %entry
  %hs5 = load %Section*, %Section** %hs, align 8
  %fieldLLL6 = getelementptr inbounds %Section, %Section* %hs5, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL6, align 8
  %castAQ = bitcast i8* %data to i32*
  %castXYXXYXYXY = bitcast i8** %fieldLLL6 to i32**
  %element_addressAB = load i32*, i32** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 0
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  store i32 %load_element, i32* %nbuckets, align 4
  %name7 = load i8*, i8** %name, align 8
  %fun_result = call i64 @elf_hash(i8* %name7)
  %nbuckets8 = load i32, i32* %nbuckets, align 4
  %icastD = sext i32 %nbuckets8 to i64
  %urem = urem i64 %fun_result, %icastD
  %icastM = trunc i64 %urem to i32
  store i32 %icastM, i32* %h, align 4
  %hs9 = load %Section*, %Section** %hs, align 8
  %fieldLLL10 = getelementptr inbounds %Section, %Section* %hs9, i32 0, i32 1
  %data11 = load i8*, i8** %fieldLLL10, align 8
  %castAQ12 = bitcast i8* %data11 to i32*
  %h13 = load i32, i32* %h, align 4
  %add = add i32 2, %h13
  %castXYXXYXYXY14 = bitcast i8** %fieldLLL10 to i32**
  %element_addressAB15 = load i32*, i32** %castXYXXYXYXY14, align 8
  %element_addressXYXZY16 = getelementptr inbounds i32, i32* %element_addressAB15, i32 %add
  %load_element17 = load i32, i32* %element_addressXYXZY16, align 4
  store i32 %load_element17, i32* %sym_index, align 4
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end42, %cond_end
  %sym_index18 = load i32, i32* %sym_index, align 4
  %not_eq = icmp ne i32 %sym_index18, 0
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s19 = load %Section*, %Section** %s, align 8
  %fieldLLL20 = getelementptr inbounds %Section, %Section* %s19, i32 0, i32 1
  %data21 = load i8*, i8** %fieldLLL20, align 8
  %castAQ22 = bitcast i8* %data21 to %come_anon88*
  %sym_index23 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY24 = bitcast i8** %fieldLLL20 to %come_anon88**
  %element_addressAB25 = load %come_anon88*, %come_anon88** %castXYXXYXYXY24, align 8
  %element_addressXYXZY26 = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB25, i32 %sym_index23
  %load_element27 = load %come_anon88, %come_anon88* %element_addressXYXZY26, align 4
  store %come_anon88* %element_addressXYXZY26, %come_anon88** %sym, align 8
  %s28 = load %Section*, %Section** %s, align 8
  %fieldLLL29 = getelementptr inbounds %Section, %Section* %s28, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL29, align 8
  %fieldLLL30 = getelementptr inbounds %Section, %Section* %link, i32 0, i32 1
  %data31 = load i8*, i8** %fieldLLL30, align 8
  %sym32 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL33 = getelementptr inbounds %come_anon88, %come_anon88* %sym32, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL33, align 4
  %ptrToIntC = ptrtoint i8* %data31 to i64
  %sext = sext i32 %st_name to i64
  %mul = mul i64 %sext, 1
  %add34 = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add34 to i8*
  store i8* %intToPtrB, i8** %name1, align 8
  %name35 = load i8*, i8** %name, align 8
  %name136 = load i8*, i8** %name1, align 8
  %fun_result37 = call i32 @strcmp(i8* %name35, i8* %name136)
  %logical_denial38 = icmp eq i32 %fun_result37, 0
  %castOOOO39 = zext i1 %logical_denial38 to i32
  %icmpA40 = icmp ne i32 %castOOOO39, 0
  br i1 %icmpA40, label %cond_jump_then41, label %cond_end42

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 0

cond_jump_then41:                                 ; preds = %cond_then_block
  %sym_index43 = load i32, i32* %sym_index, align 4
  ret i32 %sym_index43

cond_end42:                                       ; preds = %cond_then_block
  %hs44 = load %Section*, %Section** %hs, align 8
  %fieldLLL45 = getelementptr inbounds %Section, %Section* %hs44, i32 0, i32 1
  %data46 = load i8*, i8** %fieldLLL45, align 8
  %castAQ47 = bitcast i8* %data46 to i32*
  %nbuckets48 = load i32, i32* %nbuckets, align 4
  %add49 = add i32 2, %nbuckets48
  %sym_index50 = load i32, i32* %sym_index, align 4
  %add51 = add i32 %add49, %sym_index50
  %castXYXXYXYXY52 = bitcast i8** %fieldLLL45 to i32**
  %element_addressAB53 = load i32*, i32** %castXYXXYXYXY52, align 8
  %element_addressXYXZY54 = getelementptr inbounds i32, i32* %element_addressAB53, i32 %add51
  %load_element55 = load i32, i32* %element_addressXYXZY54, align 4
  store i32 %load_element55, i32* %sym_index, align 4
  br label %loop_top_block
}

define i8* @tcc_get_symbol_err(%TCCState* %0, i8* %1) {
entry:
  %sym = alloca i8*, align 8
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %name4 = load i8*, i8** %name, align 8
  %fun_result = call i8* @tcc_get_symbol(%TCCState* %s3, i8* %name4)
  store i8* %fun_result, i8** %sym, align 8
  %sym5 = load i8*, i8** %sym, align 8
  %logical_denial = icmp eq i8* %sym5, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %name6 = load i8*, i8** %name, align 8
  call void (i8*, ...) @error(i8* bitcast ([15 x i8]* @217 to i8*), i8* %name6)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %sym7 = load i8*, i8** %sym, align 8
  ret i8* %sym7
}

define internal void @sort_syms(%TCCState* %0, %Section* %1) {
entry:
  %andand = alloca i1, align 1
  %sym_index = alloca i32, align 4
  %type = alloca i32, align 4
  %sr = alloca %Section*, align 8
  %rel_end = alloca %come_anon94*, align 8
  %rel = alloca %come_anon94*, align 8
  %q = alloca %come_anon88*, align 8
  %p = alloca %come_anon88*, align 8
  %i = alloca i32, align 4
  %nb_syms = alloca i32, align 4
  %new_syms = alloca %come_anon88*, align 8
  %old_to_new_syms = alloca i32*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s = alloca %Section*, align 8
  %s2 = alloca %Section**, align 8
  store %Section* %1, %Section** %s, align 8
  store %Section** %s, %Section*** %s2, align 8
  %s3 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s3, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  %div = sdiv i64 %data_offset, 24
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %nb_syms, align 4
  %nb_syms4 = load i32, i32* %nb_syms, align 4
  %icastD = sext i32 %nb_syms4 to i64
  %mul = mul i64 %icastD, 24
  %fun_result = call i8* @tcc_malloc(i64 %mul)
  %castAQ = bitcast i8* %fun_result to %come_anon88*
  store %come_anon88* %castAQ, %come_anon88** %new_syms, align 8
  %nb_syms5 = load i32, i32* %nb_syms, align 4
  %icastD6 = sext i32 %nb_syms5 to i64
  %mul7 = mul i64 %icastD6, 4
  %fun_result8 = call i8* @tcc_malloc(i64 %mul7)
  %castAQ9 = bitcast i8* %fun_result8 to i32*
  store i32* %castAQ9, i32** %old_to_new_syms, align 8
  %s10 = load %Section*, %Section** %s, align 8
  %fieldLLL11 = getelementptr inbounds %Section, %Section* %s10, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL11, align 8
  %castAQ12 = bitcast i8* %data to %come_anon88*
  store %come_anon88* %castAQ12, %come_anon88** %p, align 8
  %new_syms13 = load %come_anon88*, %come_anon88** %new_syms, align 8
  store %come_anon88* %new_syms13, %come_anon88** %q, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %i36 = load i32, i32* %i, align 4
  %add37 = add i32 %i36, 1
  store i32 %add37, i32* %i, align 4
  %i38 = load i32, i32* %i, align 4
  %sub39 = sub i32 %i38, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i14 = load i32, i32* %i, align 4
  %nb_syms15 = load i32, i32* %nb_syms, align 4
  %le = icmp slt i32 %i14, %nb_syms15
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p16 = load %come_anon88*, %come_anon88** %p, align 8
  %fieldLLL17 = getelementptr inbounds %come_anon88, %come_anon88* %p16, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL17, align 1
  %icastKY = zext i8 %st_info to i32
  %rshifttmp = lshr i32 %icastKY, 4
  %eq = icmp eq i32 %rshifttmp, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %s40 = load %Section*, %Section** %s, align 8
  %q41 = load %come_anon88*, %come_anon88** %q, align 8
  %new_syms42 = load %come_anon88*, %come_anon88** %new_syms, align 8
  %ptrToIntG43 = ptrtoint %come_anon88* %q41 to i64
  %ptrToIntH44 = ptrtoint %come_anon88* %new_syms42 to i64
  %sub45 = sub i64 %ptrToIntG43, %ptrToIntH44
  %div46 = sdiv i64 %sub45, 24
  %icastM47 = trunc i64 %div46 to i32
  %fieldTU = getelementptr inbounds %Section, %Section* %s40, i32 0, i32 7
  store i32 %icastM47, i32* %fieldTU, align 4
  %s48 = load %Section*, %Section** %s, align 8
  %fieldLLL49 = getelementptr inbounds %Section, %Section* %s48, i32 0, i32 1
  %data50 = load i8*, i8** %fieldLLL49, align 8
  %castAQ51 = bitcast i8* %data50 to %come_anon88*
  store %come_anon88* %castAQ51, %come_anon88** %p, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block53

cond_jump_then:                                   ; preds = %cond_then_block
  %old_to_new_syms18 = load i32*, i32** %old_to_new_syms, align 8
  %i19 = load i32, i32* %i, align 4
  %q20 = load %come_anon88*, %come_anon88** %q, align 8
  %new_syms21 = load %come_anon88*, %come_anon88** %new_syms, align 8
  %ptrToIntG = ptrtoint %come_anon88* %q20 to i64
  %ptrToIntH = ptrtoint %come_anon88* %new_syms21 to i64
  %sub = sub i64 %ptrToIntG, %ptrToIntH
  %div22 = sdiv i64 %sub, 24
  %icastM23 = trunc i64 %div22 to i32
  %element_addressXYXY = getelementptr i32, i32* %old_to_new_syms18, i32 %i19
  store i32 %icastM23, i32* %element_addressXYXY, align 4
  %q24 = load %come_anon88*, %come_anon88** %q, align 8
  %ptrToIntC = ptrtoint %come_anon88* %q24 to i64
  %add = add i64 %ptrToIntC, 24
  %intToPtrB = inttoptr i64 %add to %come_anon88*
  store %come_anon88* %intToPtrB, %come_anon88** %q, align 8
  %q25 = load %come_anon88*, %come_anon88** %q, align 8
  %ptrToIntI = ptrtoint %come_anon88* %q25 to i64
  %sub26 = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub26 to %come_anon88*
  %p27 = load %come_anon88*, %come_anon88** %p, align 8
  %derefference_valueB = load %come_anon88, %come_anon88* %p27, align 4
  store %come_anon88 %derefference_valueB, %come_anon88* %iintToPtrD, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block
  %p28 = load %come_anon88*, %come_anon88** %p, align 8
  %ptrToIntC29 = ptrtoint %come_anon88* %p28 to i64
  %add30 = add i64 %ptrToIntC29, 24
  %intToPtrB31 = inttoptr i64 %add30 to %come_anon88*
  store %come_anon88* %intToPtrB31, %come_anon88** %p, align 8
  %p32 = load %come_anon88*, %come_anon88** %p, align 8
  %ptrToIntI33 = ptrtoint %come_anon88* %p32 to i64
  %sub34 = sub i64 %ptrToIntI33, 24
  %iintToPtrD35 = inttoptr i64 %sub34 to %come_anon88*
  br label %loop_continue_top_block

loop_continue_top_block52:                        ; preds = %cond_end65
  %i94 = load i32, i32* %i, align 4
  %add95 = add i32 %i94, 1
  store i32 %add95, i32* %i, align 4
  %i96 = load i32, i32* %i, align 4
  %sub97 = sub i32 %i96, 1
  br label %loop_top_block53

loop_top_block53:                                 ; preds = %loop_continue_top_block52, %cond_end_block
  %i54 = load i32, i32* %i, align 4
  %nb_syms55 = load i32, i32* %nb_syms, align 4
  %le56 = icmp slt i32 %i54, %nb_syms55
  br i1 %le56, label %cond_then_block57, label %cond_end_block58

cond_then_block57:                                ; preds = %loop_top_block53
  %p59 = load %come_anon88*, %come_anon88** %p, align 8
  %fieldLLL60 = getelementptr inbounds %come_anon88, %come_anon88* %p59, i32 0, i32 1
  %st_info61 = load i8, i8* %fieldLLL60, align 1
  %icastKY62 = zext i8 %st_info61 to i32
  %rshifttmp63 = lshr i32 %icastKY62, 4
  %not_eq = icmp ne i32 %rshifttmp63, 0
  br i1 %not_eq, label %cond_jump_then64, label %cond_end65

cond_end_block58:                                 ; preds = %loop_top_block53
  %s98 = load %Section*, %Section** %s, align 8
  %fieldLLL99 = getelementptr inbounds %Section, %Section* %s98, i32 0, i32 1
  %data100 = load i8*, i8** %fieldLLL99, align 8
  %new_syms101 = load %come_anon88*, %come_anon88** %new_syms, align 8
  %castAQ102 = bitcast %come_anon88* %new_syms101 to i8*
  %nb_syms103 = load i32, i32* %nb_syms, align 4
  %icastD104 = sext i32 %nb_syms103 to i64
  %mul105 = mul i64 %icastD104, 24
  %fun_result106 = call i8* @memcpy(i8* %data100, i8* %castAQ102, i64 %mul105)
  %new_syms107 = load %come_anon88*, %come_anon88** %new_syms, align 8
  %castAQ108 = bitcast %come_anon88* %new_syms107 to i8*
  call void @tcc_free(i8* %castAQ108)
  store i32 1, i32* %i, align 4
  br label %loop_top_block110

cond_jump_then64:                                 ; preds = %cond_then_block57
  %old_to_new_syms66 = load i32*, i32** %old_to_new_syms, align 8
  %i67 = load i32, i32* %i, align 4
  %q68 = load %come_anon88*, %come_anon88** %q, align 8
  %new_syms69 = load %come_anon88*, %come_anon88** %new_syms, align 8
  %ptrToIntG70 = ptrtoint %come_anon88* %q68 to i64
  %ptrToIntH71 = ptrtoint %come_anon88* %new_syms69 to i64
  %sub72 = sub i64 %ptrToIntG70, %ptrToIntH71
  %div73 = sdiv i64 %sub72, 24
  %icastM74 = trunc i64 %div73 to i32
  %element_addressXYXY75 = getelementptr i32, i32* %old_to_new_syms66, i32 %i67
  store i32 %icastM74, i32* %element_addressXYXY75, align 4
  %q76 = load %come_anon88*, %come_anon88** %q, align 8
  %ptrToIntC77 = ptrtoint %come_anon88* %q76 to i64
  %add78 = add i64 %ptrToIntC77, 24
  %intToPtrB79 = inttoptr i64 %add78 to %come_anon88*
  store %come_anon88* %intToPtrB79, %come_anon88** %q, align 8
  %q80 = load %come_anon88*, %come_anon88** %q, align 8
  %ptrToIntI81 = ptrtoint %come_anon88* %q80 to i64
  %sub82 = sub i64 %ptrToIntI81, 24
  %iintToPtrD83 = inttoptr i64 %sub82 to %come_anon88*
  %p84 = load %come_anon88*, %come_anon88** %p, align 8
  %derefference_valueB85 = load %come_anon88, %come_anon88* %p84, align 4
  store %come_anon88 %derefference_valueB85, %come_anon88* %iintToPtrD83, align 4
  br label %cond_end65

cond_end65:                                       ; preds = %cond_jump_then64, %cond_then_block57
  %p86 = load %come_anon88*, %come_anon88** %p, align 8
  %ptrToIntC87 = ptrtoint %come_anon88* %p86 to i64
  %add88 = add i64 %ptrToIntC87, 24
  %intToPtrB89 = inttoptr i64 %add88 to %come_anon88*
  store %come_anon88* %intToPtrB89, %come_anon88** %p, align 8
  %p90 = load %come_anon88*, %come_anon88** %p, align 8
  %ptrToIntI91 = ptrtoint %come_anon88* %p90 to i64
  %sub92 = sub i64 %ptrToIntI91, 24
  %iintToPtrD93 = inttoptr i64 %sub92 to %come_anon88*
  br label %loop_continue_top_block52

loop_continue_top_block109:                       ; preds = %cond_end130
  %i181 = load i32, i32* %i, align 4
  %add182 = add i32 %i181, 1
  store i32 %add182, i32* %i, align 4
  %i183 = load i32, i32* %i, align 4
  %sub184 = sub i32 %i183, 1
  br label %loop_top_block110

loop_top_block110:                                ; preds = %loop_continue_top_block109, %cond_end_block58
  %i111 = load i32, i32* %i, align 4
  %s1112 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL113 = getelementptr inbounds %TCCState, %TCCState* %s1112, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL113, align 4
  %le114 = icmp slt i32 %i111, %nb_sections
  br i1 %le114, label %cond_then_block115, label %cond_end_block116

cond_then_block115:                               ; preds = %loop_top_block110
  %s1117 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL118 = getelementptr inbounds %TCCState, %TCCState* %s1117, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL118, align 8
  %i119 = load i32, i32* %i, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL118, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %i119
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  store %Section* %load_element, %Section** %sr, align 8
  %sr120 = load %Section*, %Section** %sr, align 8
  %fieldLLL121 = getelementptr inbounds %Section, %Section* %sr120, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL121, align 4
  %eq122 = icmp eq i32 %sh_type, 4
  store i1 %eq122, i1* %andand, align 1
  br i1 %eq122, label %cond_jump_then123, label %cond_jump_end

cond_end_block116:                                ; preds = %loop_top_block110
  %old_to_new_syms185 = load i32*, i32** %old_to_new_syms, align 8
  %castAQ186 = bitcast i32* %old_to_new_syms185 to i8*
  call void @tcc_free(i8* %castAQ186)
  ret void

cond_jump_then123:                                ; preds = %cond_then_block115
  %sr124 = load %Section*, %Section** %sr, align 8
  %fieldLLL125 = getelementptr inbounds %Section, %Section* %sr124, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL125, align 8
  %s126 = load %Section*, %Section** %s, align 8
  %eq127 = icmp eq %Section* %link, %s126
  %andand128 = and i1 %eq122, %eq127
  store i1 %andand128, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then123, %cond_then_block115
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then129, label %cond_end130

cond_jump_then129:                                ; preds = %cond_jump_end
  %sr131 = load %Section*, %Section** %sr, align 8
  %fieldLLL132 = getelementptr inbounds %Section, %Section* %sr131, i32 0, i32 1
  %data133 = load i8*, i8** %fieldLLL132, align 8
  %sr134 = load %Section*, %Section** %sr, align 8
  %fieldLLL135 = getelementptr inbounds %Section, %Section* %sr134, i32 0, i32 0
  %data_offset136 = load i64, i64* %fieldLLL135, align 4
  %ptrToIntC137 = ptrtoint i8* %data133 to i64
  %mul138 = mul i64 %data_offset136, 1
  %add139 = add i64 %ptrToIntC137, %mul138
  %intToPtrB140 = inttoptr i64 %add139 to i8*
  %castAQ141 = bitcast i8* %intToPtrB140 to %come_anon94*
  store %come_anon94* %castAQ141, %come_anon94** %rel_end, align 8
  %sr142 = load %Section*, %Section** %sr, align 8
  %fieldLLL143 = getelementptr inbounds %Section, %Section* %sr142, i32 0, i32 1
  %data144 = load i8*, i8** %fieldLLL143, align 8
  %castAQ145 = bitcast i8* %data144 to %come_anon94*
  store %come_anon94* %castAQ145, %come_anon94** %rel, align 8
  br label %loop_top_block147

cond_end130:                                      ; preds = %cond_end_block152, %cond_jump_end
  br label %loop_continue_top_block109

loop_continue_top_block146:                       ; preds = %cond_then_block151
  %rel173 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntC174 = ptrtoint %come_anon94* %rel173 to i64
  %add175 = add i64 %ptrToIntC174, 24
  %intToPtrB176 = inttoptr i64 %add175 to %come_anon94*
  store %come_anon94* %intToPtrB176, %come_anon94** %rel, align 8
  %rel177 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntI178 = ptrtoint %come_anon94* %rel177 to i64
  %sub179 = sub i64 %ptrToIntI178, 24
  %iintToPtrD180 = inttoptr i64 %sub179 to %come_anon94*
  br label %loop_top_block147

loop_top_block147:                                ; preds = %loop_continue_top_block146, %cond_jump_then129
  %rel148 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel_end149 = load %come_anon94*, %come_anon94** %rel_end, align 8
  %le150 = icmp slt %come_anon94* %rel148, %rel_end149
  br i1 %le150, label %cond_then_block151, label %cond_end_block152

cond_then_block151:                               ; preds = %loop_top_block147
  %rel153 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL154 = getelementptr inbounds %come_anon94, %come_anon94* %rel153, i32 0, i32 1
  %r_info = load i64, i64* %fieldLLL154, align 4
  %rshifttmp155 = lshr i64 %r_info, 32
  %icastM156 = trunc i64 %rshifttmp155 to i32
  store i32 %icastM156, i32* %sym_index, align 4
  %rel157 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL158 = getelementptr inbounds %come_anon94, %come_anon94* %rel157, i32 0, i32 1
  %r_info159 = load i64, i64* %fieldLLL158, align 4
  %icastM160 = trunc i64 %r_info159 to i32
  store i32 %icastM160, i32* %type, align 4
  %old_to_new_syms161 = load i32*, i32** %old_to_new_syms, align 8
  %sym_index162 = load i32, i32* %sym_index, align 4
  %element_addressAB163 = load i32*, i32** %old_to_new_syms, align 8
  %element_addressXYXZY164 = getelementptr inbounds i32, i32* %element_addressAB163, i32 %sym_index162
  %load_element165 = load i32, i32* %element_addressXYXZY164, align 4
  store i32 %load_element165, i32* %sym_index, align 4
  %rel166 = load %come_anon94*, %come_anon94** %rel, align 8
  %sym_index167 = load i32, i32* %sym_index, align 4
  %icastD168 = sext i32 %sym_index167 to i64
  %lshifttmp = shl i64 %icastD168, 32
  %type169 = load i32, i32* %type, align 4
  %icastD170 = sext i32 %type169 to i64
  %add171 = add i64 %lshifttmp, %icastD170
  %fieldTU172 = getelementptr inbounds %come_anon94, %come_anon94* %rel166, i32 0, i32 1
  store i64 %add171, i64* %fieldTU172, align 4
  br label %loop_continue_top_block146

cond_end_block152:                                ; preds = %loop_top_block147
  br label %cond_end130
}

define internal void @relocate_common_syms() {
entry:
  %align = alloca i64, align 8
  %offset = alloca i64, align 8
  %sym_end = alloca %come_anon88*, align 8
  %sym = alloca %come_anon88*, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %symtab_section1 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL2 = getelementptr inbounds %Section, %Section* %symtab_section1, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL2, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon88*
  store %come_anon88* %castAQ, %come_anon88** %sym_end, align 8
  %symtab_section3 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL4 = getelementptr inbounds %Section, %Section* %symtab_section3, i32 0, i32 1
  %data5 = load i8*, i8** %fieldLLL4, align 8
  %castAQ6 = bitcast i8* %data5 to %come_anon88*
  %ptrToIntC7 = ptrtoint %come_anon88* %castAQ6 to i64
  %add8 = add i64 %ptrToIntC7, 24
  %intToPtrB9 = inttoptr i64 %add8 to %come_anon88*
  store %come_anon88* %intToPtrB9, %come_anon88** %sym, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %sym40 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC41 = ptrtoint %come_anon88* %sym40 to i64
  %add42 = add i64 %ptrToIntC41, 24
  %intToPtrB43 = inttoptr i64 %add42 to %come_anon88*
  store %come_anon88* %intToPtrB43, %come_anon88** %sym, align 8
  %sym44 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI = ptrtoint %come_anon88* %sym44 to i64
  %sub45 = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub45 to %come_anon88*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %sym10 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym_end11 = load %come_anon88*, %come_anon88** %sym_end, align 8
  %le = icmp slt %come_anon88* %sym10, %sym_end11
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym12 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL13 = getelementptr inbounds %come_anon88, %come_anon88* %sym12, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL13, align 2
  %eq = icmp eq i16 %st_shndx, -14
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %sym14 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL15 = getelementptr inbounds %come_anon88, %come_anon88* %sym14, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL15, align 4
  store i64 %st_value, i64* %align, align 4
  %bss_section = load %Section*, %Section** @bss_section, align 8
  %fieldLLL16 = getelementptr inbounds %Section, %Section* %bss_section, i32 0, i32 0
  %data_offset17 = load i64, i64* %fieldLLL16, align 4
  store i64 %data_offset17, i64* %offset, align 4
  %offset18 = load i64, i64* %offset, align 4
  %align19 = load i64, i64* %align, align 4
  %add20 = add i64 %offset18, %align19
  %sub = sub i64 %add20, 1
  %align21 = load i64, i64* %align, align 4
  %sub22 = sub i64 0, %align21
  %andtmp = and i64 %sub, %sub22
  store i64 %andtmp, i64* %offset, align 4
  %sym23 = load %come_anon88*, %come_anon88** %sym, align 8
  %offset24 = load i64, i64* %offset, align 4
  %fieldTU = getelementptr inbounds %come_anon88, %come_anon88* %sym23, i32 0, i32 4
  store i64 %offset24, i64* %fieldTU, align 4
  %sym25 = load %come_anon88*, %come_anon88** %sym, align 8
  %bss_section26 = load %Section*, %Section** @bss_section, align 8
  %fieldLLL27 = getelementptr inbounds %Section, %Section* %bss_section26, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL27, align 4
  %icastG = trunc i32 %sh_num to i16
  %fieldTU28 = getelementptr inbounds %come_anon88, %come_anon88* %sym25, i32 0, i32 3
  store i16 %icastG, i16* %fieldTU28, align 2
  %offset29 = load i64, i64* %offset, align 4
  %sym30 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL31 = getelementptr inbounds %come_anon88, %come_anon88* %sym30, i32 0, i32 5
  %st_size = load i64, i64* %fieldLLL31, align 4
  %add32 = add i64 %offset29, %st_size
  store i64 %add32, i64* %offset, align 4
  %sym33 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL34 = getelementptr inbounds %come_anon88, %come_anon88* %sym33, i32 0, i32 5
  %st_size35 = load i64, i64* %fieldLLL34, align 4
  %sub36 = sub i64 %add32, %st_size35
  %bss_section37 = load %Section*, %Section** @bss_section, align 8
  %offset38 = load i64, i64* %offset, align 4
  %fieldTU39 = getelementptr inbounds %Section, %Section* %bss_section37, i32 0, i32 0
  store i64 %offset38, i64* %fieldTU39, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block
  br label %loop_continue_top_block
}

define internal void @relocate_syms(%TCCState* %0, i32 %1) {
entry:
  %addr = alloca i64, align 8
  %name = alloca i8*, align 8
  %sym_index = alloca i32, align 4
  %sh_num = alloca i32, align 4
  %sym_bind = alloca i32, align 4
  %sym_end = alloca %come_anon88*, align 8
  %esym = alloca %come_anon88*, align 8
  %sym = alloca %come_anon88*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %do_resolve = alloca i32, align 4
  %do_resolve2 = alloca i32*, align 8
  store i32 %1, i32* %do_resolve, align 4
  store i32* %do_resolve, i32** %do_resolve2, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %symtab_section3 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL4 = getelementptr inbounds %Section, %Section* %symtab_section3, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL4, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon88*
  store %come_anon88* %castAQ, %come_anon88** %sym_end, align 8
  %symtab_section5 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL6 = getelementptr inbounds %Section, %Section* %symtab_section5, i32 0, i32 1
  %data7 = load i8*, i8** %fieldLLL6, align 8
  %castAQ8 = bitcast i8* %data7 to %come_anon88*
  %ptrToIntC9 = ptrtoint %come_anon88* %castAQ8 to i64
  %add10 = add i64 %ptrToIntC9, 24
  %intToPtrB11 = inttoptr i64 %add10 to %come_anon88*
  store %come_anon88* %intToPtrB11, %come_anon88** %sym, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %relocate_syms.found
  %sym109 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC110 = ptrtoint %come_anon88* %sym109 to i64
  %add111 = add i64 %ptrToIntC110, 24
  %intToPtrB112 = inttoptr i64 %add111 to %come_anon88*
  store %come_anon88* %intToPtrB112, %come_anon88** %sym, align 8
  %sym113 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI = ptrtoint %come_anon88* %sym113 to i64
  %sub = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub to %come_anon88*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %sym12 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym_end13 = load %come_anon88*, %come_anon88** %sym_end, align 8
  %le = icmp slt %come_anon88* %sym12, %sym_end13
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym14 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL15 = getelementptr inbounds %come_anon88, %come_anon88* %sym14, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL15, align 2
  %icastKY = zext i16 %st_shndx to i32
  store i32 %icastKY, i32* %sh_num, align 4
  %sh_num16 = load i32, i32* %sh_num, align 4
  %eq = icmp eq i32 %sh_num16, 0
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %strtab_section = load %Section*, %Section** @strtab_section, align 8
  %fieldLLL17 = getelementptr inbounds %Section, %Section* %strtab_section, i32 0, i32 1
  %data18 = load i8*, i8** %fieldLLL17, align 8
  %sym19 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL20 = getelementptr inbounds %come_anon88, %come_anon88* %sym19, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL20, align 4
  %ptrToIntC21 = ptrtoint i8* %data18 to i64
  %sext = sext i32 %st_name to i64
  %mul22 = mul i64 %sext, 1
  %add23 = add i64 %ptrToIntC21, %mul22
  %intToPtrB24 = inttoptr i64 %add23 to i8*
  store i8* %intToPtrB24, i8** %name, align 8
  %do_resolve25 = load i32, i32* %do_resolve, align 4
  %icmpA = icmp ne i32 %do_resolve25, 0
  br i1 %icmpA, label %cond_jump_then26, label %cond_jump_elif027

cond_jump_elif0:                                  ; preds = %cond_then_block
  %sh_num91 = load i32, i32* %sh_num, align 4
  %le92 = icmp slt i32 %sh_num91, 65280
  br i1 %le92, label %cond_jump_elif_then0, label %cond_end

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %sym93 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym94 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL95 = getelementptr inbounds %come_anon88, %come_anon88* %sym94, i32 0, i32 4
  %st_value96 = load i64, i64* %fieldLLL95, align 4
  %s197 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL98 = getelementptr inbounds %TCCState, %TCCState* %s197, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL98, align 8
  %sym99 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL100 = getelementptr inbounds %come_anon88, %come_anon88* %sym99, i32 0, i32 3
  %st_shndx101 = load i16, i16* %fieldLLL100, align 2
  %icastKY102 = zext i16 %st_shndx101 to i32
  %element_addressAB103 = load %Section**, %Section*** %fieldLLL98, align 8
  %element_addressXYXZY104 = getelementptr inbounds %Section*, %Section** %element_addressAB103, i32 %icastKY102
  %load_element105 = load %Section*, %Section** %element_addressXYXZY104, align 8
  %fieldLLL106 = getelementptr inbounds %Section, %Section* %load_element105, i32 0, i32 11
  %sh_addr = load i64, i64* %fieldLLL106, align 4
  %add107 = add i64 %st_value96, %sh_addr
  %fieldTU108 = getelementptr inbounds %come_anon88, %come_anon88* %sym93, i32 0, i32 4
  store i64 %add107, i64* %fieldTU108, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_elif_then0, %cond_jump_elif0, %cond_end87
  br label %relocate_syms.found

cond_jump_then26:                                 ; preds = %cond_jump_then
  %symtab_section30 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL31 = getelementptr inbounds %Section, %Section* %symtab_section30, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL31, align 8
  %fieldLLL32 = getelementptr inbounds %Section, %Section* %link, i32 0, i32 1
  %data33 = load i8*, i8** %fieldLLL32, align 8
  %sym34 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL35 = getelementptr inbounds %come_anon88, %come_anon88* %sym34, i32 0, i32 0
  %st_name36 = load i32, i32* %fieldLLL35, align 4
  %ptrToIntC37 = ptrtoint i8* %data33 to i64
  %sext38 = sext i32 %st_name36 to i64
  %mul39 = mul i64 %sext38, 1
  %add40 = add i64 %ptrToIntC37, %mul39
  %intToPtrB41 = inttoptr i64 %add40 to i8*
  store i8* %intToPtrB41, i8** %name, align 8
  %s142 = load %TCCState*, %TCCState** %s1, align 8
  %name43 = load i8*, i8** %name, align 8
  %sym44 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL45 = getelementptr inbounds %come_anon88, %come_anon88* %sym44, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL45, align 1
  %icastKY46 = zext i8 %st_info to i32
  %andtmp = and i32 %icastKY46, 15
  %fun_result = call i8* @resolve_sym(%TCCState* %s142, i8* %name43, i32 %andtmp)
  %icatXXXXXX = ptrtoint i8* %fun_result to i64
  store i64 %icatXXXXXX, i64* %addr, align 4
  %addr47 = load i64, i64* %addr, align 4
  %icmpA48 = icmp ne i64 %addr47, 0
  br i1 %icmpA48, label %cond_jump_then49, label %cond_end50

cond_jump_elif027:                                ; preds = %cond_jump_then
  %s153 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL54 = getelementptr inbounds %TCCState, %TCCState* %s153, i32 0, i32 23
  %dynsym = load %Section*, %Section** %fieldLLL54, align 8
  %icmpB = icmp ne %Section* %dynsym, null
  br i1 %icmpB, label %cond_jump_elif_then028, label %cond_end29

cond_jump_elif_then028:                           ; preds = %cond_jump_elif027
  %s155 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL56 = getelementptr inbounds %TCCState, %TCCState* %s155, i32 0, i32 23
  %dynsym57 = load %Section*, %Section** %fieldLLL56, align 8
  %name58 = load i8*, i8** %name, align 8
  %fun_result59 = call i32 @find_elf_sym(%Section* %dynsym57, i8* %name58)
  store i32 %fun_result59, i32* %sym_index, align 4
  %sym_index60 = load i32, i32* %sym_index, align 4
  %icmpA61 = icmp ne i32 %sym_index60, 0
  br i1 %icmpA61, label %cond_jump_then62, label %cond_end63

cond_end29:                                       ; preds = %cond_end63, %cond_jump_elif027, %cond_end50
  %name75 = load i8*, i8** %name, align 8
  %fun_result76 = call i32 @strcmp(i8* %name75, i8* bitcast ([7 x i8]* @221 to i8*))
  %logical_denial = icmp eq i32 %fun_result76, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA77 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA77, label %cond_jump_then78, label %cond_end79

cond_jump_then49:                                 ; preds = %cond_jump_then26
  %sym51 = load %come_anon88*, %come_anon88** %sym, align 8
  %addr52 = load i64, i64* %addr, align 4
  %fieldTU = getelementptr inbounds %come_anon88, %come_anon88* %sym51, i32 0, i32 4
  store i64 %addr52, i64* %fieldTU, align 4
  br label %relocate_syms.found
  br label %cond_end50

cond_end50:                                       ; preds = %cond_jump_then49, %cond_jump_then26
  br label %cond_end29

relocate_syms.found:                              ; preds = %cond_end, %cond_jump_then78, %cond_jump_then62, %cond_jump_then49
  br label %loop_continue_top_block

cond_jump_then62:                                 ; preds = %cond_jump_elif_then028
  %s164 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL65 = getelementptr inbounds %TCCState, %TCCState* %s164, i32 0, i32 23
  %dynsym66 = load %Section*, %Section** %fieldLLL65, align 8
  %fieldLLL67 = getelementptr inbounds %Section, %Section* %dynsym66, i32 0, i32 1
  %data68 = load i8*, i8** %fieldLLL67, align 8
  %castAQ69 = bitcast i8* %data68 to %come_anon88*
  %sym_index70 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL67 to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %sym_index70
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %esym, align 8
  %sym71 = load %come_anon88*, %come_anon88** %sym, align 8
  %esym72 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL73 = getelementptr inbounds %come_anon88, %come_anon88* %esym72, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL73, align 4
  %fieldTU74 = getelementptr inbounds %come_anon88, %come_anon88* %sym71, i32 0, i32 4
  store i64 %st_value, i64* %fieldTU74, align 4
  br label %relocate_syms.found
  br label %cond_end63

cond_end63:                                       ; preds = %cond_jump_then62, %cond_jump_elif_then028
  br label %cond_end29

cond_jump_then78:                                 ; preds = %cond_end29
  br label %relocate_syms.found
  br label %cond_end79

cond_end79:                                       ; preds = %cond_jump_then78, %cond_end29
  %sym80 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL81 = getelementptr inbounds %come_anon88, %come_anon88* %sym80, i32 0, i32 1
  %st_info82 = load i8, i8* %fieldLLL81, align 1
  %icastKY83 = zext i8 %st_info82 to i32
  %rshifttmp = lshr i32 %icastKY83, 4
  store i32 %rshifttmp, i32* %sym_bind, align 4
  %sym_bind84 = load i32, i32* %sym_bind, align 4
  %eq85 = icmp eq i32 %sym_bind84, 2
  br i1 %eq85, label %cond_jump_then86, label %cond_else_block

cond_jump_then86:                                 ; preds = %cond_end79
  %sym88 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldTU89 = getelementptr inbounds %come_anon88, %come_anon88* %sym88, i32 0, i32 4
  store i64 0, i64* %fieldTU89, align 4
  br label %cond_end87

cond_else_block:                                  ; preds = %cond_end79
  %name90 = load i8*, i8** %name, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([22 x i8]* @222 to i8*), i8* %name90)
  br label %cond_end87

cond_end87:                                       ; preds = %cond_else_block, %cond_jump_then86
  br label %cond_end
}

define internal i64 @add_jmp_table(%TCCState* %0, i64 %1) {
entry:
  %p = alloca i8*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %val = alloca i64, align 8
  %val2 = alloca i64*, align 8
  store i64 %1, i64* %val, align 4
  store i64* %val, i64** %val2, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 58
  %runtime_plt_and_got = load i8*, i8** %fieldLLL, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL5 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 59
  %runtime_plt_and_got_offset = load i32, i32* %fieldLLL5, align 4
  %ptrToIntC = ptrtoint i8* %runtime_plt_and_got to i64
  %sext = sext i32 %runtime_plt_and_got_offset to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %s16 = load %TCCState*, %TCCState** %s1, align 8
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL8 = getelementptr inbounds %TCCState, %TCCState* %s17, i32 0, i32 59
  %runtime_plt_and_got_offset9 = load i32, i32* %fieldLLL8, align 4
  %add10 = add i32 %runtime_plt_and_got_offset9, 14
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s16, i32 0, i32 59
  store i32 %add10, i32* %fieldTU, align 4
  %p11 = load i8*, i8** %p, align 8
  %element_addressXYXY = getelementptr i8, i8* %p11, i32 0
  store i8 -1, i8* %element_addressXYXY, align 1
  %p12 = load i8*, i8** %p, align 8
  %element_addressXYXY13 = getelementptr i8, i8* %p12, i32 1
  store i8 37, i8* %element_addressXYXY13, align 1
  %p14 = load i8*, i8** %p, align 8
  %ptrToIntC15 = ptrtoint i8* %p14 to i64
  %add16 = add i64 %ptrToIntC15, 2
  %intToPtrB17 = inttoptr i64 %add16 to i8*
  %castAQ = bitcast i8* %intToPtrB17 to i32*
  store i32 0, i32* %castAQ, align 4
  %p18 = load i8*, i8** %p, align 8
  %ptrToIntC19 = ptrtoint i8* %p18 to i64
  %add20 = add i64 %ptrToIntC19, 6
  %intToPtrB21 = inttoptr i64 %add20 to i8*
  %castAQ22 = bitcast i8* %intToPtrB21 to i64*
  %val23 = load i64, i64* %val, align 4
  store i64 %val23, i64* %castAQ22, align 4
  %p24 = load i8*, i8** %p, align 8
  %icatXXXXXX = ptrtoint i8* %p24 to i64
  ret i64 %icatXXXXXX
}

define internal i64 @add_got_table(%TCCState* %0, i64 %1) {
entry:
  %p = alloca i64*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %val = alloca i64, align 8
  %val2 = alloca i64*, align 8
  store i64 %1, i64* %val, align 4
  store i64* %val, i64** %val2, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 58
  %runtime_plt_and_got = load i8*, i8** %fieldLLL, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL5 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 59
  %runtime_plt_and_got_offset = load i32, i32* %fieldLLL5, align 4
  %ptrToIntC = ptrtoint i8* %runtime_plt_and_got to i64
  %sext = sext i32 %runtime_plt_and_got_offset to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to i64*
  store i64* %castAQ, i64** %p, align 8
  %s16 = load %TCCState*, %TCCState** %s1, align 8
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL8 = getelementptr inbounds %TCCState, %TCCState* %s17, i32 0, i32 59
  %runtime_plt_and_got_offset9 = load i32, i32* %fieldLLL8, align 4
  %icastC = zext i32 %runtime_plt_and_got_offset9 to i64
  %add10 = add i64 %icastC, 8
  %icastM = trunc i64 %add10 to i32
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s16, i32 0, i32 59
  store i32 %icastM, i32* %fieldTU, align 4
  %p11 = load i64*, i64** %p, align 8
  %val12 = load i64, i64* %val, align 4
  store i64 %val12, i64* %p11, align 4
  %p13 = load i64*, i64** %p, align 8
  %icatXXXXXX = ptrtoint i64* %p13 to i64
  ret i64 %icatXXXXXX
}

define internal void @relocate_section(%TCCState* %0, %Section* %1) {
entry:
  %oror173 = alloca i1, align 1
  %oror = alloca i1, align 1
  %diff = alloca i64, align 8
  %esym_index = alloca i32, align 4
  %addr = alloca i64, align 8
  %val = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %sym_index = alloca i32, align 4
  %type = alloca i32, align 4
  %sym = alloca %come_anon88*, align 8
  %qrel = alloca %come_anon94*, align 8
  %rel_end = alloca %come_anon94*, align 8
  %rel = alloca %come_anon94*, align 8
  %sr = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s = alloca %Section*, align 8
  %s2 = alloca %Section**, align 8
  store %Section* %1, %Section** %s, align 8
  store %Section** %s, %Section*** %s2, align 8
  %s3 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s3, i32 0, i32 15
  %reloc = load %Section*, %Section** %fieldLLL, align 8
  store %Section* %reloc, %Section** %sr, align 8
  %sr4 = load %Section*, %Section** %sr, align 8
  %fieldLLL5 = getelementptr inbounds %Section, %Section* %sr4, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL5, align 8
  %sr6 = load %Section*, %Section** %sr, align 8
  %fieldLLL7 = getelementptr inbounds %Section, %Section* %sr6, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL7, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon94*
  store %come_anon94* %castAQ, %come_anon94** %rel_end, align 8
  %sr8 = load %Section*, %Section** %sr, align 8
  %fieldLLL9 = getelementptr inbounds %Section, %Section* %sr8, i32 0, i32 1
  %data10 = load i8*, i8** %fieldLLL9, align 8
  %castAQ11 = bitcast i8* %data10 to %come_anon94*
  store %come_anon94* %castAQ11, %come_anon94** %qrel, align 8
  %qrel12 = load %come_anon94*, %come_anon94** %qrel, align 8
  store %come_anon94* %qrel12, %come_anon94** %rel, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %end_blockX
  %rel312 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntC313 = ptrtoint %come_anon94* %rel312 to i64
  %add314 = add i64 %ptrToIntC313, 24
  %intToPtrB315 = inttoptr i64 %add314 to %come_anon94*
  store %come_anon94* %intToPtrB315, %come_anon94** %rel, align 8
  %rel316 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntI317 = ptrtoint %come_anon94* %rel316 to i64
  %sub318 = sub i64 %ptrToIntI317, 24
  %iintToPtrD319 = inttoptr i64 %sub318 to %come_anon94*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %rel13 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel_end14 = load %come_anon94*, %come_anon94** %rel_end, align 8
  %le = icmp slt %come_anon94* %rel13, %rel_end14
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s15 = load %Section*, %Section** %s, align 8
  %fieldLLL16 = getelementptr inbounds %Section, %Section* %s15, i32 0, i32 1
  %data17 = load i8*, i8** %fieldLLL16, align 8
  %rel18 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL19 = getelementptr inbounds %come_anon94, %come_anon94* %rel18, i32 0, i32 0
  %r_offset = load i64, i64* %fieldLLL19, align 4
  %ptrToIntC20 = ptrtoint i8* %data17 to i64
  %mul21 = mul i64 %r_offset, 1
  %add22 = add i64 %ptrToIntC20, %mul21
  %intToPtrB23 = inttoptr i64 %add22 to i8*
  store i8* %intToPtrB23, i8** %ptr, align 8
  %rel24 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL25 = getelementptr inbounds %come_anon94, %come_anon94* %rel24, i32 0, i32 1
  %r_info = load i64, i64* %fieldLLL25, align 4
  %rshifttmp = lshr i64 %r_info, 32
  %icastM = trunc i64 %rshifttmp to i32
  store i32 %icastM, i32* %sym_index, align 4
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL26 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data27 = load i8*, i8** %fieldLLL26, align 8
  %castAQ28 = bitcast i8* %data27 to %come_anon88*
  %sym_index29 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL26 to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %sym_index29
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %sym, align 8
  %sym30 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL31 = getelementptr inbounds %come_anon88, %come_anon88* %sym30, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL31, align 4
  store i64 %st_value, i64* %val, align 4
  %val32 = load i64, i64* %val, align 4
  %rel33 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL34 = getelementptr inbounds %come_anon94, %come_anon94* %rel33, i32 0, i32 2
  %r_addend = load i64, i64* %fieldLLL34, align 4
  %add35 = add i64 %val32, %r_addend
  store i64 %add35, i64* %val, align 4
  %rel36 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL37 = getelementptr inbounds %come_anon94, %come_anon94* %rel36, i32 0, i32 2
  %r_addend38 = load i64, i64* %fieldLLL37, align 4
  %sub = sub i64 %add35, %r_addend38
  %rel39 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL40 = getelementptr inbounds %come_anon94, %come_anon94* %rel39, i32 0, i32 1
  %r_info41 = load i64, i64* %fieldLLL40, align 4
  %icastM42 = trunc i64 %r_info41 to i32
  store i32 %icastM42, i32* %type, align 4
  %s43 = load %Section*, %Section** %s, align 8
  %fieldLLL44 = getelementptr inbounds %Section, %Section* %s43, i32 0, i32 11
  %sh_addr = load i64, i64* %fieldLLL44, align 4
  %rel45 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL46 = getelementptr inbounds %come_anon94, %come_anon94* %rel45, i32 0, i32 0
  %r_offset47 = load i64, i64* %fieldLLL46, align 4
  %add48 = add i64 %sh_addr, %r_offset47
  store i64 %add48, i64* %addr, align 4
  %type49 = load i32, i32* %type, align 4
  %eqtmp = icmp eq i32 %type49, 1
  br i1 %eqtmp, label %cond_then_block50, label %cond_else_blockX

cond_end_block:                                   ; preds = %loop_top_block
  %sr320 = load %Section*, %Section** %sr, align 8
  %fieldLLL321 = getelementptr inbounds %Section, %Section* %sr320, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL321, align 4
  %andtmp = and i32 %sh_flags, 2
  %icmpA322 = icmp ne i32 %andtmp, 0
  br i1 %icmpA322, label %cond_jump_then323, label %cond_end324

end_blockX:                                       ; preds = %cond_else_blockX294, %cond_then_block293, %cond_then_block274, %cond_end227, %cond_jump_then226, %cond_then_block209, %cond_then_block194, %cond_end161, %cond_jump_then126, %cond_end82, %cond_end
  br label %loop_continue_top_block

cond_then_block50:                                ; preds = %cond_then_block
  %s151 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL52 = getelementptr inbounds %TCCState, %TCCState* %s151, i32 0, i32 0
  %output_type = load i32, i32* %fieldLLL52, align 4
  %eq = icmp eq i32 %output_type, 2
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_else_blockX:                                 ; preds = %after_break, %cond_then_block
  %eqtmp74 = icmp eq i32 %type49, 10
  br i1 %eqtmp74, label %cond_then_block72, label %cond_else_blockX73
  br label %cond_else_blockX75

cond_jump_then:                                   ; preds = %cond_then_block50
  %qrel53 = load %come_anon94*, %come_anon94** %qrel, align 8
  %fieldTU = getelementptr inbounds %come_anon94, %come_anon94* %qrel53, i32 0, i32 1
  store i64 8, i64* %fieldTU, align 4
  %qrel54 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptr55 = load i8*, i8** %ptr, align 8
  %pointer_cast = bitcast i8* %ptr55 to i64*
  %derefference_valueA = load i64, i64* %pointer_cast, align 4
  %val56 = load i64, i64* %val, align 4
  %add57 = add i64 %derefference_valueA, %val56
  %fieldTU58 = getelementptr inbounds %come_anon94, %come_anon94* %qrel54, i32 0, i32 2
  store i64 %add57, i64* %fieldTU58, align 4
  %qrel59 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptrToIntC60 = ptrtoint %come_anon94* %qrel59 to i64
  %add61 = add i64 %ptrToIntC60, 24
  %intToPtrB62 = inttoptr i64 %add61 to %come_anon94*
  store %come_anon94* %intToPtrB62, %come_anon94** %qrel, align 8
  %qrel63 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptrToIntI = ptrtoint %come_anon94* %qrel63 to i64
  %sub64 = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub64 to %come_anon94*
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block50
  %ptr65 = load i8*, i8** %ptr, align 8
  %castAQ66 = bitcast i8* %ptr65 to i64*
  %ptr67 = load i8*, i8** %ptr, align 8
  %pointer_cast68 = bitcast i8* %ptr67 to i64*
  %derefference_valueA69 = load i64, i64* %pointer_cast68, align 4
  %val70 = load i64, i64* %val, align 4
  %add71 = add i64 %derefference_valueA69, %val70
  store i64 %add71, i64* %castAQ66, align 4
  br label %end_blockX

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX73

cond_then_block72:                                ; preds = %cond_else_blockX73, %cond_else_blockX
  %s177 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL78 = getelementptr inbounds %TCCState, %TCCState* %s177, i32 0, i32 0
  %output_type79 = load i32, i32* %fieldLLL78, align 4
  %eq80 = icmp eq i32 %output_type79, 2
  br i1 %eq80, label %cond_jump_then81, label %cond_end82

cond_else_blockX73:                               ; preds = %cond_else_blockX, %after_break
  %eqtmp76 = icmp eq i32 %type49, 11
  br i1 %eqtmp76, label %cond_then_block72, label %cond_else_blockX75

cond_else_blockX75:                               ; preds = %after_break109, %cond_else_blockX73, %cond_else_blockX
  %eqtmp112 = icmp eq i32 %type49, 2
  br i1 %eqtmp112, label %cond_then_block110, label %cond_else_blockX111

cond_jump_then81:                                 ; preds = %cond_then_block72
  %qrel83 = load %come_anon94*, %come_anon94** %qrel, align 8
  %fieldTU84 = getelementptr inbounds %come_anon94, %come_anon94* %qrel83, i32 0, i32 1
  store i64 8, i64* %fieldTU84, align 4
  %qrel85 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptr86 = load i8*, i8** %ptr, align 8
  %pointer_cast87 = bitcast i8* %ptr86 to i32*
  %derefference_valueA88 = load i32, i32* %pointer_cast87, align 4
  %val89 = load i64, i64* %val, align 4
  %icastD = sext i32 %derefference_valueA88 to i64
  %add90 = add i64 %icastD, %val89
  %fieldTU91 = getelementptr inbounds %come_anon94, %come_anon94* %qrel85, i32 0, i32 2
  store i64 %add90, i64* %fieldTU91, align 4
  %qrel92 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptrToIntC93 = ptrtoint %come_anon94* %qrel92 to i64
  %add94 = add i64 %ptrToIntC93, 24
  %intToPtrB95 = inttoptr i64 %add94 to %come_anon94*
  store %come_anon94* %intToPtrB95, %come_anon94** %qrel, align 8
  %qrel96 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptrToIntI97 = ptrtoint %come_anon94* %qrel96 to i64
  %sub98 = sub i64 %ptrToIntI97, 24
  %iintToPtrD99 = inttoptr i64 %sub98 to %come_anon94*
  br label %cond_end82

cond_end82:                                       ; preds = %cond_jump_then81, %cond_then_block72
  %ptr100 = load i8*, i8** %ptr, align 8
  %castAQ101 = bitcast i8* %ptr100 to i32*
  %ptr102 = load i8*, i8** %ptr, align 8
  %pointer_cast103 = bitcast i8* %ptr102 to i32*
  %derefference_valueA104 = load i32, i32* %pointer_cast103, align 4
  %val105 = load i64, i64* %val, align 4
  %icastD106 = sext i32 %derefference_valueA104 to i64
  %add107 = add i64 %icastD106, %val105
  %icastM108 = trunc i64 %add107 to i32
  store i32 %icastM108, i32* %castAQ101, align 4
  br label %end_blockX

after_break109:                                   ; No predecessors!
  br label %cond_else_blockX75
  br label %cond_else_blockX111

cond_then_block110:                               ; preds = %cond_else_blockX75
  %s1113 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL114 = getelementptr inbounds %TCCState, %TCCState* %s1113, i32 0, i32 0
  %output_type115 = load i32, i32* %fieldLLL114, align 4
  %eq116 = icmp eq i32 %output_type115, 2
  br i1 %eq116, label %cond_jump_then117, label %cond_end118

cond_else_blockX111:                              ; preds = %after_break193, %cond_else_blockX75, %after_break109
  %eqtmp196 = icmp eq i32 %type49, 4
  br i1 %eqtmp196, label %cond_then_block194, label %cond_else_blockX195

cond_jump_then117:                                ; preds = %cond_then_block110
  %s1119 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL120 = getelementptr inbounds %TCCState, %TCCState* %s1119, i32 0, i32 21
  %symtab_to_dynsym = load i32*, i32** %fieldLLL120, align 8
  %sym_index121 = load i32, i32* %sym_index, align 4
  %element_addressAB122 = load i32*, i32** %fieldLLL120, align 8
  %element_addressXYXZY123 = getelementptr inbounds i32, i32* %element_addressAB122, i32 %sym_index121
  %load_element124 = load i32, i32* %element_addressXYXZY123, align 4
  store i32 %load_element124, i32* %esym_index, align 4
  %esym_index125 = load i32, i32* %esym_index, align 4
  %icmpA = icmp ne i32 %esym_index125, 0
  br i1 %icmpA, label %cond_jump_then126, label %cond_end127

cond_end118:                                      ; preds = %cond_end127, %cond_then_block110
  %val153 = load i64, i64* %val, align 4
  %addr154 = load i64, i64* %addr, align 4
  %sub155 = sub i64 %val153, %addr154
  store i64 %sub155, i64* %diff, align 4
  %diff156 = load i64, i64* %diff, align 4
  %leeq = icmp sle i64 %diff156, -2147483647
  store i1 %leeq, i1* %oror, align 1
  br i1 %leeq, label %cond_jump_end, label %cond_jump_then157

cond_jump_then126:                                ; preds = %cond_jump_then117
  %qrel128 = load %come_anon94*, %come_anon94** %qrel, align 8
  %rel129 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL130 = getelementptr inbounds %come_anon94, %come_anon94* %rel129, i32 0, i32 0
  %r_offset131 = load i64, i64* %fieldLLL130, align 4
  %fieldTU132 = getelementptr inbounds %come_anon94, %come_anon94* %qrel128, i32 0, i32 0
  store i64 %r_offset131, i64* %fieldTU132, align 4
  %qrel133 = load %come_anon94*, %come_anon94** %qrel, align 8
  %esym_index134 = load i32, i32* %esym_index, align 4
  %icastD135 = sext i32 %esym_index134 to i64
  %lshifttmp = shl i64 %icastD135, 32
  %add136 = add i64 %lshifttmp, 2
  %fieldTU137 = getelementptr inbounds %come_anon94, %come_anon94* %qrel133, i32 0, i32 1
  store i64 %add136, i64* %fieldTU137, align 4
  %qrel138 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptr139 = load i8*, i8** %ptr, align 8
  %pointer_cast140 = bitcast i8* %ptr139 to i32*
  %derefference_valueA141 = load i32, i32* %pointer_cast140, align 4
  %icastD142 = sext i32 %derefference_valueA141 to i64
  %fieldTU143 = getelementptr inbounds %come_anon94, %come_anon94* %qrel138, i32 0, i32 2
  store i64 %icastD142, i64* %fieldTU143, align 4
  %qrel144 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptrToIntC145 = ptrtoint %come_anon94* %qrel144 to i64
  %add146 = add i64 %ptrToIntC145, 24
  %intToPtrB147 = inttoptr i64 %add146 to %come_anon94*
  store %come_anon94* %intToPtrB147, %come_anon94** %qrel, align 8
  %qrel148 = load %come_anon94*, %come_anon94** %qrel, align 8
  %ptrToIntI149 = ptrtoint %come_anon94* %qrel148 to i64
  %sub150 = sub i64 %ptrToIntI149, 24
  %iintToPtrD151 = inttoptr i64 %sub150 to %come_anon94*
  br label %end_blockX

cond_end127:                                      ; preds = %after_break152, %cond_jump_then117
  br label %cond_end118

after_break152:                                   ; No predecessors!
  br label %cond_end127

cond_jump_then157:                                ; preds = %cond_end118
  %diff158 = load i64, i64* %diff, align 4
  %gt = icmp sgt i64 %diff158, 2147483647
  %oror159 = or i1 %leeq, %gt
  store i1 %oror159, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then157, %cond_end118
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then160, label %cond_end161

cond_jump_then160:                                ; preds = %cond_jump_end
  %s1162 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL163 = getelementptr inbounds %TCCState, %TCCState* %s1162, i32 0, i32 0
  %output_type164 = load i32, i32* %fieldLLL163, align 4
  %eq165 = icmp eq i32 %output_type164, 0
  br i1 %eq165, label %cond_jump_then166, label %cond_end167

cond_end161:                                      ; preds = %cond_end183, %cond_jump_end
  %ptr184 = load i8*, i8** %ptr, align 8
  %castAQ185 = bitcast i8* %ptr184 to i32*
  %ptr186 = load i8*, i8** %ptr, align 8
  %pointer_cast187 = bitcast i8* %ptr186 to i32*
  %derefference_valueA188 = load i32, i32* %pointer_cast187, align 4
  %diff189 = load i64, i64* %diff, align 4
  %icastD190 = sext i32 %derefference_valueA188 to i64
  %add191 = add i64 %icastD190, %diff189
  %icastM192 = trunc i64 %add191 to i32
  store i32 %icastM192, i32* %castAQ185, align 4
  br label %end_blockX

cond_jump_then166:                                ; preds = %cond_jump_then160
  %s1168 = load %TCCState*, %TCCState** %s1, align 8
  %val169 = load i64, i64* %val, align 4
  %fun_result = call i64 @add_jmp_table(%TCCState* %s1168, i64 %val169)
  store i64 %fun_result, i64* %val, align 4
  %val170 = load i64, i64* %val, align 4
  %addr171 = load i64, i64* %addr, align 4
  %sub172 = sub i64 %val170, %addr171
  store i64 %sub172, i64* %diff, align 4
  br label %cond_end167

cond_end167:                                      ; preds = %cond_jump_then166, %cond_jump_then160
  %diff174 = load i64, i64* %diff, align 4
  %leeq175 = icmp sle i64 %diff174, -2147483647
  store i1 %leeq175, i1* %oror173, align 1
  br i1 %leeq175, label %cond_jump_end177, label %cond_jump_then176

cond_jump_then176:                                ; preds = %cond_end167
  %diff178 = load i64, i64* %diff, align 4
  %gt179 = icmp sgt i64 %diff178, 2147483647
  %oror180 = or i1 %leeq175, %gt179
  store i1 %oror180, i1* %oror173, align 1
  br label %cond_jump_end177

cond_jump_end177:                                 ; preds = %cond_jump_then176, %cond_end167
  %oror_result_value181 = load i1, i1* %oror173, align 1
  br i1 %oror_result_value181, label %cond_jump_then182, label %cond_end183

cond_jump_then182:                                ; preds = %cond_jump_end177
  call void (i8*, ...) @error(i8* bitcast ([34 x i8]* @223 to i8*))
  br label %cond_end183

cond_end183:                                      ; preds = %cond_jump_then182, %cond_jump_end177
  br label %cond_end161

after_break193:                                   ; No predecessors!
  br label %cond_else_blockX111
  br label %cond_else_blockX195

cond_then_block194:                               ; preds = %cond_else_blockX111
  %ptr197 = load i8*, i8** %ptr, align 8
  %castAQ198 = bitcast i8* %ptr197 to i32*
  %ptr199 = load i8*, i8** %ptr, align 8
  %pointer_cast200 = bitcast i8* %ptr199 to i32*
  %derefference_valueA201 = load i32, i32* %pointer_cast200, align 4
  %val202 = load i64, i64* %val, align 4
  %addr203 = load i64, i64* %addr, align 4
  %sub204 = sub i64 %val202, %addr203
  %icastD205 = sext i32 %derefference_valueA201 to i64
  %add206 = add i64 %icastD205, %sub204
  %icastM207 = trunc i64 %add206 to i32
  store i32 %icastM207, i32* %castAQ198, align 4
  br label %end_blockX

cond_else_blockX195:                              ; preds = %after_break208, %cond_else_blockX111, %after_break193
  %eqtmp211 = icmp eq i32 %type49, 6
  br i1 %eqtmp211, label %cond_then_block209, label %cond_else_blockX210
  br label %cond_else_blockX212

after_break208:                                   ; No predecessors!
  br label %cond_else_blockX195
  br label %cond_else_blockX210

cond_then_block209:                               ; preds = %cond_else_blockX210, %cond_else_blockX195
  %ptr214 = load i8*, i8** %ptr, align 8
  %castAQ215 = bitcast i8* %ptr214 to i32*
  %val216 = load i64, i64* %val, align 4
  %icastM217 = trunc i64 %val216 to i32
  store i32 %icastM217, i32* %castAQ215, align 4
  br label %end_blockX

cond_else_blockX210:                              ; preds = %cond_else_blockX195, %after_break208
  %eqtmp213 = icmp eq i32 %type49, 7
  br i1 %eqtmp213, label %cond_then_block209, label %cond_else_blockX212

cond_else_blockX212:                              ; preds = %after_break218, %cond_else_blockX210, %cond_else_blockX195
  %eqtmp221 = icmp eq i32 %type49, 9
  br i1 %eqtmp221, label %cond_then_block219, label %cond_else_blockX220

after_break218:                                   ; No predecessors!
  br label %cond_else_blockX212
  br label %cond_else_blockX220

cond_then_block219:                               ; preds = %cond_else_blockX212
  %s1222 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL223 = getelementptr inbounds %TCCState, %TCCState* %s1222, i32 0, i32 0
  %output_type224 = load i32, i32* %fieldLLL223, align 4
  %eq225 = icmp eq i32 %output_type224, 0
  br i1 %eq225, label %cond_jump_then226, label %cond_end227

cond_else_blockX220:                              ; preds = %after_break273, %cond_else_blockX212, %after_break218
  %eqtmp276 = icmp eq i32 %type49, 22
  br i1 %eqtmp276, label %cond_then_block274, label %cond_else_blockX275

cond_jump_then226:                                ; preds = %cond_then_block219
  %s1228 = load %TCCState*, %TCCState** %s1, align 8
  %val229 = load i64, i64* %val, align 4
  %rel230 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL231 = getelementptr inbounds %come_anon94, %come_anon94* %rel230, i32 0, i32 2
  %r_addend232 = load i64, i64* %fieldLLL231, align 4
  %sub233 = sub i64 %val229, %r_addend232
  %fun_result234 = call i64 @add_got_table(%TCCState* %s1228, i64 %sub233)
  %rel235 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL236 = getelementptr inbounds %come_anon94, %come_anon94* %rel235, i32 0, i32 2
  %r_addend237 = load i64, i64* %fieldLLL236, align 4
  %add238 = add i64 %fun_result234, %r_addend237
  store i64 %add238, i64* %val, align 4
  %ptr239 = load i8*, i8** %ptr, align 8
  %castAQ240 = bitcast i8* %ptr239 to i32*
  %ptr241 = load i8*, i8** %ptr, align 8
  %pointer_cast242 = bitcast i8* %ptr241 to i32*
  %derefference_valueA243 = load i32, i32* %pointer_cast242, align 4
  %val244 = load i64, i64* %val, align 4
  %addr245 = load i64, i64* %addr, align 4
  %sub246 = sub i64 %val244, %addr245
  %icastD247 = sext i32 %derefference_valueA243 to i64
  %add248 = add i64 %icastD247, %sub246
  %icastM249 = trunc i64 %add248 to i32
  store i32 %icastM249, i32* %castAQ240, align 4
  br label %end_blockX

cond_end227:                                      ; preds = %after_break250, %cond_then_block219
  %ptr251 = load i8*, i8** %ptr, align 8
  %castAQ252 = bitcast i8* %ptr251 to i32*
  %ptr253 = load i8*, i8** %ptr, align 8
  %pointer_cast254 = bitcast i8* %ptr253 to i32*
  %derefference_valueA255 = load i32, i32* %pointer_cast254, align 4
  %s1256 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL257 = getelementptr inbounds %TCCState, %TCCState* %s1256, i32 0, i32 17
  %got = load %Section*, %Section** %fieldLLL257, align 8
  %fieldLLL258 = getelementptr inbounds %Section, %Section* %got, i32 0, i32 11
  %sh_addr259 = load i64, i64* %fieldLLL258, align 4
  %addr260 = load i64, i64* %addr, align 4
  %sub261 = sub i64 %sh_addr259, %addr260
  %s1262 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL263 = getelementptr inbounds %TCCState, %TCCState* %s1262, i32 0, i32 19
  %got_offsets = load i64*, i64** %fieldLLL263, align 8
  %sym_index264 = load i32, i32* %sym_index, align 4
  %element_addressAB265 = load i64*, i64** %fieldLLL263, align 8
  %element_addressXYXZY266 = getelementptr inbounds i64, i64* %element_addressAB265, i32 %sym_index264
  %load_element267 = load i64, i64* %element_addressXYXZY266, align 4
  %add268 = add i64 %sub261, %load_element267
  %sub269 = sub i64 %add268, 4
  %icastD270 = sext i32 %derefference_valueA255 to i64
  %add271 = add i64 %icastD270, %sub269
  %icastM272 = trunc i64 %add271 to i32
  store i32 %icastM272, i32* %castAQ252, align 4
  br label %end_blockX

after_break250:                                   ; No predecessors!
  br label %cond_end227

after_break273:                                   ; No predecessors!
  br label %cond_else_blockX220
  br label %cond_else_blockX275

cond_then_block274:                               ; preds = %cond_else_blockX220
  %ptr277 = load i8*, i8** %ptr, align 8
  %castAQ278 = bitcast i8* %ptr277 to i32*
  %ptr279 = load i8*, i8** %ptr, align 8
  %pointer_cast280 = bitcast i8* %ptr279 to i32*
  %derefference_valueA281 = load i32, i32* %pointer_cast280, align 4
  %val282 = load i64, i64* %val, align 4
  %s1283 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL284 = getelementptr inbounds %TCCState, %TCCState* %s1283, i32 0, i32 17
  %got285 = load %Section*, %Section** %fieldLLL284, align 8
  %fieldLLL286 = getelementptr inbounds %Section, %Section* %got285, i32 0, i32 11
  %sh_addr287 = load i64, i64* %fieldLLL286, align 4
  %sub288 = sub i64 %val282, %sh_addr287
  %icastD289 = sext i32 %derefference_valueA281 to i64
  %add290 = add i64 %icastD289, %sub288
  %icastM291 = trunc i64 %add290 to i32
  store i32 %icastM291, i32* %castAQ278, align 4
  br label %end_blockX

cond_else_blockX275:                              ; preds = %after_break292, %cond_else_blockX220, %after_break273
  %eqtmp295 = icmp eq i32 %type49, 3
  br i1 %eqtmp295, label %cond_then_block293, label %cond_else_blockX294

after_break292:                                   ; No predecessors!
  br label %cond_else_blockX275
  br label %cond_else_blockX294

cond_then_block293:                               ; preds = %cond_else_blockX275
  %ptr296 = load i8*, i8** %ptr, align 8
  %castAQ297 = bitcast i8* %ptr296 to i32*
  %ptr298 = load i8*, i8** %ptr, align 8
  %pointer_cast299 = bitcast i8* %ptr298 to i32*
  %derefference_valueA300 = load i32, i32* %pointer_cast299, align 4
  %s1301 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL302 = getelementptr inbounds %TCCState, %TCCState* %s1301, i32 0, i32 19
  %got_offsets303 = load i64*, i64** %fieldLLL302, align 8
  %sym_index304 = load i32, i32* %sym_index, align 4
  %element_addressAB305 = load i64*, i64** %fieldLLL302, align 8
  %element_addressXYXZY306 = getelementptr inbounds i64, i64* %element_addressAB305, i32 %sym_index304
  %load_element307 = load i64, i64* %element_addressXYXZY306, align 4
  %icastD308 = sext i32 %derefference_valueA300 to i64
  %add309 = add i64 %icastD308, %load_element307
  %icastM310 = trunc i64 %add309 to i32
  store i32 %icastM310, i32* %castAQ297, align 4
  br label %end_blockX

cond_else_blockX294:                              ; preds = %after_break311, %cond_else_blockX275, %after_break292
  br label %end_blockX

after_break311:                                   ; No predecessors!
  br label %cond_else_blockX294

cond_jump_then323:                                ; preds = %cond_end_block
  %sr325 = load %Section*, %Section** %sr, align 8
  %s1326 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL327 = getelementptr inbounds %TCCState, %TCCState* %s1326, i32 0, i32 23
  %dynsym = load %Section*, %Section** %fieldLLL327, align 8
  %fieldTU328 = getelementptr inbounds %Section, %Section* %sr325, i32 0, i32 14
  store %Section* %dynsym, %Section** %fieldTU328, align 8
  br label %cond_end324

cond_end324:                                      ; preds = %cond_jump_then323, %cond_end_block
  ret void
}

define internal void @relocate_rel(%TCCState* %0, %Section* %1) {
entry:
  %rel_end = alloca %come_anon94*, align 8
  %rel = alloca %come_anon94*, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %sr = alloca %Section*, align 8
  %sr2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sr, align 8
  store %Section** %sr, %Section*** %sr2, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL, align 8
  %sr4 = load %Section*, %Section** %sr, align 8
  %fieldLLL5 = getelementptr inbounds %Section, %Section* %sr4, i32 0, i32 7
  %sh_info = load i32, i32* %fieldLLL5, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %sh_info
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  store %Section* %load_element, %Section** %s, align 8
  %sr6 = load %Section*, %Section** %sr, align 8
  %fieldLLL7 = getelementptr inbounds %Section, %Section* %sr6, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL7, align 8
  %sr8 = load %Section*, %Section** %sr, align 8
  %fieldLLL9 = getelementptr inbounds %Section, %Section* %sr8, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL9, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon94*
  store %come_anon94* %castAQ, %come_anon94** %rel_end, align 8
  %sr10 = load %Section*, %Section** %sr, align 8
  %fieldLLL11 = getelementptr inbounds %Section, %Section* %sr10, i32 0, i32 1
  %data12 = load i8*, i8** %fieldLLL11, align 8
  %castAQ13 = bitcast i8* %data12 to %come_anon94*
  store %come_anon94* %castAQ13, %come_anon94** %rel, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %rel22 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntC23 = ptrtoint %come_anon94* %rel22 to i64
  %add24 = add i64 %ptrToIntC23, 24
  %intToPtrB25 = inttoptr i64 %add24 to %come_anon94*
  store %come_anon94* %intToPtrB25, %come_anon94** %rel, align 8
  %rel26 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntI = ptrtoint %come_anon94* %rel26 to i64
  %sub = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub to %come_anon94*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %rel14 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel_end15 = load %come_anon94*, %come_anon94** %rel_end, align 8
  %le = icmp slt %come_anon94* %rel14, %rel_end15
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %rel16 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel17 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL18 = getelementptr inbounds %come_anon94, %come_anon94* %rel17, i32 0, i32 0
  %r_offset = load i64, i64* %fieldLLL18, align 4
  %s19 = load %Section*, %Section** %s, align 8
  %fieldLLL20 = getelementptr inbounds %Section, %Section* %s19, i32 0, i32 11
  %sh_addr = load i64, i64* %fieldLLL20, align 4
  %add21 = add i64 %r_offset, %sh_addr
  %fieldTU = getelementptr inbounds %come_anon94, %come_anon94* %rel16, i32 0, i32 0
  store i64 %add21, i64* %fieldTU, align 4
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  ret void
}

define internal i32 @prepare_dynamic_rel(%TCCState* %0, %Section* %1) {
entry:
  %count = alloca i32, align 4
  %type = alloca i32, align 4
  %esym_index = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %rel_end = alloca %come_anon94*, align 8
  %rel = alloca %come_anon94*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %sr = alloca %Section*, align 8
  %sr2 = alloca %Section**, align 8
  store %Section* %1, %Section** %sr, align 8
  store %Section** %sr, %Section*** %sr2, align 8
  store i32 0, i32* %count, align 4
  %sr3 = load %Section*, %Section** %sr, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %sr3, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %sr4 = load %Section*, %Section** %sr, align 8
  %fieldLLL5 = getelementptr inbounds %Section, %Section* %sr4, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL5, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon94*
  store %come_anon94* %castAQ, %come_anon94** %rel_end, align 8
  %sr6 = load %Section*, %Section** %sr, align 8
  %fieldLLL7 = getelementptr inbounds %Section, %Section* %sr6, i32 0, i32 1
  %data8 = load i8*, i8** %fieldLLL7, align 8
  %castAQ9 = bitcast i8* %data8 to %come_anon94*
  store %come_anon94* %castAQ9, %come_anon94** %rel, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %end_blockX
  %rel42 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntC43 = ptrtoint %come_anon94* %rel42 to i64
  %add44 = add i64 %ptrToIntC43, 24
  %intToPtrB45 = inttoptr i64 %add44 to %come_anon94*
  store %come_anon94* %intToPtrB45, %come_anon94** %rel, align 8
  %rel46 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntI = ptrtoint %come_anon94* %rel46 to i64
  %sub47 = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub47 to %come_anon94*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %rel10 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel_end11 = load %come_anon94*, %come_anon94** %rel_end, align 8
  %le = icmp slt %come_anon94* %rel10, %rel_end11
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %rel12 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL13 = getelementptr inbounds %come_anon94, %come_anon94* %rel12, i32 0, i32 1
  %r_info = load i64, i64* %fieldLLL13, align 4
  %rshifttmp = lshr i64 %r_info, 32
  %icastM = trunc i64 %rshifttmp to i32
  store i32 %icastM, i32* %sym_index, align 4
  %rel14 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL15 = getelementptr inbounds %come_anon94, %come_anon94* %rel14, i32 0, i32 1
  %r_info16 = load i64, i64* %fieldLLL15, align 4
  %icastM17 = trunc i64 %r_info16 to i32
  store i32 %icastM17, i32* %type, align 4
  %type18 = load i32, i32* %type, align 4
  %eqtmp = icmp eq i32 %type18, 10
  br i1 %eqtmp, label %cond_then_block19, label %cond_else_blockX
  br label %cond_else_blockX20

cond_end_block:                                   ; preds = %loop_top_block
  %count48 = load i32, i32* %count, align 4
  %icmpA49 = icmp ne i32 %count48, 0
  br i1 %icmpA49, label %cond_jump_then50, label %cond_end51

end_blockX:                                       ; preds = %cond_else_blockX40, %cond_then_block39, %cond_end, %cond_then_block19
  br label %loop_continue_top_block

cond_then_block19:                                ; preds = %cond_else_blockX20, %cond_else_blockX, %cond_then_block
  %count24 = load i32, i32* %count, align 4
  %add25 = add i32 %count24, 1
  store i32 %add25, i32* %count, align 4
  %count26 = load i32, i32* %count, align 4
  %sub = sub i32 %count26, 1
  br label %end_blockX

cond_else_blockX:                                 ; preds = %cond_then_block
  %eqtmp21 = icmp eq i32 %type18, 11
  br i1 %eqtmp21, label %cond_then_block19, label %cond_else_blockX20
  br label %cond_else_blockX22

cond_else_blockX20:                               ; preds = %cond_else_blockX, %cond_then_block
  %eqtmp23 = icmp eq i32 %type18, 1
  br i1 %eqtmp23, label %cond_then_block19, label %cond_else_blockX22

cond_else_blockX22:                               ; preds = %after_break, %cond_else_blockX20, %cond_else_blockX
  %eqtmp29 = icmp eq i32 %type18, 2
  br i1 %eqtmp29, label %cond_then_block27, label %cond_else_blockX28

after_break:                                      ; No predecessors!
  br label %cond_else_blockX22
  br label %cond_else_blockX28

cond_then_block27:                                ; preds = %cond_else_blockX22
  %s130 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL31 = getelementptr inbounds %TCCState, %TCCState* %s130, i32 0, i32 21
  %symtab_to_dynsym = load i32*, i32** %fieldLLL31, align 8
  %sym_index32 = load i32, i32* %sym_index, align 4
  %element_addressAB = load i32*, i32** %fieldLLL31, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 %sym_index32
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  store i32 %load_element, i32* %esym_index, align 4
  %esym_index33 = load i32, i32* %esym_index, align 4
  %icmpA = icmp ne i32 %esym_index33, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_else_blockX28:                               ; preds = %after_break38, %cond_else_blockX22, %after_break
  br label %cond_then_block39

cond_jump_then:                                   ; preds = %cond_then_block27
  %count34 = load i32, i32* %count, align 4
  %add35 = add i32 %count34, 1
  store i32 %add35, i32* %count, align 4
  %count36 = load i32, i32* %count, align 4
  %sub37 = sub i32 %count36, 1
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %cond_then_block27
  br label %end_blockX

after_break38:                                    ; No predecessors!
  br label %cond_else_blockX28
  br label %cond_else_blockX40

cond_then_block39:                                ; preds = %cond_else_blockX28
  br label %end_blockX

cond_else_blockX40:                               ; preds = %after_break41, %after_break38
  br label %end_blockX

after_break41:                                    ; No predecessors!
  br label %cond_else_blockX40

cond_jump_then50:                                 ; preds = %cond_end_block
  %sr52 = load %Section*, %Section** %sr, align 8
  %sr53 = load %Section*, %Section** %sr, align 8
  %fieldLLL54 = getelementptr inbounds %Section, %Section* %sr53, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL54, align 4
  %ortmp = or i32 %sh_flags, 2
  %fieldTU = getelementptr inbounds %Section, %Section* %sr52, i32 0, i32 6
  store i32 %ortmp, i32* %fieldTU, align 4
  %sr55 = load %Section*, %Section** %sr, align 8
  %count56 = load i32, i32* %count, align 4
  %icastD = sext i32 %count56 to i64
  %mul57 = mul i64 %icastD, 24
  %fieldTU58 = getelementptr inbounds %Section, %Section* %sr55, i32 0, i32 10
  store i64 %mul57, i64* %fieldTU58, align 4
  br label %cond_end51

cond_end51:                                       ; preds = %cond_jump_then50, %cond_end_block
  %count59 = load i32, i32* %count, align 4
  ret i32 %count59
}

define internal void @put_got_offset(%TCCState* %0, i32 %1, i64 %2) {
entry:
  %tab = alloca i64*, align 8
  %n = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %index = alloca i32, align 4
  %index2 = alloca i32*, align 8
  store i32 %1, i32* %index, align 4
  store i32* %index, i32** %index2, align 8
  %val = alloca i64, align 8
  %val3 = alloca i64*, align 8
  store i64 %2, i64* %val, align 4
  store i64* %val, i64** %val3, align 8
  %index4 = load i32, i32* %index, align 4
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 20
  %nb_got_offsets = load i32, i32* %fieldLLL, align 4
  %gteq_signed = icmp sge i32 %index4, %nb_got_offsets
  br i1 %gteq_signed, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  store i32 1, i32* %n, align 4
  br label %loop_top_block

cond_end:                                         ; preds = %cond_end17, %entry
  %s138 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL39 = getelementptr inbounds %TCCState, %TCCState* %s138, i32 0, i32 19
  %got_offsets40 = load i64*, i64** %fieldLLL39, align 8
  %index41 = load i32, i32* %index, align 4
  %val42 = load i64, i64* %val, align 4
  %element_addressXYXY = getelementptr i64, i64* %got_offsets40, i32 %index41
  store i64 %val42, i64* %element_addressXYXY, align 4
  ret void

loop_top_block:                                   ; preds = %cond_then_block, %cond_jump_then
  %index6 = load i32, i32* %index, align 4
  %n7 = load i32, i32* %n, align 4
  %gteq_signed8 = icmp sge i32 %index6, %n7
  br i1 %gteq_signed8, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %n9 = load i32, i32* %n, align 4
  %mul = mul i32 %n9, 2
  store i32 %mul, i32* %n, align 4
  br label %loop_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %s110 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL11 = getelementptr inbounds %TCCState, %TCCState* %s110, i32 0, i32 19
  %got_offsets = load i64*, i64** %fieldLLL11, align 8
  %castAQ = bitcast i64* %got_offsets to i8*
  %n12 = load i32, i32* %n, align 4
  %icastD = sext i32 %n12 to i64
  %mul13 = mul i64 %icastD, 8
  %fun_result = call i8* @tcc_realloc(i8* %castAQ, i64 %mul13)
  %castAQ14 = bitcast i8* %fun_result to i64*
  store i64* %castAQ14, i64** %tab, align 8
  %tab15 = load i64*, i64** %tab, align 8
  %logical_denial = icmp eq i64* %tab15, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then16, label %cond_end17

cond_jump_then16:                                 ; preds = %cond_end_block
  call void (i8*, ...) @error(i8* bitcast ([12 x i8]* @224 to i8*))
  br label %cond_end17

cond_end17:                                       ; preds = %cond_jump_then16, %cond_end_block
  %s118 = load %TCCState*, %TCCState** %s1, align 8
  %tab19 = load i64*, i64** %tab, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s118, i32 0, i32 19
  store i64* %tab19, i64** %fieldTU, align 8
  %s120 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL21 = getelementptr inbounds %TCCState, %TCCState* %s120, i32 0, i32 19
  %got_offsets22 = load i64*, i64** %fieldLLL21, align 8
  %s123 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL24 = getelementptr inbounds %TCCState, %TCCState* %s123, i32 0, i32 20
  %nb_got_offsets25 = load i32, i32* %fieldLLL24, align 4
  %ptrToIntC = ptrtoint i64* %got_offsets22 to i64
  %sext = sext i32 %nb_got_offsets25 to i64
  %mul26 = mul i64 %sext, 8
  %add = add i64 %ptrToIntC, %mul26
  %intToPtrB = inttoptr i64 %add to i64*
  %castAQ27 = bitcast i64* %intToPtrB to i8*
  %n28 = load i32, i32* %n, align 4
  %s129 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL30 = getelementptr inbounds %TCCState, %TCCState* %s129, i32 0, i32 20
  %nb_got_offsets31 = load i32, i32* %fieldLLL30, align 4
  %sub = sub i32 %n28, %nb_got_offsets31
  %icastD32 = sext i32 %sub to i64
  %mul33 = mul i64 %icastD32, 8
  %fun_result34 = call i8* @memset(i8* %castAQ27, i32 0, i64 %mul33)
  %s135 = load %TCCState*, %TCCState** %s1, align 8
  %n36 = load i32, i32* %n, align 4
  %fieldTU37 = getelementptr inbounds %TCCState, %TCCState* %s135, i32 0, i32 20
  store i32 %n36, i32* %fieldTU37, align 4
  br label %cond_end
}

define internal void @put32(i8* %0, i32 %1) {
entry:
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  %val = alloca i32, align 4
  %val2 = alloca i32*, align 8
  store i32 %1, i32* %val, align 4
  store i32* %val, i32** %val2, align 8
  %p3 = load i8*, i8** %p, align 8
  %val4 = load i32, i32* %val, align 4
  %icastJ = trunc i32 %val4 to i8
  %element_addressXYXY = getelementptr i8, i8* %p3, i32 0
  store i8 %icastJ, i8* %element_addressXYXY, align 1
  %p5 = load i8*, i8** %p, align 8
  %val6 = load i32, i32* %val, align 4
  %rshifttmp = lshr i32 %val6, 8
  %icastJ7 = trunc i32 %rshifttmp to i8
  %element_addressXYXY8 = getelementptr i8, i8* %p5, i32 1
  store i8 %icastJ7, i8* %element_addressXYXY8, align 1
  %p9 = load i8*, i8** %p, align 8
  %val10 = load i32, i32* %val, align 4
  %rshifttmp11 = lshr i32 %val10, 16
  %icastJ12 = trunc i32 %rshifttmp11 to i8
  %element_addressXYXY13 = getelementptr i8, i8* %p9, i32 2
  store i8 %icastJ12, i8* %element_addressXYXY13, align 1
  %p14 = load i8*, i8** %p, align 8
  %val15 = load i32, i32* %val, align 4
  %rshifttmp16 = lshr i32 %val15, 24
  %icastJ17 = trunc i32 %rshifttmp16 to i8
  %element_addressXYXY18 = getelementptr i8, i8* %p14, i32 3
  store i8 %icastJ17, i8* %element_addressXYXY18, align 1
  ret void
}

define internal i32 @get32(i8* %0) {
entry:
  %p = alloca i8*, align 8
  %p1 = alloca i8**, align 8
  store i8* %0, i8** %p, align 8
  store i8** %p, i8*** %p1, align 8
  %p2 = load i8*, i8** %p, align 8
  %element_addressAB = load i8*, i8** %p, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %p3 = load i8*, i8** %p, align 8
  %element_addressAB4 = load i8*, i8** %p, align 8
  %element_addressXYXZY5 = getelementptr inbounds i8, i8* %element_addressAB4, i32 1
  %load_element6 = load i8, i8* %element_addressXYXZY5, align 1
  %icastKY = zext i8 %load_element6 to i32
  %lshifttmp = shl i32 %icastKY, 8
  %icastKY7 = zext i8 %load_element to i32
  %ortmp = or i32 %icastKY7, %lshifttmp
  %p8 = load i8*, i8** %p, align 8
  %element_addressAB9 = load i8*, i8** %p, align 8
  %element_addressXYXZY10 = getelementptr inbounds i8, i8* %element_addressAB9, i32 2
  %load_element11 = load i8, i8* %element_addressXYXZY10, align 1
  %icastKY12 = zext i8 %load_element11 to i32
  %lshifttmp13 = shl i32 %icastKY12, 16
  %ortmp14 = or i32 %ortmp, %lshifttmp13
  %p15 = load i8*, i8** %p, align 8
  %element_addressAB16 = load i8*, i8** %p, align 8
  %element_addressXYXZY17 = getelementptr inbounds i8, i8* %element_addressAB16, i32 3
  %load_element18 = load i8, i8* %element_addressXYXZY17, align 1
  %icastKY19 = zext i8 %load_element18 to i32
  %lshifttmp20 = shl i32 %icastKY19, 24
  %ortmp21 = or i32 %ortmp14, %lshifttmp20
  ret i32 %ortmp21
}

define internal void @build_got(%TCCState* %0) {
entry:
  %ptr = alloca i8*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result = call %Section* @new_section(%TCCState* %s13, i8* bitcast ([5 x i8]* @225 to i8*), i32 1, i32 3)
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s12, i32 0, i32 17
  store %Section* %fun_result, %Section** %fieldTU, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 17
  %got = load %Section*, %Section** %fieldLLL, align 8
  %fieldTU5 = getelementptr inbounds %Section, %Section* %got, i32 0, i32 9
  store i32 4, i32* %fieldTU5, align 4
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %s16 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL7 = getelementptr inbounds %TCCState, %TCCState* %s16, i32 0, i32 17
  %got8 = load %Section*, %Section** %fieldLLL7, align 8
  %fieldLLL9 = getelementptr inbounds %Section, %Section* %got8, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL9, align 4
  %fun_result10 = call i32 @add_elf_sym(%Section* %symtab_section, i64 0, i64 4, i32 17, i32 0, i32 %sh_num, i8* bitcast ([22 x i8]* @226 to i8*))
  %s111 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL12 = getelementptr inbounds %TCCState, %TCCState* %s111, i32 0, i32 17
  %got13 = load %Section*, %Section** %fieldLLL12, align 8
  %fun_result14 = call i8* @section_ptr_add(%Section* %got13, i64 24)
  store i8* %fun_result14, i8** %ptr, align 8
  %ptr15 = load i8*, i8** %ptr, align 8
  call void @put32(i8* %ptr15, i32 0)
  %ptr16 = load i8*, i8** %ptr, align 8
  %ptrToIntC = ptrtoint i8* %ptr16 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i8*
  call void @put32(i8* %intToPtrB, i32 0)
  %ptr17 = load i8*, i8** %ptr, align 8
  %ptrToIntC18 = ptrtoint i8* %ptr17 to i64
  %add19 = add i64 %ptrToIntC18, 8
  %intToPtrB20 = inttoptr i64 %add19 to i8*
  call void @put32(i8* %intToPtrB20, i32 0)
  %ptr21 = load i8*, i8** %ptr, align 8
  %ptrToIntC22 = ptrtoint i8* %ptr21 to i64
  %add23 = add i64 %ptrToIntC22, 12
  %intToPtrB24 = inttoptr i64 %add23 to i8*
  call void @put32(i8* %intToPtrB24, i32 0)
  %ptr25 = load i8*, i8** %ptr, align 8
  %ptrToIntC26 = ptrtoint i8* %ptr25 to i64
  %add27 = add i64 %ptrToIntC26, 16
  %intToPtrB28 = inttoptr i64 %add27 to i8*
  call void @put32(i8* %intToPtrB28, i32 0)
  %ptr29 = load i8*, i8** %ptr, align 8
  %ptrToIntC30 = ptrtoint i8* %ptr29 to i64
  %add31 = add i64 %ptrToIntC30, 20
  %intToPtrB32 = inttoptr i64 %add31 to i8*
  call void @put32(i8* %intToPtrB32, i32 0)
  ret void
}

define internal void @put_got_entry(%TCCState* %0, i32 %1, i64 %2, i32 %3, i32 %4) {
entry:
  %modrm = alloca i32, align 4
  %p = alloca i8*, align 8
  %plt = alloca %Section*, align 8
  %andand = alloca i1, align 1
  %ptr = alloca i32*, align 8
  %offset = alloca i64, align 8
  %sym = alloca %come_anon88*, align 8
  %name = alloca i8*, align 8
  %index = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %reloc_type = alloca i32, align 4
  %reloc_type2 = alloca i32*, align 8
  store i32 %1, i32* %reloc_type, align 4
  store i32* %reloc_type, i32** %reloc_type2, align 8
  %size = alloca i64, align 8
  %size3 = alloca i64*, align 8
  store i64 %2, i64* %size, align 4
  store i64* %size, i64** %size3, align 8
  %info = alloca i32, align 4
  %info4 = alloca i32*, align 8
  store i32 %3, i32* %info, align 4
  store i32* %info, i32** %info4, align 8
  %sym_index = alloca i32, align 4
  %sym_index5 = alloca i32*, align 8
  store i32 %4, i32* %sym_index, align 4
  store i32* %sym_index, i32** %sym_index5, align 8
  %s16 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s16, i32 0, i32 17
  %got = load %Section*, %Section** %fieldLLL, align 8
  %logical_denial = icmp eq %Section* %got, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  call void @build_got(%TCCState* %s17)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %sym_index8 = load i32, i32* %sym_index, align 4
  %s19 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL10 = getelementptr inbounds %TCCState, %TCCState* %s19, i32 0, i32 20
  %nb_got_offsets = load i32, i32* %fieldLLL10, align 4
  %le = icmp slt i32 %sym_index8, %nb_got_offsets
  store i1 %le, i1* %andand, align 1
  br i1 %le, label %cond_jump_then11, label %cond_jump_end

cond_jump_then11:                                 ; preds = %cond_end
  %s112 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL13 = getelementptr inbounds %TCCState, %TCCState* %s112, i32 0, i32 19
  %got_offsets = load i64*, i64** %fieldLLL13, align 8
  %sym_index14 = load i32, i32* %sym_index, align 4
  %element_addressAB = load i64*, i64** %fieldLLL13, align 8
  %element_addressXYXZY = getelementptr inbounds i64, i64* %element_addressAB, i32 %sym_index14
  %load_element = load i64, i64* %element_addressXYXZY, align 4
  %not_eq = icmp ne i64 %load_element, 0
  %andand15 = and i1 %le, %not_eq
  store i1 %andand15, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then11, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then16, label %cond_end17

cond_jump_then16:                                 ; preds = %cond_jump_end
  ret void

cond_end17:                                       ; preds = %cond_jump_end
  %s118 = load %TCCState*, %TCCState** %s1, align 8
  %sym_index19 = load i32, i32* %sym_index, align 4
  %s120 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL21 = getelementptr inbounds %TCCState, %TCCState* %s120, i32 0, i32 17
  %got22 = load %Section*, %Section** %fieldLLL21, align 8
  %fieldLLL23 = getelementptr inbounds %Section, %Section* %got22, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL23, align 4
  call void @put_got_offset(%TCCState* %s118, i32 %sym_index19, i64 %data_offset)
  %s124 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL25 = getelementptr inbounds %TCCState, %TCCState* %s124, i32 0, i32 23
  %dynsym = load %Section*, %Section** %fieldLLL25, align 8
  %icmpB = icmp ne %Section* %dynsym, null
  br i1 %icmpB, label %cond_jump_then26, label %cond_end27

cond_jump_then26:                                 ; preds = %cond_end17
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL28 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL28, align 8
  %castAQ = bitcast i8* %data to %come_anon88*
  %sym_index29 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL28 to %come_anon88**
  %element_addressAB30 = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY31 = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB30, i32 %sym_index29
  %load_element32 = load %come_anon88, %come_anon88* %element_addressXYXZY31, align 4
  store %come_anon88* %element_addressXYXZY31, %come_anon88** %sym, align 8
  %symtab_section33 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL34 = getelementptr inbounds %Section, %Section* %symtab_section33, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL34, align 8
  %fieldLLL35 = getelementptr inbounds %Section, %Section* %link, i32 0, i32 1
  %data36 = load i8*, i8** %fieldLLL35, align 8
  %sym37 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL38 = getelementptr inbounds %come_anon88, %come_anon88* %sym37, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL38, align 4
  %ptrToIntC = ptrtoint i8* %data36 to i64
  %sext = sext i32 %st_name to i64
  %mul = mul i64 %sext, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %name, align 8
  %sym39 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL40 = getelementptr inbounds %come_anon88, %come_anon88* %sym39, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL40, align 4
  store i64 %st_value, i64* %offset, align 4
  %reloc_type41 = load i32, i32* %reloc_type, align 4
  %eq = icmp eq i32 %reloc_type41, 7
  br i1 %eq, label %cond_jump_then42, label %cond_end43

cond_end27:                                       ; preds = %cond_end43, %cond_end17
  %s1138 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL139 = getelementptr inbounds %TCCState, %TCCState* %s1138, i32 0, i32 17
  %got140 = load %Section*, %Section** %fieldLLL139, align 8
  %fun_result141 = call i8* @section_ptr_add(%Section* %got140, i64 8)
  %castAQ142 = bitcast i8* %fun_result141 to i32*
  store i32* %castAQ142, i32** %ptr, align 8
  %ptr143 = load i32*, i32** %ptr, align 8
  store i32 0, i32* %ptr143, align 4
  ret void

cond_jump_then42:                                 ; preds = %cond_jump_then26
  store i32 37, i32* %modrm, align 4
  %s144 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL45 = getelementptr inbounds %TCCState, %TCCState* %s144, i32 0, i32 18
  %plt46 = load %Section*, %Section** %fieldLLL45, align 8
  store %Section* %plt46, %Section** %plt, align 8
  %plt47 = load %Section*, %Section** %plt, align 8
  %fieldLLL48 = getelementptr inbounds %Section, %Section* %plt47, i32 0, i32 0
  %data_offset49 = load i64, i64* %fieldLLL48, align 4
  %eq50 = icmp eq i64 %data_offset49, 0
  br i1 %eq50, label %cond_jump_then51, label %cond_end52

cond_end43:                                       ; preds = %cond_end52, %cond_jump_then26
  %s1115 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL116 = getelementptr inbounds %TCCState, %TCCState* %s1115, i32 0, i32 23
  %dynsym117 = load %Section*, %Section** %fieldLLL116, align 8
  %offset118 = load i64, i64* %offset, align 4
  %size119 = load i64, i64* %size, align 4
  %info120 = load i32, i32* %info, align 4
  %sym121 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL122 = getelementptr inbounds %come_anon88, %come_anon88* %sym121, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL122, align 2
  %icastKY = zext i16 %st_shndx to i32
  %name123 = load i8*, i8** %name, align 8
  %fun_result124 = call i32 @put_elf_sym(%Section* %dynsym117, i64 %offset118, i64 %size119, i32 %info120, i32 0, i32 %icastKY, i8* %name123)
  store i32 %fun_result124, i32* %index, align 4
  %s1125 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL126 = getelementptr inbounds %TCCState, %TCCState* %s1125, i32 0, i32 23
  %dynsym127 = load %Section*, %Section** %fieldLLL126, align 8
  %s1128 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL129 = getelementptr inbounds %TCCState, %TCCState* %s1128, i32 0, i32 17
  %got130 = load %Section*, %Section** %fieldLLL129, align 8
  %s1131 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL132 = getelementptr inbounds %TCCState, %TCCState* %s1131, i32 0, i32 17
  %got133 = load %Section*, %Section** %fieldLLL132, align 8
  %fieldLLL134 = getelementptr inbounds %Section, %Section* %got133, i32 0, i32 0
  %data_offset135 = load i64, i64* %fieldLLL134, align 4
  %reloc_type136 = load i32, i32* %reloc_type, align 4
  %index137 = load i32, i32* %index, align 4
  call void @put_elf_reloc(%Section* %dynsym127, %Section* %got130, i64 %data_offset135, i32 %reloc_type136, i32 %index137)
  br label %cond_end27

cond_jump_then51:                                 ; preds = %cond_jump_then42
  %plt53 = load %Section*, %Section** %plt, align 8
  %fun_result = call i8* @section_ptr_add(%Section* %plt53, i64 16)
  store i8* %fun_result, i8** %p, align 8
  %p54 = load i8*, i8** %p, align 8
  %element_addressXYXY = getelementptr i8, i8* %p54, i32 0
  store i8 -1, i8* %element_addressXYXY, align 1
  %p55 = load i8*, i8** %p, align 8
  %modrm56 = load i32, i32* %modrm, align 4
  %add57 = add i32 %modrm56, 16
  %icastJ = trunc i32 %add57 to i8
  %element_addressXYXY58 = getelementptr i8, i8* %p55, i32 1
  store i8 %icastJ, i8* %element_addressXYXY58, align 1
  %p59 = load i8*, i8** %p, align 8
  %ptrToIntC60 = ptrtoint i8* %p59 to i64
  %add61 = add i64 %ptrToIntC60, 2
  %intToPtrB62 = inttoptr i64 %add61 to i8*
  call void @put32(i8* %intToPtrB62, i32 8)
  %p63 = load i8*, i8** %p, align 8
  %element_addressXYXY64 = getelementptr i8, i8* %p63, i32 6
  store i8 -1, i8* %element_addressXYXY64, align 1
  %p65 = load i8*, i8** %p, align 8
  %modrm66 = load i32, i32* %modrm, align 4
  %icastJ67 = trunc i32 %modrm66 to i8
  %element_addressXYXY68 = getelementptr i8, i8* %p65, i32 7
  store i8 %icastJ67, i8* %element_addressXYXY68, align 1
  %p69 = load i8*, i8** %p, align 8
  %ptrToIntC70 = ptrtoint i8* %p69 to i64
  %add71 = add i64 %ptrToIntC70, 8
  %intToPtrB72 = inttoptr i64 %add71 to i8*
  call void @put32(i8* %intToPtrB72, i32 16)
  br label %cond_end52

cond_end52:                                       ; preds = %cond_jump_then51, %cond_jump_then42
  %plt73 = load %Section*, %Section** %plt, align 8
  %fun_result74 = call i8* @section_ptr_add(%Section* %plt73, i64 16)
  store i8* %fun_result74, i8** %p, align 8
  %p75 = load i8*, i8** %p, align 8
  %element_addressXYXY76 = getelementptr i8, i8* %p75, i32 0
  store i8 -1, i8* %element_addressXYXY76, align 1
  %p77 = load i8*, i8** %p, align 8
  %modrm78 = load i32, i32* %modrm, align 4
  %icastJ79 = trunc i32 %modrm78 to i8
  %element_addressXYXY80 = getelementptr i8, i8* %p77, i32 1
  store i8 %icastJ79, i8* %element_addressXYXY80, align 1
  %p81 = load i8*, i8** %p, align 8
  %ptrToIntC82 = ptrtoint i8* %p81 to i64
  %add83 = add i64 %ptrToIntC82, 2
  %intToPtrB84 = inttoptr i64 %add83 to i8*
  %s185 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL86 = getelementptr inbounds %TCCState, %TCCState* %s185, i32 0, i32 17
  %got87 = load %Section*, %Section** %fieldLLL86, align 8
  %fieldLLL88 = getelementptr inbounds %Section, %Section* %got87, i32 0, i32 0
  %data_offset89 = load i64, i64* %fieldLLL88, align 4
  %icastM = trunc i64 %data_offset89 to i32
  call void @put32(i8* %intToPtrB84, i32 %icastM)
  %p90 = load i8*, i8** %p, align 8
  %element_addressXYXY91 = getelementptr i8, i8* %p90, i32 6
  store i8 104, i8* %element_addressXYXY91, align 1
  %p92 = load i8*, i8** %p, align 8
  %ptrToIntC93 = ptrtoint i8* %p92 to i64
  %add94 = add i64 %ptrToIntC93, 7
  %intToPtrB95 = inttoptr i64 %add94 to i8*
  %plt96 = load %Section*, %Section** %plt, align 8
  %fieldLLL97 = getelementptr inbounds %Section, %Section* %plt96, i32 0, i32 0
  %data_offset98 = load i64, i64* %fieldLLL97, align 4
  %sub = sub i64 %data_offset98, 32
  %rshifttmp = lshr i64 %sub, 1
  %icastM99 = trunc i64 %rshifttmp to i32
  call void @put32(i8* %intToPtrB95, i32 %icastM99)
  %p100 = load i8*, i8** %p, align 8
  %element_addressXYXY101 = getelementptr i8, i8* %p100, i32 11
  store i8 -23, i8* %element_addressXYXY101, align 1
  %p102 = load i8*, i8** %p, align 8
  %ptrToIntC103 = ptrtoint i8* %p102 to i64
  %add104 = add i64 %ptrToIntC103, 12
  %intToPtrB105 = inttoptr i64 %add104 to i8*
  %plt106 = load %Section*, %Section** %plt, align 8
  %fieldLLL107 = getelementptr inbounds %Section, %Section* %plt106, i32 0, i32 0
  %data_offset108 = load i64, i64* %fieldLLL107, align 4
  %sub109 = sub i64 0, %data_offset108
  %icastM110 = trunc i64 %sub109 to i32
  call void @put32(i8* %intToPtrB105, i32 %icastM110)
  %plt111 = load %Section*, %Section** %plt, align 8
  %fieldLLL112 = getelementptr inbounds %Section, %Section* %plt111, i32 0, i32 0
  %data_offset113 = load i64, i64* %fieldLLL112, align 4
  %sub114 = sub i64 %data_offset113, 16
  store i64 %sub114, i64* %offset, align 4
  br label %cond_end43
}

define internal void @build_got_entries(%TCCState* %0) {
entry:
  %oror74 = alloca i1, align 1
  %oror48 = alloca i1, align 1
  %oror = alloca i1, align 1
  %sym_index = alloca i32, align 4
  %reloc_type = alloca i32, align 4
  %type = alloca i32, align 4
  %i = alloca i32, align 4
  %sym = alloca %come_anon88*, align 8
  %rel_end = alloca %come_anon94*, align 8
  %rel = alloca %come_anon94*, align 8
  %symtab = alloca %Section*, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end_block32, %cond_jump_then12, %cond_jump_then
  %i100 = load i32, i32* %i, align 4
  %add101 = add i32 %i100, 1
  store i32 %add101, i32* %i, align 4
  %i102 = load i32, i32* %i, align 4
  %sub103 = sub i32 %i102, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i2 = load i32, i32* %i, align 4
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s13, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL, align 4
  %le = icmp slt i32 %i2, %nb_sections
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL5 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL5, align 8
  %i6 = load i32, i32* %i, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL5, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %i6
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  store %Section* %load_element, %Section** %s, align 8
  %s7 = load %Section*, %Section** %s, align 8
  %fieldLLL8 = getelementptr inbounds %Section, %Section* %s7, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL8, align 4
  %not_eq = icmp ne i32 %sh_type, 4
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  br label %loop_continue_top_block

cond_end:                                         ; preds = %after_continue, %cond_then_block
  %s9 = load %Section*, %Section** %s, align 8
  %fieldLLL10 = getelementptr inbounds %Section, %Section* %s9, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL10, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %not_eq11 = icmp ne %Section* %link, %symtab_section
  br i1 %not_eq11, label %cond_jump_then12, label %cond_end13

after_continue:                                   ; No predecessors!
  br label %cond_end

cond_jump_then12:                                 ; preds = %cond_end
  br label %loop_continue_top_block

cond_end13:                                       ; preds = %after_continue14, %cond_end
  %s15 = load %Section*, %Section** %s, align 8
  %fieldLLL16 = getelementptr inbounds %Section, %Section* %s15, i32 0, i32 14
  %link17 = load %Section*, %Section** %fieldLLL16, align 8
  store %Section* %link17, %Section** %symtab, align 8
  %s18 = load %Section*, %Section** %s, align 8
  %fieldLLL19 = getelementptr inbounds %Section, %Section* %s18, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL19, align 8
  %s20 = load %Section*, %Section** %s, align 8
  %fieldLLL21 = getelementptr inbounds %Section, %Section* %s20, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL21, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon94*
  store %come_anon94* %castAQ, %come_anon94** %rel_end, align 8
  %s22 = load %Section*, %Section** %s, align 8
  %fieldLLL23 = getelementptr inbounds %Section, %Section* %s22, i32 0, i32 1
  %data24 = load i8*, i8** %fieldLLL23, align 8
  %castAQ25 = bitcast i8* %data24 to %come_anon94*
  store %come_anon94* %castAQ25, %come_anon94** %rel, align 8
  br label %loop_top_block27

after_continue14:                                 ; No predecessors!
  br label %cond_end13

loop_continue_top_block26:                        ; preds = %end_blockX
  %rel95 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntC96 = ptrtoint %come_anon94* %rel95 to i64
  %add97 = add i64 %ptrToIntC96, 24
  %intToPtrB98 = inttoptr i64 %add97 to %come_anon94*
  store %come_anon94* %intToPtrB98, %come_anon94** %rel, align 8
  %rel99 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntI = ptrtoint %come_anon94* %rel99 to i64
  %sub = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub to %come_anon94*
  br label %loop_top_block27

loop_top_block27:                                 ; preds = %loop_continue_top_block26, %cond_end13
  %rel28 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel_end29 = load %come_anon94*, %come_anon94** %rel_end, align 8
  %le30 = icmp slt %come_anon94* %rel28, %rel_end29
  br i1 %le30, label %cond_then_block31, label %cond_end_block32

cond_then_block31:                                ; preds = %loop_top_block27
  %rel33 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL34 = getelementptr inbounds %come_anon94, %come_anon94* %rel33, i32 0, i32 1
  %r_info = load i64, i64* %fieldLLL34, align 4
  %icastM = trunc i64 %r_info to i32
  store i32 %icastM, i32* %type, align 4
  %type35 = load i32, i32* %type, align 4
  %eqtmp = icmp eq i32 %type35, 3
  br i1 %eqtmp, label %cond_then_block36, label %cond_else_blockX
  br label %cond_else_blockX37

cond_end_block32:                                 ; preds = %loop_top_block27
  br label %loop_continue_top_block

end_blockX:                                       ; preds = %cond_else_blockX93, %cond_then_block92, %cond_end61
  br label %loop_continue_top_block26

cond_then_block36:                                ; preds = %cond_else_blockX39, %cond_else_blockX37, %cond_else_blockX, %cond_then_block31
  %s143 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL44 = getelementptr inbounds %TCCState, %TCCState* %s143, i32 0, i32 17
  %got = load %Section*, %Section** %fieldLLL44, align 8
  %logical_denial = icmp eq %Section* %got, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then45, label %cond_end46

cond_else_blockX:                                 ; preds = %cond_then_block31
  %eqtmp38 = icmp eq i32 %type35, 22
  br i1 %eqtmp38, label %cond_then_block36, label %cond_else_blockX37
  br label %cond_else_blockX39

cond_else_blockX37:                               ; preds = %cond_else_blockX, %cond_then_block31
  %eqtmp40 = icmp eq i32 %type35, 9
  br i1 %eqtmp40, label %cond_then_block36, label %cond_else_blockX39
  br label %cond_else_blockX41

cond_else_blockX39:                               ; preds = %cond_else_blockX37, %cond_else_blockX
  %eqtmp42 = icmp eq i32 %type35, 4
  br i1 %eqtmp42, label %cond_then_block36, label %cond_else_blockX41

cond_else_blockX41:                               ; preds = %after_break, %cond_else_blockX39, %cond_else_blockX37
  br label %cond_then_block92

cond_jump_then45:                                 ; preds = %cond_then_block36
  %s147 = load %TCCState*, %TCCState** %s1, align 8
  call void @build_got(%TCCState* %s147)
  br label %cond_end46

cond_end46:                                       ; preds = %cond_jump_then45, %cond_then_block36
  %type49 = load i32, i32* %type, align 4
  %eq = icmp eq i32 %type49, 3
  store i1 %eq, i1* %oror48, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then50

cond_jump_then50:                                 ; preds = %cond_end46
  %type51 = load i32, i32* %type, align 4
  %eq52 = icmp eq i32 %type51, 9
  %oror53 = or i1 %eq, %eq52
  store i1 %oror53, i1* %oror48, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then50, %cond_end46
  %oror_result_value = load i1, i1* %oror48, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end55, label %cond_jump_then54

cond_jump_then54:                                 ; preds = %cond_jump_end
  %type56 = load i32, i32* %type, align 4
  %eq57 = icmp eq i32 %type56, 4
  %oror58 = or i1 %oror_result_value, %eq57
  store i1 %oror58, i1* %oror, align 1
  br label %cond_jump_end55

cond_jump_end55:                                  ; preds = %cond_jump_then54, %cond_jump_end
  %oror_result_value59 = load i1, i1* %oror, align 1
  br i1 %oror_result_value59, label %cond_jump_then60, label %cond_end61

cond_jump_then60:                                 ; preds = %cond_jump_end55
  %rel62 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL63 = getelementptr inbounds %come_anon94, %come_anon94* %rel62, i32 0, i32 1
  %r_info64 = load i64, i64* %fieldLLL63, align 4
  %rshifttmp = lshr i64 %r_info64, 32
  %icastM65 = trunc i64 %rshifttmp to i32
  store i32 %icastM65, i32* %sym_index, align 4
  %symtab_section66 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL67 = getelementptr inbounds %Section, %Section* %symtab_section66, i32 0, i32 1
  %data68 = load i8*, i8** %fieldLLL67, align 8
  %castAQ69 = bitcast i8* %data68 to %come_anon88*
  %sym_index70 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL67 to %come_anon88**
  %element_addressAB71 = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY72 = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB71, i32 %sym_index70
  %load_element73 = load %come_anon88, %come_anon88* %element_addressXYXZY72, align 4
  store %come_anon88* %element_addressXYXZY72, %come_anon88** %sym, align 8
  %type75 = load i32, i32* %type, align 4
  %eq76 = icmp eq i32 %type75, 3
  store i1 %eq76, i1* %oror74, align 1
  br i1 %eq76, label %cond_jump_end78, label %cond_jump_then77

cond_end61:                                       ; preds = %cond_end84, %cond_jump_end55
  br label %end_blockX

cond_jump_then77:                                 ; preds = %cond_jump_then60
  %type79 = load i32, i32* %type, align 4
  %eq80 = icmp eq i32 %type79, 9
  %oror81 = or i1 %eq76, %eq80
  store i1 %oror81, i1* %oror74, align 1
  br label %cond_jump_end78

cond_jump_end78:                                  ; preds = %cond_jump_then77, %cond_jump_then60
  %oror_result_value82 = load i1, i1* %oror74, align 1
  br i1 %oror_result_value82, label %cond_jump_then83, label %cond_else_block

cond_jump_then83:                                 ; preds = %cond_jump_end78
  store i32 6, i32* %reloc_type, align 4
  br label %cond_end84

cond_else_block:                                  ; preds = %cond_jump_end78
  store i32 7, i32* %reloc_type, align 4
  br label %cond_end84

cond_end84:                                       ; preds = %cond_else_block, %cond_jump_then83
  %s185 = load %TCCState*, %TCCState** %s1, align 8
  %reloc_type86 = load i32, i32* %reloc_type, align 4
  %sym87 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL88 = getelementptr inbounds %come_anon88, %come_anon88* %sym87, i32 0, i32 5
  %st_size = load i64, i64* %fieldLLL88, align 4
  %sym89 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL90 = getelementptr inbounds %come_anon88, %come_anon88* %sym89, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL90, align 1
  %icastKY = zext i8 %st_info to i32
  %sym_index91 = load i32, i32* %sym_index, align 4
  call void @put_got_entry(%TCCState* %s185, i32 %reloc_type86, i64 %st_size, i32 %icastKY, i32 %sym_index91)
  br label %cond_end61

after_break:                                      ; No predecessors!
  br label %cond_else_blockX41
  br label %cond_else_blockX93

cond_then_block92:                                ; preds = %cond_else_blockX41
  br label %end_blockX

cond_else_blockX93:                               ; preds = %after_break94, %after_break
  br label %end_blockX

after_break94:                                    ; No predecessors!
  br label %cond_else_blockX93
}

define internal %Section* @new_symtab(%TCCState* %0, i8* %1, i32 %2, i32 %3, i8* %4, i8* %5, i32 %6) {
entry:
  %nb_buckets = alloca i32, align 4
  %ptr = alloca i32*, align 8
  %hash = alloca %Section*, align 8
  %strtab = alloca %Section*, align 8
  %symtab = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %symtab_name = alloca i8*, align 8
  %symtab_name2 = alloca i8**, align 8
  store i8* %1, i8** %symtab_name, align 8
  store i8** %symtab_name, i8*** %symtab_name2, align 8
  %sh_type = alloca i32, align 4
  %sh_type3 = alloca i32*, align 8
  store i32 %2, i32* %sh_type, align 4
  store i32* %sh_type, i32** %sh_type3, align 8
  %sh_flags = alloca i32, align 4
  %sh_flags4 = alloca i32*, align 8
  store i32 %3, i32* %sh_flags, align 4
  store i32* %sh_flags, i32** %sh_flags4, align 8
  %strtab_name = alloca i8*, align 8
  %strtab_name5 = alloca i8**, align 8
  store i8* %4, i8** %strtab_name, align 8
  store i8** %strtab_name, i8*** %strtab_name5, align 8
  %hash_name = alloca i8*, align 8
  %hash_name6 = alloca i8**, align 8
  store i8* %5, i8** %hash_name, align 8
  store i8** %hash_name, i8*** %hash_name6, align 8
  %hash_sh_flags = alloca i32, align 4
  %hash_sh_flags7 = alloca i32*, align 8
  store i32 %6, i32* %hash_sh_flags, align 4
  store i32* %hash_sh_flags, i32** %hash_sh_flags7, align 8
  %s18 = load %TCCState*, %TCCState** %s1, align 8
  %symtab_name9 = load i8*, i8** %symtab_name, align 8
  %sh_type10 = load i32, i32* %sh_type, align 4
  %sh_flags11 = load i32, i32* %sh_flags, align 4
  %fun_result = call %Section* @new_section(%TCCState* %s18, i8* %symtab_name9, i32 %sh_type10, i32 %sh_flags11)
  store %Section* %fun_result, %Section** %symtab, align 8
  %symtab12 = load %Section*, %Section** %symtab, align 8
  %fieldTU = getelementptr inbounds %Section, %Section* %symtab12, i32 0, i32 9
  store i32 24, i32* %fieldTU, align 4
  %s113 = load %TCCState*, %TCCState** %s1, align 8
  %strtab_name14 = load i8*, i8** %strtab_name, align 8
  %sh_flags15 = load i32, i32* %sh_flags, align 4
  %fun_result16 = call %Section* @new_section(%TCCState* %s113, i8* %strtab_name14, i32 3, i32 %sh_flags15)
  store %Section* %fun_result16, %Section** %strtab, align 8
  %strtab17 = load %Section*, %Section** %strtab, align 8
  %fun_result18 = call i32 @put_elf_str(%Section* %strtab17, i8* bitcast ([1 x i8]* @227 to i8*))
  %symtab19 = load %Section*, %Section** %symtab, align 8
  %strtab20 = load %Section*, %Section** %strtab, align 8
  %fieldTU21 = getelementptr inbounds %Section, %Section* %symtab19, i32 0, i32 14
  store %Section* %strtab20, %Section** %fieldTU21, align 8
  %symtab22 = load %Section*, %Section** %symtab, align 8
  %fun_result23 = call i32 @put_elf_sym(%Section* %symtab22, i64 0, i64 0, i32 0, i32 0, i32 0, i8* null)
  store i32 1, i32* %nb_buckets, align 4
  %s124 = load %TCCState*, %TCCState** %s1, align 8
  %hash_name25 = load i8*, i8** %hash_name, align 8
  %hash_sh_flags26 = load i32, i32* %hash_sh_flags, align 4
  %fun_result27 = call %Section* @new_section(%TCCState* %s124, i8* %hash_name25, i32 5, i32 %hash_sh_flags26)
  store %Section* %fun_result27, %Section** %hash, align 8
  %hash28 = load %Section*, %Section** %hash, align 8
  %fieldTU29 = getelementptr inbounds %Section, %Section* %hash28, i32 0, i32 9
  store i32 4, i32* %fieldTU29, align 4
  %symtab30 = load %Section*, %Section** %symtab, align 8
  %hash31 = load %Section*, %Section** %hash, align 8
  %fieldTU32 = getelementptr inbounds %Section, %Section* %symtab30, i32 0, i32 16
  store %Section* %hash31, %Section** %fieldTU32, align 8
  %hash33 = load %Section*, %Section** %hash, align 8
  %symtab34 = load %Section*, %Section** %symtab, align 8
  %fieldTU35 = getelementptr inbounds %Section, %Section* %hash33, i32 0, i32 14
  store %Section* %symtab34, %Section** %fieldTU35, align 8
  %hash36 = load %Section*, %Section** %hash, align 8
  %nb_buckets37 = load i32, i32* %nb_buckets, align 4
  %add = add i32 2, %nb_buckets37
  %add38 = add i32 %add, 1
  %icastD = sext i32 %add38 to i64
  %mul = mul i64 %icastD, 4
  %fun_result39 = call i8* @section_ptr_add(%Section* %hash36, i64 %mul)
  %castAQ = bitcast i8* %fun_result39 to i32*
  store i32* %castAQ, i32** %ptr, align 8
  %ptr40 = load i32*, i32** %ptr, align 8
  %nb_buckets41 = load i32, i32* %nb_buckets, align 4
  %element_addressXYXY = getelementptr i32, i32* %ptr40, i32 0
  store i32 %nb_buckets41, i32* %element_addressXYXY, align 4
  %ptr42 = load i32*, i32** %ptr, align 8
  %element_addressXYXY43 = getelementptr i32, i32* %ptr42, i32 1
  store i32 1, i32* %element_addressXYXY43, align 4
  %ptr44 = load i32*, i32** %ptr, align 8
  %ptrToIntC = ptrtoint i32* %ptr44 to i64
  %add45 = add i64 %ptrToIntC, 8
  %intToPtrB = inttoptr i64 %add45 to i32*
  %castAQ46 = bitcast i32* %intToPtrB to i8*
  %nb_buckets47 = load i32, i32* %nb_buckets, align 4
  %add48 = add i32 %nb_buckets47, 1
  %icastD49 = sext i32 %add48 to i64
  %mul50 = mul i64 %icastD49, 4
  %fun_result51 = call i8* @memset(i8* %castAQ46, i32 0, i64 %mul50)
  %symtab52 = load %Section*, %Section** %symtab, align 8
  ret %Section* %symtab52
}

define internal void @put_dt(%Section* %0, i32 %1, i64 %2) {
entry:
  %dyn = alloca %come_anon99*, align 8
  %dynamic = alloca %Section*, align 8
  %dynamic1 = alloca %Section**, align 8
  store %Section* %0, %Section** %dynamic, align 8
  store %Section** %dynamic, %Section*** %dynamic1, align 8
  %dt = alloca i32, align 4
  %dt2 = alloca i32*, align 8
  store i32 %1, i32* %dt, align 4
  store i32* %dt, i32** %dt2, align 8
  %val = alloca i64, align 8
  %val3 = alloca i64*, align 8
  store i64 %2, i64* %val, align 4
  store i64* %val, i64** %val3, align 8
  %dynamic4 = load %Section*, %Section** %dynamic, align 8
  %fun_result = call i8* @section_ptr_add(%Section* %dynamic4, i64 16)
  %castAQ = bitcast i8* %fun_result to %come_anon99*
  store %come_anon99* %castAQ, %come_anon99** %dyn, align 8
  %dyn5 = load %come_anon99*, %come_anon99** %dyn, align 8
  %dt6 = load i32, i32* %dt, align 4
  %icastD = sext i32 %dt6 to i64
  %fieldTU = getelementptr inbounds %come_anon99, %come_anon99* %dyn5, i32 0, i32 0
  store i64 %icastD, i64* %fieldTU, align 4
  %dyn7 = load %come_anon99*, %come_anon99** %dyn, align 8
  %fieldLLL = getelementptr inbounds %come_anon99, %come_anon99* %dyn7, i32 0, i32 1
  %d_un = load %come_anon100, %come_anon100* %fieldLLL, align 4
  %val8 = load i64, i64* %val, align 4
  %fieldIII = getelementptr inbounds %come_anon100, %come_anon100* %fieldLLL, i32 0, i32 0
  store i64 %val8, i64* %fieldIII, align 4
  ret void
}

define internal void @add_init_array_defines(%TCCState* %0, i8* %1) {
entry:
  %sym_end = alloca [1024 x i8], align 1
  %sym_start = alloca [1024 x i8], align 1
  %end_offset = alloca i64, align 8
  %s = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %section_name = alloca i8*, align 8
  %section_name2 = alloca i8**, align 8
  store i8* %1, i8** %section_name, align 8
  store i8** %section_name, i8*** %section_name2, align 8
  %autocast = bitcast [1024 x i8]* %sym_start to i8*
  %section_name3 = load i8*, i8** %section_name, align 8
  %ptrToIntC = ptrtoint i8* %section_name3 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  %fun_result = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 1024, i8* bitcast ([11 x i8]* @228 to i8*), i8* %intToPtrB)
  %autocast4 = bitcast [1024 x i8]* %sym_end to i8*
  %section_name5 = load i8*, i8** %section_name, align 8
  %ptrToIntC6 = ptrtoint i8* %section_name5 to i64
  %add7 = add i64 %ptrToIntC6, 1
  %intToPtrB8 = inttoptr i64 %add7 to i8*
  %fun_result9 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast4, i64 1024, i8* bitcast ([9 x i8]* @229 to i8*), i8* %intToPtrB8)
  %s110 = load %TCCState*, %TCCState** %s1, align 8
  %section_name11 = load i8*, i8** %section_name, align 8
  %fun_result12 = call %Section* @find_section(%TCCState* %s110, i8* %section_name11)
  store %Section* %fun_result12, %Section** %s, align 8
  %s13 = load %Section*, %Section** %s, align 8
  %logical_denial = icmp eq %Section* %s13, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  store i64 0, i64* %end_offset, align 4
  %data_section = load %Section*, %Section** @data_section, align 8
  store %Section* %data_section, %Section** %s, align 8
  br label %cond_end

cond_else_block:                                  ; preds = %entry
  %s14 = load %Section*, %Section** %s, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %s14, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  store i64 %data_offset, i64* %end_offset, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %s15 = load %Section*, %Section** %s, align 8
  %fieldLLL16 = getelementptr inbounds %Section, %Section* %s15, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL16, align 4
  %autocast17 = bitcast [1024 x i8]* %sym_start to i8*
  %fun_result18 = call i32 @add_elf_sym(%Section* %symtab_section, i64 0, i64 0, i32 16, i32 0, i32 %sh_num, i8* %autocast17)
  %symtab_section19 = load %Section*, %Section** @symtab_section, align 8
  %end_offset20 = load i64, i64* %end_offset, align 4
  %s21 = load %Section*, %Section** %s, align 8
  %fieldLLL22 = getelementptr inbounds %Section, %Section* %s21, i32 0, i32 4
  %sh_num23 = load i32, i32* %fieldLLL22, align 4
  %autocast24 = bitcast [1024 x i8]* %sym_end to i8*
  %fun_result25 = call i32 @add_elf_sym(%Section* %symtab_section19, i64 %end_offset20, i64 0, i32 16, i32 0, i32 %sh_num23, i8* %autocast24)
  ret void
}

define internal void @tcc_add_runtime(%TCCState* %0) {
entry:
  %andand = alloca i1, align 1
  %buf = alloca [1024 x i8], align 1
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s12, i32 0, i32 25
  %nostdlib = load i32, i32* %fieldLLL, align 4
  %logical_denial = icmp eq i32 %nostdlib, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result = call i32 @tcc_add_library(%TCCState* %s13, i8* bitcast ([2 x i8]* @230 to i8*))
  %autocast = bitcast [1024 x i8]* %buf to i8*
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL5 = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 44
  %tcc_lib_path = load i8*, i8** %fieldLLL5, align 8
  %fun_result6 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast, i64 1024, i8* bitcast ([6 x i8]* @231 to i8*), i8* %tcc_lib_path, i8* bitcast ([10 x i8]* @232 to i8*))
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  %autocast8 = bitcast [1024 x i8]* %buf to i8*
  %fun_result9 = call i32 @tcc_add_file(%TCCState* %s17, i8* %autocast8)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %s110 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL11 = getelementptr inbounds %TCCState, %TCCState* %s110, i32 0, i32 0
  %output_type = load i32, i32* %fieldLLL11, align 4
  %not_eq = icmp ne i32 %output_type, 0
  store i1 %not_eq, i1* %andand, align 1
  br i1 %not_eq, label %cond_jump_then12, label %cond_jump_end

cond_jump_then12:                                 ; preds = %cond_end
  %s113 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL14 = getelementptr inbounds %TCCState, %TCCState* %s113, i32 0, i32 25
  %nostdlib15 = load i32, i32* %fieldLLL14, align 4
  %logical_denial16 = icmp eq i32 %nostdlib15, 0
  %castOOOO17 = zext i1 %logical_denial16 to i32
  %icmpA18 = icmp ne i32 %castOOOO17, 0
  %andand19 = and i1 %not_eq, %icmpA18
  store i1 %andand19, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then12, %cond_end
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then20, label %cond_end21

cond_jump_then20:                                 ; preds = %cond_jump_end
  %s122 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result23 = call i32 @tcc_add_file(%TCCState* %s122, i8* bitcast ([16 x i8]* @233 to i8*))
  br label %cond_end21

cond_end21:                                       ; preds = %cond_jump_then20, %cond_jump_end
  ret void
}

define internal void @tcc_add_linker_symbols(%TCCState* %0) {
entry:
  %andand80 = alloca i1, align 1
  %andand55 = alloca i1, align 1
  %andand46 = alloca i1, align 1
  %oror45 = alloca i1, align 1
  %oror = alloca i1, align 1
  %andand43 = alloca i1, align 1
  %ch = alloca i32, align 4
  %p = alloca i8*, align 8
  %andand = alloca i1, align 1
  %s = alloca %Section*, align 8
  %i = alloca i32, align 4
  %buf = alloca [1024 x i8], align 1
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %text_section = load %Section*, %Section** @text_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %text_section, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL, align 4
  %text_section2 = load %Section*, %Section** @text_section, align 8
  %fieldLLL3 = getelementptr inbounds %Section, %Section* %text_section2, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL3, align 4
  %fun_result = call i32 @add_elf_sym(%Section* %symtab_section, i64 %data_offset, i64 0, i32 16, i32 0, i32 %sh_num, i8* bitcast ([7 x i8]* @234 to i8*))
  %symtab_section4 = load %Section*, %Section** @symtab_section, align 8
  %data_section = load %Section*, %Section** @data_section, align 8
  %fieldLLL5 = getelementptr inbounds %Section, %Section* %data_section, i32 0, i32 0
  %data_offset6 = load i64, i64* %fieldLLL5, align 4
  %data_section7 = load %Section*, %Section** @data_section, align 8
  %fieldLLL8 = getelementptr inbounds %Section, %Section* %data_section7, i32 0, i32 4
  %sh_num9 = load i32, i32* %fieldLLL8, align 4
  %fun_result10 = call i32 @add_elf_sym(%Section* %symtab_section4, i64 %data_offset6, i64 0, i32 16, i32 0, i32 %sh_num9, i8* bitcast ([7 x i8]* @235 to i8*))
  %symtab_section11 = load %Section*, %Section** @symtab_section, align 8
  %bss_section = load %Section*, %Section** @bss_section, align 8
  %fieldLLL12 = getelementptr inbounds %Section, %Section* %bss_section, i32 0, i32 0
  %data_offset13 = load i64, i64* %fieldLLL12, align 4
  %bss_section14 = load %Section*, %Section** @bss_section, align 8
  %fieldLLL15 = getelementptr inbounds %Section, %Section* %bss_section14, i32 0, i32 4
  %sh_num16 = load i32, i32* %fieldLLL15, align 4
  %fun_result17 = call i32 @add_elf_sym(%Section* %symtab_section11, i64 %data_offset13, i64 0, i32 16, i32 0, i32 %sh_num16, i8* bitcast ([5 x i8]* @236 to i8*))
  %s118 = load %TCCState*, %TCCState** %s1, align 8
  call void @add_init_array_defines(%TCCState* %s118, i8* bitcast ([15 x i8]* @237 to i8*))
  %s119 = load %TCCState*, %TCCState** %s1, align 8
  call void @add_init_array_defines(%TCCState* %s119, i8* bitcast ([12 x i8]* @238 to i8*))
  %s120 = load %TCCState*, %TCCState** %s1, align 8
  call void @add_init_array_defines(%TCCState* %s120, i8* bitcast ([12 x i8]* @239 to i8*))
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %tcc_add_linker_symbols.next_sec
  %i126 = load i32, i32* %i, align 4
  %add127 = add i32 %i126, 1
  store i32 %add127, i32* %i, align 4
  %i128 = load i32, i32* %i, align 4
  %sub129 = sub i32 %i128, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i21 = load i32, i32* %i, align 4
  %s122 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL23 = getelementptr inbounds %TCCState, %TCCState* %s122, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL23, align 4
  %le = icmp slt i32 %i21, %nb_sections
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s124 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL25 = getelementptr inbounds %TCCState, %TCCState* %s124, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL25, align 8
  %i26 = load i32, i32* %i, align 4
  %element_addressAB = load %Section**, %Section*** %fieldLLL25, align 8
  %element_addressXYXZY = getelementptr inbounds %Section*, %Section** %element_addressAB, i32 %i26
  %load_element = load %Section*, %Section** %element_addressXYXZY, align 8
  store %Section* %load_element, %Section** %s, align 8
  %s27 = load %Section*, %Section** %s, align 8
  %fieldLLL28 = getelementptr inbounds %Section, %Section* %s27, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL28, align 4
  %eq = icmp eq i32 %sh_type, 1
  store i1 %eq, i1* %andand, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %s29 = load %Section*, %Section** %s, align 8
  %fieldLLL30 = getelementptr inbounds %Section, %Section* %s29, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL30, align 4
  %andtmp = and i32 %sh_flags, 2
  %icmpA = icmp ne i32 %andtmp, 0
  %andand31 = and i1 %eq, %icmpA
  store i1 %andand31, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then32, label %cond_end

cond_jump_then32:                                 ; preds = %cond_jump_end
  %s33 = load %Section*, %Section** %s, align 8
  %fieldRRRROOU = getelementptr inbounds %Section, %Section* %s33, i32 0, i32 18
  %autocast = bitcast [1 x i8]* %fieldRRRROOU to i8*
  store i8* %autocast, i8** %p, align 8
  br label %loop_top_block35

cond_end:                                         ; preds = %cond_end_block37, %cond_jump_end
  br label %tcc_add_linker_symbols.next_sec

loop_continue_top_block34:                        ; preds = %cond_end97
  br label %loop_top_block35

loop_top_block35:                                 ; preds = %loop_continue_top_block34, %cond_jump_then32
  br i1 true, label %cond_then_block36, label %cond_end_block37

cond_then_block36:                                ; preds = %loop_top_block35
  %p38 = load i8*, i8** %p, align 8
  %derefference_valueB = load i8, i8* %p38, align 1
  %icastL = sext i8 %derefference_valueB to i32
  store i32 %icastL, i32* %ch, align 4
  %ch39 = load i32, i32* %ch, align 4
  %logical_denial = icmp eq i32 %ch39, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA40 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA40, label %cond_jump_then41, label %cond_end42

cond_end_block37:                                 ; preds = %cond_jump_then41, %loop_top_block35
  %autocast100 = bitcast [1024 x i8]* %buf to i8*
  %s101 = load %Section*, %Section** %s, align 8
  %fieldRRRROOU102 = getelementptr inbounds %Section, %Section* %s101, i32 0, i32 18
  %autocast103 = bitcast [1 x i8]* %fieldRRRROOU102 to i8*
  %fun_result104 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast100, i64 1024, i8* bitcast ([11 x i8]* @240 to i8*), i8* %autocast103)
  %symtab_section105 = load %Section*, %Section** @symtab_section, align 8
  %s106 = load %Section*, %Section** %s, align 8
  %fieldLLL107 = getelementptr inbounds %Section, %Section* %s106, i32 0, i32 4
  %sh_num108 = load i32, i32* %fieldLLL107, align 4
  %autocast109 = bitcast [1024 x i8]* %buf to i8*
  %fun_result110 = call i32 @add_elf_sym(%Section* %symtab_section105, i64 0, i64 0, i32 16, i32 0, i32 %sh_num108, i8* %autocast109)
  %autocast111 = bitcast [1024 x i8]* %buf to i8*
  %s112 = load %Section*, %Section** %s, align 8
  %fieldRRRROOU113 = getelementptr inbounds %Section, %Section* %s112, i32 0, i32 18
  %autocast114 = bitcast [1 x i8]* %fieldRRRROOU113 to i8*
  %fun_result115 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %autocast111, i64 1024, i8* bitcast ([10 x i8]* @241 to i8*), i8* %autocast114)
  %symtab_section116 = load %Section*, %Section** @symtab_section, align 8
  %s117 = load %Section*, %Section** %s, align 8
  %fieldLLL118 = getelementptr inbounds %Section, %Section* %s117, i32 0, i32 0
  %data_offset119 = load i64, i64* %fieldLLL118, align 4
  %s121 = load %Section*, %Section** %s, align 8
  %fieldLLL122 = getelementptr inbounds %Section, %Section* %s121, i32 0, i32 4
  %sh_num123 = load i32, i32* %fieldLLL122, align 4
  %autocast124 = bitcast [1024 x i8]* %buf to i8*
  %fun_result125 = call i32 @add_elf_sym(%Section* %symtab_section116, i64 %data_offset119, i64 0, i32 16, i32 0, i32 %sh_num123, i8* %autocast124)
  br label %cond_end

cond_jump_then41:                                 ; preds = %cond_then_block36
  br label %cond_end_block37

cond_end42:                                       ; preds = %after_break, %cond_then_block36
  %ch44 = load i32, i32* %ch, align 4
  store i32 1255, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccelf.c, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isid

after_break:                                      ; No predecessors!
  br label %cond_end42

isid:                                             ; preds = %cond_end42
  %inline_result_variable = alloca i32, align 4
  %c = alloca i32, align 4
  store i32 %ch44, i32* %c, align 4
  %c47 = load i32, i32* %c, align 4
  %gteq_signed = icmp sge i32 %c47, 97
  store i1 %gteq_signed, i1* %andand46, align 1
  br i1 %gteq_signed, label %cond_jump_then48, label %cond_jump_end49

isid_end:                                         ; preds = %cond_jump_end66
  %inline_result_variable71 = load i32, i32* %inline_result_variable, align 4
  %logical_denial72 = icmp eq i32 %inline_result_variable71, 0
  %castOOOO73 = zext i1 %logical_denial72 to i32
  %icmpA74 = icmp ne i32 %castOOOO73, 0
  store i1 %icmpA74, i1* %andand43, align 1
  br i1 %icmpA74, label %cond_jump_then75, label %cond_jump_end76

cond_jump_then48:                                 ; preds = %isid
  %c50 = load i32, i32* %c, align 4
  %leeq = icmp sle i32 %c50, 122
  %andand51 = and i1 %gteq_signed, %leeq
  store i1 %andand51, i1* %andand46, align 1
  br label %cond_jump_end49

cond_jump_end49:                                  ; preds = %cond_jump_then48, %isid
  %andand_result_value52 = load i1, i1* %andand46, align 1
  store i1 %andand_result_value52, i1* %oror45, align 1
  br i1 %andand_result_value52, label %cond_jump_end54, label %cond_jump_then53

cond_jump_then53:                                 ; preds = %cond_jump_end49
  %c56 = load i32, i32* %c, align 4
  %gteq_signed57 = icmp sge i32 %c56, 65
  store i1 %gteq_signed57, i1* %andand55, align 1
  br i1 %gteq_signed57, label %cond_jump_then58, label %cond_jump_end59

cond_jump_end54:                                  ; preds = %cond_jump_end59, %cond_jump_end49
  %oror_result_value = load i1, i1* %oror45, align 1
  store i1 %oror_result_value, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_end66, label %cond_jump_then65

cond_jump_then58:                                 ; preds = %cond_jump_then53
  %c60 = load i32, i32* %c, align 4
  %leeq61 = icmp sle i32 %c60, 90
  %andand62 = and i1 %gteq_signed57, %leeq61
  store i1 %andand62, i1* %andand55, align 1
  br label %cond_jump_end59

cond_jump_end59:                                  ; preds = %cond_jump_then58, %cond_jump_then53
  %andand_result_value63 = load i1, i1* %andand55, align 1
  %oror64 = or i1 %andand_result_value52, %andand_result_value63
  store i1 %oror64, i1* %oror45, align 1
  br label %cond_jump_end54

cond_jump_then65:                                 ; preds = %cond_jump_end54
  %c67 = load i32, i32* %c, align 4
  %eq68 = icmp eq i32 %c67, 95
  %oror69 = or i1 %oror_result_value, %eq68
  store i1 %oror69, i1* %oror, align 1
  br label %cond_jump_end66

cond_jump_end66:                                  ; preds = %cond_jump_then65, %cond_jump_end54
  %oror_result_value70 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value70 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %isid_end

cond_jump_then75:                                 ; preds = %isid_end
  %ch77 = load i32, i32* %ch, align 4
  store i32 1255, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccelf.c.146, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %isnum

cond_jump_end76:                                  ; preds = %isnum_end, %isid_end
  %andand_result_value95 = load i1, i1* %andand43, align 1
  br i1 %andand_result_value95, label %cond_jump_then96, label %cond_end97

isnum:                                            ; preds = %cond_jump_then75
  %inline_result_variable78 = alloca i32, align 4
  %c79 = alloca i32, align 4
  store i32 %ch77, i32* %c79, align 4
  %c81 = load i32, i32* %c79, align 4
  %gteq_signed82 = icmp sge i32 %c81, 48
  store i1 %gteq_signed82, i1* %andand80, align 1
  br i1 %gteq_signed82, label %cond_jump_then83, label %cond_jump_end84

isnum_end:                                        ; preds = %cond_jump_end84
  %inline_result_variable90 = load i32, i32* %inline_result_variable78, align 4
  %logical_denial91 = icmp eq i32 %inline_result_variable90, 0
  %castOOOO92 = zext i1 %logical_denial91 to i32
  %icmpA93 = icmp ne i32 %castOOOO92, 0
  %andand94 = and i1 %icmpA74, %icmpA93
  store i1 %andand94, i1* %andand43, align 1
  br label %cond_jump_end76

cond_jump_then83:                                 ; preds = %isnum
  %c85 = load i32, i32* %c79, align 4
  %leeq86 = icmp sle i32 %c85, 57
  %andand87 = and i1 %gteq_signed82, %leeq86
  store i1 %andand87, i1* %andand80, align 1
  br label %cond_jump_end84

cond_jump_end84:                                  ; preds = %cond_jump_then83, %isnum
  %andand_result_value88 = load i1, i1* %andand80, align 1
  %icastKX89 = zext i1 %andand_result_value88 to i32
  store i32 %icastKX89, i32* %inline_result_variable78, align 4
  br label %isnum_end

cond_jump_then96:                                 ; preds = %cond_jump_end76
  br label %tcc_add_linker_symbols.next_sec
  br label %cond_end97

cond_end97:                                       ; preds = %cond_jump_then96, %cond_jump_end76
  %p98 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p98 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p99 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p99 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %loop_continue_top_block34

tcc_add_linker_symbols.next_sec:                  ; preds = %cond_end, %cond_jump_then96
  br label %loop_continue_top_block
}

define internal void @tcc_output_binary(%TCCState* %0, %_IO_FILE* %1, i32* %2) {
entry:
  %andand = alloca i1, align 1
  %size = alloca i32, align 4
  %offset = alloca i32, align 4
  %i = alloca i32, align 4
  %s = alloca %Section*, align 8
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %f = alloca %_IO_FILE*, align 8
  %f2 = alloca %_IO_FILE**, align 8
  store %_IO_FILE* %1, %_IO_FILE** %f, align 8
  store %_IO_FILE** %f, %_IO_FILE*** %f2, align 8
  %section_order = alloca i32*, align 8
  %section_order3 = alloca i32**, align 8
  store i32* %2, i32** %section_order, align 8
  store i32** %section_order, i32*** %section_order3, align 8
  store i32 0, i32* %offset, align 4
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end
  %i44 = load i32, i32* %i, align 4
  %add45 = add i32 %i44, 1
  store i32 %add45, i32* %i, align 4
  %i46 = load i32, i32* %i, align 4
  %sub47 = sub i32 %i46, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i4 = load i32, i32* %i, align 4
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL, align 4
  %le = icmp slt i32 %i4, %nb_sections
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s16 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL7 = getelementptr inbounds %TCCState, %TCCState* %s16, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL7, align 8
  %section_order8 = load i32*, i32** %section_order, align 8
  %i9 = load i32, i32* %i, align 4
  %element_addressAB = load i32*, i32** %section_order, align 8
  %element_addressXYXZY = getelementptr inbounds i32, i32* %element_addressAB, i32 %i9
  %load_element = load i32, i32* %element_addressXYXZY, align 4
  %element_addressAB10 = load %Section**, %Section*** %fieldLLL7, align 8
  %element_addressXYXZY11 = getelementptr inbounds %Section*, %Section** %element_addressAB10, i32 %load_element
  %load_element12 = load %Section*, %Section** %element_addressXYXZY11, align 8
  store %Section* %load_element12, %Section** %s, align 8
  %s13 = load %Section*, %Section** %s, align 8
  %fieldLLL14 = getelementptr inbounds %Section, %Section* %s13, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL14, align 4
  %not_eq = icmp ne i32 %sh_type, 8
  store i1 %not_eq, i1* %andand, align 1
  br i1 %not_eq, label %cond_jump_then, label %cond_jump_end

cond_end_block:                                   ; preds = %loop_top_block
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  %s17 = load %Section*, %Section** %s, align 8
  %fieldLLL18 = getelementptr inbounds %Section, %Section* %s17, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL18, align 4
  %andtmp = and i32 %sh_flags, 2
  %icmpA = icmp ne i32 %andtmp, 0
  %andand19 = and i1 %not_eq, %icmpA
  store i1 %andand19, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then20, label %cond_end

cond_jump_then20:                                 ; preds = %cond_jump_end
  br label %loop_top_block21

cond_end:                                         ; preds = %cond_end_block27, %cond_jump_end
  br label %loop_continue_top_block

loop_top_block21:                                 ; preds = %cond_then_block26, %cond_jump_then20
  %offset22 = load i32, i32* %offset, align 4
  %s23 = load %Section*, %Section** %s, align 8
  %fieldLLL24 = getelementptr inbounds %Section, %Section* %s23, i32 0, i32 12
  %sh_offset = load i64, i64* %fieldLLL24, align 4
  %icastM = trunc i64 %sh_offset to i32
  %le25 = icmp slt i32 %offset22, %icastM
  br i1 %le25, label %cond_then_block26, label %cond_end_block27

cond_then_block26:                                ; preds = %loop_top_block21
  %f28 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result = call i32 @fputc(i32 0, %_IO_FILE* %f28)
  %offset29 = load i32, i32* %offset, align 4
  %add = add i32 %offset29, 1
  store i32 %add, i32* %offset, align 4
  %offset30 = load i32, i32* %offset, align 4
  %sub = sub i32 %offset30, 1
  br label %loop_top_block21

cond_end_block27:                                 ; preds = %loop_top_block21
  %s31 = load %Section*, %Section** %s, align 8
  %fieldLLL32 = getelementptr inbounds %Section, %Section* %s31, i32 0, i32 10
  %sh_size = load i64, i64* %fieldLLL32, align 4
  %icastM33 = trunc i64 %sh_size to i32
  store i32 %icastM33, i32* %size, align 4
  %s34 = load %Section*, %Section** %s, align 8
  %fieldLLL35 = getelementptr inbounds %Section, %Section* %s34, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL35, align 8
  %size36 = load i32, i32* %size, align 4
  %icastD = sext i32 %size36 to i64
  %f37 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result38 = call i64 @fwrite(i8* %data, i64 1, i64 %icastD, %_IO_FILE* %f37)
  %offset39 = load i32, i32* %offset, align 4
  %size40 = load i32, i32* %size, align 4
  %add41 = add i32 %offset39, %size40
  store i32 %add41, i32* %offset, align 4
  %size42 = load i32, i32* %size, align 4
  %sub43 = sub i32 %add41, %size42
  br label %cond_end
}

define i32 @elf_output_file(%TCCState* %0, i8* %1) {
entry:
  %andand1551 = alloca i1, align 1
  %andand1505 = alloca i1, align 1
  %andand1504 = alloca i1, align 1
  %andand1416 = alloca i1, align 1
  %x = alloca i32, align 4
  %p_end = alloca i8*, align 8
  %p = alloca i8*, align 8
  %oror1156 = alloca i1, align 1
  %sym_end1106 = alloca %come_anon88*, align 8
  %oror845 = alloca i1, align 1
  %oror844 = alloca i1, align 1
  %p_offset = alloca i32, align 4
  %a_offset = alloca i32, align 4
  %oror652 = alloca i1, align 1
  %oror651 = alloca i1, align 1
  %oror650 = alloca i1, align 1
  %andand599 = alloca i1, align 1
  %andand598 = alloca i1, align 1
  %dllref = alloca %DLLReference*, align 8
  %andand369 = alloca i1, align 1
  %nb_syms = alloca i32, align 4
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %offset120 = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %sym_end = alloca %come_anon88*, align 8
  %esym = alloca %come_anon88*, align 8
  %index = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %name = alloca i8*, align 8
  %rel_size = alloca i64, align 8
  %rel_addr = alloca i64, align 8
  %file_type = alloca i32, align 4
  %type = alloca i32, align 4
  %sym = alloca %come_anon88*, align 8
  %saved_dynamic_data_offset = alloca i64, align 8
  %dynstr = alloca %Section*, align 8
  %dynamic = alloca %Section*, align 8
  %interp = alloca %Section*, align 8
  %ph = alloca %come_anon96*, align 8
  %phdr = alloca %come_anon96*, align 8
  %sh = alloca %come_anon86*, align 8
  %shdr = alloca %come_anon86, align 8
  %castXXXX3 = bitcast %come_anon86* %shdr to i8*
  %2 = call i8* @memset(i8* %castXXXX3, i32 0, i64 64)
  %s = alloca %Section*, align 8
  %strsec = alloca %Section*, align 8
  %addr = alloca i64, align 8
  %k = alloca i32, align 4
  %sh_order_index = alloca i32, align 4
  %tmp = alloca i32, align 4
  %j = alloca i32, align 4
  %size = alloca i32, align 4
  %offset = alloca i32, align 4
  %file_offset = alloca i32, align 4
  %phnum = alloca i32, align 4
  %i = alloca i32, align 4
  %shnum = alloca i32, align 4
  %section_order = alloca i32*, align 8
  %ret = alloca i32, align 4
  %mode = alloca i32, align 4
  %fd = alloca i32, align 4
  %f = alloca %_IO_FILE*, align 8
  %ehdr = alloca %come_anon84, align 8
  %castXXXX = bitcast %come_anon84* %ehdr to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %filename = alloca i8*, align 8
  %filename2 = alloca i8**, align 8
  store i8* %1, i8** %filename, align 8
  store i8** %filename, i8*** %filename2, align 8
  %s14 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s14, i32 0, i32 0
  %output_type = load i32, i32* %fieldLLL, align 4
  store i32 %output_type, i32* %file_type, align 4
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s15, i32 0, i32 49
  store i32 0, i32* %fieldTU, align 4
  %file_type6 = load i32, i32* %file_type, align 4
  %not_eq = icmp ne i32 %file_type6, 3
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s17 = load %TCCState*, %TCCState** %s1, align 8
  call void @tcc_add_runtime(%TCCState* %s17)
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  store %come_anon96* null, %come_anon96** %phdr, align 8
  store i32* null, i32** %section_order, align 8
  store %Section* null, %Section** %interp, align 8
  store %Section* null, %Section** %dynamic, align 8
  store %Section* null, %Section** %dynstr, align 8
  store i64 0, i64* %saved_dynamic_data_offset, align 4
  %file_type8 = load i32, i32* %file_type, align 4
  %not_eq9 = icmp ne i32 %file_type8, 3
  br i1 %not_eq9, label %cond_jump_then10, label %cond_end11

cond_jump_then10:                                 ; preds = %cond_end
  call void @relocate_common_syms()
  %s112 = load %TCCState*, %TCCState** %s1, align 8
  call void @tcc_add_linker_symbols(%TCCState* %s112)
  %s113 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL14 = getelementptr inbounds %TCCState, %TCCState* %s113, i32 0, i32 27
  %static_link = load i32, i32* %fieldLLL14, align 4
  %logical_denial = icmp eq i32 %static_link, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then15, label %cond_else_block

cond_end11:                                       ; preds = %cond_end16, %cond_end
  %ehdr539 = load %come_anon84, %come_anon84* %ehdr, align 4
  %castAQ540 = bitcast %come_anon84* %ehdr to i8*
  %ehdr541 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fun_result542 = call i8* @memset(i8* %castAQ540, i32 0, i64 64)
  %s1543 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result544 = call %Section* @new_section(%TCCState* %s1543, i8* bitcast ([10 x i8]* @251 to i8*), i32 3, i32 0)
  store %Section* %fun_result544, %Section** %strsec, align 8
  %strsec545 = load %Section*, %Section** %strsec, align 8
  %fun_result546 = call i32 @put_elf_str(%Section* %strsec545, i8* bitcast ([1 x i8]* @252 to i8*))
  %s1547 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL548 = getelementptr inbounds %TCCState, %TCCState* %s1547, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL548, align 4
  store i32 %nb_sections, i32* %shnum, align 4
  %shnum549 = load i32, i32* %shnum, align 4
  %icastD550 = sext i32 %shnum549 to i64
  %mul551 = mul i64 4, %icastD550
  %fun_result552 = call i8* @tcc_malloc(i64 %mul551)
  %castAQ553 = bitcast i8* %fun_result552 to i32*
  store i32* %castAQ553, i32** %section_order, align 8
  %section_order554 = load i32*, i32** %section_order, align 8
  %element_addressXYXY555 = getelementptr i32, i32* %section_order554, i32 0
  store i32 0, i32* %element_addressXYXY555, align 4
  store i32 1, i32* %sh_order_index, align 4
  %file_type556 = load i32, i32* %file_type, align 4
  br label %cond_then_block557
  br label %cond_else_blockX558

cond_jump_then15:                                 ; preds = %cond_jump_then10
  %file_type17 = load i32, i32* %file_type, align 4
  %eq = icmp eq i32 %file_type17, 1
  br i1 %eq, label %cond_jump_then18, label %cond_end19

cond_else_block:                                  ; preds = %cond_jump_then10
  %s1538 = load %TCCState*, %TCCState** %s1, align 8
  call void @build_got_entries(%TCCState* %s1538)
  br label %cond_end16

cond_end16:                                       ; preds = %cond_else_block, %cond_end516
  br label %cond_end11

cond_jump_then18:                                 ; preds = %cond_jump_then15
  %s120 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result = call %Section* @new_section(%TCCState* %s120, i8* bitcast ([8 x i8]* @242 to i8*), i32 1, i32 2)
  store %Section* %fun_result, %Section** %interp, align 8
  %interp21 = load %Section*, %Section** %interp, align 8
  %fieldTU22 = getelementptr inbounds %Section, %Section* %interp21, i32 0, i32 8
  store i32 1, i32* %fieldTU22, align 4
  %interp23 = load %Section*, %Section** %interp, align 8
  %fun_result24 = call i8* @section_ptr_add(%Section* %interp23, i64 26)
  store i8* %fun_result24, i8** %ptr, align 8
  %ptr25 = load i8*, i8** %ptr, align 8
  %fun_result26 = call i8* @strcpy(i8* %ptr25, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @elf_interp, i32 0, i32 0))
  br label %cond_end19

cond_end19:                                       ; preds = %cond_jump_then18, %cond_jump_then15
  %s127 = load %TCCState*, %TCCState** %s1, align 8
  %s128 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result29 = call %Section* @new_symtab(%TCCState* %s128, i8* bitcast ([8 x i8]* @243 to i8*), i32 11, i32 2, i8* bitcast ([8 x i8]* @244 to i8*), i8* bitcast ([6 x i8]* @245 to i8*), i32 2)
  %fieldTU30 = getelementptr inbounds %TCCState, %TCCState* %s127, i32 0, i32 23
  store %Section* %fun_result29, %Section** %fieldTU30, align 8
  %s131 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL32 = getelementptr inbounds %TCCState, %TCCState* %s131, i32 0, i32 23
  %dynsym = load %Section*, %Section** %fieldLLL32, align 8
  %fieldLLL33 = getelementptr inbounds %Section, %Section* %dynsym, i32 0, i32 14
  %link = load %Section*, %Section** %fieldLLL33, align 8
  store %Section* %link, %Section** %dynstr, align 8
  %s134 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result35 = call %Section* @new_section(%TCCState* %s134, i8* bitcast ([9 x i8]* @246 to i8*), i32 6, i32 3)
  store %Section* %fun_result35, %Section** %dynamic, align 8
  %dynamic36 = load %Section*, %Section** %dynamic, align 8
  %dynstr37 = load %Section*, %Section** %dynstr, align 8
  %fieldTU38 = getelementptr inbounds %Section, %Section* %dynamic36, i32 0, i32 14
  store %Section* %dynstr37, %Section** %fieldTU38, align 8
  %dynamic39 = load %Section*, %Section** %dynamic, align 8
  %fieldTU40 = getelementptr inbounds %Section, %Section* %dynamic39, i32 0, i32 9
  store i32 16, i32* %fieldTU40, align 4
  %s141 = load %TCCState*, %TCCState** %s1, align 8
  %s142 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result43 = call %Section* @new_section(%TCCState* %s142, i8* bitcast ([5 x i8]* @247 to i8*), i32 1, i32 6)
  %fieldTU44 = getelementptr inbounds %TCCState, %TCCState* %s141, i32 0, i32 18
  store %Section* %fun_result43, %Section** %fieldTU44, align 8
  %s145 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL46 = getelementptr inbounds %TCCState, %TCCState* %s145, i32 0, i32 18
  %plt = load %Section*, %Section** %fieldLLL46, align 8
  %fieldTU47 = getelementptr inbounds %Section, %Section* %plt, i32 0, i32 9
  store i32 4, i32* %fieldTU47, align 4
  %s148 = load %TCCState*, %TCCState** %s1, align 8
  call void @build_got(%TCCState* %s148)
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL49 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL49, align 8
  %symtab_section50 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL51 = getelementptr inbounds %Section, %Section* %symtab_section50, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL51, align 4
  %ptrToIntC = ptrtoint i8* %data to i64
  %mul = mul i64 %data_offset, 1
  %add = add i64 %ptrToIntC, %mul
  %intToPtrB = inttoptr i64 %add to i8*
  %castAQ = bitcast i8* %intToPtrB to %come_anon88*
  store %come_anon88* %castAQ, %come_anon88** %sym_end, align 8
  %file_type52 = load i32, i32* %file_type, align 4
  %eq53 = icmp eq i32 %file_type52, 1
  br i1 %eq53, label %cond_jump_then54, label %cond_else_block55

cond_jump_then54:                                 ; preds = %cond_end19
  %symtab_section57 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL58 = getelementptr inbounds %Section, %Section* %symtab_section57, i32 0, i32 1
  %data59 = load i8*, i8** %fieldLLL58, align 8
  %castAQ60 = bitcast i8* %data59 to %come_anon88*
  %ptrToIntC61 = ptrtoint %come_anon88* %castAQ60 to i64
  %add62 = add i64 %ptrToIntC61, 24
  %intToPtrB63 = inttoptr i64 %add62 to %come_anon88*
  store %come_anon88* %intToPtrB63, %come_anon88** %sym, align 8
  br label %loop_top_block

cond_else_block55:                                ; preds = %cond_end19
  %symtab_section336 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL337 = getelementptr inbounds %Section, %Section* %symtab_section336, i32 0, i32 0
  %data_offset338 = load i64, i64* %fieldLLL337, align 4
  %div339 = sdiv i64 %data_offset338, 24
  %icastM340 = trunc i64 %div339 to i32
  store i32 %icastM340, i32* %nb_syms, align 4
  %s1341 = load %TCCState*, %TCCState** %s1, align 8
  %nb_syms342 = load i32, i32* %nb_syms, align 4
  %icastD = sext i32 %nb_syms342 to i64
  %mul343 = mul i64 4, %icastD
  %fun_result344 = call i8* @tcc_mallocz(i64 %mul343)
  %castAQ345 = bitcast i8* %fun_result344 to i32*
  %fieldTU346 = getelementptr inbounds %TCCState, %TCCState* %s1341, i32 0, i32 21
  store i32* %castAQ345, i32** %fieldTU346, align 8
  %symtab_section347 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL348 = getelementptr inbounds %Section, %Section* %symtab_section347, i32 0, i32 1
  %data349 = load i8*, i8** %fieldLLL348, align 8
  %castAQ350 = bitcast i8* %data349 to %come_anon88*
  %ptrToIntC351 = ptrtoint %come_anon88* %castAQ350 to i64
  %add352 = add i64 %ptrToIntC351, 24
  %intToPtrB353 = inttoptr i64 %add352 to %come_anon88*
  store %come_anon88* %intToPtrB353, %come_anon88** %sym, align 8
  br label %loop_top_block355

cond_end56:                                       ; preds = %cond_end_block360, %cond_end_block260
  %s1484 = load %TCCState*, %TCCState** %s1, align 8
  call void @build_got_entries(%TCCState* %s1484)
  store i32 0, i32* %i, align 4
  br label %loop_top_block486

loop_continue_top_block:                          ; preds = %cond_end70
  %sym219 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC220 = ptrtoint %come_anon88* %sym219 to i64
  %add221 = add i64 %ptrToIntC220, 24
  %intToPtrB222 = inttoptr i64 %add221 to %come_anon88*
  store %come_anon88* %intToPtrB222, %come_anon88** %sym, align 8
  %sym223 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI = ptrtoint %come_anon88* %sym223 to i64
  %sub224 = sub i64 %ptrToIntI, 24
  %iintToPtrD = inttoptr i64 %sub224 to %come_anon88*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_jump_then54
  %sym64 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym_end65 = load %come_anon88*, %come_anon88** %sym_end, align 8
  %le = icmp slt %come_anon88* %sym64, %sym_end65
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym66 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL67 = getelementptr inbounds %come_anon88, %come_anon88* %sym66, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL67, align 2
  %eq68 = icmp eq i16 %st_shndx, 0
  br i1 %eq68, label %cond_jump_then69, label %cond_jump_elif0

cond_end_block:                                   ; preds = %loop_top_block
  %s1225 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL226 = getelementptr inbounds %TCCState, %TCCState* %s1225, i32 0, i32 49
  %nb_errors = load i32, i32* %fieldLLL226, align 4
  %icmpA227 = icmp ne i32 %nb_errors, 0
  br i1 %icmpA227, label %cond_jump_then228, label %cond_end229

cond_jump_then69:                                 ; preds = %cond_then_block
  %symtab_section71 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL72 = getelementptr inbounds %Section, %Section* %symtab_section71, i32 0, i32 14
  %link73 = load %Section*, %Section** %fieldLLL72, align 8
  %fieldLLL74 = getelementptr inbounds %Section, %Section* %link73, i32 0, i32 1
  %data75 = load i8*, i8** %fieldLLL74, align 8
  %sym76 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL77 = getelementptr inbounds %come_anon88, %come_anon88* %sym76, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL77, align 4
  %ptrToIntC78 = ptrtoint i8* %data75 to i64
  %sext = sext i32 %st_name to i64
  %mul79 = mul i64 %sext, 1
  %add80 = add i64 %ptrToIntC78, %mul79
  %intToPtrB81 = inttoptr i64 %add80 to i8*
  store i8* %intToPtrB81, i8** %name, align 8
  %s182 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL83 = getelementptr inbounds %TCCState, %TCCState* %s182, i32 0, i32 22
  %dynsymtab_section = load %Section*, %Section** %fieldLLL83, align 8
  %name84 = load i8*, i8** %name, align 8
  %fun_result85 = call i32 @find_elf_sym(%Section* %dynsymtab_section, i8* %name84)
  store i32 %fun_result85, i32* %sym_index, align 4
  %sym_index86 = load i32, i32* %sym_index, align 4
  %icmpA87 = icmp ne i32 %sym_index86, 0
  br i1 %icmpA87, label %cond_jump_then88, label %cond_else_block89

cond_jump_elif0:                                  ; preds = %cond_then_block
  %s1176 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL177 = getelementptr inbounds %TCCState, %TCCState* %s1176, i32 0, i32 29
  %rdynamic = load i32, i32* %fieldLLL177, align 4
  %icmpA178 = icmp ne i32 %rdynamic, 0
  store i1 %icmpA178, i1* %andand, align 1
  br i1 %icmpA178, label %cond_jump_then179, label %cond_jump_end180

cond_jump_elif_then0:                             ; preds = %cond_jump_end180
  %symtab_section188 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL189 = getelementptr inbounds %Section, %Section* %symtab_section188, i32 0, i32 14
  %link190 = load %Section*, %Section** %fieldLLL189, align 8
  %fieldLLL191 = getelementptr inbounds %Section, %Section* %link190, i32 0, i32 1
  %data192 = load i8*, i8** %fieldLLL191, align 8
  %sym193 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL194 = getelementptr inbounds %come_anon88, %come_anon88* %sym193, i32 0, i32 0
  %st_name195 = load i32, i32* %fieldLLL194, align 4
  %ptrToIntC196 = ptrtoint i8* %data192 to i64
  %sext197 = sext i32 %st_name195 to i64
  %mul198 = mul i64 %sext197, 1
  %add199 = add i64 %ptrToIntC196, %mul198
  %intToPtrB200 = inttoptr i64 %add199 to i8*
  store i8* %intToPtrB200, i8** %name, align 8
  %s1201 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL202 = getelementptr inbounds %TCCState, %TCCState* %s1201, i32 0, i32 23
  %dynsym203 = load %Section*, %Section** %fieldLLL202, align 8
  %sym204 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL205 = getelementptr inbounds %come_anon88, %come_anon88* %sym204, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL205, align 4
  %sym206 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL207 = getelementptr inbounds %come_anon88, %come_anon88* %sym206, i32 0, i32 5
  %st_size208 = load i64, i64* %fieldLLL207, align 4
  %sym209 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL210 = getelementptr inbounds %come_anon88, %come_anon88* %sym209, i32 0, i32 1
  %st_info211 = load i8, i8* %fieldLLL210, align 1
  %icastKY212 = zext i8 %st_info211 to i32
  %sym213 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL214 = getelementptr inbounds %come_anon88, %come_anon88* %sym213, i32 0, i32 3
  %st_shndx215 = load i16, i16* %fieldLLL214, align 2
  %icastKY216 = zext i16 %st_shndx215 to i32
  %name217 = load i8*, i8** %name, align 8
  %fun_result218 = call i32 @put_elf_sym(%Section* %dynsym203, i64 %st_value, i64 %st_size208, i32 %icastKY212, i32 0, i32 %icastKY216, i8* %name217)
  br label %cond_end70

cond_end70:                                       ; preds = %cond_jump_elif_then0, %cond_jump_end180, %cond_end90
  br label %loop_continue_top_block

cond_jump_then88:                                 ; preds = %cond_jump_then69
  %s191 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL92 = getelementptr inbounds %TCCState, %TCCState* %s191, i32 0, i32 22
  %dynsymtab_section93 = load %Section*, %Section** %fieldLLL92, align 8
  %fieldLLL94 = getelementptr inbounds %Section, %Section* %dynsymtab_section93, i32 0, i32 1
  %data95 = load i8*, i8** %fieldLLL94, align 8
  %castAQ96 = bitcast i8* %data95 to %come_anon88*
  %sym_index97 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL94 to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %sym_index97
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %esym, align 8
  %esym98 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL99 = getelementptr inbounds %come_anon88, %come_anon88* %esym98, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL99, align 1
  %icastKY = zext i8 %st_info to i32
  %andtmp = and i32 %icastKY, 15
  store i32 %andtmp, i32* %type, align 4
  %type100 = load i32, i32* %type, align 4
  %eq101 = icmp eq i32 %type100, 2
  br i1 %eq101, label %cond_jump_then102, label %cond_jump_elif0103

cond_else_block89:                                ; preds = %cond_jump_then69
  %sym160 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL161 = getelementptr inbounds %come_anon88, %come_anon88* %sym160, i32 0, i32 1
  %st_info162 = load i8, i8* %fieldLLL161, align 1
  %icastKY163 = zext i8 %st_info162 to i32
  %rshifttmp = lshr i32 %icastKY163, 4
  %eq164 = icmp eq i32 %rshifttmp, 2
  store i1 %eq164, i1* %oror, align 1
  br i1 %eq164, label %cond_jump_end, label %cond_jump_then165

cond_end90:                                       ; preds = %cond_end174, %cond_end105
  br label %cond_end70

cond_jump_then102:                                ; preds = %cond_jump_then88
  %s1106 = load %TCCState*, %TCCState** %s1, align 8
  %esym107 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL108 = getelementptr inbounds %come_anon88, %come_anon88* %esym107, i32 0, i32 5
  %st_size = load i64, i64* %fieldLLL108, align 4
  %esym109 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL110 = getelementptr inbounds %come_anon88, %come_anon88* %esym109, i32 0, i32 1
  %st_info111 = load i8, i8* %fieldLLL110, align 1
  %icastKY112 = zext i8 %st_info111 to i32
  %sym113 = load %come_anon88*, %come_anon88** %sym, align 8
  %symtab_section114 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL115 = getelementptr inbounds %Section, %Section* %symtab_section114, i32 0, i32 1
  %data116 = load i8*, i8** %fieldLLL115, align 8
  %castAQ117 = bitcast i8* %data116 to %come_anon88*
  %ptrToIntG = ptrtoint %come_anon88* %sym113 to i64
  %ptrToIntH = ptrtoint %come_anon88* %castAQ117 to i64
  %sub = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub, 24
  %icastM = trunc i64 %div to i32
  call void @put_got_entry(%TCCState* %s1106, i32 7, i64 %st_size, i32 %icastKY112, i32 %icastM)
  br label %cond_end105

cond_jump_elif0103:                               ; preds = %cond_jump_then88
  %type118 = load i32, i32* %type, align 4
  %eq119 = icmp eq i32 %type118, 1
  br i1 %eq119, label %cond_jump_elif_then0104, label %cond_end105

cond_jump_elif_then0104:                          ; preds = %cond_jump_elif0103
  %bss_section = load %Section*, %Section** @bss_section, align 8
  %fieldLLL121 = getelementptr inbounds %Section, %Section* %bss_section, i32 0, i32 0
  %data_offset122 = load i64, i64* %fieldLLL121, align 4
  store i64 %data_offset122, i64* %offset120, align 4
  %offset123 = load i64, i64* %offset120, align 4
  %add124 = add i64 %offset123, 16
  %sub125 = sub i64 %add124, 1
  %andtmp126 = and i64 %sub125, -16
  store i64 %andtmp126, i64* %offset120, align 4
  %s1127 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL128 = getelementptr inbounds %TCCState, %TCCState* %s1127, i32 0, i32 23
  %dynsym129 = load %Section*, %Section** %fieldLLL128, align 8
  %offset130 = load i64, i64* %offset120, align 4
  %esym131 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL132 = getelementptr inbounds %come_anon88, %come_anon88* %esym131, i32 0, i32 5
  %st_size133 = load i64, i64* %fieldLLL132, align 4
  %esym134 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL135 = getelementptr inbounds %come_anon88, %come_anon88* %esym134, i32 0, i32 1
  %st_info136 = load i8, i8* %fieldLLL135, align 1
  %icastKY137 = zext i8 %st_info136 to i32
  %bss_section138 = load %Section*, %Section** @bss_section, align 8
  %fieldLLL139 = getelementptr inbounds %Section, %Section* %bss_section138, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL139, align 4
  %name140 = load i8*, i8** %name, align 8
  %fun_result141 = call i32 @put_elf_sym(%Section* %dynsym129, i64 %offset130, i64 %st_size133, i32 %icastKY137, i32 0, i32 %sh_num, i8* %name140)
  store i32 %fun_result141, i32* %index, align 4
  %s1142 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL143 = getelementptr inbounds %TCCState, %TCCState* %s1142, i32 0, i32 23
  %dynsym144 = load %Section*, %Section** %fieldLLL143, align 8
  %bss_section145 = load %Section*, %Section** @bss_section, align 8
  %offset146 = load i64, i64* %offset120, align 4
  %index147 = load i32, i32* %index, align 4
  call void @put_elf_reloc(%Section* %dynsym144, %Section* %bss_section145, i64 %offset146, i32 5, i32 %index147)
  %offset148 = load i64, i64* %offset120, align 4
  %esym149 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL150 = getelementptr inbounds %come_anon88, %come_anon88* %esym149, i32 0, i32 5
  %st_size151 = load i64, i64* %fieldLLL150, align 4
  %add152 = add i64 %offset148, %st_size151
  store i64 %add152, i64* %offset120, align 4
  %esym153 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL154 = getelementptr inbounds %come_anon88, %come_anon88* %esym153, i32 0, i32 5
  %st_size155 = load i64, i64* %fieldLLL154, align 4
  %sub156 = sub i64 %add152, %st_size155
  %bss_section157 = load %Section*, %Section** @bss_section, align 8
  %offset158 = load i64, i64* %offset120, align 4
  %fieldTU159 = getelementptr inbounds %Section, %Section* %bss_section157, i32 0, i32 0
  store i64 %offset158, i64* %fieldTU159, align 4
  br label %cond_end105

cond_end105:                                      ; preds = %cond_jump_elif_then0104, %cond_jump_elif0103, %cond_jump_then102
  br label %cond_end90

cond_jump_then165:                                ; preds = %cond_else_block89
  %name166 = load i8*, i8** %name, align 8
  %fun_result167 = call i32 @strcmp(i8* %name166, i8* bitcast ([7 x i8]* @248 to i8*))
  %logical_denial168 = icmp eq i32 %fun_result167, 0
  %castOOOO169 = zext i1 %logical_denial168 to i32
  %icmpA170 = icmp ne i32 %castOOOO169, 0
  %oror171 = or i1 %eq164, %icmpA170
  store i1 %oror171, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then165, %cond_else_block89
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then172, label %cond_else_block173

cond_jump_then172:                                ; preds = %cond_jump_end
  br label %cond_end174

cond_else_block173:                               ; preds = %cond_jump_end
  %name175 = load i8*, i8** %name, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([22 x i8]* @249 to i8*), i8* %name175)
  br label %cond_end174

cond_end174:                                      ; preds = %cond_else_block173, %cond_jump_then172
  br label %cond_end90

cond_jump_then179:                                ; preds = %cond_jump_elif0
  %sym181 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL182 = getelementptr inbounds %come_anon88, %come_anon88* %sym181, i32 0, i32 1
  %st_info183 = load i8, i8* %fieldLLL182, align 1
  %icastKY184 = zext i8 %st_info183 to i32
  %rshifttmp185 = lshr i32 %icastKY184, 4
  %not_eq186 = icmp ne i32 %rshifttmp185, 0
  %andand187 = and i1 %icmpA178, %not_eq186
  store i1 %andand187, i1* %andand, align 1
  br label %cond_jump_end180

cond_jump_end180:                                 ; preds = %cond_jump_then179, %cond_jump_elif0
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_elif_then0, label %cond_end70

cond_jump_then228:                                ; preds = %cond_end_block
  br label %elf_output_file.fail
  br label %cond_end229

cond_end229:                                      ; preds = %cond_jump_then228, %cond_end_block
  %s1230 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL231 = getelementptr inbounds %TCCState, %TCCState* %s1230, i32 0, i32 22
  %dynsymtab_section232 = load %Section*, %Section** %fieldLLL231, align 8
  %fieldLLL233 = getelementptr inbounds %Section, %Section* %dynsymtab_section232, i32 0, i32 1
  %data234 = load i8*, i8** %fieldLLL233, align 8
  %s1235 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL236 = getelementptr inbounds %TCCState, %TCCState* %s1235, i32 0, i32 22
  %dynsymtab_section237 = load %Section*, %Section** %fieldLLL236, align 8
  %fieldLLL238 = getelementptr inbounds %Section, %Section* %dynsymtab_section237, i32 0, i32 0
  %data_offset239 = load i64, i64* %fieldLLL238, align 4
  %ptrToIntC240 = ptrtoint i8* %data234 to i64
  %mul241 = mul i64 %data_offset239, 1
  %add242 = add i64 %ptrToIntC240, %mul241
  %intToPtrB243 = inttoptr i64 %add242 to i8*
  %castAQ244 = bitcast i8* %intToPtrB243 to %come_anon88*
  store %come_anon88* %castAQ244, %come_anon88** %sym_end, align 8
  %s1245 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL246 = getelementptr inbounds %TCCState, %TCCState* %s1245, i32 0, i32 22
  %dynsymtab_section247 = load %Section*, %Section** %fieldLLL246, align 8
  %fieldLLL248 = getelementptr inbounds %Section, %Section* %dynsymtab_section247, i32 0, i32 1
  %data249 = load i8*, i8** %fieldLLL248, align 8
  %castAQ250 = bitcast i8* %data249 to %come_anon88*
  %ptrToIntC251 = ptrtoint %come_anon88* %castAQ250 to i64
  %add252 = add i64 %ptrToIntC251, 24
  %intToPtrB253 = inttoptr i64 %add252 to %come_anon88*
  store %come_anon88* %intToPtrB253, %come_anon88** %esym, align 8
  br label %loop_top_block255

elf_output_file.fail:                             ; preds = %cond_jump_then1596, %cond_jump_then1486, %cond_jump_then228
  store i32 -1, i32* %ret, align 4
  br label %elf_output_file.the_end
  br label %cond_end1487

loop_continue_top_block254:                       ; preds = %cond_end266
  %esym328 = load %come_anon88*, %come_anon88** %esym, align 8
  %ptrToIntC329 = ptrtoint %come_anon88* %esym328 to i64
  %add330 = add i64 %ptrToIntC329, 24
  %intToPtrB331 = inttoptr i64 %add330 to %come_anon88*
  store %come_anon88* %intToPtrB331, %come_anon88** %esym, align 8
  %esym332 = load %come_anon88*, %come_anon88** %esym, align 8
  %ptrToIntI333 = ptrtoint %come_anon88* %esym332 to i64
  %sub334 = sub i64 %ptrToIntI333, 24
  %iintToPtrD335 = inttoptr i64 %sub334 to %come_anon88*
  br label %loop_top_block255

loop_top_block255:                                ; preds = %loop_continue_top_block254, %cond_end229
  %esym256 = load %come_anon88*, %come_anon88** %esym, align 8
  %sym_end257 = load %come_anon88*, %come_anon88** %sym_end, align 8
  %le258 = icmp slt %come_anon88* %esym256, %sym_end257
  br i1 %le258, label %cond_then_block259, label %cond_end_block260

cond_then_block259:                               ; preds = %loop_top_block255
  %esym261 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL262 = getelementptr inbounds %come_anon88, %come_anon88* %esym261, i32 0, i32 3
  %st_shndx263 = load i16, i16* %fieldLLL262, align 2
  %eq264 = icmp eq i16 %st_shndx263, 0
  br i1 %eq264, label %cond_jump_then265, label %cond_end266

cond_end_block260:                                ; preds = %loop_top_block255
  br label %cond_end56

cond_jump_then265:                                ; preds = %cond_then_block259
  %s1267 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL268 = getelementptr inbounds %TCCState, %TCCState* %s1267, i32 0, i32 22
  %dynsymtab_section269 = load %Section*, %Section** %fieldLLL268, align 8
  %fieldLLL270 = getelementptr inbounds %Section, %Section* %dynsymtab_section269, i32 0, i32 14
  %link271 = load %Section*, %Section** %fieldLLL270, align 8
  %fieldLLL272 = getelementptr inbounds %Section, %Section* %link271, i32 0, i32 1
  %data273 = load i8*, i8** %fieldLLL272, align 8
  %esym274 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL275 = getelementptr inbounds %come_anon88, %come_anon88* %esym274, i32 0, i32 0
  %st_name276 = load i32, i32* %fieldLLL275, align 4
  %ptrToIntC277 = ptrtoint i8* %data273 to i64
  %sext278 = sext i32 %st_name276 to i64
  %mul279 = mul i64 %sext278, 1
  %add280 = add i64 %ptrToIntC277, %mul279
  %intToPtrB281 = inttoptr i64 %add280 to i8*
  store i8* %intToPtrB281, i8** %name, align 8
  %symtab_section282 = load %Section*, %Section** @symtab_section, align 8
  %name283 = load i8*, i8** %name, align 8
  %fun_result284 = call i32 @find_elf_sym(%Section* %symtab_section282, i8* %name283)
  store i32 %fun_result284, i32* %sym_index, align 4
  %sym_index285 = load i32, i32* %sym_index, align 4
  %icmpA286 = icmp ne i32 %sym_index285, 0
  br i1 %icmpA286, label %cond_jump_then287, label %cond_else_block288

cond_end266:                                      ; preds = %cond_end289, %cond_then_block259
  br label %loop_continue_top_block254

cond_jump_then287:                                ; preds = %cond_jump_then265
  %symtab_section290 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL291 = getelementptr inbounds %Section, %Section* %symtab_section290, i32 0, i32 1
  %data292 = load i8*, i8** %fieldLLL291, align 8
  %castAQ293 = bitcast i8* %data292 to %come_anon88*
  %sym_index294 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY295 = bitcast i8** %fieldLLL291 to %come_anon88**
  %element_addressAB296 = load %come_anon88*, %come_anon88** %castXYXXYXYXY295, align 8
  %element_addressXYXZY297 = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB296, i32 %sym_index294
  %load_element298 = load %come_anon88, %come_anon88* %element_addressXYXZY297, align 4
  store %come_anon88* %element_addressXYXZY297, %come_anon88** %sym, align 8
  %s1299 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL300 = getelementptr inbounds %TCCState, %TCCState* %s1299, i32 0, i32 23
  %dynsym301 = load %Section*, %Section** %fieldLLL300, align 8
  %sym302 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL303 = getelementptr inbounds %come_anon88, %come_anon88* %sym302, i32 0, i32 4
  %st_value304 = load i64, i64* %fieldLLL303, align 4
  %sym305 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL306 = getelementptr inbounds %come_anon88, %come_anon88* %sym305, i32 0, i32 5
  %st_size307 = load i64, i64* %fieldLLL306, align 4
  %sym308 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL309 = getelementptr inbounds %come_anon88, %come_anon88* %sym308, i32 0, i32 1
  %st_info310 = load i8, i8* %fieldLLL309, align 1
  %icastKY311 = zext i8 %st_info310 to i32
  %sym312 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL313 = getelementptr inbounds %come_anon88, %come_anon88* %sym312, i32 0, i32 3
  %st_shndx314 = load i16, i16* %fieldLLL313, align 2
  %icastKY315 = zext i16 %st_shndx314 to i32
  %name316 = load i8*, i8** %name, align 8
  %fun_result317 = call i32 @put_elf_sym(%Section* %dynsym301, i64 %st_value304, i64 %st_size307, i32 %icastKY311, i32 0, i32 %icastKY315, i8* %name316)
  br label %cond_end289

cond_else_block288:                               ; preds = %cond_jump_then265
  %esym318 = load %come_anon88*, %come_anon88** %esym, align 8
  %fieldLLL319 = getelementptr inbounds %come_anon88, %come_anon88* %esym318, i32 0, i32 1
  %st_info320 = load i8, i8* %fieldLLL319, align 1
  %icastKY321 = zext i8 %st_info320 to i32
  %rshifttmp322 = lshr i32 %icastKY321, 4
  %eq323 = icmp eq i32 %rshifttmp322, 2
  br i1 %eq323, label %cond_jump_then324, label %cond_else_block325

cond_end289:                                      ; preds = %cond_end326, %cond_jump_then287
  br label %cond_end266

cond_jump_then324:                                ; preds = %cond_else_block288
  br label %cond_end326

cond_else_block325:                               ; preds = %cond_else_block288
  %name327 = load i8*, i8** %name, align 8
  call void (i8*, ...) @warning(i8* bitcast ([30 x i8]* @250 to i8*), i8* %name327)
  br label %cond_end326

cond_end326:                                      ; preds = %cond_else_block325, %cond_jump_then324
  br label %cond_end289

loop_continue_top_block354:                       ; preds = %cond_end368
  %sym476 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC477 = ptrtoint %come_anon88* %sym476 to i64
  %add478 = add i64 %ptrToIntC477, 24
  %intToPtrB479 = inttoptr i64 %add478 to %come_anon88*
  store %come_anon88* %intToPtrB479, %come_anon88** %sym, align 8
  %sym480 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI481 = ptrtoint %come_anon88* %sym480 to i64
  %sub482 = sub i64 %ptrToIntI481, 24
  %iintToPtrD483 = inttoptr i64 %sub482 to %come_anon88*
  br label %loop_top_block355

loop_top_block355:                                ; preds = %loop_continue_top_block354, %cond_else_block55
  %sym356 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym_end357 = load %come_anon88*, %come_anon88** %sym_end, align 8
  %le358 = icmp slt %come_anon88* %sym356, %sym_end357
  br i1 %le358, label %cond_then_block359, label %cond_end_block360

cond_then_block359:                               ; preds = %loop_top_block355
  %sym361 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL362 = getelementptr inbounds %come_anon88, %come_anon88* %sym361, i32 0, i32 1
  %st_info363 = load i8, i8* %fieldLLL362, align 1
  %icastKY364 = zext i8 %st_info363 to i32
  %rshifttmp365 = lshr i32 %icastKY364, 4
  %not_eq366 = icmp ne i32 %rshifttmp365, 0
  br i1 %not_eq366, label %cond_jump_then367, label %cond_end368

cond_end_block360:                                ; preds = %loop_top_block355
  br label %cond_end56

cond_jump_then367:                                ; preds = %cond_then_block359
  %sym370 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL371 = getelementptr inbounds %come_anon88, %come_anon88* %sym370, i32 0, i32 1
  %st_info372 = load i8, i8* %fieldLLL371, align 1
  %icastKY373 = zext i8 %st_info372 to i32
  %andtmp374 = and i32 %icastKY373, 15
  %eq375 = icmp eq i32 %andtmp374, 2
  store i1 %eq375, i1* %andand369, align 1
  br i1 %eq375, label %cond_jump_then376, label %cond_jump_end377

cond_end368:                                      ; preds = %cond_end388, %cond_then_block359
  br label %loop_continue_top_block354

cond_jump_then376:                                ; preds = %cond_jump_then367
  %sym378 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL379 = getelementptr inbounds %come_anon88, %come_anon88* %sym378, i32 0, i32 3
  %st_shndx380 = load i16, i16* %fieldLLL379, align 2
  %eq381 = icmp eq i16 %st_shndx380, 0
  %andand382 = and i1 %eq375, %eq381
  store i1 %andand382, i1* %andand369, align 1
  br label %cond_jump_end377

cond_jump_end377:                                 ; preds = %cond_jump_then376, %cond_jump_then367
  %andand_result_value383 = load i1, i1* %andand369, align 1
  br i1 %andand_result_value383, label %cond_jump_then384, label %cond_jump_elif0385

cond_jump_then384:                                ; preds = %cond_jump_end377
  %s1389 = load %TCCState*, %TCCState** %s1, align 8
  %sym390 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL391 = getelementptr inbounds %come_anon88, %come_anon88* %sym390, i32 0, i32 5
  %st_size392 = load i64, i64* %fieldLLL391, align 4
  %sym393 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL394 = getelementptr inbounds %come_anon88, %come_anon88* %sym393, i32 0, i32 1
  %st_info395 = load i8, i8* %fieldLLL394, align 1
  %icastKY396 = zext i8 %st_info395 to i32
  %sym397 = load %come_anon88*, %come_anon88** %sym, align 8
  %symtab_section398 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL399 = getelementptr inbounds %Section, %Section* %symtab_section398, i32 0, i32 1
  %data400 = load i8*, i8** %fieldLLL399, align 8
  %castAQ401 = bitcast i8* %data400 to %come_anon88*
  %ptrToIntG402 = ptrtoint %come_anon88* %sym397 to i64
  %ptrToIntH403 = ptrtoint %come_anon88* %castAQ401 to i64
  %sub404 = sub i64 %ptrToIntG402, %ptrToIntH403
  %div405 = sdiv i64 %sub404, 24
  %icastM406 = trunc i64 %div405 to i32
  call void @put_got_entry(%TCCState* %s1389, i32 7, i64 %st_size392, i32 %icastKY396, i32 %icastM406)
  br label %cond_end388

cond_jump_elif0385:                               ; preds = %cond_jump_end377
  %sym407 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL408 = getelementptr inbounds %come_anon88, %come_anon88* %sym407, i32 0, i32 1
  %st_info409 = load i8, i8* %fieldLLL408, align 1
  %icastKY410 = zext i8 %st_info409 to i32
  %andtmp411 = and i32 %icastKY410, 15
  %eq412 = icmp eq i32 %andtmp411, 1
  br i1 %eq412, label %cond_jump_elif_then0386, label %cond_else_block387

cond_jump_elif_then0386:                          ; preds = %cond_jump_elif0385
  %s1413 = load %TCCState*, %TCCState** %s1, align 8
  %sym414 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL415 = getelementptr inbounds %come_anon88, %come_anon88* %sym414, i32 0, i32 5
  %st_size416 = load i64, i64* %fieldLLL415, align 4
  %sym417 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL418 = getelementptr inbounds %come_anon88, %come_anon88* %sym417, i32 0, i32 1
  %st_info419 = load i8, i8* %fieldLLL418, align 1
  %icastKY420 = zext i8 %st_info419 to i32
  %sym421 = load %come_anon88*, %come_anon88** %sym, align 8
  %symtab_section422 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL423 = getelementptr inbounds %Section, %Section* %symtab_section422, i32 0, i32 1
  %data424 = load i8*, i8** %fieldLLL423, align 8
  %castAQ425 = bitcast i8* %data424 to %come_anon88*
  %ptrToIntG426 = ptrtoint %come_anon88* %sym421 to i64
  %ptrToIntH427 = ptrtoint %come_anon88* %castAQ425 to i64
  %sub428 = sub i64 %ptrToIntG426, %ptrToIntH427
  %div429 = sdiv i64 %sub428, 24
  %icastM430 = trunc i64 %div429 to i32
  call void @put_got_entry(%TCCState* %s1413, i32 6, i64 %st_size416, i32 %icastKY420, i32 %icastM430)
  br label %cond_end388

cond_else_block387:                               ; preds = %cond_jump_elif0385
  %symtab_section431 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL432 = getelementptr inbounds %Section, %Section* %symtab_section431, i32 0, i32 14
  %link433 = load %Section*, %Section** %fieldLLL432, align 8
  %fieldLLL434 = getelementptr inbounds %Section, %Section* %link433, i32 0, i32 1
  %data435 = load i8*, i8** %fieldLLL434, align 8
  %sym436 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL437 = getelementptr inbounds %come_anon88, %come_anon88* %sym436, i32 0, i32 0
  %st_name438 = load i32, i32* %fieldLLL437, align 4
  %ptrToIntC439 = ptrtoint i8* %data435 to i64
  %sext440 = sext i32 %st_name438 to i64
  %mul441 = mul i64 %sext440, 1
  %add442 = add i64 %ptrToIntC439, %mul441
  %intToPtrB443 = inttoptr i64 %add442 to i8*
  store i8* %intToPtrB443, i8** %name, align 8
  %s1444 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL445 = getelementptr inbounds %TCCState, %TCCState* %s1444, i32 0, i32 23
  %dynsym446 = load %Section*, %Section** %fieldLLL445, align 8
  %sym447 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL448 = getelementptr inbounds %come_anon88, %come_anon88* %sym447, i32 0, i32 4
  %st_value449 = load i64, i64* %fieldLLL448, align 4
  %sym450 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL451 = getelementptr inbounds %come_anon88, %come_anon88* %sym450, i32 0, i32 5
  %st_size452 = load i64, i64* %fieldLLL451, align 4
  %sym453 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL454 = getelementptr inbounds %come_anon88, %come_anon88* %sym453, i32 0, i32 1
  %st_info455 = load i8, i8* %fieldLLL454, align 1
  %icastKY456 = zext i8 %st_info455 to i32
  %sym457 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL458 = getelementptr inbounds %come_anon88, %come_anon88* %sym457, i32 0, i32 3
  %st_shndx459 = load i16, i16* %fieldLLL458, align 2
  %icastKY460 = zext i16 %st_shndx459 to i32
  %name461 = load i8*, i8** %name, align 8
  %fun_result462 = call i32 @put_elf_sym(%Section* %dynsym446, i64 %st_value449, i64 %st_size452, i32 %icastKY456, i32 0, i32 %icastKY460, i8* %name461)
  store i32 %fun_result462, i32* %index, align 4
  %s1463 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL464 = getelementptr inbounds %TCCState, %TCCState* %s1463, i32 0, i32 21
  %symtab_to_dynsym = load i32*, i32** %fieldLLL464, align 8
  %sym465 = load %come_anon88*, %come_anon88** %sym, align 8
  %symtab_section466 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL467 = getelementptr inbounds %Section, %Section* %symtab_section466, i32 0, i32 1
  %data468 = load i8*, i8** %fieldLLL467, align 8
  %castAQ469 = bitcast i8* %data468 to %come_anon88*
  %ptrToIntG470 = ptrtoint %come_anon88* %sym465 to i64
  %ptrToIntH471 = ptrtoint %come_anon88* %castAQ469 to i64
  %sub472 = sub i64 %ptrToIntG470, %ptrToIntH471
  %div473 = sdiv i64 %sub472, 24
  %icastM474 = trunc i64 %div473 to i32
  %index475 = load i32, i32* %index, align 4
  %element_addressXYXY = getelementptr i32, i32* %symtab_to_dynsym, i64 %div473
  store i32 %index475, i32* %element_addressXYXY, align 4
  br label %cond_end388

cond_end388:                                      ; preds = %cond_else_block387, %cond_jump_elif_then0386, %cond_jump_then384
  br label %cond_end368

loop_continue_top_block485:                       ; preds = %cond_end503
  %i509 = load i32, i32* %i, align 4
  %add510 = add i32 %i509, 1
  store i32 %add510, i32* %i, align 4
  %i511 = load i32, i32* %i, align 4
  %sub512 = sub i32 %i511, 1
  br label %loop_top_block486

loop_top_block486:                                ; preds = %loop_continue_top_block485, %cond_end56
  %i487 = load i32, i32* %i, align 4
  %s1488 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL489 = getelementptr inbounds %TCCState, %TCCState* %s1488, i32 0, i32 12
  %nb_loaded_dlls = load i32, i32* %fieldLLL489, align 4
  %le490 = icmp slt i32 %i487, %nb_loaded_dlls
  br i1 %le490, label %cond_then_block491, label %cond_end_block492

cond_then_block491:                               ; preds = %loop_top_block486
  %s1493 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL494 = getelementptr inbounds %TCCState, %TCCState* %s1493, i32 0, i32 11
  %loaded_dlls = load %DLLReference**, %DLLReference*** %fieldLLL494, align 8
  %i495 = load i32, i32* %i, align 4
  %element_addressAB496 = load %DLLReference**, %DLLReference*** %fieldLLL494, align 8
  %element_addressXYXZY497 = getelementptr inbounds %DLLReference*, %DLLReference** %element_addressAB496, i32 %i495
  %load_element498 = load %DLLReference*, %DLLReference** %element_addressXYXZY497, align 8
  store %DLLReference* %load_element498, %DLLReference** %dllref, align 8
  %dllref499 = load %DLLReference*, %DLLReference** %dllref, align 8
  %fieldLLL500 = getelementptr inbounds %DLLReference, %DLLReference* %dllref499, i32 0, i32 0
  %level = load i32, i32* %fieldLLL500, align 4
  %eq501 = icmp eq i32 %level, 0
  br i1 %eq501, label %cond_jump_then502, label %cond_end503

cond_end_block492:                                ; preds = %loop_top_block486
  %file_type513 = load i32, i32* %file_type, align 4
  %eq514 = icmp eq i32 %file_type513, 2
  br i1 %eq514, label %cond_jump_then515, label %cond_end516

cond_jump_then502:                                ; preds = %cond_then_block491
  %dynamic504 = load %Section*, %Section** %dynamic, align 8
  %dynstr505 = load %Section*, %Section** %dynstr, align 8
  %dllref506 = load %DLLReference*, %DLLReference** %dllref, align 8
  %fieldRRRROOU = getelementptr inbounds %DLLReference, %DLLReference* %dllref506, i32 0, i32 2
  %autocast = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %fun_result507 = call i32 @put_elf_str(%Section* %dynstr505, i8* %autocast)
  %icastD508 = sext i32 %fun_result507 to i64
  call void @put_dt(%Section* %dynamic504, i32 1, i64 %icastD508)
  br label %cond_end503

cond_end503:                                      ; preds = %cond_jump_then502, %cond_then_block491
  br label %loop_continue_top_block485

cond_jump_then515:                                ; preds = %cond_end_block492
  %s1517 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL518 = getelementptr inbounds %TCCState, %TCCState* %s1517, i32 0, i32 28
  %soname = load i8*, i8** %fieldLLL518, align 8
  %icmpB = icmp ne i8* %soname, null
  br i1 %icmpB, label %cond_jump_then519, label %cond_end520

cond_end516:                                      ; preds = %cond_end520, %cond_end_block492
  %dynamic529 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL530 = getelementptr inbounds %Section, %Section* %dynamic529, i32 0, i32 0
  %data_offset531 = load i64, i64* %fieldLLL530, align 4
  store i64 %data_offset531, i64* %saved_dynamic_data_offset, align 4
  %dynamic532 = load %Section*, %Section** %dynamic, align 8
  %dynamic533 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL534 = getelementptr inbounds %Section, %Section* %dynamic533, i32 0, i32 0
  %data_offset535 = load i64, i64* %fieldLLL534, align 4
  %add536 = add i64 %data_offset535, 144
  %fieldTU537 = getelementptr inbounds %Section, %Section* %dynamic532, i32 0, i32 0
  store i64 %add536, i64* %fieldTU537, align 4
  br label %cond_end16

cond_jump_then519:                                ; preds = %cond_jump_then515
  %dynamic521 = load %Section*, %Section** %dynamic, align 8
  %dynstr522 = load %Section*, %Section** %dynstr, align 8
  %s1523 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL524 = getelementptr inbounds %TCCState, %TCCState* %s1523, i32 0, i32 28
  %soname525 = load i8*, i8** %fieldLLL524, align 8
  %fun_result526 = call i32 @put_elf_str(%Section* %dynstr522, i8* %soname525)
  %icastD527 = sext i32 %fun_result526 to i64
  call void @put_dt(%Section* %dynamic521, i32 14, i64 %icastD527)
  br label %cond_end520

cond_end520:                                      ; preds = %cond_jump_then519, %cond_jump_then515
  %dynamic528 = load %Section*, %Section** %dynamic, align 8
  call void @put_dt(%Section* %dynamic528, i32 22, i64 0)
  br label %cond_end516

end_blockX:                                       ; preds = %cond_else_blockX573, %cond_then_block572, %cond_end570, %cond_then_block557
  store i32 1, i32* %i, align 4
  br label %loop_top_block577

cond_then_block557:                               ; preds = %cond_else_blockX, %cond_end11
  store i32 0, i32* %phnum, align 4
  br label %end_blockX

cond_else_blockX:                                 ; No predecessors!
  %eqtmp = icmp eq i32 %file_type556, 3
  br i1 %eqtmp, label %cond_then_block557, label %cond_else_blockX558

cond_else_blockX558:                              ; preds = %after_break, %cond_else_blockX, %cond_end11
  %eqtmp561 = icmp eq i32 %file_type556, 1
  br i1 %eqtmp561, label %cond_then_block559, label %cond_else_blockX560

after_break:                                      ; No predecessors!
  br label %cond_else_blockX558
  br label %cond_else_blockX560

cond_then_block559:                               ; preds = %cond_else_blockX558
  %s1562 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL563 = getelementptr inbounds %TCCState, %TCCState* %s1562, i32 0, i32 27
  %static_link564 = load i32, i32* %fieldLLL563, align 4
  %logical_denial565 = icmp eq i32 %static_link564, 0
  %castOOOO566 = zext i1 %logical_denial565 to i32
  %icmpA567 = icmp ne i32 %castOOOO566, 0
  br i1 %icmpA567, label %cond_jump_then568, label %cond_else_block569

cond_else_blockX560:                              ; preds = %after_break571, %cond_else_blockX558, %after_break
  %eqtmp574 = icmp eq i32 %file_type556, 2
  br i1 %eqtmp574, label %cond_then_block572, label %cond_else_blockX573

cond_jump_then568:                                ; preds = %cond_then_block559
  store i32 4, i32* %phnum, align 4
  br label %cond_end570

cond_else_block569:                               ; preds = %cond_then_block559
  store i32 2, i32* %phnum, align 4
  br label %cond_end570

cond_end570:                                      ; preds = %cond_else_block569, %cond_jump_then568
  br label %end_blockX

after_break571:                                   ; No predecessors!
  br label %cond_else_blockX560
  br label %cond_else_blockX573

cond_then_block572:                               ; preds = %cond_else_blockX560
  store i32 3, i32* %phnum, align 4
  br label %end_blockX

cond_else_blockX573:                              ; preds = %after_break575, %cond_else_blockX560, %after_break571
  br label %end_blockX

after_break575:                                   ; No predecessors!
  br label %cond_else_blockX573

loop_continue_top_block576:                       ; preds = %cond_end622
  %i687 = load i32, i32* %i, align 4
  %add688 = add i32 %i687, 1
  store i32 %add688, i32* %i, align 4
  %i689 = load i32, i32* %i, align 4
  %sub690 = sub i32 %i689, 1
  br label %loop_top_block577

loop_top_block577:                                ; preds = %loop_continue_top_block576, %end_blockX
  %i578 = load i32, i32* %i, align 4
  %s1579 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL580 = getelementptr inbounds %TCCState, %TCCState* %s1579, i32 0, i32 14
  %nb_sections581 = load i32, i32* %fieldLLL580, align 4
  %le582 = icmp slt i32 %i578, %nb_sections581
  br i1 %le582, label %cond_then_block583, label %cond_end_block584

cond_then_block583:                               ; preds = %loop_top_block577
  %s1585 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL586 = getelementptr inbounds %TCCState, %TCCState* %s1585, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL586, align 8
  %i587 = load i32, i32* %i, align 4
  %element_addressAB588 = load %Section**, %Section*** %fieldLLL586, align 8
  %element_addressXYXZY589 = getelementptr inbounds %Section*, %Section** %element_addressAB588, i32 %i587
  %load_element590 = load %Section*, %Section** %element_addressXYXZY589, align 8
  store %Section* %load_element590, %Section** %s, align 8
  %s591 = load %Section*, %Section** %s, align 8
  %strsec592 = load %Section*, %Section** %strsec, align 8
  %s593 = load %Section*, %Section** %s, align 8
  %fieldRRRROOU594 = getelementptr inbounds %Section, %Section* %s593, i32 0, i32 18
  %autocast595 = bitcast [1 x i8]* %fieldRRRROOU594 to i8*
  %fun_result596 = call i32 @put_elf_str(%Section* %strsec592, i8* %autocast595)
  %fieldTU597 = getelementptr inbounds %Section, %Section* %s591, i32 0, i32 3
  store i32 %fun_result596, i32* %fieldTU597, align 4
  %file_type600 = load i32, i32* %file_type, align 4
  %eq601 = icmp eq i32 %file_type600, 2
  store i1 %eq601, i1* %andand599, align 1
  br i1 %eq601, label %cond_jump_then602, label %cond_jump_end603

cond_end_block584:                                ; preds = %loop_top_block577
  %phnum691 = load i32, i32* %phnum, align 4
  %icastD692 = sext i32 %phnum691 to i64
  %mul693 = mul i64 %icastD692, 56
  %fun_result694 = call i8* @tcc_mallocz(i64 %mul693)
  %castAQ695 = bitcast i8* %fun_result694 to %come_anon96*
  store %come_anon96* %castAQ695, %come_anon96** %phdr, align 8
  %s1696 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL697 = getelementptr inbounds %TCCState, %TCCState* %s1696, i32 0, i32 33
  %output_format = load i32, i32* %fieldLLL697, align 4
  %eq698 = icmp eq i32 %output_format, 0
  br i1 %eq698, label %cond_jump_then699, label %cond_else_block700

cond_jump_then602:                                ; preds = %cond_then_block583
  %s604 = load %Section*, %Section** %s, align 8
  %fieldLLL605 = getelementptr inbounds %Section, %Section* %s604, i32 0, i32 5
  %sh_type = load i32, i32* %fieldLLL605, align 4
  %eq606 = icmp eq i32 %sh_type, 4
  %andand607 = and i1 %eq601, %eq606
  store i1 %andand607, i1* %andand599, align 1
  br label %cond_jump_end603

cond_jump_end603:                                 ; preds = %cond_jump_then602, %cond_then_block583
  %andand_result_value608 = load i1, i1* %andand599, align 1
  store i1 %andand_result_value608, i1* %andand598, align 1
  br i1 %andand_result_value608, label %cond_jump_then609, label %cond_jump_end610

cond_jump_then609:                                ; preds = %cond_jump_end603
  %s611 = load %Section*, %Section** %s, align 8
  %fieldLLL612 = getelementptr inbounds %Section, %Section* %s611, i32 0, i32 6
  %sh_flags = load i32, i32* %fieldLLL612, align 4
  %andtmp613 = and i32 %sh_flags, 2
  %logical_denial614 = icmp eq i32 %andtmp613, 0
  %castOOOO615 = zext i1 %logical_denial614 to i32
  %icmpA616 = icmp ne i32 %castOOOO615, 0
  %andand617 = and i1 %andand_result_value608, %icmpA616
  store i1 %andand617, i1* %andand598, align 1
  br label %cond_jump_end610

cond_jump_end610:                                 ; preds = %cond_jump_then609, %cond_jump_end603
  %andand_result_value618 = load i1, i1* %andand598, align 1
  br i1 %andand_result_value618, label %cond_jump_then619, label %cond_jump_elif0620

cond_jump_then619:                                ; preds = %cond_jump_end610
  %s1623 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL624 = getelementptr inbounds %TCCState, %TCCState* %s1623, i32 0, i32 13
  %sections625 = load %Section**, %Section*** %fieldLLL624, align 8
  %s626 = load %Section*, %Section** %s, align 8
  %fieldLLL627 = getelementptr inbounds %Section, %Section* %s626, i32 0, i32 7
  %sh_info = load i32, i32* %fieldLLL627, align 4
  %element_addressAB628 = load %Section**, %Section*** %fieldLLL624, align 8
  %element_addressXYXZY629 = getelementptr inbounds %Section*, %Section** %element_addressAB628, i32 %sh_info
  %load_element630 = load %Section*, %Section** %element_addressXYXZY629, align 8
  %fieldLLL631 = getelementptr inbounds %Section, %Section* %load_element630, i32 0, i32 6
  %sh_flags632 = load i32, i32* %fieldLLL631, align 4
  %andtmp633 = and i32 %sh_flags632, 2
  %icmpA634 = icmp ne i32 %andtmp633, 0
  br i1 %icmpA634, label %cond_jump_then635, label %cond_jump_elif0636

cond_jump_elif0620:                               ; preds = %cond_jump_end610
  %s1653 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL654 = getelementptr inbounds %TCCState, %TCCState* %s1653, i32 0, i32 42
  %do_debug655 = load i32, i32* %fieldLLL654, align 4
  %icmpA656 = icmp ne i32 %do_debug655, 0
  store i1 %icmpA656, i1* %oror652, align 1
  br i1 %icmpA656, label %cond_jump_end658, label %cond_jump_then657

cond_jump_elif_then0621:                          ; preds = %cond_jump_end673
  %s682 = load %Section*, %Section** %s, align 8
  %s683 = load %Section*, %Section** %s, align 8
  %fieldLLL684 = getelementptr inbounds %Section, %Section* %s683, i32 0, i32 0
  %data_offset685 = load i64, i64* %fieldLLL684, align 4
  %fieldTU686 = getelementptr inbounds %Section, %Section* %s682, i32 0, i32 10
  store i64 %data_offset685, i64* %fieldTU686, align 4
  br label %cond_end622

cond_end622:                                      ; preds = %cond_jump_elif_then0621, %cond_jump_end673, %cond_end638
  br label %loop_continue_top_block576

cond_jump_then635:                                ; preds = %cond_jump_then619
  %s1639 = load %TCCState*, %TCCState** %s1, align 8
  %s640 = load %Section*, %Section** %s, align 8
  %fun_result641 = call i32 @prepare_dynamic_rel(%TCCState* %s1639, %Section* %s640)
  br label %cond_end638

cond_jump_elif0636:                               ; preds = %cond_jump_then619
  %s1642 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL643 = getelementptr inbounds %TCCState, %TCCState* %s1642, i32 0, i32 42
  %do_debug = load i32, i32* %fieldLLL643, align 4
  %icmpA644 = icmp ne i32 %do_debug, 0
  br i1 %icmpA644, label %cond_jump_elif_then0637, label %cond_end638

cond_jump_elif_then0637:                          ; preds = %cond_jump_elif0636
  %s645 = load %Section*, %Section** %s, align 8
  %s646 = load %Section*, %Section** %s, align 8
  %fieldLLL647 = getelementptr inbounds %Section, %Section* %s646, i32 0, i32 0
  %data_offset648 = load i64, i64* %fieldLLL647, align 4
  %fieldTU649 = getelementptr inbounds %Section, %Section* %s645, i32 0, i32 10
  store i64 %data_offset648, i64* %fieldTU649, align 4
  br label %cond_end638

cond_end638:                                      ; preds = %cond_jump_elif_then0637, %cond_jump_elif0636, %cond_jump_then635
  br label %cond_end622

cond_jump_then657:                                ; preds = %cond_jump_elif0620
  %file_type659 = load i32, i32* %file_type, align 4
  %eq660 = icmp eq i32 %file_type659, 3
  %oror661 = or i1 %icmpA656, %eq660
  store i1 %oror661, i1* %oror652, align 1
  br label %cond_jump_end658

cond_jump_end658:                                 ; preds = %cond_jump_then657, %cond_jump_elif0620
  %oror_result_value662 = load i1, i1* %oror652, align 1
  store i1 %oror_result_value662, i1* %oror651, align 1
  br i1 %oror_result_value662, label %cond_jump_end664, label %cond_jump_then663

cond_jump_then663:                                ; preds = %cond_jump_end658
  %s665 = load %Section*, %Section** %s, align 8
  %fieldLLL666 = getelementptr inbounds %Section, %Section* %s665, i32 0, i32 6
  %sh_flags667 = load i32, i32* %fieldLLL666, align 4
  %andtmp668 = and i32 %sh_flags667, 2
  %icmpA669 = icmp ne i32 %andtmp668, 0
  %oror670 = or i1 %oror_result_value662, %icmpA669
  store i1 %oror670, i1* %oror651, align 1
  br label %cond_jump_end664

cond_jump_end664:                                 ; preds = %cond_jump_then663, %cond_jump_end658
  %oror_result_value671 = load i1, i1* %oror651, align 1
  store i1 %oror_result_value671, i1* %oror650, align 1
  br i1 %oror_result_value671, label %cond_jump_end673, label %cond_jump_then672

cond_jump_then672:                                ; preds = %cond_jump_end664
  %i674 = load i32, i32* %i, align 4
  %s1675 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL676 = getelementptr inbounds %TCCState, %TCCState* %s1675, i32 0, i32 14
  %nb_sections677 = load i32, i32* %fieldLLL676, align 4
  %sub678 = sub i32 %nb_sections677, 1
  %eq679 = icmp eq i32 %i674, %sub678
  %oror680 = or i1 %oror_result_value671, %eq679
  store i1 %oror680, i1* %oror650, align 1
  br label %cond_jump_end673

cond_jump_end673:                                 ; preds = %cond_jump_then672, %cond_jump_end664
  %oror_result_value681 = load i1, i1* %oror650, align 1
  br i1 %oror_result_value681, label %cond_jump_elif_then0621, label %cond_end622

cond_jump_then699:                                ; preds = %cond_end_block584
  %phnum702 = load i32, i32* %phnum, align 4
  %icastD703 = sext i32 %phnum702 to i64
  %mul704 = mul i64 %icastD703, 56
  %add705 = add i64 64, %mul704
  %icastM706 = trunc i64 %add705 to i32
  store i32 %icastM706, i32* %file_offset, align 4
  br label %cond_end701

cond_else_block700:                               ; preds = %cond_end_block584
  store i32 0, i32* %file_offset, align 4
  br label %cond_end701

cond_end701:                                      ; preds = %cond_else_block700, %cond_jump_then699
  %phnum707 = load i32, i32* %phnum, align 4
  %gt = icmp sgt i32 %phnum707, 0
  br i1 %gt, label %cond_jump_then708, label %cond_end709

cond_jump_then708:                                ; preds = %cond_end701
  %s1710 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL711 = getelementptr inbounds %TCCState, %TCCState* %s1710, i32 0, i32 32
  %has_text_addr = load i32, i32* %fieldLLL711, align 4
  %icmpA712 = icmp ne i32 %has_text_addr, 0
  br i1 %icmpA712, label %cond_jump_then713, label %cond_else_block714

cond_end709:                                      ; preds = %cond_end1105, %cond_end701
  store i32 1, i32* %i, align 4
  br label %loop_top_block1401

cond_jump_then713:                                ; preds = %cond_jump_then708
  %s1716 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL717 = getelementptr inbounds %TCCState, %TCCState* %s1716, i32 0, i32 31
  %text_addr = load i64, i64* %fieldLLL717, align 4
  store i64 %text_addr, i64* %addr, align 4
  %addr718 = load i64, i64* %addr, align 4
  %andtmp719 = and i64 %addr718, 4095
  %icastM720 = trunc i64 %andtmp719 to i32
  store i32 %icastM720, i32* %a_offset, align 4
  %file_offset721 = load i32, i32* %file_offset, align 4
  %andtmp722 = and i32 %file_offset721, 4095
  store i32 %andtmp722, i32* %p_offset, align 4
  %a_offset723 = load i32, i32* %a_offset, align 4
  %p_offset724 = load i32, i32* %p_offset, align 4
  %le725 = icmp slt i32 %a_offset723, %p_offset724
  br i1 %le725, label %cond_jump_then726, label %cond_end727

cond_else_block714:                               ; preds = %cond_jump_then708
  %file_type740 = load i32, i32* %file_type, align 4
  %eq741 = icmp eq i32 %file_type740, 2
  br i1 %eq741, label %cond_jump_then742, label %cond_else_block743

cond_end715:                                      ; preds = %cond_end744, %cond_end727
  store i64 0, i64* %rel_size, align 4
  store i64 0, i64* %rel_addr, align 4
  %phdr754 = load %come_anon96*, %come_anon96** %phdr, align 8
  %element_addressAB755 = load %come_anon96*, %come_anon96** %phdr, align 8
  %element_addressXYXZY756 = getelementptr inbounds %come_anon96, %come_anon96* %element_addressAB755, i32 0
  %load_element757 = load %come_anon96, %come_anon96* %element_addressXYXZY756, align 4
  store %come_anon96* %element_addressXYXZY756, %come_anon96** %ph, align 8
  %interp758 = load %Section*, %Section** %interp, align 8
  %icmpB759 = icmp ne %Section* %interp758, null
  br i1 %icmpB759, label %cond_jump_then760, label %cond_end761

cond_jump_then726:                                ; preds = %cond_jump_then713
  %a_offset728 = load i32, i32* %a_offset, align 4
  %add729 = add i32 %a_offset728, 4096
  store i32 %add729, i32* %a_offset, align 4
  %sub730 = sub i32 %add729, 4096
  br label %cond_end727

cond_end727:                                      ; preds = %cond_jump_then726, %cond_jump_then713
  %file_offset731 = load i32, i32* %file_offset, align 4
  %a_offset732 = load i32, i32* %a_offset, align 4
  %p_offset733 = load i32, i32* %p_offset, align 4
  %sub734 = sub i32 %a_offset732, %p_offset733
  %add735 = add i32 %file_offset731, %sub734
  store i32 %add735, i32* %file_offset, align 4
  %a_offset736 = load i32, i32* %a_offset, align 4
  %p_offset737 = load i32, i32* %p_offset, align 4
  %sub738 = sub i32 %a_offset736, %p_offset737
  %sub739 = sub i32 %add735, %sub738
  br label %cond_end715

cond_jump_then742:                                ; preds = %cond_else_block714
  store i64 0, i64* %addr, align 4
  br label %cond_end744

cond_else_block743:                               ; preds = %cond_else_block714
  store i64 134512640, i64* %addr, align 4
  br label %cond_end744

cond_end744:                                      ; preds = %cond_else_block743, %cond_jump_then742
  %addr745 = load i64, i64* %addr, align 4
  %file_offset746 = load i32, i32* %file_offset, align 4
  %andtmp747 = and i32 %file_offset746, 4095
  %icastD748 = sext i32 %andtmp747 to i64
  %add749 = add i64 %addr745, %icastD748
  store i64 %add749, i64* %addr, align 4
  %file_offset750 = load i32, i32* %file_offset, align 4
  %andtmp751 = and i32 %file_offset750, 4095
  %icastD752 = sext i32 %andtmp751 to i64
  %sub753 = sub i64 %add749, %icastD752
  br label %cond_end715

cond_jump_then760:                                ; preds = %cond_end715
  %ph762 = load %come_anon96*, %come_anon96** %ph, align 8
  %ptrToIntC763 = ptrtoint %come_anon96* %ph762 to i64
  %add764 = add i64 %ptrToIntC763, 56
  %intToPtrB765 = inttoptr i64 %add764 to %come_anon96*
  store %come_anon96* %intToPtrB765, %come_anon96** %ph, align 8
  %ph766 = load %come_anon96*, %come_anon96** %ph, align 8
  %ptrToIntI767 = ptrtoint %come_anon96* %ph766 to i64
  %sub768 = sub i64 %ptrToIntI767, 56
  %iintToPtrD769 = inttoptr i64 %sub768 to %come_anon96*
  br label %cond_end761

cond_end761:                                      ; preds = %cond_jump_then760, %cond_end715
  store i32 0, i32* %j, align 4
  br label %loop_top_block771

loop_continue_top_block770:                       ; preds = %cond_end1033
  %j1057 = load i32, i32* %j, align 4
  %add1058 = add i32 %j1057, 1
  store i32 %add1058, i32* %j, align 4
  %j1059 = load i32, i32* %j, align 4
  %sub1060 = sub i32 %j1059, 1
  br label %loop_top_block771

loop_top_block771:                                ; preds = %loop_continue_top_block770, %cond_end761
  %j772 = load i32, i32* %j, align 4
  %le773 = icmp slt i32 %j772, 2
  br i1 %le773, label %cond_then_block774, label %cond_end_block775

cond_then_block774:                               ; preds = %loop_top_block771
  %ph776 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU777 = getelementptr inbounds %come_anon96, %come_anon96* %ph776, i32 0, i32 0
  store i32 1, i32* %fieldTU777, align 4
  %j778 = load i32, i32* %j, align 4
  %eq779 = icmp eq i32 %j778, 0
  br i1 %eq779, label %cond_jump_then780, label %cond_else_block781

cond_end_block775:                                ; preds = %loop_top_block771
  %interp1061 = load %Section*, %Section** %interp, align 8
  %icmpB1062 = icmp ne %Section* %interp1061, null
  br i1 %icmpB1062, label %cond_jump_then1063, label %cond_end1064

cond_jump_then780:                                ; preds = %cond_then_block774
  %ph783 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU784 = getelementptr inbounds %come_anon96, %come_anon96* %ph783, i32 0, i32 1
  store i32 5, i32* %fieldTU784, align 4
  br label %cond_end782

cond_else_block781:                               ; preds = %cond_then_block774
  %ph785 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU786 = getelementptr inbounds %come_anon96, %come_anon96* %ph785, i32 0, i32 1
  store i32 6, i32* %fieldTU786, align 4
  br label %cond_end782

cond_end782:                                      ; preds = %cond_else_block781, %cond_jump_then780
  %ph787 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU788 = getelementptr inbounds %come_anon96, %come_anon96* %ph787, i32 0, i32 7
  store i64 4096, i64* %fieldTU788, align 4
  store i32 0, i32* %k, align 4
  br label %loop_top_block790

loop_continue_top_block789:                       ; preds = %cond_end_block803
  %k1003 = load i32, i32* %k, align 4
  %add1004 = add i32 %k1003, 1
  store i32 %add1004, i32* %k, align 4
  %k1005 = load i32, i32* %k, align 4
  %sub1006 = sub i32 %k1005, 1
  br label %loop_top_block790

loop_top_block790:                                ; preds = %loop_continue_top_block789, %cond_end782
  %k791 = load i32, i32* %k, align 4
  %le792 = icmp slt i32 %k791, 5
  br i1 %le792, label %cond_then_block793, label %cond_end_block794

cond_then_block793:                               ; preds = %loop_top_block790
  store i32 1, i32* %i, align 4
  br label %loop_top_block796

cond_end_block794:                                ; preds = %loop_top_block790
  %ph1007 = load %come_anon96*, %come_anon96** %ph, align 8
  %file_offset1008 = load i32, i32* %file_offset, align 4
  %ph1009 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldLLL1010 = getelementptr inbounds %come_anon96, %come_anon96* %ph1009, i32 0, i32 2
  %p_offset1011 = load i64, i64* %fieldLLL1010, align 4
  %icastD1012 = sext i32 %file_offset1008 to i64
  %sub1013 = sub i64 %icastD1012, %p_offset1011
  %fieldTU1014 = getelementptr inbounds %come_anon96, %come_anon96* %ph1007, i32 0, i32 5
  store i64 %sub1013, i64* %fieldTU1014, align 4
  %ph1015 = load %come_anon96*, %come_anon96** %ph, align 8
  %addr1016 = load i64, i64* %addr, align 4
  %ph1017 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldLLL1018 = getelementptr inbounds %come_anon96, %come_anon96* %ph1017, i32 0, i32 3
  %p_vaddr1019 = load i64, i64* %fieldLLL1018, align 4
  %sub1020 = sub i64 %addr1016, %p_vaddr1019
  %fieldTU1021 = getelementptr inbounds %come_anon96, %come_anon96* %ph1015, i32 0, i32 6
  store i64 %sub1020, i64* %fieldTU1021, align 4
  %ph1022 = load %come_anon96*, %come_anon96** %ph, align 8
  %ptrToIntC1023 = ptrtoint %come_anon96* %ph1022 to i64
  %add1024 = add i64 %ptrToIntC1023, 56
  %intToPtrB1025 = inttoptr i64 %add1024 to %come_anon96*
  store %come_anon96* %intToPtrB1025, %come_anon96** %ph, align 8
  %ph1026 = load %come_anon96*, %come_anon96** %ph, align 8
  %ptrToIntI1027 = ptrtoint %come_anon96* %ph1026 to i64
  %sub1028 = sub i64 %ptrToIntI1027, 56
  %iintToPtrD1029 = inttoptr i64 %sub1028 to %come_anon96*
  %j1030 = load i32, i32* %j, align 4
  %eq1031 = icmp eq i32 %j1030, 0
  br i1 %eq1031, label %cond_jump_then1032, label %cond_end1033

loop_continue_top_block795:                       ; preds = %cond_end986, %cond_jump_then891, %cond_jump_then886, %cond_jump_then877, %cond_jump_then868, %cond_jump_then841, %cond_jump_then828, %cond_jump_then821
  %i999 = load i32, i32* %i, align 4
  %add1000 = add i32 %i999, 1
  store i32 %add1000, i32* %i, align 4
  %i1001 = load i32, i32* %i, align 4
  %sub1002 = sub i32 %i1001, 1
  br label %loop_top_block796

loop_top_block796:                                ; preds = %loop_continue_top_block795, %cond_then_block793
  %i797 = load i32, i32* %i, align 4
  %s1798 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL799 = getelementptr inbounds %TCCState, %TCCState* %s1798, i32 0, i32 14
  %nb_sections800 = load i32, i32* %fieldLLL799, align 4
  %le801 = icmp slt i32 %i797, %nb_sections800
  br i1 %le801, label %cond_then_block802, label %cond_end_block803

cond_then_block802:                               ; preds = %loop_top_block796
  %s1804 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL805 = getelementptr inbounds %TCCState, %TCCState* %s1804, i32 0, i32 13
  %sections806 = load %Section**, %Section*** %fieldLLL805, align 8
  %i807 = load i32, i32* %i, align 4
  %element_addressAB808 = load %Section**, %Section*** %fieldLLL805, align 8
  %element_addressXYXZY809 = getelementptr inbounds %Section*, %Section** %element_addressAB808, i32 %i807
  %load_element810 = load %Section*, %Section** %element_addressXYXZY809, align 8
  store %Section* %load_element810, %Section** %s, align 8
  %j811 = load i32, i32* %j, align 4
  %eq812 = icmp eq i32 %j811, 0
  br i1 %eq812, label %cond_jump_then813, label %cond_else_block814

cond_end_block803:                                ; preds = %loop_top_block796
  br label %loop_continue_top_block789

cond_jump_then813:                                ; preds = %cond_then_block802
  %s816 = load %Section*, %Section** %s, align 8
  %fieldLLL817 = getelementptr inbounds %Section, %Section* %s816, i32 0, i32 6
  %sh_flags818 = load i32, i32* %fieldLLL817, align 4
  %andtmp819 = and i32 %sh_flags818, 3
  %not_eq820 = icmp ne i32 %andtmp819, 2
  br i1 %not_eq820, label %cond_jump_then821, label %cond_end822

cond_else_block814:                               ; preds = %cond_then_block802
  %s823 = load %Section*, %Section** %s, align 8
  %fieldLLL824 = getelementptr inbounds %Section, %Section* %s823, i32 0, i32 6
  %sh_flags825 = load i32, i32* %fieldLLL824, align 4
  %andtmp826 = and i32 %sh_flags825, 3
  %not_eq827 = icmp ne i32 %andtmp826, 3
  br i1 %not_eq827, label %cond_jump_then828, label %cond_end829

cond_end815:                                      ; preds = %cond_end829, %cond_end822
  %s831 = load %Section*, %Section** %s, align 8
  %interp832 = load %Section*, %Section** %interp, align 8
  %eq833 = icmp eq %Section* %s831, %interp832
  br i1 %eq833, label %cond_jump_then834, label %cond_jump_elif0835

cond_jump_then821:                                ; preds = %cond_jump_then813
  br label %loop_continue_top_block795

cond_end822:                                      ; preds = %after_continue, %cond_jump_then813
  br label %cond_end815

after_continue:                                   ; No predecessors!
  br label %cond_end822

cond_jump_then828:                                ; preds = %cond_else_block814
  br label %loop_continue_top_block795

cond_end829:                                      ; preds = %after_continue830, %cond_else_block814
  br label %cond_end815

after_continue830:                                ; No predecessors!
  br label %cond_end829

cond_jump_then834:                                ; preds = %cond_end815
  %k839 = load i32, i32* %k, align 4
  %not_eq840 = icmp ne i32 %k839, 0
  br i1 %not_eq840, label %cond_jump_then841, label %cond_end842

cond_jump_elif0835:                               ; preds = %cond_end815
  %s846 = load %Section*, %Section** %s, align 8
  %fieldLLL847 = getelementptr inbounds %Section, %Section* %s846, i32 0, i32 5
  %sh_type848 = load i32, i32* %fieldLLL847, align 4
  %eq849 = icmp eq i32 %sh_type848, 11
  store i1 %eq849, i1* %oror845, align 1
  br i1 %eq849, label %cond_jump_end851, label %cond_jump_then850

cond_jump_elif_then0836:                          ; preds = %cond_jump_end859
  %k866 = load i32, i32* %k, align 4
  %not_eq867 = icmp ne i32 %k866, 1
  br i1 %not_eq867, label %cond_jump_then868, label %cond_end869

cond_jump_elif1:                                  ; preds = %cond_jump_end859
  %s871 = load %Section*, %Section** %s, align 8
  %fieldLLL872 = getelementptr inbounds %Section, %Section* %s871, i32 0, i32 5
  %sh_type873 = load i32, i32* %fieldLLL872, align 4
  %eq874 = icmp eq i32 %sh_type873, 4
  br i1 %eq874, label %cond_jump_elif_then1, label %cond_jump_elif2

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  %k875 = load i32, i32* %k, align 4
  %not_eq876 = icmp ne i32 %k875, 2
  br i1 %not_eq876, label %cond_jump_then877, label %cond_end878

cond_jump_elif2:                                  ; preds = %cond_jump_elif1
  %s880 = load %Section*, %Section** %s, align 8
  %fieldLLL881 = getelementptr inbounds %Section, %Section* %s880, i32 0, i32 5
  %sh_type882 = load i32, i32* %fieldLLL881, align 4
  %eq883 = icmp eq i32 %sh_type882, 8
  br i1 %eq883, label %cond_jump_elif_then2, label %cond_else_block837

cond_jump_elif_then2:                             ; preds = %cond_jump_elif2
  %k884 = load i32, i32* %k, align 4
  %not_eq885 = icmp ne i32 %k884, 4
  br i1 %not_eq885, label %cond_jump_then886, label %cond_end887

cond_else_block837:                               ; preds = %cond_jump_elif2
  %k889 = load i32, i32* %k, align 4
  %not_eq890 = icmp ne i32 %k889, 3
  br i1 %not_eq890, label %cond_jump_then891, label %cond_end892

cond_end838:                                      ; preds = %cond_end892, %cond_end887, %cond_end878, %cond_end869, %cond_end842
  %section_order894 = load i32*, i32** %section_order, align 8
  %sh_order_index895 = load i32, i32* %sh_order_index, align 4
  %add896 = add i32 %sh_order_index895, 1
  store i32 %add896, i32* %sh_order_index, align 4
  %sh_order_index897 = load i32, i32* %sh_order_index, align 4
  %sub898 = sub i32 %sh_order_index897, 1
  %i899 = load i32, i32* %i, align 4
  %element_addressXYXY900 = getelementptr i32, i32* %section_order894, i32 %sub898
  store i32 %i899, i32* %element_addressXYXY900, align 4
  %addr901 = load i64, i64* %addr, align 4
  %icastM902 = trunc i64 %addr901 to i32
  store i32 %icastM902, i32* %tmp, align 4
  %addr903 = load i64, i64* %addr, align 4
  %s904 = load %Section*, %Section** %s, align 8
  %fieldLLL905 = getelementptr inbounds %Section, %Section* %s904, i32 0, i32 8
  %sh_addralign = load i32, i32* %fieldLLL905, align 4
  %icastD906 = sext i32 %sh_addralign to i64
  %add907 = add i64 %addr903, %icastD906
  %sub908 = sub i64 %add907, 1
  %s909 = load %Section*, %Section** %s, align 8
  %fieldLLL910 = getelementptr inbounds %Section, %Section* %s909, i32 0, i32 8
  %sh_addralign911 = load i32, i32* %fieldLLL910, align 4
  %sub912 = sub i32 %sh_addralign911, 1
  %xortmp = xor i32 %sub912, -1
  %icastD913 = sext i32 %xortmp to i64
  %andtmp914 = and i64 %sub908, %icastD913
  store i64 %andtmp914, i64* %addr, align 4
  %file_offset915 = load i32, i32* %file_offset, align 4
  %addr916 = load i64, i64* %addr, align 4
  %tmp917 = load i32, i32* %tmp, align 4
  %icastD918 = sext i32 %tmp917 to i64
  %sub919 = sub i64 %addr916, %icastD918
  %icastD920 = sext i32 %file_offset915 to i64
  %add921 = add i64 %icastD920, %sub919
  %icastM922 = trunc i64 %add921 to i32
  store i32 %icastM922, i32* %file_offset, align 4
  %addr923 = load i64, i64* %addr, align 4
  %tmp924 = load i32, i32* %tmp, align 4
  %icastD925 = sext i32 %tmp924 to i64
  %sub926 = sub i64 %addr923, %icastD925
  %icastD927 = sext i32 %icastM922 to i64
  %sub928 = sub i64 %icastD927, %sub926
  %s929 = load %Section*, %Section** %s, align 8
  %file_offset930 = load i32, i32* %file_offset, align 4
  %icastD931 = sext i32 %file_offset930 to i64
  %fieldTU932 = getelementptr inbounds %Section, %Section* %s929, i32 0, i32 12
  store i64 %icastD931, i64* %fieldTU932, align 4
  %s933 = load %Section*, %Section** %s, align 8
  %addr934 = load i64, i64* %addr, align 4
  %fieldTU935 = getelementptr inbounds %Section, %Section* %s933, i32 0, i32 11
  store i64 %addr934, i64* %fieldTU935, align 4
  %ph936 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldLLL937 = getelementptr inbounds %come_anon96, %come_anon96* %ph936, i32 0, i32 2
  %p_offset938 = load i64, i64* %fieldLLL937, align 4
  %eq939 = icmp eq i64 %p_offset938, 0
  br i1 %eq939, label %cond_jump_then940, label %cond_end941

cond_jump_then841:                                ; preds = %cond_jump_then834
  br label %loop_continue_top_block795

cond_end842:                                      ; preds = %after_continue843, %cond_jump_then834
  br label %cond_end838

after_continue843:                                ; No predecessors!
  br label %cond_end842

cond_jump_then850:                                ; preds = %cond_jump_elif0835
  %s852 = load %Section*, %Section** %s, align 8
  %fieldLLL853 = getelementptr inbounds %Section, %Section* %s852, i32 0, i32 5
  %sh_type854 = load i32, i32* %fieldLLL853, align 4
  %eq855 = icmp eq i32 %sh_type854, 3
  %oror856 = or i1 %eq849, %eq855
  store i1 %oror856, i1* %oror845, align 1
  br label %cond_jump_end851

cond_jump_end851:                                 ; preds = %cond_jump_then850, %cond_jump_elif0835
  %oror_result_value857 = load i1, i1* %oror845, align 1
  store i1 %oror_result_value857, i1* %oror844, align 1
  br i1 %oror_result_value857, label %cond_jump_end859, label %cond_jump_then858

cond_jump_then858:                                ; preds = %cond_jump_end851
  %s860 = load %Section*, %Section** %s, align 8
  %fieldLLL861 = getelementptr inbounds %Section, %Section* %s860, i32 0, i32 5
  %sh_type862 = load i32, i32* %fieldLLL861, align 4
  %eq863 = icmp eq i32 %sh_type862, 5
  %oror864 = or i1 %oror_result_value857, %eq863
  store i1 %oror864, i1* %oror844, align 1
  br label %cond_jump_end859

cond_jump_end859:                                 ; preds = %cond_jump_then858, %cond_jump_end851
  %oror_result_value865 = load i1, i1* %oror844, align 1
  br i1 %oror_result_value865, label %cond_jump_elif_then0836, label %cond_jump_elif1

cond_jump_then868:                                ; preds = %cond_jump_elif_then0836
  br label %loop_continue_top_block795

cond_end869:                                      ; preds = %after_continue870, %cond_jump_elif_then0836
  br label %cond_end838

after_continue870:                                ; No predecessors!
  br label %cond_end869

cond_jump_then877:                                ; preds = %cond_jump_elif_then1
  br label %loop_continue_top_block795

cond_end878:                                      ; preds = %after_continue879, %cond_jump_elif_then1
  br label %cond_end838

after_continue879:                                ; No predecessors!
  br label %cond_end878

cond_jump_then886:                                ; preds = %cond_jump_elif_then2
  br label %loop_continue_top_block795

cond_end887:                                      ; preds = %after_continue888, %cond_jump_elif_then2
  br label %cond_end838

after_continue888:                                ; No predecessors!
  br label %cond_end887

cond_jump_then891:                                ; preds = %cond_else_block837
  br label %loop_continue_top_block795

cond_end892:                                      ; preds = %after_continue893, %cond_else_block837
  br label %cond_end838

after_continue893:                                ; No predecessors!
  br label %cond_end892

cond_jump_then940:                                ; preds = %cond_end838
  %ph942 = load %come_anon96*, %come_anon96** %ph, align 8
  %file_offset943 = load i32, i32* %file_offset, align 4
  %icastD944 = sext i32 %file_offset943 to i64
  %fieldTU945 = getelementptr inbounds %come_anon96, %come_anon96* %ph942, i32 0, i32 2
  store i64 %icastD944, i64* %fieldTU945, align 4
  %ph946 = load %come_anon96*, %come_anon96** %ph, align 8
  %addr947 = load i64, i64* %addr, align 4
  %fieldTU948 = getelementptr inbounds %come_anon96, %come_anon96* %ph946, i32 0, i32 3
  store i64 %addr947, i64* %fieldTU948, align 4
  %ph949 = load %come_anon96*, %come_anon96** %ph, align 8
  %ph950 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldLLL951 = getelementptr inbounds %come_anon96, %come_anon96* %ph950, i32 0, i32 3
  %p_vaddr = load i64, i64* %fieldLLL951, align 4
  %fieldTU952 = getelementptr inbounds %come_anon96, %come_anon96* %ph949, i32 0, i32 4
  store i64 %p_vaddr, i64* %fieldTU952, align 4
  br label %cond_end941

cond_end941:                                      ; preds = %cond_jump_then940, %cond_end838
  %s953 = load %Section*, %Section** %s, align 8
  %fieldLLL954 = getelementptr inbounds %Section, %Section* %s953, i32 0, i32 5
  %sh_type955 = load i32, i32* %fieldLLL954, align 4
  %eq956 = icmp eq i32 %sh_type955, 4
  br i1 %eq956, label %cond_jump_then957, label %cond_end958

cond_jump_then957:                                ; preds = %cond_end941
  %rel_size959 = load i64, i64* %rel_size, align 4
  %eq960 = icmp eq i64 %rel_size959, 0
  br i1 %eq960, label %cond_jump_then961, label %cond_end962

cond_end958:                                      ; preds = %cond_end962, %cond_end941
  %addr972 = load i64, i64* %addr, align 4
  %s973 = load %Section*, %Section** %s, align 8
  %fieldLLL974 = getelementptr inbounds %Section, %Section* %s973, i32 0, i32 10
  %sh_size975 = load i64, i64* %fieldLLL974, align 4
  %add976 = add i64 %addr972, %sh_size975
  store i64 %add976, i64* %addr, align 4
  %s977 = load %Section*, %Section** %s, align 8
  %fieldLLL978 = getelementptr inbounds %Section, %Section* %s977, i32 0, i32 10
  %sh_size979 = load i64, i64* %fieldLLL978, align 4
  %sub980 = sub i64 %add976, %sh_size979
  %s981 = load %Section*, %Section** %s, align 8
  %fieldLLL982 = getelementptr inbounds %Section, %Section* %s981, i32 0, i32 5
  %sh_type983 = load i32, i32* %fieldLLL982, align 4
  %not_eq984 = icmp ne i32 %sh_type983, 8
  br i1 %not_eq984, label %cond_jump_then985, label %cond_end986

cond_jump_then961:                                ; preds = %cond_jump_then957
  %addr963 = load i64, i64* %addr, align 4
  store i64 %addr963, i64* %rel_addr, align 4
  br label %cond_end962

cond_end962:                                      ; preds = %cond_jump_then961, %cond_jump_then957
  %rel_size964 = load i64, i64* %rel_size, align 4
  %s965 = load %Section*, %Section** %s, align 8
  %fieldLLL966 = getelementptr inbounds %Section, %Section* %s965, i32 0, i32 10
  %sh_size = load i64, i64* %fieldLLL966, align 4
  %add967 = add i64 %rel_size964, %sh_size
  store i64 %add967, i64* %rel_size, align 4
  %s968 = load %Section*, %Section** %s, align 8
  %fieldLLL969 = getelementptr inbounds %Section, %Section* %s968, i32 0, i32 10
  %sh_size970 = load i64, i64* %fieldLLL969, align 4
  %sub971 = sub i64 %add967, %sh_size970
  br label %cond_end958

cond_jump_then985:                                ; preds = %cond_end958
  %file_offset987 = load i32, i32* %file_offset, align 4
  %s988 = load %Section*, %Section** %s, align 8
  %fieldLLL989 = getelementptr inbounds %Section, %Section* %s988, i32 0, i32 10
  %sh_size990 = load i64, i64* %fieldLLL989, align 4
  %icastD991 = sext i32 %file_offset987 to i64
  %add992 = add i64 %icastD991, %sh_size990
  %icastM993 = trunc i64 %add992 to i32
  store i32 %icastM993, i32* %file_offset, align 4
  %s994 = load %Section*, %Section** %s, align 8
  %fieldLLL995 = getelementptr inbounds %Section, %Section* %s994, i32 0, i32 10
  %sh_size996 = load i64, i64* %fieldLLL995, align 4
  %icastD997 = sext i32 %icastM993 to i64
  %sub998 = sub i64 %icastD997, %sh_size996
  br label %cond_end986

cond_end986:                                      ; preds = %cond_jump_then985, %cond_end958
  br label %loop_continue_top_block795

cond_jump_then1032:                               ; preds = %cond_end_block794
  %s11034 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1035 = getelementptr inbounds %TCCState, %TCCState* %s11034, i32 0, i32 33
  %output_format1036 = load i32, i32* %fieldLLL1035, align 4
  %eq1037 = icmp eq i32 %output_format1036, 0
  br i1 %eq1037, label %cond_jump_then1038, label %cond_else_block1039

cond_end1033:                                     ; preds = %cond_end1040, %cond_end_block794
  br label %loop_continue_top_block770

cond_jump_then1038:                               ; preds = %cond_jump_then1032
  %addr1041 = load i64, i64* %addr, align 4
  %andtmp1042 = and i64 %addr1041, 4095
  %not_eq1043 = icmp ne i64 %andtmp1042, 0
  br i1 %not_eq1043, label %cond_jump_then1044, label %cond_end1045

cond_else_block1039:                              ; preds = %cond_jump_then1032
  %addr1049 = load i64, i64* %addr, align 4
  %add1050 = add i64 %addr1049, 4096
  %sub1051 = sub i64 %add1050, 1
  %andtmp1052 = and i64 %sub1051, -4096
  store i64 %andtmp1052, i64* %addr, align 4
  %file_offset1053 = load i32, i32* %file_offset, align 4
  %add1054 = add i32 %file_offset1053, 4096
  %sub1055 = sub i32 %add1054, 1
  %andtmp1056 = and i32 %sub1055, -4096
  store i32 %andtmp1056, i32* %file_offset, align 4
  br label %cond_end1040

cond_end1040:                                     ; preds = %cond_else_block1039, %cond_end1045
  br label %cond_end1033

cond_jump_then1044:                               ; preds = %cond_jump_then1038
  %addr1046 = load i64, i64* %addr, align 4
  %add1047 = add i64 %addr1046, 4096
  store i64 %add1047, i64* %addr, align 4
  %sub1048 = sub i64 %add1047, 4096
  br label %cond_end1045

cond_end1045:                                     ; preds = %cond_jump_then1044, %cond_jump_then1038
  br label %cond_end1040

cond_jump_then1063:                               ; preds = %cond_end_block775
  %phdr1065 = load %come_anon96*, %come_anon96** %phdr, align 8
  %element_addressAB1066 = load %come_anon96*, %come_anon96** %phdr, align 8
  %element_addressXYXZY1067 = getelementptr inbounds %come_anon96, %come_anon96* %element_addressAB1066, i32 0
  %load_element1068 = load %come_anon96, %come_anon96* %element_addressXYXZY1067, align 4
  store %come_anon96* %element_addressXYXZY1067, %come_anon96** %ph, align 8
  %ph1069 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU1070 = getelementptr inbounds %come_anon96, %come_anon96* %ph1069, i32 0, i32 0
  store i32 3, i32* %fieldTU1070, align 4
  %ph1071 = load %come_anon96*, %come_anon96** %ph, align 8
  %interp1072 = load %Section*, %Section** %interp, align 8
  %fieldLLL1073 = getelementptr inbounds %Section, %Section* %interp1072, i32 0, i32 12
  %sh_offset = load i64, i64* %fieldLLL1073, align 4
  %fieldTU1074 = getelementptr inbounds %come_anon96, %come_anon96* %ph1071, i32 0, i32 2
  store i64 %sh_offset, i64* %fieldTU1074, align 4
  %ph1075 = load %come_anon96*, %come_anon96** %ph, align 8
  %interp1076 = load %Section*, %Section** %interp, align 8
  %fieldLLL1077 = getelementptr inbounds %Section, %Section* %interp1076, i32 0, i32 11
  %sh_addr = load i64, i64* %fieldLLL1077, align 4
  %fieldTU1078 = getelementptr inbounds %come_anon96, %come_anon96* %ph1075, i32 0, i32 3
  store i64 %sh_addr, i64* %fieldTU1078, align 4
  %ph1079 = load %come_anon96*, %come_anon96** %ph, align 8
  %ph1080 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldLLL1081 = getelementptr inbounds %come_anon96, %come_anon96* %ph1080, i32 0, i32 3
  %p_vaddr1082 = load i64, i64* %fieldLLL1081, align 4
  %fieldTU1083 = getelementptr inbounds %come_anon96, %come_anon96* %ph1079, i32 0, i32 4
  store i64 %p_vaddr1082, i64* %fieldTU1083, align 4
  %ph1084 = load %come_anon96*, %come_anon96** %ph, align 8
  %interp1085 = load %Section*, %Section** %interp, align 8
  %fieldLLL1086 = getelementptr inbounds %Section, %Section* %interp1085, i32 0, i32 10
  %sh_size1087 = load i64, i64* %fieldLLL1086, align 4
  %fieldTU1088 = getelementptr inbounds %come_anon96, %come_anon96* %ph1084, i32 0, i32 5
  store i64 %sh_size1087, i64* %fieldTU1088, align 4
  %ph1089 = load %come_anon96*, %come_anon96** %ph, align 8
  %interp1090 = load %Section*, %Section** %interp, align 8
  %fieldLLL1091 = getelementptr inbounds %Section, %Section* %interp1090, i32 0, i32 10
  %sh_size1092 = load i64, i64* %fieldLLL1091, align 4
  %fieldTU1093 = getelementptr inbounds %come_anon96, %come_anon96* %ph1089, i32 0, i32 6
  store i64 %sh_size1092, i64* %fieldTU1093, align 4
  %ph1094 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU1095 = getelementptr inbounds %come_anon96, %come_anon96* %ph1094, i32 0, i32 1
  store i32 4, i32* %fieldTU1095, align 4
  %ph1096 = load %come_anon96*, %come_anon96** %ph, align 8
  %interp1097 = load %Section*, %Section** %interp, align 8
  %fieldLLL1098 = getelementptr inbounds %Section, %Section* %interp1097, i32 0, i32 8
  %sh_addralign1099 = load i32, i32* %fieldLLL1098, align 4
  %icastD1100 = sext i32 %sh_addralign1099 to i64
  %fieldTU1101 = getelementptr inbounds %come_anon96, %come_anon96* %ph1096, i32 0, i32 7
  store i64 %icastD1100, i64* %fieldTU1101, align 4
  br label %cond_end1064

cond_end1064:                                     ; preds = %cond_jump_then1063, %cond_end_block775
  %dynamic1102 = load %Section*, %Section** %dynamic, align 8
  %icmpB1103 = icmp ne %Section* %dynamic1102, null
  br i1 %icmpB1103, label %cond_jump_then1104, label %cond_end1105

cond_jump_then1104:                               ; preds = %cond_end1064
  %phdr1107 = load %come_anon96*, %come_anon96** %phdr, align 8
  %phnum1108 = load i32, i32* %phnum, align 4
  %sub1109 = sub i32 %phnum1108, 1
  %element_addressAB1110 = load %come_anon96*, %come_anon96** %phdr, align 8
  %element_addressXYXZY1111 = getelementptr inbounds %come_anon96, %come_anon96* %element_addressAB1110, i32 %sub1109
  %load_element1112 = load %come_anon96, %come_anon96* %element_addressXYXZY1111, align 4
  store %come_anon96* %element_addressXYXZY1111, %come_anon96** %ph, align 8
  %ph1113 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU1114 = getelementptr inbounds %come_anon96, %come_anon96* %ph1113, i32 0, i32 0
  store i32 2, i32* %fieldTU1114, align 4
  %ph1115 = load %come_anon96*, %come_anon96** %ph, align 8
  %dynamic1116 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL1117 = getelementptr inbounds %Section, %Section* %dynamic1116, i32 0, i32 12
  %sh_offset1118 = load i64, i64* %fieldLLL1117, align 4
  %fieldTU1119 = getelementptr inbounds %come_anon96, %come_anon96* %ph1115, i32 0, i32 2
  store i64 %sh_offset1118, i64* %fieldTU1119, align 4
  %ph1120 = load %come_anon96*, %come_anon96** %ph, align 8
  %dynamic1121 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL1122 = getelementptr inbounds %Section, %Section* %dynamic1121, i32 0, i32 11
  %sh_addr1123 = load i64, i64* %fieldLLL1122, align 4
  %fieldTU1124 = getelementptr inbounds %come_anon96, %come_anon96* %ph1120, i32 0, i32 3
  store i64 %sh_addr1123, i64* %fieldTU1124, align 4
  %ph1125 = load %come_anon96*, %come_anon96** %ph, align 8
  %ph1126 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldLLL1127 = getelementptr inbounds %come_anon96, %come_anon96* %ph1126, i32 0, i32 3
  %p_vaddr1128 = load i64, i64* %fieldLLL1127, align 4
  %fieldTU1129 = getelementptr inbounds %come_anon96, %come_anon96* %ph1125, i32 0, i32 4
  store i64 %p_vaddr1128, i64* %fieldTU1129, align 4
  %ph1130 = load %come_anon96*, %come_anon96** %ph, align 8
  %dynamic1131 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL1132 = getelementptr inbounds %Section, %Section* %dynamic1131, i32 0, i32 10
  %sh_size1133 = load i64, i64* %fieldLLL1132, align 4
  %fieldTU1134 = getelementptr inbounds %come_anon96, %come_anon96* %ph1130, i32 0, i32 5
  store i64 %sh_size1133, i64* %fieldTU1134, align 4
  %ph1135 = load %come_anon96*, %come_anon96** %ph, align 8
  %dynamic1136 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL1137 = getelementptr inbounds %Section, %Section* %dynamic1136, i32 0, i32 10
  %sh_size1138 = load i64, i64* %fieldLLL1137, align 4
  %fieldTU1139 = getelementptr inbounds %come_anon96, %come_anon96* %ph1135, i32 0, i32 6
  store i64 %sh_size1138, i64* %fieldTU1139, align 4
  %ph1140 = load %come_anon96*, %come_anon96** %ph, align 8
  %fieldTU1141 = getelementptr inbounds %come_anon96, %come_anon96* %ph1140, i32 0, i32 1
  store i32 6, i32* %fieldTU1141, align 4
  %ph1142 = load %come_anon96*, %come_anon96** %ph, align 8
  %dynamic1143 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL1144 = getelementptr inbounds %Section, %Section* %dynamic1143, i32 0, i32 8
  %sh_addralign1145 = load i32, i32* %fieldLLL1144, align 4
  %icastD1146 = sext i32 %sh_addralign1145 to i64
  %fieldTU1147 = getelementptr inbounds %come_anon96, %come_anon96* %ph1142, i32 0, i32 7
  store i64 %icastD1146, i64* %fieldTU1147, align 4
  %s11148 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1149 = getelementptr inbounds %TCCState, %TCCState* %s11148, i32 0, i32 17
  %got = load %Section*, %Section** %fieldLLL1149, align 8
  %fieldLLL1150 = getelementptr inbounds %Section, %Section* %got, i32 0, i32 1
  %data1151 = load i8*, i8** %fieldLLL1150, align 8
  %dynamic1152 = load %Section*, %Section** %dynamic, align 8
  %fieldLLL1153 = getelementptr inbounds %Section, %Section* %dynamic1152, i32 0, i32 11
  %sh_addr1154 = load i64, i64* %fieldLLL1153, align 4
  %icastM1155 = trunc i64 %sh_addr1154 to i32
  call void @put32(i8* %data1151, i32 %icastM1155)
  %file_type1157 = load i32, i32* %file_type, align 4
  %eq1158 = icmp eq i32 %file_type1157, 1
  store i1 %eq1158, i1* %oror1156, align 1
  br i1 %eq1158, label %cond_jump_end1160, label %cond_jump_then1159

cond_end1105:                                     ; preds = %cond_end1391, %cond_end1064
  %ehdr1394 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 9
  store i16 56, i16* %fieldTTT, align 2
  %ehdr1395 = load %come_anon84, %come_anon84* %ehdr, align 4
  %phnum1396 = load i32, i32* %phnum, align 4
  %icastG = trunc i32 %phnum1396 to i16
  %fieldTTT1397 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 10
  store i16 %icastG, i16* %fieldTTT1397, align 2
  %ehdr1398 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1399 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 5
  store i64 64, i64* %fieldTTT1399, align 4
  br label %cond_end709

cond_jump_then1159:                               ; preds = %cond_jump_then1104
  %file_type1161 = load i32, i32* %file_type, align 4
  %eq1162 = icmp eq i32 %file_type1161, 2
  %oror1163 = or i1 %eq1158, %eq1162
  store i1 %oror1163, i1* %oror1156, align 1
  br label %cond_jump_end1160

cond_jump_end1160:                                ; preds = %cond_jump_then1159, %cond_jump_then1104
  %oror_result_value1164 = load i1, i1* %oror1156, align 1
  br i1 %oror_result_value1164, label %cond_jump_then1165, label %cond_end1166

cond_jump_then1165:                               ; preds = %cond_jump_end1160
  %s11167 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1168 = getelementptr inbounds %TCCState, %TCCState* %s11167, i32 0, i32 18
  %plt1169 = load %Section*, %Section** %fieldLLL1168, align 8
  %fieldLLL1170 = getelementptr inbounds %Section, %Section* %plt1169, i32 0, i32 1
  %data1171 = load i8*, i8** %fieldLLL1170, align 8
  store i8* %data1171, i8** %p, align 8
  %p1172 = load i8*, i8** %p, align 8
  %s11173 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1174 = getelementptr inbounds %TCCState, %TCCState* %s11173, i32 0, i32 18
  %plt1175 = load %Section*, %Section** %fieldLLL1174, align 8
  %fieldLLL1176 = getelementptr inbounds %Section, %Section* %plt1175, i32 0, i32 0
  %data_offset1177 = load i64, i64* %fieldLLL1176, align 4
  %ptrToIntC1178 = ptrtoint i8* %p1172 to i64
  %mul1179 = mul i64 %data_offset1177, 1
  %add1180 = add i64 %ptrToIntC1178, %mul1179
  %intToPtrB1181 = inttoptr i64 %add1180 to i8*
  store i8* %intToPtrB1181, i8** %p_end, align 8
  %p1182 = load i8*, i8** %p, align 8
  %p_end1183 = load i8*, i8** %p_end, align 8
  %le1184 = icmp ult i8* %p1182, %p_end1183
  br i1 %le1184, label %cond_jump_then1185, label %cond_end1186

cond_end1166:                                     ; preds = %cond_end1186, %cond_jump_end1160
  %s11270 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1271 = getelementptr inbounds %TCCState, %TCCState* %s11270, i32 0, i32 23
  %dynsym1272 = load %Section*, %Section** %fieldLLL1271, align 8
  %fieldLLL1273 = getelementptr inbounds %Section, %Section* %dynsym1272, i32 0, i32 1
  %data1274 = load i8*, i8** %fieldLLL1273, align 8
  %s11275 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1276 = getelementptr inbounds %TCCState, %TCCState* %s11275, i32 0, i32 23
  %dynsym1277 = load %Section*, %Section** %fieldLLL1276, align 8
  %fieldLLL1278 = getelementptr inbounds %Section, %Section* %dynsym1277, i32 0, i32 0
  %data_offset1279 = load i64, i64* %fieldLLL1278, align 4
  %ptrToIntC1280 = ptrtoint i8* %data1274 to i64
  %mul1281 = mul i64 %data_offset1279, 1
  %add1282 = add i64 %ptrToIntC1280, %mul1281
  %intToPtrB1283 = inttoptr i64 %add1282 to i8*
  %castAQ1284 = bitcast i8* %intToPtrB1283 to %come_anon88*
  store %come_anon88* %castAQ1284, %come_anon88** %sym_end1106, align 8
  %s11285 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1286 = getelementptr inbounds %TCCState, %TCCState* %s11285, i32 0, i32 23
  %dynsym1287 = load %Section*, %Section** %fieldLLL1286, align 8
  %fieldLLL1288 = getelementptr inbounds %Section, %Section* %dynsym1287, i32 0, i32 1
  %data1289 = load i8*, i8** %fieldLLL1288, align 8
  %castAQ1290 = bitcast i8* %data1289 to %come_anon88*
  %ptrToIntC1291 = ptrtoint %come_anon88* %castAQ1290 to i64
  %add1292 = add i64 %ptrToIntC1291, 24
  %intToPtrB1293 = inttoptr i64 %add1292 to %come_anon88*
  store %come_anon88* %intToPtrB1293, %come_anon88** %sym, align 8
  br label %loop_top_block1295

cond_jump_then1185:                               ; preds = %cond_jump_then1165
  %s11187 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1188 = getelementptr inbounds %TCCState, %TCCState* %s11187, i32 0, i32 17
  %got1189 = load %Section*, %Section** %fieldLLL1188, align 8
  %fieldLLL1190 = getelementptr inbounds %Section, %Section* %got1189, i32 0, i32 11
  %sh_addr1191 = load i64, i64* %fieldLLL1190, align 4
  %s11192 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1193 = getelementptr inbounds %TCCState, %TCCState* %s11192, i32 0, i32 18
  %plt1194 = load %Section*, %Section** %fieldLLL1193, align 8
  %fieldLLL1195 = getelementptr inbounds %Section, %Section* %plt1194, i32 0, i32 11
  %sh_addr1196 = load i64, i64* %fieldLLL1195, align 4
  %sub1197 = sub i64 %sh_addr1191, %sh_addr1196
  %sub1198 = sub i64 %sub1197, 6
  %icastM1199 = trunc i64 %sub1198 to i32
  store i32 %icastM1199, i32* %x, align 4
  %p1200 = load i8*, i8** %p, align 8
  %ptrToIntC1201 = ptrtoint i8* %p1200 to i64
  %add1202 = add i64 %ptrToIntC1201, 2
  %intToPtrB1203 = inttoptr i64 %add1202 to i8*
  %p1204 = load i8*, i8** %p, align 8
  %ptrToIntC1205 = ptrtoint i8* %p1204 to i64
  %add1206 = add i64 %ptrToIntC1205, 2
  %intToPtrB1207 = inttoptr i64 %add1206 to i8*
  %fun_result1208 = call i32 @get32(i8* %intToPtrB1207)
  %x1209 = load i32, i32* %x, align 4
  %add1210 = add i32 %fun_result1208, %x1209
  call void @put32(i8* %intToPtrB1203, i32 %add1210)
  %p1211 = load i8*, i8** %p, align 8
  %ptrToIntC1212 = ptrtoint i8* %p1211 to i64
  %add1213 = add i64 %ptrToIntC1212, 8
  %intToPtrB1214 = inttoptr i64 %add1213 to i8*
  %p1215 = load i8*, i8** %p, align 8
  %ptrToIntC1216 = ptrtoint i8* %p1215 to i64
  %add1217 = add i64 %ptrToIntC1216, 8
  %intToPtrB1218 = inttoptr i64 %add1217 to i8*
  %fun_result1219 = call i32 @get32(i8* %intToPtrB1218)
  %x1220 = load i32, i32* %x, align 4
  %add1221 = add i32 %fun_result1219, %x1220
  %sub1222 = sub i32 %add1221, 6
  call void @put32(i8* %intToPtrB1214, i32 %sub1222)
  %p1223 = load i8*, i8** %p, align 8
  %ptrToIntC1224 = ptrtoint i8* %p1223 to i64
  %add1225 = add i64 %ptrToIntC1224, 16
  %intToPtrB1226 = inttoptr i64 %add1225 to i8*
  store i8* %intToPtrB1226, i8** %p, align 8
  %ptrToIntI1227 = ptrtoint i8* %intToPtrB1226 to i64
  %sub1228 = sub i64 %ptrToIntI1227, 16
  %iintToPtrD1229 = inttoptr i64 %sub1228 to i8*
  br label %loop_top_block1230

cond_end1186:                                     ; preds = %cond_end_block1235, %cond_jump_then1165
  br label %cond_end1166

loop_top_block1230:                               ; preds = %cond_then_block1234, %cond_jump_then1185
  %p1231 = load i8*, i8** %p, align 8
  %p_end1232 = load i8*, i8** %p_end, align 8
  %le1233 = icmp ult i8* %p1231, %p_end1232
  br i1 %le1233, label %cond_then_block1234, label %cond_end_block1235

cond_then_block1234:                              ; preds = %loop_top_block1230
  %p1236 = load i8*, i8** %p, align 8
  %ptrToIntC1237 = ptrtoint i8* %p1236 to i64
  %add1238 = add i64 %ptrToIntC1237, 2
  %intToPtrB1239 = inttoptr i64 %add1238 to i8*
  %p1240 = load i8*, i8** %p, align 8
  %ptrToIntC1241 = ptrtoint i8* %p1240 to i64
  %add1242 = add i64 %ptrToIntC1241, 2
  %intToPtrB1243 = inttoptr i64 %add1242 to i8*
  %fun_result1244 = call i32 @get32(i8* %intToPtrB1243)
  %x1245 = load i32, i32* %x, align 4
  %add1246 = add i32 %fun_result1244, %x1245
  %s11247 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1248 = getelementptr inbounds %TCCState, %TCCState* %s11247, i32 0, i32 18
  %plt1249 = load %Section*, %Section** %fieldLLL1248, align 8
  %fieldLLL1250 = getelementptr inbounds %Section, %Section* %plt1249, i32 0, i32 1
  %data1251 = load i8*, i8** %fieldLLL1250, align 8
  %ptrToIntC1252 = ptrtoint i8* %data1251 to i64
  %sext1253 = sext i32 %add1246 to i64
  %mul1254 = mul i64 %sext1253, 1
  %add1255 = add i64 %ptrToIntC1252, %mul1254
  %intToPtrB1256 = inttoptr i64 %add1255 to i8*
  %p1257 = load i8*, i8** %p, align 8
  %ptrToIntG1258 = ptrtoint i8* %intToPtrB1256 to i64
  %ptrToIntH1259 = ptrtoint i8* %p1257 to i64
  %sub1260 = sub i64 %ptrToIntG1258, %ptrToIntH1259
  %div1261 = sdiv i64 %sub1260, 1
  %icastM1262 = trunc i64 %div1261 to i32
  call void @put32(i8* %intToPtrB1239, i32 %icastM1262)
  %p1263 = load i8*, i8** %p, align 8
  %ptrToIntC1264 = ptrtoint i8* %p1263 to i64
  %add1265 = add i64 %ptrToIntC1264, 16
  %intToPtrB1266 = inttoptr i64 %add1265 to i8*
  store i8* %intToPtrB1266, i8** %p, align 8
  %ptrToIntI1267 = ptrtoint i8* %intToPtrB1266 to i64
  %sub1268 = sub i64 %ptrToIntI1267, 16
  %iintToPtrD1269 = inttoptr i64 %sub1268 to i8*
  br label %loop_top_block1230

cond_end_block1235:                               ; preds = %loop_top_block1230
  br label %cond_end1186

loop_continue_top_block1294:                      ; preds = %cond_end1308
  %sym1348 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC1349 = ptrtoint %come_anon88* %sym1348 to i64
  %add1350 = add i64 %ptrToIntC1349, 24
  %intToPtrB1351 = inttoptr i64 %add1350 to %come_anon88*
  store %come_anon88* %intToPtrB1351, %come_anon88** %sym, align 8
  %sym1352 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI1353 = ptrtoint %come_anon88* %sym1352 to i64
  %sub1354 = sub i64 %ptrToIntI1353, 24
  %iintToPtrD1355 = inttoptr i64 %sub1354 to %come_anon88*
  br label %loop_top_block1295

loop_top_block1295:                               ; preds = %loop_continue_top_block1294, %cond_end1166
  %sym1296 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym_end1297 = load %come_anon88*, %come_anon88** %sym_end1106, align 8
  %le1298 = icmp slt %come_anon88* %sym1296, %sym_end1297
  br i1 %le1298, label %cond_then_block1299, label %cond_end_block1300

cond_then_block1299:                              ; preds = %loop_top_block1295
  %sym1301 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL1302 = getelementptr inbounds %come_anon88, %come_anon88* %sym1301, i32 0, i32 3
  %st_shndx1303 = load i16, i16* %fieldLLL1302, align 2
  %eq1304 = icmp eq i16 %st_shndx1303, 0
  br i1 %eq1304, label %cond_jump_then1305, label %cond_jump_elif01306

cond_end_block1300:                               ; preds = %loop_top_block1295
  %dynamic1356 = load %Section*, %Section** %dynamic, align 8
  %saved_dynamic_data_offset1357 = load i64, i64* %saved_dynamic_data_offset, align 4
  %fieldTU1358 = getelementptr inbounds %Section, %Section* %dynamic1356, i32 0, i32 0
  store i64 %saved_dynamic_data_offset1357, i64* %fieldTU1358, align 4
  %dynamic1359 = load %Section*, %Section** %dynamic, align 8
  %s11360 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1361 = getelementptr inbounds %TCCState, %TCCState* %s11360, i32 0, i32 23
  %dynsym1362 = load %Section*, %Section** %fieldLLL1361, align 8
  %fieldLLL1363 = getelementptr inbounds %Section, %Section* %dynsym1362, i32 0, i32 16
  %hash = load %Section*, %Section** %fieldLLL1363, align 8
  %fieldLLL1364 = getelementptr inbounds %Section, %Section* %hash, i32 0, i32 11
  %sh_addr1365 = load i64, i64* %fieldLLL1364, align 4
  call void @put_dt(%Section* %dynamic1359, i32 4, i64 %sh_addr1365)
  %dynamic1366 = load %Section*, %Section** %dynamic, align 8
  %dynstr1367 = load %Section*, %Section** %dynstr, align 8
  %fieldLLL1368 = getelementptr inbounds %Section, %Section* %dynstr1367, i32 0, i32 11
  %sh_addr1369 = load i64, i64* %fieldLLL1368, align 4
  call void @put_dt(%Section* %dynamic1366, i32 5, i64 %sh_addr1369)
  %dynamic1370 = load %Section*, %Section** %dynamic, align 8
  %s11371 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1372 = getelementptr inbounds %TCCState, %TCCState* %s11371, i32 0, i32 23
  %dynsym1373 = load %Section*, %Section** %fieldLLL1372, align 8
  %fieldLLL1374 = getelementptr inbounds %Section, %Section* %dynsym1373, i32 0, i32 11
  %sh_addr1375 = load i64, i64* %fieldLLL1374, align 4
  call void @put_dt(%Section* %dynamic1370, i32 6, i64 %sh_addr1375)
  %dynamic1376 = load %Section*, %Section** %dynamic, align 8
  %dynstr1377 = load %Section*, %Section** %dynstr, align 8
  %fieldLLL1378 = getelementptr inbounds %Section, %Section* %dynstr1377, i32 0, i32 0
  %data_offset1379 = load i64, i64* %fieldLLL1378, align 4
  call void @put_dt(%Section* %dynamic1376, i32 10, i64 %data_offset1379)
  %dynamic1380 = load %Section*, %Section** %dynamic, align 8
  call void @put_dt(%Section* %dynamic1380, i32 11, i64 24)
  %dynamic1381 = load %Section*, %Section** %dynamic, align 8
  %rel_addr1382 = load i64, i64* %rel_addr, align 4
  call void @put_dt(%Section* %dynamic1381, i32 7, i64 %rel_addr1382)
  %dynamic1383 = load %Section*, %Section** %dynamic, align 8
  %rel_size1384 = load i64, i64* %rel_size, align 4
  call void @put_dt(%Section* %dynamic1383, i32 8, i64 %rel_size1384)
  %dynamic1385 = load %Section*, %Section** %dynamic, align 8
  call void @put_dt(%Section* %dynamic1385, i32 9, i64 24)
  %s11386 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1387 = getelementptr inbounds %TCCState, %TCCState* %s11386, i32 0, i32 42
  %do_debug1388 = load i32, i32* %fieldLLL1387, align 4
  %icmpA1389 = icmp ne i32 %do_debug1388, 0
  br i1 %icmpA1389, label %cond_jump_then1390, label %cond_end1391

cond_jump_then1305:                               ; preds = %cond_then_block1299
  %sym1309 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL1310 = getelementptr inbounds %come_anon88, %come_anon88* %sym1309, i32 0, i32 4
  %st_value1311 = load i64, i64* %fieldLLL1310, align 4
  %icmpA1312 = icmp ne i64 %st_value1311, 0
  br i1 %icmpA1312, label %cond_jump_then1313, label %cond_end1314

cond_jump_elif01306:                              ; preds = %cond_then_block1299
  %sym1326 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL1327 = getelementptr inbounds %come_anon88, %come_anon88* %sym1326, i32 0, i32 3
  %st_shndx1328 = load i16, i16* %fieldLLL1327, align 2
  %le1329 = icmp ult i16 %st_shndx1328, -256
  br i1 %le1329, label %cond_jump_elif_then01307, label %cond_end1308

cond_jump_elif_then01307:                         ; preds = %cond_jump_elif01306
  %sym1330 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym1331 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL1332 = getelementptr inbounds %come_anon88, %come_anon88* %sym1331, i32 0, i32 4
  %st_value1333 = load i64, i64* %fieldLLL1332, align 4
  %s11334 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1335 = getelementptr inbounds %TCCState, %TCCState* %s11334, i32 0, i32 13
  %sections1336 = load %Section**, %Section*** %fieldLLL1335, align 8
  %sym1337 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL1338 = getelementptr inbounds %come_anon88, %come_anon88* %sym1337, i32 0, i32 3
  %st_shndx1339 = load i16, i16* %fieldLLL1338, align 2
  %icastKY1340 = zext i16 %st_shndx1339 to i32
  %element_addressAB1341 = load %Section**, %Section*** %fieldLLL1335, align 8
  %element_addressXYXZY1342 = getelementptr inbounds %Section*, %Section** %element_addressAB1341, i32 %icastKY1340
  %load_element1343 = load %Section*, %Section** %element_addressXYXZY1342, align 8
  %fieldLLL1344 = getelementptr inbounds %Section, %Section* %load_element1343, i32 0, i32 11
  %sh_addr1345 = load i64, i64* %fieldLLL1344, align 4
  %add1346 = add i64 %st_value1333, %sh_addr1345
  %fieldTU1347 = getelementptr inbounds %come_anon88, %come_anon88* %sym1330, i32 0, i32 4
  store i64 %add1346, i64* %fieldTU1347, align 4
  br label %cond_end1308

cond_end1308:                                     ; preds = %cond_jump_elif_then01307, %cond_jump_elif01306, %cond_end1314
  br label %loop_continue_top_block1294

cond_jump_then1313:                               ; preds = %cond_jump_then1305
  %sym1315 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym1316 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL1317 = getelementptr inbounds %come_anon88, %come_anon88* %sym1316, i32 0, i32 4
  %st_value1318 = load i64, i64* %fieldLLL1317, align 4
  %s11319 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1320 = getelementptr inbounds %TCCState, %TCCState* %s11319, i32 0, i32 18
  %plt1321 = load %Section*, %Section** %fieldLLL1320, align 8
  %fieldLLL1322 = getelementptr inbounds %Section, %Section* %plt1321, i32 0, i32 11
  %sh_addr1323 = load i64, i64* %fieldLLL1322, align 4
  %add1324 = add i64 %st_value1318, %sh_addr1323
  %fieldTU1325 = getelementptr inbounds %come_anon88, %come_anon88* %sym1315, i32 0, i32 4
  store i64 %add1324, i64* %fieldTU1325, align 4
  br label %cond_end1314

cond_end1314:                                     ; preds = %cond_jump_then1313, %cond_jump_then1305
  br label %cond_end1308

cond_jump_then1390:                               ; preds = %cond_end_block1300
  %dynamic1392 = load %Section*, %Section** %dynamic, align 8
  call void @put_dt(%Section* %dynamic1392, i32 21, i64 0)
  br label %cond_end1391

cond_end1391:                                     ; preds = %cond_jump_then1390, %cond_end_block1300
  %dynamic1393 = load %Section*, %Section** %dynamic, align 8
  call void @put_dt(%Section* %dynamic1393, i32 0, i64 0)
  br label %cond_end1105

loop_continue_top_block1400:                      ; preds = %cond_end1460, %cond_jump_then1428
  %i1473 = load i32, i32* %i, align 4
  %add1474 = add i32 %i1473, 1
  store i32 %add1474, i32* %i, align 4
  %i1475 = load i32, i32* %i, align 4
  %sub1476 = sub i32 %i1475, 1
  br label %loop_top_block1401

loop_top_block1401:                               ; preds = %loop_continue_top_block1400, %cond_end709
  %i1402 = load i32, i32* %i, align 4
  %s11403 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1404 = getelementptr inbounds %TCCState, %TCCState* %s11403, i32 0, i32 14
  %nb_sections1405 = load i32, i32* %fieldLLL1404, align 4
  %le1406 = icmp slt i32 %i1402, %nb_sections1405
  br i1 %le1406, label %cond_then_block1407, label %cond_end_block1408

cond_then_block1407:                              ; preds = %loop_top_block1401
  %s11409 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1410 = getelementptr inbounds %TCCState, %TCCState* %s11409, i32 0, i32 13
  %sections1411 = load %Section**, %Section*** %fieldLLL1410, align 8
  %i1412 = load i32, i32* %i, align 4
  %element_addressAB1413 = load %Section**, %Section*** %fieldLLL1410, align 8
  %element_addressXYXZY1414 = getelementptr inbounds %Section*, %Section** %element_addressAB1413, i32 %i1412
  %load_element1415 = load %Section*, %Section** %element_addressXYXZY1414, align 8
  store %Section* %load_element1415, %Section** %s, align 8
  %phnum1417 = load i32, i32* %phnum, align 4
  %gt1418 = icmp sgt i32 %phnum1417, 0
  store i1 %gt1418, i1* %andand1416, align 1
  br i1 %gt1418, label %cond_jump_then1419, label %cond_jump_end1420

cond_end_block1408:                               ; preds = %loop_top_block1401
  %file_type1477 = load i32, i32* %file_type, align 4
  %not_eq1478 = icmp ne i32 %file_type1477, 3
  br i1 %not_eq1478, label %cond_jump_then1479, label %cond_end1480

cond_jump_then1419:                               ; preds = %cond_then_block1407
  %s1421 = load %Section*, %Section** %s, align 8
  %fieldLLL1422 = getelementptr inbounds %Section, %Section* %s1421, i32 0, i32 6
  %sh_flags1423 = load i32, i32* %fieldLLL1422, align 4
  %andtmp1424 = and i32 %sh_flags1423, 2
  %icmpA1425 = icmp ne i32 %andtmp1424, 0
  %andand1426 = and i1 %gt1418, %icmpA1425
  store i1 %andand1426, i1* %andand1416, align 1
  br label %cond_jump_end1420

cond_jump_end1420:                                ; preds = %cond_jump_then1419, %cond_then_block1407
  %andand_result_value1427 = load i1, i1* %andand1416, align 1
  br i1 %andand_result_value1427, label %cond_jump_then1428, label %cond_end1429

cond_jump_then1428:                               ; preds = %cond_jump_end1420
  br label %loop_continue_top_block1400

cond_end1429:                                     ; preds = %after_continue1430, %cond_jump_end1420
  %section_order1431 = load i32*, i32** %section_order, align 8
  %sh_order_index1432 = load i32, i32* %sh_order_index, align 4
  %add1433 = add i32 %sh_order_index1432, 1
  store i32 %add1433, i32* %sh_order_index, align 4
  %sh_order_index1434 = load i32, i32* %sh_order_index, align 4
  %sub1435 = sub i32 %sh_order_index1434, 1
  %i1436 = load i32, i32* %i, align 4
  %element_addressXYXY1437 = getelementptr i32, i32* %section_order1431, i32 %sub1435
  store i32 %i1436, i32* %element_addressXYXY1437, align 4
  %file_offset1438 = load i32, i32* %file_offset, align 4
  %s1439 = load %Section*, %Section** %s, align 8
  %fieldLLL1440 = getelementptr inbounds %Section, %Section* %s1439, i32 0, i32 8
  %sh_addralign1441 = load i32, i32* %fieldLLL1440, align 4
  %add1442 = add i32 %file_offset1438, %sh_addralign1441
  %sub1443 = sub i32 %add1442, 1
  %s1445 = load %Section*, %Section** %s, align 8
  %fieldLLL1446 = getelementptr inbounds %Section, %Section* %s1445, i32 0, i32 8
  %sh_addralign1447 = load i32, i32* %fieldLLL1446, align 4
  %sub1448 = sub i32 %sh_addralign1447, 1
  %xortmp1449 = xor i32 %sub1448, -1
  %andtmp1450 = and i32 %sub1443, %xortmp1449
  store i32 %andtmp1450, i32* %file_offset, align 4
  %s1451 = load %Section*, %Section** %s, align 8
  %file_offset1452 = load i32, i32* %file_offset, align 4
  %icastD1453 = sext i32 %file_offset1452 to i64
  %fieldTU1454 = getelementptr inbounds %Section, %Section* %s1451, i32 0, i32 12
  store i64 %icastD1453, i64* %fieldTU1454, align 4
  %s1455 = load %Section*, %Section** %s, align 8
  %fieldLLL1456 = getelementptr inbounds %Section, %Section* %s1455, i32 0, i32 5
  %sh_type1457 = load i32, i32* %fieldLLL1456, align 4
  %not_eq1458 = icmp ne i32 %sh_type1457, 8
  br i1 %not_eq1458, label %cond_jump_then1459, label %cond_end1460

after_continue1430:                               ; No predecessors!
  br label %cond_end1429

cond_jump_then1459:                               ; preds = %cond_end1429
  %file_offset1461 = load i32, i32* %file_offset, align 4
  %s1462 = load %Section*, %Section** %s, align 8
  %fieldLLL1463 = getelementptr inbounds %Section, %Section* %s1462, i32 0, i32 10
  %sh_size1464 = load i64, i64* %fieldLLL1463, align 4
  %icastD1465 = sext i32 %file_offset1461 to i64
  %add1466 = add i64 %icastD1465, %sh_size1464
  %icastM1467 = trunc i64 %add1466 to i32
  store i32 %icastM1467, i32* %file_offset, align 4
  %s1468 = load %Section*, %Section** %s, align 8
  %fieldLLL1469 = getelementptr inbounds %Section, %Section* %s1468, i32 0, i32 10
  %sh_size1470 = load i64, i64* %fieldLLL1469, align 4
  %icastD1471 = sext i32 %icastM1467 to i64
  %sub1472 = sub i64 %icastD1471, %sh_size1470
  br label %cond_end1460

cond_end1460:                                     ; preds = %cond_jump_then1459, %cond_end1429
  br label %loop_continue_top_block1400

cond_jump_then1479:                               ; preds = %cond_end_block1408
  %s11481 = load %TCCState*, %TCCState** %s1, align 8
  call void @relocate_syms(%TCCState* %s11481, i32 0)
  %s11482 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1483 = getelementptr inbounds %TCCState, %TCCState* %s11482, i32 0, i32 49
  %nb_errors1484 = load i32, i32* %fieldLLL1483, align 4
  %not_eq1485 = icmp ne i32 %nb_errors1484, 0
  br i1 %not_eq1485, label %cond_jump_then1486, label %cond_end1487

cond_end1480:                                     ; preds = %cond_end1577, %cond_end_block1408
  %file_type1586 = load i32, i32* %file_type, align 4
  %eq1587 = icmp eq i32 %file_type1586, 3
  br i1 %eq1587, label %cond_jump_then1588, label %cond_else_block1589

cond_jump_then1486:                               ; preds = %cond_jump_then1479
  br label %elf_output_file.fail

cond_end1487:                                     ; preds = %elf_output_file.fail, %cond_jump_then1479
  store i32 1, i32* %i, align 4
  br label %loop_top_block1489

elf_output_file.the_end:                          ; preds = %cond_end1614, %elf_output_file.fail
  %s11873 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1874 = getelementptr inbounds %TCCState, %TCCState* %s11873, i32 0, i32 21
  %symtab_to_dynsym1875 = load i32*, i32** %fieldLLL1874, align 8
  %castAQ1876 = bitcast i32* %symtab_to_dynsym1875 to i8*
  call void @tcc_free(i8* %castAQ1876)
  %section_order1877 = load i32*, i32** %section_order, align 8
  %castAQ1878 = bitcast i32* %section_order1877 to i8*
  call void @tcc_free(i8* %castAQ1878)
  %phdr1879 = load %come_anon96*, %come_anon96** %phdr, align 8
  %castAQ1880 = bitcast %come_anon96* %phdr1879 to i8*
  call void @tcc_free(i8* %castAQ1880)
  %s11881 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1882 = getelementptr inbounds %TCCState, %TCCState* %s11881, i32 0, i32 19
  %got_offsets = load i64*, i64** %fieldLLL1882, align 8
  %castAQ1883 = bitcast i64* %got_offsets to i8*
  call void @tcc_free(i8* %castAQ1883)
  %ret1884 = load i32, i32* %ret, align 4
  ret i32 %ret1884

loop_continue_top_block1488:                      ; preds = %cond_end1528
  %i1531 = load i32, i32* %i, align 4
  %add1532 = add i32 %i1531, 1
  store i32 %add1532, i32* %i, align 4
  %i1533 = load i32, i32* %i, align 4
  %sub1534 = sub i32 %i1533, 1
  br label %loop_top_block1489

loop_top_block1489:                               ; preds = %loop_continue_top_block1488, %cond_end1487
  %i1490 = load i32, i32* %i, align 4
  %s11491 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1492 = getelementptr inbounds %TCCState, %TCCState* %s11491, i32 0, i32 14
  %nb_sections1493 = load i32, i32* %fieldLLL1492, align 4
  %le1494 = icmp slt i32 %i1490, %nb_sections1493
  br i1 %le1494, label %cond_then_block1495, label %cond_end_block1496

cond_then_block1495:                              ; preds = %loop_top_block1489
  %s11497 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1498 = getelementptr inbounds %TCCState, %TCCState* %s11497, i32 0, i32 13
  %sections1499 = load %Section**, %Section*** %fieldLLL1498, align 8
  %i1500 = load i32, i32* %i, align 4
  %element_addressAB1501 = load %Section**, %Section*** %fieldLLL1498, align 8
  %element_addressXYXZY1502 = getelementptr inbounds %Section*, %Section** %element_addressAB1501, i32 %i1500
  %load_element1503 = load %Section*, %Section** %element_addressXYXZY1502, align 8
  store %Section* %load_element1503, %Section** %s, align 8
  %s1506 = load %Section*, %Section** %s, align 8
  %fieldLLL1507 = getelementptr inbounds %Section, %Section* %s1506, i32 0, i32 15
  %reloc = load %Section*, %Section** %fieldLLL1507, align 8
  %icmpB1508 = icmp ne %Section* %reloc, null
  store i1 %icmpB1508, i1* %andand1505, align 1
  br i1 %icmpB1508, label %cond_jump_then1509, label %cond_jump_end1510

cond_end_block1496:                               ; preds = %loop_top_block1489
  store i32 1, i32* %i, align 4
  br label %loop_top_block1536

cond_jump_then1509:                               ; preds = %cond_then_block1495
  %s1511 = load %Section*, %Section** %s, align 8
  %s11512 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1513 = getelementptr inbounds %TCCState, %TCCState* %s11512, i32 0, i32 17
  %got1514 = load %Section*, %Section** %fieldLLL1513, align 8
  %not_eq1515 = icmp ne %Section* %s1511, %got1514
  %andand1516 = and i1 %icmpB1508, %not_eq1515
  store i1 %andand1516, i1* %andand1505, align 1
  br label %cond_jump_end1510

cond_jump_end1510:                                ; preds = %cond_jump_then1509, %cond_then_block1495
  %andand_result_value1517 = load i1, i1* %andand1505, align 1
  store i1 %andand_result_value1517, i1* %andand1504, align 1
  br i1 %andand_result_value1517, label %cond_jump_then1518, label %cond_jump_end1519

cond_jump_then1518:                               ; preds = %cond_jump_end1510
  %s1520 = load %Section*, %Section** %s, align 8
  %fieldLLL1521 = getelementptr inbounds %Section, %Section* %s1520, i32 0, i32 6
  %sh_flags1522 = load i32, i32* %fieldLLL1521, align 4
  %andtmp1523 = and i32 %sh_flags1522, 2
  %icmpA1524 = icmp ne i32 %andtmp1523, 0
  %andand1525 = and i1 %andand_result_value1517, %icmpA1524
  store i1 %andand1525, i1* %andand1504, align 1
  br label %cond_jump_end1519

cond_jump_end1519:                                ; preds = %cond_jump_then1518, %cond_jump_end1510
  %andand_result_value1526 = load i1, i1* %andand1504, align 1
  br i1 %andand_result_value1526, label %cond_jump_then1527, label %cond_end1528

cond_jump_then1527:                               ; preds = %cond_jump_end1519
  %s11529 = load %TCCState*, %TCCState** %s1, align 8
  %s1530 = load %Section*, %Section** %s, align 8
  call void @relocate_section(%TCCState* %s11529, %Section* %s1530)
  br label %cond_end1528

cond_end1528:                                     ; preds = %cond_jump_then1527, %cond_jump_end1519
  br label %loop_continue_top_block1488

loop_continue_top_block1535:                      ; preds = %cond_end1566
  %i1569 = load i32, i32* %i, align 4
  %add1570 = add i32 %i1569, 1
  store i32 %add1570, i32* %i, align 4
  %i1571 = load i32, i32* %i, align 4
  %sub1572 = sub i32 %i1571, 1
  br label %loop_top_block1536

loop_top_block1536:                               ; preds = %loop_continue_top_block1535, %cond_end_block1496
  %i1537 = load i32, i32* %i, align 4
  %s11538 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1539 = getelementptr inbounds %TCCState, %TCCState* %s11538, i32 0, i32 14
  %nb_sections1540 = load i32, i32* %fieldLLL1539, align 4
  %le1541 = icmp slt i32 %i1537, %nb_sections1540
  br i1 %le1541, label %cond_then_block1542, label %cond_end_block1543

cond_then_block1542:                              ; preds = %loop_top_block1536
  %s11544 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1545 = getelementptr inbounds %TCCState, %TCCState* %s11544, i32 0, i32 13
  %sections1546 = load %Section**, %Section*** %fieldLLL1545, align 8
  %i1547 = load i32, i32* %i, align 4
  %element_addressAB1548 = load %Section**, %Section*** %fieldLLL1545, align 8
  %element_addressXYXZY1549 = getelementptr inbounds %Section*, %Section** %element_addressAB1548, i32 %i1547
  %load_element1550 = load %Section*, %Section** %element_addressXYXZY1549, align 8
  store %Section* %load_element1550, %Section** %s, align 8
  %s1552 = load %Section*, %Section** %s, align 8
  %fieldLLL1553 = getelementptr inbounds %Section, %Section* %s1552, i32 0, i32 6
  %sh_flags1554 = load i32, i32* %fieldLLL1553, align 4
  %andtmp1555 = and i32 %sh_flags1554, 2
  %icmpA1556 = icmp ne i32 %andtmp1555, 0
  store i1 %icmpA1556, i1* %andand1551, align 1
  br i1 %icmpA1556, label %cond_jump_then1557, label %cond_jump_end1558

cond_end_block1543:                               ; preds = %loop_top_block1536
  %file_type1573 = load i32, i32* %file_type, align 4
  %eq1574 = icmp eq i32 %file_type1573, 1
  br i1 %eq1574, label %cond_jump_then1575, label %cond_else_block1576

cond_jump_then1557:                               ; preds = %cond_then_block1542
  %s1559 = load %Section*, %Section** %s, align 8
  %fieldLLL1560 = getelementptr inbounds %Section, %Section* %s1559, i32 0, i32 5
  %sh_type1561 = load i32, i32* %fieldLLL1560, align 4
  %eq1562 = icmp eq i32 %sh_type1561, 4
  %andand1563 = and i1 %icmpA1556, %eq1562
  store i1 %andand1563, i1* %andand1551, align 1
  br label %cond_jump_end1558

cond_jump_end1558:                                ; preds = %cond_jump_then1557, %cond_then_block1542
  %andand_result_value1564 = load i1, i1* %andand1551, align 1
  br i1 %andand_result_value1564, label %cond_jump_then1565, label %cond_end1566

cond_jump_then1565:                               ; preds = %cond_jump_end1558
  %s11567 = load %TCCState*, %TCCState** %s1, align 8
  %s1568 = load %Section*, %Section** %s, align 8
  call void @relocate_rel(%TCCState* %s11567, %Section* %s1568)
  br label %cond_end1566

cond_end1566:                                     ; preds = %cond_jump_then1565, %cond_jump_end1558
  br label %loop_continue_top_block1535

cond_jump_then1575:                               ; preds = %cond_end_block1543
  %ehdr1578 = load %come_anon84, %come_anon84* %ehdr, align 4
  %s11579 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result1580 = call i8* @tcc_get_symbol_err(%TCCState* %s11579, i8* bitcast ([7 x i8]* @253 to i8*))
  %icatXXXXXX = ptrtoint i8* %fun_result1580 to i64
  %fieldTTT1581 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 4
  store i64 %icatXXXXXX, i64* %fieldTTT1581, align 4
  br label %cond_end1577

cond_else_block1576:                              ; preds = %cond_end_block1543
  %ehdr1582 = load %come_anon84, %come_anon84* %ehdr, align 4
  %text_section = load %Section*, %Section** @text_section, align 8
  %fieldLLL1583 = getelementptr inbounds %Section, %Section* %text_section, i32 0, i32 11
  %sh_addr1584 = load i64, i64* %fieldLLL1583, align 4
  %fieldTTT1585 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 4
  store i64 %sh_addr1584, i64* %fieldTTT1585, align 4
  br label %cond_end1577

cond_end1577:                                     ; preds = %cond_else_block1576, %cond_jump_then1575
  br label %cond_end1480

cond_jump_then1588:                               ; preds = %cond_end1480
  store i32 438, i32* %mode, align 4
  br label %cond_end1590

cond_else_block1589:                              ; preds = %cond_end1480
  store i32 511, i32* %mode, align 4
  br label %cond_end1590

cond_end1590:                                     ; preds = %cond_else_block1589, %cond_jump_then1588
  %filename1591 = load i8*, i8** %filename, align 8
  %mode1592 = load i32, i32* %mode, align 4
  %fun_result1593 = call i32 (i8*, i32, ...) @open(i8* %filename1591, i32 577, i32 %mode1592)
  store i32 %fun_result1593, i32* %fd, align 4
  %fd1594 = load i32, i32* %fd, align 4
  %le1595 = icmp slt i32 %fd1594, 0
  br i1 %le1595, label %cond_jump_then1596, label %cond_end1597

cond_jump_then1596:                               ; preds = %cond_end1590
  %filename1598 = load i8*, i8** %filename, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([21 x i8]* @254 to i8*), i8* %filename1598)
  br label %elf_output_file.fail
  br label %cond_end1597

cond_end1597:                                     ; preds = %cond_jump_then1596, %cond_end1590
  %fd1599 = load i32, i32* %fd, align 4
  %fun_result1600 = call %_IO_FILE* @fdopen(i32 %fd1599, i8* bitcast ([3 x i8]* @255 to i8*))
  store %_IO_FILE* %fun_result1600, %_IO_FILE** %f, align 8
  %s11601 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1602 = getelementptr inbounds %TCCState, %TCCState* %s11601, i32 0, i32 41
  %verbose = load i32, i32* %fieldLLL1602, align 4
  %icmpA1603 = icmp ne i32 %verbose, 0
  br i1 %icmpA1603, label %cond_jump_then1604, label %cond_end1605

cond_jump_then1604:                               ; preds = %cond_end1597
  %filename1606 = load i8*, i8** %filename, align 8
  %fun_result1607 = call i32 (i8*, ...) @printf(i8* bitcast ([7 x i8]* @256 to i8*), i8* %filename1606)
  br label %cond_end1605

cond_end1605:                                     ; preds = %cond_jump_then1604, %cond_end1597
  %s11608 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1609 = getelementptr inbounds %TCCState, %TCCState* %s11608, i32 0, i32 33
  %output_format1610 = load i32, i32* %fieldLLL1609, align 4
  %eq1611 = icmp eq i32 %output_format1610, 0
  br i1 %eq1611, label %cond_jump_then1612, label %cond_else_block1613

cond_jump_then1612:                               ; preds = %cond_end1605
  %s11615 = load %TCCState*, %TCCState** %s1, align 8
  %symtab_section1616 = load %Section*, %Section** @symtab_section, align 8
  call void @sort_syms(%TCCState* %s11615, %Section* %symtab_section1616)
  %file_offset1617 = load i32, i32* %file_offset, align 4
  %add1618 = add i32 %file_offset1617, 3
  %andtmp1619 = and i32 %add1618, -4
  store i32 %andtmp1619, i32* %file_offset, align 4
  %ehdr1620 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA = bitcast [16 x i8]* %fieldRRRR to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 127, i8* %gepBX, align 1
  %ehdr1621 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR1622 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA1623 = bitcast [16 x i8]* %fieldRRRR1622 to i8*
  %gepBX1624 = getelementptr i8, i8* %array_castA1623, i32 1
  store i8 69, i8* %gepBX1624, align 1
  %ehdr1625 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR1626 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA1627 = bitcast [16 x i8]* %fieldRRRR1626 to i8*
  %gepBX1628 = getelementptr i8, i8* %array_castA1627, i32 2
  store i8 76, i8* %gepBX1628, align 1
  %ehdr1629 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR1630 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA1631 = bitcast [16 x i8]* %fieldRRRR1630 to i8*
  %gepBX1632 = getelementptr i8, i8* %array_castA1631, i32 3
  store i8 70, i8* %gepBX1632, align 1
  %ehdr1633 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR1634 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA1635 = bitcast [16 x i8]* %fieldRRRR1634 to i8*
  %gepBX1636 = getelementptr i8, i8* %array_castA1635, i32 4
  store i8 2, i8* %gepBX1636, align 1
  %ehdr1637 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR1638 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA1639 = bitcast [16 x i8]* %fieldRRRR1638 to i8*
  %gepBX1640 = getelementptr i8, i8* %array_castA1639, i32 5
  store i8 1, i8* %gepBX1640, align 1
  %ehdr1641 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR1642 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castA1643 = bitcast [16 x i8]* %fieldRRRR1642 to i8*
  %gepBX1644 = getelementptr i8, i8* %array_castA1643, i32 6
  store i8 1, i8* %gepBX1644, align 1
  %file_type1646 = load i32, i32* %file_type, align 4
  br label %cond_then_block1647
  br label %cond_else_blockX1649

cond_else_block1613:                              ; preds = %cond_end1605
  %s11868 = load %TCCState*, %TCCState** %s1, align 8
  %f1869 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %section_order1870 = load i32*, i32** %section_order, align 8
  call void @tcc_output_binary(%TCCState* %s11868, %_IO_FILE* %f1869, i32* %section_order1870)
  br label %cond_end1614

cond_end1614:                                     ; preds = %cond_else_block1613, %cond_end_block1785
  %f1871 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1872 = call i32 @fclose(%_IO_FILE* %f1871)
  store i32 0, i32* %ret, align 4
  br label %elf_output_file.the_end

end_blockX1645:                                   ; preds = %cond_else_blockX1661, %cond_then_block1660, %cond_then_block1654, %cond_then_block1647
  %ehdr1666 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1667 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 2
  store i16 62, i16* %fieldTTT1667, align 2
  %ehdr1668 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1669 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 3
  store i32 1, i32* %fieldTTT1669, align 4
  %ehdr1670 = load %come_anon84, %come_anon84* %ehdr, align 4
  %file_offset1671 = load i32, i32* %file_offset, align 4
  %icastD1672 = sext i32 %file_offset1671 to i64
  %fieldTTT1673 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 6
  store i64 %icastD1672, i64* %fieldTTT1673, align 4
  %ehdr1674 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1675 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 8
  store i16 64, i16* %fieldTTT1675, align 2
  %ehdr1676 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1677 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 11
  store i16 64, i16* %fieldTTT1677, align 2
  %ehdr1678 = load %come_anon84, %come_anon84* %ehdr, align 4
  %shnum1679 = load i32, i32* %shnum, align 4
  %icastG1680 = trunc i32 %shnum1679 to i16
  %fieldTTT1681 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  store i16 %icastG1680, i16* %fieldTTT1681, align 2
  %ehdr1682 = load %come_anon84, %come_anon84* %ehdr, align 4
  %shnum1683 = load i32, i32* %shnum, align 4
  %sub1684 = sub i32 %shnum1683, 1
  %icastG1685 = trunc i32 %sub1684 to i16
  %fieldTTT1686 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 13
  store i16 %icastG1685, i16* %fieldTTT1686, align 2
  %ehdr1687 = load %come_anon84, %come_anon84* %ehdr, align 4
  %castAQ1688 = bitcast %come_anon84* %ehdr to i8*
  %f1689 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1690 = call i64 @fwrite(i8* %castAQ1688, i64 1, i64 64, %_IO_FILE* %f1689)
  %phdr1691 = load %come_anon96*, %come_anon96** %phdr, align 8
  %castAQ1692 = bitcast %come_anon96* %phdr1691 to i8*
  %phnum1693 = load i32, i32* %phnum, align 4
  %icastD1694 = sext i32 %phnum1693 to i64
  %mul1695 = mul i64 %icastD1694, 56
  %f1696 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1697 = call i64 @fwrite(i8* %castAQ1692, i64 1, i64 %mul1695, %_IO_FILE* %f1696)
  %phnum1698 = load i32, i32* %phnum, align 4
  %icastD1699 = sext i32 %phnum1698 to i64
  %mul1700 = mul i64 %icastD1699, 56
  %add1701 = add i64 64, %mul1700
  %icastM1702 = trunc i64 %add1701 to i32
  store i32 %icastM1702, i32* %offset, align 4
  store i32 1, i32* %i, align 4
  br label %loop_top_block1704

cond_then_block1647:                              ; preds = %cond_else_blockX1648, %cond_jump_then1612
  %ehdr1651 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1652 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 1
  store i16 2, i16* %fieldTTT1652, align 2
  br label %end_blockX1645

cond_else_blockX1648:                             ; No predecessors!
  %eqtmp1650 = icmp eq i32 %file_type1646, 1
  br i1 %eqtmp1650, label %cond_then_block1647, label %cond_else_blockX1649

cond_else_blockX1649:                             ; preds = %after_break1653, %cond_else_blockX1648, %cond_jump_then1612
  %eqtmp1656 = icmp eq i32 %file_type1646, 2
  br i1 %eqtmp1656, label %cond_then_block1654, label %cond_else_blockX1655

after_break1653:                                  ; No predecessors!
  br label %cond_else_blockX1649
  br label %cond_else_blockX1655

cond_then_block1654:                              ; preds = %cond_else_blockX1649
  %ehdr1657 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1658 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 1
  store i16 3, i16* %fieldTTT1658, align 2
  br label %end_blockX1645

cond_else_blockX1655:                             ; preds = %after_break1659, %cond_else_blockX1649, %after_break1653
  %eqtmp1662 = icmp eq i32 %file_type1646, 3
  br i1 %eqtmp1662, label %cond_then_block1660, label %cond_else_blockX1661

after_break1659:                                  ; No predecessors!
  br label %cond_else_blockX1655
  br label %cond_else_blockX1661

cond_then_block1660:                              ; preds = %cond_else_blockX1655
  %ehdr1663 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldTTT1664 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 1
  store i16 1, i16* %fieldTTT1664, align 2
  br label %end_blockX1645

cond_else_blockX1661:                             ; preds = %after_break1665, %cond_else_blockX1655, %after_break1659
  br label %end_blockX1645

after_break1665:                                  ; No predecessors!
  br label %cond_else_blockX1661

loop_continue_top_block1703:                      ; preds = %cond_end1728
  %i1760 = load i32, i32* %i, align 4
  %add1761 = add i32 %i1760, 1
  store i32 %add1761, i32* %i, align 4
  %i1762 = load i32, i32* %i, align 4
  %sub1763 = sub i32 %i1762, 1
  br label %loop_top_block1704

loop_top_block1704:                               ; preds = %loop_continue_top_block1703, %end_blockX1645
  %i1705 = load i32, i32* %i, align 4
  %s11706 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1707 = getelementptr inbounds %TCCState, %TCCState* %s11706, i32 0, i32 14
  %nb_sections1708 = load i32, i32* %fieldLLL1707, align 4
  %le1709 = icmp slt i32 %i1705, %nb_sections1708
  br i1 %le1709, label %cond_then_block1710, label %cond_end_block1711

cond_then_block1710:                              ; preds = %loop_top_block1704
  %s11712 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1713 = getelementptr inbounds %TCCState, %TCCState* %s11712, i32 0, i32 13
  %sections1714 = load %Section**, %Section*** %fieldLLL1713, align 8
  %section_order1715 = load i32*, i32** %section_order, align 8
  %i1716 = load i32, i32* %i, align 4
  %element_addressAB1717 = load i32*, i32** %section_order, align 8
  %element_addressXYXZY1718 = getelementptr inbounds i32, i32* %element_addressAB1717, i32 %i1716
  %load_element1719 = load i32, i32* %element_addressXYXZY1718, align 4
  %element_addressAB1720 = load %Section**, %Section*** %fieldLLL1713, align 8
  %element_addressXYXZY1721 = getelementptr inbounds %Section*, %Section** %element_addressAB1720, i32 %load_element1719
  %load_element1722 = load %Section*, %Section** %element_addressXYXZY1721, align 8
  store %Section* %load_element1722, %Section** %s, align 8
  %s1723 = load %Section*, %Section** %s, align 8
  %fieldLLL1724 = getelementptr inbounds %Section, %Section* %s1723, i32 0, i32 5
  %sh_type1725 = load i32, i32* %fieldLLL1724, align 4
  %not_eq1726 = icmp ne i32 %sh_type1725, 8
  br i1 %not_eq1726, label %cond_jump_then1727, label %cond_end1728

cond_end_block1711:                               ; preds = %loop_top_block1704
  br label %loop_top_block1764

cond_jump_then1727:                               ; preds = %cond_then_block1710
  br label %loop_top_block1729

cond_end1728:                                     ; preds = %cond_end_block1737, %cond_then_block1710
  br label %loop_continue_top_block1703

loop_top_block1729:                               ; preds = %cond_then_block1736, %cond_jump_then1727
  %offset1730 = load i32, i32* %offset, align 4
  %s1731 = load %Section*, %Section** %s, align 8
  %fieldLLL1732 = getelementptr inbounds %Section, %Section* %s1731, i32 0, i32 12
  %sh_offset1733 = load i64, i64* %fieldLLL1732, align 4
  %icastM1734 = trunc i64 %sh_offset1733 to i32
  %le1735 = icmp slt i32 %offset1730, %icastM1734
  br i1 %le1735, label %cond_then_block1736, label %cond_end_block1737

cond_then_block1736:                              ; preds = %loop_top_block1729
  %f1738 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1739 = call i32 @fputc(i32 0, %_IO_FILE* %f1738)
  %offset1740 = load i32, i32* %offset, align 4
  %add1741 = add i32 %offset1740, 1
  store i32 %add1741, i32* %offset, align 4
  %offset1742 = load i32, i32* %offset, align 4
  %sub1743 = sub i32 %offset1742, 1
  br label %loop_top_block1729

cond_end_block1737:                               ; preds = %loop_top_block1729
  %s1744 = load %Section*, %Section** %s, align 8
  %fieldLLL1745 = getelementptr inbounds %Section, %Section* %s1744, i32 0, i32 10
  %sh_size1746 = load i64, i64* %fieldLLL1745, align 4
  %icastM1747 = trunc i64 %sh_size1746 to i32
  store i32 %icastM1747, i32* %size, align 4
  %s1748 = load %Section*, %Section** %s, align 8
  %fieldLLL1749 = getelementptr inbounds %Section, %Section* %s1748, i32 0, i32 1
  %data1750 = load i8*, i8** %fieldLLL1749, align 8
  %size1751 = load i32, i32* %size, align 4
  %icastD1752 = sext i32 %size1751 to i64
  %f1753 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1754 = call i64 @fwrite(i8* %data1750, i64 1, i64 %icastD1752, %_IO_FILE* %f1753)
  %offset1755 = load i32, i32* %offset, align 4
  %size1756 = load i32, i32* %size, align 4
  %add1757 = add i32 %offset1755, %size1756
  store i32 %add1757, i32* %offset, align 4
  %size1758 = load i32, i32* %size, align 4
  %sub1759 = sub i32 %add1757, %size1758
  br label %cond_end1728

loop_top_block1764:                               ; preds = %cond_then_block1769, %cond_end_block1711
  %offset1765 = load i32, i32* %offset, align 4
  %ehdr1766 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 6
  %e_shoff = load i64, i64* %fieldVVV, align 4
  %icastM1767 = trunc i64 %e_shoff to i32
  %le1768 = icmp slt i32 %offset1765, %icastM1767
  br i1 %le1768, label %cond_then_block1769, label %cond_end_block1770

cond_then_block1769:                              ; preds = %loop_top_block1764
  %f1771 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1772 = call i32 @fputc(i32 0, %_IO_FILE* %f1771)
  %offset1773 = load i32, i32* %offset, align 4
  %add1774 = add i32 %offset1773, 1
  store i32 %add1774, i32* %offset, align 4
  %offset1775 = load i32, i32* %offset, align 4
  %sub1776 = sub i32 %offset1775, 1
  br label %loop_top_block1764

cond_end_block1770:                               ; preds = %loop_top_block1764
  store i32 0, i32* %i, align 4
  br label %loop_top_block1778

loop_continue_top_block1777:                      ; preds = %cond_end1800
  %i1864 = load i32, i32* %i, align 4
  %add1865 = add i32 %i1864, 1
  store i32 %add1865, i32* %i, align 4
  %i1866 = load i32, i32* %i, align 4
  %sub1867 = sub i32 %i1866, 1
  br label %loop_top_block1778

loop_top_block1778:                               ; preds = %loop_continue_top_block1777, %cond_end_block1770
  %i1779 = load i32, i32* %i, align 4
  %s11780 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1781 = getelementptr inbounds %TCCState, %TCCState* %s11780, i32 0, i32 14
  %nb_sections1782 = load i32, i32* %fieldLLL1781, align 4
  %le1783 = icmp slt i32 %i1779, %nb_sections1782
  br i1 %le1783, label %cond_then_block1784, label %cond_end_block1785

cond_then_block1784:                              ; preds = %loop_top_block1778
  %shdr1786 = load %come_anon86, %come_anon86* %shdr, align 4
  store %come_anon86* %shdr, %come_anon86** %sh, align 8
  %sh1787 = load %come_anon86*, %come_anon86** %sh, align 8
  %castAQ1788 = bitcast %come_anon86* %sh1787 to i8*
  %fun_result1789 = call i8* @memset(i8* %castAQ1788, i32 0, i64 64)
  %s11790 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL1791 = getelementptr inbounds %TCCState, %TCCState* %s11790, i32 0, i32 13
  %sections1792 = load %Section**, %Section*** %fieldLLL1791, align 8
  %i1793 = load i32, i32* %i, align 4
  %element_addressAB1794 = load %Section**, %Section*** %fieldLLL1791, align 8
  %element_addressXYXZY1795 = getelementptr inbounds %Section*, %Section** %element_addressAB1794, i32 %i1793
  %load_element1796 = load %Section*, %Section** %element_addressXYXZY1795, align 8
  store %Section* %load_element1796, %Section** %s, align 8
  %s1797 = load %Section*, %Section** %s, align 8
  %icmpB1798 = icmp ne %Section* %s1797, null
  br i1 %icmpB1798, label %cond_jump_then1799, label %cond_end1800

cond_end_block1785:                               ; preds = %loop_top_block1778
  br label %cond_end1614

cond_jump_then1799:                               ; preds = %cond_then_block1784
  %sh1801 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1802 = load %Section*, %Section** %s, align 8
  %fieldLLL1803 = getelementptr inbounds %Section, %Section* %s1802, i32 0, i32 3
  %sh_name = load i32, i32* %fieldLLL1803, align 4
  %fieldTU1804 = getelementptr inbounds %come_anon86, %come_anon86* %sh1801, i32 0, i32 0
  store i32 %sh_name, i32* %fieldTU1804, align 4
  %sh1805 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1806 = load %Section*, %Section** %s, align 8
  %fieldLLL1807 = getelementptr inbounds %Section, %Section* %s1806, i32 0, i32 5
  %sh_type1808 = load i32, i32* %fieldLLL1807, align 4
  %fieldTU1809 = getelementptr inbounds %come_anon86, %come_anon86* %sh1805, i32 0, i32 1
  store i32 %sh_type1808, i32* %fieldTU1809, align 4
  %sh1810 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1811 = load %Section*, %Section** %s, align 8
  %fieldLLL1812 = getelementptr inbounds %Section, %Section* %s1811, i32 0, i32 6
  %sh_flags1813 = load i32, i32* %fieldLLL1812, align 4
  %icastD1814 = sext i32 %sh_flags1813 to i64
  %fieldTU1815 = getelementptr inbounds %come_anon86, %come_anon86* %sh1810, i32 0, i32 2
  store i64 %icastD1814, i64* %fieldTU1815, align 4
  %sh1816 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1817 = load %Section*, %Section** %s, align 8
  %fieldLLL1818 = getelementptr inbounds %Section, %Section* %s1817, i32 0, i32 9
  %sh_entsize = load i32, i32* %fieldLLL1818, align 4
  %icastD1819 = sext i32 %sh_entsize to i64
  %fieldTU1820 = getelementptr inbounds %come_anon86, %come_anon86* %sh1816, i32 0, i32 9
  store i64 %icastD1819, i64* %fieldTU1820, align 4
  %sh1821 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1822 = load %Section*, %Section** %s, align 8
  %fieldLLL1823 = getelementptr inbounds %Section, %Section* %s1822, i32 0, i32 7
  %sh_info1824 = load i32, i32* %fieldLLL1823, align 4
  %fieldTU1825 = getelementptr inbounds %come_anon86, %come_anon86* %sh1821, i32 0, i32 7
  store i32 %sh_info1824, i32* %fieldTU1825, align 4
  %s1826 = load %Section*, %Section** %s, align 8
  %fieldLLL1827 = getelementptr inbounds %Section, %Section* %s1826, i32 0, i32 14
  %link1828 = load %Section*, %Section** %fieldLLL1827, align 8
  %icmpB1829 = icmp ne %Section* %link1828, null
  br i1 %icmpB1829, label %cond_jump_then1830, label %cond_end1831

cond_end1800:                                     ; preds = %cond_end1831, %cond_then_block1784
  %sh1860 = load %come_anon86*, %come_anon86** %sh, align 8
  %castAQ1861 = bitcast %come_anon86* %sh1860 to i8*
  %f1862 = load %_IO_FILE*, %_IO_FILE** %f, align 8
  %fun_result1863 = call i64 @fwrite(i8* %castAQ1861, i64 1, i64 64, %_IO_FILE* %f1862)
  br label %loop_continue_top_block1777

cond_jump_then1830:                               ; preds = %cond_jump_then1799
  %sh1832 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1833 = load %Section*, %Section** %s, align 8
  %fieldLLL1834 = getelementptr inbounds %Section, %Section* %s1833, i32 0, i32 14
  %link1835 = load %Section*, %Section** %fieldLLL1834, align 8
  %fieldLLL1836 = getelementptr inbounds %Section, %Section* %link1835, i32 0, i32 4
  %sh_num1837 = load i32, i32* %fieldLLL1836, align 4
  %fieldTU1838 = getelementptr inbounds %come_anon86, %come_anon86* %sh1832, i32 0, i32 6
  store i32 %sh_num1837, i32* %fieldTU1838, align 4
  br label %cond_end1831

cond_end1831:                                     ; preds = %cond_jump_then1830, %cond_jump_then1799
  %sh1839 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1840 = load %Section*, %Section** %s, align 8
  %fieldLLL1841 = getelementptr inbounds %Section, %Section* %s1840, i32 0, i32 8
  %sh_addralign1842 = load i32, i32* %fieldLLL1841, align 4
  %icastD1843 = sext i32 %sh_addralign1842 to i64
  %fieldTU1844 = getelementptr inbounds %come_anon86, %come_anon86* %sh1839, i32 0, i32 8
  store i64 %icastD1843, i64* %fieldTU1844, align 4
  %sh1845 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1846 = load %Section*, %Section** %s, align 8
  %fieldLLL1847 = getelementptr inbounds %Section, %Section* %s1846, i32 0, i32 11
  %sh_addr1848 = load i64, i64* %fieldLLL1847, align 4
  %fieldTU1849 = getelementptr inbounds %come_anon86, %come_anon86* %sh1845, i32 0, i32 3
  store i64 %sh_addr1848, i64* %fieldTU1849, align 4
  %sh1850 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1851 = load %Section*, %Section** %s, align 8
  %fieldLLL1852 = getelementptr inbounds %Section, %Section* %s1851, i32 0, i32 12
  %sh_offset1853 = load i64, i64* %fieldLLL1852, align 4
  %fieldTU1854 = getelementptr inbounds %come_anon86, %come_anon86* %sh1850, i32 0, i32 4
  store i64 %sh_offset1853, i64* %fieldTU1854, align 4
  %sh1855 = load %come_anon86*, %come_anon86** %sh, align 8
  %s1856 = load %Section*, %Section** %s, align 8
  %fieldLLL1857 = getelementptr inbounds %Section, %Section* %s1856, i32 0, i32 10
  %sh_size1858 = load i64, i64* %fieldLLL1857, align 4
  %fieldTU1859 = getelementptr inbounds %come_anon86, %come_anon86* %sh1855, i32 0, i32 5
  store i64 %sh_size1858, i64* %fieldTU1859, align 4
  br label %cond_end1800
}

define internal i8* @load_data(i32 %0, i64 %1, i64 %2) {
entry:
  %data = alloca i8*, align 8
  %fd = alloca i32, align 4
  %fd1 = alloca i32*, align 8
  store i32 %0, i32* %fd, align 4
  store i32* %fd, i32** %fd1, align 8
  %file_offset = alloca i64, align 8
  %file_offset2 = alloca i64*, align 8
  store i64 %1, i64* %file_offset, align 4
  store i64* %file_offset, i64** %file_offset2, align 8
  %size = alloca i64, align 8
  %size3 = alloca i64*, align 8
  store i64 %2, i64* %size, align 4
  store i64* %size, i64** %size3, align 8
  %size4 = load i64, i64* %size, align 4
  %fun_result = call i8* @tcc_malloc(i64 %size4)
  store i8* %fun_result, i8** %data, align 8
  %fd5 = load i32, i32* %fd, align 4
  %file_offset6 = load i64, i64* %file_offset, align 4
  %fun_result7 = call i64 @lseek(i32 %fd5, i64 %file_offset6, i32 0)
  %fd8 = load i32, i32* %fd, align 4
  %data9 = load i8*, i8** %data, align 8
  %size10 = load i64, i64* %size, align 4
  %fun_result11 = call i64 @read(i32 %fd8, i8* %data9, i64 %size10)
  %data12 = load i8*, i8** %data, align 8
  ret i8* %data12
}

define internal i32 @tcc_load_object_file(%TCCState* %0, i32 %1, i64 %2) {
entry:
  %andand770 = alloca i1, align 1
  %sym_index752 = alloca i32, align 4
  %type = alloca i32, align 4
  %andand553 = alloca i1, align 1
  %oror461 = alloca i1, align 1
  %o = alloca i32, align 4
  %b = alloca %come_anon133*, align 8
  %a = alloca %come_anon133*, align 8
  %andand375 = alloca i1, align 1
  %ptr = alloca i8*, align 8
  %andand172 = alloca i1, align 1
  %andand171 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror46 = alloca i1, align 1
  %oror9 = alloca i1, align 1
  %oror8 = alloca i1, align 1
  %oror = alloca i1, align 1
  %stabstr_index = alloca i32, align 4
  %stab_index = alloca i32, align 4
  %s = alloca %Section*, align 8
  %rel_end = alloca %come_anon94*, align 8
  %rel = alloca %come_anon94*, align 8
  %symtab = alloca %come_anon88*, align 8
  %sym = alloca %come_anon88*, align 8
  %sm = alloca %SectionMergeInfo*, align 8
  %sm_table = alloca %SectionMergeInfo*, align 8
  %name = alloca i8*, align 8
  %sh_name = alloca i8*, align 8
  %old_to_new_syms = alloca i32*, align 8
  %strtab = alloca i8*, align 8
  %strsec = alloca i8*, align 8
  %ret = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %nb_syms = alloca i32, align 4
  %offseti = alloca i32, align 4
  %offset = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %size = alloca i32, align 4
  %sh = alloca %come_anon86*, align 8
  %shdr = alloca %come_anon86*, align 8
  %ehdr = alloca %come_anon84, align 8
  %castXXXX = bitcast %come_anon84* %ehdr to i8*
  %3 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %fd = alloca i32, align 4
  %fd2 = alloca i32*, align 8
  store i32 %1, i32* %fd, align 4
  store i32* %fd, i32** %fd2, align 8
  %file_offset = alloca i64, align 8
  %file_offset3 = alloca i64*, align 8
  store i64 %2, i64* %file_offset, align 4
  store i64* %file_offset, i64** %file_offset3, align 8
  store i32 0, i32* %stabstr_index, align 4
  store i32 0, i32* %stab_index, align 4
  %fd4 = load i32, i32* %fd, align 4
  %ehdr5 = load %come_anon84, %come_anon84* %ehdr, align 4
  %castAQ = bitcast %come_anon84* %ehdr to i8*
  %ehdr6 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fun_result = call i64 @read(i32 %fd4, i8* %castAQ, i64 64)
  %ehdr7 = load %come_anon84, %come_anon84* %ehdr, align 4
  %not_eq = icmp ne i64 %fun_result, 64
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  br label %tcc_load_object_file.fail1
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %ehdr10 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG = bitcast [16 x i8]* %fieldRRRR to i8*
  %gepLY = getelementptr i8, i8* %array_castG, i32 0
  %elementYYY = load i8, i8* %gepLY, align 1
  %not_eq11 = icmp ne i8 %elementYYY, 127
  store i1 %not_eq11, i1* %oror9, align 1
  br i1 %not_eq11, label %cond_jump_end, label %cond_jump_then12

tcc_load_object_file.fail1:                       ; preds = %cond_jump_then60, %cond_jump_then44, %cond_jump_then40, %cond_jump_then
  call void (i8*, ...) @error_noabort(i8* bitcast ([20 x i8]* @257 to i8*))
  ret i32 -1

cond_jump_then12:                                 ; preds = %cond_end
  %ehdr13 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR14 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG15 = bitcast [16 x i8]* %fieldRRRR14 to i8*
  %gepLY16 = getelementptr i8, i8* %array_castG15, i32 1
  %elementYYY17 = load i8, i8* %gepLY16, align 1
  %not_eq18 = icmp ne i8 %elementYYY17, 69
  %oror19 = or i1 %not_eq11, %not_eq18
  store i1 %oror19, i1* %oror9, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then12, %cond_end
  %oror_result_value = load i1, i1* %oror9, align 1
  store i1 %oror_result_value, i1* %oror8, align 1
  br i1 %oror_result_value, label %cond_jump_end21, label %cond_jump_then20

cond_jump_then20:                                 ; preds = %cond_jump_end
  %ehdr22 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR23 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG24 = bitcast [16 x i8]* %fieldRRRR23 to i8*
  %gepLY25 = getelementptr i8, i8* %array_castG24, i32 2
  %elementYYY26 = load i8, i8* %gepLY25, align 1
  %not_eq27 = icmp ne i8 %elementYYY26, 76
  %oror28 = or i1 %oror_result_value, %not_eq27
  store i1 %oror28, i1* %oror8, align 1
  br label %cond_jump_end21

cond_jump_end21:                                  ; preds = %cond_jump_then20, %cond_jump_end
  %oror_result_value29 = load i1, i1* %oror8, align 1
  store i1 %oror_result_value29, i1* %oror, align 1
  br i1 %oror_result_value29, label %cond_jump_end31, label %cond_jump_then30

cond_jump_then30:                                 ; preds = %cond_jump_end21
  %ehdr32 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR33 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG34 = bitcast [16 x i8]* %fieldRRRR33 to i8*
  %gepLY35 = getelementptr i8, i8* %array_castG34, i32 3
  %elementYYY36 = load i8, i8* %gepLY35, align 1
  %not_eq37 = icmp ne i8 %elementYYY36, 70
  %oror38 = or i1 %oror_result_value29, %not_eq37
  store i1 %oror38, i1* %oror, align 1
  br label %cond_jump_end31

cond_jump_end31:                                  ; preds = %cond_jump_then30, %cond_jump_end21
  %oror_result_value39 = load i1, i1* %oror, align 1
  br i1 %oror_result_value39, label %cond_jump_then40, label %cond_end41

cond_jump_then40:                                 ; preds = %cond_jump_end31
  br label %tcc_load_object_file.fail1
  br label %cond_end41

cond_end41:                                       ; preds = %cond_jump_then40, %cond_jump_end31
  %ehdr42 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 1
  %e_type = load i16, i16* %fieldVVV, align 2
  %not_eq43 = icmp ne i16 %e_type, 1
  br i1 %not_eq43, label %cond_jump_then44, label %cond_end45

cond_jump_then44:                                 ; preds = %cond_end41
  br label %tcc_load_object_file.fail1
  br label %cond_end45

cond_end45:                                       ; preds = %cond_jump_then44, %cond_end41
  %ehdr47 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR48 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG49 = bitcast [16 x i8]* %fieldRRRR48 to i8*
  %gepLY50 = getelementptr i8, i8* %array_castG49, i32 5
  %elementYYY51 = load i8, i8* %gepLY50, align 1
  %not_eq52 = icmp ne i8 %elementYYY51, 1
  store i1 %not_eq52, i1* %oror46, align 1
  br i1 %not_eq52, label %cond_jump_end54, label %cond_jump_then53

cond_jump_then53:                                 ; preds = %cond_end45
  %ehdr55 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV56 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 2
  %e_machine = load i16, i16* %fieldVVV56, align 2
  %not_eq57 = icmp ne i16 %e_machine, 62
  %oror58 = or i1 %not_eq52, %not_eq57
  store i1 %oror58, i1* %oror46, align 1
  br label %cond_jump_end54

cond_jump_end54:                                  ; preds = %cond_jump_then53, %cond_end45
  %oror_result_value59 = load i1, i1* %oror46, align 1
  br i1 %oror_result_value59, label %cond_jump_then60, label %cond_end61

cond_jump_then60:                                 ; preds = %cond_jump_end54
  br label %tcc_load_object_file.fail1

cond_end61:                                       ; preds = %cond_jump_end54
  %fd62 = load i32, i32* %fd, align 4
  %file_offset63 = load i64, i64* %file_offset, align 4
  %ehdr64 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV65 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 6
  %e_shoff = load i64, i64* %fieldVVV65, align 4
  %add = add i64 %file_offset63, %e_shoff
  %ehdr66 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV67 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum = load i16, i16* %fieldVVV67, align 2
  %icastC = zext i16 %e_shnum to i64
  %mul = mul i64 64, %icastC
  %fun_result68 = call i8* @load_data(i32 %fd62, i64 %add, i64 %mul)
  %castAQ69 = bitcast i8* %fun_result68 to %come_anon86*
  store %come_anon86* %castAQ69, %come_anon86** %shdr, align 8
  %ehdr70 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV71 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum72 = load i16, i16* %fieldVVV71, align 2
  %icastC73 = zext i16 %e_shnum72 to i64
  %mul74 = mul i64 24, %icastC73
  %fun_result75 = call i8* @tcc_mallocz(i64 %mul74)
  %castAQ76 = bitcast i8* %fun_result75 to %SectionMergeInfo*
  store %SectionMergeInfo* %castAQ76, %SectionMergeInfo** %sm_table, align 8
  %shdr77 = load %come_anon86*, %come_anon86** %shdr, align 8
  %ehdr78 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV79 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 13
  %e_shstrndx = load i16, i16* %fieldVVV79, align 2
  %icastKY = zext i16 %e_shstrndx to i32
  %element_addressAB = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB, i32 %icastKY
  %load_element = load %come_anon86, %come_anon86* %element_addressXYXZY, align 4
  store %come_anon86* %element_addressXYXZY, %come_anon86** %sh, align 8
  %fd80 = load i32, i32* %fd, align 4
  %file_offset81 = load i64, i64* %file_offset, align 4
  %sh82 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL = getelementptr inbounds %come_anon86, %come_anon86* %sh82, i32 0, i32 4
  %sh_offset = load i64, i64* %fieldLLL, align 4
  %add83 = add i64 %file_offset81, %sh_offset
  %sh84 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL85 = getelementptr inbounds %come_anon86, %come_anon86* %sh84, i32 0, i32 5
  %sh_size = load i64, i64* %fieldLLL85, align 4
  %fun_result86 = call i8* @load_data(i32 %fd80, i64 %add83, i64 %sh_size)
  store i8* %fun_result86, i8** %strsec, align 8
  store i32* null, i32** %old_to_new_syms, align 8
  store %come_anon88* null, %come_anon88** %symtab, align 8
  store i8* null, i8** %strtab, align 8
  store i32 0, i32* %nb_syms, align 4
  store i32 1, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end100
  %i139 = load i32, i32* %i, align 4
  %add140 = add i32 %i139, 1
  store i32 %add140, i32* %i, align 4
  %i141 = load i32, i32* %i, align 4
  %sub = sub i32 %i141, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end61
  %i87 = load i32, i32* %i, align 4
  %ehdr88 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV89 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum90 = load i16, i16* %fieldVVV89, align 2
  %icastKY91 = zext i16 %e_shnum90 to i32
  %le = icmp slt i32 %i87, %icastKY91
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %shdr92 = load %come_anon86*, %come_anon86** %shdr, align 8
  %i93 = load i32, i32* %i, align 4
  %element_addressAB94 = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY95 = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB94, i32 %i93
  %load_element96 = load %come_anon86, %come_anon86* %element_addressXYXZY95, align 4
  store %come_anon86* %element_addressXYXZY95, %come_anon86** %sh, align 8
  %sh97 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL98 = getelementptr inbounds %come_anon86, %come_anon86* %sh97, i32 0, i32 1
  %sh_type = load i32, i32* %fieldLLL98, align 4
  %eq = icmp eq i32 %sh_type, 2
  br i1 %eq, label %cond_jump_then99, label %cond_end100

cond_end_block:                                   ; preds = %loop_top_block
  store i32 1, i32* %i, align 4
  br label %loop_top_block143

cond_jump_then99:                                 ; preds = %cond_then_block
  %symtab101 = load %come_anon88*, %come_anon88** %symtab, align 8
  %icmpB = icmp ne %come_anon88* %symtab101, null
  br i1 %icmpB, label %cond_jump_then102, label %cond_end103

cond_end100:                                      ; preds = %cond_end103, %cond_then_block
  br label %loop_continue_top_block

cond_jump_then102:                                ; preds = %cond_jump_then99
  call void (i8*, ...) @error_noabort(i8* bitcast ([36 x i8]* @258 to i8*))
  br label %tcc_load_object_file.fail

cond_end103:                                      ; preds = %tcc_load_object_file.fail, %cond_jump_then99
  %sh104 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL105 = getelementptr inbounds %come_anon86, %come_anon86* %sh104, i32 0, i32 5
  %sh_size106 = load i64, i64* %fieldLLL105, align 4
  %div = sdiv i64 %sh_size106, 24
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %nb_syms, align 4
  %fd107 = load i32, i32* %fd, align 4
  %file_offset108 = load i64, i64* %file_offset, align 4
  %sh109 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL110 = getelementptr inbounds %come_anon86, %come_anon86* %sh109, i32 0, i32 4
  %sh_offset111 = load i64, i64* %fieldLLL110, align 4
  %add112 = add i64 %file_offset108, %sh_offset111
  %sh113 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL114 = getelementptr inbounds %come_anon86, %come_anon86* %sh113, i32 0, i32 5
  %sh_size115 = load i64, i64* %fieldLLL114, align 4
  %fun_result116 = call i8* @load_data(i32 %fd107, i64 %add112, i64 %sh_size115)
  %castAQ117 = bitcast i8* %fun_result116 to %come_anon88*
  store %come_anon88* %castAQ117, %come_anon88** %symtab, align 8
  %sm_table118 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i119 = load i32, i32* %i, align 4
  %element_addressAB120 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY121 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB120, i32 %i119
  %load_element122 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY121, align 8
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldTTT = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY121, i32 0, i32 0
  store %Section* %symtab_section, %Section** %fieldTTT, align 8
  %shdr123 = load %come_anon86*, %come_anon86** %shdr, align 8
  %sh124 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL125 = getelementptr inbounds %come_anon86, %come_anon86* %sh124, i32 0, i32 6
  %sh_link = load i32, i32* %fieldLLL125, align 4
  %element_addressAB126 = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY127 = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB126, i32 %sh_link
  %load_element128 = load %come_anon86, %come_anon86* %element_addressXYXZY127, align 4
  store %come_anon86* %element_addressXYXZY127, %come_anon86** %sh, align 8
  %fd129 = load i32, i32* %fd, align 4
  %file_offset130 = load i64, i64* %file_offset, align 4
  %sh131 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL132 = getelementptr inbounds %come_anon86, %come_anon86* %sh131, i32 0, i32 4
  %sh_offset133 = load i64, i64* %fieldLLL132, align 4
  %add134 = add i64 %file_offset130, %sh_offset133
  %sh135 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL136 = getelementptr inbounds %come_anon86, %come_anon86* %sh135, i32 0, i32 5
  %sh_size137 = load i64, i64* %fieldLLL136, align 4
  %fun_result138 = call i8* @load_data(i32 %fd129, i64 %add134, i64 %sh_size137)
  store i8* %fun_result138, i8** %strtab, align 8
  br label %cond_end100

tcc_load_object_file.fail:                        ; preds = %tcc_load_object_file.invalid_reloc, %cond_jump_then277, %cond_jump_then102
  store i32 -1, i32* %ret, align 4
  br label %tcc_load_object_file.the_end
  br label %cond_end103

tcc_load_object_file.the_end:                     ; preds = %cond_end_block682, %tcc_load_object_file.fail
  %symtab829 = load %come_anon88*, %come_anon88** %symtab, align 8
  %castAQ830 = bitcast %come_anon88* %symtab829 to i8*
  call void @tcc_free(i8* %castAQ830)
  %strtab831 = load i8*, i8** %strtab, align 8
  call void @tcc_free(i8* %strtab831)
  %old_to_new_syms832 = load i32*, i32** %old_to_new_syms, align 8
  %castAQ833 = bitcast i32* %old_to_new_syms832 to i8*
  call void @tcc_free(i8* %castAQ833)
  %sm_table834 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %castAQ835 = bitcast %SectionMergeInfo* %sm_table834 to i8*
  call void @tcc_free(i8* %castAQ835)
  %strsec836 = load i8*, i8** %strsec, align 8
  call void @tcc_free(i8* %strsec836)
  %shdr837 = load %come_anon86*, %come_anon86** %shdr, align 8
  %castAQ838 = bitcast %come_anon86* %shdr837 to i8*
  call void @tcc_free(i8* %castAQ838)
  %ret839 = load i32, i32* %ret, align 4
  ret i32 %ret839

loop_continue_top_block142:                       ; preds = %tcc_load_object_file.next, %cond_jump_then198, %cond_jump_then158
  %i371 = load i32, i32* %i, align 4
  %add372 = add i32 %i371, 1
  store i32 %add372, i32* %i, align 4
  %i373 = load i32, i32* %i, align 4
  %sub374 = sub i32 %i373, 1
  br label %loop_top_block143

loop_top_block143:                                ; preds = %loop_continue_top_block142, %cond_end_block
  %i144 = load i32, i32* %i, align 4
  %ehdr145 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV146 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum147 = load i16, i16* %fieldVVV146, align 2
  %icastKY148 = zext i16 %e_shnum147 to i32
  %le149 = icmp slt i32 %i144, %icastKY148
  br i1 %le149, label %cond_then_block150, label %cond_end_block151

cond_then_block150:                               ; preds = %loop_top_block143
  %i152 = load i32, i32* %i, align 4
  %ehdr153 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV154 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 13
  %e_shstrndx155 = load i16, i16* %fieldVVV154, align 2
  %icastKY156 = zext i16 %e_shstrndx155 to i32
  %eq157 = icmp eq i32 %i152, %icastKY156
  br i1 %eq157, label %cond_jump_then158, label %cond_end159

cond_end_block151:                                ; preds = %loop_top_block143
  %stab_index376 = load i32, i32* %stab_index, align 4
  %icmpA377 = icmp ne i32 %stab_index376, 0
  store i1 %icmpA377, i1* %andand375, align 1
  br i1 %icmpA377, label %cond_jump_then378, label %cond_jump_end379

cond_jump_then158:                                ; preds = %cond_then_block150
  br label %loop_continue_top_block142

cond_end159:                                      ; preds = %after_continue, %cond_then_block150
  %shdr160 = load %come_anon86*, %come_anon86** %shdr, align 8
  %i161 = load i32, i32* %i, align 4
  %element_addressAB162 = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY163 = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB162, i32 %i161
  %load_element164 = load %come_anon86, %come_anon86* %element_addressXYXZY163, align 4
  store %come_anon86* %element_addressXYXZY163, %come_anon86** %sh, align 8
  %strsec165 = load i8*, i8** %strsec, align 8
  %sh166 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL167 = getelementptr inbounds %come_anon86, %come_anon86* %sh166, i32 0, i32 0
  %sh_name168 = load i32, i32* %fieldLLL167, align 4
  %ptrToIntC = ptrtoint i8* %strsec165 to i64
  %sext = sext i32 %sh_name168 to i64
  %mul169 = mul i64 %sext, 1
  %add170 = add i64 %ptrToIntC, %mul169
  %intToPtrB = inttoptr i64 %add170 to i8*
  store i8* %intToPtrB, i8** %sh_name, align 8
  %sh173 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL174 = getelementptr inbounds %come_anon86, %come_anon86* %sh173, i32 0, i32 1
  %sh_type175 = load i32, i32* %fieldLLL174, align 4
  %not_eq176 = icmp ne i32 %sh_type175, 1
  store i1 %not_eq176, i1* %andand172, align 1
  br i1 %not_eq176, label %cond_jump_then177, label %cond_jump_end178

after_continue:                                   ; No predecessors!
  br label %cond_end159

cond_jump_then177:                                ; preds = %cond_end159
  %sh179 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL180 = getelementptr inbounds %come_anon86, %come_anon86* %sh179, i32 0, i32 1
  %sh_type181 = load i32, i32* %fieldLLL180, align 4
  %not_eq182 = icmp ne i32 %sh_type181, 4
  %andand183 = and i1 %not_eq176, %not_eq182
  store i1 %andand183, i1* %andand172, align 1
  br label %cond_jump_end178

cond_jump_end178:                                 ; preds = %cond_jump_then177, %cond_end159
  %andand_result_value = load i1, i1* %andand172, align 1
  store i1 %andand_result_value, i1* %andand171, align 1
  br i1 %andand_result_value, label %cond_jump_then184, label %cond_jump_end185

cond_jump_then184:                                ; preds = %cond_jump_end178
  %sh186 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL187 = getelementptr inbounds %come_anon86, %come_anon86* %sh186, i32 0, i32 1
  %sh_type188 = load i32, i32* %fieldLLL187, align 4
  %not_eq189 = icmp ne i32 %sh_type188, 8
  %andand190 = and i1 %andand_result_value, %not_eq189
  store i1 %andand190, i1* %andand171, align 1
  br label %cond_jump_end185

cond_jump_end185:                                 ; preds = %cond_jump_then184, %cond_jump_end178
  %andand_result_value191 = load i1, i1* %andand171, align 1
  store i1 %andand_result_value191, i1* %andand, align 1
  br i1 %andand_result_value191, label %cond_jump_then192, label %cond_jump_end193

cond_jump_then192:                                ; preds = %cond_jump_end185
  %sh_name194 = load i8*, i8** %sh_name, align 8
  %fun_result195 = call i32 @strcmp(i8* %sh_name194, i8* bitcast ([9 x i8]* @259 to i8*))
  %icmpA = icmp ne i32 %fun_result195, 0
  %andand196 = and i1 %andand_result_value191, %icmpA
  store i1 %andand196, i1* %andand, align 1
  br label %cond_jump_end193

cond_jump_end193:                                 ; preds = %cond_jump_then192, %cond_jump_end185
  %andand_result_value197 = load i1, i1* %andand, align 1
  br i1 %andand_result_value197, label %cond_jump_then198, label %cond_end199

cond_jump_then198:                                ; preds = %cond_jump_end193
  br label %loop_continue_top_block142

cond_end199:                                      ; preds = %after_continue200, %cond_jump_end193
  %sh201 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL202 = getelementptr inbounds %come_anon86, %come_anon86* %sh201, i32 0, i32 8
  %sh_addralign = load i64, i64* %fieldLLL202, align 4
  %le203 = icmp ult i64 %sh_addralign, 1
  br i1 %le203, label %cond_jump_then204, label %cond_end205

after_continue200:                                ; No predecessors!
  br label %cond_end199

cond_jump_then204:                                ; preds = %cond_end199
  %sh206 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldTU = getelementptr inbounds %come_anon86, %come_anon86* %sh206, i32 0, i32 8
  store i64 1, i64* %fieldTU, align 4
  br label %cond_end205

cond_end205:                                      ; preds = %cond_jump_then204, %cond_end199
  store i32 1, i32* %j, align 4
  br label %loop_top_block208

loop_continue_top_block207:                       ; preds = %cond_end226
  %j240 = load i32, i32* %j, align 4
  %add241 = add i32 %j240, 1
  store i32 %add241, i32* %j, align 4
  %j242 = load i32, i32* %j, align 4
  %sub243 = sub i32 %j242, 1
  br label %loop_top_block208

loop_top_block208:                                ; preds = %loop_continue_top_block207, %cond_end205
  %j209 = load i32, i32* %j, align 4
  %s1210 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL211 = getelementptr inbounds %TCCState, %TCCState* %s1210, i32 0, i32 14
  %nb_sections = load i32, i32* %fieldLLL211, align 4
  %le212 = icmp slt i32 %j209, %nb_sections
  br i1 %le212, label %cond_then_block213, label %cond_end_block214

cond_then_block213:                               ; preds = %loop_top_block208
  %s1215 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL216 = getelementptr inbounds %TCCState, %TCCState* %s1215, i32 0, i32 13
  %sections = load %Section**, %Section*** %fieldLLL216, align 8
  %j217 = load i32, i32* %j, align 4
  %element_addressAB218 = load %Section**, %Section*** %fieldLLL216, align 8
  %element_addressXYXZY219 = getelementptr inbounds %Section*, %Section** %element_addressAB218, i32 %j217
  %load_element220 = load %Section*, %Section** %element_addressXYXZY219, align 8
  store %Section* %load_element220, %Section** %s, align 8
  %s221 = load %Section*, %Section** %s, align 8
  %fieldRRRROOU = getelementptr inbounds %Section, %Section* %s221, i32 0, i32 18
  %autocast = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %sh_name222 = load i8*, i8** %sh_name, align 8
  %fun_result223 = call i32 @strcmp(i8* %autocast, i8* %sh_name222)
  %logical_denial = icmp eq i32 %fun_result223, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA224 = icmp ne i32 %castOOOO, 0
  br i1 %icmpA224, label %cond_jump_then225, label %cond_end226

cond_end_block214:                                ; preds = %loop_top_block208
  %s1244 = load %TCCState*, %TCCState** %s1, align 8
  %sh_name245 = load i8*, i8** %sh_name, align 8
  %sh246 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL247 = getelementptr inbounds %come_anon86, %come_anon86* %sh246, i32 0, i32 1
  %sh_type248 = load i32, i32* %fieldLLL247, align 4
  %sh249 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL250 = getelementptr inbounds %come_anon86, %come_anon86* %sh249, i32 0, i32 2
  %sh_flags = load i64, i64* %fieldLLL250, align 4
  %icastM251 = trunc i64 %sh_flags to i32
  %fun_result252 = call %Section* @new_section(%TCCState* %s1244, i8* %sh_name245, i32 %sh_type248, i32 %icastM251)
  store %Section* %fun_result252, %Section** %s, align 8
  %s253 = load %Section*, %Section** %s, align 8
  %sh254 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL255 = getelementptr inbounds %come_anon86, %come_anon86* %sh254, i32 0, i32 8
  %sh_addralign256 = load i64, i64* %fieldLLL255, align 4
  %icastM257 = trunc i64 %sh_addralign256 to i32
  %fieldTU258 = getelementptr inbounds %Section, %Section* %s253, i32 0, i32 8
  store i32 %icastM257, i32* %fieldTU258, align 4
  %s259 = load %Section*, %Section** %s, align 8
  %sh260 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL261 = getelementptr inbounds %come_anon86, %come_anon86* %sh260, i32 0, i32 9
  %sh_entsize = load i64, i64* %fieldLLL261, align 4
  %icastM262 = trunc i64 %sh_entsize to i32
  %fieldTU263 = getelementptr inbounds %Section, %Section* %s259, i32 0, i32 9
  store i32 %icastM262, i32* %fieldTU263, align 4
  %sm_table264 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i265 = load i32, i32* %i, align 4
  %element_addressAB266 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY267 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB266, i32 %i265
  %load_element268 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY267, align 8
  %fieldTTT269 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY267, i32 0, i32 2
  store i8 1, i8* %fieldTTT269, align 1
  br label %tcc_load_object_file.found

cond_jump_then225:                                ; preds = %cond_then_block213
  %sh_name227 = load i8*, i8** %sh_name, align 8
  %fun_result228 = call i32 @strncmp(i8* %sh_name227, i8* bitcast ([14 x i8]* @260 to i8*), i64 13)
  %logical_denial229 = icmp eq i32 %fun_result228, 0
  %castOOOO230 = zext i1 %logical_denial229 to i32
  %icmpA231 = icmp ne i32 %castOOOO230, 0
  br i1 %icmpA231, label %cond_jump_then232, label %cond_else_block

cond_end226:                                      ; preds = %cond_end233, %cond_then_block213
  br label %loop_continue_top_block207

cond_jump_then232:                                ; preds = %cond_jump_then225
  %sm_table234 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i235 = load i32, i32* %i, align 4
  %element_addressAB236 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY237 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB236, i32 %i235
  %load_element238 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY237, align 8
  %fieldTTT239 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY237, i32 0, i32 3
  store i8 1, i8* %fieldTTT239, align 1
  br label %tcc_load_object_file.next
  br label %cond_end233

cond_else_block:                                  ; preds = %cond_jump_then225
  br label %tcc_load_object_file.found
  br label %cond_end233

cond_end233:                                      ; preds = %cond_else_block, %cond_jump_then232
  br label %cond_end226

tcc_load_object_file.next:                        ; preds = %cond_end346, %cond_jump_then232
  br label %loop_continue_top_block142

tcc_load_object_file.found:                       ; preds = %cond_end_block214, %cond_else_block
  %sh270 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL271 = getelementptr inbounds %come_anon86, %come_anon86* %sh270, i32 0, i32 1
  %sh_type272 = load i32, i32* %fieldLLL271, align 4
  %s273 = load %Section*, %Section** %s, align 8
  %fieldLLL274 = getelementptr inbounds %Section, %Section* %s273, i32 0, i32 5
  %sh_type275 = load i32, i32* %fieldLLL274, align 4
  %not_eq276 = icmp ne i32 %sh_type272, %sh_type275
  br i1 %not_eq276, label %cond_jump_then277, label %cond_end278

cond_jump_then277:                                ; preds = %tcc_load_object_file.found
  call void (i8*, ...) @error_noabort(i8* bitcast ([21 x i8]* @262 to i8*))
  br label %tcc_load_object_file.fail
  br label %cond_end278

cond_end278:                                      ; preds = %cond_jump_then277, %tcc_load_object_file.found
  %s279 = load %Section*, %Section** %s, align 8
  %fieldLLL280 = getelementptr inbounds %Section, %Section* %s279, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL280, align 4
  %icastM281 = trunc i64 %data_offset to i32
  store i32 %icastM281, i32* %offset, align 4
  %sh_name282 = load i8*, i8** %sh_name, align 8
  %fun_result283 = call i32 @strcmp(i8* %sh_name282, i8* bitcast ([6 x i8]* @263 to i8*))
  %eq284 = icmp eq i32 0, %fun_result283
  br i1 %eq284, label %cond_jump_then285, label %cond_end286

cond_jump_then285:                                ; preds = %cond_end278
  %i287 = load i32, i32* %i, align 4
  store i32 %i287, i32* %stab_index, align 4
  br label %tcc_load_object_file.no_align
  br label %cond_end286

cond_end286:                                      ; preds = %cond_jump_then285, %cond_end278
  %sh_name288 = load i8*, i8** %sh_name, align 8
  %fun_result289 = call i32 @strcmp(i8* %sh_name288, i8* bitcast ([9 x i8]* @264 to i8*))
  %eq290 = icmp eq i32 0, %fun_result289
  br i1 %eq290, label %cond_jump_then291, label %cond_end292

tcc_load_object_file.no_align:                    ; preds = %cond_end310, %cond_jump_then291, %cond_jump_then285
  %sm_table321 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i322 = load i32, i32* %i, align 4
  %element_addressAB323 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY324 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB323, i32 %i322
  %load_element325 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY324, align 8
  %offset326 = load i32, i32* %offset, align 4
  %icastD327 = sext i32 %offset326 to i64
  %fieldTTT328 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY324, i32 0, i32 1
  store i64 %icastD327, i64* %fieldTTT328, align 4
  %sm_table329 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i330 = load i32, i32* %i, align 4
  %element_addressAB331 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY332 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB331, i32 %i330
  %load_element333 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY332, align 8
  %s334 = load %Section*, %Section** %s, align 8
  %fieldTTT335 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY332, i32 0, i32 0
  store %Section* %s334, %Section** %fieldTTT335, align 8
  %sh336 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL337 = getelementptr inbounds %come_anon86, %come_anon86* %sh336, i32 0, i32 5
  %sh_size338 = load i64, i64* %fieldLLL337, align 4
  %icastM339 = trunc i64 %sh_size338 to i32
  store i32 %icastM339, i32* %size, align 4
  %sh340 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL341 = getelementptr inbounds %come_anon86, %come_anon86* %sh340, i32 0, i32 1
  %sh_type342 = load i32, i32* %fieldLLL341, align 4
  %not_eq343 = icmp ne i32 %sh_type342, 8
  br i1 %not_eq343, label %cond_jump_then344, label %cond_else_block345

cond_jump_then291:                                ; preds = %cond_end286
  %i293 = load i32, i32* %i, align 4
  store i32 %i293, i32* %stabstr_index, align 4
  br label %tcc_load_object_file.no_align
  br label %cond_end292

cond_end292:                                      ; preds = %cond_jump_then291, %cond_end286
  %sh294 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL295 = getelementptr inbounds %come_anon86, %come_anon86* %sh294, i32 0, i32 8
  %sh_addralign296 = load i64, i64* %fieldLLL295, align 4
  %sub297 = sub i64 %sh_addralign296, 1
  %icastM298 = trunc i64 %sub297 to i32
  store i32 %icastM298, i32* %size, align 4
  %offset299 = load i32, i32* %offset, align 4
  %size300 = load i32, i32* %size, align 4
  %add301 = add i32 %offset299, %size300
  %size302 = load i32, i32* %size, align 4
  %xortmp = xor i32 %size302, -1
  %andtmp = and i32 %add301, %xortmp
  store i32 %andtmp, i32* %offset, align 4
  %sh303 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL304 = getelementptr inbounds %come_anon86, %come_anon86* %sh303, i32 0, i32 8
  %sh_addralign305 = load i64, i64* %fieldLLL304, align 4
  %s306 = load %Section*, %Section** %s, align 8
  %fieldLLL307 = getelementptr inbounds %Section, %Section* %s306, i32 0, i32 8
  %sh_addralign308 = load i32, i32* %fieldLLL307, align 4
  %icastD = sext i32 %sh_addralign308 to i64
  %gt = icmp ugt i64 %sh_addralign305, %icastD
  br i1 %gt, label %cond_jump_then309, label %cond_end310

cond_jump_then309:                                ; preds = %cond_end292
  %s311 = load %Section*, %Section** %s, align 8
  %sh312 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL313 = getelementptr inbounds %come_anon86, %come_anon86* %sh312, i32 0, i32 8
  %sh_addralign314 = load i64, i64* %fieldLLL313, align 4
  %icastM315 = trunc i64 %sh_addralign314 to i32
  %fieldTU316 = getelementptr inbounds %Section, %Section* %s311, i32 0, i32 8
  store i32 %icastM315, i32* %fieldTU316, align 4
  br label %cond_end310

cond_end310:                                      ; preds = %cond_jump_then309, %cond_end292
  %s317 = load %Section*, %Section** %s, align 8
  %offset318 = load i32, i32* %offset, align 4
  %icastD319 = sext i32 %offset318 to i64
  %fieldTU320 = getelementptr inbounds %Section, %Section* %s317, i32 0, i32 0
  store i64 %icastD319, i64* %fieldTU320, align 4
  br label %tcc_load_object_file.no_align

cond_jump_then344:                                ; preds = %tcc_load_object_file.no_align
  %fd347 = load i32, i32* %fd, align 4
  %file_offset348 = load i64, i64* %file_offset, align 4
  %sh349 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL350 = getelementptr inbounds %come_anon86, %come_anon86* %sh349, i32 0, i32 4
  %sh_offset351 = load i64, i64* %fieldLLL350, align 4
  %add352 = add i64 %file_offset348, %sh_offset351
  %fun_result353 = call i64 @lseek(i32 %fd347, i64 %add352, i32 0)
  %s354 = load %Section*, %Section** %s, align 8
  %size355 = load i32, i32* %size, align 4
  %icastD356 = sext i32 %size355 to i64
  %fun_result357 = call i8* @section_ptr_add(%Section* %s354, i64 %icastD356)
  store i8* %fun_result357, i8** %ptr, align 8
  %fd358 = load i32, i32* %fd, align 4
  %ptr359 = load i8*, i8** %ptr, align 8
  %size360 = load i32, i32* %size, align 4
  %icastD361 = sext i32 %size360 to i64
  %fun_result362 = call i64 @read(i32 %fd358, i8* %ptr359, i64 %icastD361)
  br label %cond_end346

cond_else_block345:                               ; preds = %tcc_load_object_file.no_align
  %s363 = load %Section*, %Section** %s, align 8
  %s364 = load %Section*, %Section** %s, align 8
  %fieldLLL365 = getelementptr inbounds %Section, %Section* %s364, i32 0, i32 0
  %data_offset366 = load i64, i64* %fieldLLL365, align 4
  %size367 = load i32, i32* %size, align 4
  %icastD368 = sext i32 %size367 to i64
  %add369 = add i64 %data_offset366, %icastD368
  %fieldTU370 = getelementptr inbounds %Section, %Section* %s363, i32 0, i32 0
  store i64 %add369, i64* %fieldTU370, align 4
  br label %cond_end346

cond_end346:                                      ; preds = %cond_else_block345, %cond_jump_then344
  br label %tcc_load_object_file.next

cond_jump_then378:                                ; preds = %cond_end_block151
  %stabstr_index380 = load i32, i32* %stabstr_index, align 4
  %icmpA381 = icmp ne i32 %stabstr_index380, 0
  %andand382 = and i1 %icmpA377, %icmpA381
  store i1 %andand382, i1* %andand375, align 1
  br label %cond_jump_end379

cond_jump_end379:                                 ; preds = %cond_jump_then378, %cond_end_block151
  %andand_result_value383 = load i1, i1* %andand375, align 1
  br i1 %andand_result_value383, label %cond_jump_then384, label %cond_end385

cond_jump_then384:                                ; preds = %cond_jump_end379
  %sm_table386 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %stab_index387 = load i32, i32* %stab_index, align 4
  %element_addressAB388 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY389 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB388, i32 %stab_index387
  %load_element390 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY389, align 8
  %fieldVVV391 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY389, i32 0, i32 0
  %s392 = load %Section*, %Section** %fieldVVV391, align 8
  store %Section* %s392, %Section** %s, align 8
  %s393 = load %Section*, %Section** %s, align 8
  %fieldLLL394 = getelementptr inbounds %Section, %Section* %s393, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL394, align 8
  %sm_table395 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %stab_index396 = load i32, i32* %stab_index, align 4
  %element_addressAB397 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY398 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB397, i32 %stab_index396
  %load_element399 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY398, align 8
  %fieldVVV400 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY398, i32 0, i32 1
  %offset401 = load i64, i64* %fieldVVV400, align 4
  %ptrToIntC402 = ptrtoint i8* %data to i64
  %mul403 = mul i64 %offset401, 1
  %add404 = add i64 %ptrToIntC402, %mul403
  %intToPtrB405 = inttoptr i64 %add404 to i8*
  %castAQ406 = bitcast i8* %intToPtrB405 to %come_anon133*
  store %come_anon133* %castAQ406, %come_anon133** %a, align 8
  %s407 = load %Section*, %Section** %s, align 8
  %fieldLLL408 = getelementptr inbounds %Section, %Section* %s407, i32 0, i32 1
  %data409 = load i8*, i8** %fieldLLL408, align 8
  %s410 = load %Section*, %Section** %s, align 8
  %fieldLLL411 = getelementptr inbounds %Section, %Section* %s410, i32 0, i32 0
  %data_offset412 = load i64, i64* %fieldLLL411, align 4
  %ptrToIntC413 = ptrtoint i8* %data409 to i64
  %mul414 = mul i64 %data_offset412, 1
  %add415 = add i64 %ptrToIntC413, %mul414
  %intToPtrB416 = inttoptr i64 %add415 to i8*
  %castAQ417 = bitcast i8* %intToPtrB416 to %come_anon133*
  store %come_anon133* %castAQ417, %come_anon133** %b, align 8
  %sm_table418 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %stabstr_index419 = load i32, i32* %stabstr_index, align 4
  %element_addressAB420 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY421 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB420, i32 %stabstr_index419
  %load_element422 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY421, align 8
  %fieldVVV423 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY421, i32 0, i32 1
  %offset424 = load i64, i64* %fieldVVV423, align 4
  %icastM425 = trunc i64 %offset424 to i32
  store i32 %icastM425, i32* %o, align 4
  br label %loop_top_block426

cond_end385:                                      ; preds = %cond_end_block431, %cond_jump_end379
  store i32 1, i32* %i, align 4
  br label %loop_top_block445

loop_top_block426:                                ; preds = %cond_then_block430, %cond_jump_then384
  %a427 = load %come_anon133*, %come_anon133** %a, align 8
  %b428 = load %come_anon133*, %come_anon133** %b, align 8
  %le429 = icmp slt %come_anon133* %a427, %b428
  br i1 %le429, label %cond_then_block430, label %cond_end_block431

cond_then_block430:                               ; preds = %loop_top_block426
  %a432 = load %come_anon133*, %come_anon133** %a, align 8
  %a433 = load %come_anon133*, %come_anon133** %a, align 8
  %fieldLLL434 = getelementptr inbounds %come_anon133, %come_anon133* %a433, i32 0, i32 0
  %n_strx = load i32, i32* %fieldLLL434, align 4
  %o435 = load i32, i32* %o, align 4
  %add436 = add i32 %n_strx, %o435
  %fieldTU437 = getelementptr inbounds %come_anon133, %come_anon133* %a432, i32 0, i32 0
  store i32 %add436, i32* %fieldTU437, align 4
  %a438 = load %come_anon133*, %come_anon133** %a, align 8
  %ptrToIntC439 = ptrtoint %come_anon133* %a438 to i64
  %add440 = add i64 %ptrToIntC439, 12
  %intToPtrB441 = inttoptr i64 %add440 to %come_anon133*
  store %come_anon133* %intToPtrB441, %come_anon133** %a, align 8
  %a442 = load %come_anon133*, %come_anon133** %a, align 8
  %ptrToIntI = ptrtoint %come_anon133* %a442 to i64
  %sub443 = sub i64 %ptrToIntI, 12
  %iintToPtrD = inttoptr i64 %sub443 to %come_anon133*
  br label %loop_top_block426

cond_end_block431:                                ; preds = %loop_top_block426
  br label %cond_end385

loop_continue_top_block444:                       ; preds = %cond_end509, %cond_jump_then479
  %i532 = load i32, i32* %i, align 4
  %add533 = add i32 %i532, 1
  store i32 %add533, i32* %i, align 4
  %i534 = load i32, i32* %i, align 4
  %sub535 = sub i32 %i534, 1
  br label %loop_top_block445

loop_top_block445:                                ; preds = %loop_continue_top_block444, %cond_end385
  %i446 = load i32, i32* %i, align 4
  %ehdr447 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV448 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum449 = load i16, i16* %fieldVVV448, align 2
  %icastKY450 = zext i16 %e_shnum449 to i32
  %le451 = icmp slt i32 %i446, %icastKY450
  br i1 %le451, label %cond_then_block452, label %cond_end_block453

cond_then_block452:                               ; preds = %loop_top_block445
  %sm_table454 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i455 = load i32, i32* %i, align 4
  %element_addressAB456 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY457 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB456, i32 %i455
  %load_element458 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY457, align 8
  %fieldVVV459 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY457, i32 0, i32 0
  %s460 = load %Section*, %Section** %fieldVVV459, align 8
  store %Section* %s460, %Section** %s, align 8
  %s462 = load %Section*, %Section** %s, align 8
  %logical_denial463 = icmp eq %Section* %s462, null
  %castOOOO464 = zext i1 %logical_denial463 to i32
  %icmpA465 = icmp ne i32 %castOOOO464, 0
  store i1 %icmpA465, i1* %oror461, align 1
  br i1 %icmpA465, label %cond_jump_end467, label %cond_jump_then466

cond_end_block453:                                ; preds = %loop_top_block445
  %sm_table536 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  store %SectionMergeInfo* %sm_table536, %SectionMergeInfo** %sm, align 8
  %nb_syms537 = load i32, i32* %nb_syms, align 4
  %icastD538 = sext i32 %nb_syms537 to i64
  %mul539 = mul i64 %icastD538, 4
  %fun_result540 = call i8* @tcc_mallocz(i64 %mul539)
  %castAQ541 = bitcast i8* %fun_result540 to i32*
  store i32* %castAQ541, i32** %old_to_new_syms, align 8
  %symtab542 = load %come_anon88*, %come_anon88** %symtab, align 8
  %ptrToIntC543 = ptrtoint %come_anon88* %symtab542 to i64
  %add544 = add i64 %ptrToIntC543, 24
  %intToPtrB545 = inttoptr i64 %add544 to %come_anon88*
  store %come_anon88* %intToPtrB545, %come_anon88** %sym, align 8
  store i32 1, i32* %i, align 4
  br label %loop_top_block547

cond_jump_then466:                                ; preds = %cond_then_block452
  %sm_table468 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i469 = load i32, i32* %i, align 4
  %element_addressAB470 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY471 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB470, i32 %i469
  %load_element472 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY471, align 8
  %fieldVVV473 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY471, i32 0, i32 2
  %new_section = load i8, i8* %fieldVVV473, align 1
  %logical_denial474 = icmp eq i8 %new_section, 0
  %castOOOO475 = zext i1 %logical_denial474 to i32
  %icmpA476 = icmp ne i32 %castOOOO475, 0
  %oror477 = or i1 %icmpA465, %icmpA476
  store i1 %oror477, i1* %oror461, align 1
  br label %cond_jump_end467

cond_jump_end467:                                 ; preds = %cond_jump_then466, %cond_then_block452
  %oror_result_value478 = load i1, i1* %oror461, align 1
  br i1 %oror_result_value478, label %cond_jump_then479, label %cond_end480

cond_jump_then479:                                ; preds = %cond_jump_end467
  br label %loop_continue_top_block444

cond_end480:                                      ; preds = %after_continue481, %cond_jump_end467
  %shdr482 = load %come_anon86*, %come_anon86** %shdr, align 8
  %i483 = load i32, i32* %i, align 4
  %element_addressAB484 = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY485 = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB484, i32 %i483
  %load_element486 = load %come_anon86, %come_anon86* %element_addressXYXZY485, align 4
  store %come_anon86* %element_addressXYXZY485, %come_anon86** %sh, align 8
  %sh487 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL488 = getelementptr inbounds %come_anon86, %come_anon86* %sh487, i32 0, i32 6
  %sh_link489 = load i32, i32* %fieldLLL488, align 4
  %gt490 = icmp ugt i32 %sh_link489, 0
  br i1 %gt490, label %cond_jump_then491, label %cond_end492

after_continue481:                                ; No predecessors!
  br label %cond_end480

cond_jump_then491:                                ; preds = %cond_end480
  %s493 = load %Section*, %Section** %s, align 8
  %sm_table494 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %sh495 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL496 = getelementptr inbounds %come_anon86, %come_anon86* %sh495, i32 0, i32 6
  %sh_link497 = load i32, i32* %fieldLLL496, align 4
  %element_addressAB498 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY499 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB498, i32 %sh_link497
  %load_element500 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY499, align 8
  %fieldVVV501 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY499, i32 0, i32 0
  %s502 = load %Section*, %Section** %fieldVVV501, align 8
  %fieldTU503 = getelementptr inbounds %Section, %Section* %s493, i32 0, i32 14
  store %Section* %s502, %Section** %fieldTU503, align 8
  br label %cond_end492

cond_end492:                                      ; preds = %cond_jump_then491, %cond_end480
  %sh504 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL505 = getelementptr inbounds %come_anon86, %come_anon86* %sh504, i32 0, i32 1
  %sh_type506 = load i32, i32* %fieldLLL505, align 4
  %eq507 = icmp eq i32 %sh_type506, 4
  br i1 %eq507, label %cond_jump_then508, label %cond_end509

cond_jump_then508:                                ; preds = %cond_end492
  %s510 = load %Section*, %Section** %s, align 8
  %sm_table511 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %sh512 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL513 = getelementptr inbounds %come_anon86, %come_anon86* %sh512, i32 0, i32 7
  %sh_info = load i32, i32* %fieldLLL513, align 4
  %element_addressAB514 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY515 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB514, i32 %sh_info
  %load_element516 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY515, align 8
  %fieldVVV517 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY515, i32 0, i32 0
  %s518 = load %Section*, %Section** %fieldVVV517, align 8
  %fieldLLL519 = getelementptr inbounds %Section, %Section* %s518, i32 0, i32 4
  %sh_num = load i32, i32* %fieldLLL519, align 4
  %fieldTU520 = getelementptr inbounds %Section, %Section* %s510, i32 0, i32 7
  store i32 %sh_num, i32* %fieldTU520, align 4
  %s1521 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL522 = getelementptr inbounds %TCCState, %TCCState* %s1521, i32 0, i32 13
  %sections523 = load %Section**, %Section*** %fieldLLL522, align 8
  %s524 = load %Section*, %Section** %s, align 8
  %fieldLLL525 = getelementptr inbounds %Section, %Section* %s524, i32 0, i32 7
  %sh_info526 = load i32, i32* %fieldLLL525, align 4
  %element_addressAB527 = load %Section**, %Section*** %fieldLLL522, align 8
  %element_addressXYXZY528 = getelementptr inbounds %Section*, %Section** %element_addressAB527, i32 %sh_info526
  %load_element529 = load %Section*, %Section** %element_addressXYXZY528, align 8
  %s530 = load %Section*, %Section** %s, align 8
  %fieldTU531 = getelementptr inbounds %Section, %Section* %load_element529, i32 0, i32 15
  store %Section* %s530, %Section** %fieldTU531, align 8
  br label %cond_end509

cond_end509:                                      ; preds = %cond_jump_then508, %cond_end492
  br label %loop_continue_top_block444

loop_continue_top_block546:                       ; preds = %cond_end566, %cond_jump_then611, %cond_end585
  %i661 = load i32, i32* %i, align 4
  %add662 = add i32 %i661, 1
  store i32 %add662, i32* %i, align 4
  %i663 = load i32, i32* %i, align 4
  %sub664 = sub i32 %i663, 1
  %sym665 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC666 = ptrtoint %come_anon88* %sym665 to i64
  %add667 = add i64 %ptrToIntC666, 24
  %intToPtrB668 = inttoptr i64 %add667 to %come_anon88*
  store %come_anon88* %intToPtrB668, %come_anon88** %sym, align 8
  %sym669 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI670 = ptrtoint %come_anon88* %sym669 to i64
  %sub671 = sub i64 %ptrToIntI670, 24
  %iintToPtrD672 = inttoptr i64 %sub671 to %come_anon88*
  br label %loop_top_block547

loop_top_block547:                                ; preds = %loop_continue_top_block546, %cond_end_block453
  %i548 = load i32, i32* %i, align 4
  %nb_syms549 = load i32, i32* %nb_syms, align 4
  %le550 = icmp slt i32 %i548, %nb_syms549
  br i1 %le550, label %cond_then_block551, label %cond_end_block552

cond_then_block551:                               ; preds = %loop_top_block547
  %sym554 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL555 = getelementptr inbounds %come_anon88, %come_anon88* %sym554, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL555, align 2
  %not_eq556 = icmp ne i16 %st_shndx, 0
  store i1 %not_eq556, i1* %andand553, align 1
  br i1 %not_eq556, label %cond_jump_then557, label %cond_jump_end558

cond_end_block552:                                ; preds = %loop_top_block547
  store i32 1, i32* %i, align 4
  br label %loop_top_block674

cond_jump_then557:                                ; preds = %cond_then_block551
  %sym559 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL560 = getelementptr inbounds %come_anon88, %come_anon88* %sym559, i32 0, i32 3
  %st_shndx561 = load i16, i16* %fieldLLL560, align 2
  %le562 = icmp ult i16 %st_shndx561, -256
  %andand563 = and i1 %not_eq556, %le562
  store i1 %andand563, i1* %andand553, align 1
  br label %cond_jump_end558

cond_jump_end558:                                 ; preds = %cond_jump_then557, %cond_then_block551
  %andand_result_value564 = load i1, i1* %andand553, align 1
  br i1 %andand_result_value564, label %cond_jump_then565, label %cond_end566

cond_jump_then565:                                ; preds = %cond_jump_end558
  %sm_table567 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %sym568 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL569 = getelementptr inbounds %come_anon88, %come_anon88* %sym568, i32 0, i32 3
  %st_shndx570 = load i16, i16* %fieldLLL569, align 2
  %icastKY571 = zext i16 %st_shndx570 to i32
  %element_addressAB572 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY573 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB572, i32 %icastKY571
  %load_element574 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY573, align 8
  store %SectionMergeInfo* %element_addressXYXZY573, %SectionMergeInfo** %sm, align 8
  %sm575 = load %SectionMergeInfo*, %SectionMergeInfo** %sm, align 8
  %fieldLLL576 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %sm575, i32 0, i32 3
  %link_once = load i8, i8* %fieldLLL576, align 1
  %icmpA577 = icmp ne i8 %link_once, 0
  br i1 %icmpA577, label %cond_jump_then578, label %cond_end579

cond_end566:                                      ; preds = %cond_end612, %cond_jump_end558
  %strtab629 = load i8*, i8** %strtab, align 8
  %sym630 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL631 = getelementptr inbounds %come_anon88, %come_anon88* %sym630, i32 0, i32 0
  %st_name632 = load i32, i32* %fieldLLL631, align 4
  %ptrToIntC633 = ptrtoint i8* %strtab629 to i64
  %sext634 = sext i32 %st_name632 to i64
  %mul635 = mul i64 %sext634, 1
  %add636 = add i64 %ptrToIntC633, %mul635
  %intToPtrB637 = inttoptr i64 %add636 to i8*
  store i8* %intToPtrB637, i8** %name, align 8
  %symtab_section638 = load %Section*, %Section** @symtab_section, align 8
  %sym639 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL640 = getelementptr inbounds %come_anon88, %come_anon88* %sym639, i32 0, i32 4
  %st_value641 = load i64, i64* %fieldLLL640, align 4
  %sym642 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL643 = getelementptr inbounds %come_anon88, %come_anon88* %sym642, i32 0, i32 5
  %st_size = load i64, i64* %fieldLLL643, align 4
  %sym644 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL645 = getelementptr inbounds %come_anon88, %come_anon88* %sym644, i32 0, i32 1
  %st_info646 = load i8, i8* %fieldLLL645, align 1
  %icastKY647 = zext i8 %st_info646 to i32
  %sym648 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL649 = getelementptr inbounds %come_anon88, %come_anon88* %sym648, i32 0, i32 2
  %st_other = load i8, i8* %fieldLLL649, align 1
  %icastKY650 = zext i8 %st_other to i32
  %sym651 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL652 = getelementptr inbounds %come_anon88, %come_anon88* %sym651, i32 0, i32 3
  %st_shndx653 = load i16, i16* %fieldLLL652, align 2
  %icastKY654 = zext i16 %st_shndx653 to i32
  %name655 = load i8*, i8** %name, align 8
  %fun_result656 = call i32 @add_elf_sym(%Section* %symtab_section638, i64 %st_value641, i64 %st_size, i32 %icastKY647, i32 %icastKY650, i32 %icastKY654, i8* %name655)
  store i32 %fun_result656, i32* %sym_index, align 4
  %old_to_new_syms657 = load i32*, i32** %old_to_new_syms, align 8
  %i658 = load i32, i32* %i, align 4
  %sym_index659 = load i32, i32* %sym_index, align 4
  %element_addressXYXY660 = getelementptr i32, i32* %old_to_new_syms657, i32 %i658
  store i32 %sym_index659, i32* %element_addressXYXY660, align 4
  br label %loop_continue_top_block546

cond_jump_then578:                                ; preds = %cond_jump_then565
  %sym580 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL581 = getelementptr inbounds %come_anon88, %come_anon88* %sym580, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL581, align 1
  %icastKY582 = zext i8 %st_info to i32
  %rshifttmp = lshr i32 %icastKY582, 4
  %not_eq583 = icmp ne i32 %rshifttmp, 0
  br i1 %not_eq583, label %cond_jump_then584, label %cond_end585

cond_end579:                                      ; preds = %after_continue604, %cond_jump_then565
  %sm605 = load %SectionMergeInfo*, %SectionMergeInfo** %sm, align 8
  %fieldLLL606 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %sm605, i32 0, i32 0
  %s607 = load %Section*, %Section** %fieldLLL606, align 8
  %logical_denial608 = icmp eq %Section* %s607, null
  %castOOOO609 = zext i1 %logical_denial608 to i32
  %icmpA610 = icmp ne i32 %castOOOO609, 0
  br i1 %icmpA610, label %cond_jump_then611, label %cond_end612

cond_jump_then584:                                ; preds = %cond_jump_then578
  %strtab586 = load i8*, i8** %strtab, align 8
  %sym587 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL588 = getelementptr inbounds %come_anon88, %come_anon88* %sym587, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL588, align 4
  %ptrToIntC589 = ptrtoint i8* %strtab586 to i64
  %sext590 = sext i32 %st_name to i64
  %mul591 = mul i64 %sext590, 1
  %add592 = add i64 %ptrToIntC589, %mul591
  %intToPtrB593 = inttoptr i64 %add592 to i8*
  store i8* %intToPtrB593, i8** %name, align 8
  %symtab_section594 = load %Section*, %Section** @symtab_section, align 8
  %name595 = load i8*, i8** %name, align 8
  %fun_result596 = call i32 @find_elf_sym(%Section* %symtab_section594, i8* %name595)
  store i32 %fun_result596, i32* %sym_index, align 4
  %sym_index597 = load i32, i32* %sym_index, align 4
  %icmpA598 = icmp ne i32 %sym_index597, 0
  br i1 %icmpA598, label %cond_jump_then599, label %cond_end600

cond_end585:                                      ; preds = %cond_end600, %cond_jump_then578
  br label %loop_continue_top_block546

cond_jump_then599:                                ; preds = %cond_jump_then584
  %old_to_new_syms601 = load i32*, i32** %old_to_new_syms, align 8
  %i602 = load i32, i32* %i, align 4
  %sym_index603 = load i32, i32* %sym_index, align 4
  %element_addressXYXY = getelementptr i32, i32* %old_to_new_syms601, i32 %i602
  store i32 %sym_index603, i32* %element_addressXYXY, align 4
  br label %cond_end600

cond_end600:                                      ; preds = %cond_jump_then599, %cond_jump_then584
  br label %cond_end585

after_continue604:                                ; No predecessors!
  br label %cond_end579

cond_jump_then611:                                ; preds = %cond_end579
  br label %loop_continue_top_block546

cond_end612:                                      ; preds = %after_continue613, %cond_end579
  %sym614 = load %come_anon88*, %come_anon88** %sym, align 8
  %sm615 = load %SectionMergeInfo*, %SectionMergeInfo** %sm, align 8
  %fieldLLL616 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %sm615, i32 0, i32 0
  %s617 = load %Section*, %Section** %fieldLLL616, align 8
  %fieldLLL618 = getelementptr inbounds %Section, %Section* %s617, i32 0, i32 4
  %sh_num619 = load i32, i32* %fieldLLL618, align 4
  %icastG = trunc i32 %sh_num619 to i16
  %fieldTU620 = getelementptr inbounds %come_anon88, %come_anon88* %sym614, i32 0, i32 3
  store i16 %icastG, i16* %fieldTU620, align 2
  %sym621 = load %come_anon88*, %come_anon88** %sym, align 8
  %sym622 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL623 = getelementptr inbounds %come_anon88, %come_anon88* %sym622, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL623, align 4
  %sm624 = load %SectionMergeInfo*, %SectionMergeInfo** %sm, align 8
  %fieldLLL625 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %sm624, i32 0, i32 1
  %offset626 = load i64, i64* %fieldLLL625, align 4
  %add627 = add i64 %st_value, %offset626
  %fieldTU628 = getelementptr inbounds %come_anon88, %come_anon88* %sym621, i32 0, i32 4
  store i64 %add627, i64* %fieldTU628, align 4
  br label %cond_end566

after_continue613:                                ; No predecessors!
  br label %cond_end612

loop_continue_top_block673:                       ; preds = %end_blockX, %cond_jump_then694
  %i825 = load i32, i32* %i, align 4
  %add826 = add i32 %i825, 1
  store i32 %add826, i32* %i, align 4
  %i827 = load i32, i32* %i, align 4
  %sub828 = sub i32 %i827, 1
  br label %loop_top_block674

loop_top_block674:                                ; preds = %loop_continue_top_block673, %cond_end_block552
  %i675 = load i32, i32* %i, align 4
  %ehdr676 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV677 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum678 = load i16, i16* %fieldVVV677, align 2
  %icastKY679 = zext i16 %e_shnum678 to i32
  %le680 = icmp slt i32 %i675, %icastKY679
  br i1 %le680, label %cond_then_block681, label %cond_end_block682

cond_then_block681:                               ; preds = %loop_top_block674
  %sm_table683 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i684 = load i32, i32* %i, align 4
  %element_addressAB685 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY686 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB685, i32 %i684
  %load_element687 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY686, align 8
  %fieldVVV688 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY686, i32 0, i32 0
  %s689 = load %Section*, %Section** %fieldVVV688, align 8
  store %Section* %s689, %Section** %s, align 8
  %s690 = load %Section*, %Section** %s, align 8
  %logical_denial691 = icmp eq %Section* %s690, null
  %castOOOO692 = zext i1 %logical_denial691 to i32
  %icmpA693 = icmp ne i32 %castOOOO692, 0
  br i1 %icmpA693, label %cond_jump_then694, label %cond_end695

cond_end_block682:                                ; preds = %loop_top_block674
  store i32 0, i32* %ret, align 4
  br label %tcc_load_object_file.the_end

cond_jump_then694:                                ; preds = %cond_then_block681
  br label %loop_continue_top_block673

cond_end695:                                      ; preds = %after_continue696, %cond_then_block681
  %shdr697 = load %come_anon86*, %come_anon86** %shdr, align 8
  %i698 = load i32, i32* %i, align 4
  %element_addressAB699 = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY700 = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB699, i32 %i698
  %load_element701 = load %come_anon86, %come_anon86* %element_addressXYXZY700, align 4
  store %come_anon86* %element_addressXYXZY700, %come_anon86** %sh, align 8
  %sm_table702 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %i703 = load i32, i32* %i, align 4
  %element_addressAB704 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY705 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB704, i32 %i703
  %load_element706 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY705, align 8
  %fieldVVV707 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY705, i32 0, i32 1
  %offset708 = load i64, i64* %fieldVVV707, align 4
  %icastM709 = trunc i64 %offset708 to i32
  store i32 %icastM709, i32* %offset, align 4
  %s710 = load %Section*, %Section** %s, align 8
  %fieldLLL711 = getelementptr inbounds %Section, %Section* %s710, i32 0, i32 5
  %sh_type712 = load i32, i32* %fieldLLL711, align 4
  %eqtmp = icmp eq i32 %sh_type712, 4
  br i1 %eqtmp, label %cond_then_block713, label %cond_else_blockX

after_continue696:                                ; No predecessors!
  br label %cond_end695

end_blockX:                                       ; preds = %cond_else_blockX823, %cond_then_block822, %cond_end_block751
  br label %loop_continue_top_block673

cond_then_block713:                               ; preds = %cond_end695
  %sm_table714 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %sh715 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL716 = getelementptr inbounds %come_anon86, %come_anon86* %sh715, i32 0, i32 7
  %sh_info717 = load i32, i32* %fieldLLL716, align 4
  %element_addressAB718 = load %SectionMergeInfo*, %SectionMergeInfo** %sm_table, align 8
  %element_addressXYXZY719 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressAB718, i32 %sh_info717
  %load_element720 = load %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY719, align 8
  %fieldVVV721 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %element_addressXYXZY719, i32 0, i32 1
  %offset722 = load i64, i64* %fieldVVV721, align 4
  %icastM723 = trunc i64 %offset722 to i32
  store i32 %icastM723, i32* %offseti, align 4
  %s724 = load %Section*, %Section** %s, align 8
  %fieldLLL725 = getelementptr inbounds %Section, %Section* %s724, i32 0, i32 1
  %data726 = load i8*, i8** %fieldLLL725, align 8
  %s727 = load %Section*, %Section** %s, align 8
  %fieldLLL728 = getelementptr inbounds %Section, %Section* %s727, i32 0, i32 0
  %data_offset729 = load i64, i64* %fieldLLL728, align 4
  %ptrToIntC730 = ptrtoint i8* %data726 to i64
  %mul731 = mul i64 %data_offset729, 1
  %add732 = add i64 %ptrToIntC730, %mul731
  %intToPtrB733 = inttoptr i64 %add732 to i8*
  %castAQ734 = bitcast i8* %intToPtrB733 to %come_anon94*
  store %come_anon94* %castAQ734, %come_anon94** %rel_end, align 8
  %s735 = load %Section*, %Section** %s, align 8
  %fieldLLL736 = getelementptr inbounds %Section, %Section* %s735, i32 0, i32 1
  %data737 = load i8*, i8** %fieldLLL736, align 8
  %offset738 = load i32, i32* %offset, align 4
  %ptrToIntC739 = ptrtoint i8* %data737 to i64
  %sext740 = sext i32 %offset738 to i64
  %mul741 = mul i64 %sext740, 1
  %add742 = add i64 %ptrToIntC739, %mul741
  %intToPtrB743 = inttoptr i64 %add742 to i8*
  %castAQ744 = bitcast i8* %intToPtrB743 to %come_anon94*
  store %come_anon94* %castAQ744, %come_anon94** %rel, align 8
  br label %loop_top_block746

cond_else_blockX:                                 ; preds = %after_break, %cond_end695
  br label %cond_then_block822

loop_continue_top_block745:                       ; preds = %cond_end786
  %rel814 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntC815 = ptrtoint %come_anon94* %rel814 to i64
  %add816 = add i64 %ptrToIntC815, 24
  %intToPtrB817 = inttoptr i64 %add816 to %come_anon94*
  store %come_anon94* %intToPtrB817, %come_anon94** %rel, align 8
  %rel818 = load %come_anon94*, %come_anon94** %rel, align 8
  %ptrToIntI819 = ptrtoint %come_anon94* %rel818 to i64
  %sub820 = sub i64 %ptrToIntI819, 24
  %iintToPtrD821 = inttoptr i64 %sub820 to %come_anon94*
  br label %loop_top_block746

loop_top_block746:                                ; preds = %loop_continue_top_block745, %cond_then_block713
  %rel747 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel_end748 = load %come_anon94*, %come_anon94** %rel_end, align 8
  %le749 = icmp slt %come_anon94* %rel747, %rel_end748
  br i1 %le749, label %cond_then_block750, label %cond_end_block751

cond_then_block750:                               ; preds = %loop_top_block746
  %rel753 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL754 = getelementptr inbounds %come_anon94, %come_anon94* %rel753, i32 0, i32 1
  %r_info = load i64, i64* %fieldLLL754, align 4
  %icastM755 = trunc i64 %r_info to i32
  store i32 %icastM755, i32* %type, align 4
  %rel756 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL757 = getelementptr inbounds %come_anon94, %come_anon94* %rel756, i32 0, i32 1
  %r_info758 = load i64, i64* %fieldLLL757, align 4
  %rshifttmp759 = lshr i64 %r_info758, 32
  %icastM760 = trunc i64 %rshifttmp759 to i32
  store i32 %icastM760, i32* %sym_index752, align 4
  %sym_index761 = load i32, i32* %sym_index752, align 4
  %nb_syms762 = load i32, i32* %nb_syms, align 4
  %gteq_unsinged = icmp uge i32 %sym_index761, %nb_syms762
  br i1 %gteq_unsinged, label %cond_jump_then763, label %cond_end764

cond_end_block751:                                ; preds = %loop_top_block746
  br label %end_blockX

cond_jump_then763:                                ; preds = %cond_then_block750
  br label %tcc_load_object_file.invalid_reloc
  br label %cond_end764

cond_end764:                                      ; preds = %cond_jump_then763, %cond_then_block750
  %old_to_new_syms765 = load i32*, i32** %old_to_new_syms, align 8
  %sym_index766 = load i32, i32* %sym_index752, align 4
  %element_addressAB767 = load i32*, i32** %old_to_new_syms, align 8
  %element_addressXYXZY768 = getelementptr inbounds i32, i32* %element_addressAB767, i32 %sym_index766
  %load_element769 = load i32, i32* %element_addressXYXZY768, align 4
  store i32 %load_element769, i32* %sym_index752, align 4
  %sym_index771 = load i32, i32* %sym_index752, align 4
  %logical_denial772 = icmp eq i32 %sym_index771, 0
  %castOOOO773 = zext i1 %logical_denial772 to i32
  %icmpA774 = icmp ne i32 %castOOOO773, 0
  store i1 %icmpA774, i1* %andand770, align 1
  br i1 %icmpA774, label %cond_jump_then775, label %cond_jump_end776

tcc_load_object_file.invalid_reloc:               ; preds = %cond_jump_then785, %cond_jump_then763
  %i787 = load i32, i32* %i, align 4
  %strsec788 = load i8*, i8** %strsec, align 8
  %sh789 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL790 = getelementptr inbounds %come_anon86, %come_anon86* %sh789, i32 0, i32 0
  %sh_name791 = load i32, i32* %fieldLLL790, align 4
  %ptrToIntC792 = ptrtoint i8* %strsec788 to i64
  %sext793 = sext i32 %sh_name791 to i64
  %mul794 = mul i64 %sext793, 1
  %add795 = add i64 %ptrToIntC792, %mul794
  %intToPtrB796 = inttoptr i64 %add795 to i8*
  %rel797 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL798 = getelementptr inbounds %come_anon94, %come_anon94* %rel797, i32 0, i32 0
  %r_offset = load i64, i64* %fieldLLL798, align 4
  call void (i8*, ...) @error_noabort(i8* bitcast ([43 x i8]* @265 to i8*), i32 %i787, i8* %intToPtrB796, i64 %r_offset)
  br label %tcc_load_object_file.fail
  br label %cond_end786

cond_jump_then775:                                ; preds = %cond_end764
  %sm777 = load %SectionMergeInfo*, %SectionMergeInfo** %sm, align 8
  %fieldLLL778 = getelementptr inbounds %SectionMergeInfo, %SectionMergeInfo* %sm777, i32 0, i32 3
  %link_once779 = load i8, i8* %fieldLLL778, align 1
  %logical_denial780 = icmp eq i8 %link_once779, 0
  %castOOOO781 = zext i1 %logical_denial780 to i32
  %icmpA782 = icmp ne i32 %castOOOO781, 0
  %andand783 = and i1 %icmpA774, %icmpA782
  store i1 %andand783, i1* %andand770, align 1
  br label %cond_jump_end776

cond_jump_end776:                                 ; preds = %cond_jump_then775, %cond_end764
  %andand_result_value784 = load i1, i1* %andand770, align 1
  br i1 %andand_result_value784, label %cond_jump_then785, label %cond_end786

cond_jump_then785:                                ; preds = %cond_jump_end776
  br label %tcc_load_object_file.invalid_reloc

cond_end786:                                      ; preds = %tcc_load_object_file.invalid_reloc, %cond_jump_end776
  %rel799 = load %come_anon94*, %come_anon94** %rel, align 8
  %sym_index800 = load i32, i32* %sym_index752, align 4
  %icastC801 = zext i32 %sym_index800 to i64
  %lshifttmp = shl i64 %icastC801, 32
  %type802 = load i32, i32* %type, align 4
  %icastD803 = sext i32 %type802 to i64
  %add804 = add i64 %lshifttmp, %icastD803
  %fieldTU805 = getelementptr inbounds %come_anon94, %come_anon94* %rel799, i32 0, i32 1
  store i64 %add804, i64* %fieldTU805, align 4
  %rel806 = load %come_anon94*, %come_anon94** %rel, align 8
  %rel807 = load %come_anon94*, %come_anon94** %rel, align 8
  %fieldLLL808 = getelementptr inbounds %come_anon94, %come_anon94* %rel807, i32 0, i32 0
  %r_offset809 = load i64, i64* %fieldLLL808, align 4
  %offseti810 = load i32, i32* %offseti, align 4
  %icastD811 = sext i32 %offseti810 to i64
  %add812 = add i64 %r_offset809, %icastD811
  %fieldTU813 = getelementptr inbounds %come_anon94, %come_anon94* %rel806, i32 0, i32 0
  store i64 %add812, i64* %fieldTU813, align 4
  br label %loop_continue_top_block745

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX823

cond_then_block822:                               ; preds = %cond_else_blockX
  br label %end_blockX

cond_else_blockX823:                              ; preds = %after_break824, %after_break
  br label %end_blockX

after_break824:                                   ; No predecessors!
  br label %cond_else_blockX823
}

define internal i32 @get_be32(i8* %0) {
entry:
  %b = alloca i8*, align 8
  %b1 = alloca i8**, align 8
  store i8* %0, i8** %b, align 8
  store i8** %b, i8*** %b1, align 8
  %b2 = load i8*, i8** %b, align 8
  %element_addressAB = load i8*, i8** %b, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 3
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %b3 = load i8*, i8** %b, align 8
  %element_addressAB4 = load i8*, i8** %b, align 8
  %element_addressXYXZY5 = getelementptr inbounds i8, i8* %element_addressAB4, i32 2
  %load_element6 = load i8, i8* %element_addressXYXZY5, align 1
  %icastKY = zext i8 %load_element6 to i32
  %lshifttmp = shl i32 %icastKY, 8
  %icastKY7 = zext i8 %load_element to i32
  %ortmp = or i32 %icastKY7, %lshifttmp
  %b8 = load i8*, i8** %b, align 8
  %element_addressAB9 = load i8*, i8** %b, align 8
  %element_addressXYXZY10 = getelementptr inbounds i8, i8* %element_addressAB9, i32 1
  %load_element11 = load i8, i8* %element_addressXYXZY10, align 1
  %icastKY12 = zext i8 %load_element11 to i32
  %lshifttmp13 = shl i32 %icastKY12, 16
  %ortmp14 = or i32 %ortmp, %lshifttmp13
  %b15 = load i8*, i8** %b, align 8
  %element_addressAB16 = load i8*, i8** %b, align 8
  %element_addressXYXZY17 = getelementptr inbounds i8, i8* %element_addressAB16, i32 0
  %load_element18 = load i8, i8* %element_addressXYXZY17, align 1
  %icastKY19 = zext i8 %load_element18 to i32
  %lshifttmp20 = shl i32 %icastKY19, 24
  %ortmp21 = or i32 %ortmp14, %lshifttmp20
  ret i32 %ortmp21
}

define internal i32 @tcc_load_alacarte(%TCCState* %0, i32 %1, i32 %2) {
entry:
  %sym = alloca %come_anon88*, align 8
  %ar_index = alloca i8*, align 8
  %p = alloca i8*, align 8
  %ar_names = alloca i8*, align 8
  %data = alloca i8*, align 8
  %ret = alloca i32, align 4
  %off = alloca i32, align 4
  %sym_index = alloca i32, align 4
  %nsyms = alloca i32, align 4
  %bound = alloca i32, align 4
  %i = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %fd = alloca i32, align 4
  %fd2 = alloca i32*, align 8
  store i32 %1, i32* %fd, align 4
  store i32* %fd, i32** %fd2, align 8
  %size = alloca i32, align 4
  %size3 = alloca i32*, align 8
  store i32 %2, i32* %size, align 4
  store i32* %size, i32** %size3, align 8
  %size4 = load i32, i32* %size, align 4
  %icastD = sext i32 %size4 to i64
  %fun_result = call i8* @tcc_malloc(i64 %icastD)
  store i8* %fun_result, i8** %data, align 8
  %fd5 = load i32, i32* %fd, align 4
  %data6 = load i8*, i8** %data, align 8
  %size7 = load i32, i32* %size, align 4
  %icastD8 = sext i32 %size7 to i64
  %fun_result9 = call i64 @read(i32 %fd5, i8* %data6, i64 %icastD8)
  %size10 = load i32, i32* %size, align 4
  %icastD11 = sext i32 %size10 to i64
  %not_eq = icmp ne i64 %fun_result9, %icastD11
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  br label %tcc_load_alacarte.fail
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %data12 = load i8*, i8** %data, align 8
  %fun_result13 = call i32 @get_be32(i8* %data12)
  store i32 %fun_result13, i32* %nsyms, align 4
  %data14 = load i8*, i8** %data, align 8
  %ptrToIntC = ptrtoint i8* %data14 to i64
  %add = add i64 %ptrToIntC, 4
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %ar_index, align 8
  %ar_index15 = load i8*, i8** %ar_index, align 8
  %nsyms16 = load i32, i32* %nsyms, align 4
  %mul = mul i32 %nsyms16, 4
  %ptrToIntC17 = ptrtoint i8* %ar_index15 to i64
  %sext = sext i32 %mul to i64
  %mul18 = mul i64 %sext, 1
  %add19 = add i64 %ptrToIntC17, %mul18
  %intToPtrB20 = inttoptr i64 %add19 to i8*
  store i8* %intToPtrB20, i8** %ar_names, align 8
  br label %loop_top_block

tcc_load_alacarte.fail:                           ; preds = %cond_jump_then62, %cond_jump_then
  store i32 -1, i32* %ret, align 4
  br label %tcc_load_alacarte.the_end
  br label %cond_end63

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  store i32 0, i32* %bound, align 4
  %ar_names21 = load i8*, i8** %ar_names, align 8
  store i8* %ar_names21, i8** %p, align 8
  store i32 0, i32* %i, align 4
  br label %loop_top_block23

loop_continue_top_block:                          ; preds = %cond_end_block26
  %bound80 = load i32, i32* %bound, align 4
  %icmpA81 = icmp ne i32 %bound80, 0
  br i1 %icmpA81, label %loop_top_block, label %cond_end_block

cond_end_block:                                   ; preds = %loop_continue_top_block
  store i32 0, i32* %ret, align 4
  br label %tcc_load_alacarte.the_end

loop_continue_top_block22:                        ; preds = %cond_end31
  %i64 = load i32, i32* %i, align 4
  %add65 = add i32 %i64, 1
  store i32 %add65, i32* %i, align 4
  %i66 = load i32, i32* %i, align 4
  %sub = sub i32 %i66, 1
  %p67 = load i8*, i8** %p, align 8
  %p68 = load i8*, i8** %p, align 8
  %fun_result69 = call i64 @strlen(i8* %p68)
  %add70 = add i64 %fun_result69, 1
  %ptrToIntC71 = ptrtoint i8* %p67 to i64
  %mul72 = mul i64 %add70, 1
  %add73 = add i64 %ptrToIntC71, %mul72
  %intToPtrB74 = inttoptr i64 %add73 to i8*
  store i8* %intToPtrB74, i8** %p, align 8
  %p75 = load i8*, i8** %p, align 8
  %fun_result76 = call i64 @strlen(i8* %p75)
  %add77 = add i64 %fun_result76, 1
  %ptrToIntI = ptrtoint i8* %intToPtrB74 to i64
  %mul78 = mul i64 %add77, 1
  %sub79 = sub i64 %ptrToIntI, %mul78
  %iintToPtrD = inttoptr i64 %sub79 to i8*
  br label %loop_top_block23

loop_top_block23:                                 ; preds = %loop_continue_top_block22, %loop_top_block
  %i24 = load i32, i32* %i, align 4
  %nsyms25 = load i32, i32* %nsyms, align 4
  %le = icmp slt i32 %i24, %nsyms25
  br i1 %le, label %cond_then_block, label %cond_end_block26

cond_then_block:                                  ; preds = %loop_top_block23
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %p27 = load i8*, i8** %p, align 8
  %fun_result28 = call i32 @find_elf_sym(%Section* %symtab_section, i8* %p27)
  store i32 %fun_result28, i32* %sym_index, align 4
  %sym_index29 = load i32, i32* %sym_index, align 4
  %icmpA = icmp ne i32 %sym_index29, 0
  br i1 %icmpA, label %cond_jump_then30, label %cond_end31

cond_end_block26:                                 ; preds = %loop_top_block23
  br label %loop_continue_top_block

cond_jump_then30:                                 ; preds = %cond_then_block
  %symtab_section32 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %symtab_section32, i32 0, i32 1
  %data33 = load i8*, i8** %fieldLLL, align 8
  %castAQ = bitcast i8* %data33 to %come_anon88*
  %sym_index34 = load i32, i32* %sym_index, align 4
  %castXYXXYXYXY = bitcast i8** %fieldLLL to %come_anon88**
  %element_addressAB = load %come_anon88*, %come_anon88** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon88, %come_anon88* %element_addressAB, i32 %sym_index34
  %load_element = load %come_anon88, %come_anon88* %element_addressXYXZY, align 4
  store %come_anon88* %element_addressXYXZY, %come_anon88** %sym, align 8
  %sym35 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL36 = getelementptr inbounds %come_anon88, %come_anon88* %sym35, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL36, align 2
  %eq = icmp eq i16 %st_shndx, 0
  br i1 %eq, label %cond_jump_then37, label %cond_end38

cond_end31:                                       ; preds = %cond_end38, %cond_then_block
  br label %loop_continue_top_block22

cond_jump_then37:                                 ; preds = %cond_jump_then30
  %ar_index39 = load i8*, i8** %ar_index, align 8
  %i40 = load i32, i32* %i, align 4
  %mul41 = mul i32 %i40, 4
  %ptrToIntC42 = ptrtoint i8* %ar_index39 to i64
  %sext43 = sext i32 %mul41 to i64
  %mul44 = mul i64 %sext43, 1
  %add45 = add i64 %ptrToIntC42, %mul44
  %intToPtrB46 = inttoptr i64 %add45 to i8*
  %fun_result47 = call i32 @get_be32(i8* %intToPtrB46)
  %icastD48 = sext i32 %fun_result47 to i64
  %add49 = add i64 %icastD48, 60
  %icastM = trunc i64 %add49 to i32
  store i32 %icastM, i32* %off, align 4
  %bound50 = load i32, i32* %bound, align 4
  %add51 = add i32 %bound50, 1
  store i32 %add51, i32* %bound, align 4
  %fd52 = load i32, i32* %fd, align 4
  %off53 = load i32, i32* %off, align 4
  %icastD54 = sext i32 %off53 to i64
  %fun_result55 = call i64 @lseek(i32 %fd52, i64 %icastD54, i32 0)
  %s156 = load %TCCState*, %TCCState** %s1, align 8
  %fd57 = load i32, i32* %fd, align 4
  %off58 = load i32, i32* %off, align 4
  %icastD59 = sext i32 %off58 to i64
  %fun_result60 = call i32 @tcc_load_object_file(%TCCState* %s156, i32 %fd57, i64 %icastD59)
  %le61 = icmp slt i32 %fun_result60, 0
  br i1 %le61, label %cond_jump_then62, label %cond_end63

cond_end38:                                       ; preds = %cond_end63, %cond_jump_then30
  br label %cond_end31

cond_jump_then62:                                 ; preds = %cond_jump_then37
  br label %tcc_load_alacarte.fail

cond_end63:                                       ; preds = %tcc_load_alacarte.fail, %cond_jump_then37
  br label %cond_end38

tcc_load_alacarte.the_end:                        ; preds = %cond_end_block, %tcc_load_alacarte.fail
  %data82 = load i8*, i8** %data, align 8
  call void @tcc_free(i8* %data82)
  %ret83 = load i32, i32* %ret, align 4
  ret i32 %ret83
}

define internal i32 @tcc_load_archive(%TCCState* %0, i32 %1) {
entry:
  %oror64 = alloca i1, align 1
  %oror63 = alloca i1, align 1
  %oror = alloca i1, align 1
  %file_offset = alloca i64, align 8
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %size = alloca i32, align 4
  %magic = alloca [8 x i8], align 1
  %ar_name = alloca [17 x i8], align 1
  %ar_size = alloca [11 x i8], align 1
  %hdr = alloca %ArchiveHeader, align 8
  %castXXXX = bitcast %ArchiveHeader* %hdr to i8*
  %2 = call i8* @memset(i8* %castXXXX, i32 0, i64 60)
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %fd = alloca i32, align 4
  %fd2 = alloca i32*, align 8
  store i32 %1, i32* %fd, align 4
  store i32* %fd, i32** %fd2, align 8
  %fd3 = load i32, i32* %fd, align 4
  %castBA = bitcast [8 x i8]* %magic to i8*
  %fun_result = call i64 @read(i32 %fd3, i8* %castBA, i64 8)
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end54
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %fd4 = load i32, i32* %fd, align 4
  %hdr5 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %castAQ = bitcast %ArchiveHeader* %hdr to i8*
  %hdr6 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fun_result7 = call i64 @read(i32 %fd4, i8* %castAQ, i64 60)
  %icastM = trunc i64 %fun_result7 to i32
  store i32 %icastM, i32* %len, align 4
  %len8 = load i32, i32* %len, align 4
  %eq = icmp eq i32 %len8, 0
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  ret i32 0

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_end:                                         ; preds = %after_break, %cond_then_block
  %len9 = load i32, i32* %len, align 4
  %hdr10 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %not_eq = icmp ne i32 %len9, 60
  br i1 %not_eq, label %cond_jump_then11, label %cond_end12

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then11:                                 ; preds = %cond_end
  call void (i8*, ...) @error_noabort(i8* bitcast ([16 x i8]* @266 to i8*))
  ret i32 -1

cond_end12:                                       ; preds = %cond_end
  %castBA13 = bitcast [11 x i8]* %ar_size to i8*
  %hdr14 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fieldRRRR = getelementptr inbounds %ArchiveHeader, %ArchiveHeader* %hdr, i32 0, i32 5
  %castBA15 = bitcast [10 x i8]* %fieldRRRR to i8*
  %hdr16 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fieldRRRR17 = getelementptr inbounds %ArchiveHeader, %ArchiveHeader* %hdr, i32 0, i32 5
  %fun_result18 = call i8* @memcpy(i8* %castBA13, i8* %castBA15, i64 10)
  %hdr19 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fieldRRRR20 = getelementptr inbounds %ArchiveHeader, %ArchiveHeader* %hdr, i32 0, i32 5
  %array_castA = bitcast [11 x i8]* %ar_size to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i64 10
  store i8 0, i8* %gepBX, align 1
  %autocast = bitcast [11 x i8]* %ar_size to i8*
  %fun_result21 = call i64 @strtol(i8* %autocast, i8** null, i32 0)
  %icastM22 = trunc i64 %fun_result21 to i32
  store i32 %icastM22, i32* %size, align 4
  %castBA23 = bitcast [17 x i8]* %ar_name to i8*
  %hdr24 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fieldRRRR25 = getelementptr inbounds %ArchiveHeader, %ArchiveHeader* %hdr, i32 0, i32 0
  %castBA26 = bitcast [16 x i8]* %fieldRRRR25 to i8*
  %hdr27 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fieldRRRR28 = getelementptr inbounds %ArchiveHeader, %ArchiveHeader* %hdr, i32 0, i32 0
  %fun_result29 = call i8* @memcpy(i8* %castBA23, i8* %castBA26, i64 16)
  %hdr30 = load %ArchiveHeader, %ArchiveHeader* %hdr, align 1
  %fieldRRRR31 = getelementptr inbounds %ArchiveHeader, %ArchiveHeader* %hdr, i32 0, i32 0
  store i32 15, i32* %i, align 4
  br label %loop_top_block33

loop_continue_top_block32:                        ; preds = %cond_end40
  %i42 = load i32, i32* %i, align 4
  %sub = sub i32 %i42, 1
  store i32 %sub, i32* %i, align 4
  %add = add i32 %sub, 1
  br label %loop_top_block33

loop_top_block33:                                 ; preds = %loop_continue_top_block32, %cond_end12
  %i34 = load i32, i32* %i, align 4
  %gteq_signed = icmp sge i32 %i34, 0
  br i1 %gteq_signed, label %cond_then_block35, label %cond_end_block36

cond_then_block35:                                ; preds = %loop_top_block33
  %i37 = load i32, i32* %i, align 4
  %array_castG = bitcast [17 x i8]* %ar_name to i8*
  %gepLY = getelementptr i8, i8* %array_castG, i32 %i37
  %elementYYY = load i8, i8* %gepLY, align 1
  %icastL = sext i8 %elementYYY to i32
  %not_eq38 = icmp ne i32 %icastL, 32
  br i1 %not_eq38, label %cond_jump_then39, label %cond_end40

cond_end_block36:                                 ; preds = %cond_jump_then39, %loop_top_block33
  %i43 = load i32, i32* %i, align 4
  %add44 = add i32 %i43, 1
  %array_castA45 = bitcast [17 x i8]* %ar_name to i8*
  %gepBX46 = getelementptr i8, i8* %array_castA45, i32 %add44
  store i8 0, i8* %gepBX46, align 1
  %fd47 = load i32, i32* %fd, align 4
  %fun_result48 = call i64 @lseek(i32 %fd47, i64 0, i32 1)
  store i64 %fun_result48, i64* %file_offset, align 4
  %size49 = load i32, i32* %size, align 4
  %add50 = add i32 %size49, 1
  %andtmp = and i32 %add50, -2
  store i32 %andtmp, i32* %size, align 4
  %autocast51 = bitcast [17 x i8]* %ar_name to i8*
  %fun_result52 = call i32 @strcmp(i8* %autocast51, i8* bitcast ([2 x i8]* @267 to i8*))
  %logical_denial = icmp eq i32 %fun_result52, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then53, label %cond_jump_elif0

cond_jump_then39:                                 ; preds = %cond_then_block35
  br label %cond_end_block36

cond_end40:                                       ; preds = %after_break41, %cond_then_block35
  br label %loop_continue_top_block32

after_break41:                                    ; No predecessors!
  br label %cond_end40

cond_jump_then53:                                 ; preds = %cond_end_block36
  %s155 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s155, i32 0, i32 30
  %alacarte_link = load i32, i32* %fieldLLL, align 4
  %icmpA56 = icmp ne i32 %alacarte_link, 0
  br i1 %icmpA56, label %cond_jump_then57, label %cond_end58

cond_jump_elif0:                                  ; preds = %cond_end_block36
  %autocast65 = bitcast [17 x i8]* %ar_name to i8*
  %fun_result66 = call i32 @strcmp(i8* %autocast65, i8* bitcast ([3 x i8]* @268 to i8*))
  %logical_denial67 = icmp eq i32 %fun_result66, 0
  %castOOOO68 = zext i1 %logical_denial67 to i32
  %icmpA69 = icmp ne i32 %castOOOO68, 0
  store i1 %icmpA69, i1* %oror64, align 1
  br i1 %icmpA69, label %cond_jump_end, label %cond_jump_then70

cond_jump_elif_then0:                             ; preds = %cond_jump_end87
  br label %cond_end54

cond_else_block:                                  ; preds = %cond_jump_end87
  %s195 = load %TCCState*, %TCCState** %s1, align 8
  %fd96 = load i32, i32* %fd, align 4
  %file_offset97 = load i64, i64* %file_offset, align 4
  %fun_result98 = call i32 @tcc_load_object_file(%TCCState* %s195, i32 %fd96, i64 %file_offset97)
  %le = icmp slt i32 %fun_result98, 0
  br i1 %le, label %cond_jump_then99, label %cond_end100

cond_end54:                                       ; preds = %cond_end100, %cond_jump_elif_then0, %cond_end58
  %fd101 = load i32, i32* %fd, align 4
  %file_offset102 = load i64, i64* %file_offset, align 4
  %size103 = load i32, i32* %size, align 4
  %icastD = sext i32 %size103 to i64
  %add104 = add i64 %file_offset102, %icastD
  %fun_result105 = call i64 @lseek(i32 %fd101, i64 %add104, i32 0)
  br label %loop_continue_top_block

cond_jump_then57:                                 ; preds = %cond_jump_then53
  %s159 = load %TCCState*, %TCCState** %s1, align 8
  %fd60 = load i32, i32* %fd, align 4
  %size61 = load i32, i32* %size, align 4
  %fun_result62 = call i32 @tcc_load_alacarte(%TCCState* %s159, i32 %fd60, i32 %size61)
  ret i32 %fun_result62

cond_end58:                                       ; preds = %cond_jump_then53
  br label %cond_end54

cond_jump_then70:                                 ; preds = %cond_jump_elif0
  %autocast71 = bitcast [17 x i8]* %ar_name to i8*
  %fun_result72 = call i32 @strcmp(i8* %autocast71, i8* bitcast ([10 x i8]* @269 to i8*))
  %logical_denial73 = icmp eq i32 %fun_result72, 0
  %castOOOO74 = zext i1 %logical_denial73 to i32
  %icmpA75 = icmp ne i32 %castOOOO74, 0
  %oror76 = or i1 %icmpA69, %icmpA75
  store i1 %oror76, i1* %oror64, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then70, %cond_jump_elif0
  %oror_result_value = load i1, i1* %oror64, align 1
  store i1 %oror_result_value, i1* %oror63, align 1
  br i1 %oror_result_value, label %cond_jump_end78, label %cond_jump_then77

cond_jump_then77:                                 ; preds = %cond_jump_end
  %autocast79 = bitcast [17 x i8]* %ar_name to i8*
  %fun_result80 = call i32 @strcmp(i8* %autocast79, i8* bitcast ([11 x i8]* @270 to i8*))
  %logical_denial81 = icmp eq i32 %fun_result80, 0
  %castOOOO82 = zext i1 %logical_denial81 to i32
  %icmpA83 = icmp ne i32 %castOOOO82, 0
  %oror84 = or i1 %oror_result_value, %icmpA83
  store i1 %oror84, i1* %oror63, align 1
  br label %cond_jump_end78

cond_jump_end78:                                  ; preds = %cond_jump_then77, %cond_jump_end
  %oror_result_value85 = load i1, i1* %oror63, align 1
  store i1 %oror_result_value85, i1* %oror, align 1
  br i1 %oror_result_value85, label %cond_jump_end87, label %cond_jump_then86

cond_jump_then86:                                 ; preds = %cond_jump_end78
  %autocast88 = bitcast [17 x i8]* %ar_name to i8*
  %fun_result89 = call i32 @strcmp(i8* %autocast88, i8* bitcast ([13 x i8]* @271 to i8*))
  %logical_denial90 = icmp eq i32 %fun_result89, 0
  %castOOOO91 = zext i1 %logical_denial90 to i32
  %icmpA92 = icmp ne i32 %castOOOO91, 0
  %oror93 = or i1 %oror_result_value85, %icmpA92
  store i1 %oror93, i1* %oror, align 1
  br label %cond_jump_end87

cond_jump_end87:                                  ; preds = %cond_jump_then86, %cond_jump_end78
  %oror_result_value94 = load i1, i1* %oror, align 1
  br i1 %oror_result_value94, label %cond_jump_elif_then0, label %cond_else_block

cond_jump_then99:                                 ; preds = %cond_else_block
  ret i32 -1

cond_end100:                                      ; preds = %cond_else_block
  br label %cond_end54
}

define internal i32 @tcc_load_dll(%TCCState* %0, i32 %1, i8* %2, i32 %3) {
entry:
  %oror = alloca i1, align 1
  %dllref = alloca %DLLReference*, align 8
  %soname = alloca i8*, align 8
  %name = alloca i8*, align 8
  %dynstr = alloca i8*, align 8
  %dynamic = alloca %come_anon99*, align 8
  %dt = alloca %come_anon99*, align 8
  %dynsym = alloca %come_anon88*, align 8
  %sym = alloca %come_anon88*, align 8
  %ret = alloca i32, align 4
  %sym_bind = alloca i32, align 4
  %nb_dts = alloca i32, align 4
  %nb_syms = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %sh1 = alloca %come_anon86*, align 8
  %sh = alloca %come_anon86*, align 8
  %shdr = alloca %come_anon86*, align 8
  %ehdr = alloca %come_anon84, align 8
  %castXXXX = bitcast %come_anon84* %ehdr to i8*
  %4 = call i8* @memset(i8* %castXXXX, i32 0, i64 64)
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %fd = alloca i32, align 4
  %fd2 = alloca i32*, align 8
  store i32 %1, i32* %fd, align 4
  store i32* %fd, i32** %fd2, align 8
  %filename = alloca i8*, align 8
  %filename3 = alloca i8**, align 8
  store i8* %2, i8** %filename, align 8
  store i8** %filename, i8*** %filename3, align 8
  %level = alloca i32, align 4
  %level4 = alloca i32*, align 8
  store i32 %3, i32* %level, align 4
  store i32* %level, i32** %level4, align 8
  %fd5 = load i32, i32* %fd, align 4
  %ehdr6 = load %come_anon84, %come_anon84* %ehdr, align 4
  %castAQ = bitcast %come_anon84* %ehdr to i8*
  %ehdr7 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fun_result = call i64 @read(i32 %fd5, i8* %castAQ, i64 64)
  %ehdr8 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldRRRR = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 0
  %array_castG = bitcast [16 x i8]* %fieldRRRR to i8*
  %gepLY = getelementptr i8, i8* %array_castG, i32 5
  %elementYYY = load i8, i8* %gepLY, align 1
  %not_eq = icmp ne i8 %elementYYY, 1
  store i1 %not_eq, i1* %oror, align 1
  br i1 %not_eq, label %cond_jump_end, label %cond_jump_then

cond_jump_then:                                   ; preds = %entry
  %ehdr9 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 2
  %e_machine = load i16, i16* %fieldVVV, align 2
  %not_eq10 = icmp ne i16 %e_machine, 62
  %oror11 = or i1 %not_eq, %not_eq10
  store i1 %oror11, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then12, label %cond_end

cond_jump_then12:                                 ; preds = %cond_jump_end
  call void (i8*, ...) @error_noabort(i8* bitcast ([17 x i8]* @272 to i8*))
  ret i32 -1

cond_end:                                         ; preds = %cond_jump_end
  %fd13 = load i32, i32* %fd, align 4
  %ehdr14 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV15 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 6
  %e_shoff = load i64, i64* %fieldVVV15, align 4
  %ehdr16 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV17 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum = load i16, i16* %fieldVVV17, align 2
  %icastC = zext i16 %e_shnum to i64
  %mul = mul i64 64, %icastC
  %fun_result18 = call i8* @load_data(i32 %fd13, i64 %e_shoff, i64 %mul)
  %castAQ19 = bitcast i8* %fun_result18 to %come_anon86*
  store %come_anon86* %castAQ19, %come_anon86** %shdr, align 8
  store i32 0, i32* %nb_syms, align 4
  store i32 0, i32* %nb_dts, align 4
  store %come_anon99* null, %come_anon99** %dynamic, align 8
  store %come_anon88* null, %come_anon88** %dynsym, align 8
  store i8* null, i8** %dynstr, align 8
  store i32 0, i32* %i, align 4
  %shdr20 = load %come_anon86*, %come_anon86** %shdr, align 8
  store %come_anon86* %shdr20, %come_anon86** %sh, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %end_blockX
  %i69 = load i32, i32* %i, align 4
  %add = add i32 %i69, 1
  store i32 %add, i32* %i, align 4
  %i70 = load i32, i32* %i, align 4
  %sub = sub i32 %i70, 1
  %sh71 = load %come_anon86*, %come_anon86** %sh, align 8
  %ptrToIntC = ptrtoint %come_anon86* %sh71 to i64
  %add72 = add i64 %ptrToIntC, 64
  %intToPtrB = inttoptr i64 %add72 to %come_anon86*
  store %come_anon86* %intToPtrB, %come_anon86** %sh, align 8
  %sh73 = load %come_anon86*, %come_anon86** %sh, align 8
  %ptrToIntI = ptrtoint %come_anon86* %sh73 to i64
  %sub74 = sub i64 %ptrToIntI, 64
  %iintToPtrD = inttoptr i64 %sub74 to %come_anon86*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  %i21 = load i32, i32* %i, align 4
  %ehdr22 = load %come_anon84, %come_anon84* %ehdr, align 4
  %fieldVVV23 = getelementptr inbounds %come_anon84, %come_anon84* %ehdr, i32 0, i32 12
  %e_shnum24 = load i16, i16* %fieldVVV23, align 2
  %icastKY = zext i16 %e_shnum24 to i32
  %le = icmp slt i32 %i21, %icastKY
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sh25 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL = getelementptr inbounds %come_anon86, %come_anon86* %sh25, i32 0, i32 1
  %sh_type = load i32, i32* %fieldLLL, align 4
  %eqtmp = icmp eq i32 %sh_type, 6
  br i1 %eqtmp, label %cond_then_block26, label %cond_else_blockX

cond_end_block:                                   ; preds = %loop_top_block
  %filename75 = load i8*, i8** %filename, align 8
  %fun_result76 = call i8* @tcc_basename(i8* %filename75)
  store i8* %fun_result76, i8** %soname, align 8
  store i32 0, i32* %i, align 4
  %dynamic77 = load %come_anon99*, %come_anon99** %dynamic, align 8
  store %come_anon99* %dynamic77, %come_anon99** %dt, align 8
  br label %loop_top_block79

end_blockX:                                       ; preds = %cond_else_blockX67, %cond_then_block66, %cond_then_block37, %cond_then_block26
  br label %loop_continue_top_block

cond_then_block26:                                ; preds = %cond_then_block
  %sh27 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL28 = getelementptr inbounds %come_anon86, %come_anon86* %sh27, i32 0, i32 5
  %sh_size = load i64, i64* %fieldLLL28, align 4
  %div = sdiv i64 %sh_size, 16
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %nb_dts, align 4
  %fd29 = load i32, i32* %fd, align 4
  %sh30 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL31 = getelementptr inbounds %come_anon86, %come_anon86* %sh30, i32 0, i32 4
  %sh_offset = load i64, i64* %fieldLLL31, align 4
  %sh32 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL33 = getelementptr inbounds %come_anon86, %come_anon86* %sh32, i32 0, i32 5
  %sh_size34 = load i64, i64* %fieldLLL33, align 4
  %fun_result35 = call i8* @load_data(i32 %fd29, i64 %sh_offset, i64 %sh_size34)
  %castAQ36 = bitcast i8* %fun_result35 to %come_anon99*
  store %come_anon99* %castAQ36, %come_anon99** %dynamic, align 8
  br label %end_blockX

cond_else_blockX:                                 ; preds = %after_break, %cond_then_block
  %eqtmp39 = icmp eq i32 %sh_type, 11
  br i1 %eqtmp39, label %cond_then_block37, label %cond_else_blockX38

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX38

cond_then_block37:                                ; preds = %cond_else_blockX
  %sh40 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL41 = getelementptr inbounds %come_anon86, %come_anon86* %sh40, i32 0, i32 5
  %sh_size42 = load i64, i64* %fieldLLL41, align 4
  %div43 = sdiv i64 %sh_size42, 24
  %icastM44 = trunc i64 %div43 to i32
  store i32 %icastM44, i32* %nb_syms, align 4
  %fd45 = load i32, i32* %fd, align 4
  %sh46 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL47 = getelementptr inbounds %come_anon86, %come_anon86* %sh46, i32 0, i32 4
  %sh_offset48 = load i64, i64* %fieldLLL47, align 4
  %sh49 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL50 = getelementptr inbounds %come_anon86, %come_anon86* %sh49, i32 0, i32 5
  %sh_size51 = load i64, i64* %fieldLLL50, align 4
  %fun_result52 = call i8* @load_data(i32 %fd45, i64 %sh_offset48, i64 %sh_size51)
  %castAQ53 = bitcast i8* %fun_result52 to %come_anon88*
  store %come_anon88* %castAQ53, %come_anon88** %dynsym, align 8
  %shdr54 = load %come_anon86*, %come_anon86** %shdr, align 8
  %sh55 = load %come_anon86*, %come_anon86** %sh, align 8
  %fieldLLL56 = getelementptr inbounds %come_anon86, %come_anon86* %sh55, i32 0, i32 6
  %sh_link = load i32, i32* %fieldLLL56, align 4
  %element_addressAB = load %come_anon86*, %come_anon86** %shdr, align 8
  %element_addressXYXZY = getelementptr inbounds %come_anon86, %come_anon86* %element_addressAB, i32 %sh_link
  %load_element = load %come_anon86, %come_anon86* %element_addressXYXZY, align 4
  store %come_anon86* %element_addressXYXZY, %come_anon86** %sh1, align 8
  %fd57 = load i32, i32* %fd, align 4
  %sh158 = load %come_anon86*, %come_anon86** %sh1, align 8
  %fieldLLL59 = getelementptr inbounds %come_anon86, %come_anon86* %sh158, i32 0, i32 4
  %sh_offset60 = load i64, i64* %fieldLLL59, align 4
  %sh161 = load %come_anon86*, %come_anon86** %sh1, align 8
  %fieldLLL62 = getelementptr inbounds %come_anon86, %come_anon86* %sh161, i32 0, i32 5
  %sh_size63 = load i64, i64* %fieldLLL62, align 4
  %fun_result64 = call i8* @load_data(i32 %fd57, i64 %sh_offset60, i64 %sh_size63)
  store i8* %fun_result64, i8** %dynstr, align 8
  br label %end_blockX

cond_else_blockX38:                               ; preds = %after_break65, %cond_else_blockX, %after_break
  br label %cond_then_block66

after_break65:                                    ; No predecessors!
  br label %cond_else_blockX38
  br label %cond_else_blockX67

cond_then_block66:                                ; preds = %cond_else_blockX38
  br label %end_blockX

cond_else_blockX67:                               ; preds = %after_break68, %after_break65
  br label %end_blockX

after_break68:                                    ; No predecessors!
  br label %cond_else_blockX67

loop_continue_top_block78:                        ; preds = %cond_end88
  %i96 = load i32, i32* %i, align 4
  %add97 = add i32 %i96, 1
  store i32 %add97, i32* %i, align 4
  %i98 = load i32, i32* %i, align 4
  %sub99 = sub i32 %i98, 1
  %dt100 = load %come_anon99*, %come_anon99** %dt, align 8
  %ptrToIntC101 = ptrtoint %come_anon99* %dt100 to i64
  %add102 = add i64 %ptrToIntC101, 16
  %intToPtrB103 = inttoptr i64 %add102 to %come_anon99*
  store %come_anon99* %intToPtrB103, %come_anon99** %dt, align 8
  %dt104 = load %come_anon99*, %come_anon99** %dt, align 8
  %ptrToIntI105 = ptrtoint %come_anon99* %dt104 to i64
  %sub106 = sub i64 %ptrToIntI105, 16
  %iintToPtrD107 = inttoptr i64 %sub106 to %come_anon99*
  br label %loop_top_block79

loop_top_block79:                                 ; preds = %loop_continue_top_block78, %cond_end_block
  %i80 = load i32, i32* %i, align 4
  %nb_dts81 = load i32, i32* %nb_dts, align 4
  %le82 = icmp slt i32 %i80, %nb_dts81
  br i1 %le82, label %cond_then_block83, label %cond_end_block84

cond_then_block83:                                ; preds = %loop_top_block79
  %dt85 = load %come_anon99*, %come_anon99** %dt, align 8
  %fieldLLL86 = getelementptr inbounds %come_anon99, %come_anon99* %dt85, i32 0, i32 0
  %d_tag = load i64, i64* %fieldLLL86, align 4
  %eq = icmp eq i64 %d_tag, 14
  br i1 %eq, label %cond_jump_then87, label %cond_end88

cond_end_block84:                                 ; preds = %loop_top_block79
  store i32 0, i32* %i, align 4
  br label %loop_top_block109

cond_jump_then87:                                 ; preds = %cond_then_block83
  %dynstr89 = load i8*, i8** %dynstr, align 8
  %dt90 = load %come_anon99*, %come_anon99** %dt, align 8
  %fieldLLL91 = getelementptr inbounds %come_anon99, %come_anon99* %dt90, i32 0, i32 1
  %d_un = load %come_anon100, %come_anon100* %fieldLLL91, align 4
  %ICASTO = bitcast %come_anon100* %fieldLLL91 to i64*
  %d_val = load i64, i64* %ICASTO, align 4
  %ptrToIntC92 = ptrtoint i8* %dynstr89 to i64
  %mul93 = mul i64 %d_val, 1
  %add94 = add i64 %ptrToIntC92, %mul93
  %intToPtrB95 = inttoptr i64 %add94 to i8*
  store i8* %intToPtrB95, i8** %soname, align 8
  br label %cond_end88

cond_end88:                                       ; preds = %cond_jump_then87, %cond_then_block83
  br label %loop_continue_top_block78

loop_continue_top_block108:                       ; preds = %cond_end126
  %i136 = load i32, i32* %i, align 4
  %add137 = add i32 %i136, 1
  store i32 %add137, i32* %i, align 4
  %i138 = load i32, i32* %i, align 4
  %sub139 = sub i32 %i138, 1
  br label %loop_top_block109

loop_top_block109:                                ; preds = %loop_continue_top_block108, %cond_end_block84
  %i110 = load i32, i32* %i, align 4
  %s1111 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL112 = getelementptr inbounds %TCCState, %TCCState* %s1111, i32 0, i32 12
  %nb_loaded_dlls = load i32, i32* %fieldLLL112, align 4
  %le113 = icmp slt i32 %i110, %nb_loaded_dlls
  br i1 %le113, label %cond_then_block114, label %cond_end_block115

cond_then_block114:                               ; preds = %loop_top_block109
  %s1116 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL117 = getelementptr inbounds %TCCState, %TCCState* %s1116, i32 0, i32 11
  %loaded_dlls = load %DLLReference**, %DLLReference*** %fieldLLL117, align 8
  %i118 = load i32, i32* %i, align 4
  %element_addressAB119 = load %DLLReference**, %DLLReference*** %fieldLLL117, align 8
  %element_addressXYXZY120 = getelementptr inbounds %DLLReference*, %DLLReference** %element_addressAB119, i32 %i118
  %load_element121 = load %DLLReference*, %DLLReference** %element_addressXYXZY120, align 8
  store %DLLReference* %load_element121, %DLLReference** %dllref, align 8
  %soname122 = load i8*, i8** %soname, align 8
  %dllref123 = load %DLLReference*, %DLLReference** %dllref, align 8
  %fieldRRRROOU = getelementptr inbounds %DLLReference, %DLLReference* %dllref123, i32 0, i32 2
  %autocast = bitcast [1 x i8]* %fieldRRRROOU to i8*
  %fun_result124 = call i32 @strcmp(i8* %soname122, i8* %autocast)
  %logical_denial = icmp eq i32 %fun_result124, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then125, label %cond_end126

cond_end_block115:                                ; preds = %loop_top_block109
  %soname140 = load i8*, i8** %soname, align 8
  %fun_result141 = call i64 @strlen(i8* %soname140)
  %add142 = add i64 24, %fun_result141
  %fun_result143 = call i8* @tcc_mallocz(i64 %add142)
  %castAQ144 = bitcast i8* %fun_result143 to %DLLReference*
  store %DLLReference* %castAQ144, %DLLReference** %dllref, align 8
  %dllref145 = load %DLLReference*, %DLLReference** %dllref, align 8
  %level146 = load i32, i32* %level, align 4
  %fieldTU147 = getelementptr inbounds %DLLReference, %DLLReference* %dllref145, i32 0, i32 0
  store i32 %level146, i32* %fieldTU147, align 4
  %dllref148 = load %DLLReference*, %DLLReference** %dllref, align 8
  %fieldRRRROOU149 = getelementptr inbounds %DLLReference, %DLLReference* %dllref148, i32 0, i32 2
  %autocast150 = bitcast [1 x i8]* %fieldRRRROOU149 to i8*
  %soname151 = load i8*, i8** %soname, align 8
  %fun_result152 = call i8* @strcpy(i8* %autocast150, i8* %soname151)
  %s1153 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL154 = getelementptr inbounds %TCCState, %TCCState* %s1153, i32 0, i32 11
  %loaded_dlls155 = load %DLLReference**, %DLLReference*** %fieldLLL154, align 8
  %castAQ156 = bitcast %DLLReference*** %fieldLLL154 to i8***
  %s1157 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL158 = getelementptr inbounds %TCCState, %TCCState* %s1157, i32 0, i32 12
  %nb_loaded_dlls159 = load i32, i32* %fieldLLL158, align 4
  %dllref160 = load %DLLReference*, %DLLReference** %dllref, align 8
  %castAQ161 = bitcast %DLLReference* %dllref160 to i8*
  call void @dynarray_add(i8*** %castAQ156, i32* %fieldLLL158, i8* %castAQ161)
  store i32 1, i32* %i, align 4
  %dynsym162 = load %come_anon88*, %come_anon88** %dynsym, align 8
  %ptrToIntC163 = ptrtoint %come_anon88* %dynsym162 to i64
  %add164 = add i64 %ptrToIntC163, 24
  %intToPtrB165 = inttoptr i64 %add164 to %come_anon88*
  store %come_anon88* %intToPtrB165, %come_anon88** %sym, align 8
  br label %loop_top_block167

cond_jump_then125:                                ; preds = %cond_then_block114
  %level127 = load i32, i32* %level, align 4
  %dllref128 = load %DLLReference*, %DLLReference** %dllref, align 8
  %fieldLLL129 = getelementptr inbounds %DLLReference, %DLLReference* %dllref128, i32 0, i32 0
  %level130 = load i32, i32* %fieldLLL129, align 4
  %le131 = icmp slt i32 %level127, %level130
  br i1 %le131, label %cond_jump_then132, label %cond_end133

cond_end126:                                      ; preds = %cond_end133, %cond_then_block114
  br label %loop_continue_top_block108

cond_jump_then132:                                ; preds = %cond_jump_then125
  %dllref134 = load %DLLReference*, %DLLReference** %dllref, align 8
  %level135 = load i32, i32* %level, align 4
  %fieldTU = getelementptr inbounds %DLLReference, %DLLReference* %dllref134, i32 0, i32 0
  store i32 %level135, i32* %fieldTU, align 4
  br label %cond_end133

cond_end133:                                      ; preds = %cond_jump_then132, %cond_jump_then125
  store i32 0, i32* %ret, align 4
  br label %tcc_load_dll.the_end
  br label %cond_end126

tcc_load_dll.the_end:                             ; preds = %cond_end_block224, %cond_jump_then276, %cond_end133
  %dynstr292 = load i8*, i8** %dynstr, align 8
  call void @tcc_free(i8* %dynstr292)
  %dynsym293 = load %come_anon88*, %come_anon88** %dynsym, align 8
  %castAQ294 = bitcast %come_anon88* %dynsym293 to i8*
  call void @tcc_free(i8* %castAQ294)
  %dynamic295 = load %come_anon99*, %come_anon99** %dynamic, align 8
  %castAQ296 = bitcast %come_anon99* %dynamic295 to i8*
  call void @tcc_free(i8* %castAQ296)
  %shdr297 = load %come_anon86*, %come_anon86** %shdr, align 8
  %castAQ298 = bitcast %come_anon86* %shdr297 to i8*
  call void @tcc_free(i8* %castAQ298)
  %ret299 = load i32, i32* %ret, align 4
  ret i32 %ret299

loop_continue_top_block166:                       ; preds = %cond_end179, %cond_jump_then178
  %i205 = load i32, i32* %i, align 4
  %add206 = add i32 %i205, 1
  store i32 %add206, i32* %i, align 4
  %i207 = load i32, i32* %i, align 4
  %sub208 = sub i32 %i207, 1
  %sym209 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntC210 = ptrtoint %come_anon88* %sym209 to i64
  %add211 = add i64 %ptrToIntC210, 24
  %intToPtrB212 = inttoptr i64 %add211 to %come_anon88*
  store %come_anon88* %intToPtrB212, %come_anon88** %sym, align 8
  %sym213 = load %come_anon88*, %come_anon88** %sym, align 8
  %ptrToIntI214 = ptrtoint %come_anon88* %sym213 to i64
  %sub215 = sub i64 %ptrToIntI214, 24
  %iintToPtrD216 = inttoptr i64 %sub215 to %come_anon88*
  br label %loop_top_block167

loop_top_block167:                                ; preds = %loop_continue_top_block166, %cond_end_block115
  %i168 = load i32, i32* %i, align 4
  %nb_syms169 = load i32, i32* %nb_syms, align 4
  %le170 = icmp slt i32 %i168, %nb_syms169
  br i1 %le170, label %cond_then_block171, label %cond_end_block172

cond_then_block171:                               ; preds = %loop_top_block167
  %sym173 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL174 = getelementptr inbounds %come_anon88, %come_anon88* %sym173, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL174, align 1
  %icastKY175 = zext i8 %st_info to i32
  %rshifttmp = lshr i32 %icastKY175, 4
  store i32 %rshifttmp, i32* %sym_bind, align 4
  %sym_bind176 = load i32, i32* %sym_bind, align 4
  %eq177 = icmp eq i32 %sym_bind176, 0
  br i1 %eq177, label %cond_jump_then178, label %cond_end179

cond_end_block172:                                ; preds = %loop_top_block167
  store i32 0, i32* %i, align 4
  %dynamic217 = load %come_anon99*, %come_anon99** %dynamic, align 8
  store %come_anon99* %dynamic217, %come_anon99** %dt, align 8
  br label %loop_top_block219

cond_jump_then178:                                ; preds = %cond_then_block171
  br label %loop_continue_top_block166

cond_end179:                                      ; preds = %after_continue, %cond_then_block171
  %dynstr180 = load i8*, i8** %dynstr, align 8
  %sym181 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL182 = getelementptr inbounds %come_anon88, %come_anon88* %sym181, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL182, align 4
  %ptrToIntC183 = ptrtoint i8* %dynstr180 to i64
  %sext = sext i32 %st_name to i64
  %mul184 = mul i64 %sext, 1
  %add185 = add i64 %ptrToIntC183, %mul184
  %intToPtrB186 = inttoptr i64 %add185 to i8*
  store i8* %intToPtrB186, i8** %name, align 8
  %s1187 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL188 = getelementptr inbounds %TCCState, %TCCState* %s1187, i32 0, i32 22
  %dynsymtab_section = load %Section*, %Section** %fieldLLL188, align 8
  %sym189 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL190 = getelementptr inbounds %come_anon88, %come_anon88* %sym189, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL190, align 4
  %sym191 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL192 = getelementptr inbounds %come_anon88, %come_anon88* %sym191, i32 0, i32 5
  %st_size = load i64, i64* %fieldLLL192, align 4
  %sym193 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL194 = getelementptr inbounds %come_anon88, %come_anon88* %sym193, i32 0, i32 1
  %st_info195 = load i8, i8* %fieldLLL194, align 1
  %icastKY196 = zext i8 %st_info195 to i32
  %sym197 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL198 = getelementptr inbounds %come_anon88, %come_anon88* %sym197, i32 0, i32 2
  %st_other = load i8, i8* %fieldLLL198, align 1
  %icastKY199 = zext i8 %st_other to i32
  %sym200 = load %come_anon88*, %come_anon88** %sym, align 8
  %fieldLLL201 = getelementptr inbounds %come_anon88, %come_anon88* %sym200, i32 0, i32 3
  %st_shndx = load i16, i16* %fieldLLL201, align 2
  %icastKY202 = zext i16 %st_shndx to i32
  %name203 = load i8*, i8** %name, align 8
  %fun_result204 = call i32 @add_elf_sym(%Section* %dynsymtab_section, i64 %st_value, i64 %st_size, i32 %icastKY196, i32 %icastKY199, i32 %icastKY202, i8* %name203)
  br label %loop_continue_top_block166

after_continue:                                   ; No predecessors!
  br label %cond_end179

loop_continue_top_block218:                       ; preds = %end_blockX225
  %i280 = load i32, i32* %i, align 4
  %add281 = add i32 %i280, 1
  store i32 %add281, i32* %i, align 4
  %i282 = load i32, i32* %i, align 4
  %sub283 = sub i32 %i282, 1
  %dt284 = load %come_anon99*, %come_anon99** %dt, align 8
  %ptrToIntC285 = ptrtoint %come_anon99* %dt284 to i64
  %add286 = add i64 %ptrToIntC285, 16
  %intToPtrB287 = inttoptr i64 %add286 to %come_anon99*
  store %come_anon99* %intToPtrB287, %come_anon99** %dt, align 8
  %dt288 = load %come_anon99*, %come_anon99** %dt, align 8
  %ptrToIntI289 = ptrtoint %come_anon99* %dt288 to i64
  %sub290 = sub i64 %ptrToIntI289, 16
  %iintToPtrD291 = inttoptr i64 %sub290 to %come_anon99*
  br label %loop_top_block219

loop_top_block219:                                ; preds = %loop_continue_top_block218, %cond_end_block172
  %i220 = load i32, i32* %i, align 4
  %nb_dts221 = load i32, i32* %nb_dts, align 4
  %le222 = icmp slt i32 %i220, %nb_dts221
  br i1 %le222, label %cond_then_block223, label %cond_end_block224

cond_then_block223:                               ; preds = %loop_top_block219
  %dt226 = load %come_anon99*, %come_anon99** %dt, align 8
  %fieldLLL227 = getelementptr inbounds %come_anon99, %come_anon99* %dt226, i32 0, i32 0
  %d_tag228 = load i64, i64* %fieldLLL227, align 4
  %eqtmp231 = icmp eq i64 %d_tag228, 1
  br i1 %eqtmp231, label %cond_then_block229, label %cond_else_blockX230

cond_end_block224:                                ; preds = %loop_top_block219
  store i32 0, i32* %ret, align 4
  br label %tcc_load_dll.the_end

end_blockX225:                                    ; preds = %cond_else_blockX230, %tcc_load_dll.already_loaded
  br label %loop_continue_top_block218

cond_then_block229:                               ; preds = %cond_then_block223
  %dynstr232 = load i8*, i8** %dynstr, align 8
  %dt233 = load %come_anon99*, %come_anon99** %dt, align 8
  %fieldLLL234 = getelementptr inbounds %come_anon99, %come_anon99* %dt233, i32 0, i32 1
  %d_un235 = load %come_anon100, %come_anon100* %fieldLLL234, align 4
  %ICASTO236 = bitcast %come_anon100* %fieldLLL234 to i64*
  %d_val237 = load i64, i64* %ICASTO236, align 4
  %ptrToIntC238 = ptrtoint i8* %dynstr232 to i64
  %mul239 = mul i64 %d_val237, 1
  %add240 = add i64 %ptrToIntC238, %mul239
  %intToPtrB241 = inttoptr i64 %add240 to i8*
  store i8* %intToPtrB241, i8** %name, align 8
  store i32 0, i32* %j, align 4
  br label %loop_top_block243

cond_else_blockX230:                              ; preds = %after_break279, %cond_then_block223
  br label %end_blockX225

loop_continue_top_block242:                       ; preds = %cond_end267
  %j268 = load i32, i32* %j, align 4
  %add269 = add i32 %j268, 1
  store i32 %add269, i32* %j, align 4
  %j270 = load i32, i32* %j, align 4
  %sub271 = sub i32 %j270, 1
  br label %loop_top_block243

loop_top_block243:                                ; preds = %loop_continue_top_block242, %cond_then_block229
  %j244 = load i32, i32* %j, align 4
  %s1245 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL246 = getelementptr inbounds %TCCState, %TCCState* %s1245, i32 0, i32 12
  %nb_loaded_dlls247 = load i32, i32* %fieldLLL246, align 4
  %le248 = icmp slt i32 %j244, %nb_loaded_dlls247
  br i1 %le248, label %cond_then_block249, label %cond_end_block250

cond_then_block249:                               ; preds = %loop_top_block243
  %s1251 = load %TCCState*, %TCCState** %s1, align 8
  %fieldLLL252 = getelementptr inbounds %TCCState, %TCCState* %s1251, i32 0, i32 11
  %loaded_dlls253 = load %DLLReference**, %DLLReference*** %fieldLLL252, align 8
  %j254 = load i32, i32* %j, align 4
  %element_addressAB255 = load %DLLReference**, %DLLReference*** %fieldLLL252, align 8
  %element_addressXYXZY256 = getelementptr inbounds %DLLReference*, %DLLReference** %element_addressAB255, i32 %j254
  %load_element257 = load %DLLReference*, %DLLReference** %element_addressXYXZY256, align 8
  store %DLLReference* %load_element257, %DLLReference** %dllref, align 8
  %name258 = load i8*, i8** %name, align 8
  %dllref259 = load %DLLReference*, %DLLReference** %dllref, align 8
  %fieldRRRROOU260 = getelementptr inbounds %DLLReference, %DLLReference* %dllref259, i32 0, i32 2
  %autocast261 = bitcast [1 x i8]* %fieldRRRROOU260 to i8*
  %fun_result262 = call i32 @strcmp(i8* %name258, i8* %autocast261)
  %logical_denial263 = icmp eq i32 %fun_result262, 0
  %castOOOO264 = zext i1 %logical_denial263 to i32
  %icmpA265 = icmp ne i32 %castOOOO264, 0
  br i1 %icmpA265, label %cond_jump_then266, label %cond_end267

cond_end_block250:                                ; preds = %loop_top_block243
  %s1272 = load %TCCState*, %TCCState** %s1, align 8
  %name273 = load i8*, i8** %name, align 8
  %fun_result274 = call i32 @tcc_add_dll(%TCCState* %s1272, i8* %name273, i32 2)
  %le275 = icmp slt i32 %fun_result274, 0
  br i1 %le275, label %cond_jump_then276, label %cond_end277

cond_jump_then266:                                ; preds = %cond_then_block249
  br label %tcc_load_dll.already_loaded
  br label %cond_end267

cond_end267:                                      ; preds = %cond_jump_then266, %cond_then_block249
  br label %loop_continue_top_block242

tcc_load_dll.already_loaded:                      ; preds = %cond_end277, %cond_jump_then266
  br label %end_blockX225

cond_jump_then276:                                ; preds = %cond_end_block250
  %name278 = load i8*, i8** %name, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([30 x i8]* @273 to i8*), i8* %name278)
  store i32 -1, i32* %ret, align 4
  br label %tcc_load_dll.the_end
  br label %cond_end277

cond_end277:                                      ; preds = %cond_jump_then276, %cond_end_block250
  br label %tcc_load_dll.already_loaded

after_break279:                                   ; No predecessors!
  br label %cond_else_blockX230
}

define internal i32 @ld_next(%TCCState* %0, i8* %1, i32 %2) {
entry:
  %andand176 = alloca i1, align 1
  %andand164 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror157 = alloca i1, align 1
  %oror156 = alloca i1, align 1
  %oror = alloca i1, align 1
  %q = alloca i8*, align 8
  %c = alloca i32, align 4
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %name = alloca i8*, align 8
  %name2 = alloca i8**, align 8
  store i8* %1, i8** %name, align 8
  store i8** %name, i8*** %name2, align 8
  %name_size = alloca i32, align 4
  %name_size3 = alloca i32*, align 8
  store i32 %2, i32* %name_size, align 4
  store i32* %name_size, i32** %name_size3, align 8
  br label %ld_next.redo

ld_next.redo:                                     ; preds = %cond_jump_then21, %inp_end, %entry
  %ch = load i32, i32* @ch, align 4
  %eqtmp = icmp eq i32 %ch, 32
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX
  br label %cond_else_blockX4

end_blockX:                                       ; preds = %cond_else_blockX219, %inp_end222, %cond_then_block214, %cond_end_block, %cond_end22
  %c239 = load i32, i32* %c, align 4
  ret i32 %c239

cond_then_block:                                  ; preds = %cond_else_blockX10, %cond_else_blockX8, %cond_else_blockX6, %cond_else_blockX4, %cond_else_blockX, %ld_next.redo
  store i32 2550, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccelf.c.147, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp

cond_else_blockX:                                 ; preds = %ld_next.redo
  %eqtmp5 = icmp eq i32 %ch, 9
  br i1 %eqtmp5, label %cond_then_block, label %cond_else_blockX4
  br label %cond_else_blockX6

cond_else_blockX4:                                ; preds = %cond_else_blockX, %ld_next.redo
  %eqtmp7 = icmp eq i32 %ch, 12
  br i1 %eqtmp7, label %cond_then_block, label %cond_else_blockX6
  br label %cond_else_blockX8

cond_else_blockX6:                                ; preds = %cond_else_blockX4, %cond_else_blockX
  %eqtmp9 = icmp eq i32 %ch, 11
  br i1 %eqtmp9, label %cond_then_block, label %cond_else_blockX8
  br label %cond_else_blockX10

cond_else_blockX8:                                ; preds = %cond_else_blockX6, %cond_else_blockX4
  %eqtmp11 = icmp eq i32 %ch, 13
  br i1 %eqtmp11, label %cond_then_block, label %cond_else_blockX10
  br label %cond_else_blockX12

cond_else_blockX10:                               ; preds = %cond_else_blockX8, %cond_else_blockX6
  %eqtmp13 = icmp eq i32 %ch, 10
  br i1 %eqtmp13, label %cond_then_block, label %cond_else_blockX12

cond_else_blockX12:                               ; preds = %cond_else_blockX10, %cond_else_blockX8
  %eqtmp18 = icmp eq i32 %ch, 47
  br i1 %eqtmp18, label %cond_then_block16, label %cond_else_blockX17

inp:                                              ; preds = %cond_then_block
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %file14 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file14, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  %ptrToIntC = ptrtoint i8* %buf_ptr to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  %fieldTU = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  store i8* %intToPtrB, i8** %fieldTU, align 8
  %derefference_valueB = load i8, i8* %intToPtrB, align 1
  %icastKY = zext i8 %derefference_valueB to i32
  store i32 %icastKY, i32* @ch, align 4
  %ch15 = load i32, i32* @ch, align 4
  %eq = icmp eq i32 %ch15, 92
  br i1 %eq, label %cond_jump_then, label %cond_end

inp_end:                                          ; preds = %cond_end
  br label %ld_next.redo
  br label %cond_then_block16

cond_jump_then:                                   ; preds = %inp
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* @ch, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %inp
  br label %inp_end

cond_then_block16:                                ; preds = %cond_else_blockX12, %inp_end
  call void @minp()
  %ch19 = load i32, i32* @ch, align 4
  %eq20 = icmp eq i32 %ch19, 42
  br i1 %eq20, label %cond_jump_then21, label %cond_else_block

cond_else_blockX17:                               ; preds = %after_break, %cond_else_blockX12
  %eqtmp41 = icmp eq i32 %ch, 97
  br i1 %eqtmp41, label %cond_then_block39, label %cond_else_blockX40
  br label %cond_else_blockX42

cond_jump_then21:                                 ; preds = %cond_then_block16
  %file23 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file24 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL25 = getelementptr inbounds %BufferedFile, %BufferedFile* %file24, i32 0, i32 0
  %buf_ptr26 = load i8*, i8** %fieldLLL25, align 8
  %fun_result27 = call i8* @parse_comment(i8* %buf_ptr26)
  %fieldTU28 = getelementptr inbounds %BufferedFile, %BufferedFile* %file23, i32 0, i32 0
  store i8* %fun_result27, i8** %fieldTU28, align 8
  %file29 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL30 = getelementptr inbounds %BufferedFile, %BufferedFile* %file29, i32 0, i32 0
  %buf_ptr31 = load i8*, i8** %fieldLLL30, align 8
  %element_addressAB = load i8*, i8** %fieldLLL30, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY32 = zext i8 %load_element to i32
  store i32 %icastKY32, i32* @ch, align 4
  br label %ld_next.redo
  br label %cond_end22

cond_else_block:                                  ; preds = %cond_then_block16
  %name33 = load i8*, i8** %name, align 8
  store i8* %name33, i8** %q, align 8
  %q34 = load i8*, i8** %q, align 8
  %ptrToIntC35 = ptrtoint i8* %q34 to i64
  %add36 = add i64 %ptrToIntC35, 1
  %intToPtrB37 = inttoptr i64 %add36 to i8*
  store i8* %intToPtrB37, i8** %q, align 8
  %q38 = load i8*, i8** %q, align 8
  %ptrToIntI = ptrtoint i8* %q38 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  store i8 47, i8* %iintToPtrD, align 1
  br label %ld_next.parse_name
  br label %cond_end22

cond_end22:                                       ; preds = %cond_else_block, %cond_jump_then21
  br label %end_blockX

ld_next.parse_name:                               ; preds = %cond_then_block39, %cond_else_block
  br label %loop_top_block

after_break:                                      ; No predecessors!
  br label %cond_else_blockX17
  br label %cond_else_blockX40

cond_then_block39:                                ; preds = %cond_else_blockX150, %cond_else_blockX148, %cond_else_blockX146, %cond_else_blockX144, %cond_else_blockX142, %cond_else_blockX140, %cond_else_blockX138, %cond_else_blockX136, %cond_else_blockX134, %cond_else_blockX132, %cond_else_blockX130, %cond_else_blockX128, %cond_else_blockX126, %cond_else_blockX124, %cond_else_blockX122, %cond_else_blockX120, %cond_else_blockX118, %cond_else_blockX116, %cond_else_blockX114, %cond_else_blockX112, %cond_else_blockX110, %cond_else_blockX108, %cond_else_blockX106, %cond_else_blockX104, %cond_else_blockX102, %cond_else_blockX100, %cond_else_blockX98, %cond_else_blockX96, %cond_else_blockX94, %cond_else_blockX92, %cond_else_blockX90, %cond_else_blockX88, %cond_else_blockX86, %cond_else_blockX84, %cond_else_blockX82, %cond_else_blockX80, %cond_else_blockX78, %cond_else_blockX76, %cond_else_blockX74, %cond_else_blockX72, %cond_else_blockX70, %cond_else_blockX68, %cond_else_blockX66, %cond_else_blockX64, %cond_else_blockX62, %cond_else_blockX60, %cond_else_blockX58, %cond_else_blockX56, %cond_else_blockX54, %cond_else_blockX52, %cond_else_blockX50, %cond_else_blockX48, %cond_else_blockX46, %cond_else_blockX44, %cond_else_blockX42, %cond_else_blockX40, %cond_else_blockX17
  %name154 = load i8*, i8** %name, align 8
  store i8* %name154, i8** %q, align 8
  br label %ld_next.parse_name

cond_else_blockX40:                               ; preds = %cond_else_blockX17, %after_break
  %eqtmp43 = icmp eq i32 %ch, 98
  br i1 %eqtmp43, label %cond_then_block39, label %cond_else_blockX42
  br label %cond_else_blockX44

cond_else_blockX42:                               ; preds = %cond_else_blockX40, %cond_else_blockX17
  %eqtmp45 = icmp eq i32 %ch, 99
  br i1 %eqtmp45, label %cond_then_block39, label %cond_else_blockX44
  br label %cond_else_blockX46

cond_else_blockX44:                               ; preds = %cond_else_blockX42, %cond_else_blockX40
  %eqtmp47 = icmp eq i32 %ch, 100
  br i1 %eqtmp47, label %cond_then_block39, label %cond_else_blockX46
  br label %cond_else_blockX48

cond_else_blockX46:                               ; preds = %cond_else_blockX44, %cond_else_blockX42
  %eqtmp49 = icmp eq i32 %ch, 101
  br i1 %eqtmp49, label %cond_then_block39, label %cond_else_blockX48
  br label %cond_else_blockX50

cond_else_blockX48:                               ; preds = %cond_else_blockX46, %cond_else_blockX44
  %eqtmp51 = icmp eq i32 %ch, 102
  br i1 %eqtmp51, label %cond_then_block39, label %cond_else_blockX50
  br label %cond_else_blockX52

cond_else_blockX50:                               ; preds = %cond_else_blockX48, %cond_else_blockX46
  %eqtmp53 = icmp eq i32 %ch, 103
  br i1 %eqtmp53, label %cond_then_block39, label %cond_else_blockX52
  br label %cond_else_blockX54

cond_else_blockX52:                               ; preds = %cond_else_blockX50, %cond_else_blockX48
  %eqtmp55 = icmp eq i32 %ch, 104
  br i1 %eqtmp55, label %cond_then_block39, label %cond_else_blockX54
  br label %cond_else_blockX56

cond_else_blockX54:                               ; preds = %cond_else_blockX52, %cond_else_blockX50
  %eqtmp57 = icmp eq i32 %ch, 105
  br i1 %eqtmp57, label %cond_then_block39, label %cond_else_blockX56
  br label %cond_else_blockX58

cond_else_blockX56:                               ; preds = %cond_else_blockX54, %cond_else_blockX52
  %eqtmp59 = icmp eq i32 %ch, 106
  br i1 %eqtmp59, label %cond_then_block39, label %cond_else_blockX58
  br label %cond_else_blockX60

cond_else_blockX58:                               ; preds = %cond_else_blockX56, %cond_else_blockX54
  %eqtmp61 = icmp eq i32 %ch, 107
  br i1 %eqtmp61, label %cond_then_block39, label %cond_else_blockX60
  br label %cond_else_blockX62

cond_else_blockX60:                               ; preds = %cond_else_blockX58, %cond_else_blockX56
  %eqtmp63 = icmp eq i32 %ch, 108
  br i1 %eqtmp63, label %cond_then_block39, label %cond_else_blockX62
  br label %cond_else_blockX64

cond_else_blockX62:                               ; preds = %cond_else_blockX60, %cond_else_blockX58
  %eqtmp65 = icmp eq i32 %ch, 109
  br i1 %eqtmp65, label %cond_then_block39, label %cond_else_blockX64
  br label %cond_else_blockX66

cond_else_blockX64:                               ; preds = %cond_else_blockX62, %cond_else_blockX60
  %eqtmp67 = icmp eq i32 %ch, 110
  br i1 %eqtmp67, label %cond_then_block39, label %cond_else_blockX66
  br label %cond_else_blockX68

cond_else_blockX66:                               ; preds = %cond_else_blockX64, %cond_else_blockX62
  %eqtmp69 = icmp eq i32 %ch, 111
  br i1 %eqtmp69, label %cond_then_block39, label %cond_else_blockX68
  br label %cond_else_blockX70

cond_else_blockX68:                               ; preds = %cond_else_blockX66, %cond_else_blockX64
  %eqtmp71 = icmp eq i32 %ch, 112
  br i1 %eqtmp71, label %cond_then_block39, label %cond_else_blockX70
  br label %cond_else_blockX72

cond_else_blockX70:                               ; preds = %cond_else_blockX68, %cond_else_blockX66
  %eqtmp73 = icmp eq i32 %ch, 113
  br i1 %eqtmp73, label %cond_then_block39, label %cond_else_blockX72
  br label %cond_else_blockX74

cond_else_blockX72:                               ; preds = %cond_else_blockX70, %cond_else_blockX68
  %eqtmp75 = icmp eq i32 %ch, 114
  br i1 %eqtmp75, label %cond_then_block39, label %cond_else_blockX74
  br label %cond_else_blockX76

cond_else_blockX74:                               ; preds = %cond_else_blockX72, %cond_else_blockX70
  %eqtmp77 = icmp eq i32 %ch, 115
  br i1 %eqtmp77, label %cond_then_block39, label %cond_else_blockX76
  br label %cond_else_blockX78

cond_else_blockX76:                               ; preds = %cond_else_blockX74, %cond_else_blockX72
  %eqtmp79 = icmp eq i32 %ch, 116
  br i1 %eqtmp79, label %cond_then_block39, label %cond_else_blockX78
  br label %cond_else_blockX80

cond_else_blockX78:                               ; preds = %cond_else_blockX76, %cond_else_blockX74
  %eqtmp81 = icmp eq i32 %ch, 117
  br i1 %eqtmp81, label %cond_then_block39, label %cond_else_blockX80
  br label %cond_else_blockX82

cond_else_blockX80:                               ; preds = %cond_else_blockX78, %cond_else_blockX76
  %eqtmp83 = icmp eq i32 %ch, 118
  br i1 %eqtmp83, label %cond_then_block39, label %cond_else_blockX82
  br label %cond_else_blockX84

cond_else_blockX82:                               ; preds = %cond_else_blockX80, %cond_else_blockX78
  %eqtmp85 = icmp eq i32 %ch, 119
  br i1 %eqtmp85, label %cond_then_block39, label %cond_else_blockX84
  br label %cond_else_blockX86

cond_else_blockX84:                               ; preds = %cond_else_blockX82, %cond_else_blockX80
  %eqtmp87 = icmp eq i32 %ch, 120
  br i1 %eqtmp87, label %cond_then_block39, label %cond_else_blockX86
  br label %cond_else_blockX88

cond_else_blockX86:                               ; preds = %cond_else_blockX84, %cond_else_blockX82
  %eqtmp89 = icmp eq i32 %ch, 121
  br i1 %eqtmp89, label %cond_then_block39, label %cond_else_blockX88
  br label %cond_else_blockX90

cond_else_blockX88:                               ; preds = %cond_else_blockX86, %cond_else_blockX84
  %eqtmp91 = icmp eq i32 %ch, 122
  br i1 %eqtmp91, label %cond_then_block39, label %cond_else_blockX90
  br label %cond_else_blockX92

cond_else_blockX90:                               ; preds = %cond_else_blockX88, %cond_else_blockX86
  %eqtmp93 = icmp eq i32 %ch, 65
  br i1 %eqtmp93, label %cond_then_block39, label %cond_else_blockX92
  br label %cond_else_blockX94

cond_else_blockX92:                               ; preds = %cond_else_blockX90, %cond_else_blockX88
  %eqtmp95 = icmp eq i32 %ch, 66
  br i1 %eqtmp95, label %cond_then_block39, label %cond_else_blockX94
  br label %cond_else_blockX96

cond_else_blockX94:                               ; preds = %cond_else_blockX92, %cond_else_blockX90
  %eqtmp97 = icmp eq i32 %ch, 67
  br i1 %eqtmp97, label %cond_then_block39, label %cond_else_blockX96
  br label %cond_else_blockX98

cond_else_blockX96:                               ; preds = %cond_else_blockX94, %cond_else_blockX92
  %eqtmp99 = icmp eq i32 %ch, 68
  br i1 %eqtmp99, label %cond_then_block39, label %cond_else_blockX98
  br label %cond_else_blockX100

cond_else_blockX98:                               ; preds = %cond_else_blockX96, %cond_else_blockX94
  %eqtmp101 = icmp eq i32 %ch, 69
  br i1 %eqtmp101, label %cond_then_block39, label %cond_else_blockX100
  br label %cond_else_blockX102

cond_else_blockX100:                              ; preds = %cond_else_blockX98, %cond_else_blockX96
  %eqtmp103 = icmp eq i32 %ch, 70
  br i1 %eqtmp103, label %cond_then_block39, label %cond_else_blockX102
  br label %cond_else_blockX104

cond_else_blockX102:                              ; preds = %cond_else_blockX100, %cond_else_blockX98
  %eqtmp105 = icmp eq i32 %ch, 71
  br i1 %eqtmp105, label %cond_then_block39, label %cond_else_blockX104
  br label %cond_else_blockX106

cond_else_blockX104:                              ; preds = %cond_else_blockX102, %cond_else_blockX100
  %eqtmp107 = icmp eq i32 %ch, 72
  br i1 %eqtmp107, label %cond_then_block39, label %cond_else_blockX106
  br label %cond_else_blockX108

cond_else_blockX106:                              ; preds = %cond_else_blockX104, %cond_else_blockX102
  %eqtmp109 = icmp eq i32 %ch, 73
  br i1 %eqtmp109, label %cond_then_block39, label %cond_else_blockX108
  br label %cond_else_blockX110

cond_else_blockX108:                              ; preds = %cond_else_blockX106, %cond_else_blockX104
  %eqtmp111 = icmp eq i32 %ch, 74
  br i1 %eqtmp111, label %cond_then_block39, label %cond_else_blockX110
  br label %cond_else_blockX112

cond_else_blockX110:                              ; preds = %cond_else_blockX108, %cond_else_blockX106
  %eqtmp113 = icmp eq i32 %ch, 75
  br i1 %eqtmp113, label %cond_then_block39, label %cond_else_blockX112
  br label %cond_else_blockX114

cond_else_blockX112:                              ; preds = %cond_else_blockX110, %cond_else_blockX108
  %eqtmp115 = icmp eq i32 %ch, 76
  br i1 %eqtmp115, label %cond_then_block39, label %cond_else_blockX114
  br label %cond_else_blockX116

cond_else_blockX114:                              ; preds = %cond_else_blockX112, %cond_else_blockX110
  %eqtmp117 = icmp eq i32 %ch, 77
  br i1 %eqtmp117, label %cond_then_block39, label %cond_else_blockX116
  br label %cond_else_blockX118

cond_else_blockX116:                              ; preds = %cond_else_blockX114, %cond_else_blockX112
  %eqtmp119 = icmp eq i32 %ch, 78
  br i1 %eqtmp119, label %cond_then_block39, label %cond_else_blockX118
  br label %cond_else_blockX120

cond_else_blockX118:                              ; preds = %cond_else_blockX116, %cond_else_blockX114
  %eqtmp121 = icmp eq i32 %ch, 79
  br i1 %eqtmp121, label %cond_then_block39, label %cond_else_blockX120
  br label %cond_else_blockX122

cond_else_blockX120:                              ; preds = %cond_else_blockX118, %cond_else_blockX116
  %eqtmp123 = icmp eq i32 %ch, 80
  br i1 %eqtmp123, label %cond_then_block39, label %cond_else_blockX122
  br label %cond_else_blockX124

cond_else_blockX122:                              ; preds = %cond_else_blockX120, %cond_else_blockX118
  %eqtmp125 = icmp eq i32 %ch, 81
  br i1 %eqtmp125, label %cond_then_block39, label %cond_else_blockX124
  br label %cond_else_blockX126

cond_else_blockX124:                              ; preds = %cond_else_blockX122, %cond_else_blockX120
  %eqtmp127 = icmp eq i32 %ch, 82
  br i1 %eqtmp127, label %cond_then_block39, label %cond_else_blockX126
  br label %cond_else_blockX128

cond_else_blockX126:                              ; preds = %cond_else_blockX124, %cond_else_blockX122
  %eqtmp129 = icmp eq i32 %ch, 83
  br i1 %eqtmp129, label %cond_then_block39, label %cond_else_blockX128
  br label %cond_else_blockX130

cond_else_blockX128:                              ; preds = %cond_else_blockX126, %cond_else_blockX124
  %eqtmp131 = icmp eq i32 %ch, 84
  br i1 %eqtmp131, label %cond_then_block39, label %cond_else_blockX130
  br label %cond_else_blockX132

cond_else_blockX130:                              ; preds = %cond_else_blockX128, %cond_else_blockX126
  %eqtmp133 = icmp eq i32 %ch, 85
  br i1 %eqtmp133, label %cond_then_block39, label %cond_else_blockX132
  br label %cond_else_blockX134

cond_else_blockX132:                              ; preds = %cond_else_blockX130, %cond_else_blockX128
  %eqtmp135 = icmp eq i32 %ch, 86
  br i1 %eqtmp135, label %cond_then_block39, label %cond_else_blockX134
  br label %cond_else_blockX136

cond_else_blockX134:                              ; preds = %cond_else_blockX132, %cond_else_blockX130
  %eqtmp137 = icmp eq i32 %ch, 87
  br i1 %eqtmp137, label %cond_then_block39, label %cond_else_blockX136
  br label %cond_else_blockX138

cond_else_blockX136:                              ; preds = %cond_else_blockX134, %cond_else_blockX132
  %eqtmp139 = icmp eq i32 %ch, 88
  br i1 %eqtmp139, label %cond_then_block39, label %cond_else_blockX138
  br label %cond_else_blockX140

cond_else_blockX138:                              ; preds = %cond_else_blockX136, %cond_else_blockX134
  %eqtmp141 = icmp eq i32 %ch, 89
  br i1 %eqtmp141, label %cond_then_block39, label %cond_else_blockX140
  br label %cond_else_blockX142

cond_else_blockX140:                              ; preds = %cond_else_blockX138, %cond_else_blockX136
  %eqtmp143 = icmp eq i32 %ch, 90
  br i1 %eqtmp143, label %cond_then_block39, label %cond_else_blockX142
  br label %cond_else_blockX144

cond_else_blockX142:                              ; preds = %cond_else_blockX140, %cond_else_blockX138
  %eqtmp145 = icmp eq i32 %ch, 95
  br i1 %eqtmp145, label %cond_then_block39, label %cond_else_blockX144
  br label %cond_else_blockX146

cond_else_blockX144:                              ; preds = %cond_else_blockX142, %cond_else_blockX140
  %eqtmp147 = icmp eq i32 %ch, 92
  br i1 %eqtmp147, label %cond_then_block39, label %cond_else_blockX146
  br label %cond_else_blockX148

cond_else_blockX146:                              ; preds = %cond_else_blockX144, %cond_else_blockX142
  %eqtmp149 = icmp eq i32 %ch, 46
  br i1 %eqtmp149, label %cond_then_block39, label %cond_else_blockX148
  br label %cond_else_blockX150

cond_else_blockX148:                              ; preds = %cond_else_blockX146, %cond_else_blockX144
  %eqtmp151 = icmp eq i32 %ch, 36
  br i1 %eqtmp151, label %cond_then_block39, label %cond_else_blockX150
  br label %cond_else_blockX152

cond_else_blockX150:                              ; preds = %cond_else_blockX148, %cond_else_blockX146
  %eqtmp153 = icmp eq i32 %ch, 126
  br i1 %eqtmp153, label %cond_then_block39, label %cond_else_blockX152

cond_else_blockX152:                              ; preds = %after_break213, %cond_else_blockX150, %cond_else_blockX148
  %eqtmp216 = icmp eq i32 %ch, -1
  br i1 %eqtmp216, label %cond_then_block214, label %cond_else_blockX215

loop_continue_top_block:                          ; preds = %cond_end202
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %ld_next.parse_name
  br i1 true, label %cond_then_block155, label %cond_end_block

cond_then_block155:                               ; preds = %loop_top_block
  %ch158 = load i32, i32* @ch, align 4
  %gteq_signed = icmp sge i32 %ch158, 97
  store i1 %gteq_signed, i1* %andand, align 1
  br i1 %gteq_signed, label %cond_jump_then159, label %cond_jump_end

cond_end_block:                                   ; preds = %cond_jump_then193, %loop_top_block
  %q212 = load i8*, i8** %q, align 8
  store i8 0, i8* %q212, align 1
  store i32 256, i32* %c, align 4
  br label %end_blockX

cond_jump_then159:                                ; preds = %cond_then_block155
  %ch160 = load i32, i32* @ch, align 4
  %leeq = icmp sle i32 %ch160, 122
  %andand161 = and i1 %gteq_signed, %leeq
  store i1 %andand161, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then159, %cond_then_block155
  %andand_result_value = load i1, i1* %andand, align 1
  store i1 %andand_result_value, i1* %oror157, align 1
  br i1 %andand_result_value, label %cond_jump_end163, label %cond_jump_then162

cond_jump_then162:                                ; preds = %cond_jump_end
  %ch165 = load i32, i32* @ch, align 4
  %gteq_signed166 = icmp sge i32 %ch165, 65
  store i1 %gteq_signed166, i1* %andand164, align 1
  br i1 %gteq_signed166, label %cond_jump_then167, label %cond_jump_end168

cond_jump_end163:                                 ; preds = %cond_jump_end168, %cond_jump_end
  %oror_result_value = load i1, i1* %oror157, align 1
  store i1 %oror_result_value, i1* %oror156, align 1
  br i1 %oror_result_value, label %cond_jump_end175, label %cond_jump_then174

cond_jump_then167:                                ; preds = %cond_jump_then162
  %ch169 = load i32, i32* @ch, align 4
  %leeq170 = icmp sle i32 %ch169, 90
  %andand171 = and i1 %gteq_signed166, %leeq170
  store i1 %andand171, i1* %andand164, align 1
  br label %cond_jump_end168

cond_jump_end168:                                 ; preds = %cond_jump_then167, %cond_jump_then162
  %andand_result_value172 = load i1, i1* %andand164, align 1
  %oror173 = or i1 %andand_result_value, %andand_result_value172
  store i1 %oror173, i1* %oror157, align 1
  br label %cond_jump_end163

cond_jump_then174:                                ; preds = %cond_jump_end163
  %ch177 = load i32, i32* @ch, align 4
  %gteq_signed178 = icmp sge i32 %ch177, 48
  store i1 %gteq_signed178, i1* %andand176, align 1
  br i1 %gteq_signed178, label %cond_jump_then179, label %cond_jump_end180

cond_jump_end175:                                 ; preds = %cond_jump_end180, %cond_jump_end163
  %oror_result_value186 = load i1, i1* %oror156, align 1
  store i1 %oror_result_value186, i1* %oror, align 1
  br i1 %oror_result_value186, label %cond_jump_end188, label %cond_jump_then187

cond_jump_then179:                                ; preds = %cond_jump_then174
  %ch181 = load i32, i32* @ch, align 4
  %leeq182 = icmp sle i32 %ch181, 57
  %andand183 = and i1 %gteq_signed178, %leeq182
  store i1 %andand183, i1* %andand176, align 1
  br label %cond_jump_end180

cond_jump_end180:                                 ; preds = %cond_jump_then179, %cond_jump_then174
  %andand_result_value184 = load i1, i1* %andand176, align 1
  %oror185 = or i1 %oror_result_value, %andand_result_value184
  store i1 %oror185, i1* %oror156, align 1
  br label %cond_jump_end175

cond_jump_then187:                                ; preds = %cond_jump_end175
  %ch189 = load i32, i32* @ch, align 4
  %fun_result190 = call i8* @strchr(i8* bitcast ([12 x i8]* @274 to i8*), i32 %ch189)
  %icmpB = icmp ne i8* %fun_result190, null
  %oror191 = or i1 %oror_result_value186, %icmpB
  store i1 %oror191, i1* %oror, align 1
  br label %cond_jump_end188

cond_jump_end188:                                 ; preds = %cond_jump_then187, %cond_jump_end175
  %oror_result_value192 = load i1, i1* %oror, align 1
  %logical_denial = icmp eq i1 %oror_result_value192, false
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then193, label %cond_end194

cond_jump_then193:                                ; preds = %cond_jump_end188
  br label %cond_end_block

cond_end194:                                      ; preds = %after_break195, %cond_jump_end188
  %q196 = load i8*, i8** %q, align 8
  %name197 = load i8*, i8** %name, align 8
  %ptrToIntG = ptrtoint i8* %q196 to i64
  %ptrToIntH = ptrtoint i8* %name197 to i64
  %sub198 = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub198, 1
  %name_size199 = load i32, i32* %name_size, align 4
  %sub200 = sub i32 %name_size199, 1
  %icastD = sext i32 %sub200 to i64
  %le = icmp slt i64 %div, %icastD
  br i1 %le, label %cond_jump_then201, label %cond_end202

after_break195:                                   ; No predecessors!
  br label %cond_end194

cond_jump_then201:                                ; preds = %cond_end194
  %q203 = load i8*, i8** %q, align 8
  %ptrToIntC204 = ptrtoint i8* %q203 to i64
  %add205 = add i64 %ptrToIntC204, 1
  %intToPtrB206 = inttoptr i64 %add205 to i8*
  store i8* %intToPtrB206, i8** %q, align 8
  %q207 = load i8*, i8** %q, align 8
  %ptrToIntI208 = ptrtoint i8* %q207 to i64
  %sub209 = sub i64 %ptrToIntI208, 1
  %iintToPtrD210 = inttoptr i64 %sub209 to i8*
  %ch211 = load i32, i32* @ch, align 4
  %icastJ = trunc i32 %ch211 to i8
  store i8 %icastJ, i8* %iintToPtrD210, align 1
  br label %cond_end202

cond_end202:                                      ; preds = %cond_jump_then201, %cond_end194
  call void @minp()
  br label %loop_continue_top_block

after_break213:                                   ; No predecessors!
  br label %cond_else_blockX152
  br label %cond_else_blockX215

cond_then_block214:                               ; preds = %cond_else_blockX152
  store i32 -1, i32* %c, align 4
  br label %end_blockX

cond_else_blockX215:                              ; preds = %after_break217, %cond_else_blockX152, %after_break213
  br label %cond_then_block218

after_break217:                                   ; No predecessors!
  br label %cond_else_blockX215
  br label %cond_else_blockX219

cond_then_block218:                               ; preds = %cond_else_blockX215
  %ch220 = load i32, i32* @ch, align 4
  store i32 %ch220, i32* %c, align 4
  store i32 2644, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @tccelf.c.148, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %inp221

cond_else_blockX219:                              ; preds = %after_break238, %after_break217
  br label %end_blockX

inp221:                                           ; preds = %cond_then_block218
  %file223 = load %BufferedFile*, %BufferedFile** @file, align 8
  %file224 = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL225 = getelementptr inbounds %BufferedFile, %BufferedFile* %file224, i32 0, i32 0
  %buf_ptr226 = load i8*, i8** %fieldLLL225, align 8
  %ptrToIntC227 = ptrtoint i8* %buf_ptr226 to i64
  %add228 = add i64 %ptrToIntC227, 1
  %intToPtrB229 = inttoptr i64 %add228 to i8*
  %fieldTU230 = getelementptr inbounds %BufferedFile, %BufferedFile* %file223, i32 0, i32 0
  store i8* %intToPtrB229, i8** %fieldTU230, align 8
  %derefference_valueB231 = load i8, i8* %intToPtrB229, align 1
  %icastKY232 = zext i8 %derefference_valueB231 to i32
  store i32 %icastKY232, i32* @ch, align 4
  %ch233 = load i32, i32* @ch, align 4
  %eq234 = icmp eq i32 %ch233, 92
  br i1 %eq234, label %cond_jump_then235, label %cond_end236

inp_end222:                                       ; preds = %cond_end236
  br label %end_blockX

cond_jump_then235:                                ; preds = %inp221
  %fun_result237 = call i32 @handle_eob()
  store i32 %fun_result237, i32* @ch, align 4
  br label %cond_end236

cond_end236:                                      ; preds = %cond_jump_then235, %inp221
  br label %inp_end222

after_break238:                                   ; No predecessors!
  br label %cond_else_blockX219
}

define internal i32 @ld_add_file_list(%TCCState* %0, i32 %1) {
entry:
  %ret = alloca i32, align 4
  %t = alloca i32, align 4
  %filename = alloca [1024 x i8], align 1
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %as_needed = alloca i32, align 4
  %as_needed2 = alloca i32*, align 8
  store i32 %1, i32* %as_needed, align 4
  store i32* %as_needed, i32** %as_needed2, align 8
  %s13 = load %TCCState*, %TCCState** %s1, align 8
  %autocast = bitcast [1024 x i8]* %filename to i8*
  %fun_result = call i32 @ld_next(%TCCState* %s13, i8* %autocast, i32 1024)
  store i32 %fun_result, i32* %t, align 4
  %t4 = load i32, i32* %t, align 4
  %not_eq = icmp ne i32 %t4, 40
  br i1 %not_eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  call void @expect(i8* bitcast ([2 x i8]* @275 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then, %entry
  %s15 = load %TCCState*, %TCCState** %s1, align 8
  %autocast6 = bitcast [1024 x i8]* %filename to i8*
  %fun_result7 = call i32 @ld_next(%TCCState* %s15, i8* %autocast6, i32 1024)
  store i32 %fun_result7, i32* %t, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end41
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %t8 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t8, -1
  br i1 %eq, label %cond_jump_then9, label %cond_jump_elif0

cond_end_block:                                   ; preds = %cond_jump_elif_then0, %loop_top_block
  ret i32 0

cond_jump_then9:                                  ; preds = %cond_then_block
  call void (i8*, ...) @error_noabort(i8* bitcast ([23 x i8]* @276 to i8*))
  ret i32 -1

cond_jump_elif0:                                  ; preds = %cond_then_block
  %t11 = load i32, i32* %t, align 4
  %eq12 = icmp eq i32 %t11, 41
  br i1 %eq12, label %cond_jump_elif_then0, label %cond_jump_elif1

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  br label %cond_end_block

cond_jump_elif1:                                  ; preds = %cond_jump_elif0
  %t13 = load i32, i32* %t, align 4
  %not_eq14 = icmp ne i32 %t13, 256
  br i1 %not_eq14, label %cond_jump_elif_then1, label %cond_end10

cond_jump_elif_then1:                             ; preds = %cond_jump_elif1
  call void (i8*, ...) @error_noabort(i8* bitcast ([18 x i8]* @277 to i8*))
  ret i32 -1

cond_end10:                                       ; preds = %cond_jump_elif1, %after_break
  %autocast15 = bitcast [1024 x i8]* %filename to i8*
  %fun_result16 = call i32 @strcmp(i8* %autocast15, i8* bitcast ([10 x i8]* @278 to i8*))
  %logical_denial = icmp eq i32 %fun_result16, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then17, label %cond_else_block

after_break:                                      ; No predecessors!
  br label %cond_end10

cond_jump_then17:                                 ; preds = %cond_end10
  %s119 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result20 = call i32 @ld_add_file_list(%TCCState* %s119, i32 1)
  store i32 %fun_result20, i32* %ret, align 4
  %ret21 = load i32, i32* %ret, align 4
  %icmpA22 = icmp ne i32 %ret21, 0
  br i1 %icmpA22, label %cond_jump_then23, label %cond_end24

cond_else_block:                                  ; preds = %cond_end10
  %as_needed26 = load i32, i32* %as_needed, align 4
  %logical_denial27 = icmp eq i32 %as_needed26, 0
  %castOOOO28 = zext i1 %logical_denial27 to i32
  %icmpA29 = icmp ne i32 %castOOOO28, 0
  br i1 %icmpA29, label %cond_jump_then30, label %cond_end31

cond_end18:                                       ; preds = %cond_end31, %cond_end24
  %s135 = load %TCCState*, %TCCState** %s1, align 8
  %autocast36 = bitcast [1024 x i8]* %filename to i8*
  %fun_result37 = call i32 @ld_next(%TCCState* %s135, i8* %autocast36, i32 1024)
  store i32 %fun_result37, i32* %t, align 4
  %t38 = load i32, i32* %t, align 4
  %eq39 = icmp eq i32 %t38, 44
  br i1 %eq39, label %cond_jump_then40, label %cond_end41

cond_jump_then23:                                 ; preds = %cond_jump_then17
  %ret25 = load i32, i32* %ret, align 4
  ret i32 %ret25

cond_end24:                                       ; preds = %cond_jump_then17
  br label %cond_end18

cond_jump_then30:                                 ; preds = %cond_else_block
  %s132 = load %TCCState*, %TCCState** %s1, align 8
  %autocast33 = bitcast [1024 x i8]* %filename to i8*
  %fun_result34 = call i32 @tcc_add_file(%TCCState* %s132, i8* %autocast33)
  br label %cond_end31

cond_end31:                                       ; preds = %cond_jump_then30, %cond_else_block
  br label %cond_end18

cond_jump_then40:                                 ; preds = %cond_end18
  %s142 = load %TCCState*, %TCCState** %s1, align 8
  %autocast43 = bitcast [1024 x i8]* %filename to i8*
  %fun_result44 = call i32 @ld_next(%TCCState* %s142, i8* %autocast43, i32 1024)
  store i32 %fun_result44, i32* %t, align 4
  br label %cond_end41

cond_end41:                                       ; preds = %cond_jump_then40, %cond_end18
  br label %loop_continue_top_block
}

define internal i32 @tcc_load_ldscript(%TCCState* %0) {
entry:
  %oror26 = alloca i1, align 1
  %oror = alloca i1, align 1
  %ret = alloca i32, align 4
  %t = alloca i32, align 4
  %filename = alloca [1024 x i8], align 1
  %cmd = alloca [64 x i8], align 1
  %s1 = alloca %TCCState*, align 8
  %s11 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s1, align 8
  store %TCCState** %s1, %TCCState*** %s11, align 8
  %file = load %BufferedFile*, %BufferedFile** @file, align 8
  %fieldLLL = getelementptr inbounds %BufferedFile, %BufferedFile* %file, i32 0, i32 0
  %buf_ptr = load i8*, i8** %fieldLLL, align 8
  %element_addressAB = load i8*, i8** %fieldLLL, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastKY = zext i8 %load_element to i32
  store i32 %icastKY, i32* @ch, align 4
  %fun_result = call i32 @handle_eob()
  store i32 %fun_result, i32* @ch, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end18
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %s12 = load %TCCState*, %TCCState** %s1, align 8
  %autocast = bitcast [64 x i8]* %cmd to i8*
  %fun_result3 = call i32 @ld_next(%TCCState* %s12, i8* %autocast, i32 64)
  store i32 %fun_result3, i32* %t, align 4
  %t4 = load i32, i32* %t, align 4
  %eq = icmp eq i32 %t4, -1
  br i1 %eq, label %cond_jump_then, label %cond_jump_elif0

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 0

cond_jump_then:                                   ; preds = %cond_then_block
  ret i32 0

cond_jump_elif0:                                  ; preds = %cond_then_block
  %t5 = load i32, i32* %t, align 4
  %not_eq = icmp ne i32 %t5, 256
  br i1 %not_eq, label %cond_jump_elif_then0, label %cond_end

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  ret i32 -1

cond_end:                                         ; preds = %cond_jump_elif0
  %autocast6 = bitcast [64 x i8]* %cmd to i8*
  %fun_result7 = call i32 @strcmp(i8* %autocast6, i8* bitcast ([6 x i8]* @279 to i8*))
  %logical_denial = icmp eq i32 %fun_result7, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  store i1 %icmpA, i1* %oror, align 1
  br i1 %icmpA, label %cond_jump_end, label %cond_jump_then8

cond_jump_then8:                                  ; preds = %cond_end
  %autocast9 = bitcast [64 x i8]* %cmd to i8*
  %fun_result10 = call i32 @strcmp(i8* %autocast9, i8* bitcast ([6 x i8]* @280 to i8*))
  %logical_denial11 = icmp eq i32 %fun_result10, 0
  %castOOOO12 = zext i1 %logical_denial11 to i32
  %icmpA13 = icmp ne i32 %castOOOO12, 0
  %oror14 = or i1 %icmpA, %icmpA13
  store i1 %oror14, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then8, %cond_end
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then15, label %cond_jump_elif016

cond_jump_then15:                                 ; preds = %cond_jump_end
  %s119 = load %TCCState*, %TCCState** %s1, align 8
  %fun_result20 = call i32 @ld_add_file_list(%TCCState* %s119, i32 0)
  store i32 %fun_result20, i32* %ret, align 4
  %ret21 = load i32, i32* %ret, align 4
  %icmpA22 = icmp ne i32 %ret21, 0
  br i1 %icmpA22, label %cond_jump_then23, label %cond_end24

cond_jump_elif016:                                ; preds = %cond_jump_end
  %autocast27 = bitcast [64 x i8]* %cmd to i8*
  %fun_result28 = call i32 @strcmp(i8* %autocast27, i8* bitcast ([14 x i8]* @281 to i8*))
  %logical_denial29 = icmp eq i32 %fun_result28, 0
  %castOOOO30 = zext i1 %logical_denial29 to i32
  %icmpA31 = icmp ne i32 %castOOOO30, 0
  store i1 %icmpA31, i1* %oror26, align 1
  br i1 %icmpA31, label %cond_jump_end33, label %cond_jump_then32

cond_jump_elif_then017:                           ; preds = %cond_jump_end33
  %s141 = load %TCCState*, %TCCState** %s1, align 8
  %autocast42 = bitcast [64 x i8]* %cmd to i8*
  %fun_result43 = call i32 @ld_next(%TCCState* %s141, i8* %autocast42, i32 64)
  store i32 %fun_result43, i32* %t, align 4
  %t44 = load i32, i32* %t, align 4
  %not_eq45 = icmp ne i32 %t44, 40
  br i1 %not_eq45, label %cond_jump_then46, label %cond_end47

cond_else_block:                                  ; preds = %cond_jump_end33
  ret i32 -1

cond_end18:                                       ; preds = %cond_end_block51, %cond_end24
  br label %loop_continue_top_block

cond_jump_then23:                                 ; preds = %cond_jump_then15
  %ret25 = load i32, i32* %ret, align 4
  ret i32 %ret25

cond_end24:                                       ; preds = %cond_jump_then15
  br label %cond_end18

cond_jump_then32:                                 ; preds = %cond_jump_elif016
  %autocast34 = bitcast [64 x i8]* %cmd to i8*
  %fun_result35 = call i32 @strcmp(i8* %autocast34, i8* bitcast ([7 x i8]* @282 to i8*))
  %logical_denial36 = icmp eq i32 %fun_result35, 0
  %castOOOO37 = zext i1 %logical_denial36 to i32
  %icmpA38 = icmp ne i32 %castOOOO37, 0
  %oror39 = or i1 %icmpA31, %icmpA38
  store i1 %oror39, i1* %oror26, align 1
  br label %cond_jump_end33

cond_jump_end33:                                  ; preds = %cond_jump_then32, %cond_jump_elif016
  %oror_result_value40 = load i1, i1* %oror26, align 1
  br i1 %oror_result_value40, label %cond_jump_elif_then017, label %cond_else_block

cond_jump_then46:                                 ; preds = %cond_jump_elif_then017
  call void @expect(i8* bitcast ([2 x i8]* @283 to i8*))
  br label %cond_end47

cond_end47:                                       ; preds = %cond_jump_then46, %cond_jump_elif_then017
  br label %loop_top_block49

loop_continue_top_block48:                        ; preds = %cond_end60
  br label %loop_top_block49

loop_top_block49:                                 ; preds = %loop_continue_top_block48, %cond_end47
  br i1 true, label %cond_then_block50, label %cond_end_block51

cond_then_block50:                                ; preds = %loop_top_block49
  %s152 = load %TCCState*, %TCCState** %s1, align 8
  %autocast53 = bitcast [1024 x i8]* %filename to i8*
  %fun_result54 = call i32 @ld_next(%TCCState* %s152, i8* %autocast53, i32 1024)
  store i32 %fun_result54, i32* %t, align 4
  %t55 = load i32, i32* %t, align 4
  %eq56 = icmp eq i32 %t55, -1
  br i1 %eq56, label %cond_jump_then57, label %cond_jump_elif058

cond_end_block51:                                 ; preds = %cond_jump_elif_then059, %loop_top_block49
  br label %cond_end18

cond_jump_then57:                                 ; preds = %cond_then_block50
  call void (i8*, ...) @error_noabort(i8* bitcast ([23 x i8]* @284 to i8*))
  ret i32 -1

cond_jump_elif058:                                ; preds = %cond_then_block50
  %t61 = load i32, i32* %t, align 4
  %eq62 = icmp eq i32 %t61, 41
  br i1 %eq62, label %cond_jump_elif_then059, label %cond_end60

cond_jump_elif_then059:                           ; preds = %cond_jump_elif058
  br label %cond_end_block51

cond_end60:                                       ; preds = %after_break, %cond_jump_elif058
  br label %loop_continue_top_block48

after_break:                                      ; No predecessors!
  br label %cond_end60
}

define internal void @rt_printline(i64 %0) {
entry:
  %andand209 = alloca i1, align 1
  %type = alloca i32, align 4
  %sym_end178 = alloca %come_anon88*, align 8
  %sym177 = alloca %come_anon88*, align 8
  %andand158 = alloca i1, align 1
  %andand77 = alloca i1, align 1
  %andand = alloca i1, align 1
  %p = alloca i8*, align 8
  %str = alloca i8*, align 8
  %i = alloca i32, align 4
  %last_line_num = alloca i32, align 4
  %len = alloca i32, align 4
  %incl_index = alloca i32, align 4
  %incl_files = alloca [32 x i8*], align 8
  %pc = alloca i64, align 8
  %last_pc = alloca i64, align 8
  %func_addr = alloca i64, align 8
  %last_func_name = alloca [128 x i8], align 1
  %func_name = alloca [128 x i8], align 1
  %sym_end = alloca %come_anon133*, align 8
  %sym = alloca %come_anon133*, align 8
  %wanted_pc = alloca i64, align 8
  %wanted_pc1 = alloca i64*, align 8
  store i64 %0, i64* %wanted_pc, align 4
  store i64* %wanted_pc, i64** %wanted_pc1, align 8
  %stderr = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %wanted_pc2 = load i64, i64* %wanted_pc, align 4
  %fun_result = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr, i8* bitcast ([9 x i8]* @285 to i8*), i64 %wanted_pc2)
  %array_castA = bitcast [128 x i8]* %func_name to i8*
  %gepBX = getelementptr i8, i8* %array_castA, i32 0
  store i8 0, i8* %gepBX, align 1
  store i64 0, i64* %func_addr, align 4
  store i32 0, i32* %incl_index, align 4
  %array_castA3 = bitcast [128 x i8]* %last_func_name to i8*
  %gepBX4 = getelementptr i8, i8* %array_castA3, i32 0
  store i8 0, i8* %gepBX4, align 1
  store i64 -1, i64* %last_pc, align 4
  store i32 1, i32* %last_line_num, align 4
  %stab_section = load %Section*, %Section** @stab_section, align 8
  %fieldLLL = getelementptr inbounds %Section, %Section* %stab_section, i32 0, i32 1
  %data = load i8*, i8** %fieldLLL, align 8
  %castAQ = bitcast i8* %data to %come_anon133*
  %ptrToIntC = ptrtoint %come_anon133* %castAQ to i64
  %add = add i64 %ptrToIntC, 12
  %intToPtrB = inttoptr i64 %add to %come_anon133*
  store %come_anon133* %intToPtrB, %come_anon133** %sym, align 8
  %stab_section5 = load %Section*, %Section** @stab_section, align 8
  %fieldLLL6 = getelementptr inbounds %Section, %Section* %stab_section5, i32 0, i32 1
  %data7 = load i8*, i8** %fieldLLL6, align 8
  %stab_section8 = load %Section*, %Section** @stab_section, align 8
  %fieldLLL9 = getelementptr inbounds %Section, %Section* %stab_section8, i32 0, i32 0
  %data_offset = load i64, i64* %fieldLLL9, align 4
  %ptrToIntC10 = ptrtoint i8* %data7 to i64
  %mul = mul i64 %data_offset, 1
  %add11 = add i64 %ptrToIntC10, %mul
  %intToPtrB12 = inttoptr i64 %add11 to i8*
  %castAQ13 = bitcast i8* %intToPtrB12 to %come_anon133*
  store %come_anon133* %castAQ13, %come_anon133** %sym_end, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %end_blockX, %entry
  %sym14 = load %come_anon133*, %come_anon133** %sym, align 8
  %sym_end15 = load %come_anon133*, %come_anon133** %sym_end, align 8
  %le = icmp slt %come_anon133* %sym14, %sym_end15
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %sym16 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL17 = getelementptr inbounds %come_anon133, %come_anon133* %sym16, i32 0, i32 1
  %n_type = load i8, i8* %fieldLLL17, align 1
  %eqtmp = icmp eq i8 %n_type, 36
  br i1 %eqtmp, label %cond_then_block18, label %cond_else_blockX

cond_end_block:                                   ; preds = %loop_top_block
  store i32 0, i32* %incl_index, align 4
  %symtab_section = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL179 = getelementptr inbounds %Section, %Section* %symtab_section, i32 0, i32 1
  %data180 = load i8*, i8** %fieldLLL179, align 8
  %symtab_section181 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL182 = getelementptr inbounds %Section, %Section* %symtab_section181, i32 0, i32 0
  %data_offset183 = load i64, i64* %fieldLLL182, align 4
  %ptrToIntC184 = ptrtoint i8* %data180 to i64
  %mul185 = mul i64 %data_offset183, 1
  %add186 = add i64 %ptrToIntC184, %mul185
  %intToPtrB187 = inttoptr i64 %add186 to i8*
  %castAQ188 = bitcast i8* %intToPtrB187 to %come_anon88*
  store %come_anon88* %castAQ188, %come_anon88** %sym_end178, align 8
  %symtab_section189 = load %Section*, %Section** @symtab_section, align 8
  %fieldLLL190 = getelementptr inbounds %Section, %Section* %symtab_section189, i32 0, i32 1
  %data191 = load i8*, i8** %fieldLLL190, align 8
  %castAQ192 = bitcast i8* %data191 to %come_anon88*
  %ptrToIntC193 = ptrtoint %come_anon88* %castAQ192 to i64
  %add194 = add i64 %ptrToIntC193, 24
  %intToPtrB195 = inttoptr i64 %add194 to %come_anon88*
  store %come_anon88* %intToPtrB195, %come_anon88** %sym177, align 8
  br label %loop_top_block196

end_blockX:                                       ; preds = %cond_else_blockX135, %cond_end143, %cond_end129, %cond_end114, %cond_end89, %cond_end
  %sym171 = load %come_anon133*, %come_anon133** %sym, align 8
  %ptrToIntC172 = ptrtoint %come_anon133* %sym171 to i64
  %add173 = add i64 %ptrToIntC172, 12
  %intToPtrB174 = inttoptr i64 %add173 to %come_anon133*
  store %come_anon133* %intToPtrB174, %come_anon133** %sym, align 8
  %sym175 = load %come_anon133*, %come_anon133** %sym, align 8
  %ptrToIntI = ptrtoint %come_anon133* %sym175 to i64
  %sub176 = sub i64 %ptrToIntI, 12
  %iintToPtrD = inttoptr i64 %sub176 to %come_anon133*
  br label %loop_top_block

cond_then_block18:                                ; preds = %cond_then_block
  %sym19 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL20 = getelementptr inbounds %come_anon133, %come_anon133* %sym19, i32 0, i32 0
  %n_strx = load i32, i32* %fieldLLL20, align 4
  %eq = icmp eq i32 %n_strx, 0
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_else_blockX:                                 ; preds = %after_break, %cond_then_block
  %eqtmp70 = icmp eq i8 %n_type, 68
  br i1 %eqtmp70, label %cond_then_block68, label %cond_else_blockX69

cond_jump_then:                                   ; preds = %cond_then_block18
  %sym21 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL22 = getelementptr inbounds %come_anon133, %come_anon133* %sym21, i32 0, i32 4
  %n_value = load i32, i32* %fieldLLL22, align 4
  %func_addr23 = load i64, i64* %func_addr, align 4
  %icastC = zext i32 %n_value to i64
  %add24 = add i64 %icastC, %func_addr23
  store i64 %add24, i64* %pc, align 4
  %wanted_pc25 = load i64, i64* %wanted_pc, align 4
  %last_pc26 = load i64, i64* %last_pc, align 4
  %gteq_unsinged = icmp uge i64 %wanted_pc25, %last_pc26
  store i1 %gteq_unsinged, i1* %andand, align 1
  br i1 %gteq_unsinged, label %cond_jump_then27, label %cond_jump_end

cond_else_block:                                  ; preds = %cond_then_block18
  %stabstr_section = load %Section*, %Section** @stabstr_section, align 8
  %fieldLLL36 = getelementptr inbounds %Section, %Section* %stabstr_section, i32 0, i32 1
  %data37 = load i8*, i8** %fieldLLL36, align 8
  %sym38 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL39 = getelementptr inbounds %come_anon133, %come_anon133* %sym38, i32 0, i32 0
  %n_strx40 = load i32, i32* %fieldLLL39, align 4
  %ptrToIntC41 = ptrtoint i8* %data37 to i64
  %sext = sext i32 %n_strx40 to i64
  %mul42 = mul i64 %sext, 1
  %add43 = add i64 %ptrToIntC41, %mul42
  %intToPtrB44 = inttoptr i64 %add43 to i8*
  store i8* %intToPtrB44, i8** %str, align 8
  %str45 = load i8*, i8** %str, align 8
  %fun_result46 = call i8* @strchr(i8* %str45, i32 58)
  store i8* %fun_result46, i8** %p, align 8
  %p47 = load i8*, i8** %p, align 8
  %logical_denial = icmp eq i8* %p47, null
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then48, label %cond_else_block49

cond_end:                                         ; preds = %cond_end50, %cond_end33
  br label %end_blockX

cond_jump_then27:                                 ; preds = %cond_jump_then
  %wanted_pc28 = load i64, i64* %wanted_pc, align 4
  %pc29 = load i64, i64* %pc, align 4
  %le30 = icmp ult i64 %wanted_pc28, %pc29
  %andand31 = and i1 %gteq_unsinged, %le30
  store i1 %andand31, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then27, %cond_jump_then
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then32, label %cond_end33

cond_jump_then32:                                 ; preds = %cond_jump_end
  br label %rt_printline.found
  br label %cond_end33

cond_end33:                                       ; preds = %cond_jump_then32, %cond_jump_end
  %array_castA34 = bitcast [128 x i8]* %func_name to i8*
  %gepBX35 = getelementptr i8, i8* %array_castA34, i32 0
  store i8 0, i8* %gepBX35, align 1
  store i64 0, i64* %func_addr, align 4
  br label %cond_end

rt_printline.found:                               ; preds = %cond_end_block201, %cond_jump_then226, %cond_jump_then88, %cond_jump_then32
  %array_castG = bitcast [128 x i8]* %last_func_name to i8*
  %gepLY = getelementptr i8, i8* %array_castG, i32 0
  %elementYYY = load i8, i8* %gepLY, align 1
  %icastL249 = sext i8 %elementYYY to i32
  %not_eq250 = icmp ne i32 %icastL249, 0
  br i1 %not_eq250, label %cond_jump_then251, label %cond_end252

cond_jump_then48:                                 ; preds = %cond_else_block
  %autocast = bitcast [128 x i8]* %func_name to i8*
  %str51 = load i8*, i8** %str, align 8
  %fun_result52 = call i8* @pstrcpy(i8* %autocast, i32 128, i8* %str51)
  br label %cond_end50

cond_else_block49:                                ; preds = %cond_else_block
  %p53 = load i8*, i8** %p, align 8
  %str54 = load i8*, i8** %str, align 8
  %ptrToIntG = ptrtoint i8* %p53 to i64
  %ptrToIntH = ptrtoint i8* %str54 to i64
  %sub = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub, 1
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %len, align 4
  %len55 = load i32, i32* %len, align 4
  %gt = icmp sgt i32 %len55, 127
  br i1 %gt, label %cond_jump_then56, label %cond_end57

cond_end50:                                       ; preds = %cond_end57, %cond_jump_then48
  %sym64 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL65 = getelementptr inbounds %come_anon133, %come_anon133* %sym64, i32 0, i32 4
  %n_value66 = load i32, i32* %fieldLLL65, align 4
  %icastC67 = zext i32 %n_value66 to i64
  store i64 %icastC67, i64* %func_addr, align 4
  br label %cond_end

cond_jump_then56:                                 ; preds = %cond_else_block49
  store i32 127, i32* %len, align 4
  br label %cond_end57

cond_end57:                                       ; preds = %cond_jump_then56, %cond_else_block49
  %castBA = bitcast [128 x i8]* %func_name to i8*
  %str58 = load i8*, i8** %str, align 8
  %len59 = load i32, i32* %len, align 4
  %icastD = sext i32 %len59 to i64
  %fun_result60 = call i8* @memcpy(i8* %castBA, i8* %str58, i64 %icastD)
  %len61 = load i32, i32* %len, align 4
  %array_castA62 = bitcast [128 x i8]* %func_name to i8*
  %gepBX63 = getelementptr i8, i8* %array_castA62, i32 %len61
  store i8 0, i8* %gepBX63, align 1
  br label %cond_end50

after_break:                                      ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX69

cond_then_block68:                                ; preds = %cond_else_blockX
  %sym71 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL72 = getelementptr inbounds %come_anon133, %come_anon133* %sym71, i32 0, i32 4
  %n_value73 = load i32, i32* %fieldLLL72, align 4
  %func_addr74 = load i64, i64* %func_addr, align 4
  %icastC75 = zext i32 %n_value73 to i64
  %add76 = add i64 %icastC75, %func_addr74
  store i64 %add76, i64* %pc, align 4
  %wanted_pc78 = load i64, i64* %wanted_pc, align 4
  %last_pc79 = load i64, i64* %last_pc, align 4
  %gteq_unsinged80 = icmp uge i64 %wanted_pc78, %last_pc79
  store i1 %gteq_unsinged80, i1* %andand77, align 1
  br i1 %gteq_unsinged80, label %cond_jump_then81, label %cond_jump_end82

cond_else_blockX69:                               ; preds = %after_break96, %cond_else_blockX, %after_break
  %eqtmp99 = icmp eq i8 %n_type, -126
  br i1 %eqtmp99, label %cond_then_block97, label %cond_else_blockX98

cond_jump_then81:                                 ; preds = %cond_then_block68
  %wanted_pc83 = load i64, i64* %wanted_pc, align 4
  %pc84 = load i64, i64* %pc, align 4
  %le85 = icmp ult i64 %wanted_pc83, %pc84
  %andand86 = and i1 %gteq_unsinged80, %le85
  store i1 %andand86, i1* %andand77, align 1
  br label %cond_jump_end82

cond_jump_end82:                                  ; preds = %cond_jump_then81, %cond_then_block68
  %andand_result_value87 = load i1, i1* %andand77, align 1
  br i1 %andand_result_value87, label %cond_jump_then88, label %cond_end89

cond_jump_then88:                                 ; preds = %cond_jump_end82
  br label %rt_printline.found
  br label %cond_end89

cond_end89:                                       ; preds = %cond_jump_then88, %cond_jump_end82
  %pc90 = load i64, i64* %pc, align 4
  store i64 %pc90, i64* %last_pc, align 4
  %sym91 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL92 = getelementptr inbounds %come_anon133, %come_anon133* %sym91, i32 0, i32 3
  %n_desc = load i16, i16* %fieldLLL92, align 2
  %icastKY = zext i16 %n_desc to i32
  store i32 %icastKY, i32* %last_line_num, align 4
  %autocast93 = bitcast [128 x i8]* %last_func_name to i8*
  %autocast94 = bitcast [128 x i8]* %func_name to i8*
  %fun_result95 = call i8* @strcpy(i8* %autocast93, i8* %autocast94)
  br label %end_blockX

after_break96:                                    ; No predecessors!
  br label %cond_else_blockX69
  br label %cond_else_blockX98

cond_then_block97:                                ; preds = %cond_else_blockX69
  %stabstr_section100 = load %Section*, %Section** @stabstr_section, align 8
  %fieldLLL101 = getelementptr inbounds %Section, %Section* %stabstr_section100, i32 0, i32 1
  %data102 = load i8*, i8** %fieldLLL101, align 8
  %sym103 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL104 = getelementptr inbounds %come_anon133, %come_anon133* %sym103, i32 0, i32 0
  %n_strx105 = load i32, i32* %fieldLLL104, align 4
  %ptrToIntC106 = ptrtoint i8* %data102 to i64
  %sext107 = sext i32 %n_strx105 to i64
  %mul108 = mul i64 %sext107, 1
  %add109 = add i64 %ptrToIntC106, %mul108
  %intToPtrB110 = inttoptr i64 %add109 to i8*
  store i8* %intToPtrB110, i8** %str, align 8
  br label %rt_printline.add_incl

cond_else_blockX98:                               ; preds = %after_break122, %cond_else_blockX69, %after_break96
  %eqtmp125 = icmp eq i8 %n_type, -94
  br i1 %eqtmp125, label %cond_then_block123, label %cond_else_blockX124

rt_printline.add_incl:                            ; preds = %cond_jump_then168, %cond_then_block97
  %incl_index111 = load i32, i32* %incl_index, align 4
  %le112 = icmp slt i32 %incl_index111, 32
  br i1 %le112, label %cond_jump_then113, label %cond_end114

cond_jump_then113:                                ; preds = %rt_printline.add_incl
  %incl_index115 = load i32, i32* %incl_index, align 4
  %add116 = add i32 %incl_index115, 1
  store i32 %add116, i32* %incl_index, align 4
  %incl_index117 = load i32, i32* %incl_index, align 4
  %sub118 = sub i32 %incl_index117, 1
  %str119 = load i8*, i8** %str, align 8
  %array_castA120 = bitcast [32 x i8*]* %incl_files to i8**
  %gepBX121 = getelementptr i8*, i8** %array_castA120, i32 %sub118
  store i8* %str119, i8** %gepBX121, align 8
  br label %cond_end114

cond_end114:                                      ; preds = %cond_jump_then113, %rt_printline.add_incl
  br label %end_blockX

after_break122:                                   ; No predecessors!
  br label %cond_else_blockX98
  br label %cond_else_blockX124

cond_then_block123:                               ; preds = %cond_else_blockX98
  %incl_index126 = load i32, i32* %incl_index, align 4
  %gt127 = icmp sgt i32 %incl_index126, 1
  br i1 %gt127, label %cond_jump_then128, label %cond_end129

cond_else_blockX124:                              ; preds = %after_break133, %cond_else_blockX98, %after_break122
  %eqtmp136 = icmp eq i8 %n_type, 100
  br i1 %eqtmp136, label %cond_then_block134, label %cond_else_blockX135

cond_jump_then128:                                ; preds = %cond_then_block123
  %incl_index130 = load i32, i32* %incl_index, align 4
  %sub131 = sub i32 %incl_index130, 1
  store i32 %sub131, i32* %incl_index, align 4
  %add132 = add i32 %sub131, 1
  br label %cond_end129

cond_end129:                                      ; preds = %cond_jump_then128, %cond_then_block123
  br label %end_blockX

after_break133:                                   ; No predecessors!
  br label %cond_else_blockX124
  br label %cond_else_blockX135

cond_then_block134:                               ; preds = %cond_else_blockX124
  %sym137 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL138 = getelementptr inbounds %come_anon133, %come_anon133* %sym137, i32 0, i32 0
  %n_strx139 = load i32, i32* %fieldLLL138, align 4
  %eq140 = icmp eq i32 %n_strx139, 0
  br i1 %eq140, label %cond_jump_then141, label %cond_else_block142

cond_else_blockX135:                              ; preds = %after_break170, %cond_else_blockX124, %after_break133
  br label %end_blockX

cond_jump_then141:                                ; preds = %cond_then_block134
  store i32 0, i32* %incl_index, align 4
  br label %cond_end143

cond_else_block142:                               ; preds = %cond_then_block134
  %stabstr_section144 = load %Section*, %Section** @stabstr_section, align 8
  %fieldLLL145 = getelementptr inbounds %Section, %Section* %stabstr_section144, i32 0, i32 1
  %data146 = load i8*, i8** %fieldLLL145, align 8
  %sym147 = load %come_anon133*, %come_anon133** %sym, align 8
  %fieldLLL148 = getelementptr inbounds %come_anon133, %come_anon133* %sym147, i32 0, i32 0
  %n_strx149 = load i32, i32* %fieldLLL148, align 4
  %ptrToIntC150 = ptrtoint i8* %data146 to i64
  %sext151 = sext i32 %n_strx149 to i64
  %mul152 = mul i64 %sext151, 1
  %add153 = add i64 %ptrToIntC150, %mul152
  %intToPtrB154 = inttoptr i64 %add153 to i8*
  store i8* %intToPtrB154, i8** %str, align 8
  %str155 = load i8*, i8** %str, align 8
  %fun_result156 = call i64 @strlen(i8* %str155)
  %icastM157 = trunc i64 %fun_result156 to i32
  store i32 %icastM157, i32* %len, align 4
  %len159 = load i32, i32* %len, align 4
  %gt160 = icmp sgt i32 %len159, 0
  store i1 %gt160, i1* %andand158, align 1
  br i1 %gt160, label %cond_jump_then161, label %cond_jump_end162

cond_end143:                                      ; preds = %cond_end169, %cond_jump_then141
  br label %end_blockX

cond_jump_then161:                                ; preds = %cond_else_block142
  %str163 = load i8*, i8** %str, align 8
  %len164 = load i32, i32* %len, align 4
  %sub165 = sub i32 %len164, 1
  %element_addressAB = load i8*, i8** %str, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 %sub165
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastL = sext i8 %load_element to i32
  %not_eq = icmp ne i32 %icastL, 47
  %andand166 = and i1 %gt160, %not_eq
  store i1 %andand166, i1* %andand158, align 1
  br label %cond_jump_end162

cond_jump_end162:                                 ; preds = %cond_jump_then161, %cond_else_block142
  %andand_result_value167 = load i1, i1* %andand158, align 1
  br i1 %andand_result_value167, label %cond_jump_then168, label %cond_end169

cond_jump_then168:                                ; preds = %cond_jump_end162
  br label %rt_printline.add_incl
  br label %cond_end169

cond_end169:                                      ; preds = %cond_jump_then168, %cond_jump_end162
  br label %cond_end143

after_break170:                                   ; No predecessors!
  br label %cond_else_blockX135

loop_continue_top_block:                          ; preds = %cond_end208
  %sym239 = load %come_anon88*, %come_anon88** %sym177, align 8
  %ptrToIntC240 = ptrtoint %come_anon88* %sym239 to i64
  %add241 = add i64 %ptrToIntC240, 24
  %intToPtrB242 = inttoptr i64 %add241 to %come_anon88*
  store %come_anon88* %intToPtrB242, %come_anon88** %sym177, align 8
  %sym243 = load %come_anon88*, %come_anon88** %sym177, align 8
  %ptrToIntI244 = ptrtoint %come_anon88* %sym243 to i64
  %sub245 = sub i64 %ptrToIntI244, 24
  %iintToPtrD246 = inttoptr i64 %sub245 to %come_anon88*
  br label %loop_top_block196

loop_top_block196:                                ; preds = %loop_continue_top_block, %cond_end_block
  %sym197 = load %come_anon88*, %come_anon88** %sym177, align 8
  %sym_end198 = load %come_anon88*, %come_anon88** %sym_end178, align 8
  %le199 = icmp slt %come_anon88* %sym197, %sym_end198
  br i1 %le199, label %cond_then_block200, label %cond_end_block201

cond_then_block200:                               ; preds = %loop_top_block196
  %sym202 = load %come_anon88*, %come_anon88** %sym177, align 8
  %fieldLLL203 = getelementptr inbounds %come_anon88, %come_anon88* %sym202, i32 0, i32 1
  %st_info = load i8, i8* %fieldLLL203, align 1
  %icastKY204 = zext i8 %st_info to i32
  %andtmp = and i32 %icastKY204, 15
  store i32 %andtmp, i32* %type, align 4
  %type205 = load i32, i32* %type, align 4
  %eq206 = icmp eq i32 %type205, 2
  br i1 %eq206, label %cond_jump_then207, label %cond_end208

cond_end_block201:                                ; preds = %loop_top_block196
  %stderr247 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result248 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr247, i8* bitcast ([6 x i8]* @286 to i8*))
  ret void
  br label %rt_printline.found

cond_jump_then207:                                ; preds = %cond_then_block200
  %wanted_pc210 = load i64, i64* %wanted_pc, align 4
  %sym211 = load %come_anon88*, %come_anon88** %sym177, align 8
  %fieldLLL212 = getelementptr inbounds %come_anon88, %come_anon88* %sym211, i32 0, i32 4
  %st_value = load i64, i64* %fieldLLL212, align 4
  %gteq_unsinged213 = icmp uge i64 %wanted_pc210, %st_value
  store i1 %gteq_unsinged213, i1* %andand209, align 1
  br i1 %gteq_unsinged213, label %cond_jump_then214, label %cond_jump_end215

cond_end208:                                      ; preds = %cond_end227, %cond_then_block200
  br label %loop_continue_top_block

cond_jump_then214:                                ; preds = %cond_jump_then207
  %wanted_pc216 = load i64, i64* %wanted_pc, align 4
  %sym217 = load %come_anon88*, %come_anon88** %sym177, align 8
  %fieldLLL218 = getelementptr inbounds %come_anon88, %come_anon88* %sym217, i32 0, i32 4
  %st_value219 = load i64, i64* %fieldLLL218, align 4
  %sym220 = load %come_anon88*, %come_anon88** %sym177, align 8
  %fieldLLL221 = getelementptr inbounds %come_anon88, %come_anon88* %sym220, i32 0, i32 5
  %st_size = load i64, i64* %fieldLLL221, align 4
  %add222 = add i64 %st_value219, %st_size
  %le223 = icmp ult i64 %wanted_pc216, %add222
  %andand224 = and i1 %gteq_unsinged213, %le223
  store i1 %andand224, i1* %andand209, align 1
  br label %cond_jump_end215

cond_jump_end215:                                 ; preds = %cond_jump_then214, %cond_jump_then207
  %andand_result_value225 = load i1, i1* %andand209, align 1
  br i1 %andand_result_value225, label %cond_jump_then226, label %cond_end227

cond_jump_then226:                                ; preds = %cond_jump_end215
  %autocast228 = bitcast [128 x i8]* %last_func_name to i8*
  %strtab_section = load %Section*, %Section** @strtab_section, align 8
  %fieldLLL229 = getelementptr inbounds %Section, %Section* %strtab_section, i32 0, i32 1
  %data230 = load i8*, i8** %fieldLLL229, align 8
  %sym231 = load %come_anon88*, %come_anon88** %sym177, align 8
  %fieldLLL232 = getelementptr inbounds %come_anon88, %come_anon88* %sym231, i32 0, i32 0
  %st_name = load i32, i32* %fieldLLL232, align 4
  %ptrToIntC233 = ptrtoint i8* %data230 to i64
  %sext234 = sext i32 %st_name to i64
  %mul235 = mul i64 %sext234, 1
  %add236 = add i64 %ptrToIntC233, %mul235
  %intToPtrB237 = inttoptr i64 %add236 to i8*
  %fun_result238 = call i8* @pstrcpy(i8* %autocast228, i32 128, i8* %intToPtrB237)
  br label %rt_printline.found
  br label %cond_end227

cond_end227:                                      ; preds = %cond_jump_then226, %cond_jump_end215
  br label %cond_end208

cond_jump_then251:                                ; preds = %rt_printline.found
  %stderr253 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %autocast254 = bitcast [128 x i8]* %last_func_name to i8*
  %fun_result255 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr253, i8* bitcast ([6 x i8]* @287 to i8*), i8* %autocast254)
  br label %cond_end252

cond_end252:                                      ; preds = %cond_jump_then251, %rt_printline.found
  %incl_index256 = load i32, i32* %incl_index, align 4
  %gt257 = icmp sgt i32 %incl_index256, 0
  br i1 %gt257, label %cond_jump_then258, label %cond_end259

cond_jump_then258:                                ; preds = %cond_end252
  %stderr260 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %incl_index261 = load i32, i32* %incl_index, align 4
  %sub262 = sub i32 %incl_index261, 1
  %array_castG263 = bitcast [32 x i8*]* %incl_files to i8**
  %gepLY264 = getelementptr i8*, i8** %array_castG263, i32 %sub262
  %elementYYY265 = load i8*, i8** %gepLY264, align 8
  %last_line_num266 = load i32, i32* %last_line_num, align 4
  %fun_result267 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr260, i8* bitcast ([8 x i8]* @288 to i8*), i8* %elementYYY265, i32 %last_line_num266)
  %incl_index268 = load i32, i32* %incl_index, align 4
  %sub269 = sub i32 %incl_index268, 2
  store i32 %sub269, i32* %i, align 4
  br label %loop_top_block271

cond_end259:                                      ; preds = %cond_end_block274, %cond_end252
  %stderr286 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result287 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr286, i8* bitcast ([2 x i8]* @291 to i8*))
  ret void

loop_continue_top_block270:                       ; preds = %cond_then_block273
  %i281 = load i32, i32* %i, align 4
  %sub282 = sub i32 %i281, 1
  store i32 %sub282, i32* %i, align 4
  %add283 = add i32 %sub282, 1
  br label %loop_top_block271

loop_top_block271:                                ; preds = %loop_continue_top_block270, %cond_jump_then258
  %i272 = load i32, i32* %i, align 4
  %gteq_signed = icmp sge i32 %i272, 0
  br i1 %gteq_signed, label %cond_then_block273, label %cond_end_block274

cond_then_block273:                               ; preds = %loop_top_block271
  %stderr275 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %i276 = load i32, i32* %i, align 4
  %array_castG277 = bitcast [32 x i8*]* %incl_files to i8**
  %gepLY278 = getelementptr i8*, i8** %array_castG277, i32 %i276
  %elementYYY279 = load i8*, i8** %gepLY278, align 8
  %fun_result280 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr275, i8* bitcast ([19 x i8]* @289 to i8*), i8* %elementYYY279)
  br label %loop_continue_top_block270

cond_end_block274:                                ; preds = %loop_top_block271
  %stderr284 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result285 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr284, i8* bitcast ([2 x i8]* @290 to i8*))
  br label %cond_end259
}

define internal i32 @rt_get_caller_pc(i64* %0, %ucontext_t* %1, i32 %2) {
entry:
  %i = alloca i32, align 4
  %fp = alloca i64, align 8
  %paddr = alloca i64*, align 8
  %paddr1 = alloca i64**, align 8
  store i64* %0, i64** %paddr, align 8
  store i64** %paddr, i64*** %paddr1, align 8
  %uc = alloca %ucontext_t*, align 8
  %uc2 = alloca %ucontext_t**, align 8
  store %ucontext_t* %1, %ucontext_t** %uc, align 8
  store %ucontext_t** %uc, %ucontext_t*** %uc2, align 8
  %level = alloca i32, align 4
  %level3 = alloca i32*, align 8
  store i32 %2, i32* %level, align 4
  store i32* %level, i32** %level3, align 8
  %level4 = load i32, i32* %level, align 4
  %eq = icmp eq i32 %level4, 0
  br i1 %eq, label %cond_jump_then, label %cond_else_block

cond_jump_then:                                   ; preds = %entry
  %paddr5 = load i64*, i64** %paddr, align 8
  %uc6 = load %ucontext_t*, %ucontext_t** %uc, align 8
  %fieldLLL = getelementptr inbounds %ucontext_t, %ucontext_t* %uc6, i32 0, i32 3
  %uc_mcontext = load %come_anon73, %come_anon73* %fieldLLL, align 8
  %fieldRRRR = getelementptr inbounds %come_anon73, %come_anon73* %fieldLLL, i32 0, i32 0
  %array_castG = bitcast [23 x i64]* %fieldRRRR to i64*
  %gepLY = getelementptr i64, i64* %array_castG, i32 16
  %elementYYY = load i64, i64* %gepLY, align 4
  store i64 %elementYYY, i64* %paddr5, align 4
  ret i32 0

cond_else_block:                                  ; preds = %entry
  %uc7 = load %ucontext_t*, %ucontext_t** %uc, align 8
  %fieldLLL8 = getelementptr inbounds %ucontext_t, %ucontext_t* %uc7, i32 0, i32 3
  %uc_mcontext9 = load %come_anon73, %come_anon73* %fieldLLL8, align 8
  %fieldRRRR10 = getelementptr inbounds %come_anon73, %come_anon73* %fieldLLL8, i32 0, i32 0
  %array_castG11 = bitcast [23 x i64]* %fieldRRRR10 to i64*
  %gepLY12 = getelementptr i64, i64* %array_castG11, i32 10
  %elementYYY13 = load i64, i64* %gepLY12, align 4
  store i64 %elementYYY13, i64* %fp, align 4
  store i32 1, i32* %i, align 4
  br label %loop_top_block

cond_end:                                         ; No predecessors!
  ret i32 0

loop_continue_top_block:                          ; preds = %cond_end18
  %i20 = load i32, i32* %i, align 4
  %add = add i32 %i20, 1
  store i32 %add, i32* %i, align 4
  %i21 = load i32, i32* %i, align 4
  %sub = sub i32 %i21, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_else_block
  %i14 = load i32, i32* %i, align 4
  %level15 = load i32, i32* %level, align 4
  %le = icmp slt i32 %i14, %level15
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %fp16 = load i64, i64* %fp, align 4
  %leeq = icmp ule i64 %fp16, 4096
  br i1 %leeq, label %cond_jump_then17, label %cond_end18

cond_end_block:                                   ; preds = %loop_top_block
  %paddr22 = load i64*, i64** %paddr, align 8
  %fp23 = load i64, i64* %fp, align 4
  %castBA24 = inttoptr i64 %fp23 to i64*
  %castXYXXYXYXY25 = bitcast i64* %fp to i64**
  %element_addressAB26 = load i64*, i64** %castXYXXYXYXY25, align 8
  %element_addressXYXZY27 = getelementptr inbounds i64, i64* %element_addressAB26, i32 1
  %load_element28 = load i64, i64* %element_addressXYXZY27, align 4
  store i64 %load_element28, i64* %paddr22, align 4
  ret i32 0

cond_jump_then17:                                 ; preds = %cond_then_block
  ret i32 -1

cond_end18:                                       ; preds = %cond_then_block
  %fp19 = load i64, i64* %fp, align 4
  %castBA = inttoptr i64 %fp19 to i64*
  %castXYXXYXYXY = bitcast i64* %fp to i64**
  %element_addressAB = load i64*, i64** %castXYXXYXYXY, align 8
  %element_addressXYXZY = getelementptr inbounds i64, i64* %element_addressAB, i32 0
  %load_element = load i64, i64* %element_addressXYXZY, align 4
  store i64 %load_element, i64* %fp, align 4
  br label %loop_continue_top_block
}

define void @rt_error(%ucontext_t* %0, i8* %1, ...) {
entry:
  %i = alloca i32, align 4
  %pc = alloca i64, align 8
  %ap = alloca [1 x %__builtin_va_list], align 8
  %uc = alloca %ucontext_t*, align 8
  %uc1 = alloca %ucontext_t**, align 8
  store %ucontext_t* %0, %ucontext_t** %uc, align 8
  store %ucontext_t** %uc, %ucontext_t*** %uc1, align 8
  %fmt = alloca i8*, align 8
  %fmt2 = alloca i8**, align 8
  store i8* %1, i8** %fmt, align 8
  store i8** %fmt, i8*** %fmt2, align 8
  %gepOOOOO = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN = bitcast %__builtin_va_list* %gepOOOOO to i8*
  %fmt3 = load i8*, i8** %fmt, align 8
  call void @llvm.va_start(i8* %castAN)
  %stderr = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr, i8* bitcast ([16 x i8]* @292 to i8*))
  %stderr4 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fmt5 = load i8*, i8** %fmt, align 8
  %gepOOOOO6 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %fun_result7 = call i32 @vfprintf(%_IO_FILE* %stderr4, i8* %fmt5, %__builtin_va_list* %gepOOOOO6)
  %stderr8 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result9 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr8, i8* bitcast ([2 x i8]* @293 to i8*))
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end18
  %i24 = load i32, i32* %i, align 4
  %add = add i32 %i24, 1
  store i32 %add, i32* %i, align 4
  %i25 = load i32, i32* %i, align 4
  %sub = sub i32 %i25, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  %i10 = load i32, i32* %i, align 4
  %num_callers = load i32, i32* @num_callers, align 4
  %le = icmp slt i32 %i10, %num_callers
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %pc11 = load i64, i64* %pc, align 4
  %uc12 = load %ucontext_t*, %ucontext_t** %uc, align 8
  %i13 = load i32, i32* %i, align 4
  %fun_result14 = call i32 @rt_get_caller_pc(i64* %pc, %ucontext_t* %uc12, i32 %i13)
  %le15 = icmp slt i32 %fun_result14, 0
  br i1 %le15, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %cond_jump_then, %loop_top_block
  call void @exit(i32 255)
  %gepOOOOO26 = getelementptr [1 x %__builtin_va_list], [1 x %__builtin_va_list]* %ap, i32 0, i32 0
  %castAN27 = bitcast %__builtin_va_list* %gepOOOOO26 to i8*
  call void @llvm.va_end(i8* %castAN27)
  ret void

cond_jump_then:                                   ; preds = %cond_then_block
  br label %cond_end_block

cond_end:                                         ; preds = %after_break, %cond_then_block
  %i16 = load i32, i32* %i, align 4
  %eq = icmp eq i32 %i16, 0
  br i1 %eq, label %cond_jump_then17, label %cond_else_block

after_break:                                      ; No predecessors!
  br label %cond_end

cond_jump_then17:                                 ; preds = %cond_end
  %stderr19 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result20 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr19, i8* bitcast ([4 x i8]* @294 to i8*))
  br label %cond_end18

cond_else_block:                                  ; preds = %cond_end
  %stderr21 = load %_IO_FILE*, %_IO_FILE** @stderr, align 8
  %fun_result22 = call i32 (%_IO_FILE*, i8*, ...) @fprintf(%_IO_FILE* %stderr21, i8* bitcast ([4 x i8]* @295 to i8*))
  br label %cond_end18

cond_end18:                                       ; preds = %cond_else_block, %cond_jump_then17
  %pc23 = load i64, i64* %pc, align 4
  call void @rt_printline(i64 %pc23)
  br label %loop_continue_top_block
}

define internal void @sig_error(i32 %0, %come_anon33* %1, i8* %2) {
entry:
  %andand = alloca i1, align 1
  %uc = alloca %ucontext_t*, align 8
  %signum = alloca i32, align 4
  %signum1 = alloca i32*, align 8
  store i32 %0, i32* %signum, align 4
  store i32* %signum, i32** %signum1, align 8
  %siginf = alloca %come_anon33*, align 8
  %siginf2 = alloca %come_anon33**, align 8
  store %come_anon33* %1, %come_anon33** %siginf, align 8
  store %come_anon33** %siginf, %come_anon33*** %siginf2, align 8
  %puc = alloca i8*, align 8
  %puc3 = alloca i8**, align 8
  store i8* %2, i8** %puc, align 8
  store i8** %puc, i8*** %puc3, align 8
  %puc4 = load i8*, i8** %puc, align 8
  %castAQ = bitcast i8* %puc4 to %ucontext_t*
  store %ucontext_t* %castAQ, %ucontext_t** %uc, align 8
  %signum5 = load i32, i32* %signum, align 4
  %eqtmp = icmp eq i32 %signum5, 8
  br i1 %eqtmp, label %cond_then_block, label %cond_else_blockX

end_blockX:                                       ; preds = %cond_else_blockX41, %cond_then_block40, %cond_then_block35, %cond_then_block30, %cond_end, %end_blockX6
  call void @exit(i32 255)
  ret void

cond_then_block:                                  ; preds = %entry
  %siginf7 = load %come_anon33*, %come_anon33** %siginf, align 8
  %fieldLLL = getelementptr inbounds %come_anon33, %come_anon33* %siginf7, i32 0, i32 2
  %si_code = load i32, i32* %fieldLLL, align 4
  %eqtmp10 = icmp eq i32 %si_code, 1
  br i1 %eqtmp10, label %cond_then_block8, label %cond_else_blockX9
  br label %cond_else_blockX11

cond_else_blockX:                                 ; preds = %after_break18, %entry
  %eqtmp21 = icmp eq i32 %signum5, 7
  br i1 %eqtmp21, label %cond_then_block19, label %cond_else_blockX20
  br label %cond_else_blockX22

end_blockX6:                                      ; preds = %cond_else_blockX15, %cond_then_block14, %cond_then_block8
  br label %end_blockX

cond_then_block8:                                 ; preds = %cond_else_blockX9, %cond_then_block
  %uc13 = load %ucontext_t*, %ucontext_t** %uc, align 8
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc13, i8* bitcast ([17 x i8]* @296 to i8*))
  br label %end_blockX6

cond_else_blockX9:                                ; preds = %cond_then_block
  %eqtmp12 = icmp eq i32 %si_code, 3
  br i1 %eqtmp12, label %cond_then_block8, label %cond_else_blockX11

cond_else_blockX11:                               ; preds = %after_break, %cond_else_blockX9, %cond_then_block
  br label %cond_then_block14

after_break:                                      ; No predecessors!
  br label %cond_else_blockX11
  br label %cond_else_blockX15

cond_then_block14:                                ; preds = %cond_else_blockX11
  %uc16 = load %ucontext_t*, %ucontext_t** %uc, align 8
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc16, i8* bitcast ([25 x i8]* @297 to i8*))
  br label %end_blockX6

cond_else_blockX15:                               ; preds = %after_break17, %after_break
  br label %end_blockX6

after_break17:                                    ; No predecessors!
  br label %cond_else_blockX15

after_break18:                                    ; No predecessors!
  br label %cond_else_blockX
  br label %cond_else_blockX20

cond_then_block19:                                ; preds = %cond_else_blockX20, %cond_else_blockX
  store i1 true, i1* %andand, align 1
  br i1 true, label %cond_jump_then, label %cond_jump_end

cond_else_blockX20:                               ; preds = %cond_else_blockX, %after_break18
  %eqtmp23 = icmp eq i32 %signum5, 11
  br i1 %eqtmp23, label %cond_then_block19, label %cond_else_blockX22

cond_else_blockX22:                               ; preds = %after_break29, %cond_else_blockX20, %cond_else_blockX
  %eqtmp32 = icmp eq i32 %signum5, 4
  br i1 %eqtmp32, label %cond_then_block30, label %cond_else_blockX31

cond_jump_then:                                   ; preds = %cond_then_block19
  %derefference_valueB = load i8*, i8*** @rt_bound_error_msg, align 8
  %icmpB = icmp ne i8* %derefference_valueB, null
  %andand24 = and i1 true, %icmpB
  store i1 %andand24, i1* %andand, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block19
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then25, label %cond_else_block

cond_jump_then25:                                 ; preds = %cond_jump_end
  %uc26 = load %ucontext_t*, %ucontext_t** %uc, align 8
  %derefference_valueB27 = load i8*, i8*** @rt_bound_error_msg, align 8
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc26, i8* %derefference_valueB27)
  br label %cond_end

cond_else_block:                                  ; preds = %cond_jump_end
  %uc28 = load %ucontext_t*, %ucontext_t** %uc, align 8
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc28, i8* bitcast ([30 x i8]* @298 to i8*))
  br label %cond_end

cond_end:                                         ; preds = %cond_else_block, %cond_jump_then25
  br label %end_blockX

after_break29:                                    ; No predecessors!
  br label %cond_else_blockX22
  br label %cond_else_blockX31

cond_then_block30:                                ; preds = %cond_else_blockX22
  %uc33 = load %ucontext_t*, %ucontext_t** %uc, align 8
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc33, i8* bitcast ([20 x i8]* @299 to i8*))
  br label %end_blockX

cond_else_blockX31:                               ; preds = %after_break34, %cond_else_blockX22, %after_break29
  %eqtmp37 = icmp eq i32 %signum5, 6
  br i1 %eqtmp37, label %cond_then_block35, label %cond_else_blockX36

after_break34:                                    ; No predecessors!
  br label %cond_else_blockX31
  br label %cond_else_blockX36

cond_then_block35:                                ; preds = %cond_else_blockX31
  %uc38 = load %ucontext_t*, %ucontext_t** %uc, align 8
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc38, i8* bitcast ([15 x i8]* @300 to i8*))
  br label %end_blockX

cond_else_blockX36:                               ; preds = %after_break39, %cond_else_blockX31, %after_break34
  br label %cond_then_block40

after_break39:                                    ; No predecessors!
  br label %cond_else_blockX36
  br label %cond_else_blockX41

cond_then_block40:                                ; preds = %cond_else_blockX36
  %uc42 = load %ucontext_t*, %ucontext_t** %uc, align 8
  %signum43 = load i32, i32* %signum, align 4
  call void (%ucontext_t*, i8*, ...) @rt_error(%ucontext_t* %uc42, i8* bitcast ([17 x i8]* @301 to i8*), i32 %signum43)
  br label %end_blockX

cond_else_blockX41:                               ; preds = %after_break44, %after_break39
  br label %end_blockX

after_break44:                                    ; No predecessors!
  br label %cond_else_blockX41
}

define void @tcc_memstats() {
entry:
  ret void
}

define internal void @tcc_cleanup() {
entry:
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %tcc_state = load %TCCState*, %TCCState** @tcc_state, align 8
  %castAQ = bitcast %TCCState* %tcc_state to i8*
  %eq = icmp eq i8* null, %castAQ
  br i1 %eq, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  ret void

cond_end:                                         ; preds = %entry
  store %TCCState* null, %TCCState** @tcc_state, align 8
  call void @free_defines(%Sym* null)
  %tok_ident = load i32, i32* @tok_ident, align 4
  %sub = sub i32 %tok_ident, 256
  store i32 %sub, i32* %n, align 4
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_then_block
  %i5 = load i32, i32* %i, align 4
  %add = add i32 %i5, 1
  store i32 %add, i32* %i, align 4
  %i6 = load i32, i32* %i, align 4
  %sub7 = sub i32 %i6, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  %i1 = load i32, i32* %i, align 4
  %n2 = load i32, i32* %n, align 4
  %le = icmp slt i32 %i1, %n2
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %table_ident = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %i3 = load i32, i32* %i, align 4
  %element_addressAB = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %element_addressXYXZY = getelementptr inbounds %TokenSym*, %TokenSym** %element_addressAB, i32 %i3
  %load_element = load %TokenSym*, %TokenSym** %element_addressXYXZY, align 8
  %castAQ4 = bitcast %TokenSym* %load_element to i8*
  call void @tcc_free(i8* %castAQ4)
  br label %loop_continue_top_block

cond_end_block:                                   ; preds = %loop_top_block
  %table_ident8 = load %TokenSym**, %TokenSym*** @table_ident, align 8
  %castAQ9 = bitcast %TokenSym** %table_ident8 to i8*
  call void @tcc_free(i8* %castAQ9)
  %sym_pools = load i8**, i8*** @sym_pools, align 8
  %nb_sym_pools = load i32, i32* @nb_sym_pools, align 4
  call void @dynarray_reset(i8* bitcast (i8*** @sym_pools to i8*), i32* @nb_sym_pools)
  %tokcstr = load %CString, %CString* @tokcstr, align 8
  call void @cstr_free(%CString* @tokcstr)
  store %Sym* null, %Sym** @sym_free_first, align 8
  store i32* null, i32** @macro_ptr, align 8
  ret void
}

define internal i32 @set_flag(%TCCState* %0, %FlagDef* %1, i32 %2, i8* %3, i32 %4) {
entry:
  %andand7 = alloca i1, align 1
  %andand = alloca i1, align 1
  %r = alloca i8*, align 8
  %p = alloca %FlagDef*, align 8
  %i = alloca i32, align 4
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %flags = alloca %FlagDef*, align 8
  %flags2 = alloca %FlagDef**, align 8
  store %FlagDef* %1, %FlagDef** %flags, align 8
  store %FlagDef** %flags, %FlagDef*** %flags2, align 8
  %nb_flags = alloca i32, align 4
  %nb_flags3 = alloca i32*, align 8
  store i32 %2, i32* %nb_flags, align 4
  store i32* %nb_flags, i32** %nb_flags3, align 8
  %name = alloca i8*, align 8
  %name4 = alloca i8**, align 8
  store i8* %3, i8** %name, align 8
  store i8** %name, i8*** %name4, align 8
  %value = alloca i32, align 4
  %value5 = alloca i32*, align 8
  store i32 %4, i32* %value, align 4
  store i32* %value, i32** %value5, align 8
  %name6 = load i8*, i8** %name, align 8
  store i8* %name6, i8** %r, align 8
  %r8 = load i8*, i8** %r, align 8
  %element_addressAB = load i8*, i8** %r, align 8
  %element_addressXYXZY = getelementptr inbounds i8, i8* %element_addressAB, i32 0
  %load_element = load i8, i8* %element_addressXYXZY, align 1
  %icastL = sext i8 %load_element to i32
  %eq = icmp eq i32 %icastL, 110
  store i1 %eq, i1* %andand7, align 1
  br i1 %eq, label %cond_jump_then, label %cond_jump_end

cond_jump_then:                                   ; preds = %entry
  %r9 = load i8*, i8** %r, align 8
  %element_addressAB10 = load i8*, i8** %r, align 8
  %element_addressXYXZY11 = getelementptr inbounds i8, i8* %element_addressAB10, i32 1
  %load_element12 = load i8, i8* %element_addressXYXZY11, align 1
  %icastL13 = sext i8 %load_element12 to i32
  %eq14 = icmp eq i32 %icastL13, 111
  %andand15 = and i1 %eq, %eq14
  store i1 %andand15, i1* %andand7, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %entry
  %andand_result_value = load i1, i1* %andand7, align 1
  store i1 %andand_result_value, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then16, label %cond_jump_end17

cond_jump_then16:                                 ; preds = %cond_jump_end
  %r18 = load i8*, i8** %r, align 8
  %element_addressAB19 = load i8*, i8** %r, align 8
  %element_addressXYXZY20 = getelementptr inbounds i8, i8* %element_addressAB19, i32 2
  %load_element21 = load i8, i8* %element_addressXYXZY20, align 1
  %icastL22 = sext i8 %load_element21 to i32
  %eq23 = icmp eq i32 %icastL22, 45
  %andand24 = and i1 %andand_result_value, %eq23
  store i1 %andand24, i1* %andand, align 1
  br label %cond_jump_end17

cond_jump_end17:                                  ; preds = %cond_jump_then16, %cond_jump_end
  %andand_result_value25 = load i1, i1* %andand, align 1
  br i1 %andand_result_value25, label %cond_jump_then26, label %cond_end

cond_jump_then26:                                 ; preds = %cond_jump_end17
  %r27 = load i8*, i8** %r, align 8
  %ptrToIntC = ptrtoint i8* %r27 to i64
  %add = add i64 %ptrToIntC, 3
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %r, align 8
  %ptrToIntI = ptrtoint i8* %intToPtrB to i64
  %sub = sub i64 %ptrToIntI, 3
  %iintToPtrD = inttoptr i64 %sub to i8*
  %value28 = load i32, i32* %value, align 4
  %logical_denial = icmp eq i32 %value28, 0
  %castOOOO = zext i1 %logical_denial to i32
  store i32 %castOOOO, i32* %value, align 4
  br label %cond_end

cond_end:                                         ; preds = %cond_jump_then26, %cond_jump_end17
  store i32 0, i32* %i, align 4
  %flags29 = load %FlagDef*, %FlagDef** %flags, align 8
  store %FlagDef* %flags29, %FlagDef** %p, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end38
  %i39 = load i32, i32* %i, align 4
  %add40 = add i32 %i39, 1
  store i32 %add40, i32* %i, align 4
  %i41 = load i32, i32* %i, align 4
  %sub42 = sub i32 %i41, 1
  %p43 = load %FlagDef*, %FlagDef** %p, align 8
  %ptrToIntC44 = ptrtoint %FlagDef* %p43 to i64
  %add45 = add i64 %ptrToIntC44, 16
  %intToPtrB46 = inttoptr i64 %add45 to %FlagDef*
  store %FlagDef* %intToPtrB46, %FlagDef** %p, align 8
  %p47 = load %FlagDef*, %FlagDef** %p, align 8
  %ptrToIntI48 = ptrtoint %FlagDef* %p47 to i64
  %sub49 = sub i64 %ptrToIntI48, 16
  %iintToPtrD50 = inttoptr i64 %sub49 to %FlagDef*
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end
  %i30 = load i32, i32* %i, align 4
  %nb_flags31 = load i32, i32* %nb_flags, align 4
  %le = icmp slt i32 %i30, %nb_flags31
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %r32 = load i8*, i8** %r, align 8
  %p33 = load %FlagDef*, %FlagDef** %p, align 8
  %fieldLLL = getelementptr inbounds %FlagDef, %FlagDef* %p33, i32 0, i32 2
  %name34 = load i8*, i8** %fieldLLL, align 8
  %fun_result = call i32 @strcmp(i8* %r32, i8* %name34)
  %logical_denial35 = icmp eq i32 %fun_result, 0
  %castOOOO36 = zext i1 %logical_denial35 to i32
  %icmpA = icmp ne i32 %castOOOO36, 0
  br i1 %icmpA, label %cond_jump_then37, label %cond_end38

cond_end_block:                                   ; preds = %loop_top_block
  ret i32 -1
  br label %set_flag.found

cond_jump_then37:                                 ; preds = %cond_then_block
  br label %set_flag.found
  br label %cond_end38

cond_end38:                                       ; preds = %cond_jump_then37, %cond_then_block
  br label %loop_continue_top_block

set_flag.found:                                   ; preds = %cond_end_block, %cond_jump_then37
  %p51 = load %FlagDef*, %FlagDef** %p, align 8
  %fieldLLL52 = getelementptr inbounds %FlagDef, %FlagDef* %p51, i32 0, i32 1
  %flags53 = load i16, i16* %fieldLLL52, align 2
  %icastKY = zext i16 %flags53 to i32
  %andtmp = and i32 %icastKY, 2
  %icmpA54 = icmp ne i32 %andtmp, 0
  br i1 %icmpA54, label %cond_jump_then55, label %cond_end56

cond_jump_then55:                                 ; preds = %set_flag.found
  %value57 = load i32, i32* %value, align 4
  %logical_denial58 = icmp eq i32 %value57, 0
  %castOOOO59 = zext i1 %logical_denial58 to i32
  store i32 %castOOOO59, i32* %value, align 4
  br label %cond_end56

cond_end56:                                       ; preds = %cond_jump_then55, %set_flag.found
  %s60 = load %TCCState*, %TCCState** %s, align 8
  %castAQ = bitcast %TCCState* %s60 to i8*
  %p61 = load %FlagDef*, %FlagDef** %p, align 8
  %fieldLLL62 = getelementptr inbounds %FlagDef, %FlagDef* %p61, i32 0, i32 0
  %offset = load i16, i16* %fieldLLL62, align 2
  %ptrToIntC63 = ptrtoint i8* %castAQ to i64
  %sext = sext i16 %offset to i64
  %mul = mul i64 %sext, 1
  %add64 = add i64 %ptrToIntC63, %mul
  %intToPtrB65 = inttoptr i64 %add64 to i8*
  %castAQ66 = bitcast i8* %intToPtrB65 to i32*
  %value67 = load i32, i32* %value, align 4
  store i32 %value67, i32* %castAQ66, align 4
  ret i32 0
}

define void @help() {
entry:
  %fun_result = call i32 (i8*, ...) @printf(i8* bitcast ([1381 x i8]* @360 to i8*))
  ret void
}

define internal i64 @getclock_us() {
entry:
  %tv = alloca %timeval, align 8
  %castXXXX = bitcast %timeval* %tv to i8*
  %0 = call i8* @memset(i8* %castXXXX, i32 0, i64 16)
  %tv1 = load %timeval, %timeval* %tv, align 4
  %fun_result = call i32 @gettimeofday(%timeval* %tv, i8* null)
  %tv2 = load %timeval, %timeval* %tv, align 4
  %fieldVVV = getelementptr inbounds %timeval, %timeval* %tv, i32 0, i32 0
  %tv_sec = load i64, i64* %fieldVVV, align 4
  %mul = mul i64 %tv_sec, 1000000
  %tv3 = load %timeval, %timeval* %tv, align 4
  %fieldVVV4 = getelementptr inbounds %timeval, %timeval* %tv, i32 0, i32 1
  %tv_usec = load i64, i64* %fieldVVV4, align 4
  %add = add i64 %mul, %tv_usec
  ret i64 %add
}

define internal i32 @strstart(i8* %0, i8* %1, i8** %2) {
entry:
  %q = alloca i8*, align 8
  %p = alloca i8*, align 8
  %str = alloca i8*, align 8
  %str1 = alloca i8**, align 8
  store i8* %0, i8** %str, align 8
  store i8** %str, i8*** %str1, align 8
  %val = alloca i8*, align 8
  %val2 = alloca i8**, align 8
  store i8* %1, i8** %val, align 8
  store i8** %val, i8*** %val2, align 8
  %ptr = alloca i8**, align 8
  %ptr3 = alloca i8***, align 8
  store i8** %2, i8*** %ptr, align 8
  store i8*** %ptr, i8**** %ptr3, align 8
  %str4 = load i8*, i8** %str, align 8
  store i8* %str4, i8** %p, align 8
  %val5 = load i8*, i8** %val, align 8
  store i8* %val5, i8** %q, align 8
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end, %entry
  %q6 = load i8*, i8** %q, align 8
  %derefference_valueB = load i8, i8* %q6, align 1
  %icastL = sext i8 %derefference_valueB to i32
  %not_eq = icmp ne i32 %icastL, 0
  br i1 %not_eq, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %p7 = load i8*, i8** %p, align 8
  %derefference_valueB8 = load i8, i8* %p7, align 1
  %q9 = load i8*, i8** %q, align 8
  %derefference_valueB10 = load i8, i8* %q9, align 1
  %icastL11 = sext i8 %derefference_valueB8 to i32
  %icastL12 = sext i8 %derefference_valueB10 to i32
  %not_eq13 = icmp ne i32 %icastL11, %icastL12
  br i1 %not_eq13, label %cond_jump_then, label %cond_end

cond_end_block:                                   ; preds = %loop_top_block
  %ptr24 = load i8**, i8*** %ptr, align 8
  %icmpB = icmp ne i8** %ptr24, null
  br i1 %icmpB, label %cond_jump_then25, label %cond_end26

cond_jump_then:                                   ; preds = %cond_then_block
  ret i32 0

cond_end:                                         ; preds = %cond_then_block
  %p14 = load i8*, i8** %p, align 8
  %ptrToIntC = ptrtoint i8* %p14 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %p, align 8
  %p15 = load i8*, i8** %p, align 8
  %ptrToIntI = ptrtoint i8* %p15 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  %q16 = load i8*, i8** %q, align 8
  %ptrToIntC17 = ptrtoint i8* %q16 to i64
  %add18 = add i64 %ptrToIntC17, 1
  %intToPtrB19 = inttoptr i64 %add18 to i8*
  store i8* %intToPtrB19, i8** %q, align 8
  %q20 = load i8*, i8** %q, align 8
  %ptrToIntI21 = ptrtoint i8* %q20 to i64
  %sub22 = sub i64 %ptrToIntI21, 1
  %iintToPtrD23 = inttoptr i64 %sub22 to i8*
  br label %loop_top_block

cond_jump_then25:                                 ; preds = %cond_end_block
  %ptr27 = load i8**, i8*** %ptr, align 8
  %p28 = load i8*, i8** %p, align 8
  store i8* %p28, i8** %ptr27, align 8
  br label %cond_end26

cond_end26:                                       ; preds = %cond_jump_then25, %cond_end_block
  ret i32 1
}

define internal i32 @expand_args(i8*** %0, i8* %1) {
entry:
  %oror57 = alloca i1, align 1
  %oror56 = alloca i1, align 1
  %oror55 = alloca i1, align 1
  %oror54 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror7 = alloca i1, align 1
  %oror6 = alloca i1, align 1
  %oror5 = alloca i1, align 1
  %oror = alloca i1, align 1
  %len = alloca i32, align 4
  %argc = alloca i32, align 4
  %arg = alloca i8*, align 8
  %argv = alloca i8**, align 8
  %s1 = alloca i8*, align 8
  %pargv = alloca i8***, align 8
  %pargv1 = alloca i8****, align 8
  store i8*** %0, i8**** %pargv, align 8
  store i8**** %pargv, i8***** %pargv1, align 8
  %str = alloca i8*, align 8
  %str2 = alloca i8**, align 8
  store i8* %1, i8** %str, align 8
  store i8** %str, i8*** %str2, align 8
  store i32 0, i32* %argc, align 4
  store i8** null, i8*** %argv, align 8
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end_block89
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %entry
  br i1 true, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  br label %loop_top_block3

cond_end_block:                                   ; preds = %cond_jump_then39, %loop_top_block
  %pargv113 = load i8***, i8**** %pargv, align 8
  %argv114 = load i8**, i8*** %argv, align 8
  store i8** %argv114, i8*** %pargv113, align 8
  %argc115 = load i32, i32* %argc, align 4
  ret i32 %argc115

loop_top_block3:                                  ; preds = %cond_then_block31, %cond_then_block
  %str4 = load i8*, i8** %str, align 8
  %derefference_valueB = load i8, i8* %str4, align 1
  %icastL = sext i8 %derefference_valueB to i32
  store i32 193, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.153, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space

is_space:                                         ; preds = %loop_top_block3
  %inline_result_variable = alloca i32, align 4
  %ch = alloca i32, align 4
  store i32 %icastL, i32* %ch, align 4
  %ch8 = load i32, i32* %ch, align 4
  %eq = icmp eq i32 %ch8, 32
  store i1 %eq, i1* %oror7, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then

is_space_end:                                     ; preds = %cond_jump_end25
  %inline_result_variable30 = load i32, i32* %inline_result_variable, align 4
  %icmpA = icmp ne i32 %inline_result_variable30, 0
  br i1 %icmpA, label %cond_then_block31, label %cond_end_block32

cond_jump_then:                                   ; preds = %is_space
  %ch9 = load i32, i32* %ch, align 4
  %eq10 = icmp eq i32 %ch9, 9
  %oror11 = or i1 %eq, %eq10
  store i1 %oror11, i1* %oror7, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %is_space
  %oror_result_value = load i1, i1* %oror7, align 1
  store i1 %oror_result_value, i1* %oror6, align 1
  br i1 %oror_result_value, label %cond_jump_end13, label %cond_jump_then12

cond_jump_then12:                                 ; preds = %cond_jump_end
  %ch14 = load i32, i32* %ch, align 4
  %eq15 = icmp eq i32 %ch14, 11
  %oror16 = or i1 %oror_result_value, %eq15
  store i1 %oror16, i1* %oror6, align 1
  br label %cond_jump_end13

cond_jump_end13:                                  ; preds = %cond_jump_then12, %cond_jump_end
  %oror_result_value17 = load i1, i1* %oror6, align 1
  store i1 %oror_result_value17, i1* %oror5, align 1
  br i1 %oror_result_value17, label %cond_jump_end19, label %cond_jump_then18

cond_jump_then18:                                 ; preds = %cond_jump_end13
  %ch20 = load i32, i32* %ch, align 4
  %eq21 = icmp eq i32 %ch20, 12
  %oror22 = or i1 %oror_result_value17, %eq21
  store i1 %oror22, i1* %oror5, align 1
  br label %cond_jump_end19

cond_jump_end19:                                  ; preds = %cond_jump_then18, %cond_jump_end13
  %oror_result_value23 = load i1, i1* %oror5, align 1
  store i1 %oror_result_value23, i1* %oror, align 1
  br i1 %oror_result_value23, label %cond_jump_end25, label %cond_jump_then24

cond_jump_then24:                                 ; preds = %cond_jump_end19
  %ch26 = load i32, i32* %ch, align 4
  %eq27 = icmp eq i32 %ch26, 13
  %oror28 = or i1 %oror_result_value23, %eq27
  store i1 %oror28, i1* %oror, align 1
  br label %cond_jump_end25

cond_jump_end25:                                  ; preds = %cond_jump_then24, %cond_jump_end19
  %oror_result_value29 = load i1, i1* %oror, align 1
  %icastKX = zext i1 %oror_result_value29 to i32
  store i32 %icastKX, i32* %inline_result_variable, align 4
  br label %is_space_end

cond_then_block31:                                ; preds = %is_space_end
  %str33 = load i8*, i8** %str, align 8
  %ptrToIntC = ptrtoint i8* %str33 to i64
  %add = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add to i8*
  store i8* %intToPtrB, i8** %str, align 8
  %str34 = load i8*, i8** %str, align 8
  %ptrToIntI = ptrtoint i8* %str34 to i64
  %sub = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub to i8*
  br label %loop_top_block3

cond_end_block32:                                 ; preds = %is_space_end
  %str35 = load i8*, i8** %str, align 8
  %derefference_valueB36 = load i8, i8* %str35, align 1
  %icastL37 = sext i8 %derefference_valueB36 to i32
  %eq38 = icmp eq i32 %icastL37, 0
  br i1 %eq38, label %cond_jump_then39, label %cond_end

cond_jump_then39:                                 ; preds = %cond_end_block32
  br label %cond_end_block

cond_end:                                         ; preds = %after_break, %cond_end_block32
  %str40 = load i8*, i8** %str, align 8
  store i8* %str40, i8** %s1, align 8
  br label %loop_top_block41

after_break:                                      ; No predecessors!
  br label %cond_end

loop_top_block41:                                 ; preds = %cond_then_block88, %cond_end
  %str42 = load i8*, i8** %str, align 8
  %derefference_valueB43 = load i8, i8* %str42, align 1
  %icastL44 = sext i8 %derefference_valueB43 to i32
  %not_eq = icmp ne i32 %icastL44, 0
  store i1 %not_eq, i1* %andand, align 1
  br i1 %not_eq, label %cond_jump_then45, label %cond_jump_end46

cond_jump_then45:                                 ; preds = %loop_top_block41
  %str47 = load i8*, i8** %str, align 8
  %derefference_valueB48 = load i8, i8* %str47, align 1
  %icastL49 = sext i8 %derefference_valueB48 to i32
  store i32 198, i32* @gCallerSLine, align 4
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @tcc.c.154, i32 0, i32 0), i8** @gCallerSName, align 8
  br label %is_space50

cond_jump_end46:                                  ; preds = %is_space_end53, %loop_top_block41
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_then_block88, label %cond_end_block89

is_space50:                                       ; preds = %cond_jump_then45
  %inline_result_variable51 = alloca i32, align 4
  %ch52 = alloca i32, align 4
  store i32 %icastL49, i32* %ch52, align 4
  %ch58 = load i32, i32* %ch52, align 4
  %eq59 = icmp eq i32 %ch58, 32
  store i1 %eq59, i1* %oror57, align 1
  br i1 %eq59, label %cond_jump_end61, label %cond_jump_then60

is_space_end53:                                   ; preds = %cond_jump_end79
  %inline_result_variable85 = load i32, i32* %inline_result_variable51, align 4
  %logical_denial = icmp eq i32 %inline_result_variable85, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA86 = icmp ne i32 %castOOOO, 0
  %andand87 = and i1 %not_eq, %icmpA86
  store i1 %andand87, i1* %andand, align 1
  br label %cond_jump_end46

cond_jump_then60:                                 ; preds = %is_space50
  %ch62 = load i32, i32* %ch52, align 4
  %eq63 = icmp eq i32 %ch62, 9
  %oror64 = or i1 %eq59, %eq63
  store i1 %oror64, i1* %oror57, align 1
  br label %cond_jump_end61

cond_jump_end61:                                  ; preds = %cond_jump_then60, %is_space50
  %oror_result_value65 = load i1, i1* %oror57, align 1
  store i1 %oror_result_value65, i1* %oror56, align 1
  br i1 %oror_result_value65, label %cond_jump_end67, label %cond_jump_then66

cond_jump_then66:                                 ; preds = %cond_jump_end61
  %ch68 = load i32, i32* %ch52, align 4
  %eq69 = icmp eq i32 %ch68, 11
  %oror70 = or i1 %oror_result_value65, %eq69
  store i1 %oror70, i1* %oror56, align 1
  br label %cond_jump_end67

cond_jump_end67:                                  ; preds = %cond_jump_then66, %cond_jump_end61
  %oror_result_value71 = load i1, i1* %oror56, align 1
  store i1 %oror_result_value71, i1* %oror55, align 1
  br i1 %oror_result_value71, label %cond_jump_end73, label %cond_jump_then72

cond_jump_then72:                                 ; preds = %cond_jump_end67
  %ch74 = load i32, i32* %ch52, align 4
  %eq75 = icmp eq i32 %ch74, 12
  %oror76 = or i1 %oror_result_value71, %eq75
  store i1 %oror76, i1* %oror55, align 1
  br label %cond_jump_end73

cond_jump_end73:                                  ; preds = %cond_jump_then72, %cond_jump_end67
  %oror_result_value77 = load i1, i1* %oror55, align 1
  store i1 %oror_result_value77, i1* %oror54, align 1
  br i1 %oror_result_value77, label %cond_jump_end79, label %cond_jump_then78

cond_jump_then78:                                 ; preds = %cond_jump_end73
  %ch80 = load i32, i32* %ch52, align 4
  %eq81 = icmp eq i32 %ch80, 13
  %oror82 = or i1 %oror_result_value77, %eq81
  store i1 %oror82, i1* %oror54, align 1
  br label %cond_jump_end79

cond_jump_end79:                                  ; preds = %cond_jump_then78, %cond_jump_end73
  %oror_result_value83 = load i1, i1* %oror54, align 1
  %icastKX84 = zext i1 %oror_result_value83 to i32
  store i32 %icastKX84, i32* %inline_result_variable51, align 4
  br label %is_space_end53

cond_then_block88:                                ; preds = %cond_jump_end46
  %str90 = load i8*, i8** %str, align 8
  %ptrToIntC91 = ptrtoint i8* %str90 to i64
  %add92 = add i64 %ptrToIntC91, 1
  %intToPtrB93 = inttoptr i64 %add92 to i8*
  store i8* %intToPtrB93, i8** %str, align 8
  %str94 = load i8*, i8** %str, align 8
  %ptrToIntI95 = ptrtoint i8* %str94 to i64
  %sub96 = sub i64 %ptrToIntI95, 1
  %iintToPtrD97 = inttoptr i64 %sub96 to i8*
  br label %loop_top_block41

cond_end_block89:                                 ; preds = %cond_jump_end46
  %str98 = load i8*, i8** %str, align 8
  %s199 = load i8*, i8** %s1, align 8
  %ptrToIntG = ptrtoint i8* %str98 to i64
  %ptrToIntH = ptrtoint i8* %s199 to i64
  %sub100 = sub i64 %ptrToIntG, %ptrToIntH
  %div = sdiv i64 %sub100, 1
  %icastM = trunc i64 %div to i32
  store i32 %icastM, i32* %len, align 4
  %len101 = load i32, i32* %len, align 4
  %add102 = add i32 %len101, 1
  %icastD = sext i32 %add102 to i64
  %fun_result = call i8* @tcc_malloc(i64 %icastD)
  store i8* %fun_result, i8** %arg, align 8
  %arg103 = load i8*, i8** %arg, align 8
  %s1104 = load i8*, i8** %s1, align 8
  %len105 = load i32, i32* %len, align 4
  %icastD106 = sext i32 %len105 to i64
  %fun_result107 = call i8* @memcpy(i8* %arg103, i8* %s1104, i64 %icastD106)
  %arg108 = load i8*, i8** %arg, align 8
  %len109 = load i32, i32* %len, align 4
  %element_addressXYXY = getelementptr i8, i8* %arg108, i32 %len109
  store i8 0, i8* %element_addressXYXY, align 1
  %argv110 = load i8**, i8*** %argv, align 8
  %argc111 = load i32, i32* %argc, align 4
  %arg112 = load i8*, i8** %arg, align 8
  call void @dynarray_add(i8*** %argv, i32* %argc, i8* %arg112)
  br label %loop_continue_top_block
}

define i32 @parse_args(%TCCState* %0, i32 %1, i8** %2) {
entry:
  %p = alloca i8*, align 8
  %andand292 = alloca i1, align 1
  %andand = alloca i1, align 1
  %argv1 = alloca i8**, align 8
  %argc1 = alloca i32, align 4
  %value = alloca i8*, align 8
  %sym = alloca i8*, align 8
  %oror84 = alloca i1, align 1
  %oror = alloca i1, align 1
  %r = alloca i8*, align 8
  %r1 = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  %optarg = alloca i8*, align 8
  %popt = alloca %TCCOption*, align 8
  %optind = alloca i32, align 4
  %s = alloca %TCCState*, align 8
  %s1 = alloca %TCCState**, align 8
  store %TCCState* %0, %TCCState** %s, align 8
  store %TCCState** %s, %TCCState*** %s1, align 8
  %argc = alloca i32, align 4
  %argc2 = alloca i32*, align 8
  store i32 %1, i32* %argc, align 4
  store i32* %argc, i32** %argc2, align 8
  %argv = alloca i8**, align 8
  %argv3 = alloca i8***, align 8
  store i8** %2, i8*** %argv, align 8
  store i8*** %argv, i8**** %argv3, align 8
  store i32 0, i32* %optind, align 4
  br label %loop_top_block

loop_top_block:                                   ; preds = %cond_end, %entry
  %optind4 = load i32, i32* %optind, align 4
  %argc5 = load i32, i32* %argc, align 4
  %le = icmp slt i32 %optind4, %argc5
  br i1 %le, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %loop_top_block
  %argv6 = load i8**, i8*** %argv, align 8
  %optind7 = load i32, i32* %optind, align 4
  %add = add i32 %optind7, 1
  store i32 %add, i32* %optind, align 4
  %optind8 = load i32, i32* %optind, align 4
  %sub = sub i32 %optind8, 1
  %element_addressAB = load i8**, i8*** %argv, align 8
  %element_addressXYXZY = getelementptr inbounds i8*, i8** %element_addressAB, i32 %sub
  %load_element = load i8*, i8** %element_addressXYXZY, align 8
  store i8* %load_element, i8** %r, align 8
  %r9 = load i8*, i8** %r, align 8
  %element_addressAB10 = load i8*, i8** %r, align 8
  %element_addressXYXZY11 = getelementptr inbounds i8, i8* %element_addressAB10, i32 0
  %load_element12 = load i8, i8* %element_addressXYXZY11, align 1
  %icastL = sext i8 %load_element12 to i32
  %not_eq = icmp ne i32 %icastL, 45
  store i1 %not_eq, i1* %oror, align 1
  br i1 %not_eq, label %cond_jump_end, label %cond_jump_then

cond_end_block:                                   ; preds = %cond_jump_then21, %loop_top_block
  %optind370 = load i32, i32* %optind, align 4
  %add371 = add i32 %optind370, 1
  ret i32 %add371

cond_jump_then:                                   ; preds = %cond_then_block
  %r13 = load i8*, i8** %r, align 8
  %element_addressAB14 = load i8*, i8** %r, align 8
  %element_addressXYXZY15 = getelementptr inbounds i8, i8* %element_addressAB14, i32 1
  %load_element16 = load i8, i8* %element_addressXYXZY15, align 1
  %icastL17 = sext i8 %load_element16 to i32
  %eq = icmp eq i32 %icastL17, 0
  %oror18 = or i1 %not_eq, %eq
  store i1 %oror18, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then, %cond_then_block
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then19, label %cond_else_block

cond_jump_then19:                                 ; preds = %cond_jump_end
  %files = load i8**, i8*** @files, align 8
  %nb_files = load i32, i32* @nb_files, align 4
  %r20 = load i8*, i8** %r, align 8
  call void @dynarray_add(i8*** @files, i32* @nb_files, i8* %r20)
  %multiple_files = load i32, i32* @multiple_files, align 4
  %logical_denial = icmp eq i32 %multiple_files, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA = icmp ne i32 %castOOOO, 0
  br i1 %icmpA, label %cond_jump_then21, label %cond_end22

cond_else_block:                                  ; preds = %cond_jump_end
  store %TCCOption* getelementptr inbounds ([31 x %TCCOption], [31 x %TCCOption]* @tcc_options, i32 0, i32 0), %TCCOption** %popt, align 8
  br label %loop_top_block26

cond_end:                                         ; preds = %end_blockX, %cond_end22
  br label %loop_top_block

cond_jump_then21:                                 ; preds = %cond_jump_then19
  %optind23 = load i32, i32* %optind, align 4
  %sub24 = sub i32 %optind23, 1
  store i32 %sub24, i32* %optind, align 4
  %add25 = add i32 %sub24, 1
  br label %cond_end_block

cond_end22:                                       ; preds = %after_break, %cond_jump_then19
  br label %cond_end

after_break:                                      ; No predecessors!
  br label %cond_end22

loop_continue_top_block:                          ; preds = %cond_end_block40
  br label %loop_top_block26

loop_top_block26:                                 ; preds = %loop_continue_top_block, %cond_else_block
  br i1 true, label %cond_then_block27, label %cond_end_block28

cond_then_block27:                                ; preds = %loop_top_block26
  %popt29 = load %TCCOption*, %TCCOption** %popt, align 8
  %fieldLLL = getelementptr inbounds %TCCOption, %TCCOption* %popt29, i32 0, i32 0
  %name = load i8*, i8** %fieldLLL, align 8
  store i8* %name, i8** %p1, align 8
  %p130 = load i8*, i8** %p1, align 8
  %castAC = ptrtoint i8* %p130 to i32
  %eq31 = icmp eq i32 %castAC, 0
  br i1 %eq31, label %cond_jump_then32, label %cond_end33

cond_end_block28:                                 ; preds = %loop_top_block26
  br label %parse_args.option_found

cond_jump_then32:                                 ; preds = %cond_then_block27
  %r34 = load i8*, i8** %r, align 8
  call void (i8*, ...) @error(i8* bitcast ([23 x i8]* @392 to i8*), i8* %r34)
  br label %cond_end33

cond_end33:                                       ; preds = %cond_jump_then32, %cond_then_block27
  %r35 = load i8*, i8** %r, align 8
  %ptrToIntC = ptrtoint i8* %r35 to i64
  %add36 = add i64 %ptrToIntC, 1
  %intToPtrB = inttoptr i64 %add36 to i8*
  store i8* %intToPtrB, i8** %r1, align 8
  br label %loop_top_block38

loop_continue_top_block37:                        ; preds = %cond_end54
  br label %loop_top_block38

loop_top_block38:                                 ; preds = %loop_continue_top_block37, %cond_end33
  br i1 true, label %cond_then_block39, label %cond_end_block40

cond_then_block39:                                ; preds = %loop_top_block38
  %p141 = load i8*, i8** %p1, align 8
  %derefference_valueB = load i8, i8* %p141, align 1
  %icastL42 = sext i8 %derefference_valueB to i32
  %eq43 = icmp eq i32 %icastL42, 0
  br i1 %eq43, label %cond_jump_then44, label %cond_end45

cond_end_block40:                                 ; preds = %cond_jump_then53, %loop_top_block38
  %popt70 = load %TCCOption*, %TCCOption** %popt, align 8
  %ptrToIntC71 = ptrtoint %TCCOption* %popt70 to i64
  %add72 = add i64 %ptrToIntC71, 16
  %intToPtrB73 = inttoptr i64 %add72 to %TCCOption*
  store %TCCOption* %intToPtrB73, %TCCOption** %popt, align 8
  %popt74 = load %TCCOption*, %TCCOption** %popt, align 8
  %ptrToIntI75 = ptrtoint %TCCOption* %popt74 to i64
  %sub76 = sub i64 %ptrToIntI75, 16
  %iintToPtrD77 = inttoptr i64 %sub76 to %TCCOption*
  br label %loop_continue_top_block

cond_jump_then44:                                 ; preds = %cond_then_block39
  br label %parse_args.option_found
  br label %cond_end45

cond_end45:                                       ; preds = %cond_jump_then44, %cond_then_block39
  %r146 = load i8*, i8** %r1, align 8
  %derefference_valueB47 = load i8, i8* %r146, align 1
  %p148 = load i8*, i8** %p1, align 8
  %derefference_valueB49 = load i8, i8* %p148, align 1
  %icastL50 = sext i8 %derefference_valueB47 to i32
  %icastL51 = sext i8 %derefference_valueB49 to i32
  %not_eq52 = icmp ne i32 %icastL50, %icastL51
  br i1 %not_eq52, label %cond_jump_then53, label %cond_end54

parse_args.option_found:                          ; preds = %cond_end_block28, %cond_jump_then44
  %popt78 = load %TCCOption*, %TCCOption** %popt, align 8
  %fieldLLL79 = getelementptr inbounds %TCCOption, %TCCOption* %popt78, i32 0, i32 2
  %flags = load i16, i16* %fieldLLL79, align 2
  %icastKY = zext i16 %flags to i32
  %andtmp = and i32 %icastKY, 1
  %icmpA80 = icmp ne i32 %andtmp, 0
  br i1 %icmpA80, label %cond_jump_then81, label %cond_else_block82

cond_jump_then53:                                 ; preds = %cond_end45
  br label %cond_end_block40

cond_end54:                                       ; preds = %after_break55, %cond_end45
  %p156 = load i8*, i8** %p1, align 8
  %ptrToIntC57 = ptrtoint i8* %p156 to i64
  %add58 = add i64 %ptrToIntC57, 1
  %intToPtrB59 = inttoptr i64 %add58 to i8*
  store i8* %intToPtrB59, i8** %p1, align 8
  %p160 = load i8*, i8** %p1, align 8
  %ptrToIntI = ptrtoint i8* %p160 to i64
  %sub61 = sub i64 %ptrToIntI, 1
  %iintToPtrD = inttoptr i64 %sub61 to i8*
  %r162 = load i8*, i8** %r1, align 8
  %ptrToIntC63 = ptrtoint i8* %r162 to i64
  %add64 = add i64 %ptrToIntC63, 1
  %intToPtrB65 = inttoptr i64 %add64 to i8*
  store i8* %intToPtrB65, i8** %r1, align 8
  %r166 = load i8*, i8** %r1, align 8
  %ptrToIntI67 = ptrtoint i8* %r166 to i64
  %sub68 = sub i64 %ptrToIntI67, 1
  %iintToPtrD69 = inttoptr i64 %sub68 to i8*
  br label %loop_continue_top_block37

after_break55:                                    ; No predecessors!
  br label %cond_end54

cond_jump_then81:                                 ; preds = %parse_args.option_found
  %r185 = load i8*, i8** %r1, align 8
  %derefference_valueB86 = load i8, i8* %r185, align 1
  %icastL87 = sext i8 %derefference_valueB86 to i32
  %not_eq88 = icmp ne i32 %icastL87, 0
  store i1 %not_eq88, i1* %oror84, align 1
  br i1 %not_eq88, label %cond_jump_end90, label %cond_jump_then89

cond_else_block82:                                ; preds = %parse_args.option_found
  %r1116 = load i8*, i8** %r1, align 8
  %derefference_valueB117 = load i8, i8* %r1116, align 1
  %icastL118 = sext i8 %derefference_valueB117 to i32
  %not_eq119 = icmp ne i32 %icastL118, 0
  br i1 %not_eq119, label %cond_jump_then120, label %cond_end121

cond_end83:                                       ; preds = %cond_end121, %cond_end101
  %popt122 = load %TCCOption*, %TCCOption** %popt, align 8
  %fieldLLL123 = getelementptr inbounds %TCCOption, %TCCOption* %popt122, i32 0, i32 1
  %index = load i16, i16* %fieldLLL123, align 2
  %eqtmp = icmp eq i16 %index, 0
  br i1 %eqtmp, label %cond_then_block124, label %cond_else_blockX

cond_jump_then89:                                 ; preds = %cond_jump_then81
  %popt91 = load %TCCOption*, %TCCOption** %popt, align 8
  %fieldLLL92 = getelementptr inbounds %TCCOption, %TCCOption* %popt91, i32 0, i32 2
  %flags93 = load i16, i16* %fieldLLL92, align 2
  %icastKY94 = zext i16 %flags93 to i32
  %andtmp95 = and i32 %icastKY94, 2
  %icmpA96 = icmp ne i32 %andtmp95, 0
  %oror97 = or i1 %not_eq88, %icmpA96
  store i1 %oror97, i1* %oror84, align 1
  br label %cond_jump_end90

cond_jump_end90:                                  ; preds = %cond_jump_then89, %cond_jump_then81
  %oror_result_value98 = load i1, i1* %oror84, align 1
  br i1 %oror_result_value98, label %cond_jump_then99, label %cond_else_block100

cond_jump_then99:                                 ; preds = %cond_jump_end90
  %r1102 = load i8*, i8** %r1, align 8
  store i8* %r1102, i8** %optarg, align 8
  br label %cond_end101

cond_else_block100:                               ; preds = %cond_jump_end90
  %optind103 = load i32, i32* %optind, align 4
  %argc104 = load i32, i32* %argc, align 4
  %gteq_signed = icmp sge i32 %optind103, %argc104
  br i1 %gteq_signed, label %cond_jump_then105, label %cond_end106

cond_end101:                                      ; preds = %cond_end106, %cond_jump_then99
  br label %cond_end83

cond_jump_then105:                                ; preds = %cond_else_block100
  %r107 = load i8*, i8** %r, align 8
  call void (i8*, ...) @error(i8* bitcast ([28 x i8]* @393 to i8*), i8* %r107)
  br label %cond_end106

cond_end106:                                      ; preds = %cond_jump_then105, %cond_else_block100
  %argv108 = load i8**, i8*** %argv, align 8
  %optind109 = load i32, i32* %optind, align 4
  %add110 = add i32 %optind109, 1
  store i32 %add110, i32* %optind, align 4
  %optind111 = load i32, i32* %optind, align 4
  %sub112 = sub i32 %optind111, 1
  %element_addressAB113 = load i8**, i8*** %argv, align 8
  %element_addressXYXZY114 = getelementptr inbounds i8*, i8** %element_addressAB113, i32 %sub112
  %load_element115 = load i8*, i8** %element_addressXYXZY114, align 8
  store i8* %load_element115, i8** %optarg, align 8
  br label %cond_end101

cond_jump_then120:                                ; preds = %cond_else_block82
  ret i32 0

cond_end121:                                      ; preds = %cond_else_block82
  br label %cond_end83

end_blockX:                                       ; preds = %cond_else_blockX361, %cond_end367, %cond_then_block356, %cond_end327, %cond_then_block313, %cond_then_block307, %cond_end305, %cond_end287, %cond_end_block256, %cond_end245, %cond_then_block234, %cond_then_block228, %cond_then_block222, %cond_then_block218, %cond_then_block214, %cond_then_block208, %cond_then_block204, %cond_then_block198, %cond_then_block194, %cond_then_block189, %cond_then_block184, %cond_then_block180, %cond_then_block170, %cond_then_block165, %cond_then_block159, %cond_then_block154, %cond_end140, %cond_end131
  br label %cond_end

cond_then_block124:                               ; preds = %cond_end83
  ret i32 0
  br label %cond_else_blockX126

cond_else_blockX:                                 ; preds = %cond_end83
  %eqtmp127 = icmp eq i16 %index, 1
  br i1 %eqtmp127, label %cond_then_block125, label %cond_else_blockX126

cond_then_block125:                               ; preds = %cond_else_blockX
  %s128 = load %TCCState*, %TCCState** %s, align 8
  %fun_result = call i32 @tcc_add_include_path(%TCCState* %s128, i8* null)
  %le129 = icmp slt i32 %fun_result, 0
  br i1 %le129, label %cond_jump_then130, label %cond_end131

cond_else_blockX126:                              ; preds = %after_break132, %cond_else_blockX, %cond_then_block124
  %eqtmp135 = icmp eq i16 %index, 2
  br i1 %eqtmp135, label %cond_then_block133, label %cond_else_blockX134

cond_jump_then130:                                ; preds = %cond_then_block125
  call void (i8*, ...) @error(i8* bitcast ([23 x i8]* @394 to i8*))
  br label %cond_end131

cond_end131:                                      ; preds = %cond_jump_then130, %cond_then_block125
  br label %end_blockX

after_break132:                                   ; No predecessors!
  br label %cond_else_blockX126
  br label %cond_else_blockX134

cond_then_block133:                               ; preds = %cond_else_blockX126
  store i8* null, i8** %sym, align 8
  %sym136 = load i8*, i8** %sym, align 8
  %fun_result137 = call i8* @strchr(i8* %sym136, i32 61)
  store i8* %fun_result137, i8** %value, align 8
  %value138 = load i8*, i8** %value, align 8
  %icmpB = icmp ne i8* %value138, null
  br i1 %icmpB, label %cond_jump_then139, label %cond_end140

cond_else_blockX134:                              ; preds = %after_break153, %cond_else_blockX126, %after_break132
  %eqtmp156 = icmp eq i16 %index, 3
  br i1 %eqtmp156, label %cond_then_block154, label %cond_else_blockX155

cond_jump_then139:                                ; preds = %cond_then_block133
  %value141 = load i8*, i8** %value, align 8
  store i8 0, i8* %value141, align 1
  %value142 = load i8*, i8** %value, align 8
  %ptrToIntC143 = ptrtoint i8* %value142 to i64
  %add144 = add i64 %ptrToIntC143, 1
  %intToPtrB145 = inttoptr i64 %add144 to i8*
  store i8* %intToPtrB145, i8** %value, align 8
  %value146 = load i8*, i8** %value, align 8
  %ptrToIntI147 = ptrtoint i8* %value146 to i64
  %sub148 = sub i64 %ptrToIntI147, 1
  %iintToPtrD149 = inttoptr i64 %sub148 to i8*
  br label %cond_end140

cond_end140:                                      ; preds = %cond_jump_then139, %cond_then_block133
  %s150 = load %TCCState*, %TCCState** %s, align 8
  %sym151 = load i8*, i8** %sym, align 8
  %value152 = load i8*, i8** %value, align 8
  call void @tcc_define_symbol(%TCCState* %s150, i8* %sym151, i8* %value152)
  br label %end_blockX

after_break153:                                   ; No predecessors!
  br label %cond_else_blockX134
  br label %cond_else_blockX155

cond_then_block154:                               ; preds = %cond_else_blockX134
  %s157 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_undefine_symbol(%TCCState* %s157, i8* null)
  br label %end_blockX

cond_else_blockX155:                              ; preds = %after_break158, %cond_else_blockX134, %after_break153
  %eqtmp161 = icmp eq i16 %index, 4
  br i1 %eqtmp161, label %cond_then_block159, label %cond_else_blockX160

after_break158:                                   ; No predecessors!
  br label %cond_else_blockX155
  br label %cond_else_blockX160

cond_then_block159:                               ; preds = %cond_else_blockX155
  %s162 = load %TCCState*, %TCCState** %s, align 8
  %fun_result163 = call i32 @tcc_add_library_path(%TCCState* %s162, i8* null)
  br label %end_blockX

cond_else_blockX160:                              ; preds = %after_break164, %cond_else_blockX155, %after_break158
  %eqtmp167 = icmp eq i16 %index, 5
  br i1 %eqtmp167, label %cond_then_block165, label %cond_else_blockX166

after_break164:                                   ; No predecessors!
  br label %cond_else_blockX160
  br label %cond_else_blockX166

cond_then_block165:                               ; preds = %cond_else_blockX160
  %s168 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_set_lib_path(%TCCState* %s168, i8* null)
  br label %end_blockX

cond_else_blockX166:                              ; preds = %after_break169, %cond_else_blockX160, %after_break164
  %eqtmp172 = icmp eq i16 %index, 6
  br i1 %eqtmp172, label %cond_then_block170, label %cond_else_blockX171

after_break169:                                   ; No predecessors!
  br label %cond_else_blockX166
  br label %cond_else_blockX171

cond_then_block170:                               ; preds = %cond_else_blockX166
  %files173 = load i8**, i8*** @files, align 8
  %nb_files174 = load i32, i32* @nb_files, align 4
  %r175 = load i8*, i8** %r, align 8
  call void @dynarray_add(i8*** @files, i32* @nb_files, i8* %r175)
  %nb_libraries = load i32, i32* @nb_libraries, align 4
  %add176 = add i32 %nb_libraries, 1
  store i32 %add176, i32* @nb_libraries, align 4
  %nb_libraries177 = load i32, i32* @nb_libraries, align 4
  %sub178 = sub i32 %nb_libraries177, 1
  br label %end_blockX

cond_else_blockX171:                              ; preds = %after_break179, %cond_else_blockX166, %after_break169
  %eqtmp182 = icmp eq i16 %index, 7
  br i1 %eqtmp182, label %cond_then_block180, label %cond_else_blockX181

after_break179:                                   ; No predecessors!
  br label %cond_else_blockX171
  br label %cond_else_blockX181

cond_then_block180:                               ; preds = %cond_else_blockX171
  store i32 1, i32* @do_bench, align 4
  br label %end_blockX

cond_else_blockX181:                              ; preds = %after_break183, %cond_else_blockX171, %after_break179
  %eqtmp186 = icmp eq i16 %index, 8
  br i1 %eqtmp186, label %cond_then_block184, label %cond_else_blockX185

after_break183:                                   ; No predecessors!
  br label %cond_else_blockX181
  br label %cond_else_blockX185

cond_then_block184:                               ; preds = %cond_else_blockX181
  %fun_result187 = call i32 @atoi(i8* null)
  store i32 %fun_result187, i32* @num_callers, align 4
  br label %end_blockX

cond_else_blockX185:                              ; preds = %after_break188, %cond_else_blockX181, %after_break183
  %eqtmp191 = icmp eq i16 %index, 10
  br i1 %eqtmp191, label %cond_then_block189, label %cond_else_blockX190

after_break188:                                   ; No predecessors!
  br label %cond_else_blockX185
  br label %cond_else_blockX190

cond_then_block189:                               ; preds = %cond_else_blockX185
  %s192 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s192, i32 0, i32 42
  store i32 1, i32* %fieldTU, align 4
  br label %end_blockX

cond_else_blockX190:                              ; preds = %after_break193, %cond_else_blockX185, %after_break188
  %eqtmp196 = icmp eq i16 %index, 11
  br i1 %eqtmp196, label %cond_then_block194, label %cond_else_blockX195

after_break193:                                   ; No predecessors!
  br label %cond_else_blockX190
  br label %cond_else_blockX195

cond_then_block194:                               ; preds = %cond_else_blockX190
  store i32 1, i32* @multiple_files, align 4
  store i32 3, i32* @output_type, align 4
  br label %end_blockX

cond_else_blockX195:                              ; preds = %after_break197, %cond_else_blockX190, %after_break193
  %eqtmp200 = icmp eq i16 %index, 12
  br i1 %eqtmp200, label %cond_then_block198, label %cond_else_blockX199

after_break197:                                   ; No predecessors!
  br label %cond_else_blockX195
  br label %cond_else_blockX199

cond_then_block198:                               ; preds = %cond_else_blockX195
  %s201 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU202 = getelementptr inbounds %TCCState, %TCCState* %s201, i32 0, i32 27
  store i32 1, i32* %fieldTU202, align 4
  br label %end_blockX

cond_else_blockX199:                              ; preds = %after_break203, %cond_else_blockX195, %after_break197
  %eqtmp206 = icmp eq i16 %index, 13
  br i1 %eqtmp206, label %cond_then_block204, label %cond_else_blockX205

after_break203:                                   ; No predecessors!
  br label %cond_else_blockX199
  br label %cond_else_blockX205

cond_then_block204:                               ; preds = %cond_else_blockX199
  store i32 2, i32* @output_type, align 4
  br label %end_blockX

cond_else_blockX205:                              ; preds = %after_break207, %cond_else_blockX199, %after_break203
  %eqtmp210 = icmp eq i16 %index, 14
  br i1 %eqtmp210, label %cond_then_block208, label %cond_else_blockX209

after_break207:                                   ; No predecessors!
  br label %cond_else_blockX205
  br label %cond_else_blockX209

cond_then_block208:                               ; preds = %cond_else_blockX205
  %s211 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU212 = getelementptr inbounds %TCCState, %TCCState* %s211, i32 0, i32 28
  store i8* null, i8** %fieldTU212, align 8
  br label %end_blockX

cond_else_blockX209:                              ; preds = %after_break213, %cond_else_blockX205, %after_break207
  %eqtmp216 = icmp eq i16 %index, 15
  br i1 %eqtmp216, label %cond_then_block214, label %cond_else_blockX215

after_break213:                                   ; No predecessors!
  br label %cond_else_blockX209
  br label %cond_else_blockX215

cond_then_block214:                               ; preds = %cond_else_blockX209
  store i32 1, i32* @multiple_files, align 4
  br label %end_blockX

cond_else_blockX215:                              ; preds = %after_break217, %cond_else_blockX209, %after_break213
  %eqtmp220 = icmp eq i16 %index, 16
  br i1 %eqtmp220, label %cond_then_block218, label %cond_else_blockX219

after_break217:                                   ; No predecessors!
  br label %cond_else_blockX215
  br label %cond_else_blockX219

cond_then_block218:                               ; preds = %cond_else_blockX215
  store i32 1, i32* @reloc_output, align 4
  store i32 3, i32* @output_type, align 4
  br label %end_blockX

cond_else_blockX219:                              ; preds = %after_break221, %cond_else_blockX215, %after_break217
  %eqtmp224 = icmp eq i16 %index, 22
  br i1 %eqtmp224, label %cond_then_block222, label %cond_else_blockX223

after_break221:                                   ; No predecessors!
  br label %cond_else_blockX219
  br label %cond_else_blockX223

cond_then_block222:                               ; preds = %cond_else_blockX219
  %s225 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU226 = getelementptr inbounds %TCCState, %TCCState* %s225, i32 0, i32 24
  store i32 1, i32* %fieldTU226, align 4
  br label %end_blockX

cond_else_blockX223:                              ; preds = %after_break227, %cond_else_blockX219, %after_break221
  %eqtmp230 = icmp eq i16 %index, 23
  br i1 %eqtmp230, label %cond_then_block228, label %cond_else_blockX229

after_break227:                                   ; No predecessors!
  br label %cond_else_blockX223
  br label %cond_else_blockX229

cond_then_block228:                               ; preds = %cond_else_blockX223
  %s231 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU232 = getelementptr inbounds %TCCState, %TCCState* %s231, i32 0, i32 25
  store i32 1, i32* %fieldTU232, align 4
  br label %end_blockX

cond_else_blockX229:                              ; preds = %after_break233, %cond_else_blockX223, %after_break227
  %eqtmp236 = icmp eq i16 %index, 24
  br i1 %eqtmp236, label %cond_then_block234, label %cond_else_blockX235

after_break233:                                   ; No predecessors!
  br label %cond_else_blockX229
  br label %cond_else_blockX235

cond_then_block234:                               ; preds = %cond_else_blockX229
  store i32 1, i32* @print_search_dirs, align 4
  br label %end_blockX

cond_else_blockX235:                              ; preds = %after_break237, %cond_else_blockX229, %after_break233
  %eqtmp240 = icmp eq i16 %index, 26
  br i1 %eqtmp240, label %cond_then_block238, label %cond_else_blockX239

after_break237:                                   ; No predecessors!
  br label %cond_else_blockX235
  br label %cond_else_blockX239

cond_then_block238:                               ; preds = %cond_else_blockX235
  %argv1241 = load i8**, i8*** %argv1, align 8
  %fun_result242 = call i32 @expand_args(i8*** %argv1, i8* null)
  store i32 %fun_result242, i32* %argc1, align 4
  %argc1243 = load i32, i32* %argc1, align 4
  %gt = icmp sgt i32 %argc1243, 0
  br i1 %gt, label %cond_jump_then244, label %cond_end245

cond_else_blockX239:                              ; preds = %after_break250, %cond_else_blockX235, %after_break237
  %eqtmp253 = icmp eq i16 %index, 27
  br i1 %eqtmp253, label %cond_then_block251, label %cond_else_blockX252

cond_jump_then244:                                ; preds = %cond_then_block238
  %s246 = load %TCCState*, %TCCState** %s, align 8
  %argc1247 = load i32, i32* %argc1, align 4
  %argv1248 = load i8**, i8*** %argv1, align 8
  %fun_result249 = call i32 @parse_args(%TCCState* %s246, i32 %argc1247, i8** %argv1248)
  br label %cond_end245

cond_end245:                                      ; preds = %cond_jump_then244, %cond_then_block238
  store i32 0, i32* @multiple_files, align 4
  store i32 0, i32* @output_type, align 4
  br label %end_blockX

after_break250:                                   ; No predecessors!
  br label %cond_else_blockX239
  br label %cond_else_blockX252

cond_then_block251:                               ; preds = %cond_else_blockX239
  br label %loop_top_block254

cond_else_blockX252:                              ; preds = %after_break273, %cond_else_blockX239, %after_break250
  %eqtmp276 = icmp eq i16 %index, 21
  br i1 %eqtmp276, label %cond_then_block274, label %cond_else_blockX275

loop_top_block254:                                ; preds = %loop_continue_top_block255, %cond_then_block251
  %s257 = load %TCCState*, %TCCState** %s, align 8
  %s258 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL259 = getelementptr inbounds %TCCState, %TCCState* %s258, i32 0, i32 41
  %verbose = load i32, i32* %fieldLLL259, align 4
  %add260 = add i32 %verbose, 1
  %fieldTU261 = getelementptr inbounds %TCCState, %TCCState* %s257, i32 0, i32 41
  store i32 %add260, i32* %fieldTU261, align 4
  %s262 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL263 = getelementptr inbounds %TCCState, %TCCState* %s262, i32 0, i32 41
  %verbose264 = load i32, i32* %fieldLLL263, align 4
  %sub265 = sub i32 %verbose264, 1
  %eq266 = icmp eq i32 0, %sub265
  br i1 %eq266, label %cond_jump_then267, label %cond_end268

loop_continue_top_block255:                       ; preds = %cond_end268
  %derefference_valueB270 = load i8, i8* null, align 1
  %icastL271 = sext i8 %derefference_valueB270 to i32
  %eq272 = icmp eq i32 %icastL271, 118
  br i1 %eq272, label %loop_top_block254, label %cond_end_block256

cond_end_block256:                                ; preds = %loop_continue_top_block255
  br label %end_blockX

cond_jump_then267:                                ; preds = %loop_top_block254
  %fun_result269 = call i32 (i8*, ...) @printf(i8* bitcast ([16 x i8]* @395 to i8*), i8* bitcast ([7 x i8]* @396 to i8*))
  br label %cond_end268

cond_end268:                                      ; preds = %cond_jump_then267, %loop_top_block254
  br label %loop_continue_top_block255

after_break273:                                   ; No predecessors!
  br label %cond_else_blockX252
  br label %cond_else_blockX275

cond_then_block274:                               ; preds = %cond_else_blockX252
  %s277 = load %TCCState*, %TCCState** %s, align 8
  %fun_result278 = call i32 @tcc_set_flag(%TCCState* %s277, i8* inttoptr (i64 1 to i8*), i32 1)
  %le279 = icmp slt i32 %fun_result278, 0
  store i1 %le279, i1* %andand, align 1
  br i1 %le279, label %cond_jump_then280, label %cond_jump_end281

cond_else_blockX275:                              ; preds = %after_break288, %cond_else_blockX252, %after_break273
  %eqtmp291 = icmp eq i16 %index, 18
  br i1 %eqtmp291, label %cond_then_block289, label %cond_else_blockX290

cond_jump_then280:                                ; preds = %cond_then_block274
  %s282 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL283 = getelementptr inbounds %TCCState, %TCCState* %s282, i32 0, i32 37
  %warn_unsupported = load i32, i32* %fieldLLL283, align 4
  %icmpA284 = icmp ne i32 %warn_unsupported, 0
  %andand285 = and i1 %le279, %icmpA284
  store i1 %andand285, i1* %andand, align 1
  br label %cond_jump_end281

cond_jump_end281:                                 ; preds = %cond_jump_then280, %cond_then_block274
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then286, label %cond_end287

cond_jump_then286:                                ; preds = %cond_jump_end281
  br label %parse_args.unsupported_option
  br label %cond_end287

cond_end287:                                      ; preds = %cond_jump_then286, %cond_jump_end281
  br label %end_blockX

parse_args.unsupported_option:                    ; preds = %cond_jump_then366, %cond_jump_then304, %cond_jump_then286
  %r368 = load i8*, i8** %r, align 8
  call void (i8*, ...) @warning(i8* bitcast ([24 x i8]* @403 to i8*), i8* %r368)
  br label %cond_end367

after_break288:                                   ; No predecessors!
  br label %cond_else_blockX275
  br label %cond_else_blockX290

cond_then_block289:                               ; preds = %cond_else_blockX275
  %s293 = load %TCCState*, %TCCState** %s, align 8
  %fun_result294 = call i32 @tcc_set_warning(%TCCState* %s293, i8* inttoptr (i64 1 to i8*), i32 1)
  %le295 = icmp slt i32 %fun_result294, 0
  store i1 %le295, i1* %andand292, align 1
  br i1 %le295, label %cond_jump_then296, label %cond_jump_end297

cond_else_blockX290:                              ; preds = %after_break306, %cond_else_blockX275, %after_break288
  %eqtmp309 = icmp eq i16 %index, 28
  br i1 %eqtmp309, label %cond_then_block307, label %cond_else_blockX308

cond_jump_then296:                                ; preds = %cond_then_block289
  %s298 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL299 = getelementptr inbounds %TCCState, %TCCState* %s298, i32 0, i32 37
  %warn_unsupported300 = load i32, i32* %fieldLLL299, align 4
  %icmpA301 = icmp ne i32 %warn_unsupported300, 0
  %andand302 = and i1 %le295, %icmpA301
  store i1 %andand302, i1* %andand292, align 1
  br label %cond_jump_end297

cond_jump_end297:                                 ; preds = %cond_jump_then296, %cond_then_block289
  %andand_result_value303 = load i1, i1* %andand292, align 1
  br i1 %andand_result_value303, label %cond_jump_then304, label %cond_end305

cond_jump_then304:                                ; preds = %cond_jump_end297
  br label %parse_args.unsupported_option
  br label %cond_end305

cond_end305:                                      ; preds = %cond_jump_then304, %cond_jump_end297
  br label %end_blockX

after_break306:                                   ; No predecessors!
  br label %cond_else_blockX290
  br label %cond_else_blockX308

cond_then_block307:                               ; preds = %cond_else_blockX290
  %s310 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU311 = getelementptr inbounds %TCCState, %TCCState* %s310, i32 0, i32 39
  store i32 1, i32* %fieldTU311, align 4
  br label %end_blockX

cond_else_blockX308:                              ; preds = %after_break312, %cond_else_blockX290, %after_break306
  %eqtmp315 = icmp eq i16 %index, 25
  br i1 %eqtmp315, label %cond_then_block313, label %cond_else_blockX314

after_break312:                                   ; No predecessors!
  br label %cond_else_blockX308
  br label %cond_else_blockX314

cond_then_block313:                               ; preds = %cond_else_blockX308
  %s316 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU317 = getelementptr inbounds %TCCState, %TCCState* %s316, i32 0, i32 29
  store i32 1, i32* %fieldTU317, align 4
  br label %end_blockX

cond_else_blockX314:                              ; preds = %after_break318, %cond_else_blockX308, %after_break312
  %eqtmp321 = icmp eq i16 %index, 17
  br i1 %eqtmp321, label %cond_then_block319, label %cond_else_blockX320

after_break318:                                   ; No predecessors!
  br label %cond_else_blockX314
  br label %cond_else_blockX320

cond_then_block319:                               ; preds = %cond_else_blockX314
  %p322 = load i8*, i8** %p, align 8
  %fun_result323 = call i32 @strstart(i8* inttoptr (i64 1 to i8*), i8* bitcast ([8 x i8]* @397 to i8*), i8** %p)
  %icmpA324 = icmp ne i32 %fun_result323, 0
  br i1 %icmpA324, label %cond_jump_then325, label %cond_jump_elif0

cond_else_blockX320:                              ; preds = %after_break355, %cond_else_blockX314, %after_break318
  %eqtmp358 = icmp eq i16 %index, 30
  br i1 %eqtmp358, label %cond_then_block356, label %cond_else_blockX357

cond_jump_then325:                                ; preds = %cond_then_block319
  %s328 = load %TCCState*, %TCCState** %s, align 8
  %p329 = load i8*, i8** %p, align 8
  %fun_result330 = call i64 @strtoul(i8* %p329, i8** null, i32 16)
  %fieldTU331 = getelementptr inbounds %TCCState, %TCCState* %s328, i32 0, i32 31
  store i64 %fun_result330, i64* %fieldTU331, align 4
  %s332 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU333 = getelementptr inbounds %TCCState, %TCCState* %s332, i32 0, i32 32
  store i32 1, i32* %fieldTU333, align 4
  br label %cond_end327

cond_jump_elif0:                                  ; preds = %cond_then_block319
  %p334 = load i8*, i8** %p, align 8
  %fun_result335 = call i32 @strstart(i8* inttoptr (i64 1 to i8*), i8* bitcast ([11 x i8]* @398 to i8*), i8** %p)
  %icmpA336 = icmp ne i32 %fun_result335, 0
  br i1 %icmpA336, label %cond_jump_elif_then0, label %cond_else_block326

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  %p337 = load i8*, i8** %p, align 8
  %fun_result338 = call i32 @strstart(i8* %p337, i8* bitcast ([7 x i8]* @399 to i8*), i8** null)
  %icmpA339 = icmp ne i32 %fun_result338, 0
  br i1 %icmpA339, label %cond_jump_then340, label %cond_jump_elif0341

cond_else_block326:                               ; preds = %cond_jump_elif0
  call void (i8*, ...) @error(i8* bitcast ([31 x i8]* @402 to i8*), i8* inttoptr (i64 1 to i8*))
  br label %cond_end327

cond_end327:                                      ; preds = %cond_else_block326, %cond_end344, %cond_jump_then325
  br label %end_blockX

cond_jump_then340:                                ; preds = %cond_jump_elif_then0
  %s345 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU346 = getelementptr inbounds %TCCState, %TCCState* %s345, i32 0, i32 33
  store i32 0, i32* %fieldTU346, align 4
  br label %cond_end344

cond_jump_elif0341:                               ; preds = %cond_jump_elif_then0
  %p347 = load i8*, i8** %p, align 8
  %fun_result348 = call i32 @strcmp(i8* %p347, i8* bitcast ([7 x i8]* @400 to i8*))
  %logical_denial349 = icmp eq i32 %fun_result348, 0
  %castOOOO350 = zext i1 %logical_denial349 to i32
  %icmpA351 = icmp ne i32 %castOOOO350, 0
  br i1 %icmpA351, label %cond_jump_elif_then0342, label %cond_else_block343

cond_jump_elif_then0342:                          ; preds = %cond_jump_elif0341
  %s352 = load %TCCState*, %TCCState** %s, align 8
  %fieldTU353 = getelementptr inbounds %TCCState, %TCCState* %s352, i32 0, i32 33
  store i32 1, i32* %fieldTU353, align 4
  br label %cond_end344

cond_else_block343:                               ; preds = %cond_jump_elif0341
  %p354 = load i8*, i8** %p, align 8
  call void (i8*, ...) @error(i8* bitcast ([20 x i8]* @401 to i8*), i8* %p354)
  br label %cond_end344

cond_end344:                                      ; preds = %cond_else_block343, %cond_jump_elif_then0342, %cond_jump_then340
  br label %cond_end327

after_break355:                                   ; No predecessors!
  br label %cond_else_blockX320
  br label %cond_else_blockX357

cond_then_block356:                               ; preds = %cond_else_blockX320
  store i32 4, i32* @output_type, align 4
  br label %end_blockX

cond_else_blockX357:                              ; preds = %after_break359, %cond_else_blockX320, %after_break355
  br label %cond_then_block360

after_break359:                                   ; No predecessors!
  br label %cond_else_blockX357
  br label %cond_else_blockX361

cond_then_block360:                               ; preds = %cond_else_blockX357
  %s362 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL363 = getelementptr inbounds %TCCState, %TCCState* %s362, i32 0, i32 37
  %warn_unsupported364 = load i32, i32* %fieldLLL363, align 4
  %icmpA365 = icmp ne i32 %warn_unsupported364, 0
  br i1 %icmpA365, label %cond_jump_then366, label %cond_end367

cond_else_blockX361:                              ; preds = %after_break369, %after_break359
  br label %end_blockX

cond_jump_then366:                                ; preds = %cond_then_block360
  br label %parse_args.unsupported_option

cond_end367:                                      ; preds = %parse_args.unsupported_option, %cond_then_block360
  br label %end_blockX

after_break369:                                   ; No predecessors!
  br label %cond_else_blockX361
}

define i32 @main(i32 %0, i8** %1) {
entry:
  %condtional_result_value228 = alloca i32, align 4
  %andand134 = alloca i1, align 1
  %filename = alloca i8*, align 8
  %andand120 = alloca i1, align 1
  %andand88 = alloca i1, align 1
  %andand87 = alloca i1, align 1
  %name = alloca i8*, align 8
  %condtional_result_value = alloca i8*, align 8
  %ext = alloca i8*, align 8
  %andand35 = alloca i1, align 1
  %andand27 = alloca i1, align 1
  %andand = alloca i1, align 1
  %oror = alloca i1, align 1
  %start_time = alloca i64, align 8
  %objfilename = alloca [1024 x i8], align 1
  %optind = alloca i32, align 4
  %ret = alloca i32, align 4
  %nb_objfiles = alloca i32, align 4
  %s = alloca %TCCState*, align 8
  %i = alloca i32, align 4
  %argc = alloca i32, align 4
  %argc1 = alloca i32*, align 8
  store i32 %0, i32* %argc, align 4
  store i32* %argc, i32** %argc1, align 8
  %argv = alloca i8**, align 8
  %argv2 = alloca i8***, align 8
  store i8** %1, i8*** %argv, align 8
  store i8*** %argv, i8**** %argv2, align 8
  store i64 0, i64* %start_time, align 4
  %fun_result = call %TCCState* @tcc_new()
  store %TCCState* %fun_result, %TCCState** %s, align 8
  store i32 1, i32* @output_type, align 4
  store i32 1, i32* @multiple_files, align 4
  store i8** null, i8*** @files, align 8
  store i32 0, i32* @nb_files, align 4
  store i32 0, i32* @nb_libraries, align 4
  store i32 0, i32* @reloc_output, align 4
  store i32 0, i32* @print_search_dirs, align 4
  store i32 0, i32* %ret, align 4
  %s3 = load %TCCState*, %TCCState** %s, align 8
  %argc4 = load i32, i32* %argc, align 4
  %sub = sub i32 %argc4, 1
  %argv5 = load i8**, i8*** %argv, align 8
  %ptrToIntC = ptrtoint i8** %argv5 to i64
  %add = add i64 %ptrToIntC, 8
  %intToPtrB = inttoptr i64 %add to i8**
  %fun_result6 = call i32 @parse_args(%TCCState* %s3, i32 %sub, i8** %intToPtrB)
  store i32 %fun_result6, i32* %optind, align 4
  %print_search_dirs = load i32, i32* @print_search_dirs, align 4
  %icmpA = icmp ne i32 %print_search_dirs, 0
  br i1 %icmpA, label %cond_jump_then, label %cond_end

cond_jump_then:                                   ; preds = %entry
  %s7 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL = getelementptr inbounds %TCCState, %TCCState* %s7, i32 0, i32 44
  %tcc_lib_path = load i8*, i8** %fieldLLL, align 8
  %fun_result8 = call i32 (i8*, ...) @printf(i8* bitcast ([14 x i8]* @404 to i8*), i8* %tcc_lib_path)
  ret i32 0

cond_end:                                         ; preds = %entry
  %optind9 = load i32, i32* %optind, align 4
  %eq = icmp eq i32 %optind9, 0
  store i1 %eq, i1* %oror, align 1
  br i1 %eq, label %cond_jump_end, label %cond_jump_then10

cond_jump_then10:                                 ; preds = %cond_end
  %nb_files = load i32, i32* @nb_files, align 4
  %eq11 = icmp eq i32 %nb_files, 0
  %oror12 = or i1 %eq, %eq11
  store i1 %oror12, i1* %oror, align 1
  br label %cond_jump_end

cond_jump_end:                                    ; preds = %cond_jump_then10, %cond_end
  %oror_result_value = load i1, i1* %oror, align 1
  br i1 %oror_result_value, label %cond_jump_then13, label %cond_end14

cond_jump_then13:                                 ; preds = %cond_jump_end
  %optind15 = load i32, i32* %optind, align 4
  %icmpA16 = icmp ne i32 %optind15, 0
  store i1 %icmpA16, i1* %andand, align 1
  br i1 %icmpA16, label %cond_jump_then17, label %cond_jump_end18

cond_end14:                                       ; preds = %cond_jump_end
  %nb_files25 = load i32, i32* @nb_files, align 4
  %nb_libraries = load i32, i32* @nb_libraries, align 4
  %sub26 = sub i32 %nb_files25, %nb_libraries
  store i32 %sub26, i32* %nb_objfiles, align 4
  store i1 false, i1* %andand27, align 1
  br i1 false, label %cond_jump_then28, label %cond_jump_end29

cond_jump_then17:                                 ; preds = %cond_jump_then13
  %s19 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL20 = getelementptr inbounds %TCCState, %TCCState* %s19, i32 0, i32 41
  %verbose = load i32, i32* %fieldLLL20, align 4
  %icmpA21 = icmp ne i32 %verbose, 0
  %andand22 = and i1 %icmpA16, %icmpA21
  store i1 %andand22, i1* %andand, align 1
  br label %cond_jump_end18

cond_jump_end18:                                  ; preds = %cond_jump_then17, %cond_jump_then13
  %andand_result_value = load i1, i1* %andand, align 1
  br i1 %andand_result_value, label %cond_jump_then23, label %cond_end24

cond_jump_then23:                                 ; preds = %cond_jump_end18
  ret i32 0

cond_end24:                                       ; preds = %cond_jump_end18
  call void @help()
  ret i32 1

cond_jump_then28:                                 ; preds = %cond_end14
  %output_type = load i32, i32* @output_type, align 4
  %eq30 = icmp eq i32 %output_type, 0
  %andand31 = and i1 false, %eq30
  store i1 %andand31, i1* %andand27, align 1
  br label %cond_jump_end29

cond_jump_end29:                                  ; preds = %cond_jump_then28, %cond_end14
  %andand_result_value32 = load i1, i1* %andand27, align 1
  br i1 %andand_result_value32, label %cond_jump_then33, label %cond_end34

cond_jump_then33:                                 ; preds = %cond_jump_end29
  store i32 1, i32* @output_type, align 4
  br label %cond_end34

cond_end34:                                       ; preds = %cond_jump_then33, %cond_jump_end29
  %output_type36 = load i32, i32* @output_type, align 4
  %eq37 = icmp eq i32 %output_type36, 3
  store i1 %eq37, i1* %andand35, align 1
  br i1 %eq37, label %cond_jump_then38, label %cond_jump_end39

cond_jump_then38:                                 ; preds = %cond_end34
  %reloc_output = load i32, i32* @reloc_output, align 4
  %logical_denial = icmp eq i32 %reloc_output, 0
  %castOOOO = zext i1 %logical_denial to i32
  %icmpA40 = icmp ne i32 %castOOOO, 0
  %andand41 = and i1 %eq37, %icmpA40
  store i1 %andand41, i1* %andand35, align 1
  br label %cond_jump_end39

cond_jump_end39:                                  ; preds = %cond_jump_then38, %cond_end34
  %andand_result_value42 = load i1, i1* %andand35, align 1
  br i1 %andand_result_value42, label %cond_jump_then43, label %cond_end44

cond_jump_then43:                                 ; preds = %cond_jump_end39
  %nb_objfiles45 = load i32, i32* %nb_objfiles, align 4
  %not_eq = icmp ne i32 %nb_objfiles45, 1
  br i1 %not_eq, label %cond_jump_then46, label %cond_end47

cond_end44:                                       ; preds = %cond_end51, %cond_jump_end39
  %output_type52 = load i32, i32* @output_type, align 4
  %eq53 = icmp eq i32 %output_type52, 4
  br i1 %eq53, label %cond_jump_then54, label %cond_jump_elif0

cond_jump_then46:                                 ; preds = %cond_jump_then43
  call void (i8*, ...) @error(i8* bitcast ([38 x i8]* @405 to i8*))
  br label %cond_end47

cond_end47:                                       ; preds = %cond_jump_then46, %cond_jump_then43
  %nb_libraries48 = load i32, i32* @nb_libraries, align 4
  %not_eq49 = icmp ne i32 %nb_libraries48, 0
  br i1 %not_eq49, label %cond_jump_then50, label %cond_end51

cond_jump_then50:                                 ; preds = %cond_end47
  call void (i8*, ...) @error(i8* bitcast ([33 x i8]* @406 to i8*))
  br label %cond_end51

cond_end51:                                       ; preds = %cond_jump_then50, %cond_end47
  br label %cond_end44

cond_jump_then54:                                 ; preds = %cond_end44
  br i1 true, label %cond_jump_then56, label %cond_else_block

cond_jump_elif0:                                  ; preds = %cond_end44
  %output_type69 = load i32, i32* @output_type, align 4
  %not_eq70 = icmp ne i32 %output_type69, 0
  br i1 %not_eq70, label %cond_jump_elif_then0, label %cond_end55

cond_jump_elif_then0:                             ; preds = %cond_jump_elif0
  br i1 true, label %cond_jump_then71, label %cond_end72

cond_end55:                                       ; preds = %cond_end72, %cond_jump_elif0, %cond_end57
  %do_bench = load i32, i32* @do_bench, align 4
  %icmpA113 = icmp ne i32 %do_bench, 0
  br i1 %icmpA113, label %cond_jump_then114, label %cond_end115

cond_jump_then56:                                 ; preds = %cond_jump_then54
  %s58 = load %TCCState*, %TCCState** %s, align 8
  %stdout = load %_IO_FILE*, %_IO_FILE** @stdout, align 8
  %fieldTU = getelementptr inbounds %TCCState, %TCCState* %s58, i32 0, i32 56
  store %_IO_FILE* %stdout, %_IO_FILE** %fieldTU, align 8
  br label %cond_end57

cond_else_block:                                  ; preds = %cond_jump_then54
  %s59 = load %TCCState*, %TCCState** %s, align 8
  %fun_result60 = call %_IO_FILE* @fopen(i8* null, i8* bitcast ([2 x i8]* @407 to i8*))
  %fieldTU61 = getelementptr inbounds %TCCState, %TCCState* %s59, i32 0, i32 56
  store %_IO_FILE* %fun_result60, %_IO_FILE** %fieldTU61, align 8
  %s62 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL63 = getelementptr inbounds %TCCState, %TCCState* %s62, i32 0, i32 56
  %outfile = load %_IO_FILE*, %_IO_FILE** %fieldLLL63, align 8
  %logical_denial64 = icmp eq %_IO_FILE* %outfile, null
  %castOOOO65 = zext i1 %logical_denial64 to i32
  %icmpA66 = icmp ne i32 %castOOOO65, 0
  br i1 %icmpA66, label %cond_jump_then67, label %cond_end68

cond_end57:                                       ; preds = %cond_end68, %cond_jump_then56
  br label %cond_end55

cond_jump_then67:                                 ; preds = %cond_else_block
  call void (i8*, ...) @error(i8* bitcast ([19 x i8]* @408 to i8*), i8* null)
  br label %cond_end68

cond_end68:                                       ; preds = %cond_jump_then67, %cond_else_block
  br label %cond_end57

cond_jump_then71:                                 ; preds = %cond_jump_elif_then0
  %files = load i8**, i8*** @files, align 8
  %element_addressAB = load i8**, i8*** @files, align 8
  %element_addressXYXZY = getelementptr inbounds i8*, i8** %element_addressAB, i32 0
  %load_element = load i8*, i8** %element_addressXYXZY, align 8
  %fun_result73 = call i32 @strcmp(i8* %load_element, i8* bitcast ([2 x i8]* @409 to i8*))
  %eq74 = icmp eq i32 %fun_result73, 0
  br i1 %eq74, label %cond_jump_then75, label %cond_else_block76

cond_end72:                                       ; preds = %cond_end107, %cond_jump_elif_then0
  br label %cond_end55

cond_jump_then75:                                 ; preds = %cond_jump_then71
  store i8* bitcast ([2 x i8]* @410 to i8*), i8** %condtional_result_value, align 8
  br label %cond_end77

cond_else_block76:                                ; preds = %cond_jump_then71
  %files78 = load i8**, i8*** @files, align 8
  %element_addressAB79 = load i8**, i8*** @files, align 8
  %element_addressXYXZY80 = getelementptr inbounds i8*, i8** %element_addressAB79, i32 0
  %load_element81 = load i8*, i8** %element_addressXYXZY80, align 8
  %fun_result82 = call i8* @tcc_basename(i8* %load_element81)
  store i8* %fun_result82, i8** %condtional_result_value, align 8
  br label %cond_end77

cond_end77:                                       ; preds = %cond_else_block76, %cond_jump_then75
  %conditional_result_value = load i8*, i8** %condtional_result_value, align 8
  store i8* %conditional_result_value, i8** %name, align 8
  %autocast = bitcast [1024 x i8]* %objfilename to i8*
  %name83 = load i8*, i8** %name, align 8
  %fun_result84 = call i8* @pstrcpy(i8* %autocast, i32 1024, i8* %name83)
  %autocast85 = bitcast [1024 x i8]* %objfilename to i8*
  %fun_result86 = call i8* @tcc_fileextension(i8* %autocast85)
  store i8* %fun_result86, i8** %ext, align 8
  %output_type89 = load i32, i32* @output_type, align 4
  %eq90 = icmp eq i32 %output_type89, 3
  store i1 %eq90, i1* %andand88, align 1
  br i1 %eq90, label %cond_jump_then91, label %cond_jump_end92

cond_jump_then91:                                 ; preds = %cond_end77
  %reloc_output93 = load i32, i32* @reloc_output, align 4
  %logical_denial94 = icmp eq i32 %reloc_output93, 0
  %castOOOO95 = zext i1 %logical_denial94 to i32
  %icmpA96 = icmp ne i32 %castOOOO95, 0
  %andand97 = and i1 %eq90, %icmpA96
  store i1 %andand97, i1* %andand88, align 1
  br label %cond_jump_end92

cond_jump_end92:                                  ; preds = %cond_jump_then91, %cond_end77
  %andand_result_value98 = load i1, i1* %andand88, align 1
  store i1 %andand_result_value98, i1* %andand87, align 1
  br i1 %andand_result_value98, label %cond_jump_then99, label %cond_jump_end100

cond_jump_then99:                                 ; preds = %cond_jump_end92
  %ext101 = load i8*, i8** %ext, align 8
  %derefference_valueB = load i8, i8* %ext101, align 1
  %icmpA102 = icmp ne i8 %derefference_valueB, 0
  %andand103 = and i1 %andand_result_value98, %icmpA102
  store i1 %andand103, i1* %andand87, align 1
  br label %cond_jump_end100

cond_jump_end100:                                 ; preds = %cond_jump_then99, %cond_jump_end92
  %andand_result_value104 = load i1, i1* %andand87, align 1
  br i1 %andand_result_value104, label %cond_jump_then105, label %cond_else_block106

cond_jump_then105:                                ; preds = %cond_jump_end100
  %ext108 = load i8*, i8** %ext, align 8
  %fun_result109 = call i8* @strcpy(i8* %ext108, i8* bitcast ([3 x i8]* @411 to i8*))
  br label %cond_end107

cond_else_block106:                               ; preds = %cond_jump_end100
  %autocast110 = bitcast [1024 x i8]* %objfilename to i8*
  %fun_result111 = call i8* @pstrcpy(i8* %autocast110, i32 1024, i8* bitcast ([6 x i8]* @412 to i8*))
  br label %cond_end107

cond_end107:                                      ; preds = %cond_else_block106, %cond_jump_then105
  %autocast112 = bitcast [1024 x i8]* %objfilename to i8*
  store i8* %autocast112, i8* null, align 8
  br label %cond_end72

cond_jump_then114:                                ; preds = %cond_end55
  %fun_result116 = call i64 @getclock_us()
  store i64 %fun_result116, i64* %start_time, align 4
  br label %cond_end115

cond_end115:                                      ; preds = %cond_jump_then114, %cond_end55
  %s117 = load %TCCState*, %TCCState** %s, align 8
  %output_type118 = load i32, i32* @output_type, align 4
  %fun_result119 = call i32 @tcc_set_output_type(%TCCState* %s117, i32 %output_type118)
  store i32 0, i32* %i, align 4
  br label %loop_top_block

loop_continue_top_block:                          ; preds = %cond_end151
  %i176 = load i32, i32* %i, align 4
  %add177 = add i32 %i176, 1
  store i32 %add177, i32* %i, align 4
  %i178 = load i32, i32* %i, align 4
  %sub179 = sub i32 %i178, 1
  br label %loop_top_block

loop_top_block:                                   ; preds = %loop_continue_top_block, %cond_end115
  %i121 = load i32, i32* %i, align 4
  %nb_files122 = load i32, i32* @nb_files, align 4
  %le = icmp slt i32 %i121, %nb_files122
  store i1 %le, i1* %andand120, align 1
  br i1 %le, label %cond_jump_then123, label %cond_jump_end124

cond_jump_then123:                                ; preds = %loop_top_block
  %ret125 = load i32, i32* %ret, align 4
  %eq126 = icmp eq i32 %ret125, 0
  %andand127 = and i1 %le, %eq126
  store i1 %andand127, i1* %andand120, align 1
  br label %cond_jump_end124

cond_jump_end124:                                 ; preds = %cond_jump_then123, %loop_top_block
  %andand_result_value128 = load i1, i1* %andand120, align 1
  br i1 %andand_result_value128, label %cond_then_block, label %cond_end_block

cond_then_block:                                  ; preds = %cond_jump_end124
  %files129 = load i8**, i8*** @files, align 8
  %i130 = load i32, i32* %i, align 4
  %element_addressAB131 = load i8**, i8*** @files, align 8
  %element_addressXYXZY132 = getelementptr inbounds i8*, i8** %element_addressAB131, i32 %i130
  %load_element133 = load i8*, i8** %element_addressXYXZY132, align 8
  store i8* %load_element133, i8** %filename, align 8
  %filename135 = load i8*, i8** %filename, align 8
  %element_addressAB136 = load i8*, i8** %filename, align 8
  %element_addressXYXZY137 = getelementptr inbounds i8, i8* %element_addressAB136, i32 0
  %load_element138 = load i8, i8* %element_addressXYXZY137, align 1
  %icastL = sext i8 %load_element138 to i32
  %eq139 = icmp eq i32 %icastL, 45
  store i1 %eq139, i1* %andand134, align 1
  br i1 %eq139, label %cond_jump_then140, label %cond_jump_end141

cond_end_block:                                   ; preds = %cond_jump_end124
  %files180 = load i8**, i8*** @files, align 8
  %castAQ = bitcast i8** %files180 to i8*
  call void @tcc_free(i8* %castAQ)
  %ret181 = load i32, i32* %ret, align 4
  %icmpA182 = icmp ne i32 %ret181, 0
  br i1 %icmpA182, label %cond_jump_then183, label %cond_end184

cond_jump_then140:                                ; preds = %cond_then_block
  %filename142 = load i8*, i8** %filename, align 8
  %element_addressAB143 = load i8*, i8** %filename, align 8
  %element_addressXYXZY144 = getelementptr inbounds i8, i8* %element_addressAB143, i32 1
  %load_element145 = load i8, i8* %element_addressXYXZY144, align 1
  %icmpA146 = icmp ne i8 %load_element145, 0
  %andand147 = and i1 %eq139, %icmpA146
  store i1 %andand147, i1* %andand134, align 1
  br label %cond_jump_end141

cond_jump_end141:                                 ; preds = %cond_jump_then140, %cond_then_block
  %andand_result_value148 = load i1, i1* %andand134, align 1
  br i1 %andand_result_value148, label %cond_jump_then149, label %cond_else_block150

cond_jump_then149:                                ; preds = %cond_jump_end141
  %s152 = load %TCCState*, %TCCState** %s, align 8
  %filename153 = load i8*, i8** %filename, align 8
  %ptrToIntC154 = ptrtoint i8* %filename153 to i64
  %add155 = add i64 %ptrToIntC154, 2
  %intToPtrB156 = inttoptr i64 %add155 to i8*
  %fun_result157 = call i32 @tcc_add_library(%TCCState* %s152, i8* %intToPtrB156)
  %le158 = icmp slt i32 %fun_result157, 0
  br i1 %le158, label %cond_jump_then159, label %cond_end160

cond_else_block150:                               ; preds = %cond_jump_end141
  %s162 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL163 = getelementptr inbounds %TCCState, %TCCState* %s162, i32 0, i32 41
  %verbose164 = load i32, i32* %fieldLLL163, align 4
  %eq165 = icmp eq i32 1, %verbose164
  br i1 %eq165, label %cond_jump_then166, label %cond_end167

cond_end151:                                      ; preds = %cond_end175, %cond_end160
  br label %loop_continue_top_block

cond_jump_then159:                                ; preds = %cond_jump_then149
  %filename161 = load i8*, i8** %filename, align 8
  call void (i8*, ...) @error_noabort(i8* bitcast ([15 x i8]* @413 to i8*), i8* %filename161)
  store i32 1, i32* %ret, align 4
  br label %cond_end160

cond_end160:                                      ; preds = %cond_jump_then159, %cond_jump_then149
  br label %cond_end151

cond_jump_then166:                                ; preds = %cond_else_block150
  %filename168 = load i8*, i8** %filename, align 8
  %fun_result169 = call i32 (i8*, ...) @printf(i8* bitcast ([7 x i8]* @414 to i8*), i8* %filename168)
  br label %cond_end167

cond_end167:                                      ; preds = %cond_jump_then166, %cond_else_block150
  %s170 = load %TCCState*, %TCCState** %s, align 8
  %filename171 = load i8*, i8** %filename, align 8
  %fun_result172 = call i32 @tcc_add_file(%TCCState* %s170, i8* %filename171)
  %le173 = icmp slt i32 %fun_result172, 0
  br i1 %le173, label %cond_jump_then174, label %cond_end175

cond_jump_then174:                                ; preds = %cond_end167
  store i32 1, i32* %ret, align 4
  br label %cond_end175

cond_end175:                                      ; preds = %cond_jump_then174, %cond_end167
  br label %cond_end151

cond_jump_then183:                                ; preds = %cond_end_block
  br label %main.the_end
  br label %cond_end184

cond_end184:                                      ; preds = %cond_jump_then183, %cond_end_block
  %do_bench185 = load i32, i32* @do_bench, align 4
  %icmpA186 = icmp ne i32 %do_bench185, 0
  br i1 %icmpA186, label %cond_jump_then187, label %cond_end188

main.the_end:                                     ; preds = %cond_end201, %cond_jump_then183
  %s230 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL231 = getelementptr inbounds %TCCState, %TCCState* %s230, i32 0, i32 43
  %do_bounds_check = load i32, i32* %fieldLLL231, align 4
  %logical_denial232 = icmp eq i32 %do_bounds_check, 0
  %castOOOO233 = zext i1 %logical_denial232 to i32
  %icmpA234 = icmp ne i32 %castOOOO233, 0
  br i1 %icmpA234, label %cond_jump_then235, label %cond_end236

cond_jump_then187:                                ; preds = %cond_end184
  %s189 = load %TCCState*, %TCCState** %s, align 8
  %fun_result190 = call i64 @getclock_us()
  %start_time191 = load i64, i64* %start_time, align 4
  %sub192 = sub i64 %fun_result190, %start_time191
  call void @tcc_print_stats(%TCCState* %s189, i64 %sub192)
  br label %cond_end188

cond_end188:                                      ; preds = %cond_jump_then187, %cond_end184
  %s193 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL194 = getelementptr inbounds %TCCState, %TCCState* %s193, i32 0, i32 0
  %output_type195 = load i32, i32* %fieldLLL194, align 4
  %eq196 = icmp eq i32 %output_type195, 4
  br i1 %eq196, label %cond_jump_then197, label %cond_jump_elif0198

cond_jump_then197:                                ; preds = %cond_end188
  br i1 false, label %cond_jump_then202, label %cond_end203

cond_jump_elif0198:                               ; preds = %cond_end188
  %s208 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL209 = getelementptr inbounds %TCCState, %TCCState* %s208, i32 0, i32 0
  %output_type210 = load i32, i32* %fieldLLL209, align 4
  %eq211 = icmp eq i32 %output_type210, 0
  br i1 %eq211, label %cond_jump_elif_then0199, label %cond_else_block200

cond_jump_elif_then0199:                          ; preds = %cond_jump_elif0198
  %s212 = load %TCCState*, %TCCState** %s, align 8
  %argc213 = load i32, i32* %argc, align 4
  %optind214 = load i32, i32* %optind, align 4
  %sub215 = sub i32 %argc213, %optind214
  %argv216 = load i8**, i8*** %argv, align 8
  %optind217 = load i32, i32* %optind, align 4
  %ptrToIntC218 = ptrtoint i8** %argv216 to i64
  %sext = sext i32 %optind217 to i64
  %mul = mul i64 %sext, 8
  %add219 = add i64 %ptrToIntC218, %mul
  %intToPtrB220 = inttoptr i64 %add219 to i8**
  %fun_result221 = call i32 @tcc_run(%TCCState* %s212, i32 %sub215, i8** %intToPtrB220)
  store i32 %fun_result221, i32* %ret, align 4
  br label %cond_end201

cond_else_block200:                               ; preds = %cond_jump_elif0198
  %s222 = load %TCCState*, %TCCState** %s, align 8
  %fun_result223 = call i32 @tcc_output_file(%TCCState* %s222, i8* null)
  %icmpA224 = icmp ne i32 %fun_result223, 0
  br i1 %icmpA224, label %cond_jump_then225, label %cond_else_block226

cond_end201:                                      ; preds = %cond_end227, %cond_jump_elif_then0199, %cond_end203
  br label %main.the_end

cond_jump_then202:                                ; preds = %cond_jump_then197
  %s204 = load %TCCState*, %TCCState** %s, align 8
  %fieldLLL205 = getelementptr inbounds %TCCState, %TCCState* %s204, i32 0, i32 56
  %outfile206 = load %_IO_FILE*, %_IO_FILE** %fieldLLL205, align 8
  %fun_result207 = call i32 @fclose(%_IO_FILE* %outfile206)
  br label %cond_end203

cond_end203:                                      ; preds = %cond_jump_then202, %cond_jump_then197
  br label %cond_end201

cond_jump_then225:                                ; preds = %cond_else_block200
  store i32 1, i32* %condtional_result_value228, align 4
  br label %cond_end227

cond_else_block226:                               ; preds = %cond_else_block200
  store i32 0, i32* %condtional_result_value228, align 4
  br label %cond_end227

cond_end227:                                      ; preds = %cond_else_block226, %cond_jump_then225
  %conditional_result_value229 = load i32, i32* %condtional_result_value228, align 4
  store i32 %conditional_result_value229, i32* %ret, align 4
  br label %cond_end201

cond_jump_then235:                                ; preds = %main.the_end
  %s237 = load %TCCState*, %TCCState** %s, align 8
  call void @tcc_delete(%TCCState* %s237)
  br label %cond_end236

cond_end236:                                      ; preds = %cond_jump_then235, %main.the_end
  %ret238 = load i32, i32* %ret, align 4
  ret i32 %ret238
}

attributes #0 = { nounwind }
attributes #1 = { nounwind willreturn }
attributes #2 = { nounwind readnone speculatable willreturn }
